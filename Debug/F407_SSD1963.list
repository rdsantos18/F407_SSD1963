
F407_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080046cc  080046cc  000146cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000052c  20000000  08004700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002052c  2**0
                  CONTENTS
  8 .bss          000008b4  2000052c  2000052c  0002052c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000de0  20000de0  0002052c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024a8d  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004cb4  00000000  00000000  00044fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000107f5  00000000  00000000  00049c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0005a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001990  00000000  00000000  0005b838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000afef  00000000  00000000  0005d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007a9c  00000000  00000000  000681b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006fc53  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d4c  00000000  00000000  0006fcd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000052c 	.word	0x2000052c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b4 	.word	0x080046b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000530 	.word	0x20000530
 80001c4:	080046b4 	.word	0x080046b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2230      	movs	r2, #48	; 0x30
{
 80004dc:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	eb0d 0002 	add.w	r0, sp, r2
 80004e2:	2100      	movs	r1, #0
 80004e4:	f003 ffae 	bl	8004444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	2214      	movs	r2, #20
 80004ea:	2100      	movs	r1, #0
 80004ec:	a807      	add	r0, sp, #28
 80004ee:	f003 ffa9 	bl	8004444 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f2:	2100      	movs	r1, #0
 80004f4:	2210      	movs	r2, #16
 80004f6:	a803      	add	r0, sp, #12
 80004f8:	f003 ffa4 	bl	8004444 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2500      	movs	r5, #0
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <SystemClock_Config+0xac>)
 8000500:	9501      	str	r5, [sp, #4]
 8000502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000504:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000508:	641a      	str	r2, [r3, #64]	; 0x40
 800050a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <SystemClock_Config+0xb0>)
 8000516:	9502      	str	r5, [sp, #8]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000534:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000536:	2308      	movs	r3, #8
 8000538:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800053a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000542:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000546:	2307      	movs	r3, #7
 8000548:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054a:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054e:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f001 fbd4 	bl	8001cfc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000558:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800055c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800055e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000564:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000566:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800056c:	f001 fd76 	bl	800205c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000570:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000572:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000574:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000576:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000578:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800057a:	f001 fe47 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800057e:	b018      	add	sp, #96	; 0x60
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800
 8000588:	40007000 	.word	0x40007000

0800058c <main>:
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000590:	f000 fb10 	bl	8000bb4 <HAL_Init>
  SystemClock_Config();
 8000594:	f7ff ffa0 	bl	80004d8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	2214      	movs	r2, #20
 800059a:	2100      	movs	r1, #0
 800059c:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f003 ff50 	bl	8004444 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a4:	4b83      	ldr	r3, [pc, #524]	; (80007b4 <main+0x228>)
 80005a6:	9401      	str	r4, [sp, #4]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005aa:	4883      	ldr	r0, [pc, #524]	; (80007b8 <main+0x22c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ac:	4f83      	ldr	r7, [pc, #524]	; (80007bc <main+0x230>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	f042 0210 	orr.w	r2, r2, #16
 80005b2:	631a      	str	r2, [r3, #48]	; 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b6:	f002 0210 	and.w	r2, r2, #16
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	9402      	str	r4, [sp, #8]
 80005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c2:	f042 0204 	orr.w	r2, r2, #4
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f002 0204 	and.w	r2, r2, #4
 80005ce:	9202      	str	r2, [sp, #8]
 80005d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	9403      	str	r4, [sp, #12]
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005da:	631a      	str	r2, [r3, #48]	; 0x30
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005e2:	9203      	str	r2, [sp, #12]
 80005e4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	9404      	str	r4, [sp, #16]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f002 0201 	and.w	r2, r2, #1
 80005f6:	9204      	str	r2, [sp, #16]
 80005f8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	9405      	str	r4, [sp, #20]
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fe:	f042 0202 	orr.w	r2, r2, #2
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f002 0202 	and.w	r2, r2, #2
 800060a:	9205      	str	r2, [sp, #20]
 800060c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	9406      	str	r4, [sp, #24]
 8000610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000612:	f042 0208 	orr.w	r2, r2, #8
 8000616:	631a      	str	r2, [r3, #48]	; 0x30
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000620:	4622      	mov	r2, r4
 8000622:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000626:	f000 fc39 	bl	8000e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|T_CS_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2111      	movs	r1, #17
 800062e:	4864      	ldr	r0, [pc, #400]	; (80007c0 <main+0x234>)
 8000630:	f000 fc34 	bl	8000e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800063a:	4862      	ldr	r0, [pc, #392]	; (80007c4 <main+0x238>)
 800063c:	f000 fc2e 	bl	8000e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000640:	4622      	mov	r2, r4
 8000642:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <main+0x23c>)
 8000648:	f000 fc28 	bl	8000e9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064e:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000650:	a907      	add	r1, sp, #28
 8000652:	4859      	ldr	r0, [pc, #356]	; (80007b8 <main+0x22c>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000654:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065c:	f000 fb3e 	bl	8000cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 8000660:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000662:	a907      	add	r1, sp, #28
 8000664:	4856      	ldr	r0, [pc, #344]	; (80007c0 <main+0x234>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 8000666:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f000 fb33 	bl	8000cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000676:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000678:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800067c:	4850      	ldr	r0, [pc, #320]	; (80007c0 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000684:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000688:	f000 fb28 	bl	8000cdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	a907      	add	r1, sp, #28
 800068e:	484f      	ldr	r0, [pc, #316]	; (80007cc <main+0x240>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000690:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000692:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000696:	f000 fb21 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800069a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800069c:	a907      	add	r1, sp, #28
 800069e:	4848      	ldr	r0, [pc, #288]	; (80007c0 <main+0x234>)
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80006a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f000 fb19 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006aa:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	a907      	add	r1, sp, #28
 80006ae:	4845      	ldr	r0, [pc, #276]	; (80007c4 <main+0x238>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f000 fb11 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006be:	a907      	add	r1, sp, #28
 80006c0:	4840      	ldr	r0, [pc, #256]	; (80007c4 <main+0x238>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006c2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f000 fb05 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_WR_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80006d2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	a907      	add	r1, sp, #28
 80006d8:	483a      	ldr	r0, [pc, #232]	; (80007c4 <main+0x238>)
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80006da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f000 fafb 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           TFT_D0_Pin TFT_D1_Pin TFT_D2_Pin TFT_D4_Pin 
                           TFT_D5_Pin TFT_D5D5_Pin TFT_D6_Pin TFT_D7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006e6:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
                          |TFT_D0_Pin|TFT_D1_Pin|TFT_D2_Pin|TFT_D4_Pin 
                          |TFT_D5_Pin|TFT_D5D5_Pin|TFT_D6_Pin|TFT_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	a907      	add	r1, sp, #28
 80006ec:	4836      	ldr	r0, [pc, #216]	; (80007c8 <main+0x23c>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f6:	f000 faf1 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006fa:	a907      	add	r1, sp, #28
 80006fc:	482e      	ldr	r0, [pc, #184]	; (80007b8 <main+0x22c>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006fe:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000700:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000704:	f000 faea 	bl	8000cdc <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000708:	4831      	ldr	r0, [pc, #196]	; (80007d0 <main+0x244>)
  hi2c1.Init.ClockSpeed = 100000;
 800070a:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <main+0x248>)
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <main+0x24c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070e:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000710:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000718:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	f001 f80e 	bl	8001744 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8000728:	482c      	ldr	r0, [pc, #176]	; (80007dc <main+0x250>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <main+0x254>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072c:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800072e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000732:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <main+0x258>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000738:	6105      	str	r5, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073a:	6143      	str	r3, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800073c:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800073e:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000740:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000742:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000744:	f001 f8a2 	bl	800188c <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <main+0x25c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4928      	ldr	r1, [pc, #160]	; (80007ec <main+0x260>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074c:	6185      	str	r5, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000752:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CRCPolynomial = 10;
 8000756:	230a      	movs	r3, #10
 8000758:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000760:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000762:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000768:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076a:	f001 fe15 	bl	8002398 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800076e:	4820      	ldr	r0, [pc, #128]	; (80007f0 <main+0x264>)
  huart2.Init.BaudRate = 115200;
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0x268>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8000774:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8000778:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	250c      	movs	r5, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000780:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000782:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000784:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000786:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000788:	f002 f896 	bl	80028b8 <HAL_UART_Init>
  huart3.Instance = USART3;
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <main+0x26c>)
  huart3.Init.BaudRate = 9600;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <main+0x270>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000790:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 9600;
 8000792:	f44f 5616 	mov.w	r6, #9600	; 0x2580
 8000796:	e880 0048 	stmia.w	r0, {r3, r6}
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079a:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079c:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800079e:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a0:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a4:	f002 f888 	bl	80028b8 <HAL_UART_Init>
  MX_USB_HOST_Init();
 80007a8:	f003 fa88 	bl	8003cbc <MX_USB_HOST_Init>
    MX_USB_HOST_Process();
 80007ac:	f003 faa6 	bl	8003cfc <MX_USB_HOST_Process>
 80007b0:	e7fc      	b.n	80007ac <main+0x220>
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	10120000 	.word	0x10120000
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40020000 	.word	0x40020000
 80007d0:	200005c8 	.word	0x200005c8
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0
 80007dc:	200006b4 	.word	0x200006b4
 80007e0:	40003c00 	.word	0x40003c00
 80007e4:	00017700 	.word	0x00017700
 80007e8:	2000061c 	.word	0x2000061c
 80007ec:	40013000 	.word	0x40013000
 80007f0:	20000674 	.word	0x20000674
 80007f4:	40004400 	.word	0x40004400
 80007f8:	20000588 	.word	0x20000588
 80007fc:	40004800 	.word	0x40004800

08000800 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000800:	6802      	ldr	r2, [r0, #0]
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000804:	429a      	cmp	r2, r3
 8000806:	d101      	bne.n	800080c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000808:	f000 b9ee 	b.w	8000be8 <HAL_IncTick>
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40001000 	.word	0x40001000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	4770      	bx	lr
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_MspInit+0x3c>)
 800081c:	2100      	movs	r1, #0
 800081e:	9100      	str	r1, [sp, #0]
 8000820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000826:	645a      	str	r2, [r3, #68]	; 0x44
 8000828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800082a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800082e:	9200      	str	r2, [sp, #0]
 8000830:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	9101      	str	r1, [sp, #4]
 8000834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000836:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800083a:	641a      	str	r2, [r3, #64]	; 0x40
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000844:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000848:	f000 f9f4 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	b003      	add	sp, #12
 800084e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	4604      	mov	r4, r0
 800085c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	2214      	movs	r2, #20
 8000860:	2100      	movs	r1, #0
 8000862:	a803      	add	r0, sp, #12
 8000864:	f003 fdee 	bl	8004444 <memset>
  if(hi2c->Instance==I2C1)
 8000868:	6822      	ldr	r2, [r4, #0]
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_I2C_MspInit+0x64>)
 800086c:	429a      	cmp	r2, r3
 800086e:	d122      	bne.n	80008b6 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4c13      	ldr	r4, [pc, #76]	; (80008c0 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	2500      	movs	r5, #0
 8000876:	9501      	str	r5, [sp, #4]
 8000878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	6323      	str	r3, [r4, #48]	; 0x30
 8000880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800088a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800088e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	2312      	movs	r3, #18
 8000892:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000894:	2301      	movs	r3, #1
 8000896:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089a:	2304      	movs	r3, #4
 800089c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f000 fa1d 	bl	8000cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a2:	9502      	str	r5, [sp, #8]
 80008a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008aa:	6423      	str	r3, [r4, #64]	; 0x40
 80008ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b6:	b009      	add	sp, #36	; 0x24
 80008b8:	bd30      	pop	{r4, r5, pc}
 80008ba:	bf00      	nop
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400

080008c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4604      	mov	r4, r0
 80008cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	2214      	movs	r2, #20
 80008d0:	2100      	movs	r1, #0
 80008d2:	a803      	add	r0, sp, #12
 80008d4:	f003 fdb6 	bl	8004444 <memset>
  if(hi2s->Instance==SPI3)
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_I2S_MspInit+0x88>)
 80008dc:	429a      	cmp	r2, r3
 80008de:	d135      	bne.n	800094c <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008e0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80008e4:	2400      	movs	r4, #0
 80008e6:	9400      	str	r4, [sp, #0]
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
 80008f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	9401      	str	r4, [sp, #4]
 80008fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000900:	f042 0201 	orr.w	r2, r2, #1
 8000904:	631a      	str	r2, [r3, #48]	; 0x30
 8000906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000908:	f002 0201 	and.w	r2, r2, #1
 800090c:	9201      	str	r2, [sp, #4]
 800090e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	9402      	str	r4, [sp, #8]
 8000912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000914:	f042 0204 	orr.w	r2, r2, #4
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000926:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000928:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800092a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800092c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000930:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000932:	f000 f9d3 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000936:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	a903      	add	r1, sp, #12
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800093e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000946:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f000 f9c8 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800094c:	b008      	add	sp, #32
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	40003c00 	.word	0x40003c00
 8000954:	40020000 	.word	0x40020000
 8000958:	40020800 	.word	0x40020800

0800095c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
 8000960:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	2214      	movs	r2, #20
 8000964:	2100      	movs	r1, #0
 8000966:	a803      	add	r0, sp, #12
 8000968:	f003 fd6c 	bl	8004444 <memset>
  if(hspi->Instance==SPI1)
 800096c:	6822      	ldr	r2, [r4, #0]
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_SPI_MspInit+0x60>)
 8000970:	429a      	cmp	r2, r3
 8000972:	d120      	bne.n	80009b6 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000974:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000978:	2100      	movs	r1, #0
 800097a:	9101      	str	r1, [sp, #4]
 800097c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	4810      	ldr	r0, [pc, #64]	; (80009c0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000980:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000984:	645a      	str	r2, [r3, #68]	; 0x44
 8000986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000988:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800098c:	9201      	str	r2, [sp, #4]
 800098e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	9102      	str	r1, [sp, #8]
 8000992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009a4:	23e0      	movs	r3, #224	; 0xe0
 80009a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ae:	2305      	movs	r3, #5
 80009b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f000 f993 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b6:	b008      	add	sp, #32
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	bf00      	nop
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40020000 	.word	0x40020000

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	2214      	movs	r2, #20
{
 80009c8:	b08a      	sub	sp, #40	; 0x28
 80009ca:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	2100      	movs	r1, #0
 80009ce:	eb0d 0002 	add.w	r0, sp, r2
 80009d2:	f003 fd37 	bl	8004444 <memset>
  if(huart->Instance==USART2)
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d125      	bne.n	8000a2a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	4827      	ldr	r0, [pc, #156]	; (8000a80 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e2:	2100      	movs	r1, #0
 80009e4:	9101      	str	r1, [sp, #4]
 80009e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009ec:	641a      	str	r2, [r3, #64]	; 0x40
 80009ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	9102      	str	r1, [sp, #8]
 80009fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a22:	f000 f95b 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a26:	b00a      	add	sp, #40	; 0x28
 8000a28:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <HAL_UART_MspInit+0xc0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d1fa      	bne.n	8000a26 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a34:	2100      	movs	r1, #0
 8000a36:	9103      	str	r1, [sp, #12]
 8000a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a42:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000a46:	9203      	str	r2, [sp, #12]
 8000a48:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	9104      	str	r1, [sp, #16]
 8000a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4e:	f042 0208 	orr.w	r2, r2, #8
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	9304      	str	r3, [sp, #16]
 8000a5c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a70:	2307      	movs	r3, #7
 8000a72:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	a905      	add	r1, sp, #20
 8000a76:	e7d4      	b.n	8000a22 <HAL_UART_MspInit+0x5e>
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40004800 	.word	0x40004800
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000a8e:	4601      	mov	r1, r0
{
 8000a90:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000a92:	2200      	movs	r2, #0
 8000a94:	2036      	movs	r0, #54	; 0x36
 8000a96:	f000 f8df 	bl	8000c58 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000a9a:	2036      	movs	r0, #54	; 0x36
 8000a9c:	f000 f910 	bl	8000cc0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_InitTick+0x6c>)
 8000aa4:	9502      	str	r5, [sp, #8]
 8000aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa8:	4c14      	ldr	r4, [pc, #80]	; (8000afc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aaa:	f042 0210 	orr.w	r2, r2, #16
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	a901      	add	r1, sp, #4
 8000aba:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000abc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000abe:	f001 fb87 	bl	80021d0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac2:	f001 fb65 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_InitTick+0x74>)
 8000ac8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000aca:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000ace:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_InitTick+0x78>)
 8000ad4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ad8:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ada:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000adc:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8000ade:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ae2:	f001 fdb3 	bl	800264c <HAL_TIM_Base_Init>
 8000ae6:	b920      	cbnz	r0, 8000af2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f001 fc93 	bl	8002414 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000aee:	b009      	add	sp, #36	; 0x24
 8000af0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8000af2:	2001      	movs	r0, #1
 8000af4:	e7fb      	b.n	8000aee <HAL_InitTick+0x62>
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	200006fc 	.word	0x200006fc
 8000b00:	40001000 	.word	0x40001000
 8000b04:	000f4240 	.word	0x000f4240

08000b08 <NMI_Handler>:
 8000b08:	4770      	bx	lr

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler>

08000b12 <SVC_Handler>:
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	4770      	bx	lr
	...

08000b1c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b1c:	4801      	ldr	r0, [pc, #4]	; (8000b24 <TIM6_DAC_IRQHandler+0x8>)
 8000b1e:	f001 bc8d 	b.w	800243c <HAL_TIM_IRQHandler>
 8000b22:	bf00      	nop
 8000b24:	200006fc 	.word	0x200006fc

08000b28 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b28:	4801      	ldr	r0, [pc, #4]	; (8000b30 <OTG_FS_IRQHandler+0x8>)
 8000b2a:	f000 bab3 	b.w	8001094 <HAL_HCD_IRQHandler>
 8000b2e:	bf00      	nop
 8000b30:	20000b0c 	.word	0x20000b0c

08000b34 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000b34:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <_sbrk+0x2c>)
 8000b38:	6819      	ldr	r1, [r3, #0]
{
 8000b3a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000b3c:	b909      	cbnz	r1, 8000b42 <_sbrk+0xe>
		heap_end = &end;
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <_sbrk+0x30>)
 8000b40:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8000b42:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000b44:	4669      	mov	r1, sp
 8000b46:	4402      	add	r2, r0
 8000b48:	428a      	cmp	r2, r1
 8000b4a:	d906      	bls.n	8000b5a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000b4c:	f003 fa32 	bl	8003fb4 <__errno>
 8000b50:	230c      	movs	r3, #12
 8000b52:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000b5a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000b5c:	bd08      	pop	{r3, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000548 	.word	0x20000548
 8000b64:	20000de0 	.word	0x20000de0

08000b68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	490f      	ldr	r1, [pc, #60]	; (8000ba8 <SystemInit+0x40>)
 8000b6a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <SystemInit+0x44>)
 8000b78:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b7a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000b7c:	f042 0201 	orr.w	r2, r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000b82:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <SystemInit+0x48>)
 8000b92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b9a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b9c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba2:	608b      	str	r3, [r1, #8]
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	24003010 	.word	0x24003010

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x30>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bbe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bc6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f82f 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff58 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe1c 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000be0:	2000      	movs	r0, #0
 8000be2:	bd08      	pop	{r3, pc}
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000be8:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <HAL_IncTick+0x10>)
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_IncTick+0x14>)
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	440b      	add	r3, r1
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000073c 	.word	0x2000073c
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <HAL_GetTick+0x8>)
 8000c02:	6818      	ldr	r0, [r3, #0]
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000073c 	.word	0x2000073c

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff fff6 	bl	8000c00 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c14:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	bf1c      	itt	ne
 8000c18:	4b05      	ldrne	r3, [pc, #20]	; (8000c30 <HAL_Delay+0x24>)
 8000c1a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	bf18      	it	ne
 8000c20:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c22:	f7ff ffed 	bl	8000c00 <HAL_GetTick>
 8000c26:	1b40      	subs	r0, r0, r5
 8000c28:	4284      	cmp	r4, r0
 8000c2a:	d8fa      	bhi.n	8000c22 <HAL_Delay+0x16>
  {
  }
}
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	0200      	lsls	r0, r0, #8
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c50:	60d3      	str	r3, [r2, #12]
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b530      	push	{r4, r5, lr}
 8000c5c:	68dc      	ldr	r4, [r3, #12]
 8000c5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	bf28      	it	cs
 8000c6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 0501 	mov.w	r5, #1
 8000c74:	fa05 f303 	lsl.w	r3, r5, r3
 8000c78:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7c:	bf8c      	ite	hi
 8000c7e:	3c03      	subhi	r4, #3
 8000c80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c82:	4019      	ands	r1, r3
 8000c84:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c86:	fa05 f404 	lsl.w	r4, r5, r4
 8000c8a:	3c01      	subs	r4, #1
 8000c8c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	ea42 0201 	orr.w	r2, r2, r1
 8000c94:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	bfad      	iteet	ge
 8000c9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	f000 000f 	andlt.w	r0, r0, #15
 8000ca2:	4b06      	ldrlt	r3, [pc, #24]	; (8000cbc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	bfb5      	itete	lt
 8000caa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cb4:	bd30      	pop	{r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	e000ed14 	.word	0xe000ed14

08000cc0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	db08      	blt.n	8000cd6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc4:	0942      	lsrs	r2, r0, #5
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f000 001f 	and.w	r0, r0, #31
 8000ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <HAL_NVIC_EnableIRQ+0x18>)
 8000cd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000e94 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce8:	4a68      	ldr	r2, [pc, #416]	; (8000e8c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000e98 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000cf2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000cf8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000d00:	45b6      	cmp	lr, r6
 8000d02:	f040 80ae 	bne.w	8000e62 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	684c      	ldr	r4, [r1, #4]
 8000d08:	f024 0710 	bic.w	r7, r4, #16
 8000d0c:	2f02      	cmp	r7, #2
 8000d0e:	d116      	bne.n	8000d3e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d14:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d18:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d1c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d20:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d24:	f04f 0c0f 	mov.w	ip, #15
 8000d28:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d2c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d30:	690d      	ldr	r5, [r1, #16]
 8000d32:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d36:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000d3a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000d3e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d42:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d44:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d48:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d4c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d52:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d56:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d62:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d66:	d811      	bhi.n	8000d8c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000d68:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d6a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	68cf      	ldr	r7, [r1, #12]
 8000d70:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d74:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d78:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d7a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d80:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000d84:	409f      	lsls	r7, r3
 8000d86:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d8a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d8c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	688f      	ldr	r7, [r1, #8]
 8000d92:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d96:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d98:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9a:	00e5      	lsls	r5, r4, #3
 8000d9c:	d561      	bpl.n	8000e62 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	f04f 0b00 	mov.w	fp, #0
 8000da2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000da6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000daa:	4d39      	ldr	r5, [pc, #228]	; (8000e90 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000db0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000db4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000db8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000dbc:	9703      	str	r7, [sp, #12]
 8000dbe:	9f03      	ldr	r7, [sp, #12]
 8000dc0:	f023 0703 	bic.w	r7, r3, #3
 8000dc4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dc8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dcc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000dd8:	f04f 0e0f 	mov.w	lr, #15
 8000ddc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	d043      	beq.n	8000e70 <HAL_GPIO_Init+0x194>
 8000de8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dec:	42a8      	cmp	r0, r5
 8000dee:	d041      	beq.n	8000e74 <HAL_GPIO_Init+0x198>
 8000df0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df4:	42a8      	cmp	r0, r5
 8000df6:	d03f      	beq.n	8000e78 <HAL_GPIO_Init+0x19c>
 8000df8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dfc:	42a8      	cmp	r0, r5
 8000dfe:	d03d      	beq.n	8000e7c <HAL_GPIO_Init+0x1a0>
 8000e00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	d03b      	beq.n	8000e80 <HAL_GPIO_Init+0x1a4>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d03b      	beq.n	8000e84 <HAL_GPIO_Init+0x1a8>
 8000e0c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e10:	42a8      	cmp	r0, r5
 8000e12:	d039      	beq.n	8000e88 <HAL_GPIO_Init+0x1ac>
 8000e14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	bf14      	ite	ne
 8000e1c:	2508      	movne	r5, #8
 8000e1e:	2507      	moveq	r5, #7
 8000e20:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e24:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e2a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e2e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e32:	bf0c      	ite	eq
 8000e34:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e36:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000e38:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000e3a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e3c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e40:	bf0c      	ite	eq
 8000e42:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e44:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000e46:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e48:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	bf0c      	ite	eq
 8000e50:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e52:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000e54:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000e56:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	bf54      	ite	pl
 8000e5c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000e5e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000e60:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	3301      	adds	r3, #1
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	f47f af44 	bne.w	8000cf2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000e6a:	b005      	add	sp, #20
 8000e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e70:	465d      	mov	r5, fp
 8000e72:	e7d5      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e74:	2501      	movs	r5, #1
 8000e76:	e7d3      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e78:	2502      	movs	r5, #2
 8000e7a:	e7d1      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e7c:	2503      	movs	r5, #3
 8000e7e:	e7cf      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e80:	2504      	movs	r5, #4
 8000e82:	e7cd      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e84:	2505      	movs	r5, #5
 8000e86:	e7cb      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e88:	2506      	movs	r5, #6
 8000e8a:	e7c9      	b.n	8000e20 <HAL_GPIO_Init+0x144>
 8000e8c:	40013c00 	.word	0x40013c00
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40021400 	.word	0x40021400

08000e9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e9c:	b10a      	cbz	r2, 8000ea2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9e:	6181      	str	r1, [r0, #24]
 8000ea0:	4770      	bx	lr
 8000ea2:	0409      	lsls	r1, r1, #16
 8000ea4:	e7fb      	b.n	8000e9e <HAL_GPIO_WritePin+0x2>

08000ea6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ea6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eaa:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000eac:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000eb0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8000eb4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8000eb8:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000ebc:	2801      	cmp	r0, #1
 8000ebe:	d028      	beq.n	8000f12 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8000ec0:	2028      	movs	r0, #40	; 0x28
 8000ec2:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8000ec6:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000ec8:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000eca:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8000ece:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000ed2:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000ed6:	bf08      	it	eq
 8000ed8:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8000eda:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ede:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000ee2:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000ee6:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000eea:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000eee:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000ef2:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000ef6:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8000efa:	f8cd c008 	str.w	ip, [sp, #8]
 8000efe:	e88d 4080 	stmia.w	sp, {r7, lr}
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	f001 fea8 	bl	8002c58 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000f08:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000f0c:	b004      	add	sp, #16
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8000f12:	2002      	movs	r0, #2
 8000f14:	e7fa      	b.n	8000f0c <HAL_HCD_HC_Init+0x66>

08000f16 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000f16:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000f1a:	2b01      	cmp	r3, #1
{
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000f20:	d009      	beq.n	8000f36 <HAL_HCD_HC_Halt+0x20>
 8000f22:	2301      	movs	r3, #1
 8000f24:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f28:	6800      	ldr	r0, [r0, #0]
 8000f2a:	f001 ff1f 	bl	8002d6c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8000f34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000f36:	2002      	movs	r0, #2
}
 8000f38:	bd10      	pop	{r4, pc}

08000f3a <HAL_HCD_Init>:
{
 8000f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000f3e:	4607      	mov	r7, r0
{
 8000f40:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d041      	beq.n	8000fca <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f46:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000f4a:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f50:	b91b      	cbnz	r3, 8000f5a <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8000f52:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000f56:	f002 fed7 	bl	8003d08 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8000f62:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f64:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000f68:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000f6c:	bf08      	it	eq
 8000f6e:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000f70:	f001 fd2e 	bl	80029d0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f76:	466d      	mov	r5, sp
 8000f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f86:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000f8a:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f8c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000f90:	6838      	ldr	r0, [r7, #0]
 8000f92:	f001 fcd7 	bl	8002944 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000f96:	f856 0b10 	ldr.w	r0, [r6], #16
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	f001 fd1e 	bl	80029dc <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000fa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa2:	466d      	mov	r5, sp
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f001 fdce 	bl	8002b58 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
}
 8000fc4:	b00a      	add	sp, #40	; 0x28
 8000fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	e7fa      	b.n	8000fc4 <HAL_HCD_Init+0x8a>
	...

08000fd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000fd2:	2428      	movs	r4, #40	; 0x28
 8000fd4:	fb04 0401 	mla	r4, r4, r1, r0
{
 8000fd8:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000fdc:	9e06      	ldr	r6, [sp, #24]
 8000fde:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000fe2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000fe6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8000fea:	b96f      	cbnz	r7, 8001008 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000fec:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000fee:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000ff4:	d02b      	beq.n	800104e <HAL_HCD_HC_SubmitRequest+0x7e>
 8000ff6:	42bb      	cmp	r3, r7
 8000ff8:	d029      	beq.n	800104e <HAL_HCD_HC_SubmitRequest+0x7e>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d131      	bne.n	8001062 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ffe:	2328      	movs	r3, #40	; 0x28
 8001000:	fb03 0301 	mla	r3, r3, r1, r0
 8001004:	2200      	movs	r2, #0
 8001006:	e02a      	b.n	800105e <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001008:	f04f 0e02 	mov.w	lr, #2
 800100c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001010:	2b03      	cmp	r3, #3
 8001012:	d826      	bhi.n	8001062 <HAL_HCD_HC_SubmitRequest+0x92>
 8001014:	a401      	add	r4, pc, #4	; (adr r4, 800101c <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001016:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	0800102d 	.word	0x0800102d
 8001020:	08000fff 	.word	0x08000fff
 8001024:	0800104f 	.word	0x0800104f
 8001028:	0800104f 	.word	0x0800104f
      if ((token == 1U) && (direction == 0U)) /*send data */
 800102c:	2f01      	cmp	r7, #1
 800102e:	d118      	bne.n	8001062 <HAL_HCD_HC_SubmitRequest+0x92>
 8001030:	b9ba      	cbnz	r2, 8001062 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001032:	b925      	cbnz	r5, 800103e <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001034:	2328      	movs	r3, #40	; 0x28
 8001036:	fb03 0301 	mla	r3, r3, r1, r0
 800103a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800103e:	2328      	movs	r3, #40	; 0x28
 8001040:	fb03 0301 	mla	r3, r3, r1, r0
 8001044:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001048:	b14a      	cbz	r2, 800105e <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800104a:	2202      	movs	r2, #2
 800104c:	e007      	b.n	800105e <HAL_HCD_HC_SubmitRequest+0x8e>
 800104e:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001050:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001054:	b9d2      	cbnz	r2, 800108c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001056:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800105a:	2c00      	cmp	r4, #0
 800105c:	d1f5      	bne.n	800104a <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800105e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001062:	2428      	movs	r4, #40	; 0x28
 8001064:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001068:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800106a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800106e:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001070:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001072:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001078:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 800107a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800107e:	3138      	adds	r1, #56	; 0x38
 8001080:	7c02      	ldrb	r2, [r0, #16]
 8001082:	6800      	ldr	r0, [r0, #0]
}
 8001084:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001088:	f001 bed4 	b.w	8002e34 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800108c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001090:	e7da      	b.n	8001048 <HAL_HCD_HC_SubmitRequest+0x78>
 8001092:	bf00      	nop

08001094 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001098:	6806      	ldr	r6, [r0, #0]
{
 800109a:	b087      	sub	sp, #28
 800109c:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800109e:	4630      	mov	r0, r6
 80010a0:	f001 fcfc 	bl	8002a9c <USB_GetMode>
 80010a4:	2801      	cmp	r0, #1
 80010a6:	f040 80b4 	bne.w	8001212 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f001 fcf2 	bl	8002a94 <USB_ReadInterrupts>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f000 80ae 	beq.w	8001212 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	f001 fcec 	bl	8002a94 <USB_ReadInterrupts>
 80010bc:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010be:	bf48      	it	mi
 80010c0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010c2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010c4:	bf44      	itt	mi
 80010c6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 80010ca:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010cc:	f001 fce2 	bl	8002a94 <USB_ReadInterrupts>
 80010d0:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010d2:	bf48      	it	mi
 80010d4:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010d6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010d8:	bf44      	itt	mi
 80010da:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 80010de:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010e0:	f001 fcd8 	bl	8002a94 <USB_ReadInterrupts>
 80010e4:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010e6:	bf48      	it	mi
 80010e8:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010ea:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010ec:	bf44      	itt	mi
 80010ee:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80010f2:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010f4:	f001 fcce 	bl	8002a94 <USB_ReadInterrupts>
 80010f8:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80010fa:	bf48      	it	mi
 80010fc:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010fe:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001100:	bf44      	itt	mi
 8001102:	2202      	movmi	r2, #2
 8001104:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001106:	f001 fcc5 	bl	8002a94 <USB_ReadInterrupts>
 800110a:	0082      	lsls	r2, r0, #2
 800110c:	d510      	bpl.n	8001130 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800110e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001112:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001116:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800111a:	4620      	mov	r0, r4
 800111c:	f002 fe44 	bl	8003da8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001120:	2101      	movs	r1, #1
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	f001 fcbe 	bl	8002aa4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800112e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	f001 fcaf 	bl	8002a94 <USB_ReadInterrupts>
 8001136:	01c3      	lsls	r3, r0, #7
 8001138:	d542      	bpl.n	80011c0 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800113a:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800113c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001140:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001142:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001146:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001148:	9b05      	ldr	r3, [sp, #20]
 800114a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800114e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001150:	9b04      	ldr	r3, [sp, #16]
 8001152:	079f      	lsls	r7, r3, #30
 8001154:	d50d      	bpl.n	8001172 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001156:	9b04      	ldr	r3, [sp, #16]
 8001158:	07d8      	lsls	r0, r3, #31
 800115a:	d506      	bpl.n	800116a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800115c:	69ab      	ldr	r3, [r5, #24]
 800115e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001162:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001164:	4620      	mov	r0, r4
 8001166:	f002 fe1b 	bl	8003da0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800116a:	9b05      	ldr	r3, [sp, #20]
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001172:	9b04      	ldr	r3, [sp, #16]
 8001174:	0719      	lsls	r1, r3, #28
 8001176:	d519      	bpl.n	80011ac <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001178:	9b05      	ldr	r3, [sp, #20]
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001180:	9b04      	ldr	r3, [sp, #16]
 8001182:	075a      	lsls	r2, r3, #29
 8001184:	d550      	bpl.n	8001228 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001186:	69a1      	ldr	r1, [r4, #24]
 8001188:	2902      	cmp	r1, #2
 800118a:	d145      	bne.n	8001218 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800118c:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800118e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001190:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001198:	bf18      	it	ne
 800119a:	2101      	movne	r1, #1
 800119c:	f001 fc82 	bl	8002aa4 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80011a0:	4620      	mov	r0, r4
 80011a2:	f002 fe06 	bl	8003db2 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80011a6:	4620      	mov	r0, r4
 80011a8:	f002 fdfa 	bl	8003da0 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80011ac:	9b04      	ldr	r3, [sp, #16]
 80011ae:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80011b0:	bf42      	ittt	mi
 80011b2:	9b05      	ldrmi	r3, [sp, #20]
 80011b4:	f043 0320 	orrmi.w	r3, r3, #32
 80011b8:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80011ba:	9b05      	ldr	r3, [sp, #20]
 80011bc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011c0:	6820      	ldr	r0, [r4, #0]
 80011c2:	f001 fc67 	bl	8002a94 <USB_ReadInterrupts>
 80011c6:	0707      	lsls	r7, r0, #28
 80011c8:	d505      	bpl.n	80011d6 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 80011ca:	4620      	mov	r0, r4
 80011cc:	f002 fde4 	bl	8003d98 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	2208      	movs	r2, #8
 80011d4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011d6:	6820      	ldr	r0, [r4, #0]
 80011d8:	f001 fc5c 	bl	8002a94 <USB_ReadInterrupts>
 80011dc:	0185      	lsls	r5, r0, #6
 80011de:	d512      	bpl.n	8001206 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011e0:	6820      	ldr	r0, [r4, #0]
 80011e2:	f001 fdbe 	bl	8002d62 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011e6:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011ea:	9001      	str	r0, [sp, #4]
 80011ec:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011f0:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80011f2:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011f6:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011f8:	68a3      	ldr	r3, [r4, #8]
 80011fa:	459a      	cmp	sl, r3
 80011fc:	d323      	bcc.n	8001246 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001204:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	f001 fc44 	bl	8002a94 <USB_ReadInterrupts>
 800120c:	06c3      	lsls	r3, r0, #27
 800120e:	f100 8220 	bmi.w	8001652 <HAL_HCD_IRQHandler+0x5be>
}
 8001212:	b007      	add	sp, #28
 8001214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001218:	68e3      	ldr	r3, [r4, #12]
 800121a:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800121c:	bf04      	itt	eq
 800121e:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001222:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001226:	e7bb      	b.n	80011a0 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001228:	4620      	mov	r0, r4
 800122a:	f002 fdc6 	bl	8003dba <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800122e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001232:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001234:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001238:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800123c:	6993      	ldr	r3, [r2, #24]
 800123e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	e7b2      	b.n	80011ac <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001246:	9a01      	ldr	r2, [sp, #4]
 8001248:	f00a 030f 	and.w	r3, sl, #15
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	07d8      	lsls	r0, r3, #31
 8001252:	f140 808a 	bpl.w	800136a <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001256:	f8d8 3000 	ldr.w	r3, [r8]
 800125a:	6820      	ldr	r0, [r4, #0]
 800125c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001260:	fa5f f58a 	uxtb.w	r5, sl
 8001264:	f000 8104 	beq.w	8001470 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001268:	016a      	lsls	r2, r5, #5
 800126a:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 800126e:	18d6      	adds	r6, r2, r3
 8001270:	68b1      	ldr	r1, [r6, #8]
 8001272:	0749      	lsls	r1, r1, #29
 8001274:	d513      	bpl.n	800129e <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001276:	2104      	movs	r1, #4
 8001278:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800127a:	68f1      	ldr	r1, [r6, #12]
 800127c:	f041 0102 	orr.w	r1, r1, #2
 8001280:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001282:	68b1      	ldr	r1, [r6, #8]
 8001284:	0589      	lsls	r1, r1, #22
 8001286:	d542      	bpl.n	800130e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001288:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800128a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001292:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001294:	f001 fd6a 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	e0c7      	b.n	800142e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800129e:	68b1      	ldr	r1, [r6, #8]
 80012a0:	0689      	lsls	r1, r1, #26
 80012a2:	d502      	bpl.n	80012aa <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80012a4:	2120      	movs	r1, #32
 80012a6:	60b1      	str	r1, [r6, #8]
 80012a8:	e7eb      	b.n	8001282 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80012aa:	68b1      	ldr	r1, [r6, #8]
 80012ac:	0709      	lsls	r1, r1, #28
 80012ae:	d515      	bpl.n	80012dc <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012b0:	68f1      	ldr	r1, [r6, #12]
 80012b2:	9303      	str	r3, [sp, #12]
 80012b4:	f041 0102 	orr.w	r1, r1, #2
 80012b8:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80012ba:	fb07 4105 	mla	r1, r7, r5, r4
 80012be:	f04f 0e05 	mov.w	lr, #5
 80012c2:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012c6:	2110      	movs	r1, #16
 80012c8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80012ca:	2108      	movs	r1, #8
 80012cc:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ce:	4629      	mov	r1, r5
 80012d0:	9202      	str	r2, [sp, #8]
 80012d2:	f001 fd4b 	bl	8002d6c <USB_HC_Halt>
 80012d6:	9a02      	ldr	r2, [sp, #8]
 80012d8:	9b03      	ldr	r3, [sp, #12]
 80012da:	e7d2      	b.n	8001282 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80012dc:	68b1      	ldr	r1, [r6, #8]
 80012de:	0549      	lsls	r1, r1, #21
 80012e0:	d5cf      	bpl.n	8001282 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012e2:	68f1      	ldr	r1, [r6, #12]
 80012e4:	9303      	str	r3, [sp, #12]
 80012e6:	f041 0102 	orr.w	r1, r1, #2
 80012ea:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ec:	4629      	mov	r1, r5
 80012ee:	9202      	str	r2, [sp, #8]
 80012f0:	f001 fd3c 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80012f4:	2110      	movs	r1, #16
 80012f6:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012f8:	fb07 4105 	mla	r1, r7, r5, r4
 80012fc:	2008      	movs	r0, #8
 80012fe:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001306:	60b1      	str	r1, [r6, #8]
 8001308:	9b03      	ldr	r3, [sp, #12]
 800130a:	9a02      	ldr	r2, [sp, #8]
 800130c:	e7b9      	b.n	8001282 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800130e:	68b1      	ldr	r1, [r6, #8]
 8001310:	07c8      	lsls	r0, r1, #31
 8001312:	d53d      	bpl.n	8001390 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001314:	6921      	ldr	r1, [r4, #16]
 8001316:	b149      	cbz	r1, 800132c <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001318:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800131c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800131e:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001322:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001326:	1a09      	subs	r1, r1, r0
 8001328:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800132c:	fb07 4e05 	mla	lr, r7, r5, r4
 8001330:	2001      	movs	r0, #1
 8001332:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001336:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800133a:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800133c:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8001340:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001344:	d116      	bne.n	8001374 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001346:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001348:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001350:	4629      	mov	r1, r5
 8001352:	f001 fd0b 	bl	8002d6c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001356:	2310      	movs	r3, #16
 8001358:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800135a:	fb07 4505 	mla	r5, r7, r5, r4
 800135e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800136a:	f10a 0a01 	add.w	sl, sl, #1
 800136e:	f108 0820 	add.w	r8, r8, #32
 8001372:	e741      	b.n	80011f8 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001374:	2903      	cmp	r1, #3
 8001376:	d1f0      	bne.n	800135a <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001378:	58d1      	ldr	r1, [r2, r3]
 800137a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800137e:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001380:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001384:	4602      	mov	r2, r0
 8001386:	4629      	mov	r1, r5
 8001388:	4620      	mov	r0, r4
 800138a:	f002 fd11 	bl	8003db0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800138e:	e7e4      	b.n	800135a <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001390:	68b1      	ldr	r1, [r6, #8]
 8001392:	0789      	lsls	r1, r1, #30
 8001394:	d536      	bpl.n	8001404 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001396:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001398:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800139c:	f021 0102 	bic.w	r1, r1, #2
 80013a0:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80013a2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80013a6:	2901      	cmp	r1, #1
 80013a8:	d10c      	bne.n	80013c4 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80013aa:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80013ae:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80013b2:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80013b6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80013ba:	4629      	mov	r1, r5
 80013bc:	4620      	mov	r0, r4
 80013be:	f002 fcf7 	bl	8003db0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80013c2:	e7d2      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013c4:	2905      	cmp	r1, #5
 80013c6:	d0f0      	beq.n	80013aa <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013c8:	2906      	cmp	r1, #6
 80013ca:	d001      	beq.n	80013d0 <HAL_HCD_IRQHandler+0x33c>
 80013cc:	2908      	cmp	r1, #8
 80013ce:	d114      	bne.n	80013fa <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 80013d0:	fb07 4105 	mla	r1, r7, r5, r4
 80013d4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80013d6:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80013d8:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80013da:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013dc:	bf83      	ittte	hi
 80013de:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80013e0:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80013e4:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80013e8:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013ec:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013ee:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80013f6:	50d1      	str	r1, [r2, r3]
 80013f8:	e7d9      	b.n	80013ae <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80013fa:	2903      	cmp	r1, #3
 80013fc:	d1d7      	bne.n	80013ae <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013fe:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001402:	e7f3      	b.n	80013ec <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001404:	68b1      	ldr	r1, [r6, #8]
 8001406:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800140a:	d012      	beq.n	8001432 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800140c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800140e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001416:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800141a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 800141c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800141e:	3201      	adds	r2, #1
 8001420:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001422:	2206      	movs	r2, #6
 8001424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001428:	f001 fca0 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	60b3      	str	r3, [r6, #8]
 8001430:	e79b      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001432:	68b3      	ldr	r3, [r6, #8]
 8001434:	06da      	lsls	r2, r3, #27
 8001436:	d598      	bpl.n	800136a <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001438:	fb07 4205 	mla	r2, r7, r5, r4
 800143c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001440:	2b03      	cmp	r3, #3
 8001442:	d10a      	bne.n	800145a <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001444:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001446:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001448:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	4629      	mov	r1, r5
 8001452:	f001 fc8b 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001456:	2310      	movs	r3, #16
 8001458:	e7e9      	b.n	800142e <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800145a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800145e:	d1fa      	bne.n	8001456 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8001462:	6923      	ldr	r3, [r4, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f6      	bne.n	8001456 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8001468:	2303      	movs	r3, #3
 800146a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800146e:	e7ea      	b.n	8001446 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001470:	0169      	lsls	r1, r5, #5
 8001472:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001476:	188e      	adds	r6, r1, r2
 8001478:	68b3      	ldr	r3, [r6, #8]
 800147a:	f013 0e04 	ands.w	lr, r3, #4
 800147e:	d006      	beq.n	800148e <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001480:	2304      	movs	r3, #4
 8001482:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001484:	68f3      	ldr	r3, [r6, #12]
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	60f3      	str	r3, [r6, #12]
 800148c:	e76d      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800148e:	68b3      	ldr	r3, [r6, #8]
 8001490:	f013 0320 	ands.w	r3, r3, #32
 8001494:	d014      	beq.n	80014c0 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001496:	2320      	movs	r3, #32
 8001498:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800149a:	fb07 4305 	mla	r3, r7, r5, r4
 800149e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	f47f af61 	bne.w	800136a <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 80014a8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80014ac:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014b0:	68f3      	ldr	r3, [r6, #12]
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b8:	4629      	mov	r1, r5
 80014ba:	f001 fc57 	bl	8002d6c <USB_HC_Halt>
 80014be:	e754      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80014c0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80014c4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80014c8:	d011      	beq.n	80014ee <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 80014ca:	fb07 4205 	mla	r2, r7, r5, r4
 80014ce:	2104      	movs	r1, #4
 80014d0:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80014d4:	2101      	movs	r1, #1
 80014d6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014da:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014dc:	68f3      	ldr	r3, [r6, #12]
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e4:	4629      	mov	r1, r5
 80014e6:	f001 fc41 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	e79f      	b.n	800142e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80014ee:	68b3      	ldr	r3, [r6, #8]
 80014f0:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 80014f4:	d005      	beq.n	8001502 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014f6:	68f3      	ldr	r3, [r6, #12]
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fe:	4629      	mov	r1, r5
 8001500:	e6c8      	b.n	8001294 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001502:	68b3      	ldr	r3, [r6, #8]
 8001504:	07db      	lsls	r3, r3, #31
 8001506:	d511      	bpl.n	800152c <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001508:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800150a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800150e:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001512:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001516:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001518:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800151a:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800151c:	f001 fc26 	bl	8002d6c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001520:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001522:	2201      	movs	r2, #1
 8001524:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800152a:	e71e      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800152c:	68b3      	ldr	r3, [r6, #8]
 800152e:	071b      	lsls	r3, r3, #28
 8001530:	d50e      	bpl.n	8001550 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001532:	2308      	movs	r3, #8
 8001534:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001536:	68f3      	ldr	r3, [r6, #12]
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800153e:	4629      	mov	r1, r5
 8001540:	f001 fc14 	bl	8002d6c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001544:	fb07 4505 	mla	r5, r7, r5, r4
 8001548:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800154a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800154e:	e70c      	b.n	800136a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001550:	68b3      	ldr	r3, [r6, #8]
 8001552:	06db      	lsls	r3, r3, #27
 8001554:	d515      	bpl.n	8001582 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001556:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 800155a:	2203      	movs	r2, #3
 800155c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001560:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001564:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001568:	b92a      	cbnz	r2, 8001576 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800156a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800156e:	b912      	cbnz	r2, 8001576 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8001570:	2201      	movs	r2, #1
 8001572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001576:	68f3      	ldr	r3, [r6, #12]
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157e:	4629      	mov	r1, r5
 8001580:	e767      	b.n	8001452 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001582:	68b3      	ldr	r3, [r6, #8]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	d50c      	bpl.n	80015a2 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001588:	68f3      	ldr	r3, [r6, #12]
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001590:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001592:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001596:	f001 fbe9 	bl	8002d6c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800159a:	2306      	movs	r3, #6
 800159c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80015a0:	e744      	b.n	800142c <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015a2:	68b3      	ldr	r3, [r6, #8]
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	d50f      	bpl.n	80015c8 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015a8:	68f3      	ldr	r3, [r6, #12]
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b0:	4629      	mov	r1, r5
 80015b2:	f001 fbdb 	bl	8002d6c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015b6:	2310      	movs	r3, #16
 80015b8:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015be:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80015c0:	fb07 4505 	mla	r5, r7, r5, r4
 80015c4:	2308      	movs	r3, #8
 80015c6:	e7c0      	b.n	800154a <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80015c8:	68b3      	ldr	r3, [r6, #8]
 80015ca:	0798      	lsls	r0, r3, #30
 80015cc:	f57f aecd 	bpl.w	800136a <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80015d0:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80015d2:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80015dc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10e      	bne.n	8001602 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80015e4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80015e8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80015ec:	3b02      	subs	r3, #2
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f63f aedd 	bhi.w	80013ae <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80015f4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80015f8:	f083 0301 	eor.w	r3, r3, #1
 80015fc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8001600:	e6d5      	b.n	80013ae <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001602:	2b03      	cmp	r3, #3
 8001604:	d102      	bne.n	800160c <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001606:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800160a:	e6d0      	b.n	80013ae <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800160c:	2b04      	cmp	r3, #4
 800160e:	d0fa      	beq.n	8001606 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001610:	2b05      	cmp	r3, #5
 8001612:	d102      	bne.n	800161a <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001614:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001618:	e6c9      	b.n	80013ae <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800161a:	2b06      	cmp	r3, #6
 800161c:	d002      	beq.n	8001624 <HAL_HCD_IRQHandler+0x590>
 800161e:	2b08      	cmp	r3, #8
 8001620:	f47f aec5 	bne.w	80013ae <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8001624:	fb07 4005 	mla	r0, r7, r5, r4
 8001628:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800162a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800162c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800162e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001630:	bf84      	itt	hi
 8001632:	2304      	movhi	r3, #4
 8001634:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001638:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 800163a:	bf88      	it	hi
 800163c:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001648:	bf98      	it	ls
 800164a:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800164e:	508b      	str	r3, [r1, r2]
 8001650:	e6ad      	b.n	80013ae <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001652:	6826      	ldr	r6, [r4, #0]
 8001654:	69b3      	ldr	r3, [r6, #24]
 8001656:	f023 0310 	bic.w	r3, r3, #16
 800165a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 800165c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800165e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8001662:	2a02      	cmp	r2, #2
 8001664:	d129      	bne.n	80016ba <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001666:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800166a:	f1b8 0f00 	cmp.w	r8, #0
 800166e:	d024      	beq.n	80016ba <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001670:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001674:	2728      	movs	r7, #40	; 0x28
 8001676:	fb07 4705 	mla	r7, r7, r5, r4
 800167a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800167c:	b1e9      	cbz	r1, 80016ba <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800167e:	4642      	mov	r2, r8
 8001680:	4630      	mov	r0, r6
 8001682:	f001 f9f9 	bl	8002a78 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001688:	4443      	add	r3, r8
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800168c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168e:	4443      	add	r3, r8
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001692:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8001696:	016b      	lsls	r3, r5, #5
 8001698:	199a      	adds	r2, r3, r6
 800169a:	6911      	ldr	r1, [r2, #16]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_HCD_IRQHandler+0x634>)
 800169e:	400a      	ands	r2, r1
 80016a0:	b15a      	cbz	r2, 80016ba <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80016a2:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80016a4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80016a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80016ac:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80016ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80016b2:	f083 0301 	eor.w	r3, r3, #1
 80016b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6993      	ldr	r3, [r2, #24]
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	e5a5      	b.n	8001212 <HAL_HCD_IRQHandler+0x17e>
 80016c6:	bf00      	nop
 80016c8:	1ff80000 	.word	0x1ff80000

080016cc <HAL_HCD_Start>:
{
 80016cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80016ce:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80016d2:	2b01      	cmp	r3, #1
{
 80016d4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80016d6:	d00d      	beq.n	80016f4 <HAL_HCD_Start+0x28>
 80016d8:	2501      	movs	r5, #1
 80016da:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80016de:	6800      	ldr	r0, [r0, #0]
 80016e0:	f001 f970 	bl	80029c4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016e4:	4629      	mov	r1, r5
 80016e6:	6820      	ldr	r0, [r4, #0]
 80016e8:	f001 fa16 	bl	8002b18 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80016f4:	2002      	movs	r0, #2
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}

080016f8 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80016f8:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80016fc:	2b01      	cmp	r3, #1
{
 80016fe:	b510      	push	{r4, lr}
 8001700:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001702:	d009      	beq.n	8001718 <HAL_HCD_Stop+0x20>
 8001704:	2301      	movs	r3, #1
 8001706:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800170a:	6800      	ldr	r0, [r0, #0]
 800170c:	f001 fc44 	bl	8002f98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001710:	2000      	movs	r0, #0
 8001712:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001716:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001718:	2002      	movs	r0, #2
}
 800171a:	bd10      	pop	{r4, pc}

0800171c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800171c:	6800      	ldr	r0, [r0, #0]
 800171e:	f001 b9dd 	b.w	8002adc <USB_ResetPort>

08001722 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001728:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800172c:	4770      	bx	lr

0800172e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800172e:	2328      	movs	r3, #40	; 0x28
 8001730:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001734:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001736:	4770      	bx	lr

08001738 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001738:	6800      	ldr	r0, [r0, #0]
 800173a:	f001 ba88 	b.w	8002c4e <USB_GetCurrentFrame>

0800173e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800173e:	6800      	ldr	r0, [r0, #0]
 8001740:	f001 ba7a 	b.w	8002c38 <USB_GetHostSpeed>

08001744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001744:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001746:	4604      	mov	r4, r0
 8001748:	b908      	cbnz	r0, 800174e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800174e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001756:	b91b      	cbnz	r3, 8001760 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175c:	f7ff f87c 	bl	8000858 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001760:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001762:	2324      	movs	r3, #36	; 0x24
 8001764:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001768:	6813      	ldr	r3, [r2, #0]
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001770:	f000 fd0e 	bl	8002190 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001774:	6865      	ldr	r5, [r4, #4]
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_I2C_Init+0x138>)
 8001778:	429d      	cmp	r5, r3
 800177a:	d84d      	bhi.n	8001818 <HAL_I2C_Init+0xd4>
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_I2C_Init+0x13c>)
 800177e:	4298      	cmp	r0, r3
 8001780:	d9e3      	bls.n	800174a <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001782:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001784:	493f      	ldr	r1, [pc, #252]	; (8001884 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001788:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800178c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001790:	430b      	orrs	r3, r1
 8001792:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001794:	6a13      	ldr	r3, [r2, #32]
 8001796:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800179a:	3101      	adds	r1, #1
 800179c:	4319      	orrs	r1, r3
 800179e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a0:	69d1      	ldr	r1, [r2, #28]
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_I2C_Init+0x138>)
 80017a4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80017a8:	429d      	cmp	r5, r3
 80017aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017ae:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80017b2:	d848      	bhi.n	8001846 <HAL_I2C_Init+0x102>
 80017b4:	006d      	lsls	r5, r5, #1
 80017b6:	fbb0 f0f5 	udiv	r0, r0, r5
 80017ba:	3001      	adds	r0, #1
 80017bc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	bf38      	it	cc
 80017c4:	2304      	movcc	r3, #4
 80017c6:	430b      	orrs	r3, r1
 80017c8:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017ca:	6811      	ldr	r1, [r2, #0]
 80017cc:	6a20      	ldr	r0, [r4, #32]
 80017ce:	69e3      	ldr	r3, [r4, #28]
 80017d0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80017d4:	4303      	orrs	r3, r0
 80017d6:	430b      	orrs	r3, r1
 80017d8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017da:	6891      	ldr	r1, [r2, #8]
 80017dc:	68e0      	ldr	r0, [r4, #12]
 80017de:	6923      	ldr	r3, [r4, #16]
 80017e0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80017e4:	4303      	orrs	r3, r0
 80017e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017ee:	68d1      	ldr	r1, [r2, #12]
 80017f0:	69a0      	ldr	r0, [r4, #24]
 80017f2:	6963      	ldr	r3, [r4, #20]
 80017f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017f8:	4303      	orrs	r3, r0
 80017fa:	430b      	orrs	r3, r1
 80017fc:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001806:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001808:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800180c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001810:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001812:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001816:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_I2C_Init+0x144>)
 800181a:	4298      	cmp	r0, r3
 800181c:	d995      	bls.n	800174a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800181e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001820:	4e18      	ldr	r6, [pc, #96]	; (8001884 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001822:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001824:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800182c:	4333      	orrs	r3, r6
 800182e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001830:	6a13      	ldr	r3, [r2, #32]
 8001832:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001836:	4371      	muls	r1, r6
 8001838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800183c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001840:	fbb1 f1f6 	udiv	r1, r1, r6
 8001844:	e7a9      	b.n	800179a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001846:	68a3      	ldr	r3, [r4, #8]
 8001848:	b953      	cbnz	r3, 8001860 <HAL_I2C_Init+0x11c>
 800184a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800184e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001852:	1c43      	adds	r3, r0, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	b16b      	cbz	r3, 8001876 <HAL_I2C_Init+0x132>
 800185a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185e:	e7b2      	b.n	80017c6 <HAL_I2C_Init+0x82>
 8001860:	2319      	movs	r3, #25
 8001862:	436b      	muls	r3, r5
 8001864:	fbb0 f0f3 	udiv	r0, r0, r3
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186e:	b113      	cbz	r3, 8001876 <HAL_I2C_Init+0x132>
 8001870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001874:	e7a7      	b.n	80017c6 <HAL_I2C_Init+0x82>
 8001876:	2301      	movs	r3, #1
 8001878:	e7a5      	b.n	80017c6 <HAL_I2C_Init+0x82>
 800187a:	bf00      	nop
 800187c:	000186a0 	.word	0x000186a0
 8001880:	001e847f 	.word	0x001e847f
 8001884:	000f4240 	.word	0x000f4240
 8001888:	003d08ff 	.word	0x003d08ff

0800188c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800188e:	4604      	mov	r4, r0
 8001890:	2800      	cmp	r0, #0
 8001892:	d041      	beq.n	8001918 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001894:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001898:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800189c:	b92b      	cbnz	r3, 80018aa <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 80018a0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018a4:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018a6:	f7ff f80f 	bl	80008c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018aa:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018ac:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018b2:	69d3      	ldr	r3, [r2, #28]
 80018b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018b8:	f023 030f 	bic.w	r3, r3, #15
 80018bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018be:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80018c0:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018c2:	428b      	cmp	r3, r1
 80018c4:	d031      	beq.n	800192a <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018c6:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018c8:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018ca:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80018cc:	bf0c      	ite	eq
 80018ce:	2510      	moveq	r5, #16
 80018d0:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018d2:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018d4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80018d6:	bf98      	it	ls
 80018d8:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018da:	f000 fd2f 	bl	800233c <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018de:	6923      	ldr	r3, [r4, #16]
 80018e0:	6961      	ldr	r1, [r4, #20]
 80018e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e6:	d11b      	bne.n	8001920 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018e8:	68e3      	ldr	r3, [r4, #12]
 80018ea:	220a      	movs	r2, #10
 80018ec:	b1b3      	cbz	r3, 800191c <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018ee:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f4:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80018f6:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fc:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80018fe:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001902:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001906:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001908:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800190a:	1e99      	subs	r1, r3, #2
 800190c:	29fd      	cmp	r1, #253	; 0xfd
 800190e:	d90e      	bls.n	800192e <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001918:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800191c:	00eb      	lsls	r3, r5, #3
 800191e:	e7e7      	b.n	80018f0 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001920:	230a      	movs	r3, #10
 8001922:	fbb0 f0f5 	udiv	r0, r0, r5
 8001926:	4343      	muls	r3, r0
 8001928:	e7e5      	b.n	80018f6 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 800192a:	2200      	movs	r2, #0
 800192c:	e7ed      	b.n	800190a <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800192e:	4313      	orrs	r3, r2
 8001930:	6922      	ldr	r2, [r4, #16]
 8001932:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001934:	6866      	ldr	r6, [r4, #4]
 8001936:	68e5      	ldr	r5, [r4, #12]
 8001938:	69a0      	ldr	r0, [r4, #24]
 800193a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80019b8 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800193e:	4313      	orrs	r3, r2
 8001940:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001942:	68a3      	ldr	r3, [r4, #8]
 8001944:	69cf      	ldr	r7, [r1, #28]
 8001946:	ea46 0203 	orr.w	r2, r6, r3
 800194a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194e:	432a      	orrs	r2, r5
 8001950:	4302      	orrs	r2, r0
 8001952:	ea07 070e 	and.w	r7, r7, lr
 8001956:	433a      	orrs	r2, r7
 8001958:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800195a:	6a22      	ldr	r2, [r4, #32]
 800195c:	2a01      	cmp	r2, #1
 800195e:	d11d      	bne.n	800199c <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_I2S_Init+0x120>)
 8001962:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001964:	4f12      	ldr	r7, [pc, #72]	; (80019b0 <HAL_I2S_Init+0x124>)
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_I2S_Init+0x128>)
 8001968:	42b9      	cmp	r1, r7
 800196a:	bf18      	it	ne
 800196c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001970:	432b      	orrs	r3, r5
 8001972:	69d1      	ldr	r1, [r2, #28]
 8001974:	ea01 010e 	and.w	r1, r1, lr
 8001978:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800197a:	2102      	movs	r1, #2
 800197c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800197e:	69d7      	ldr	r7, [r2, #28]
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8001986:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800198a:	ea43 0307 	orr.w	r3, r3, r7
 800198e:	bf0c      	ite	eq
 8001990:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001994:	2100      	movne	r1, #0
 8001996:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001998:	430b      	orrs	r3, r1
 800199a:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800199c:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800199e:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80019a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019a8:	080019c3 	.word	0x080019c3
 80019ac:	08001ac1 	.word	0x08001ac1
 80019b0:	40003800 	.word	0x40003800
 80019b4:	40003400 	.word	0x40003400
 80019b8:	fffff040 	.word	0xfffff040

080019bc <HAL_I2S_TxCpltCallback>:
 80019bc:	4770      	bx	lr

080019be <HAL_I2S_RxCpltCallback>:
 80019be:	4770      	bx	lr

080019c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80019c0:	4770      	bx	lr

080019c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80019c4:	6803      	ldr	r3, [r0, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019ca:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80019ce:	2a04      	cmp	r2, #4
{
 80019d0:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019d2:	d136      	bne.n	8001a42 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80019d4:	9a01      	ldr	r2, [sp, #4]
 80019d6:	07d1      	lsls	r1, r2, #31
 80019d8:	d517      	bpl.n	8001a0a <I2S_IRQHandler+0x48>
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	0652      	lsls	r2, r2, #25
 80019de:	d514      	bpl.n	8001a0a <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80019e2:	68d9      	ldr	r1, [r3, #12]
 80019e4:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80019e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80019ea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80019ec:	3a01      	subs	r2, #1
 80019ee:	b292      	uxth	r2, r2
 80019f0:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80019f2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80019f4:	b292      	uxth	r2, r2
 80019f6:	b942      	cbnz	r2, 8001a0a <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019fe:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001a06:	f7ff ffda 	bl	80019be <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	0659      	lsls	r1, r3, #25
 8001a0e:	d518      	bpl.n	8001a42 <I2S_IRQHandler+0x80>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	0692      	lsls	r2, r2, #26
 8001a16:	d514      	bpl.n	8001a42 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a20:	2200      	movs	r2, #0
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	9202      	str	r2, [sp, #8]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ffbf 	bl	80019c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a42:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d136      	bne.n	8001ab8 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	079b      	lsls	r3, r3, #30
 8001a4e:	d519      	bpl.n	8001a84 <I2S_IRQHandler+0xc2>
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	0618      	lsls	r0, r3, #24
 8001a56:	d515      	bpl.n	8001a84 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001a5e:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001a60:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001a6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b94b      	cbnz	r3, 8001a84 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a70:	6853      	ldr	r3, [r2, #4]
 8001a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a76:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff ff9c 	bl	80019bc <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	0719      	lsls	r1, r3, #28
 8001a88:	d516      	bpl.n	8001ab8 <I2S_IRQHandler+0xf6>
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	0692      	lsls	r2, r2, #26
 8001a90:	d512      	bpl.n	8001ab8 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	9303      	str	r3, [sp, #12]
 8001aa2:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001aaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff ff84 	bl	80019c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd10      	pop	{r4, pc}

08001abc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001ac0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ac2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ac4:	498b      	ldr	r1, [pc, #556]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ac6:	6893      	ldr	r3, [r2, #8]
{
 8001ac8:	b086      	sub	sp, #24
 8001aca:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001acc:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ace:	4b8a      	ldr	r3, [pc, #552]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001ad0:	428a      	cmp	r2, r1
 8001ad2:	bf18      	it	ne
 8001ad4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001adc:	6851      	ldr	r1, [r2, #4]
 8001ade:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ae4:	6841      	ldr	r1, [r0, #4]
 8001ae6:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001aea:	f040 8090 	bne.w	8001c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	0799      	lsls	r1, r3, #30
 8001af2:	d51a      	bpl.n	8001b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001af4:	9b02      	ldr	r3, [sp, #8]
 8001af6:	061b      	lsls	r3, r3, #24
 8001af8:	d517      	bpl.n	8001b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001afa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001afc:	1c99      	adds	r1, r3, #2
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	6241      	str	r1, [r0, #36]	; 0x24
 8001b02:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001b04:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b0c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b95b      	cbnz	r3, 8001b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b12:	6853      	ldr	r3, [r2, #4]
 8001b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b18:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001b1a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b923      	cbnz	r3, 8001b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b26:	f7ff ffc9 	bl	8001abc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	07d8      	lsls	r0, r3, #31
 8001b2e:	d522      	bpl.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001b30:	9b03      	ldr	r3, [sp, #12]
 8001b32:	0659      	lsls	r1, r3, #25
 8001b34:	d51f      	bpl.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b38:	6820      	ldr	r0, [r4, #0]
 8001b3a:	496e      	ldr	r1, [pc, #440]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001b3c:	1c93      	adds	r3, r2, #2
 8001b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b40:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001b42:	4288      	cmp	r0, r1
 8001b44:	bf18      	it	ne
 8001b46:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001b4e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001b50:	3a01      	subs	r2, #1
 8001b52:	b292      	uxth	r2, r2
 8001b54:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b56:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001b58:	b292      	uxth	r2, r2
 8001b5a:	b962      	cbnz	r2, 8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001b64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b92b      	cbnz	r3, 8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff ffa3 	bl	8001abc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b76:	9b01      	ldr	r3, [sp, #4]
 8001b78:	065a      	lsls	r2, r3, #25
 8001b7a:	d522      	bpl.n	8001bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	d51f      	bpl.n	8001bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	495b      	ldr	r1, [pc, #364]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001b86:	4a5c      	ldr	r2, [pc, #368]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	bf18      	it	ne
 8001b8c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001b90:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b92:	6851      	ldr	r1, [r2, #4]
 8001b94:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001b98:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ba0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	9204      	str	r2, [sp, #16]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	9204      	str	r2, [sp, #16]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	9304      	str	r3, [sp, #16]
 8001bae:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001bbe:	f7ff feff 	bl	80019c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bc2:	9b00      	ldr	r3, [sp, #0]
 8001bc4:	0718      	lsls	r0, r3, #28
 8001bc6:	d520      	bpl.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001bc8:	9b02      	ldr	r3, [sp, #8]
 8001bca:	0699      	lsls	r1, r3, #26
 8001bcc:	d51d      	bpl.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bce:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd0:	4948      	ldr	r1, [pc, #288]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd8:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bda:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	bf18      	it	ne
 8001be0:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001be4:	6851      	ldr	r1, [r2, #4]
 8001be6:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001bea:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bec:	2200      	movs	r2, #0
 8001bee:	9205      	str	r2, [sp, #20]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	9305      	str	r3, [sp, #20]
 8001bf4:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fedb 	bl	80019c0 <HAL_I2S_ErrorCallback>
}
 8001c0a:	b006      	add	sp, #24
 8001c0c:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c0e:	9a01      	ldr	r2, [sp, #4]
 8001c10:	0792      	lsls	r2, r2, #30
 8001c12:	d51a      	bpl.n	8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8001c14:	9a03      	ldr	r2, [sp, #12]
 8001c16:	0611      	lsls	r1, r2, #24
 8001c18:	d517      	bpl.n	8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001c1c:	1c91      	adds	r1, r2, #2
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	6241      	str	r1, [r0, #36]	; 0x24
 8001c22:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c24:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001c26:	3a01      	subs	r2, #1
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001c2c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	b95a      	cbnz	r2, 8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c38:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001c3a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b923      	cbnz	r3, 8001c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c46:	f7ff ff39 	bl	8001abc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c4a:	9b00      	ldr	r3, [sp, #0]
 8001c4c:	07da      	lsls	r2, r3, #31
 8001c4e:	d51c      	bpl.n	8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001c50:	9b02      	ldr	r3, [sp, #8]
 8001c52:	065b      	lsls	r3, r3, #25
 8001c54:	d519      	bpl.n	8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c58:	1c9a      	adds	r2, r3, #2
 8001c5a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	68d1      	ldr	r1, [r2, #12]
 8001c60:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001c62:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001c6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b963      	cbnz	r3, 8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c70:	6853      	ldr	r3, [r2, #4]
 8001c72:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c76:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b92b      	cbnz	r3, 8001c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff19 	bl	8001abc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c8a:	9b00      	ldr	r3, [sp, #0]
 8001c8c:	0658      	lsls	r0, r3, #25
 8001c8e:	d51b      	bpl.n	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c90:	9b02      	ldr	r3, [sp, #8]
 8001c92:	0699      	lsls	r1, r3, #26
 8001c94:	d518      	bpl.n	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c96:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c98:	4916      	ldr	r1, [pc, #88]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c9a:	6853      	ldr	r3, [r2, #4]
 8001c9c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ca0:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001ca4:	428a      	cmp	r2, r1
 8001ca6:	bf18      	it	ne
 8001ca8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001cac:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cb4:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001cc4:	f7ff fe7c 	bl	80019c0 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cc8:	9b01      	ldr	r3, [sp, #4]
 8001cca:	071a      	lsls	r2, r3, #28
 8001ccc:	d59d      	bpl.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001cce:	9b03      	ldr	r3, [sp, #12]
 8001cd0:	069b      	lsls	r3, r3, #26
 8001cd2:	d59a      	bpl.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	bf18      	it	ne
 8001cde:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001ce8:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cea:	6853      	ldr	r3, [r2, #4]
 8001cec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001cf0:	6053      	str	r3, [r2, #4]
 8001cf2:	e780      	b.n	8001bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001cf4:	40003800 	.word	0x40003800
 8001cf8:	40003400 	.word	0x40003400

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	4604      	mov	r4, r0
 8001d02:	b918      	cbnz	r0, 8001d0c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001d06:	b002      	add	sp, #8
 8001d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	07dd      	lsls	r5, r3, #31
 8001d10:	d410      	bmi.n	8001d34 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	0798      	lsls	r0, r3, #30
 8001d16:	d458      	bmi.n	8001dca <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	071a      	lsls	r2, r3, #28
 8001d1c:	f100 809a 	bmi.w	8001e54 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	075b      	lsls	r3, r3, #29
 8001d24:	f100 80b8 	bmi.w	8001e98 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d28:	69a2      	ldr	r2, [r4, #24]
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	f040 8119 	bne.w	8001f62 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7e8      	b.n	8001d06 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d34:	4ba6      	ldr	r3, [pc, #664]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	f002 020c 	and.w	r2, r2, #12
 8001d3c:	2a04      	cmp	r2, #4
 8001d3e:	d007      	beq.n	8001d50 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	2a08      	cmp	r2, #8
 8001d48:	d10a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0259      	lsls	r1, r3, #9
 8001d4e:	d507      	bpl.n	8001d60 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	4b9f      	ldr	r3, [pc, #636]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	039a      	lsls	r2, r3, #14
 8001d56:	d5dc      	bpl.n	8001d12 <HAL_RCC_OscConfig+0x16>
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1d9      	bne.n	8001d12 <HAL_RCC_OscConfig+0x16>
 8001d5e:	e7d1      	b.n	8001d04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	6863      	ldr	r3, [r4, #4]
 8001d62:	4d9b      	ldr	r5, [pc, #620]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d111      	bne.n	8001d8e <HAL_RCC_OscConfig+0x92>
 8001d6a:	682b      	ldr	r3, [r5, #0]
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7fe ff45 	bl	8000c00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4d96      	ldr	r5, [pc, #600]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	039b      	lsls	r3, r3, #14
 8001d7e:	d4c8      	bmi.n	8001d12 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe ff3e 	bl	8000c00 <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2864      	cmp	r0, #100	; 0x64
 8001d88:	d9f7      	bls.n	8001d7a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	e7bb      	b.n	8001d06 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d92:	d104      	bne.n	8001d9e <HAL_RCC_OscConfig+0xa2>
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9a:	602b      	str	r3, [r5, #0]
 8001d9c:	e7e5      	b.n	8001d6a <HAL_RCC_OscConfig+0x6e>
 8001d9e:	682a      	ldr	r2, [r5, #0]
 8001da0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001da4:	602a      	str	r2, [r5, #0]
 8001da6:	682a      	ldr	r2, [r5, #0]
 8001da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dac:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1df      	bne.n	8001d72 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001db2:	f7fe ff25 	bl	8000c00 <HAL_GetTick>
 8001db6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	039f      	lsls	r7, r3, #14
 8001dbc:	d5a9      	bpl.n	8001d12 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7fe ff1f 	bl	8000c00 <HAL_GetTick>
 8001dc2:	1b80      	subs	r0, r0, r6
 8001dc4:	2864      	cmp	r0, #100	; 0x64
 8001dc6:	d9f7      	bls.n	8001db8 <HAL_RCC_OscConfig+0xbc>
 8001dc8:	e7df      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dca:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	f012 0f0c 	tst.w	r2, #12
 8001dd2:	d007      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dda:	2a08      	cmp	r2, #8
 8001ddc:	d111      	bne.n	8001e02 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	025e      	lsls	r6, r3, #9
 8001de2:	d40e      	bmi.n	8001e02 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de4:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	0795      	lsls	r5, r2, #30
 8001dea:	d502      	bpl.n	8001df2 <HAL_RCC_OscConfig+0xf6>
 8001dec:	68e2      	ldr	r2, [r4, #12]
 8001dee:	2a01      	cmp	r2, #1
 8001df0:	d188      	bne.n	8001d04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	6921      	ldr	r1, [r4, #16]
 8001df6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001dfa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001dfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	e78a      	b.n	8001d18 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e02:	68e2      	ldr	r2, [r4, #12]
 8001e04:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x2d8>)
 8001e06:	b1b2      	cbz	r2, 8001e36 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fef8 	bl	8000c00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4d6f      	ldr	r5, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001e12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	0798      	lsls	r0, r3, #30
 8001e18:	d507      	bpl.n	8001e2a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	682b      	ldr	r3, [r5, #0]
 8001e1c:	6922      	ldr	r2, [r4, #16]
 8001e1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	e776      	b.n	8001d18 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7fe fee9 	bl	8000c00 <HAL_GetTick>
 8001e2e:	1b80      	subs	r0, r0, r6
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d9ef      	bls.n	8001e14 <HAL_RCC_OscConfig+0x118>
 8001e34:	e7a9      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001e36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e38:	f7fe fee2 	bl	8000c00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	4d64      	ldr	r5, [pc, #400]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001e3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e40:	682b      	ldr	r3, [r5, #0]
 8001e42:	0799      	lsls	r1, r3, #30
 8001e44:	f57f af68 	bpl.w	8001d18 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7fe feda 	bl	8000c00 <HAL_GetTick>
 8001e4c:	1b80      	subs	r0, r0, r6
 8001e4e:	2802      	cmp	r0, #2
 8001e50:	d9f6      	bls.n	8001e40 <HAL_RCC_OscConfig+0x144>
 8001e52:	e79a      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e54:	6962      	ldr	r2, [r4, #20]
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x2dc>)
 8001e58:	b17a      	cbz	r2, 8001e7a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fecf 	bl	8000c00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4d5b      	ldr	r5, [pc, #364]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001e64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e68:	079f      	lsls	r7, r3, #30
 8001e6a:	f53f af59 	bmi.w	8001d20 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fec7 	bl	8000c00 <HAL_GetTick>
 8001e72:	1b80      	subs	r0, r0, r6
 8001e74:	2802      	cmp	r0, #2
 8001e76:	d9f6      	bls.n	8001e66 <HAL_RCC_OscConfig+0x16a>
 8001e78:	e787      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fec0 	bl	8000c00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4d53      	ldr	r5, [pc, #332]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001e82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e86:	0798      	lsls	r0, r3, #30
 8001e88:	f57f af4a 	bpl.w	8001d20 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe feb8 	bl	8000c00 <HAL_GetTick>
 8001e90:	1b80      	subs	r0, r0, r6
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9f6      	bls.n	8001e84 <HAL_RCC_OscConfig+0x188>
 8001e96:	e778      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001ea0:	d128      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	9201      	str	r2, [sp, #4]
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001eb6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4d48      	ldr	r5, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x2e0>)
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	05d9      	lsls	r1, r3, #23
 8001ebe:	d51b      	bpl.n	8001ef8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	68a3      	ldr	r3, [r4, #8]
 8001ec2:	4d43      	ldr	r5, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d127      	bne.n	8001f18 <HAL_RCC_OscConfig+0x21c>
 8001ec8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fe96 	bl	8000c00 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4d3e      	ldr	r5, [pc, #248]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ed6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ede:	079b      	lsls	r3, r3, #30
 8001ee0:	d539      	bpl.n	8001f56 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001ee2:	2e00      	cmp	r6, #0
 8001ee4:	f43f af20 	beq.w	8001d28 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee8:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001eea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	e719      	b.n	8001d28 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	e7df      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef8:	682b      	ldr	r3, [r5, #0]
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001f00:	f7fe fe7e 	bl	8000c00 <HAL_GetTick>
 8001f04:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	682b      	ldr	r3, [r5, #0]
 8001f08:	05da      	lsls	r2, r3, #23
 8001f0a:	d4d9      	bmi.n	8001ec0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7fe fe78 	bl	8000c00 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	2802      	cmp	r0, #2
 8001f14:	d9f7      	bls.n	8001f06 <HAL_RCC_OscConfig+0x20a>
 8001f16:	e738      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d104      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22a>
 8001f1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	672b      	str	r3, [r5, #112]	; 0x70
 8001f24:	e7d0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1cc>
 8001f26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	672a      	str	r2, [r5, #112]	; 0x70
 8001f2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001f30:	f022 0204 	bic.w	r2, r2, #4
 8001f34:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ca      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fe61 	bl	8000c00 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f42:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f46:	0798      	lsls	r0, r3, #30
 8001f48:	d5cb      	bpl.n	8001ee2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fe59 	bl	8000c00 <HAL_GetTick>
 8001f4e:	1bc0      	subs	r0, r0, r7
 8001f50:	4540      	cmp	r0, r8
 8001f52:	d9f7      	bls.n	8001f44 <HAL_RCC_OscConfig+0x248>
 8001f54:	e719      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe fe53 	bl	8000c00 <HAL_GetTick>
 8001f5a:	1bc0      	subs	r0, r0, r7
 8001f5c:	4540      	cmp	r0, r8
 8001f5e:	d9bd      	bls.n	8001edc <HAL_RCC_OscConfig+0x1e0>
 8001f60:	e713      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4d1b      	ldr	r5, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
 8001f64:	68ab      	ldr	r3, [r5, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	f43f aeca 	beq.w	8001d04 <HAL_RCC_OscConfig+0x8>
 8001f70:	4e1b      	ldr	r6, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x2e4>)
 8001f72:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f74:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f76:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	d134      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fe41 	bl	8000c00 <HAL_GetTick>
 8001f7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	0199      	lsls	r1, r3, #6
 8001f84:	d41e      	bmi.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f86:	6a22      	ldr	r2, [r4, #32]
 8001f88:	69e3      	ldr	r3, [r4, #28]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f8e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4c0d      	ldr	r4, [pc, #52]	; (8001fd0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f9c:	0852      	lsrs	r2, r2, #1
 8001f9e:	3a01      	subs	r2, #1
 8001fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001fa4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001faa:	f7fe fe29 	bl	8000c00 <HAL_GetTick>
 8001fae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	019a      	lsls	r2, r3, #6
 8001fb4:	f53f aebc 	bmi.w	8001d30 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe fe22 	bl	8000c00 <HAL_GetTick>
 8001fbc:	1b40      	subs	r0, r0, r5
 8001fbe:	2802      	cmp	r0, #2
 8001fc0:	d9f6      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x2b4>
 8001fc2:	e6e2      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe fe1c 	bl	8000c00 <HAL_GetTick>
 8001fc8:	1bc0      	subs	r0, r0, r7
 8001fca:	2802      	cmp	r0, #2
 8001fcc:	d9d8      	bls.n	8001f80 <HAL_RCC_OscConfig+0x284>
 8001fce:	e6dc      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe0c 	bl	8000c00 <HAL_GetTick>
 8001fe8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	682b      	ldr	r3, [r5, #0]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	f57f ae9f 	bpl.w	8001d30 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fe05 	bl	8000c00 <HAL_GetTick>
 8001ff6:	1b00      	subs	r0, r0, r4
 8001ff8:	2802      	cmp	r0, #2
 8001ffa:	d9f6      	bls.n	8001fea <HAL_RCC_OscConfig+0x2ee>
 8001ffc:	e6c5      	b.n	8001d8a <HAL_RCC_OscConfig+0x8e>
 8001ffe:	bf00      	nop

08002000 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002000:	4913      	ldr	r1, [pc, #76]	; (8002050 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002002:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002004:	688b      	ldr	r3, [r1, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x16>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002012:	4810      	ldr	r0, [pc, #64]	; (8002054 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002014:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002016:	4810      	ldr	r0, [pc, #64]	; (8002058 <HAL_RCC_GetSysClockFreq+0x58>)
 8002018:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002020:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002024:	bf14      	ite	ne
 8002026:	480c      	ldrne	r0, [pc, #48]	; (8002058 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	480a      	ldreq	r0, [pc, #40]	; (8002054 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800202e:	bf18      	it	ne
 8002030:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002032:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002036:	fba1 0100 	umull	r0, r1, r1, r0
 800203a:	f7fe f8c5 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RCC_GetSysClockFreq+0x50>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800204a:	fbb0 f0f3 	udiv	r0, r0, r3
 800204e:	bd08      	pop	{r3, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_ClockConfig>:
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002062:	4604      	mov	r4, r0
 8002064:	b910      	cbnz	r0, 800206c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002066:	2001      	movs	r0, #1
 8002068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_RCC_ClockConfig+0x124>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	f002 020f 	and.w	r2, r2, #15
 8002074:	428a      	cmp	r2, r1
 8002076:	d328      	bcc.n	80020ca <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	6821      	ldr	r1, [r4, #0]
 800207a:	078f      	lsls	r7, r1, #30
 800207c:	d42d      	bmi.n	80020da <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	07c8      	lsls	r0, r1, #31
 8002080:	d440      	bmi.n	8002104 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_ClockConfig+0x124>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f002 020f 	and.w	r2, r2, #15
 800208a:	4295      	cmp	r5, r2
 800208c:	d366      	bcc.n	800215c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	6822      	ldr	r2, [r4, #0]
 8002090:	0751      	lsls	r1, r2, #29
 8002092:	d46c      	bmi.n	800216e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	0713      	lsls	r3, r2, #28
 8002096:	d507      	bpl.n	80020a8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002098:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
 800209a:	6921      	ldr	r1, [r4, #16]
 800209c:	6893      	ldr	r3, [r2, #8]
 800209e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a8:	f7ff ffaa 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
 80020ae:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x12c>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	40d8      	lsrs	r0, r3
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCC_ClockConfig+0x130>)
 80020bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7fe fce4 	bl	8000a8c <HAL_InitTick>
  return HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	4299      	cmp	r1, r3
 80020d6:	d1c6      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa>
 80020d8:	e7ce      	b.n	8002078 <HAL_RCC_ClockConfig+0x1c>
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	bf1e      	ittt	ne
 80020e2:	689a      	ldrne	r2, [r3, #8]
 80020e4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80020e8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	bf42      	ittt	mi
 80020ee:	689a      	ldrmi	r2, [r3, #8]
 80020f0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80020f4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68a0      	ldr	r0, [r4, #8]
 80020fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020fe:	4302      	orrs	r2, r0
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	e7bc      	b.n	800207e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002104:	6862      	ldr	r2, [r4, #4]
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
 8002108:	2a01      	cmp	r2, #1
 800210a:	d11d      	bne.n	8002148 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	d0a8      	beq.n	8002066 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002114:	4e1b      	ldr	r6, [pc, #108]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
 8002116:	68b3      	ldr	r3, [r6, #8]
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	4313      	orrs	r3, r2
 800211e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002120:	f7fe fd6e 	bl	8000c00 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002128:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	68b3      	ldr	r3, [r6, #8]
 800212c:	6862      	ldr	r2, [r4, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002136:	d0a4      	beq.n	8002082 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7fe fd62 	bl	8000c00 <HAL_GetTick>
 800213c:	1bc0      	subs	r0, r0, r7
 800213e:	4540      	cmp	r0, r8
 8002140:	d9f3      	bls.n	800212a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
}
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002148:	1e91      	subs	r1, r2, #2
 800214a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214e:	d802      	bhi.n	8002156 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002154:	e7dd      	b.n	8002112 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	f013 0f02 	tst.w	r3, #2
 800215a:	e7da      	b.n	8002112 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215c:	b2ea      	uxtb	r2, r5
 800215e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	429d      	cmp	r5, r3
 8002168:	f47f af7d 	bne.w	8002066 <HAL_RCC_ClockConfig+0xa>
 800216c:	e78f      	b.n	800208e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216e:	4905      	ldr	r1, [pc, #20]	; (8002184 <HAL_RCC_ClockConfig+0x128>)
 8002170:	68e0      	ldr	r0, [r4, #12]
 8002172:	688b      	ldr	r3, [r1, #8]
 8002174:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002178:	4303      	orrs	r3, r0
 800217a:	608b      	str	r3, [r1, #8]
 800217c:	e78a      	b.n	8002094 <HAL_RCC_ClockConfig+0x38>
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	080046cc 	.word	0x080046cc
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	4a03      	ldr	r2, [pc, #12]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800219e:	6810      	ldr	r0, [r2, #0]
}
 80021a0:	40d8      	lsrs	r0, r3
 80021a2:	4770      	bx	lr
 80021a4:	40023800 	.word	0x40023800
 80021a8:	080046dc 	.word	0x080046dc
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	4a03      	ldr	r2, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021be:	6810      	ldr	r0, [r2, #0]
}
 80021c0:	40d8      	lsrs	r0, r3
 80021c2:	4770      	bx	lr
 80021c4:	40023800 	.word	0x40023800
 80021c8:	080046dc 	.word	0x080046dc
 80021cc:	20000000 	.word	0x20000000

080021d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021d0:	230f      	movs	r3, #15
 80021d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_GetClockConfig+0x34>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	f002 0203 	and.w	r2, r2, #3
 80021dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80021e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80021ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80021f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_GetClockConfig+0x38>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	600b      	str	r3, [r1, #0]
 8002202:	4770      	bx	lr
 8002204:	40023800 	.word	0x40023800
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800220c:	6803      	ldr	r3, [r0, #0]
 800220e:	f013 0f05 	tst.w	r3, #5
{
 8002212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002214:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002216:	d105      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002218:	6828      	ldr	r0, [r5, #0]
 800221a:	f010 0002 	ands.w	r0, r0, #2
 800221e:	d128      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002220:	b003      	add	sp, #12
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002224:	4c41      	ldr	r4, [pc, #260]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002226:	4e42      	ldr	r6, [pc, #264]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800222c:	f7fe fce8 	bl	8000c00 <HAL_GetTick>
 8002230:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002232:	6833      	ldr	r3, [r6, #0]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	d415      	bmi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002238:	68ab      	ldr	r3, [r5, #8]
 800223a:	686a      	ldr	r2, [r5, #4]
 800223c:	071b      	lsls	r3, r3, #28
 800223e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002242:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002246:	2301      	movs	r3, #1
 8002248:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800224a:	f7fe fcd9 	bl	8000c00 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224e:	4c38      	ldr	r4, [pc, #224]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002250:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	0118      	lsls	r0, r3, #4
 8002256:	d4df      	bmi.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002258:	f7fe fcd2 	bl	8000c00 <HAL_GetTick>
 800225c:	1b80      	subs	r0, r0, r6
 800225e:	2802      	cmp	r0, #2
 8002260:	d9f7      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002262:	e004      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002264:	f7fe fccc 	bl	8000c00 <HAL_GetTick>
 8002268:	1bc0      	subs	r0, r0, r7
 800226a:	2802      	cmp	r0, #2
 800226c:	d9e1      	bls.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800226e:	2003      	movs	r0, #3
 8002270:	e7d6      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002278:	4c2e      	ldr	r4, [pc, #184]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002294:	f7fe fcb4 	bl	8000c00 <HAL_GetTick>
 8002298:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	05d9      	lsls	r1, r3, #23
 800229e:	d51b      	bpl.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a0:	4c23      	ldr	r4, [pc, #140]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022aa:	68eb      	ldr	r3, [r5, #12]
 80022ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022b0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022b4:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80022b6:	d134      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80022b8:	6891      	ldr	r1, [r2, #8]
 80022ba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80022be:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80022c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80022c6:	4301      	orrs	r1, r0
 80022c8:	6091      	str	r1, [r2, #8]
 80022ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80022d4:	2000      	movs	r0, #0
 80022d6:	e7a3      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe fc92 	bl	8000c00 <HAL_GetTick>
 80022dc:	1b80      	subs	r0, r0, r6
 80022de:	2802      	cmp	r0, #2
 80022e0:	d9db      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80022e2:	e7c4      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e4:	68ea      	ldr	r2, [r5, #12]
 80022e6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d0dd      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022fa:	2100      	movs	r1, #0
 80022fc:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80022fe:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002300:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002302:	07da      	lsls	r2, r3, #31
 8002304:	d5d1      	bpl.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002306:	f7fe fc7b 	bl	8000c00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800230e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002312:	079b      	lsls	r3, r3, #30
 8002314:	d4c9      	bmi.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fc73 	bl	8000c00 <HAL_GetTick>
 800231a:	1b80      	subs	r0, r0, r6
 800231c:	42b8      	cmp	r0, r7
 800231e:	d9f7      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002320:	e7a5      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002322:	6891      	ldr	r1, [r2, #8]
 8002324:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002328:	e7ce      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 800232a:	bf00      	nop
 800232c:	42470068 	.word	0x42470068
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470e40 	.word	0x42470e40

0800233c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800233c:	2801      	cmp	r0, #1
 800233e:	d120      	bne.n	8002382 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002342:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002344:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002348:	d004      	beq.n	8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800234a:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800234e:	bf18      	it	ne
 8002350:	2000      	movne	r0, #0
 8002352:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002354:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002356:	490c      	ldr	r1, [pc, #48]	; (8002388 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002358:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800235a:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800235c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002360:	bf4c      	ite	mi
 8002362:	4b0b      	ldrmi	r3, [pc, #44]	; (8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002364:	4b0b      	ldrpl	r3, [pc, #44]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002366:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800236a:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800236e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002372:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002376:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002378:	f3c0 7002 	ubfx	r0, r0, #28, #3
 800237c:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002380:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002382:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	00bb8000 	.word	0x00bb8000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	00f42400 	.word	0x00f42400

08002398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002398:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800239a:	4604      	mov	r4, r0
 800239c:	2800      	cmp	r0, #0
 800239e:	d036      	beq.n	800240e <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80023a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ac:	b91b      	cbnz	r3, 80023b6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ae:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b2:	f7fe fad3 	bl	800095c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023b6:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023b8:	68a0      	ldr	r0, [r4, #8]
 80023ba:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80023c2:	680b      	ldr	r3, [r1, #0]
 80023c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023ca:	6863      	ldr	r3, [r4, #4]
 80023cc:	4303      	orrs	r3, r0
 80023ce:	68e0      	ldr	r0, [r4, #12]
 80023d0:	4303      	orrs	r3, r0
 80023d2:	6920      	ldr	r0, [r4, #16]
 80023d4:	4303      	orrs	r3, r0
 80023d6:	6960      	ldr	r0, [r4, #20]
 80023d8:	4303      	orrs	r3, r0
 80023da:	69e0      	ldr	r0, [r4, #28]
 80023dc:	4303      	orrs	r3, r0
 80023de:	6a20      	ldr	r0, [r4, #32]
 80023e0:	4303      	orrs	r3, r0
 80023e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80023e4:	4303      	orrs	r3, r0
 80023e6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80023ea:	4303      	orrs	r3, r0
 80023ec:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80023ee:	0c12      	lsrs	r2, r2, #16
 80023f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023f2:	f002 0204 	and.w	r2, r2, #4
 80023f6:	431a      	orrs	r2, r3
 80023f8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023fa:	69cb      	ldr	r3, [r1, #28]
 80023fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002400:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002402:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002404:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002406:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002408:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 800240c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
}
 8002410:	bd10      	pop	{r4, pc}

08002412 <HAL_TIM_Base_MspInit>:
 8002412:	4770      	bx	lr

08002414 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002426:	bf1e      	ittt	ne
 8002428:	681a      	ldrne	r2, [r3, #0]
 800242a:	f042 0201 	orrne.w	r2, r2, #1
 800242e:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002430:	2000      	movs	r0, #0
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_OC_DelayElapsedCallback>:
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_IC_CaptureCallback>:
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_TriggerCallback>:
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	0791      	lsls	r1, r2, #30
{
 8002442:	b510      	push	{r4, lr}
 8002444:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002446:	d50e      	bpl.n	8002466 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	0792      	lsls	r2, r2, #30
 800244c:	d50b      	bpl.n	8002466 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800244e:	f06f 0202 	mvn.w	r2, #2
 8002452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002454:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002456:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002458:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245c:	d077      	beq.n	800254e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245e:	f7ff ffea 	bl	8002436 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	2300      	movs	r3, #0
 8002464:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	0750      	lsls	r0, r2, #29
 800246c:	d510      	bpl.n	8002490 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	0751      	lsls	r1, r2, #29
 8002472:	d50d      	bpl.n	8002490 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002474:	f06f 0204 	mvn.w	r2, #4
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002486:	d068      	beq.n	800255a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002488:	f7ff ffd5 	bl	8002436 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	2300      	movs	r3, #0
 800248e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	0712      	lsls	r2, r2, #28
 8002496:	d50f      	bpl.n	80024b8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	0710      	lsls	r0, r2, #28
 800249c:	d50c      	bpl.n	80024b8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800249e:	f06f 0208 	mvn.w	r2, #8
 80024a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a8:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024b0:	f7ff ffc1 	bl	8002436 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b4:	2300      	movs	r3, #0
 80024b6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	06d2      	lsls	r2, r2, #27
 80024be:	d510      	bpl.n	80024e2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	06d0      	lsls	r0, r2, #27
 80024c4:	d50d      	bpl.n	80024e2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024c6:	f06f 0210 	mvn.w	r2, #16
 80024ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ce:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d8:	d04b      	beq.n	8002572 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	f7ff ffac 	bl	8002436 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	2300      	movs	r3, #0
 80024e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	07d1      	lsls	r1, r2, #31
 80024e8:	d508      	bpl.n	80024fc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	07d2      	lsls	r2, r2, #31
 80024ee:	d505      	bpl.n	80024fc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f0:	f06f 0201 	mvn.w	r2, #1
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7fe f982 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	0610      	lsls	r0, r2, #24
 8002502:	d508      	bpl.n	8002516 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	0611      	lsls	r1, r2, #24
 8002508:	d505      	bpl.n	8002516 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800250a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800250e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002510:	4620      	mov	r0, r4
 8002512:	f000 f8b6 	bl	8002682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	0652      	lsls	r2, r2, #25
 800251c:	d508      	bpl.n	8002530 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	0650      	lsls	r0, r2, #25
 8002522:	d505      	bpl.n	8002530 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ff85 	bl	800243a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	0691      	lsls	r1, r2, #26
 8002536:	d522      	bpl.n	800257e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	0692      	lsls	r2, r2, #26
 800253c:	d51f      	bpl.n	800257e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002542:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800254a:	f000 b899 	b.w	8002680 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	f7ff ff71 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002552:	4620      	mov	r0, r4
 8002554:	f7ff ff70 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
 8002558:	e783      	b.n	8002462 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	f7ff ff6b 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ff6a 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
 8002564:	e792      	b.n	800248c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	f7ff ff65 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff ff64 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
 8002570:	e7a0      	b.n	80024b4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	f7ff ff5f 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff ff5e 	bl	8002438 <HAL_TIM_PWM_PulseFinishedCallback>
 800257c:	e7af      	b.n	80024de <HAL_TIM_IRQHandler+0xa2>
 800257e:	bd10      	pop	{r4, pc}

08002580 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002582:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002584:	4290      	cmp	r0, r2
 8002586:	d012      	beq.n	80025ae <TIM_Base_SetConfig+0x2e>
 8002588:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800258c:	d00f      	beq.n	80025ae <TIM_Base_SetConfig+0x2e>
 800258e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002592:	4290      	cmp	r0, r2
 8002594:	d00b      	beq.n	80025ae <TIM_Base_SetConfig+0x2e>
 8002596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800259a:	4290      	cmp	r0, r2
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x2e>
 800259e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x2e>
 80025a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80025aa:	4290      	cmp	r0, r2
 80025ac:	d119      	bne.n	80025e2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80025ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b6:	4a23      	ldr	r2, [pc, #140]	; (8002644 <TIM_Base_SetConfig+0xc4>)
 80025b8:	4290      	cmp	r0, r2
 80025ba:	d029      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025c0:	d026      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80025c6:	4290      	cmp	r0, r2
 80025c8:	d022      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d01e      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d6:	4290      	cmp	r0, r2
 80025d8:	d01a      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80025de:	4290      	cmp	r0, r2
 80025e0:	d016      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <TIM_Base_SetConfig+0xc8>)
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d013      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ec:	4290      	cmp	r0, r2
 80025ee:	d00f      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025f4:	4290      	cmp	r0, r2
 80025f6:	d00b      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 80025f8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80025fc:	4290      	cmp	r0, r2
 80025fe:	d007      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 8002600:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002604:	4290      	cmp	r0, r2
 8002606:	d003      	beq.n	8002610 <TIM_Base_SetConfig+0x90>
 8002608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800260c:	4290      	cmp	r0, r2
 800260e:	d103      	bne.n	8002618 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002610:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002618:	694a      	ldr	r2, [r1, #20]
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002620:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002622:	688b      	ldr	r3, [r1, #8]
 8002624:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002626:	680b      	ldr	r3, [r1, #0]
 8002628:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <TIM_Base_SetConfig+0xc4>)
 800262c:	4298      	cmp	r0, r3
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0xb8>
 8002630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002634:	4298      	cmp	r0, r3
 8002636:	d101      	bne.n	800263c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002638:	690b      	ldr	r3, [r1, #16]
 800263a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800263c:	2301      	movs	r3, #1
 800263e:	6143      	str	r3, [r0, #20]
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40014000 	.word	0x40014000

0800264c <HAL_TIM_Base_Init>:
{
 800264c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800264e:	4604      	mov	r4, r0
 8002650:	b1a0      	cbz	r0, 800267c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002656:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800265a:	b91b      	cbnz	r3, 8002664 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800265c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002660:	f7ff fed7 	bl	8002412 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	2302      	movs	r3, #2
 8002666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	1d21      	adds	r1, r4, #4
 800266e:	f7ff ff87 	bl	8002580 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002672:	2301      	movs	r3, #1
 8002674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002678:	2000      	movs	r0, #0
 800267a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
}
 800267e:	bd10      	pop	{r4, pc}

08002680 <HAL_TIMEx_CommutCallback>:
 8002680:	4770      	bx	lr

08002682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002682:	4770      	bx	lr

08002684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002688:	6806      	ldr	r6, [r0, #0]
 800268a:	68c2      	ldr	r2, [r0, #12]
 800268c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800268e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002694:	4313      	orrs	r3, r2
 8002696:	6133      	str	r3, [r6, #16]
{
 8002698:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800269a:	6883      	ldr	r3, [r0, #8]
 800269c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800269e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a0:	4303      	orrs	r3, r0
 80026a2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026a4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80026aa:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b4:	6973      	ldr	r3, [r6, #20]
 80026b6:	69a2      	ldr	r2, [r4, #24]
 80026b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026bc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026c2:	6173      	str	r3, [r6, #20]
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c6:	d17c      	bne.n	80027c2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026c8:	429e      	cmp	r6, r3
 80026ca:	d003      	beq.n	80026d4 <UART_SetConfig+0x50>
 80026cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d0:	429e      	cmp	r6, r3
 80026d2:	d144      	bne.n	800275e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026d4:	f7ff fd6c 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80026d8:	2519      	movs	r5, #25
 80026da:	fb05 f300 	mul.w	r3, r5, r0
 80026de:	6860      	ldr	r0, [r4, #4]
 80026e0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026e4:	0040      	lsls	r0, r0, #1
 80026e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80026ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026f2:	f7ff fd5d 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	4368      	muls	r0, r5
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fbb0 f7f3 	udiv	r7, r0, r3
 8002700:	f7ff fd56 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002704:	6863      	ldr	r3, [r4, #4]
 8002706:	4368      	muls	r0, r5
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002712:	fb09 7313 	mls	r3, r9, r3, r7
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3332      	adds	r3, #50	; 0x32
 800271a:	fbb3 f3f9 	udiv	r3, r3, r9
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002724:	f7ff fd44 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002728:	6862      	ldr	r2, [r4, #4]
 800272a:	4368      	muls	r0, r5
 800272c:	0052      	lsls	r2, r2, #1
 800272e:	fbb0 faf2 	udiv	sl, r0, r2
 8002732:	f7ff fd3d 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	4368      	muls	r0, r5
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002740:	fbb3 f3f9 	udiv	r3, r3, r9
 8002744:	fb09 a313 	mls	r3, r9, r3, sl
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	3332      	adds	r3, #50	; 0x32
 800274c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002756:	443b      	add	r3, r7
 8002758:	60b3      	str	r3, [r6, #8]
 800275a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800275e:	f7ff fd17 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002762:	2519      	movs	r5, #25
 8002764:	fb05 f300 	mul.w	r3, r5, r0
 8002768:	6860      	ldr	r0, [r4, #4]
 800276a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800276e:	0040      	lsls	r0, r0, #1
 8002770:	fbb3 f3f0 	udiv	r3, r3, r0
 8002774:	fbb3 f3f9 	udiv	r3, r3, r9
 8002778:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800277c:	f7ff fd08 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002780:	6863      	ldr	r3, [r4, #4]
 8002782:	4368      	muls	r0, r5
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fbb0 f7f3 	udiv	r7, r0, r3
 800278a:	f7ff fd01 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800278e:	6863      	ldr	r3, [r4, #4]
 8002790:	4368      	muls	r0, r5
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fbb0 f3f3 	udiv	r3, r0, r3
 8002798:	fbb3 f3f9 	udiv	r3, r3, r9
 800279c:	fb09 7313 	mls	r3, r9, r3, r7
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	3332      	adds	r3, #50	; 0x32
 80027a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80027ae:	f7ff fcef 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80027b2:	6862      	ldr	r2, [r4, #4]
 80027b4:	4368      	muls	r0, r5
 80027b6:	0052      	lsls	r2, r2, #1
 80027b8:	fbb0 faf2 	udiv	sl, r0, r2
 80027bc:	f7ff fce8 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80027c0:	e7b9      	b.n	8002736 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c2:	429e      	cmp	r6, r3
 80027c4:	d002      	beq.n	80027cc <UART_SetConfig+0x148>
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <UART_SetConfig+0x230>)
 80027c8:	429e      	cmp	r6, r3
 80027ca:	d140      	bne.n	800284e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027cc:	f7ff fcf0 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80027d0:	6867      	ldr	r7, [r4, #4]
 80027d2:	2519      	movs	r5, #25
 80027d4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027d8:	fb05 f300 	mul.w	r3, r5, r0
 80027dc:	00bf      	lsls	r7, r7, #2
 80027de:	fbb3 f3f7 	udiv	r3, r3, r7
 80027e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80027e6:	011f      	lsls	r7, r3, #4
 80027e8:	f7ff fce2 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	4368      	muls	r0, r5
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fbb0 f8f3 	udiv	r8, r0, r3
 80027f6:	f7ff fcdb 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80027fa:	6863      	ldr	r3, [r4, #4]
 80027fc:	4368      	muls	r0, r5
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	fbb3 f3f9 	udiv	r3, r3, r9
 8002808:	fb09 8313 	mls	r3, r9, r3, r8
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	fbb3 f3f9 	udiv	r3, r3, r9
 8002814:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002818:	f7ff fcca 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 800281c:	6862      	ldr	r2, [r4, #4]
 800281e:	4368      	muls	r0, r5
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	fbb0 faf2 	udiv	sl, r0, r2
 8002826:	f7ff fcc3 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800282a:	6863      	ldr	r3, [r4, #4]
 800282c:	4368      	muls	r0, r5
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	fbb0 f3f3 	udiv	r3, r0, r3
 8002834:	fbb3 f3f9 	udiv	r3, r3, r9
 8002838:	fb09 a313 	mls	r3, r9, r3, sl
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	fbb3 f3f9 	udiv	r3, r3, r9
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	ea43 0308 	orr.w	r3, r3, r8
 800284c:	e783      	b.n	8002756 <UART_SetConfig+0xd2>
 800284e:	f7ff fc9f 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002852:	6867      	ldr	r7, [r4, #4]
 8002854:	2519      	movs	r5, #25
 8002856:	f04f 0964 	mov.w	r9, #100	; 0x64
 800285a:	fb05 f300 	mul.w	r3, r5, r0
 800285e:	00bf      	lsls	r7, r7, #2
 8002860:	fbb3 f3f7 	udiv	r3, r3, r7
 8002864:	fbb3 f3f9 	udiv	r3, r3, r9
 8002868:	011f      	lsls	r7, r3, #4
 800286a:	f7ff fc91 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	4368      	muls	r0, r5
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb0 f8f3 	udiv	r8, r0, r3
 8002878:	f7ff fc8a 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800287c:	6863      	ldr	r3, [r4, #4]
 800287e:	4368      	muls	r0, r5
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	fbb3 f3f9 	udiv	r3, r3, r9
 800288a:	fb09 8313 	mls	r3, r9, r3, r8
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	3332      	adds	r3, #50	; 0x32
 8002892:	fbb3 f3f9 	udiv	r3, r3, r9
 8002896:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800289a:	f7ff fc79 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	4368      	muls	r0, r5
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	fbb0 faf2 	udiv	sl, r0, r2
 80028a8:	f7ff fc72 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80028ac:	e7bd      	b.n	800282a <UART_SetConfig+0x1a6>
 80028ae:	bf00      	nop
 80028b0:	40011000 	.word	0x40011000
 80028b4:	40011400 	.word	0x40011400

080028b8 <HAL_UART_Init>:
{
 80028b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80028ba:	4604      	mov	r4, r0
 80028bc:	b340      	cbz	r0, 8002910 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80028c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028c6:	b91b      	cbnz	r3, 80028d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028cc:	f7fe f87a 	bl	80009c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028d2:	2324      	movs	r3, #36	; 0x24
 80028d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028d8:	68d3      	ldr	r3, [r2, #12]
 80028da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fecf 	bl	8002684 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028fe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002902:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800290a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800290e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002910:	2001      	movs	r0, #1
}
 8002912:	bd10      	pop	{r4, pc}

08002914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002916:	3b01      	subs	r3, #1
 8002918:	d101      	bne.n	800291e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
 800291c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800291e:	6902      	ldr	r2, [r0, #16]
 8002920:	2a00      	cmp	r2, #0
 8002922:	daf8      	bge.n	8002916 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002924:	6903      	ldr	r3, [r0, #16]
 8002926:	4a06      	ldr	r2, [pc, #24]	; (8002940 <USB_CoreReset+0x2c>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800292e:	3a01      	subs	r2, #1
 8002930:	d0f3      	beq.n	800291a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002932:	6903      	ldr	r3, [r0, #16]
 8002934:	f013 0301 	ands.w	r3, r3, #1
 8002938:	d1f9      	bne.n	800292e <USB_CoreReset+0x1a>

  return HAL_OK;
 800293a:	4618      	mov	r0, r3
}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	00030d41 	.word	0x00030d41

08002944 <USB_CoreInit>:
{
 8002944:	b084      	sub	sp, #16
 8002946:	b538      	push	{r3, r4, r5, lr}
 8002948:	ad05      	add	r5, sp, #20
 800294a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800294e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002950:	2b01      	cmp	r3, #1
{
 8002952:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002954:	d125      	bne.n	80029a2 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002956:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800295e:	68c3      	ldr	r3, [r0, #12]
 8002960:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002968:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800296a:	68c3      	ldr	r3, [r0, #12]
 800296c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002970:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002974:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002976:	bf02      	ittt	eq
 8002978:	68c3      	ldreq	r3, [r0, #12]
 800297a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800297e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002980:	f7ff ffc8 	bl	8002914 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002984:	9b08      	ldr	r3, [sp, #32]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800298a:	68a3      	ldr	r3, [r4, #8]
 800298c:	f043 0306 	orr.w	r3, r3, #6
 8002990:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002992:	68a3      	ldr	r3, [r4, #8]
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	60a3      	str	r3, [r4, #8]
}
 800299a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800299e:	b004      	add	sp, #16
 80029a0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029a2:	68c3      	ldr	r3, [r0, #12]
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80029aa:	f7ff ffb3 	bl	8002914 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80029ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029b0:	b923      	cbnz	r3, 80029bc <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80029ba:	e7e3      	b.n	8002984 <USB_CoreInit+0x40>
 80029bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	e7f9      	b.n	80029b8 <USB_CoreInit+0x74>

080029c4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80029c4:	6883      	ldr	r3, [r0, #8]
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6083      	str	r3, [r0, #8]
}
 80029cc:	2000      	movs	r0, #0
 80029ce:	4770      	bx	lr

080029d0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80029d0:	6883      	ldr	r3, [r0, #8]
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6083      	str	r3, [r0, #8]
}
 80029d8:	2000      	movs	r0, #0
 80029da:	4770      	bx	lr

080029dc <USB_SetCurrentMode>:
{
 80029dc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80029de:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80029e0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80029e2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80029e6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80029e8:	d108      	bne.n	80029fc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80029ea:	68c3      	ldr	r3, [r0, #12]
 80029ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80029f0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80029f2:	2032      	movs	r0, #50	; 0x32
 80029f4:	f7fe f90a 	bl	8000c0c <HAL_Delay>
  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
 80029fa:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80029fc:	b919      	cbnz	r1, 8002a06 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80029fe:	68c3      	ldr	r3, [r0, #12]
 8002a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a04:	e7f4      	b.n	80029f0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
}
 8002a08:	bd08      	pop	{r3, pc}
	...

08002a0c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a0c:	0189      	lsls	r1, r1, #6
 8002a0e:	f041 0120 	orr.w	r1, r1, #32
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <USB_FlushTxFifo+0x20>)
 8002a14:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002a16:	3a01      	subs	r2, #1
 8002a18:	d005      	beq.n	8002a26 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a1a:	6903      	ldr	r3, [r0, #16]
 8002a1c:	f013 0320 	ands.w	r3, r3, #32
 8002a20:	d1f9      	bne.n	8002a16 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002a22:	4618      	mov	r0, r3
 8002a24:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a26:	2003      	movs	r0, #3
}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	00030d41 	.word	0x00030d41

08002a30 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a30:	2310      	movs	r3, #16
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <USB_FlushRxFifo+0x1c>)
 8002a34:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002a36:	3a01      	subs	r2, #1
 8002a38:	d005      	beq.n	8002a46 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a3a:	6903      	ldr	r3, [r0, #16]
 8002a3c:	f013 0310 	ands.w	r3, r3, #16
 8002a40:	d1f9      	bne.n	8002a36 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002a42:	4618      	mov	r0, r3
 8002a44:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	00030d41 	.word	0x00030d41

08002a50 <USB_WritePacket>:
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002a56:	b94c      	cbnz	r4, 8002a6c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002a58:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002a5a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002a66:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	d101      	bne.n	8002a70 <USB_WritePacket+0x20>
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002a70:	f851 2b04 	ldr.w	r2, [r1], #4
 8002a74:	6002      	str	r2, [r0, #0]
 8002a76:	e7f7      	b.n	8002a68 <USB_WritePacket+0x18>

08002a78 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002a78:	3203      	adds	r2, #3
 8002a7a:	f022 0203 	bic.w	r2, r2, #3
 8002a7e:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a80:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002a84:	4291      	cmp	r1, r2
 8002a86:	d101      	bne.n	8002a8c <USB_ReadPacket+0x14>
}
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a8c:	6803      	ldr	r3, [r0, #0]
 8002a8e:	f841 3b04 	str.w	r3, [r1], #4
 8002a92:	e7f7      	b.n	8002a84 <USB_ReadPacket+0xc>

08002a94 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002a94:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002a96:	6980      	ldr	r0, [r0, #24]
}
 8002a98:	4010      	ands	r0, r2
 8002a9a:	4770      	bx	lr

08002a9c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002a9c:	6940      	ldr	r0, [r0, #20]
}
 8002a9e:	f000 0001 	and.w	r0, r0, #1
 8002aa2:	4770      	bx	lr

08002aa4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002aa4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002aa8:	f023 0303 	bic.w	r3, r3, #3
{
 8002aac:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002aae:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002ab2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002ab6:	f001 0303 	and.w	r3, r1, #3
 8002aba:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8002abc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002abe:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002ac2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002ac6:	d104      	bne.n	8002ad2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002ac8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002acc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8002ad2:	2902      	cmp	r1, #2
 8002ad4:	d1fb      	bne.n	8002ace <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8002ad6:	f241 7370 	movw	r3, #6000	; 0x1770
 8002ada:	e7f7      	b.n	8002acc <USB_InitFSLSPClkSel+0x28>

08002adc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002ade:	2500      	movs	r5, #0
 8002ae0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002ae2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002ae6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002aee:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002af0:	9b01      	ldr	r3, [sp, #4]
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002af6:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002af8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002afc:	2064      	movs	r0, #100	; 0x64
 8002afe:	f7fe f885 	bl	8000c0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	f7fe f87d 	bl	8000c0c <HAL_Delay>

  return HAL_OK;
}
 8002b12:	4628      	mov	r0, r5
 8002b14:	b003      	add	sp, #12
 8002b16:	bd30      	pop	{r4, r5, pc}

08002b18 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002b18:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002b1e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002b22:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002b24:	9b01      	ldr	r3, [sp, #4]
 8002b26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b2a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	04da      	lsls	r2, r3, #19
 8002b30:	d406      	bmi.n	8002b40 <USB_DriveVbus+0x28>
 8002b32:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002b34:	bf02      	ittt	eq
 8002b36:	9b01      	ldreq	r3, [sp, #4]
 8002b38:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002b3c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002b40:	9b01      	ldr	r3, [sp, #4]
 8002b42:	04db      	lsls	r3, r3, #19
 8002b44:	d505      	bpl.n	8002b52 <USB_DriveVbus+0x3a>
 8002b46:	b921      	cbnz	r1, 8002b52 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002b48:	9b01      	ldr	r3, [sp, #4]
 8002b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b4e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002b52:	2000      	movs	r0, #0
 8002b54:	b002      	add	sp, #8
 8002b56:	4770      	bx	lr

08002b58 <USB_HostInit>:
{
 8002b58:	b084      	sub	sp, #16
 8002b5a:	b538      	push	{r3, r4, r5, lr}
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	a805      	add	r0, sp, #20
 8002b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b70:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b74:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b78:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b84:	05da      	lsls	r2, r3, #23
 8002b86:	d53f      	bpl.n	8002c08 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002b88:	9b07      	ldr	r3, [sp, #28]
 8002b8a:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002b8c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002b90:	d13c      	bne.n	8002c0c <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002b92:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002b96:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff35 	bl	8002a0c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff44 	bl	8002a30 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9906      	ldr	r1, [sp, #24]
 8002bac:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8002bb4:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002bb6:	428b      	cmp	r3, r1
 8002bb8:	d12b      	bne.n	8002c12 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7ff ffab 	bl	8002b18 <USB_DriveVbus>
  HAL_Delay(200U);
 8002bc2:	20c8      	movs	r0, #200	; 0xc8
 8002bc4:	f7fe f822 	bl	8000c0c <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002bd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	d521      	bpl.n	8002c1c <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bdc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002bde:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002be2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002be6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002bea:	9b08      	ldr	r3, [sp, #32]
 8002bec:	b91b      	cbnz	r3, 8002bf6 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bee:	69a3      	ldr	r3, [r4, #24]
 8002bf0:	f043 0310 	orr.w	r3, r3, #16
 8002bf4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002bf6:	69a2      	ldr	r2, [r4, #24]
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <USB_HostInit+0xd8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61a3      	str	r3, [r4, #24]
}
 8002bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c02:	2000      	movs	r0, #0
 8002c04:	b004      	add	sp, #16
 8002c06:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002c08:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	e7c1      	b.n	8002b96 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002c12:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002c14:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002c16:	60d5      	str	r5, [r2, #12]
 8002c18:	3220      	adds	r2, #32
 8002c1a:	e7cc      	b.n	8002bb6 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002c20:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002c24:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002c26:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <USB_HostInit+0xdc>)
 8002c28:	e7dd      	b.n	8002be6 <USB_HostInit+0x8e>
 8002c2a:	bf00      	nop
 8002c2c:	00e00300 	.word	0x00e00300
 8002c30:	a3200008 	.word	0xa3200008
 8002c34:	004000e0 	.word	0x004000e0

08002c38 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002c38:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002c3e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002c42:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002c44:	9801      	ldr	r0, [sp, #4]
}
 8002c46:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002c4a:	b002      	add	sp, #8
 8002c4c:	4770      	bx	lr

08002c4e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002c4e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002c52:	6880      	ldr	r0, [r0, #8]
}
 8002c54:	b280      	uxth	r0, r0
 8002c56:	4770      	bx	lr

08002c58 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002c5c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8002c60:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8002c64:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002c68:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c6e:	60a0      	str	r0, [r4, #8]
 8002c70:	fa4f f882 	sxtb.w	r8, r2
 8002c74:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002c78:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002c7c:	2e03      	cmp	r6, #3
 8002c7e:	d86c      	bhi.n	8002d5a <USB_HC_Init+0x102>
 8002c80:	e8df f006 	tbb	[pc, r6]
 8002c84:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c88:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002c8c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002c90:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002c92:	da03      	bge.n	8002c9c <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002c94:	68e1      	ldr	r1, [r4, #12]
 8002c96:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c9a:	e005      	b.n	8002ca8 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002c9c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002c9e:	05c9      	lsls	r1, r1, #23
 8002ca0:	d542      	bpl.n	8002d28 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002ca2:	68e1      	ldr	r1, [r4, #12]
 8002ca4:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002ca8:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002caa:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002cac:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f10e 	lsl.w	r1, r1, lr
 8002cb6:	4321      	orrs	r1, r4
 8002cb8:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002cbc:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002cbe:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002cc2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002cc6:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002cc8:	bfb4      	ite	lt
 8002cca:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8002cce:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002cd0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002cd4:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002cd8:	059b      	lsls	r3, r3, #22
 8002cda:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002cde:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002ce2:	02d2      	lsls	r2, r2, #11
 8002ce4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002ce8:	432b      	orrs	r3, r5
 8002cea:	4313      	orrs	r3, r2
 8002cec:	04b2      	lsls	r2, r6, #18
 8002cee:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8002cf2:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002cf4:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002cf8:	bf0c      	ite	eq
 8002cfa:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002cfe:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002d00:	4323      	orrs	r3, r4
 8002d02:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002d04:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002d06:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002d0a:	d128      	bne.n	8002d5e <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002d0c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d14:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d1c:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002d20:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d24:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002d26:	dbb5      	blt.n	8002c94 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002d28:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f10e 	lsl.w	r1, r1, lr
 8002d32:	4301      	orrs	r1, r0
 8002d34:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002d38:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d3a:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002d3c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002d40:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002d42:	4604      	mov	r4, r0
 8002d44:	e7c4      	b.n	8002cd0 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d46:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002d4a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d4e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002d50:	daea      	bge.n	8002d28 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002d52:	68e1      	ldr	r1, [r4, #12]
 8002d54:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002d58:	e7a6      	b.n	8002ca8 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e7a6      	b.n	8002cac <USB_HC_Init+0x54>
}
 8002d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d62 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002d62:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002d66:	6940      	ldr	r0, [r0, #20]
}
 8002d68:	b280      	uxth	r0, r0
 8002d6a:	4770      	bx	lr

08002d6c <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002d6c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002d70:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8002d74:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002d78:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002d7c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d84:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002d88:	d11e      	bne.n	8002dc8 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002d8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002d8c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d90:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002d94:	d137      	bne.n	8002e06 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002daa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002db2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002db6:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	d002      	beq.n	8002dc4 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	dbfa      	blt.n	8002dba <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002dc8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002dcc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002dd0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002dd4:	d117      	bne.n	8002e06 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002dde:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002de6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002dea:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002df2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002df6:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	d0e2      	beq.n	8002dc4 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	dbfa      	blt.n	8002dfa <USB_HC_Halt+0x8e>
 8002e04:	e7de      	b.n	8002dc4 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002e0e:	e7d9      	b.n	8002dc4 <USB_HC_Halt+0x58>

08002e10 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002e10:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <USB_DoPing+0x20>)
 8002e16:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e1a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	80080000 	.word	0x80080000

08002e34 <USB_HC_StartXfer>:
{
 8002e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002e38:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002e3a:	05db      	lsls	r3, r3, #23
{
 8002e3c:	4616      	mov	r6, r2
 8002e3e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002e40:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002e42:	d517      	bpl.n	8002e74 <USB_HC_StartXfer+0x40>
 8002e44:	790d      	ldrb	r5, [r1, #4]
 8002e46:	b9ad      	cbnz	r5, 8002e74 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002e48:	b94e      	cbnz	r6, 8002e5e <USB_HC_StartXfer+0x2a>
 8002e4a:	794b      	ldrb	r3, [r1, #5]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d111      	bne.n	8002e74 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002e50:	4611      	mov	r1, r2
 8002e52:	f7ff ffdd 	bl	8002e10 <USB_DoPing>
}
 8002e56:	2000      	movs	r0, #0
 8002e58:	b002      	add	sp, #8
 8002e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002e5e:	2e01      	cmp	r6, #1
 8002e60:	d108      	bne.n	8002e74 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002e62:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002e66:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002e6a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002e6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002e72:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002e74:	6908      	ldr	r0, [r1, #16]
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d066      	beq.n	8002f48 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002e7a:	890b      	ldrh	r3, [r1, #8]
 8002e7c:	3801      	subs	r0, #1
 8002e7e:	4418      	add	r0, r3
 8002e80:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e84:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002e86:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002e8a:	d903      	bls.n	8002e94 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8002e90:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002e94:	78cf      	ldrb	r7, [r1, #3]
 8002e96:	b117      	cbz	r7, 8002e9e <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002e98:	890b      	ldrh	r3, [r1, #8]
 8002e9a:	4343      	muls	r3, r0
 8002e9c:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002e9e:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ea2:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002ea4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ea8:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002eac:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002eb0:	ea4e 0e08 	orr.w	lr, lr, r8
 8002eb4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002f94 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002eb8:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002ebc:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002ec0:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ec4:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002ec8:	b116      	cbz	r6, 8002ed0 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002eca:	68c8      	ldr	r0, [r1, #12]
 8002ecc:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002ed0:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002ed4:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002ed8:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002edc:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8002ee0:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002ee4:	43c0      	mvns	r0, r0
 8002ee6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002eea:	0740      	lsls	r0, r0, #29
 8002eec:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002ef0:	ea40 000c 	orr.w	r0, r0, ip
 8002ef4:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ef8:	4825      	ldr	r0, [pc, #148]	; (8002f90 <USB_HC_StartXfer+0x15c>)
 8002efa:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002efe:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f02:	f8d0 c000 	ldr.w	ip, [r0]
 8002f06:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002f0a:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002f0e:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8002f12:	b1df      	cbz	r7, 8002f4c <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002f14:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002f18:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1c:	f8d0 c000 	ldr.w	ip, [r0]
 8002f20:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002f24:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f28:	6800      	ldr	r0, [r0, #0]
 8002f2a:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	d191      	bne.n	8002e56 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002f32:	2f00      	cmp	r7, #0
 8002f34:	d18f      	bne.n	8002e56 <USB_HC_StartXfer+0x22>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d08d      	beq.n	8002e56 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8002f3a:	79c8      	ldrb	r0, [r1, #7]
 8002f3c:	2803      	cmp	r0, #3
 8002f3e:	d813      	bhi.n	8002f68 <USB_HC_StartXfer+0x134>
 8002f40:	e8df f000 	tbb	[pc, r0]
 8002f44:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8002f48:	2001      	movs	r0, #1
 8002f4a:	e7a3      	b.n	8002e94 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002f4c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8002f50:	e7e2      	b.n	8002f18 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002f52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002f54:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002f56:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002f5a:	b280      	uxth	r0, r0
 8002f5c:	4285      	cmp	r5, r0
 8002f5e:	d903      	bls.n	8002f68 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002f60:	69a0      	ldr	r0, [r4, #24]
 8002f62:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002f66:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	9000      	str	r0, [sp, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	68c9      	ldr	r1, [r1, #12]
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff fd6d 	bl	8002a50 <USB_WritePacket>
 8002f76:	e76e      	b.n	8002e56 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002f78:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002f7c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002f7e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002f82:	b280      	uxth	r0, r0
 8002f84:	4285      	cmp	r5, r0
 8002f86:	d9ef      	bls.n	8002f68 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002f88:	69a0      	ldr	r0, [r4, #24]
 8002f8a:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002f8e:	e7ea      	b.n	8002f66 <USB_HC_StartXfer+0x132>
 8002f90:	2000054c 	.word	0x2000054c
 8002f94:	1ff80000 	.word	0x1ff80000

08002f98 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f98:	6883      	ldr	r3, [r0, #8]
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002f9e:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fa0:	2110      	movs	r1, #16
{
 8002fa2:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fa4:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fa6:	f7ff fd31 	bl	8002a0c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff fd40 	bl	8002a30 <USB_FlushRxFifo>
 8002fb0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002fb4:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002fb8:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002fba:	6811      	ldr	r1, [r2, #0]
 8002fbc:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002fc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002fc4:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002fc8:	4290      	cmp	r0, r2
 8002fca:	d1f6      	bne.n	8002fba <USB_StopHost+0x22>
 8002fcc:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002fd4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002fd8:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002fda:	3001      	adds	r0, #1
 8002fdc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fe0:	d802      	bhi.n	8002fe8 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	dbf8      	blt.n	8002fda <USB_StopHost+0x42>
 8002fe8:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d1ef      	bne.n	8002fce <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ff2:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002ff6:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ff8:	68a3      	ldr	r3, [r4, #8]
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003000:	2000      	movs	r0, #0
 8003002:	bd10      	pop	{r4, pc}

08003004 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8003004:	2000      	movs	r0, #0
 8003006:	4770      	bx	lr

08003008 <USBH_CDC_InterfaceDeInit>:
{
 8003008:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800300a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800300e:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003010:	7821      	ldrb	r1, [r4, #0]
{
 8003012:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003014:	b139      	cbz	r1, 8003026 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003016:	f000 fe17 	bl	8003c48 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800301a:	7821      	ldrb	r1, [r4, #0]
 800301c:	4628      	mov	r0, r5
 800301e:	f000 fe2f 	bl	8003c80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003022:	2300      	movs	r3, #0
 8003024:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003026:	7b21      	ldrb	r1, [r4, #12]
 8003028:	b141      	cbz	r1, 800303c <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800302a:	4628      	mov	r0, r5
 800302c:	f000 fe0c 	bl	8003c48 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003030:	7b21      	ldrb	r1, [r4, #12]
 8003032:	4628      	mov	r0, r5
 8003034:	f000 fe24 	bl	8003c80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003038:	2300      	movs	r3, #0
 800303a:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 800303c:	7b61      	ldrb	r1, [r4, #13]
 800303e:	b141      	cbz	r1, 8003052 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fe01 	bl	8003c48 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003046:	7b61      	ldrb	r1, [r4, #13]
 8003048:	4628      	mov	r0, r5
 800304a:	f000 fe19 	bl	8003c80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800304e:	2300      	movs	r3, #0
 8003050:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8003052:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003056:	69d8      	ldr	r0, [r3, #28]
 8003058:	b128      	cbz	r0, 8003066 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800305a:	f000 ffdd 	bl	8004018 <free>
    phost->pActiveClass->pData = 0U;
 800305e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
}
 8003066:	2000      	movs	r0, #0
 8003068:	bd38      	pop	{r3, r4, r5, pc}

0800306a <USBH_CDC_InterfaceInit>:
{
 800306a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 800306c:	2202      	movs	r2, #2
{
 800306e:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003070:	2301      	movs	r3, #1
 8003072:	4611      	mov	r1, r2
{
 8003074:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8003076:	f000 f9b2 	bl	80033de <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800307a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 800307c:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 800307e:	d102      	bne.n	8003086 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003080:	2002      	movs	r0, #2
}
 8003082:	b005      	add	sp, #20
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8003086:	4601      	mov	r1, r0
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f99f 	bl	80033cc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800308e:	2050      	movs	r0, #80	; 0x50
 8003090:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8003094:	f000 ffb8 	bl	8004008 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003098:	231a      	movs	r3, #26
 800309a:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800309e:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80030a0:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 80030a4:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80030a6:	bf42      	ittt	mi
 80030a8:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80030aa:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 80030ae:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80030b0:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80030b2:	7841      	ldrb	r1, [r0, #1]
 80030b4:	4628      	mov	r0, r5
 80030b6:	f000 fdcc 	bl	8003c52 <USBH_AllocPipe>
 80030ba:	4601      	mov	r1, r0
 80030bc:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80030be:	8960      	ldrh	r0, [r4, #10]
 80030c0:	9002      	str	r0, [sp, #8]
 80030c2:	2003      	movs	r0, #3
 80030c4:	9001      	str	r0, [sp, #4]
 80030c6:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80030ca:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80030ce:	7862      	ldrb	r2, [r4, #1]
 80030d0:	9000      	str	r0, [sp, #0]
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 fda9 	bl	8003c2a <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	7821      	ldrb	r1, [r4, #0]
 80030dc:	4628      	mov	r0, r5
 80030de:	f000 ff24 	bl	8003f2a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 80030e2:	2300      	movs	r3, #0
 80030e4:	461a      	mov	r2, r3
 80030e6:	210a      	movs	r1, #10
 80030e8:	4628      	mov	r0, r5
 80030ea:	f000 f978 	bl	80033de <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 80030ee:	28ff      	cmp	r0, #255	; 0xff
 80030f0:	d0c6      	beq.n	8003080 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80030f2:	231a      	movs	r3, #26
 80030f4:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80030f8:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80030fc:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003100:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8003104:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003108:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800310c:	bf0d      	iteet	eq
 800310e:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003110:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003112:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003114:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003116:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800311a:	bf08      	it	eq
 800311c:	73a3      	strbeq	r3, [r4, #14]
 800311e:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003122:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003124:	bf18      	it	ne
 8003126:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003128:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800312a:	bf14      	ite	ne
 800312c:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800312e:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003130:	f000 fd8f 	bl	8003c52 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003134:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003136:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003138:	4628      	mov	r0, r5
 800313a:	f000 fd8a 	bl	8003c52 <USBH_AllocPipe>
 800313e:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003140:	8b20      	ldrh	r0, [r4, #24]
 8003142:	9002      	str	r0, [sp, #8]
 8003144:	2602      	movs	r6, #2
 8003146:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800314a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800314e:	7ba2      	ldrb	r2, [r4, #14]
 8003150:	7b61      	ldrb	r1, [r4, #13]
 8003152:	9601      	str	r6, [sp, #4]
 8003154:	9000      	str	r0, [sp, #0]
 8003156:	4628      	mov	r0, r5
 8003158:	f000 fd67 	bl	8003c2a <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 800315c:	8b60      	ldrh	r0, [r4, #26]
 800315e:	9002      	str	r0, [sp, #8]
 8003160:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003164:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003168:	7be2      	ldrb	r2, [r4, #15]
 800316a:	7b21      	ldrb	r1, [r4, #12]
 800316c:	9601      	str	r6, [sp, #4]
 800316e:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003170:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8003172:	4628      	mov	r0, r5
 8003174:	f000 fd59 	bl	8003c2a <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003178:	4632      	mov	r2, r6
 800317a:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 800317c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003180:	4628      	mov	r0, r5
 8003182:	f000 fed2 	bl	8003f2a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8003186:	4632      	mov	r2, r6
 8003188:	7b21      	ldrb	r1, [r4, #12]
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fecd 	bl	8003f2a <USBH_LL_SetToggle>
      status = USBH_OK;
 8003190:	4630      	mov	r0, r6
 8003192:	e776      	b.n	8003082 <USBH_CDC_InterfaceInit+0x18>

08003194 <USBH_CDC_ClassRequest>:
{
 8003194:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003196:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800319a:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800319c:	23a1      	movs	r3, #161	; 0xa1
 800319e:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80031a0:	2321      	movs	r3, #33	; 0x21
 80031a2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80031a4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80031aa:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80031ac:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80031ae:	3140      	adds	r1, #64	; 0x40
{
 80031b0:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80031b2:	f000 fac9 	bl	8003748 <USBH_CtlReq>
  if(status == USBH_OK)
 80031b6:	4605      	mov	r5, r0
 80031b8:	b920      	cbnz	r0, 80031c4 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80031ba:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80031be:	2102      	movs	r1, #2
 80031c0:	4620      	mov	r0, r4
 80031c2:	4798      	blx	r3
}
 80031c4:	4628      	mov	r0, r5
 80031c6:	bd38      	pop	{r3, r4, r5, pc}

080031c8 <USBH_CDC_TransmitCallback>:
 80031c8:	4770      	bx	lr

080031ca <USBH_CDC_ReceiveCallback>:
 80031ca:	4770      	bx	lr

080031cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80031cc:	4770      	bx	lr

080031ce <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80031ce:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80031d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80031d4:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80031d6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80031da:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d83d      	bhi.n	800325c <USBH_CDC_Process+0x8e>
 80031e0:	e8df f003 	tbb	[pc, r3]
 80031e4:	42170603 	.word	0x42170603
 80031e8:	a6          	.byte	0xa6
 80031e9:	00          	.byte	0x00
    status = USBH_OK;
 80031ea:	2000      	movs	r0, #0
}
 80031ec:	b002      	add	sp, #8
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80031f0:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80031f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80031f4:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80031f6:	2320      	movs	r3, #32
 80031f8:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80031fa:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003200:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003202:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003204:	f000 faa0 	bl	8003748 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003208:	bb50      	cbnz	r0, 8003260 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800320a:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 800320c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8003210:	e024      	b.n	800325c <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003212:	23a1      	movs	r3, #161	; 0xa1
 8003214:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003216:	2321      	movs	r3, #33	; 0x21
 8003218:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800321a:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003220:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003222:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003224:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003228:	f000 fa8e 	bl	8003748 <USBH_CtlReq>
    if(req_status == USBH_OK)
 800322c:	b9c0      	cbnz	r0, 8003260 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800322e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003230:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8003232:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003236:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003240:	4291      	cmp	r1, r2
 8003242:	d10b      	bne.n	800325c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003248:	795a      	ldrb	r2, [r3, #5]
 800324a:	4291      	cmp	r1, r2
 800324c:	d106      	bne.n	800325c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800324e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d102      	bne.n	800325c <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8003256:	4628      	mov	r0, r5
 8003258:	f7ff ffb8 	bl	80031cc <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 800325c:	2001      	movs	r0, #1
 800325e:	e7c5      	b.n	80031ec <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003260:	2801      	cmp	r0, #1
 8003262:	d0fb      	beq.n	800325c <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8003264:	2304      	movs	r3, #4
 8003266:	e7d1      	b.n	800320c <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003268:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800326c:	2901      	cmp	r1, #1
 800326e:	d021      	beq.n	80032b4 <USBH_CDC_Process+0xe6>
 8003270:	2902      	cmp	r1, #2
 8003272:	d02e      	beq.n	80032d2 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003274:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003278:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800327a:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 800327e:	2b03      	cmp	r3, #3
 8003280:	d045      	beq.n	800330e <USBH_CDC_Process+0x140>
 8003282:	2b04      	cmp	r3, #4
 8003284:	d1ea      	bne.n	800325c <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8003286:	7b31      	ldrb	r1, [r6, #12]
 8003288:	4628      	mov	r0, r5
 800328a:	f000 fe3d 	bl	8003f08 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800328e:	2801      	cmp	r0, #1
 8003290:	d1e4      	bne.n	800325c <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003292:	7b31      	ldrb	r1, [r6, #12]
 8003294:	4628      	mov	r0, r5
 8003296:	f000 fdf3 	bl	8003e80 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800329a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800329c:	4298      	cmp	r0, r3
 800329e:	d040      	beq.n	8003322 <USBH_CDC_Process+0x154>
 80032a0:	8b72      	ldrh	r2, [r6, #26]
 80032a2:	4290      	cmp	r0, r2
 80032a4:	d93d      	bls.n	8003322 <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 80032a6:	1a1b      	subs	r3, r3, r0
 80032a8:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80032aa:	6a33      	ldr	r3, [r6, #32]
 80032ac:	4418      	add	r0, r3
 80032ae:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e033      	b.n	800331c <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80032b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80032b6:	8b22      	ldrh	r2, [r4, #24]
 80032b8:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80032ba:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80032bc:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80032be:	bf98      	it	ls
 80032c0:	b282      	uxthls	r2, r0
 80032c2:	69e1      	ldr	r1, [r4, #28]
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 fc89 	bl	8003bdc <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80032ca:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80032cc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80032d0:	e7d0      	b.n	8003274 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80032d2:	7b61      	ldrb	r1, [r4, #13]
 80032d4:	f000 fe18 	bl	8003f08 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80032d8:	2801      	cmp	r0, #1
 80032da:	d115      	bne.n	8003308 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80032dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032de:	8b22      	ldrh	r2, [r4, #24]
 80032e0:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80032e2:	bf83      	ittte	hi
 80032e4:	1a9b      	subhi	r3, r3, r2
 80032e6:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80032e8:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 80032ea:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80032ec:	bf8a      	itet	hi
 80032ee:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80032f0:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80032f2:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80032f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032f6:	b10b      	cbz	r3, 80032fc <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e7e7      	b.n	80032cc <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80032fc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8003300:	4628      	mov	r0, r5
 8003302:	f7ff ff61 	bl	80031c8 <USBH_CDC_TransmitCallback>
 8003306:	e7b5      	b.n	8003274 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8003308:	2802      	cmp	r0, #2
 800330a:	d1b3      	bne.n	8003274 <USBH_CDC_Process+0xa6>
 800330c:	e7f4      	b.n	80032f8 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 800330e:	7b33      	ldrb	r3, [r6, #12]
 8003310:	8b72      	ldrh	r2, [r6, #26]
 8003312:	6a31      	ldr	r1, [r6, #32]
 8003314:	4628      	mov	r0, r5
 8003316:	f000 fc78 	bl	8003c0a <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800331a:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800331c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003320:	e79c      	b.n	800325c <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8003322:	2300      	movs	r3, #0
 8003324:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff ff4e 	bl	80031ca <USBH_CDC_ReceiveCallback>
 800332e:	e795      	b.n	800325c <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8003330:	2100      	movs	r1, #0
 8003332:	f000 fc0d 	bl	8003b50 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003336:	2800      	cmp	r0, #0
 8003338:	d190      	bne.n	800325c <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800333a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800333e:	e78d      	b.n	800325c <USBH_CDC_Process+0x8e>

08003340 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003340:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8003344:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003348:	2100      	movs	r1, #0
 800334a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800334e:	4293      	cmp	r3, r2
 8003350:	d1fb      	bne.n	800334a <DeInitStateMachine+0xa>
 8003352:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003356:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003360:	4291      	cmp	r1, r2
 8003362:	d1fb      	bne.n	800335c <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003364:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003366:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003368:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800336a:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800336c:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800336e:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8003372:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003374:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8003376:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003378:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800337c:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8003380:	2000      	movs	r0, #0
 8003382:	4770      	bx	lr

08003384 <USBH_Init>:
{
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	460d      	mov	r5, r1
  if(phost == NULL)
 8003388:	4604      	mov	r4, r0
 800338a:	b180      	cbz	r0, 80033ae <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 800338c:	2300      	movs	r3, #0
  phost->id = id;
 800338e:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8003392:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8003396:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800339a:	f7ff ffd1 	bl	8003340 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800339e:	b10d      	cbz	r5, 80033a4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80033a0:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 fd0d 	bl	8003dc4 <USBH_LL_Init>
  return USBH_OK;
 80033aa:	2000      	movs	r0, #0
 80033ac:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 80033ae:	2002      	movs	r0, #2
}
 80033b0:	bd38      	pop	{r3, r4, r5, pc}

080033b2 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 80033b2:	b149      	cbz	r1, 80033c8 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80033b4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80033b8:	b933      	cbnz	r3, 80033c8 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80033ba:	2201      	movs	r2, #1
 80033bc:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 80033c0:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 80033c4:	4618      	mov	r0, r3
 80033c6:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80033c8:	2002      	movs	r0, #2
  }

  return status;
}
 80033ca:	4770      	bx	lr

080033cc <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80033cc:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80033d0:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80033d2:	bf86      	itte	hi
 80033d4:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80033d8:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80033da:	2002      	movls	r0, #2
  }
  return status;
}
 80033dc:	4770      	bx	lr

080033de <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80033de:	b570      	push	{r4, r5, r6, lr}
 80033e0:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80033e2:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 80033e6:	428e      	cmp	r6, r1
 80033e8:	b2e5      	uxtb	r5, r4
 80033ea:	d001      	beq.n	80033f0 <USBH_FindInterface+0x12>
 80033ec:	29ff      	cmp	r1, #255	; 0xff
 80033ee:	d10b      	bne.n	8003408 <USBH_FindInterface+0x2a>
 80033f0:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80033f4:	4296      	cmp	r6, r2
 80033f6:	d001      	beq.n	80033fc <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80033f8:	2aff      	cmp	r2, #255	; 0xff
 80033fa:	d105      	bne.n	8003408 <USBH_FindInterface+0x2a>
 80033fc:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8003400:	429e      	cmp	r6, r3
 8003402:	d007      	beq.n	8003414 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003404:	2bff      	cmp	r3, #255	; 0xff
 8003406:	d005      	beq.n	8003414 <USBH_FindInterface+0x36>
 8003408:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800340a:	2c02      	cmp	r4, #2
 800340c:	f100 001a 	add.w	r0, r0, #26
 8003410:	d1e7      	bne.n	80033e2 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8003412:	25ff      	movs	r5, #255	; 0xff
}
 8003414:	4628      	mov	r0, r5
 8003416:	bd70      	pop	{r4, r5, r6, pc}

08003418 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800341c:	f000 fcf8 	bl	8003e10 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8003420:	2101      	movs	r1, #1
 8003422:	4620      	mov	r0, r4
 8003424:	f000 fd74 	bl	8003f10 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003428:	2000      	movs	r0, #0
 800342a:	bd10      	pop	{r4, pc}

0800342c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800342c:	b530      	push	{r4, r5, lr}
 800342e:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003430:	2302      	movs	r3, #2
 8003432:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003436:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 800343a:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800343c:	b933      	cbnz	r3, 800344c <USBH_Process+0x20>
 800343e:	7802      	ldrb	r2, [r0, #0]
 8003440:	b122      	cbz	r2, 800344c <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8003442:	7802      	ldrb	r2, [r0, #0]
 8003444:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8003446:	bf1c      	itt	ne
 8003448:	2203      	movne	r2, #3
 800344a:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 800344c:	7822      	ldrb	r2, [r4, #0]
 800344e:	2a0b      	cmp	r2, #11
 8003450:	d818      	bhi.n	8003484 <USBH_Process+0x58>
 8003452:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003456:	000c      	.short	0x000c
 8003458:	001f001a 	.word	0x001f001a
 800345c:	00170121 	.word	0x00170121
 8003460:	0107004f 	.word	0x0107004f
 8003464:	00d000c6 	.word	0x00d000c6
 8003468:	00e700da 	.word	0x00e700da
 800346c:	0118      	.short	0x0118
    if (phost->device.is_connected)
 800346e:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003472:	b13b      	cbz	r3, 8003484 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003474:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8003476:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003478:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 800347a:	f000 fd65 	bl	8003f48 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800347e:	4620      	mov	r0, r4
 8003480:	f000 fcf0 	bl	8003e64 <USBH_LL_ResetPort>
}
 8003484:	2000      	movs	r0, #0
 8003486:	b007      	add	sp, #28
 8003488:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800348a:	2b01      	cmp	r3, #1
 800348c:	d1fa      	bne.n	8003484 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 800348e:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8003490:	7023      	strb	r3, [r4, #0]
 8003492:	e7f7      	b.n	8003484 <USBH_Process+0x58>
    USBH_Delay(100U);
 8003494:	2064      	movs	r0, #100	; 0x64
 8003496:	f000 fd57 	bl	8003f48 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800349a:	4620      	mov	r0, r4
 800349c:	f000 fcd4 	bl	8003e48 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80034a0:	2305      	movs	r3, #5
 80034a2:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80034a4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80034a8:	2100      	movs	r1, #0
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 fbd1 	bl	8003c52 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80034b0:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80034b2:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80034b4:	4620      	mov	r0, r4
 80034b6:	f000 fbcc 	bl	8003c52 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80034ba:	79a2      	ldrb	r2, [r4, #6]
 80034bc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80034c0:	7120      	strb	r0, [r4, #4]
 80034c2:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80034c4:	9202      	str	r2, [sp, #8]
 80034c6:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80034c8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	9501      	str	r5, [sp, #4]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 fba9 	bl	8003c2a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80034d8:	79a2      	ldrb	r2, [r4, #6]
 80034da:	9202      	str	r2, [sp, #8]
 80034dc:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80034e6:	7961      	ldrb	r1, [r4, #5]
 80034e8:	9501      	str	r5, [sp, #4]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4620      	mov	r0, r4
 80034ee:	f000 fb9c 	bl	8003c2a <USBH_OpenPipe>
 80034f2:	e7c7      	b.n	8003484 <USBH_Process+0x58>
  switch (phost->EnumState)
 80034f4:	7863      	ldrb	r3, [r4, #1]
 80034f6:	2b07      	cmp	r3, #7
 80034f8:	d8c4      	bhi.n	8003484 <USBH_Process+0x58>
 80034fa:	e8df f003 	tbb	[pc, r3]
 80034fe:	1504      	.short	0x1504
 8003500:	4138301e 	.word	0x4138301e
 8003504:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003506:	2108      	movs	r1, #8
 8003508:	4620      	mov	r0, r4
 800350a:	f000 f9fa 	bl	8003902 <USBH_Get_DevDesc>
 800350e:	4605      	mov	r5, r0
 8003510:	2800      	cmp	r0, #0
 8003512:	d1b7      	bne.n	8003484 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003514:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003516:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800351a:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800351c:	7921      	ldrb	r1, [r4, #4]
 800351e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003522:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8003524:	9202      	str	r2, [sp, #8]
 8003526:	e7cf      	b.n	80034c8 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003528:	2112      	movs	r1, #18
 800352a:	4620      	mov	r0, r4
 800352c:	f000 f9e9 	bl	8003902 <USBH_Get_DevDesc>
 8003530:	2800      	cmp	r0, #0
 8003532:	d1a7      	bne.n	8003484 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8003534:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003536:	7063      	strb	r3, [r4, #1]
 8003538:	e7a4      	b.n	8003484 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800353a:	2101      	movs	r1, #1
 800353c:	4620      	mov	r0, r4
 800353e:	f000 fadd 	bl	8003afc <USBH_SetAddress>
 8003542:	4605      	mov	r5, r0
 8003544:	2800      	cmp	r0, #0
 8003546:	d19d      	bne.n	8003484 <USBH_Process+0x58>
      USBH_Delay(2U);
 8003548:	2002      	movs	r0, #2
 800354a:	f000 fcfd 	bl	8003f48 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800354e:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003550:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003552:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003554:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003558:	7921      	ldrb	r1, [r4, #4]
 800355a:	79a2      	ldrb	r2, [r4, #6]
 800355c:	e7e2      	b.n	8003524 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 800355e:	2109      	movs	r1, #9
 8003560:	4620      	mov	r0, r4
 8003562:	f000 fa16 	bl	8003992 <USBH_Get_CfgDesc>
 8003566:	2800      	cmp	r0, #0
 8003568:	d18c      	bne.n	8003484 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800356a:	2304      	movs	r3, #4
 800356c:	e7e3      	b.n	8003536 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 800356e:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8003572:	4620      	mov	r0, r4
 8003574:	f000 fa0d 	bl	8003992 <USBH_Get_CfgDesc>
 8003578:	2800      	cmp	r0, #0
 800357a:	d183      	bne.n	8003484 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800357c:	2305      	movs	r3, #5
 800357e:	e7da      	b.n	8003536 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003580:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8003584:	b141      	cbz	r1, 8003598 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8003586:	23ff      	movs	r3, #255	; 0xff
 8003588:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800358c:	4620      	mov	r0, r4
 800358e:	f000 fa8e 	bl	8003aae <USBH_Get_StringDesc>
 8003592:	2800      	cmp	r0, #0
 8003594:	f47f af76 	bne.w	8003484 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003598:	2306      	movs	r3, #6
 800359a:	e7cc      	b.n	8003536 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 800359c:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 80035a0:	b141      	cbz	r1, 80035b4 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 80035a2:	23ff      	movs	r3, #255	; 0xff
 80035a4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 fa80 	bl	8003aae <USBH_Get_StringDesc>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f47f af68 	bne.w	8003484 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80035b4:	2307      	movs	r3, #7
 80035b6:	e7be      	b.n	8003536 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80035b8:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80035bc:	b141      	cbz	r1, 80035d0 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80035be:	23ff      	movs	r3, #255	; 0xff
 80035c0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 fa72 	bl	8003aae <USBH_Get_StringDesc>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	f47f af5a 	bne.w	8003484 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80035d6:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d009      	beq.n	80035f2 <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80035de:	2307      	movs	r3, #7
 80035e0:	e756      	b.n	8003490 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80035e2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f43f af4c 	beq.w	8003484 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80035ec:	2101      	movs	r1, #1
 80035ee:	4620      	mov	r0, r4
 80035f0:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80035f2:	2308      	movs	r3, #8
 80035f4:	e74c      	b.n	8003490 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80035f6:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 fa8c 	bl	8003b18 <USBH_SetCfg>
 8003600:	2800      	cmp	r0, #0
 8003602:	f47f af3f 	bne.w	8003484 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8003606:	2309      	movs	r3, #9
 8003608:	e742      	b.n	8003490 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800360a:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800360e:	069b      	lsls	r3, r3, #26
 8003610:	d506      	bpl.n	8003620 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8003612:	2101      	movs	r1, #1
 8003614:	4620      	mov	r0, r4
 8003616:	f000 fa8d 	bl	8003b34 <USBH_SetFeature>
 800361a:	2800      	cmp	r0, #0
 800361c:	f47f af32 	bne.w	8003484 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8003620:	230a      	movs	r3, #10
 8003622:	e735      	b.n	8003490 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8003624:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003628:	2b00      	cmp	r3, #0
 800362a:	f43f af2b 	beq.w	8003484 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003634:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8003638:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 800363c:	7919      	ldrb	r1, [r3, #4]
 800363e:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8003640:	bf08      	it	eq
 8003642:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8003646:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800364a:	b1d3      	cbz	r3, 8003682 <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4620      	mov	r0, r4
 8003650:	4798      	blx	r3
 8003652:	b9b0      	cbnz	r0, 8003682 <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8003654:	2306      	movs	r3, #6
 8003656:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003658:	2103      	movs	r1, #3
 800365a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800365e:	4620      	mov	r0, r4
 8003660:	4798      	blx	r3
 8003662:	e70f      	b.n	8003484 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8003664:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003668:	b15b      	cbz	r3, 8003682 <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4620      	mov	r0, r4
 800366e:	4798      	blx	r3
 8003670:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003674:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f af03 	bne.w	8003484 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800367e:	230b      	movs	r3, #11
 8003680:	e706      	b.n	8003490 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8003682:	230d      	movs	r3, #13
 8003684:	e704      	b.n	8003490 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8003686:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800368a:	2b00      	cmp	r3, #0
 800368c:	f43f aefa 	beq.w	8003484 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4620      	mov	r0, r4
 8003694:	4798      	blx	r3
 8003696:	e6f5      	b.n	8003484 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff fe51 	bl	8003340 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800369e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f43f aeee 	beq.w	8003484 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4620      	mov	r0, r4
 80036ac:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80036b4:	e6e6      	b.n	8003484 <USBH_Process+0x58>

080036b6 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80036b6:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80036ba:	4770      	bx	lr

080036bc <USBH_LL_IncTimer>:
  phost->Timer ++;
 80036bc:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80036c0:	3201      	adds	r2, #1
 80036c2:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80036c6:	7802      	ldrb	r2, [r0, #0]
 80036c8:	2a0b      	cmp	r2, #11
 80036ca:	d104      	bne.n	80036d6 <USBH_LL_IncTimer+0x1a>
 80036cc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80036d0:	b10b      	cbz	r3, 80036d6 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4718      	bx	r3
 80036d6:	4770      	bx	lr

080036d8 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80036de:	4770      	bx	lr

080036e0 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80036e6:	4770      	bx	lr

080036e8 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80036e8:	7802      	ldrb	r2, [r0, #0]
{
 80036ea:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80036ec:	b94a      	cbnz	r2, 8003702 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80036ee:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80036f2:	2201      	movs	r2, #1
 80036f4:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80036f8:	b10b      	cbz	r3, 80036fe <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80036fa:	2104      	movs	r1, #4
 80036fc:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80036fe:	2000      	movs	r0, #0
 8003700:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8003702:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8003706:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8003708:	bf04      	itt	eq
 800370a:	2202      	moveq	r2, #2
 800370c:	7002      	strbeq	r2, [r0, #0]
 800370e:	e7f6      	b.n	80036fe <USBH_LL_Connect+0x16>

08003710 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8003714:	f000 fb8a 	bl	8003e2c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003718:	7921      	ldrb	r1, [r4, #4]
 800371a:	4620      	mov	r0, r4
 800371c:	f000 fab0 	bl	8003c80 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8003720:	7961      	ldrb	r1, [r4, #5]
 8003722:	4620      	mov	r0, r4
 8003724:	f000 faac 	bl	8003c80 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800372e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003732:	b113      	cbz	r3, 800373a <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003734:	2105      	movs	r1, #5
 8003736:	4620      	mov	r0, r4
 8003738:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800373a:	4620      	mov	r0, r4
 800373c:	f000 fb68 	bl	8003e10 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8003740:	2303      	movs	r3, #3
 8003742:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8003744:	2000      	movs	r0, #0
 8003746:	bd10      	pop	{r4, pc}

08003748 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003748:	b513      	push	{r0, r1, r4, lr}
 800374a:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800374c:	7880      	ldrb	r0, [r0, #2]
 800374e:	2801      	cmp	r0, #1
 8003750:	d003      	beq.n	800375a <USBH_CtlReq+0x12>
 8003752:	2802      	cmp	r0, #2
 8003754:	d008      	beq.n	8003768 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8003756:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003758:	e004      	b.n	8003764 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800375a:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800375c:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800375e:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8003760:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8003762:	70a3      	strb	r3, [r4, #2]
}
 8003764:	b002      	add	sp, #8
 8003766:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003768:	7e23      	ldrb	r3, [r4, #24]
 800376a:	3b01      	subs	r3, #1
 800376c:	2101      	movs	r1, #1
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d8f1      	bhi.n	8003756 <USBH_CtlReq+0xe>
 8003772:	e8df f003 	tbb	[pc, r3]
 8003776:	0f06      	.short	0x0f06
 8003778:	4c40362b 	.word	0x4c40362b
 800377c:	8c806f64 	.word	0x8c806f64
 8003780:	95          	.byte	0x95
 8003781:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8003782:	7962      	ldrb	r2, [r4, #5]
 8003784:	f104 0110 	add.w	r1, r4, #16
 8003788:	4620      	mov	r0, r4
 800378a:	f000 f9ef 	bl	8003b6c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800378e:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8003790:	7623      	strb	r3, [r4, #24]
 8003792:	e7e0      	b.n	8003756 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003794:	7961      	ldrb	r1, [r4, #5]
 8003796:	4620      	mov	r0, r4
 8003798:	f000 fbb6 	bl	8003f08 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800379c:	2801      	cmp	r0, #1
 800379e:	d10f      	bne.n	80037c0 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 80037a0:	8ae2      	ldrh	r2, [r4, #22]
 80037a2:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80037a6:	b12a      	cbz	r2, 80037b4 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da01      	bge.n	80037b0 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e7ef      	b.n	8003790 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80037b0:	2305      	movs	r3, #5
 80037b2:	e7ed      	b.n	8003790 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da01      	bge.n	80037bc <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80037b8:	2309      	movs	r3, #9
 80037ba:	e7e9      	b.n	8003790 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80037bc:	2307      	movs	r3, #7
 80037be:	e7e7      	b.n	8003790 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80037c0:	2804      	cmp	r0, #4
 80037c2:	d001      	beq.n	80037c8 <USBH_CtlReq+0x80>
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d1c6      	bne.n	8003756 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80037c8:	230b      	movs	r3, #11
 80037ca:	e7e1      	b.n	8003790 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80037cc:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80037d0:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80037d2:	89a2      	ldrh	r2, [r4, #12]
 80037d4:	7923      	ldrb	r3, [r4, #4]
 80037d6:	68a1      	ldr	r1, [r4, #8]
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f9ef 	bl	8003bbc <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80037de:	2304      	movs	r3, #4
 80037e0:	e7d6      	b.n	8003790 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80037e2:	7921      	ldrb	r1, [r4, #4]
 80037e4:	4620      	mov	r0, r4
 80037e6:	f000 fb8f 	bl	8003f08 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80037ea:	2801      	cmp	r0, #1
 80037ec:	d0e4      	beq.n	80037b8 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80037ee:	2805      	cmp	r0, #5
 80037f0:	d015      	beq.n	800381e <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80037f2:	2804      	cmp	r0, #4
 80037f4:	e7e7      	b.n	80037c6 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80037f6:	7963      	ldrb	r3, [r4, #5]
 80037f8:	9100      	str	r1, [sp, #0]
 80037fa:	89a2      	ldrh	r2, [r4, #12]
 80037fc:	68a1      	ldr	r1, [r4, #8]
 80037fe:	4620      	mov	r0, r4
 8003800:	f000 f9c5 	bl	8003b8e <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003804:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003808:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800380a:	2306      	movs	r3, #6
 800380c:	e7c0      	b.n	8003790 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800380e:	7961      	ldrb	r1, [r4, #5]
 8003810:	4620      	mov	r0, r4
 8003812:	f000 fb79 	bl	8003f08 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003816:	2801      	cmp	r0, #1
 8003818:	d0d0      	beq.n	80037bc <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 800381a:	2805      	cmp	r0, #5
 800381c:	d105      	bne.n	800382a <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800381e:	2301      	movs	r3, #1
 8003820:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8003822:	2300      	movs	r3, #0
 8003824:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003826:	2003      	movs	r0, #3
 8003828:	e79c      	b.n	8003764 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800382a:	2802      	cmp	r0, #2
 800382c:	d0c0      	beq.n	80037b0 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800382e:	2804      	cmp	r0, #4
 8003830:	d191      	bne.n	8003756 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003832:	230b      	movs	r3, #11
 8003834:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003836:	2301      	movs	r3, #1
 8003838:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 800383a:	2002      	movs	r0, #2
 800383c:	e792      	b.n	8003764 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800383e:	2200      	movs	r2, #0
 8003840:	7923      	ldrb	r3, [r4, #4]
 8003842:	4611      	mov	r1, r2
 8003844:	4620      	mov	r0, r4
 8003846:	f000 f9b9 	bl	8003bbc <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800384a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800384e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003850:	2308      	movs	r3, #8
 8003852:	e79d      	b.n	8003790 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003854:	7921      	ldrb	r1, [r4, #4]
 8003856:	4620      	mov	r0, r4
 8003858:	f000 fb56 	bl	8003f08 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800385c:	2801      	cmp	r0, #1
 800385e:	d104      	bne.n	800386a <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8003860:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8003862:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003864:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003866:	7620      	strb	r0, [r4, #24]
 8003868:	e77c      	b.n	8003764 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800386a:	2804      	cmp	r0, #4
 800386c:	d0ac      	beq.n	80037c8 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800386e:	2805      	cmp	r0, #5
 8003870:	f47f af71 	bne.w	8003756 <USBH_CtlReq+0xe>
 8003874:	e7d3      	b.n	800381e <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003876:	2200      	movs	r2, #0
 8003878:	7963      	ldrb	r3, [r4, #5]
 800387a:	9100      	str	r1, [sp, #0]
 800387c:	4620      	mov	r0, r4
 800387e:	4611      	mov	r1, r2
 8003880:	f000 f985 	bl	8003b8e <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003884:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003888:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800388a:	230a      	movs	r3, #10
 800388c:	e780      	b.n	8003790 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800388e:	7961      	ldrb	r1, [r4, #5]
 8003890:	4620      	mov	r0, r4
 8003892:	f000 fb39 	bl	8003f08 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003896:	2801      	cmp	r0, #1
 8003898:	d0e2      	beq.n	8003860 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800389a:	2802      	cmp	r0, #2
 800389c:	d1a9      	bne.n	80037f2 <USBH_CtlReq+0xaa>
 800389e:	e78b      	b.n	80037b8 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80038a0:	7e63      	ldrb	r3, [r4, #25]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	7663      	strb	r3, [r4, #25]
 80038aa:	d806      	bhi.n	80038ba <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 fabd 	bl	8003e2c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80038b2:	2301      	movs	r3, #1
 80038b4:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80038b6:	70a3      	strb	r3, [r4, #2]
 80038b8:	e74d      	b.n	8003756 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80038ba:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80038be:	2106      	movs	r1, #6
 80038c0:	4620      	mov	r0, r4
 80038c2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	7663      	strb	r3, [r4, #25]
 80038c8:	e7b5      	b.n	8003836 <USBH_CtlReq+0xee>

080038ca <USBH_GetDescriptor>:
{
 80038ca:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80038cc:	7884      	ldrb	r4, [r0, #2]
{
 80038ce:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80038d2:	2c01      	cmp	r4, #1
 80038d4:	d110      	bne.n	80038f8 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80038d6:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80038da:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80038dc:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80038e0:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80038e4:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80038e6:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80038ea:	bf0c      	ite	eq
 80038ec:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80038f0:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80038f2:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80038f4:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80038f6:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80038f8:	462a      	mov	r2, r5
 80038fa:	4619      	mov	r1, r3
}
 80038fc:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80038fe:	f7ff bf23 	b.w	8003748 <USBH_CtlReq>

08003902 <USBH_Get_DevDesc>:
{
 8003902:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003904:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003908:	460d      	mov	r5, r1
 800390a:	9100      	str	r1, [sp, #0]
 800390c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003910:	2100      	movs	r1, #0
{
 8003912:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003914:	f7ff ffd9 	bl	80038ca <USBH_GetDescriptor>
 8003918:	bbc8      	cbnz	r0, 800398e <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800391a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800391e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003922:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003926:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800392a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800392e:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003932:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003936:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800393a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800393e:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003942:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003946:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 800394a:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800394c:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003950:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8003954:	d91b      	bls.n	800398e <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003956:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800395a:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800395e:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8003962:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003966:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800396a:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800396e:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003972:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003976:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800397a:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800397e:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003982:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003986:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800398a:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800398e:	b003      	add	sp, #12
 8003990:	bd30      	pop	{r4, r5, pc}

08003992 <USBH_Get_CfgDesc>:
{
 8003992:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003996:	f100 051c 	add.w	r5, r0, #28
{
 800399a:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 800399c:	9100      	str	r1, [sp, #0]
 800399e:	462b      	mov	r3, r5
 80039a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a4:	2100      	movs	r1, #0
{
 80039a6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80039a8:	f7ff ff8f 	bl	80038ca <USBH_GetDescriptor>
 80039ac:	bb48      	cbnz	r0, 8003a02 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80039ae:	7f23      	ldrb	r3, [r4, #28]
 80039b0:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80039b4:	7f63      	ldrb	r3, [r4, #29]
 80039b6:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80039ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80039be:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80039c2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80039c6:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80039ca:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80039ce:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80039d2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80039d6:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80039da:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80039de:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80039e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80039e4:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80039e8:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80039ec:	d909      	bls.n	8003a02 <USBH_Get_CfgDesc+0x70>
 80039ee:	4627      	mov	r7, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	4606      	mov	r6, r0
 80039f4:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80039f6:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80039fa:	2e02      	cmp	r6, #2
 80039fc:	d001      	beq.n	8003a02 <USBH_Get_CfgDesc+0x70>
 80039fe:	4596      	cmp	lr, r2
 8003a00:	d802      	bhi.n	8003a08 <USBH_Get_CfgDesc+0x76>
}
 8003a02:	b003      	add	sp, #12
 8003a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a08:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003a0a:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a0c:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003a0e:	7859      	ldrb	r1, [r3, #1]
 8003a10:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a12:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003a14:	d1f1      	bne.n	80039fa <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003a16:	7819      	ldrb	r1, [r3, #0]
 8003a18:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003a1c:	7859      	ldrb	r1, [r3, #1]
 8003a1e:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8003a22:	7899      	ldrb	r1, [r3, #2]
 8003a24:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003a28:	78d9      	ldrb	r1, [r3, #3]
 8003a2a:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003a2e:	7919      	ldrb	r1, [r3, #4]
 8003a30:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003a34:	7959      	ldrb	r1, [r3, #5]
 8003a36:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003a3a:	7999      	ldrb	r1, [r3, #6]
 8003a3c:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8003a40:	79d9      	ldrb	r1, [r3, #7]
 8003a42:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003a46:	7a19      	ldrb	r1, [r3, #8]
 8003a48:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003a4c:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8003a50:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8003a52:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8003a56:	428d      	cmp	r5, r1
 8003a58:	d802      	bhi.n	8003a60 <USBH_Get_CfgDesc+0xce>
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	371a      	adds	r7, #26
 8003a5e:	e7cc      	b.n	80039fa <USBH_Get_CfgDesc+0x68>
 8003a60:	4596      	cmp	lr, r2
 8003a62:	d9fa      	bls.n	8003a5a <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a64:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003a66:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a68:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003a6a:	785d      	ldrb	r5, [r3, #1]
 8003a6c:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003a6e:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003a70:	d1ef      	bne.n	8003a52 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003a72:	1c4d      	adds	r5, r1, #1
 8003a74:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003a78:	4421      	add	r1, r4
 8003a7a:	f893 9000 	ldrb.w	r9, [r3]
 8003a7e:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8003a82:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003a86:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003a8a:	f893 9002 	ldrb.w	r9, [r3, #2]
 8003a8e:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8003a92:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003a96:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003a9a:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003a9e:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003aa2:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003aa6:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003aaa:	b2e9      	uxtb	r1, r5
 8003aac:	e7d1      	b.n	8003a52 <USBH_Get_CfgDesc+0xc0>

08003aae <USBH_Get_StringDesc>:
{
 8003aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003ab0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8003abe:	462b      	mov	r3, r5
 8003ac0:	2100      	movs	r1, #0
{
 8003ac2:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003ac4:	f7ff ff01 	bl	80038ca <USBH_GetDescriptor>
 8003ac8:	b978      	cbnz	r0, 8003aea <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003aca:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d10b      	bne.n	8003aea <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8003ad2:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003ad6:	3b02      	subs	r3, #2
 8003ad8:	42bb      	cmp	r3, r7
 8003ada:	bf28      	it	cs
 8003adc:	463b      	movcs	r3, r7
 8003ade:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d803      	bhi.n	8003aee <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	7023      	strb	r3, [r4, #0]
}
 8003aea:	b003      	add	sp, #12
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8003aee:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8003af0:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8003af2:	7889      	ldrb	r1, [r1, #2]
 8003af4:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003af8:	b292      	uxth	r2, r2
 8003afa:	e7f2      	b.n	8003ae2 <USBH_Get_StringDesc+0x34>

08003afc <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8003afc:	7883      	ldrb	r3, [r0, #2]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d106      	bne.n	8003b10 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003b02:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003b04:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003b06:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003b08:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003b0a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003b0c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003b0e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003b10:	2200      	movs	r2, #0
 8003b12:	4611      	mov	r1, r2
 8003b14:	f7ff be18 	b.w	8003748 <USBH_CtlReq>

08003b18 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003b18:	7883      	ldrb	r3, [r0, #2]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d106      	bne.n	8003b2c <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003b1e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003b20:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003b22:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003b24:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003b26:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003b28:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003b2a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4611      	mov	r1, r2
 8003b30:	f7ff be0a 	b.w	8003748 <USBH_CtlReq>

08003b34 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003b34:	7883      	ldrb	r3, [r0, #2]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d106      	bne.n	8003b48 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003b3a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003b3c:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003b3e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003b40:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8003b42:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003b44:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003b46:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	f7ff bdfc 	b.w	8003748 <USBH_CtlReq>

08003b50 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003b50:	7883      	ldrb	r3, [r0, #2]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003b56:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003b58:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003b5a:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003b5c:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003b5e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003b60:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003b62:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003b64:	2200      	movs	r2, #0
 8003b66:	4611      	mov	r1, r2
 8003b68:	f7ff bdee 	b.w	8003748 <USBH_CtlReq>

08003b6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003b6c:	b530      	push	{r4, r5, lr}
 8003b6e:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003b70:	2400      	movs	r4, #0
{
 8003b72:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003b74:	2308      	movs	r3, #8
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	9101      	str	r1, [sp, #4]
 8003b7a:	9403      	str	r4, [sp, #12]
 8003b7c:	9400      	str	r4, [sp, #0]
 8003b7e:	4623      	mov	r3, r4
 8003b80:	4622      	mov	r2, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f000 f9a6 	bl	8003ed4 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003b88:	4620      	mov	r0, r4
 8003b8a:	b005      	add	sp, #20
 8003b8c:	bd30      	pop	{r4, r5, pc}

08003b8e <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003b8e:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003b90:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003b94:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003b96:	2d00      	cmp	r5, #0
{
 8003b98:	461c      	mov	r4, r3
 8003b9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003b9e:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003ba0:	bf18      	it	ne
 8003ba2:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9101      	str	r1, [sp, #4]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	f000 f98f 	bl	8003ed4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	b005      	add	sp, #20
 8003bba:	bd30      	pop	{r4, r5, pc}

08003bbc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003bbc:	b530      	push	{r4, r5, lr}
 8003bbe:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003bc0:	2400      	movs	r4, #0
{
 8003bc2:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003bc4:	9202      	str	r2, [sp, #8]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	9101      	str	r1, [sp, #4]
 8003bca:	9403      	str	r4, [sp, #12]
 8003bcc:	9200      	str	r2, [sp, #0]
 8003bce:	4623      	mov	r3, r4
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	f000 f97f 	bl	8003ed4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	b005      	add	sp, #20
 8003bda:	bd30      	pop	{r4, r5, pc}

08003bdc <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003bdc:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003bde:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003be2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003be4:	2d00      	cmp	r5, #0
{
 8003be6:	461c      	mov	r4, r3
 8003be8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003bec:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003bee:	bf18      	it	ne
 8003bf0:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9101      	str	r1, [sp, #4]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	4621      	mov	r1, r4
 8003c00:	f000 f968 	bl	8003ed4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003c04:	2000      	movs	r0, #0
 8003c06:	b005      	add	sp, #20
 8003c08:	bd30      	pop	{r4, r5, pc}

08003c0a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003c0a:	b530      	push	{r4, r5, lr}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003c10:	2400      	movs	r4, #0
 8003c12:	9202      	str	r2, [sp, #8]
 8003c14:	2201      	movs	r2, #1
 8003c16:	9101      	str	r1, [sp, #4]
 8003c18:	9403      	str	r4, [sp, #12]
 8003c1a:	9200      	str	r2, [sp, #0]
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f000 f958 	bl	8003ed4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003c24:	4620      	mov	r0, r4
 8003c26:	b005      	add	sp, #20
 8003c28:	bd30      	pop	{r4, r5, pc}

08003c2a <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003c2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003c2c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003c30:	9402      	str	r4, [sp, #8]
 8003c32:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003c36:	9401      	str	r4, [sp, #4]
 8003c38:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003c3c:	9400      	str	r4, [sp, #0]
 8003c3e:	f000 f923 	bl	8003e88 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8003c42:	2000      	movs	r0, #0
 8003c44:	b004      	add	sp, #16
 8003c46:	bd10      	pop	{r4, pc}

08003c48 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003c48:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003c4a:	f000 f935 	bl	8003eb8 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8003c4e:	2000      	movs	r0, #0
 8003c50:	bd08      	pop	{r3, pc}

08003c52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003c52:	b530      	push	{r4, r5, lr}
 8003c54:	2300      	movs	r3, #0
 8003c56:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8003c5a:	f854 5b04 	ldr.w	r5, [r4], #4
 8003c5e:	042d      	lsls	r5, r5, #16
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	d407      	bmi.n	8003c74 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8003c64:	33e0      	adds	r3, #224	; 0xe0
 8003c66:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003c6a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8003c6e:	b292      	uxth	r2, r2
}
 8003c70:	b2d0      	uxtb	r0, r2
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8003c76:	2b0b      	cmp	r3, #11
 8003c78:	d1ef      	bne.n	8003c5a <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8003c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7e:	e7f7      	b.n	8003c70 <USBH_AllocPipe+0x1e>

08003c80 <USBH_FreePipe>:
   if(idx < 11U)
 8003c80:	290a      	cmp	r1, #10
 8003c82:	bf9f      	itttt	ls
 8003c84:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8003c88:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8003c8c:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003c90:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003c94:	2000      	movs	r0, #0
 8003c96:	4770      	bx	lr

08003c98 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8003c98:	2904      	cmp	r1, #4
 8003c9a:	d00a      	beq.n	8003cb2 <USBH_UserProcess+0x1a>
 8003c9c:	2905      	cmp	r1, #5
 8003c9e:	d004      	beq.n	8003caa <USBH_UserProcess+0x12>
 8003ca0:	2902      	cmp	r1, #2
 8003ca2:	d105      	bne.n	8003cb0 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <USBH_UserProcess+0x20>)
 8003ca6:	7019      	strb	r1, [r3, #0]
  break;
 8003ca8:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8003caa:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8003cac:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <USBH_UserProcess+0x20>)
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	4770      	bx	lr
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	e7fa      	b.n	8003cac <USBH_UserProcess+0x14>
 8003cb6:	bf00      	nop
 8003cb8:	20000550 	.word	0x20000550

08003cbc <MX_USB_HOST_Init>:
{
 8003cbc:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	490b      	ldr	r1, [pc, #44]	; (8003cf0 <MX_USB_HOST_Init+0x34>)
 8003cc2:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <MX_USB_HOST_Init+0x38>)
 8003cc4:	f7ff fb5e 	bl	8003384 <USBH_Init>
 8003cc8:	b108      	cbz	r0, 8003cce <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8003cca:	f7fc fda3 	bl	8000814 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8003cce:	490a      	ldr	r1, [pc, #40]	; (8003cf8 <MX_USB_HOST_Init+0x3c>)
 8003cd0:	4808      	ldr	r0, [pc, #32]	; (8003cf4 <MX_USB_HOST_Init+0x38>)
 8003cd2:	f7ff fb6e 	bl	80033b2 <USBH_RegisterClass>
 8003cd6:	b108      	cbz	r0, 8003cdc <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8003cd8:	f7fc fd9c 	bl	8000814 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003cdc:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_USB_HOST_Init+0x38>)
 8003cde:	f7ff fb9b 	bl	8003418 <USBH_Start>
 8003ce2:	b118      	cbz	r0, 8003cec <MX_USB_HOST_Init+0x30>
}
 8003ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ce8:	f7fc bd94 	b.w	8000814 <Error_Handler>
 8003cec:	bd08      	pop	{r3, pc}
 8003cee:	bf00      	nop
 8003cf0:	08003c99 	.word	0x08003c99
 8003cf4:	20000740 	.word	0x20000740
 8003cf8:	20000008 	.word	0x20000008

08003cfc <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <MX_USB_HOST_Process+0x8>)
 8003cfe:	f7ff bb95 	b.w	800342c <USBH_Process>
 8003d02:	bf00      	nop
 8003d04:	20000740 	.word	0x20000740

08003d08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003d08:	b530      	push	{r4, r5, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0e:	2214      	movs	r2, #20
 8003d10:	2100      	movs	r1, #0
 8003d12:	a803      	add	r0, sp, #12
 8003d14:	f000 fb96 	bl	8004444 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1e:	d135      	bne.n	8003d8c <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	4c1b      	ldr	r4, [pc, #108]	; (8003d90 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d22:	481c      	ldr	r0, [pc, #112]	; (8003d94 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d24:	2500      	movs	r5, #0
 8003d26:	9501      	str	r5, [sp, #4]
 8003d28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d40:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d42:	f7fc ffcb 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003d46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003d4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d52:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d54:	480f      	ldr	r0, [pc, #60]	; (8003d94 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d56:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5c:	f7fc ffbe 	bl	8000cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d66:	6363      	str	r3, [r4, #52]	; 0x34
 8003d68:	9502      	str	r5, [sp, #8]
 8003d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6463      	str	r3, [r4, #68]	; 0x44
 8003d72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d78:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003d7a:	2043      	movs	r0, #67	; 0x43
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d80:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003d82:	f7fc ff69 	bl	8000c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003d86:	2043      	movs	r0, #67	; 0x43
 8003d88:	f7fc ff9a 	bl	8000cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003d8c:	b009      	add	sp, #36	; 0x24
 8003d8e:	bd30      	pop	{r4, r5, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020000 	.word	0x40020000

08003d98 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8003d98:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003d9c:	f7ff bc8e 	b.w	80036bc <USBH_LL_IncTimer>

08003da0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8003da0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003da4:	f7ff bca0 	b.w	80036e8 <USBH_LL_Connect>

08003da8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8003da8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003dac:	f7ff bcb0 	b.w	8003710 <USBH_LL_Disconnect>

08003db0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003db0:	4770      	bx	lr

08003db2 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8003db2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003db6:	f7ff bc8f 	b.w	80036d8 <USBH_LL_PortEnabled>

08003dba <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8003dba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003dbe:	f7ff bc8f 	b.w	80036e0 <USBH_LL_PortDisabled>
	...

08003dc4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8003dc4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8003dc6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8003dca:	2b01      	cmp	r3, #1
{
 8003dcc:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8003dce:	d11b      	bne.n	8003e08 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8003dd0:	480e      	ldr	r0, [pc, #56]	; (8003e0c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8003dd2:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003dda:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8003ddc:	2208      	movs	r2, #8
 8003dde:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8003de0:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003de2:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003de4:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8003de6:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003dea:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003dec:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003dee:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003df0:	f7fd f8a3 	bl	8000f3a <HAL_HCD_Init>
 8003df4:	b108      	cbz	r0, 8003dfa <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8003df6:	f7fc fd0d 	bl	8000814 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8003dfa:	4804      	ldr	r0, [pc, #16]	; (8003e0c <USBH_LL_Init+0x48>)
 8003dfc:	f7fd fc9c 	bl	8001738 <HAL_HCD_GetCurrentFrame>
 8003e00:	4601      	mov	r1, r0
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7ff fc57 	bl	80036b6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8003e08:	2000      	movs	r0, #0
 8003e0a:	bd10      	pop	{r4, pc}
 8003e0c:	20000b0c 	.word	0x20000b0c

08003e10 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8003e10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8003e12:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003e16:	f7fd fc59 	bl	80016cc <HAL_HCD_Start>
 8003e1a:	2803      	cmp	r0, #3
 8003e1c:	bf9a      	itte	ls
 8003e1e:	4b02      	ldrls	r3, [pc, #8]	; (8003e28 <USBH_LL_Start+0x18>)
 8003e20:	5c18      	ldrbls	r0, [r3, r0]
 8003e22:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003e24:	bd08      	pop	{r3, pc}
 8003e26:	bf00      	nop
 8003e28:	080046eb 	.word	0x080046eb

08003e2c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003e2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8003e2e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003e32:	f7fd fc61 	bl	80016f8 <HAL_HCD_Stop>
 8003e36:	2803      	cmp	r0, #3
 8003e38:	bf9a      	itte	ls
 8003e3a:	4b02      	ldrls	r3, [pc, #8]	; (8003e44 <USBH_LL_Stop+0x18>)
 8003e3c:	5c18      	ldrbls	r0, [r3, r0]
 8003e3e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003e40:	bd08      	pop	{r3, pc}
 8003e42:	bf00      	nop
 8003e44:	080046eb 	.word	0x080046eb

08003e48 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8003e48:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8003e4a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003e4e:	f7fd fc76 	bl	800173e <HAL_HCD_GetCurrentSpeed>
 8003e52:	2802      	cmp	r0, #2
 8003e54:	bf9a      	itte	ls
 8003e56:	4b02      	ldrls	r3, [pc, #8]	; (8003e60 <USBH_LL_GetSpeed+0x18>)
 8003e58:	5c18      	ldrbls	r0, [r3, r0]
 8003e5a:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8003e5c:	bd08      	pop	{r3, pc}
 8003e5e:	bf00      	nop
 8003e60:	080046e8 	.word	0x080046e8

08003e64 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8003e64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8003e66:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003e6a:	f7fd fc57 	bl	800171c <HAL_HCD_ResetPort>
 8003e6e:	2803      	cmp	r0, #3
 8003e70:	bf9a      	itte	ls
 8003e72:	4b02      	ldrls	r3, [pc, #8]	; (8003e7c <USBH_LL_ResetPort+0x18>)
 8003e74:	5c18      	ldrbls	r0, [r3, r0]
 8003e76:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003e78:	bd08      	pop	{r3, pc}
 8003e7a:	bf00      	nop
 8003e7c:	080046eb 	.word	0x080046eb

08003e80 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8003e80:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003e84:	f7fd bc53 	b.w	800172e <HAL_HCD_HC_GetXferCount>

08003e88 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8003e8a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003e8e:	9402      	str	r4, [sp, #8]
 8003e90:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003e94:	9401      	str	r4, [sp, #4]
 8003e96:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003e9a:	9400      	str	r4, [sp, #0]
 8003e9c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003ea0:	f7fd f801 	bl	8000ea6 <HAL_HCD_HC_Init>
 8003ea4:	2803      	cmp	r0, #3
 8003ea6:	bf9a      	itte	ls
 8003ea8:	4b02      	ldrls	r3, [pc, #8]	; (8003eb4 <USBH_LL_OpenPipe+0x2c>)
 8003eaa:	5c18      	ldrbls	r0, [r3, r0]
 8003eac:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	bf00      	nop
 8003eb4:	080046eb 	.word	0x080046eb

08003eb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003eb8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8003eba:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003ebe:	f7fd f82a 	bl	8000f16 <HAL_HCD_HC_Halt>
 8003ec2:	2803      	cmp	r0, #3
 8003ec4:	bf9a      	itte	ls
 8003ec6:	4b02      	ldrls	r3, [pc, #8]	; (8003ed0 <USBH_LL_ClosePipe+0x18>)
 8003ec8:	5c18      	ldrbls	r0, [r3, r0]
 8003eca:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003ecc:	bd08      	pop	{r3, pc}
 8003ece:	bf00      	nop
 8003ed0:	080046eb 	.word	0x080046eb

08003ed4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8003ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8003ed6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003eda:	9403      	str	r4, [sp, #12]
 8003edc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003ee0:	9402      	str	r4, [sp, #8]
 8003ee2:	9c07      	ldr	r4, [sp, #28]
 8003ee4:	9401      	str	r4, [sp, #4]
 8003ee6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003eea:	9400      	str	r4, [sp, #0]
 8003eec:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003ef0:	f7fd f86e 	bl	8000fd0 <HAL_HCD_HC_SubmitRequest>
 8003ef4:	2803      	cmp	r0, #3
 8003ef6:	bf9a      	itte	ls
 8003ef8:	4b02      	ldrls	r3, [pc, #8]	; (8003f04 <USBH_LL_SubmitURB+0x30>)
 8003efa:	5c18      	ldrbls	r0, [r3, r0]
 8003efc:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003efe:	b004      	add	sp, #16
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	bf00      	nop
 8003f04:	080046eb 	.word	0x080046eb

08003f08 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003f08:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003f0c:	f7fd bc09 	b.w	8001722 <HAL_HCD_HC_GetURBState>

08003f10 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8003f10:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8003f12:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	f000 f816 	bl	8003f4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8003f20:	20c8      	movs	r0, #200	; 0xc8
 8003f22:	f7fc fe73 	bl	8000c0c <HAL_Delay>
  return USBH_OK;
}
 8003f26:	2000      	movs	r0, #0
 8003f28:	bd08      	pop	{r3, pc}

08003f2a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8003f2a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8003f2e:	2328      	movs	r3, #40	; 0x28
 8003f30:	fb03 0101 	mla	r1, r3, r1, r0
 8003f34:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8003f38:	b11b      	cbz	r3, 8003f42 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8003f3a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8003f3e:	2000      	movs	r0, #0
 8003f40:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8003f42:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8003f46:	e7fa      	b.n	8003f3e <USBH_LL_SetToggle+0x14>

08003f48 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003f48:	f7fc be60 	b.w	8000c0c <HAL_Delay>

08003f4c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8003f4c:	fab0 f280 	clz	r2, r0
 8003f50:	0952      	lsrs	r2, r2, #5
 8003f52:	2101      	movs	r1, #1
 8003f54:	4801      	ldr	r0, [pc, #4]	; (8003f5c <MX_DriverVbusFS+0x10>)
 8003f56:	f7fc bfa1 	b.w	8000e9c <HAL_GPIO_WritePin>
 8003f5a:	bf00      	nop
 8003f5c:	40020800 	.word	0x40020800

08003f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f66:	e003      	b.n	8003f70 <LoopCopyDataInit>

08003f68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f6e:	3104      	adds	r1, #4

08003f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f70:	480b      	ldr	r0, [pc, #44]	; (8003fa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f78:	d3f6      	bcc.n	8003f68 <CopyDataInit>
  ldr  r2, =_sbss
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f7c:	e002      	b.n	8003f84 <LoopFillZerobss>

08003f7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f80:	f842 3b04 	str.w	r3, [r2], #4

08003f84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f88:	d3f9      	bcc.n	8003f7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f8a:	f7fc fded 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8e:	f000 f817 	bl	8003fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f92:	f7fc fafb 	bl	800058c <main>
  bx  lr    
 8003f96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f9c:	08004700 	.word	0x08004700
  ldr  r0, =_sdata
 8003fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fa4:	2000052c 	.word	0x2000052c
  ldr  r2, =_sbss
 8003fa8:	2000052c 	.word	0x2000052c
  ldr  r3, = _ebss
 8003fac:	20000de0 	.word	0x20000de0

08003fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb0:	e7fe      	b.n	8003fb0 <ADC_IRQHandler>
	...

08003fb4 <__errno>:
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <__errno+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000028 	.word	0x20000028

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e0d      	ldr	r6, [pc, #52]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc4:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc6:	1ba4      	subs	r4, r4, r6
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	2500      	movs	r5, #0
 8003fcc:	42a5      	cmp	r5, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	4e0b      	ldr	r6, [pc, #44]	; (8004000 <__libc_init_array+0x40>)
 8003fd2:	4c0c      	ldr	r4, [pc, #48]	; (8004004 <__libc_init_array+0x44>)
 8003fd4:	f000 fb6e 	bl	80046b4 <_init>
 8003fd8:	1ba4      	subs	r4, r4, r6
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	2500      	movs	r5, #0
 8003fde:	42a5      	cmp	r5, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe8:	4798      	blx	r3
 8003fea:	3501      	adds	r5, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff2:	4798      	blx	r3
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	080046f8 	.word	0x080046f8
 8003ffc:	080046f8 	.word	0x080046f8
 8004000:	080046f8 	.word	0x080046f8
 8004004:	080046fc 	.word	0x080046fc

08004008 <malloc>:
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <malloc+0xc>)
 800400a:	4601      	mov	r1, r0
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f000 b80b 	b.w	8004028 <_malloc_r>
 8004012:	bf00      	nop
 8004014:	20000028 	.word	0x20000028

08004018 <free>:
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <free+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f000 ba8b 	b.w	8004538 <_free_r>
 8004022:	bf00      	nop
 8004024:	20000028 	.word	0x20000028

08004028 <_malloc_r>:
 8004028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	f101 040b 	add.w	r4, r1, #11
 8004030:	2c16      	cmp	r4, #22
 8004032:	4681      	mov	r9, r0
 8004034:	d907      	bls.n	8004046 <_malloc_r+0x1e>
 8004036:	f034 0407 	bics.w	r4, r4, #7
 800403a:	d505      	bpl.n	8004048 <_malloc_r+0x20>
 800403c:	230c      	movs	r3, #12
 800403e:	f8c9 3000 	str.w	r3, [r9]
 8004042:	2600      	movs	r6, #0
 8004044:	e131      	b.n	80042aa <_malloc_r+0x282>
 8004046:	2410      	movs	r4, #16
 8004048:	428c      	cmp	r4, r1
 800404a:	d3f7      	bcc.n	800403c <_malloc_r+0x14>
 800404c:	4648      	mov	r0, r9
 800404e:	f000 fa01 	bl	8004454 <__malloc_lock>
 8004052:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004056:	4d9c      	ldr	r5, [pc, #624]	; (80042c8 <_malloc_r+0x2a0>)
 8004058:	d236      	bcs.n	80040c8 <_malloc_r+0xa0>
 800405a:	f104 0208 	add.w	r2, r4, #8
 800405e:	442a      	add	r2, r5
 8004060:	f1a2 0108 	sub.w	r1, r2, #8
 8004064:	6856      	ldr	r6, [r2, #4]
 8004066:	428e      	cmp	r6, r1
 8004068:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800406c:	d102      	bne.n	8004074 <_malloc_r+0x4c>
 800406e:	68d6      	ldr	r6, [r2, #12]
 8004070:	42b2      	cmp	r2, r6
 8004072:	d010      	beq.n	8004096 <_malloc_r+0x6e>
 8004074:	6873      	ldr	r3, [r6, #4]
 8004076:	68f2      	ldr	r2, [r6, #12]
 8004078:	68b1      	ldr	r1, [r6, #8]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	60ca      	str	r2, [r1, #12]
 8004080:	4433      	add	r3, r6
 8004082:	6091      	str	r1, [r2, #8]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	4648      	mov	r0, r9
 800408e:	f000 f9e7 	bl	8004460 <__malloc_unlock>
 8004092:	3608      	adds	r6, #8
 8004094:	e109      	b.n	80042aa <_malloc_r+0x282>
 8004096:	3302      	adds	r3, #2
 8004098:	4a8c      	ldr	r2, [pc, #560]	; (80042cc <_malloc_r+0x2a4>)
 800409a:	692e      	ldr	r6, [r5, #16]
 800409c:	4296      	cmp	r6, r2
 800409e:	4611      	mov	r1, r2
 80040a0:	d06d      	beq.n	800417e <_malloc_r+0x156>
 80040a2:	6870      	ldr	r0, [r6, #4]
 80040a4:	f020 0003 	bic.w	r0, r0, #3
 80040a8:	1b07      	subs	r7, r0, r4
 80040aa:	2f0f      	cmp	r7, #15
 80040ac:	dd47      	ble.n	800413e <_malloc_r+0x116>
 80040ae:	1933      	adds	r3, r6, r4
 80040b0:	f044 0401 	orr.w	r4, r4, #1
 80040b4:	6074      	str	r4, [r6, #4]
 80040b6:	616b      	str	r3, [r5, #20]
 80040b8:	612b      	str	r3, [r5, #16]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	f047 0201 	orr.w	r2, r7, #1
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	5037      	str	r7, [r6, r0]
 80040c6:	e7e1      	b.n	800408c <_malloc_r+0x64>
 80040c8:	0a63      	lsrs	r3, r4, #9
 80040ca:	d02a      	beq.n	8004122 <_malloc_r+0xfa>
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d812      	bhi.n	80040f6 <_malloc_r+0xce>
 80040d0:	09a3      	lsrs	r3, r4, #6
 80040d2:	3338      	adds	r3, #56	; 0x38
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80040da:	f1a2 0008 	sub.w	r0, r2, #8
 80040de:	6856      	ldr	r6, [r2, #4]
 80040e0:	4286      	cmp	r6, r0
 80040e2:	d006      	beq.n	80040f2 <_malloc_r+0xca>
 80040e4:	6872      	ldr	r2, [r6, #4]
 80040e6:	f022 0203 	bic.w	r2, r2, #3
 80040ea:	1b11      	subs	r1, r2, r4
 80040ec:	290f      	cmp	r1, #15
 80040ee:	dd1c      	ble.n	800412a <_malloc_r+0x102>
 80040f0:	3b01      	subs	r3, #1
 80040f2:	3301      	adds	r3, #1
 80040f4:	e7d0      	b.n	8004098 <_malloc_r+0x70>
 80040f6:	2b14      	cmp	r3, #20
 80040f8:	d801      	bhi.n	80040fe <_malloc_r+0xd6>
 80040fa:	335b      	adds	r3, #91	; 0x5b
 80040fc:	e7ea      	b.n	80040d4 <_malloc_r+0xac>
 80040fe:	2b54      	cmp	r3, #84	; 0x54
 8004100:	d802      	bhi.n	8004108 <_malloc_r+0xe0>
 8004102:	0b23      	lsrs	r3, r4, #12
 8004104:	336e      	adds	r3, #110	; 0x6e
 8004106:	e7e5      	b.n	80040d4 <_malloc_r+0xac>
 8004108:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800410c:	d802      	bhi.n	8004114 <_malloc_r+0xec>
 800410e:	0be3      	lsrs	r3, r4, #15
 8004110:	3377      	adds	r3, #119	; 0x77
 8004112:	e7df      	b.n	80040d4 <_malloc_r+0xac>
 8004114:	f240 5254 	movw	r2, #1364	; 0x554
 8004118:	4293      	cmp	r3, r2
 800411a:	d804      	bhi.n	8004126 <_malloc_r+0xfe>
 800411c:	0ca3      	lsrs	r3, r4, #18
 800411e:	337c      	adds	r3, #124	; 0x7c
 8004120:	e7d8      	b.n	80040d4 <_malloc_r+0xac>
 8004122:	233f      	movs	r3, #63	; 0x3f
 8004124:	e7d6      	b.n	80040d4 <_malloc_r+0xac>
 8004126:	237e      	movs	r3, #126	; 0x7e
 8004128:	e7d4      	b.n	80040d4 <_malloc_r+0xac>
 800412a:	2900      	cmp	r1, #0
 800412c:	68f1      	ldr	r1, [r6, #12]
 800412e:	db04      	blt.n	800413a <_malloc_r+0x112>
 8004130:	68b3      	ldr	r3, [r6, #8]
 8004132:	60d9      	str	r1, [r3, #12]
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	18b3      	adds	r3, r6, r2
 8004138:	e7a4      	b.n	8004084 <_malloc_r+0x5c>
 800413a:	460e      	mov	r6, r1
 800413c:	e7d0      	b.n	80040e0 <_malloc_r+0xb8>
 800413e:	2f00      	cmp	r7, #0
 8004140:	616a      	str	r2, [r5, #20]
 8004142:	612a      	str	r2, [r5, #16]
 8004144:	db05      	blt.n	8004152 <_malloc_r+0x12a>
 8004146:	4430      	add	r0, r6
 8004148:	6843      	ldr	r3, [r0, #4]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6043      	str	r3, [r0, #4]
 8004150:	e79c      	b.n	800408c <_malloc_r+0x64>
 8004152:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004156:	d244      	bcs.n	80041e2 <_malloc_r+0x1ba>
 8004158:	08c0      	lsrs	r0, r0, #3
 800415a:	1087      	asrs	r7, r0, #2
 800415c:	2201      	movs	r2, #1
 800415e:	fa02 f707 	lsl.w	r7, r2, r7
 8004162:	686a      	ldr	r2, [r5, #4]
 8004164:	3001      	adds	r0, #1
 8004166:	433a      	orrs	r2, r7
 8004168:	606a      	str	r2, [r5, #4]
 800416a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800416e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004172:	60b7      	str	r7, [r6, #8]
 8004174:	3a08      	subs	r2, #8
 8004176:	60f2      	str	r2, [r6, #12]
 8004178:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800417c:	60fe      	str	r6, [r7, #12]
 800417e:	2001      	movs	r0, #1
 8004180:	109a      	asrs	r2, r3, #2
 8004182:	fa00 f202 	lsl.w	r2, r0, r2
 8004186:	6868      	ldr	r0, [r5, #4]
 8004188:	4282      	cmp	r2, r0
 800418a:	f200 80a1 	bhi.w	80042d0 <_malloc_r+0x2a8>
 800418e:	4202      	tst	r2, r0
 8004190:	d106      	bne.n	80041a0 <_malloc_r+0x178>
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	0052      	lsls	r2, r2, #1
 8004198:	4202      	tst	r2, r0
 800419a:	f103 0304 	add.w	r3, r3, #4
 800419e:	d0fa      	beq.n	8004196 <_malloc_r+0x16e>
 80041a0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80041a4:	46e0      	mov	r8, ip
 80041a6:	469e      	mov	lr, r3
 80041a8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80041ac:	4546      	cmp	r6, r8
 80041ae:	d153      	bne.n	8004258 <_malloc_r+0x230>
 80041b0:	f10e 0e01 	add.w	lr, lr, #1
 80041b4:	f01e 0f03 	tst.w	lr, #3
 80041b8:	f108 0808 	add.w	r8, r8, #8
 80041bc:	d1f4      	bne.n	80041a8 <_malloc_r+0x180>
 80041be:	0798      	lsls	r0, r3, #30
 80041c0:	d179      	bne.n	80042b6 <_malloc_r+0x28e>
 80041c2:	686b      	ldr	r3, [r5, #4]
 80041c4:	ea23 0302 	bic.w	r3, r3, r2
 80041c8:	606b      	str	r3, [r5, #4]
 80041ca:	6868      	ldr	r0, [r5, #4]
 80041cc:	0052      	lsls	r2, r2, #1
 80041ce:	4282      	cmp	r2, r0
 80041d0:	d87e      	bhi.n	80042d0 <_malloc_r+0x2a8>
 80041d2:	2a00      	cmp	r2, #0
 80041d4:	d07c      	beq.n	80042d0 <_malloc_r+0x2a8>
 80041d6:	4673      	mov	r3, lr
 80041d8:	4202      	tst	r2, r0
 80041da:	d1e1      	bne.n	80041a0 <_malloc_r+0x178>
 80041dc:	3304      	adds	r3, #4
 80041de:	0052      	lsls	r2, r2, #1
 80041e0:	e7fa      	b.n	80041d8 <_malloc_r+0x1b0>
 80041e2:	0a42      	lsrs	r2, r0, #9
 80041e4:	2a04      	cmp	r2, #4
 80041e6:	d815      	bhi.n	8004214 <_malloc_r+0x1ec>
 80041e8:	0982      	lsrs	r2, r0, #6
 80041ea:	3238      	adds	r2, #56	; 0x38
 80041ec:	1c57      	adds	r7, r2, #1
 80041ee:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80041f2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80041f6:	45be      	cmp	lr, r7
 80041f8:	d126      	bne.n	8004248 <_malloc_r+0x220>
 80041fa:	2001      	movs	r0, #1
 80041fc:	1092      	asrs	r2, r2, #2
 80041fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004202:	6868      	ldr	r0, [r5, #4]
 8004204:	4310      	orrs	r0, r2
 8004206:	6068      	str	r0, [r5, #4]
 8004208:	f8c6 e00c 	str.w	lr, [r6, #12]
 800420c:	60b7      	str	r7, [r6, #8]
 800420e:	f8ce 6008 	str.w	r6, [lr, #8]
 8004212:	e7b3      	b.n	800417c <_malloc_r+0x154>
 8004214:	2a14      	cmp	r2, #20
 8004216:	d801      	bhi.n	800421c <_malloc_r+0x1f4>
 8004218:	325b      	adds	r2, #91	; 0x5b
 800421a:	e7e7      	b.n	80041ec <_malloc_r+0x1c4>
 800421c:	2a54      	cmp	r2, #84	; 0x54
 800421e:	d802      	bhi.n	8004226 <_malloc_r+0x1fe>
 8004220:	0b02      	lsrs	r2, r0, #12
 8004222:	326e      	adds	r2, #110	; 0x6e
 8004224:	e7e2      	b.n	80041ec <_malloc_r+0x1c4>
 8004226:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800422a:	d802      	bhi.n	8004232 <_malloc_r+0x20a>
 800422c:	0bc2      	lsrs	r2, r0, #15
 800422e:	3277      	adds	r2, #119	; 0x77
 8004230:	e7dc      	b.n	80041ec <_malloc_r+0x1c4>
 8004232:	f240 5754 	movw	r7, #1364	; 0x554
 8004236:	42ba      	cmp	r2, r7
 8004238:	bf9a      	itte	ls
 800423a:	0c82      	lsrls	r2, r0, #18
 800423c:	327c      	addls	r2, #124	; 0x7c
 800423e:	227e      	movhi	r2, #126	; 0x7e
 8004240:	e7d4      	b.n	80041ec <_malloc_r+0x1c4>
 8004242:	68bf      	ldr	r7, [r7, #8]
 8004244:	45be      	cmp	lr, r7
 8004246:	d004      	beq.n	8004252 <_malloc_r+0x22a>
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	f022 0203 	bic.w	r2, r2, #3
 800424e:	4290      	cmp	r0, r2
 8004250:	d3f7      	bcc.n	8004242 <_malloc_r+0x21a>
 8004252:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004256:	e7d7      	b.n	8004208 <_malloc_r+0x1e0>
 8004258:	6870      	ldr	r0, [r6, #4]
 800425a:	68f7      	ldr	r7, [r6, #12]
 800425c:	f020 0003 	bic.w	r0, r0, #3
 8004260:	eba0 0a04 	sub.w	sl, r0, r4
 8004264:	f1ba 0f0f 	cmp.w	sl, #15
 8004268:	dd10      	ble.n	800428c <_malloc_r+0x264>
 800426a:	68b2      	ldr	r2, [r6, #8]
 800426c:	1933      	adds	r3, r6, r4
 800426e:	f044 0401 	orr.w	r4, r4, #1
 8004272:	6074      	str	r4, [r6, #4]
 8004274:	60d7      	str	r7, [r2, #12]
 8004276:	60ba      	str	r2, [r7, #8]
 8004278:	f04a 0201 	orr.w	r2, sl, #1
 800427c:	616b      	str	r3, [r5, #20]
 800427e:	612b      	str	r3, [r5, #16]
 8004280:	60d9      	str	r1, [r3, #12]
 8004282:	6099      	str	r1, [r3, #8]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	f846 a000 	str.w	sl, [r6, r0]
 800428a:	e6ff      	b.n	800408c <_malloc_r+0x64>
 800428c:	f1ba 0f00 	cmp.w	sl, #0
 8004290:	db0f      	blt.n	80042b2 <_malloc_r+0x28a>
 8004292:	4430      	add	r0, r6
 8004294:	6843      	ldr	r3, [r0, #4]
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6043      	str	r3, [r0, #4]
 800429c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80042a0:	4648      	mov	r0, r9
 80042a2:	60df      	str	r7, [r3, #12]
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	f000 f8db 	bl	8004460 <__malloc_unlock>
 80042aa:	4630      	mov	r0, r6
 80042ac:	b003      	add	sp, #12
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	463e      	mov	r6, r7
 80042b4:	e77a      	b.n	80041ac <_malloc_r+0x184>
 80042b6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80042ba:	4584      	cmp	ip, r0
 80042bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80042c0:	f43f af7d 	beq.w	80041be <_malloc_r+0x196>
 80042c4:	e781      	b.n	80041ca <_malloc_r+0x1a2>
 80042c6:	bf00      	nop
 80042c8:	2000011c 	.word	0x2000011c
 80042cc:	20000124 	.word	0x20000124
 80042d0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80042d4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80042d8:	f026 0603 	bic.w	r6, r6, #3
 80042dc:	42b4      	cmp	r4, r6
 80042de:	d803      	bhi.n	80042e8 <_malloc_r+0x2c0>
 80042e0:	1b33      	subs	r3, r6, r4
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f300 8096 	bgt.w	8004414 <_malloc_r+0x3ec>
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <_malloc_r+0x400>)
 80042ea:	6817      	ldr	r7, [r2, #0]
 80042ec:	4a4f      	ldr	r2, [pc, #316]	; (800442c <_malloc_r+0x404>)
 80042ee:	6811      	ldr	r1, [r2, #0]
 80042f0:	3710      	adds	r7, #16
 80042f2:	3101      	adds	r1, #1
 80042f4:	eb0b 0306 	add.w	r3, fp, r6
 80042f8:	4427      	add	r7, r4
 80042fa:	d005      	beq.n	8004308 <_malloc_r+0x2e0>
 80042fc:	494c      	ldr	r1, [pc, #304]	; (8004430 <_malloc_r+0x408>)
 80042fe:	3901      	subs	r1, #1
 8004300:	440f      	add	r7, r1
 8004302:	3101      	adds	r1, #1
 8004304:	4249      	negs	r1, r1
 8004306:	400f      	ands	r7, r1
 8004308:	4639      	mov	r1, r7
 800430a:	4648      	mov	r0, r9
 800430c:	9201      	str	r2, [sp, #4]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	f000 f8ac 	bl	800446c <_sbrk_r>
 8004314:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004318:	4680      	mov	r8, r0
 800431a:	d056      	beq.n	80043ca <_malloc_r+0x3a2>
 800431c:	9b00      	ldr	r3, [sp, #0]
 800431e:	9a01      	ldr	r2, [sp, #4]
 8004320:	4283      	cmp	r3, r0
 8004322:	d901      	bls.n	8004328 <_malloc_r+0x300>
 8004324:	45ab      	cmp	fp, r5
 8004326:	d150      	bne.n	80043ca <_malloc_r+0x3a2>
 8004328:	4842      	ldr	r0, [pc, #264]	; (8004434 <_malloc_r+0x40c>)
 800432a:	6801      	ldr	r1, [r0, #0]
 800432c:	4543      	cmp	r3, r8
 800432e:	eb07 0e01 	add.w	lr, r7, r1
 8004332:	f8c0 e000 	str.w	lr, [r0]
 8004336:	4940      	ldr	r1, [pc, #256]	; (8004438 <_malloc_r+0x410>)
 8004338:	4682      	mov	sl, r0
 800433a:	d113      	bne.n	8004364 <_malloc_r+0x33c>
 800433c:	420b      	tst	r3, r1
 800433e:	d111      	bne.n	8004364 <_malloc_r+0x33c>
 8004340:	68ab      	ldr	r3, [r5, #8]
 8004342:	443e      	add	r6, r7
 8004344:	f046 0601 	orr.w	r6, r6, #1
 8004348:	605e      	str	r6, [r3, #4]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <_malloc_r+0x414>)
 800434c:	f8da 3000 	ldr.w	r3, [sl]
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	428b      	cmp	r3, r1
 8004354:	bf88      	it	hi
 8004356:	6013      	strhi	r3, [r2, #0]
 8004358:	4a39      	ldr	r2, [pc, #228]	; (8004440 <_malloc_r+0x418>)
 800435a:	6811      	ldr	r1, [r2, #0]
 800435c:	428b      	cmp	r3, r1
 800435e:	bf88      	it	hi
 8004360:	6013      	strhi	r3, [r2, #0]
 8004362:	e032      	b.n	80043ca <_malloc_r+0x3a2>
 8004364:	6810      	ldr	r0, [r2, #0]
 8004366:	3001      	adds	r0, #1
 8004368:	bf1b      	ittet	ne
 800436a:	eba8 0303 	subne.w	r3, r8, r3
 800436e:	4473      	addne	r3, lr
 8004370:	f8c2 8000 	streq.w	r8, [r2]
 8004374:	f8ca 3000 	strne.w	r3, [sl]
 8004378:	f018 0007 	ands.w	r0, r8, #7
 800437c:	bf1c      	itt	ne
 800437e:	f1c0 0008 	rsbne	r0, r0, #8
 8004382:	4480      	addne	r8, r0
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <_malloc_r+0x408>)
 8004386:	4447      	add	r7, r8
 8004388:	4418      	add	r0, r3
 800438a:	400f      	ands	r7, r1
 800438c:	1bc7      	subs	r7, r0, r7
 800438e:	4639      	mov	r1, r7
 8004390:	4648      	mov	r0, r9
 8004392:	f000 f86b 	bl	800446c <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	bf08      	it	eq
 800439a:	4640      	moveq	r0, r8
 800439c:	f8da 3000 	ldr.w	r3, [sl]
 80043a0:	f8c5 8008 	str.w	r8, [r5, #8]
 80043a4:	bf08      	it	eq
 80043a6:	2700      	moveq	r7, #0
 80043a8:	eba0 0008 	sub.w	r0, r0, r8
 80043ac:	443b      	add	r3, r7
 80043ae:	4407      	add	r7, r0
 80043b0:	f047 0701 	orr.w	r7, r7, #1
 80043b4:	45ab      	cmp	fp, r5
 80043b6:	f8ca 3000 	str.w	r3, [sl]
 80043ba:	f8c8 7004 	str.w	r7, [r8, #4]
 80043be:	d0c4      	beq.n	800434a <_malloc_r+0x322>
 80043c0:	2e0f      	cmp	r6, #15
 80043c2:	d810      	bhi.n	80043e6 <_malloc_r+0x3be>
 80043c4:	2301      	movs	r3, #1
 80043c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80043ca:	68ab      	ldr	r3, [r5, #8]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	f022 0203 	bic.w	r2, r2, #3
 80043d2:	4294      	cmp	r4, r2
 80043d4:	eba2 0304 	sub.w	r3, r2, r4
 80043d8:	d801      	bhi.n	80043de <_malloc_r+0x3b6>
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	dc1a      	bgt.n	8004414 <_malloc_r+0x3ec>
 80043de:	4648      	mov	r0, r9
 80043e0:	f000 f83e 	bl	8004460 <__malloc_unlock>
 80043e4:	e62d      	b.n	8004042 <_malloc_r+0x1a>
 80043e6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80043ea:	3e0c      	subs	r6, #12
 80043ec:	f026 0607 	bic.w	r6, r6, #7
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	4333      	orrs	r3, r6
 80043f6:	f8cb 3004 	str.w	r3, [fp, #4]
 80043fa:	eb0b 0306 	add.w	r3, fp, r6
 80043fe:	2205      	movs	r2, #5
 8004400:	2e0f      	cmp	r6, #15
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	d9a0      	bls.n	800434a <_malloc_r+0x322>
 8004408:	f10b 0108 	add.w	r1, fp, #8
 800440c:	4648      	mov	r0, r9
 800440e:	f000 f893 	bl	8004538 <_free_r>
 8004412:	e79a      	b.n	800434a <_malloc_r+0x322>
 8004414:	68ae      	ldr	r6, [r5, #8]
 8004416:	f044 0201 	orr.w	r2, r4, #1
 800441a:	4434      	add	r4, r6
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6072      	str	r2, [r6, #4]
 8004422:	60ac      	str	r4, [r5, #8]
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	e631      	b.n	800408c <_malloc_r+0x64>
 8004428:	20000584 	.word	0x20000584
 800442c:	20000524 	.word	0x20000524
 8004430:	00000080 	.word	0x00000080
 8004434:	20000554 	.word	0x20000554
 8004438:	0000007f 	.word	0x0000007f
 800443c:	2000057c 	.word	0x2000057c
 8004440:	20000580 	.word	0x20000580

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <__malloc_lock>:
 8004454:	4801      	ldr	r0, [pc, #4]	; (800445c <__malloc_lock+0x8>)
 8004456:	f000 b92b 	b.w	80046b0 <__retarget_lock_acquire_recursive>
 800445a:	bf00      	nop
 800445c:	20000dd4 	.word	0x20000dd4

08004460 <__malloc_unlock>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__malloc_unlock+0x8>)
 8004462:	f000 b926 	b.w	80046b2 <__retarget_lock_release_recursive>
 8004466:	bf00      	nop
 8004468:	20000dd4 	.word	0x20000dd4

0800446c <_sbrk_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4c06      	ldr	r4, [pc, #24]	; (8004488 <_sbrk_r+0x1c>)
 8004470:	2300      	movs	r3, #0
 8004472:	4605      	mov	r5, r0
 8004474:	4608      	mov	r0, r1
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	f7fc fb5c 	bl	8000b34 <_sbrk>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_sbrk_r+0x1a>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	b103      	cbz	r3, 8004486 <_sbrk_r+0x1a>
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20000ddc 	.word	0x20000ddc

0800448c <_malloc_trim_r>:
 800448c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004490:	4f25      	ldr	r7, [pc, #148]	; (8004528 <_malloc_trim_r+0x9c>)
 8004492:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004534 <_malloc_trim_r+0xa8>
 8004496:	4689      	mov	r9, r1
 8004498:	4606      	mov	r6, r0
 800449a:	f7ff ffdb 	bl	8004454 <__malloc_lock>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	685d      	ldr	r5, [r3, #4]
 80044a2:	f1a8 0411 	sub.w	r4, r8, #17
 80044a6:	f025 0503 	bic.w	r5, r5, #3
 80044aa:	eba4 0409 	sub.w	r4, r4, r9
 80044ae:	442c      	add	r4, r5
 80044b0:	fbb4 f4f8 	udiv	r4, r4, r8
 80044b4:	3c01      	subs	r4, #1
 80044b6:	fb08 f404 	mul.w	r4, r8, r4
 80044ba:	4544      	cmp	r4, r8
 80044bc:	da05      	bge.n	80044ca <_malloc_trim_r+0x3e>
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff ffce 	bl	8004460 <__malloc_unlock>
 80044c4:	2000      	movs	r0, #0
 80044c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ca:	2100      	movs	r1, #0
 80044cc:	4630      	mov	r0, r6
 80044ce:	f7ff ffcd 	bl	800446c <_sbrk_r>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	442b      	add	r3, r5
 80044d6:	4298      	cmp	r0, r3
 80044d8:	d1f1      	bne.n	80044be <_malloc_trim_r+0x32>
 80044da:	4261      	negs	r1, r4
 80044dc:	4630      	mov	r0, r6
 80044de:	f7ff ffc5 	bl	800446c <_sbrk_r>
 80044e2:	3001      	adds	r0, #1
 80044e4:	d110      	bne.n	8004508 <_malloc_trim_r+0x7c>
 80044e6:	2100      	movs	r1, #0
 80044e8:	4630      	mov	r0, r6
 80044ea:	f7ff ffbf 	bl	800446c <_sbrk_r>
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	1a83      	subs	r3, r0, r2
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	dde3      	ble.n	80044be <_malloc_trim_r+0x32>
 80044f6:	490d      	ldr	r1, [pc, #52]	; (800452c <_malloc_trim_r+0xa0>)
 80044f8:	6809      	ldr	r1, [r1, #0]
 80044fa:	1a40      	subs	r0, r0, r1
 80044fc:	490c      	ldr	r1, [pc, #48]	; (8004530 <_malloc_trim_r+0xa4>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6008      	str	r0, [r1, #0]
 8004504:	6053      	str	r3, [r2, #4]
 8004506:	e7da      	b.n	80044be <_malloc_trim_r+0x32>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <_malloc_trim_r+0xa4>)
 800450c:	1b2d      	subs	r5, r5, r4
 800450e:	f045 0501 	orr.w	r5, r5, #1
 8004512:	605d      	str	r5, [r3, #4]
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	4630      	mov	r0, r6
 8004518:	1b1c      	subs	r4, r3, r4
 800451a:	6014      	str	r4, [r2, #0]
 800451c:	f7ff ffa0 	bl	8004460 <__malloc_unlock>
 8004520:	2001      	movs	r0, #1
 8004522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004526:	bf00      	nop
 8004528:	2000011c 	.word	0x2000011c
 800452c:	20000524 	.word	0x20000524
 8004530:	20000554 	.word	0x20000554
 8004534:	00000080 	.word	0x00000080

08004538 <_free_r>:
 8004538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	4688      	mov	r8, r1
 8004540:	2900      	cmp	r1, #0
 8004542:	f000 80ab 	beq.w	800469c <_free_r+0x164>
 8004546:	f7ff ff85 	bl	8004454 <__malloc_lock>
 800454a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800454e:	4d54      	ldr	r5, [pc, #336]	; (80046a0 <_free_r+0x168>)
 8004550:	f022 0001 	bic.w	r0, r2, #1
 8004554:	f1a8 0308 	sub.w	r3, r8, #8
 8004558:	181f      	adds	r7, r3, r0
 800455a:	68a9      	ldr	r1, [r5, #8]
 800455c:	687e      	ldr	r6, [r7, #4]
 800455e:	428f      	cmp	r7, r1
 8004560:	f026 0603 	bic.w	r6, r6, #3
 8004564:	f002 0201 	and.w	r2, r2, #1
 8004568:	d11b      	bne.n	80045a2 <_free_r+0x6a>
 800456a:	4430      	add	r0, r6
 800456c:	b93a      	cbnz	r2, 800457e <_free_r+0x46>
 800456e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	4410      	add	r0, r2
 8004576:	6899      	ldr	r1, [r3, #8]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	60ca      	str	r2, [r1, #12]
 800457c:	6091      	str	r1, [r2, #8]
 800457e:	f040 0201 	orr.w	r2, r0, #1
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	60ab      	str	r3, [r5, #8]
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <_free_r+0x16c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4298      	cmp	r0, r3
 800458c:	d304      	bcc.n	8004598 <_free_r+0x60>
 800458e:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <_free_r+0x170>)
 8004590:	4620      	mov	r0, r4
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	f7ff ff7a 	bl	800448c <_malloc_trim_r>
 8004598:	4620      	mov	r0, r4
 800459a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459e:	f7ff bf5f 	b.w	8004460 <__malloc_unlock>
 80045a2:	607e      	str	r6, [r7, #4]
 80045a4:	2a00      	cmp	r2, #0
 80045a6:	d139      	bne.n	800461c <_free_r+0xe4>
 80045a8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80045ac:	1a5b      	subs	r3, r3, r1
 80045ae:	4408      	add	r0, r1
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	f105 0e08 	add.w	lr, r5, #8
 80045b6:	4571      	cmp	r1, lr
 80045b8:	d032      	beq.n	8004620 <_free_r+0xe8>
 80045ba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80045be:	f8c1 e00c 	str.w	lr, [r1, #12]
 80045c2:	f8ce 1008 	str.w	r1, [lr, #8]
 80045c6:	19b9      	adds	r1, r7, r6
 80045c8:	6849      	ldr	r1, [r1, #4]
 80045ca:	07c9      	lsls	r1, r1, #31
 80045cc:	d40a      	bmi.n	80045e4 <_free_r+0xac>
 80045ce:	4430      	add	r0, r6
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	bb3a      	cbnz	r2, 8004624 <_free_r+0xec>
 80045d4:	4e35      	ldr	r6, [pc, #212]	; (80046ac <_free_r+0x174>)
 80045d6:	42b1      	cmp	r1, r6
 80045d8:	d124      	bne.n	8004624 <_free_r+0xec>
 80045da:	616b      	str	r3, [r5, #20]
 80045dc:	612b      	str	r3, [r5, #16]
 80045de:	2201      	movs	r2, #1
 80045e0:	60d9      	str	r1, [r3, #12]
 80045e2:	6099      	str	r1, [r3, #8]
 80045e4:	f040 0101 	orr.w	r1, r0, #1
 80045e8:	6059      	str	r1, [r3, #4]
 80045ea:	5018      	str	r0, [r3, r0]
 80045ec:	2a00      	cmp	r2, #0
 80045ee:	d1d3      	bne.n	8004598 <_free_r+0x60>
 80045f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80045f4:	d21a      	bcs.n	800462c <_free_r+0xf4>
 80045f6:	08c0      	lsrs	r0, r0, #3
 80045f8:	1081      	asrs	r1, r0, #2
 80045fa:	2201      	movs	r2, #1
 80045fc:	408a      	lsls	r2, r1
 80045fe:	6869      	ldr	r1, [r5, #4]
 8004600:	3001      	adds	r0, #1
 8004602:	430a      	orrs	r2, r1
 8004604:	606a      	str	r2, [r5, #4]
 8004606:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800460a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800460e:	6099      	str	r1, [r3, #8]
 8004610:	3a08      	subs	r2, #8
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004618:	60cb      	str	r3, [r1, #12]
 800461a:	e7bd      	b.n	8004598 <_free_r+0x60>
 800461c:	2200      	movs	r2, #0
 800461e:	e7d2      	b.n	80045c6 <_free_r+0x8e>
 8004620:	2201      	movs	r2, #1
 8004622:	e7d0      	b.n	80045c6 <_free_r+0x8e>
 8004624:	68fe      	ldr	r6, [r7, #12]
 8004626:	60ce      	str	r6, [r1, #12]
 8004628:	60b1      	str	r1, [r6, #8]
 800462a:	e7db      	b.n	80045e4 <_free_r+0xac>
 800462c:	0a42      	lsrs	r2, r0, #9
 800462e:	2a04      	cmp	r2, #4
 8004630:	d813      	bhi.n	800465a <_free_r+0x122>
 8004632:	0982      	lsrs	r2, r0, #6
 8004634:	3238      	adds	r2, #56	; 0x38
 8004636:	1c51      	adds	r1, r2, #1
 8004638:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800463c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004640:	428e      	cmp	r6, r1
 8004642:	d124      	bne.n	800468e <_free_r+0x156>
 8004644:	2001      	movs	r0, #1
 8004646:	1092      	asrs	r2, r2, #2
 8004648:	fa00 f202 	lsl.w	r2, r0, r2
 800464c:	6868      	ldr	r0, [r5, #4]
 800464e:	4302      	orrs	r2, r0
 8004650:	606a      	str	r2, [r5, #4]
 8004652:	60de      	str	r6, [r3, #12]
 8004654:	6099      	str	r1, [r3, #8]
 8004656:	60b3      	str	r3, [r6, #8]
 8004658:	e7de      	b.n	8004618 <_free_r+0xe0>
 800465a:	2a14      	cmp	r2, #20
 800465c:	d801      	bhi.n	8004662 <_free_r+0x12a>
 800465e:	325b      	adds	r2, #91	; 0x5b
 8004660:	e7e9      	b.n	8004636 <_free_r+0xfe>
 8004662:	2a54      	cmp	r2, #84	; 0x54
 8004664:	d802      	bhi.n	800466c <_free_r+0x134>
 8004666:	0b02      	lsrs	r2, r0, #12
 8004668:	326e      	adds	r2, #110	; 0x6e
 800466a:	e7e4      	b.n	8004636 <_free_r+0xfe>
 800466c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004670:	d802      	bhi.n	8004678 <_free_r+0x140>
 8004672:	0bc2      	lsrs	r2, r0, #15
 8004674:	3277      	adds	r2, #119	; 0x77
 8004676:	e7de      	b.n	8004636 <_free_r+0xfe>
 8004678:	f240 5154 	movw	r1, #1364	; 0x554
 800467c:	428a      	cmp	r2, r1
 800467e:	bf9a      	itte	ls
 8004680:	0c82      	lsrls	r2, r0, #18
 8004682:	327c      	addls	r2, #124	; 0x7c
 8004684:	227e      	movhi	r2, #126	; 0x7e
 8004686:	e7d6      	b.n	8004636 <_free_r+0xfe>
 8004688:	6889      	ldr	r1, [r1, #8]
 800468a:	428e      	cmp	r6, r1
 800468c:	d004      	beq.n	8004698 <_free_r+0x160>
 800468e:	684a      	ldr	r2, [r1, #4]
 8004690:	f022 0203 	bic.w	r2, r2, #3
 8004694:	4290      	cmp	r0, r2
 8004696:	d3f7      	bcc.n	8004688 <_free_r+0x150>
 8004698:	68ce      	ldr	r6, [r1, #12]
 800469a:	e7da      	b.n	8004652 <_free_r+0x11a>
 800469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a0:	2000011c 	.word	0x2000011c
 80046a4:	20000528 	.word	0x20000528
 80046a8:	20000584 	.word	0x20000584
 80046ac:	20000124 	.word	0x20000124

080046b0 <__retarget_lock_acquire_recursive>:
 80046b0:	4770      	bx	lr

080046b2 <__retarget_lock_release_recursive>:
 80046b2:	4770      	bx	lr

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
