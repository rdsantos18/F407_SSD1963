
F407_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001185c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000d60d8  080119f0  080119f0  000219f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080e7ac8  080e7ac8  000f7ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080e7ad0  080e7ad0  000f7ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080e7ad4  080e7ad4  000f7ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000750  20000000  080e7ad8  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00100750  2**0
                  CONTENTS
  8 .bss          000154e8  20000750  20000750  00100750  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20015c38  20015c38  00100750  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00100750  2**0
                  CONTENTS, READONLY
 11 .debug_info   00070f8e  00000000  00000000  00100780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000d7e8  00000000  00000000  0017170e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00022cbe  00000000  00000000  0017eef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002528  00000000  00000000  001a1bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003b78  00000000  00000000  001a40e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000191ec  00000000  00000000  001a7c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000d0be  00000000  00000000  001c0e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001cdf02  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000792c  00000000  00000000  001cdf80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000750 	.word	0x20000750
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119d4 	.word	0x080119d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000754 	.word	0x20000754
 80001cc:	080119d4 	.word	0x080119d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	2230      	movs	r2, #48	; 0x30
{
 8000ed4:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	eb0d 0002 	add.w	r0, sp, r2
 8000eda:	2100      	movs	r1, #0
 8000edc:	f00d fa4b 	bl	800e376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	a807      	add	r0, sp, #28
 8000ee6:	f00d fa46 	bl	800e376 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eea:	2100      	movs	r1, #0
 8000eec:	2210      	movs	r2, #16
 8000eee:	a803      	add	r0, sp, #12
 8000ef0:	f00d fa41 	bl	800e376 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <SystemClock_Config+0xac>)
 8000ef8:	9501      	str	r5, [sp, #4]
 8000efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <SystemClock_Config+0xb0>)
 8000f0e:	9502      	str	r5, [sp, #8]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f32:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f42:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f001 fc56 	bl	80027f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f54:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5c:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f64:	f001 fdf8 	bl	8002b58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f68:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f6c:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f6e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f70:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f72:	f001 fec9 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000f76:	b018      	add	sp, #96	; 0x60
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <main>:
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8000f88:	f000 fb8c 	bl	80016a4 <HAL_Init>
  SystemClock_Config();
 8000f8c:	f7ff ffa0 	bl	8000ed0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2214      	movs	r2, #20
 8000f92:	2100      	movs	r1, #0
 8000f94:	a806      	add	r0, sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f96:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f00d f9ed 	bl	800e376 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9c:	4ba1      	ldr	r3, [pc, #644]	; (8001224 <main+0x2a0>)
 8000f9e:	9400      	str	r4, [sp, #0]
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fa2:	48a1      	ldr	r0, [pc, #644]	; (8001228 <main+0x2a4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fa4:	4fa1      	ldr	r7, [pc, #644]	; (800122c <main+0x2a8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	f042 0210 	orr.w	r2, r2, #16
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
 8000fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fae:	f002 0210 	and.w	r2, r2, #16
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	9401      	str	r4, [sp, #4]
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f042 0204 	orr.w	r2, r2, #4
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f002 0204 	and.w	r2, r2, #4
 8000fc6:	9201      	str	r2, [sp, #4]
 8000fc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	9402      	str	r4, [sp, #8]
 8000fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fda:	9202      	str	r2, [sp, #8]
 8000fdc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	9403      	str	r4, [sp, #12]
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0201 	and.w	r2, r2, #1
 8000fee:	9203      	str	r2, [sp, #12]
 8000ff0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	9404      	str	r4, [sp, #16]
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff6:	f042 0202 	orr.w	r2, r2, #2
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffe:	f002 0202 	and.w	r2, r2, #2
 8001002:	9204      	str	r2, [sp, #16]
 8001004:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	9405      	str	r4, [sp, #20]
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f042 0208 	orr.w	r2, r2, #8
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001016:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800101a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800101e:	f000 fcb5 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|T_CS_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2111      	movs	r1, #17
 8001026:	4882      	ldr	r0, [pc, #520]	; (8001230 <main+0x2ac>)
 8001028:	f000 fcb0 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001032:	4880      	ldr	r0, [pc, #512]	; (8001234 <main+0x2b0>)
 8001034:	f000 fcaa 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001038:	4622      	mov	r2, r4
 800103a:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 800103e:	487e      	ldr	r0, [pc, #504]	; (8001238 <main+0x2b4>)
 8001040:	f000 fca4 	bl	800198c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001046:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001048:	a906      	add	r1, sp, #24
 800104a:	4877      	ldr	r0, [pc, #476]	; (8001228 <main+0x2a4>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800104c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001054:	f000 fbba 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 8001058:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	a906      	add	r1, sp, #24
 800105c:	4874      	ldr	r0, [pc, #464]	; (8001230 <main+0x2ac>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 800105e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001064:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f000 fbaf 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800106e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001070:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001074:	486e      	ldr	r0, [pc, #440]	; (8001230 <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001080:	f000 fba4 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	a906      	add	r1, sp, #24
 8001086:	486d      	ldr	r0, [pc, #436]	; (800123c <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001088:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = B1_Pin;
 800108c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f000 fb9d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001092:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001094:	a906      	add	r1, sp, #24
 8001096:	4866      	ldr	r0, [pc, #408]	; (8001230 <main+0x2ac>)
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001098:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800109e:	f000 fb95 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010a2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010a4:	a906      	add	r1, sp, #24
 80010a6:	4863      	ldr	r0, [pc, #396]	; (8001234 <main+0x2b0>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f000 fb8d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010b6:	a906      	add	r1, sp, #24
 80010b8:	485e      	ldr	r0, [pc, #376]	; (8001234 <main+0x2b0>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010ba:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f000 fb81 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_WR_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80010ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	a906      	add	r1, sp, #24
 80010d0:	4858      	ldr	r0, [pc, #352]	; (8001234 <main+0x2b0>)
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80010d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f000 fb77 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           TFT_D0_Pin TFT_D1_Pin TFT_D2_Pin TFT_D4_Pin 
                           TFT_D5_Pin TFT_D5D5_Pin TFT_D6_Pin TFT_D7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80010de:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
                          |TFT_D0_Pin|TFT_D1_Pin|TFT_D2_Pin|TFT_D4_Pin 
                          |TFT_D5_Pin|TFT_D5D5_Pin|TFT_D6_Pin|TFT_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	a906      	add	r1, sp, #24
 80010e4:	4854      	ldr	r0, [pc, #336]	; (8001238 <main+0x2b4>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80010e6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f000 fb6d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010f2:	a906      	add	r1, sp, #24
 80010f4:	484c      	ldr	r0, [pc, #304]	; (8001228 <main+0x2a4>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010f6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010f8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f000 fb66 	bl	80017cc <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <main+0x2bc>)
  hi2c1.Instance = I2C1;
 8001102:	4850      	ldr	r0, [pc, #320]	; (8001244 <main+0x2c0>)
  hi2c1.Init.ClockSpeed = 100000;
 8001104:	4b50      	ldr	r3, [pc, #320]	; (8001248 <main+0x2c4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001106:	6084      	str	r4, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800110c:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001110:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001112:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001114:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001118:	6204      	str	r4, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111a:	6107      	str	r7, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	f001 f890 	bl	8002240 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8001120:	484a      	ldr	r0, [pc, #296]	; (800124c <main+0x2c8>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <main+0x2cc>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001124:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001126:	f44f 7600 	mov.w	r6, #512	; 0x200
 800112a:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <main+0x2d0>)
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001130:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001132:	6106      	str	r6, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001134:	6143      	str	r3, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001136:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001138:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800113a:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800113c:	f001 f924 	bl	8002388 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8001140:	4845      	ldr	r0, [pc, #276]	; (8001258 <main+0x2d4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4946      	ldr	r1, [pc, #280]	; (800125c <main+0x2d8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001144:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	f44f 7382 	mov.w	r3, #260	; 0x104
 800114a:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CRCPolynomial = 10;
 800114e:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001156:	6186      	str	r6, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001158:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115a:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001160:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001162:	f001 fe97 	bl	8002e94 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8001166:	483e      	ldr	r0, [pc, #248]	; (8001260 <main+0x2dc>)
  huart2.Init.BaudRate = 115200;
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <main+0x2e0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800116c:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8001170:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	260c      	movs	r6, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001176:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001178:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117e:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001180:	f002 f918 	bl	80033b4 <HAL_UART_Init>
  huart3.Instance = USART3;
 8001184:	4838      	ldr	r0, [pc, #224]	; (8001268 <main+0x2e4>)
  huart3.Init.BaudRate = 9600;
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <main+0x2e8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001188:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 9600;
 800118a:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart3.Init.StopBits = UART_STOPBITS_1;
 800118e:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001190:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	61c4      	str	r4, [r0, #28]
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8001196:	4c36      	ldr	r4, [pc, #216]	; (8001270 <main+0x2ec>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001198:	6146      	str	r6, [r0, #20]
  huart3.Init.BaudRate = 9600;
 800119a:	e880 4008 	stmia.w	r0, {r3, lr}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119e:	f002 f909 	bl	80033b4 <HAL_UART_Init>
  MX_USB_HOST_Init();
 80011a2:	f003 fcb7 	bl	8004b14 <MX_USB_HOST_Init>
    HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80011a6:	4639      	mov	r1, r7
 80011a8:	4823      	ldr	r0, [pc, #140]	; (8001238 <main+0x2b4>)
 80011aa:	f000 fbf4 	bl	8001996 <HAL_GPIO_TogglePin>
    ssd1963_init();
 80011ae:	f003 fe55 	bl	8004e5c <ssd1963_init>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <main+0x2f0>)
 80011b4:	4930      	ldr	r1, [pc, #192]	; (8001278 <main+0x2f4>)
 80011b6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80011ba:	4620      	mov	r0, r4
 80011bc:	f00a fbbf 	bl	800b93e <lv_disp_buf_init>
  lv_init();
 80011c0:	f005 f98a 	bl	80064d8 <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 80011c4:	a806      	add	r0, sp, #24
 80011c6:	f00a fba1 	bl	800b90c <lv_disp_drv_init>
  disp_drv.hor_res = 800;               //Set the horizontal resolution
 80011ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 80011ce:	f8ad 3018 	strh.w	r3, [sp, #24]
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 80011d2:	9407      	str	r4, [sp, #28]
  disp_drv.ver_res = 480;               //Set the vertical resolution
 80011d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  lv_indev_drv_init(&indev_drv);
 80011d8:	4c28      	ldr	r4, [pc, #160]	; (800127c <main+0x2f8>)
  disp_drv.ver_res = 480;               //Set the vertical resolution
 80011da:	f8ad 301a 	strh.w	r3, [sp, #26]
  lv_disp_drv_register(&disp_drv);      //Finally register the drive
 80011de:	a806      	add	r0, sp, #24
  disp_drv.flush_cb = ssd1963_flush;	//Set your driver function
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <main+0x2fc>)
 80011e2:	9309      	str	r3, [sp, #36]	; 0x24
  lv_disp_drv_register(&disp_drv);      //Finally register the drive
 80011e4:	f00a fbba 	bl	800b95c <lv_disp_drv_register>
  lv_indev_drv_init(&indev_drv);
 80011e8:	4620      	mov	r0, r4
 80011ea:	f00a fc7d 	bl	800bae8 <lv_indev_drv_init>
  indev_drv.read_cb = xpt2046_read;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <main+0x300>)
 80011f0:	6063      	str	r3, [r4, #4]
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 80011f2:	4620      	mov	r0, r4
  indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011f4:	7025      	strb	r5, [r4, #0]
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 80011f6:	f00a fc89 	bl	800bb0c <lv_indev_drv_register>
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <main+0x304>)
  	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80011fc:	4c0e      	ldr	r4, [pc, #56]	; (8001238 <main+0x2b4>)
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 80011fe:	6018      	str	r0, [r3, #0]
  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <main+0x2b4>)
 8001206:	f000 fbc6 	bl	8001996 <HAL_GPIO_TogglePin>
  simulacare();
 800120a:	f003 fb03 	bl	8004814 <simulacare>
    MX_USB_HOST_Process();
 800120e:	f003 fca1 	bl	8004b54 <MX_USB_HOST_Process>
  	  lv_task_handler();
 8001212:	f00b f9f1 	bl	800c5f8 <lv_task_handler>
  	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121a:	4620      	mov	r0, r4
 800121c:	f000 fbbb 	bl	8001996 <HAL_GPIO_TogglePin>
 8001220:	e7f5      	b.n	800120e <main+0x28a>
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40021000 	.word	0x40021000
 800122c:	10120000 	.word	0x10120000
 8001230:	40020800 	.word	0x40020800
 8001234:	40020400 	.word	0x40020400
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40020000 	.word	0x40020000
 8001240:	40005400 	.word	0x40005400
 8001244:	20014f8c 	.word	0x20014f8c
 8001248:	000186a0 	.word	0x000186a0
 800124c:	2001507c 	.word	0x2001507c
 8001250:	40003c00 	.word	0x40003c00
 8001254:	00017700 	.word	0x00017700
 8001258:	20014fe4 	.word	0x20014fe4
 800125c:	40013000 	.word	0x40013000
 8001260:	2001503c 	.word	0x2001503c
 8001264:	40004400 	.word	0x40004400
 8001268:	20014f4c 	.word	0x20014f4c
 800126c:	40004800 	.word	0x40004800
 8001270:	2001016c 	.word	0x2001016c
 8001274:	2000846c 	.word	0x2000846c
 8001278:	2000076c 	.word	0x2000076c
 800127c:	20014f30 	.word	0x20014f30
 8001280:	08005151 	.word	0x08005151
 8001284:	08005265 	.word	0x08005265
 8001288:	20014fe0 	.word	0x20014fe0

0800128c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	4c07      	ldr	r4, [pc, #28]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001292:	42a2      	cmp	r2, r4
{
 8001294:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 8001296:	d101      	bne.n	800129c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001298:	f000 fa1e 	bl	80016d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	42a3      	cmp	r3, r4
 80012a0:	d104      	bne.n	80012ac <HAL_TIM_PeriodElapsedCallback+0x20>
	  lv_tick_inc(1);
 80012a2:	2001      	movs	r0, #1
  }
  /* USER CODE END Callback 1 */
}
 80012a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  lv_tick_inc(1);
 80012a8:	f00a bc8c 	b.w	800bbc4 <lv_tick_inc>
 80012ac:	bd38      	pop	{r3, r4, r5, pc}
 80012ae:	bf00      	nop
 80012b0:	40001000 	.word	0x40001000

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_MspInit+0x3c>)
 80012bc:	2100      	movs	r1, #0
 80012be:	9100      	str	r1, [sp, #0]
 80012c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44
 80012c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	9101      	str	r1, [sp, #4]
 80012d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e8:	f000 fa1c 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	b003      	add	sp, #12
 80012ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f8:	b530      	push	{r4, r5, lr}
 80012fa:	4604      	mov	r4, r0
 80012fc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a803      	add	r0, sp, #12
 8001304:	f00d f837 	bl	800e376 <memset>
  if(hi2c->Instance==I2C1)
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_I2C_MspInit+0x64>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d122      	bne.n	8001356 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4c13      	ldr	r4, [pc, #76]	; (8001360 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	2500      	movs	r5, #0
 8001316:	9501      	str	r5, [sp, #4]
 8001318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	6323      	str	r3, [r4, #48]	; 0x30
 8001320:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800132a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800132e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133a:	2304      	movs	r3, #4
 800133c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f000 fa45 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	9502      	str	r5, [sp, #8]
 8001344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134a:	6423      	str	r3, [r4, #64]	; 0x40
 800134c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001356:	b009      	add	sp, #36	; 0x24
 8001358:	bd30      	pop	{r4, r5, pc}
 800135a:	bf00      	nop
 800135c:	40005400 	.word	0x40005400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400

08001368 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	4604      	mov	r4, r0
 800136c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	2214      	movs	r2, #20
 8001370:	2100      	movs	r1, #0
 8001372:	a803      	add	r0, sp, #12
 8001374:	f00c ffff 	bl	800e376 <memset>
  if(hi2s->Instance==SPI3)
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_I2S_MspInit+0x88>)
 800137c:	429a      	cmp	r2, r3
 800137e:	d135      	bne.n	80013ec <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001380:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001384:	2400      	movs	r4, #0
 8001386:	9400      	str	r4, [sp, #0]
 8001388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800138a:	481a      	ldr	r0, [pc, #104]	; (80013f4 <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800138c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	9401      	str	r4, [sp, #4]
 800139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
 80013a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a8:	f002 0201 	and.w	r2, r2, #1
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	9402      	str	r4, [sp, #8]
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	f042 0204 	orr.w	r2, r2, #4
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013c6:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c8:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f000 f9fb 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013d6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	a903      	add	r1, sp, #12
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f000 f9f0 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013ec:	b008      	add	sp, #32
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	40003c00 	.word	0x40003c00
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020800 	.word	0x40020800

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
 8001400:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	2214      	movs	r2, #20
 8001404:	2100      	movs	r1, #0
 8001406:	a803      	add	r0, sp, #12
 8001408:	f00c ffb5 	bl	800e376 <memset>
  if(hspi->Instance==SPI1)
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_SPI_MspInit+0x60>)
 8001410:	429a      	cmp	r2, r3
 8001412:	d120      	bne.n	8001456 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001414:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001418:	2100      	movs	r1, #0
 800141a:	9101      	str	r1, [sp, #4]
 800141c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
 8001426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001428:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800142c:	9201      	str	r2, [sp, #4]
 800142e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	9102      	str	r1, [sp, #8]
 8001432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001444:	23e0      	movs	r3, #224	; 0xe0
 8001446:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144e:	2305      	movs	r3, #5
 8001450:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f000 f9bb 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001456:	b008      	add	sp, #32
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	40013000 	.word	0x40013000
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	2214      	movs	r2, #20
{
 8001468:	b08a      	sub	sp, #40	; 0x28
 800146a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	2100      	movs	r1, #0
 800146e:	eb0d 0002 	add.w	r0, sp, r2
 8001472:	f00c ff80 	bl	800e376 <memset>
  if(huart->Instance==USART2)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_UART_MspInit+0xb4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d125      	bne.n	80014ca <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	4827      	ldr	r0, [pc, #156]	; (8001520 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	2100      	movs	r1, #0
 8001484:	9101      	str	r1, [sp, #4]
 8001486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001488:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
 800148e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001490:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	9102      	str	r1, [sp, #8]
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ac:	230c      	movs	r3, #12
 80014ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014bc:	2307      	movs	r3, #7
 80014be:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c2:	f000 f983 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c6:	b00a      	add	sp, #40	; 0x28
 80014c8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80014ca:	4a16      	ldr	r2, [pc, #88]	; (8001524 <HAL_UART_MspInit+0xc0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d1fa      	bne.n	80014c6 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	4815      	ldr	r0, [pc, #84]	; (8001528 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d4:	2100      	movs	r1, #0
 80014d6:	9103      	str	r1, [sp, #12]
 80014d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
 80014e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80014e6:	9203      	str	r2, [sp, #12]
 80014e8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	9104      	str	r1, [sp, #16]
 80014ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ee:	f042 0208 	orr.w	r2, r2, #8
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001510:	2307      	movs	r3, #7
 8001512:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	a905      	add	r1, sp, #20
 8001516:	e7d4      	b.n	80014c2 <HAL_UART_MspInit+0x5e>
 8001518:	40004400 	.word	0x40004400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40004800 	.word	0x40004800
 8001528:	40020c00 	.word	0x40020c00

0800152c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800152e:	4601      	mov	r1, r0
{
 8001530:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001532:	2200      	movs	r2, #0
 8001534:	2036      	movs	r0, #54	; 0x36
 8001536:	f000 f907 	bl	8001748 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800153a:	2036      	movs	r0, #54	; 0x36
 800153c:	f000 f938 	bl	80017b0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001540:	2500      	movs	r5, #0
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_InitTick+0x6c>)
 8001544:	9502      	str	r5, [sp, #8]
 8001546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001548:	4c14      	ldr	r4, [pc, #80]	; (800159c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800154a:	f042 0210 	orr.w	r2, r2, #16
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	a901      	add	r1, sp, #4
 800155a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800155c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155e:	f001 fbb5 	bl	8002ccc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001562:	f001 fb93 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_InitTick+0x74>)
 8001568:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800156a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800156e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001570:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_InitTick+0x78>)
 8001574:	fbb0 f0f3 	udiv	r0, r0, r3
 8001578:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800157a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800157c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800157e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001582:	f001 fde1 	bl	8003148 <HAL_TIM_Base_Init>
 8001586:	b920      	cbnz	r0, 8001592 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001588:	4620      	mov	r0, r4
 800158a:	f001 fcc1 	bl	8002f10 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800158e:	b009      	add	sp, #36	; 0x24
 8001590:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e7fb      	b.n	800158e <HAL_InitTick+0x62>
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	200150c4 	.word	0x200150c4
 80015a0:	40001000 	.word	0x40001000
 80015a4:	000f4240 	.word	0x000f4240

080015a8 <NMI_Handler>:
 80015a8:	4770      	bx	lr

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler>

080015b2 <SVC_Handler>:
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	4770      	bx	lr
	...

080015bc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015bc:	4801      	ldr	r0, [pc, #4]	; (80015c4 <TIM6_DAC_IRQHandler+0x8>)
 80015be:	f001 bcbb 	b.w	8002f38 <HAL_TIM_IRQHandler>
 80015c2:	bf00      	nop
 80015c4:	200150c4 	.word	0x200150c4

080015c8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015c8:	4801      	ldr	r0, [pc, #4]	; (80015d0 <OTG_FS_IRQHandler+0x8>)
 80015ca:	f000 bae1 	b.w	8001b90 <HAL_HCD_IRQHandler>
 80015ce:	bf00      	nop
 80015d0:	200154d4 	.word	0x200154d4

080015d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	460e      	mov	r6, r1
 80015d8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	460c      	mov	r4, r1
 80015dc:	1ba3      	subs	r3, r4, r6
 80015de:	429d      	cmp	r5, r3
 80015e0:	dc01      	bgt.n	80015e6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015e2:	4628      	mov	r0, r5
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015e6:	f3af 8000 	nop.w
 80015ea:	f804 0b01 	strb.w	r0, [r4], #1
 80015ee:	e7f5      	b.n	80015dc <_read+0x8>

080015f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	460e      	mov	r6, r1
 80015f4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	460c      	mov	r4, r1
 80015f8:	1ba3      	subs	r3, r4, r6
 80015fa:	429d      	cmp	r5, r3
 80015fc:	dc01      	bgt.n	8001602 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80015fe:	4628      	mov	r0, r5
 8001600:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001602:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001606:	f3af 8000 	nop.w
 800160a:	e7f5      	b.n	80015f8 <_write+0x8>

0800160c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800160c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <_sbrk+0x2c>)
 8001610:	6819      	ldr	r1, [r3, #0]
{
 8001612:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001614:	b909      	cbnz	r1, 800161a <_sbrk+0xe>
		heap_end = &end;
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <_sbrk+0x30>)
 8001618:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800161a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800161c:	4669      	mov	r1, sp
 800161e:	4402      	add	r2, r0
 8001620:	428a      	cmp	r2, r1
 8001622:	d906      	bls.n	8001632 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001624:	f00c fc54 	bl	800ded0 <__errno>
 8001628:	230c      	movs	r3, #12
 800162a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001630:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001632:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001634:	bd08      	pop	{r3, pc}
 8001636:	bf00      	nop
 8001638:	20010188 	.word	0x20010188
 800163c:	20015c38 	.word	0x20015c38

08001640 <_close>:

int _close(int file)
{
	return -1;
}
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001644:	4770      	bx	lr

08001646 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800164c:	2000      	movs	r0, #0
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001650:	2001      	movs	r0, #1
 8001652:	4770      	bx	lr

08001654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001654:	2000      	movs	r0, #0
 8001656:	4770      	bx	lr

08001658 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	490f      	ldr	r1, [pc, #60]	; (8001698 <SystemInit+0x40>)
 800165a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800165e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <SystemInit+0x44>)
 8001668:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800166a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001672:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800167a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800167e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <SystemInit+0x48>)
 8001682:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800168a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800168c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800168e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00
 800169c:	40023800 	.word	0x40023800
 80016a0:	24003010 	.word	0x24003010

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_Init+0x30>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ae:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016b6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f82f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff ff30 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fdf4 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	bd08      	pop	{r3, pc}
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <HAL_IncTick+0x10>)
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_IncTick+0x14>)
 80016dc:	6811      	ldr	r1, [r2, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	440b      	add	r3, r1
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20015104 	.word	0x20015104
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016f0:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <HAL_GetTick+0x8>)
 80016f2:	6818      	ldr	r0, [r3, #0]
}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20015104 	.word	0x20015104

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff6 	bl	80016f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001704:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	bf1c      	itt	ne
 8001708:	4b05      	ldrne	r3, [pc, #20]	; (8001720 <HAL_Delay+0x24>)
 800170a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800170c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800170e:	bf18      	it	ne
 8001710:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001712:	f7ff ffed 	bl	80016f0 <HAL_GetTick>
 8001716:	1b40      	subs	r0, r0, r5
 8001718:	4284      	cmp	r4, r0
 800171a:	d8fa      	bhi.n	8001712 <HAL_Delay+0x16>
  {
  }
}
 800171c:	bd38      	pop	{r3, r4, r5, pc}
 800171e:	bf00      	nop
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001726:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	0200      	lsls	r0, r0, #8
 8001736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800173e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001740:	60d3      	str	r3, [r2, #12]
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b530      	push	{r4, r5, lr}
 800174c:	68dc      	ldr	r4, [r3, #12]
 800174e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001752:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	2b04      	cmp	r3, #4
 800175a:	bf28      	it	cs
 800175c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 0501 	mov.w	r5, #1
 8001764:	fa05 f303 	lsl.w	r3, r5, r3
 8001768:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176c:	bf8c      	ite	hi
 800176e:	3c03      	subhi	r4, #3
 8001770:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001772:	4019      	ands	r1, r3
 8001774:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001776:	fa05 f404 	lsl.w	r4, r5, r4
 800177a:	3c01      	subs	r4, #1
 800177c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800177e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	ea42 0201 	orr.w	r2, r2, r1
 8001784:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	bfad      	iteet	ge
 800178a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	f000 000f 	andlt.w	r0, r0, #15
 8001792:	4b06      	ldrlt	r3, [pc, #24]	; (80017ac <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	bfb5      	itete	lt
 800179a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017a4:	bd30      	pop	{r4, r5, pc}
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	e000ed14 	.word	0xe000ed14

080017b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017b0:	2800      	cmp	r0, #0
 80017b2:	db08      	blt.n	80017c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b4:	0942      	lsrs	r2, r0, #5
 80017b6:	2301      	movs	r3, #1
 80017b8:	f000 001f 	and.w	r0, r0, #31
 80017bc:	fa03 f000 	lsl.w	r0, r3, r0
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <HAL_NVIC_EnableIRQ+0x18>)
 80017c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001984 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4a68      	ldr	r2, [pc, #416]	; (800197c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017da:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001988 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017e2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80017e8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80017f0:	45b6      	cmp	lr, r6
 80017f2:	f040 80ae 	bne.w	8001952 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f6:	684c      	ldr	r4, [r1, #4]
 80017f8:	f024 0710 	bic.w	r7, r4, #16
 80017fc:	2f02      	cmp	r7, #2
 80017fe:	d116      	bne.n	800182e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001800:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001804:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001808:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800180c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001810:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001814:	f04f 0c0f 	mov.w	ip, #15
 8001818:	fa0c fc0b 	lsl.w	ip, ip, fp
 800181c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	690d      	ldr	r5, [r1, #16]
 8001822:	fa05 f50b 	lsl.w	r5, r5, fp
 8001826:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	f8ca 5020 	str.w	r5, [sl, #32]
 800182e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001834:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001838:	fa05 f50a 	lsl.w	r5, r5, sl
 800183c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001842:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001852:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	d811      	bhi.n	800187c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001858:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	68cf      	ldr	r7, [r1, #12]
 8001860:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001864:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001868:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800186a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001870:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001874:	409f      	lsls	r7, r3
 8001876:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800187a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800187c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	688f      	ldr	r7, [r1, #8]
 8001882:	fa07 f70a 	lsl.w	r7, r7, sl
 8001886:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001888:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	00e5      	lsls	r5, r4, #3
 800188c:	d561      	bpl.n	8001952 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	f04f 0b00 	mov.w	fp, #0
 8001892:	f8cd b00c 	str.w	fp, [sp, #12]
 8001896:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	4d39      	ldr	r5, [pc, #228]	; (8001980 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018a0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018a8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018ac:	9703      	str	r7, [sp, #12]
 80018ae:	9f03      	ldr	r7, [sp, #12]
 80018b0:	f023 0703 	bic.w	r7, r3, #3
 80018b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018b8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018c8:	f04f 0e0f 	mov.w	lr, #15
 80018cc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	d043      	beq.n	8001960 <HAL_GPIO_Init+0x194>
 80018d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018dc:	42a8      	cmp	r0, r5
 80018de:	d041      	beq.n	8001964 <HAL_GPIO_Init+0x198>
 80018e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e4:	42a8      	cmp	r0, r5
 80018e6:	d03f      	beq.n	8001968 <HAL_GPIO_Init+0x19c>
 80018e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d03d      	beq.n	800196c <HAL_GPIO_Init+0x1a0>
 80018f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	d03b      	beq.n	8001970 <HAL_GPIO_Init+0x1a4>
 80018f8:	4548      	cmp	r0, r9
 80018fa:	d03b      	beq.n	8001974 <HAL_GPIO_Init+0x1a8>
 80018fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001900:	42a8      	cmp	r0, r5
 8001902:	d039      	beq.n	8001978 <HAL_GPIO_Init+0x1ac>
 8001904:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001908:	42a8      	cmp	r0, r5
 800190a:	bf14      	ite	ne
 800190c:	2508      	movne	r5, #8
 800190e:	2507      	moveq	r5, #7
 8001910:	fa05 f50c 	lsl.w	r5, r5, ip
 8001914:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800191a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800191c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001922:	bf0c      	ite	eq
 8001924:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001926:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001928:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800192a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001930:	bf0c      	ite	eq
 8001932:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001934:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001936:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001938:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800193e:	bf0c      	ite	eq
 8001940:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001942:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001944:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001946:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800194a:	bf54      	ite	pl
 800194c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800194e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001950:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	3301      	adds	r3, #1
 8001954:	2b10      	cmp	r3, #16
 8001956:	f47f af44 	bne.w	80017e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800195a:	b005      	add	sp, #20
 800195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001960:	465d      	mov	r5, fp
 8001962:	e7d5      	b.n	8001910 <HAL_GPIO_Init+0x144>
 8001964:	2501      	movs	r5, #1
 8001966:	e7d3      	b.n	8001910 <HAL_GPIO_Init+0x144>
 8001968:	2502      	movs	r5, #2
 800196a:	e7d1      	b.n	8001910 <HAL_GPIO_Init+0x144>
 800196c:	2503      	movs	r5, #3
 800196e:	e7cf      	b.n	8001910 <HAL_GPIO_Init+0x144>
 8001970:	2504      	movs	r5, #4
 8001972:	e7cd      	b.n	8001910 <HAL_GPIO_Init+0x144>
 8001974:	2505      	movs	r5, #5
 8001976:	e7cb      	b.n	8001910 <HAL_GPIO_Init+0x144>
 8001978:	2506      	movs	r5, #6
 800197a:	e7c9      	b.n	8001910 <HAL_GPIO_Init+0x144>
 800197c:	40013c00 	.word	0x40013c00
 8001980:	40020000 	.word	0x40020000
 8001984:	40023800 	.word	0x40023800
 8001988:	40021400 	.word	0x40021400

0800198c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	b10a      	cbz	r2, 8001992 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	6181      	str	r1, [r0, #24]
 8001990:	4770      	bx	lr
 8001992:	0409      	lsls	r1, r1, #16
 8001994:	e7fb      	b.n	800198e <HAL_GPIO_WritePin+0x2>

08001996 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001996:	6943      	ldr	r3, [r0, #20]
 8001998:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800199c:	bf08      	it	eq
 800199e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	6181      	str	r1, [r0, #24]
 80019a2:	4770      	bx	lr

080019a4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019a8:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019aa:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 80019ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80019b2:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80019b6:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80019ba:	2801      	cmp	r0, #1
 80019bc:	d028      	beq.n	8001a10 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 80019c4:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 80019c6:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019c8:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 80019cc:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019d0:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019d4:	bf08      	it	eq
 80019d6:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 80019d8:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e0:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e4:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019e8:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019ec:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 80019f0:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80019f4:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 80019f8:	f8cd c008 	str.w	ip, [sp, #8]
 80019fc:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001a00:	6820      	ldr	r0, [r4, #0]
 8001a02:	f001 fea7 	bl	8003754 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a06:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001a0a:	b004      	add	sp, #16
 8001a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001a10:	2002      	movs	r0, #2
 8001a12:	e7fa      	b.n	8001a0a <HAL_HCD_HC_Init+0x66>

08001a14 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001a14:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001a18:	2b01      	cmp	r3, #1
{
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001a1e:	d009      	beq.n	8001a34 <HAL_HCD_HC_Halt+0x20>
 8001a20:	2301      	movs	r3, #1
 8001a22:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a26:	6800      	ldr	r0, [r0, #0]
 8001a28:	f001 ff1e 	bl	8003868 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001a32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001a34:	2002      	movs	r0, #2
}
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <HAL_HCD_Init>:
{
 8001a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001a3c:	4607      	mov	r7, r0
{
 8001a3e:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d041      	beq.n	8001ac8 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a44:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001a48:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a4e:	b91b      	cbnz	r3, 8001a58 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001a50:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001a54:	f003 f884 	bl	8004b60 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001a60:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a62:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001a66:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001a6a:	bf08      	it	eq
 8001a6c:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001a6e:	f001 fd2d 	bl	80034cc <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	466d      	mov	r5, sp
 8001a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a84:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a88:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a8a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f001 fcd6 	bl	8003440 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a94:	f856 0b10 	ldr.w	r0, [r6], #16
 8001a98:	2101      	movs	r1, #1
 8001a9a:	f001 fd1d 	bl	80034d8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aa0:	466d      	mov	r5, sp
 8001aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f001 fdcd 	bl	8003654 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
}
 8001ac2:	b00a      	add	sp, #40	; 0x28
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001ac8:	2001      	movs	r0, #1
 8001aca:	e7fa      	b.n	8001ac2 <HAL_HCD_Init+0x8a>

08001acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ace:	2428      	movs	r4, #40	; 0x28
 8001ad0:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001ad4:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001ad8:	9e06      	ldr	r6, [sp, #24]
 8001ada:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ade:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ae2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001ae6:	b96f      	cbnz	r7, 8001b04 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ae8:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001aea:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001af0:	d02b      	beq.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x7e>
 8001af2:	42bb      	cmp	r3, r7
 8001af4:	d029      	beq.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x7e>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d131      	bne.n	8001b5e <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afa:	2328      	movs	r3, #40	; 0x28
 8001afc:	fb03 0301 	mla	r3, r3, r1, r0
 8001b00:	2200      	movs	r2, #0
 8001b02:	e02a      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b04:	f04f 0e02 	mov.w	lr, #2
 8001b08:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d826      	bhi.n	8001b5e <HAL_HCD_HC_SubmitRequest+0x92>
 8001b10:	a401      	add	r4, pc, #4	; (adr r4, 8001b18 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001b12:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001afb 	.word	0x08001afb
 8001b20:	08001b4b 	.word	0x08001b4b
 8001b24:	08001b4b 	.word	0x08001b4b
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b28:	2f01      	cmp	r7, #1
 8001b2a:	d118      	bne.n	8001b5e <HAL_HCD_HC_SubmitRequest+0x92>
 8001b2c:	b9ba      	cbnz	r2, 8001b5e <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001b2e:	b925      	cbnz	r5, 8001b3a <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b30:	2328      	movs	r3, #40	; 0x28
 8001b32:	fb03 0301 	mla	r3, r3, r1, r0
 8001b36:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	fb03 0301 	mla	r3, r3, r1, r0
 8001b40:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b44:	b14a      	cbz	r2, 8001b5a <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b46:	2202      	movs	r2, #2
 8001b48:	e007      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x8e>
 8001b4a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001b50:	b9d2      	cbnz	r2, 8001b88 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b52:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001b56:	2c00      	cmp	r4, #0
 8001b58:	d1f5      	bne.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b5e:	2428      	movs	r4, #40	; 0x28
 8001b60:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b64:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b66:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b6a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b6c:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001b6e:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b74:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b7a:	3138      	adds	r1, #56	; 0x38
 8001b7c:	7c02      	ldrb	r2, [r0, #16]
 8001b7e:	6800      	ldr	r0, [r0, #0]
}
 8001b80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b84:	f001 bed4 	b.w	8003930 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b88:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001b8c:	e7da      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x78>
 8001b8e:	bf00      	nop

08001b90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b94:	6806      	ldr	r6, [r0, #0]
{
 8001b96:	b087      	sub	sp, #28
 8001b98:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f001 fcfc 	bl	8003598 <USB_GetMode>
 8001ba0:	2801      	cmp	r0, #1
 8001ba2:	f040 80b4 	bne.w	8001d0e <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	f001 fcf2 	bl	8003590 <USB_ReadInterrupts>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	f000 80ae 	beq.w	8001d0e <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	f001 fcec 	bl	8003590 <USB_ReadInterrupts>
 8001bb8:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bba:	bf48      	it	mi
 8001bbc:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bbe:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bc0:	bf44      	itt	mi
 8001bc2:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001bc6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bc8:	f001 fce2 	bl	8003590 <USB_ReadInterrupts>
 8001bcc:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bce:	bf48      	it	mi
 8001bd0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bd2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bd4:	bf44      	itt	mi
 8001bd6:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001bda:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bdc:	f001 fcd8 	bl	8003590 <USB_ReadInterrupts>
 8001be0:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001be2:	bf48      	it	mi
 8001be4:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001be6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001be8:	bf44      	itt	mi
 8001bea:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001bee:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bf0:	f001 fcce 	bl	8003590 <USB_ReadInterrupts>
 8001bf4:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bf6:	bf48      	it	mi
 8001bf8:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bfa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bfc:	bf44      	itt	mi
 8001bfe:	2202      	movmi	r2, #2
 8001c00:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c02:	f001 fcc5 	bl	8003590 <USB_ReadInterrupts>
 8001c06:	0082      	lsls	r2, r0, #2
 8001c08:	d510      	bpl.n	8001c2c <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c0a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001c0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c12:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f002 fff2 	bl	8004c00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	f001 fcbe 	bl	80035a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	f001 fcaf 	bl	8003590 <USB_ReadInterrupts>
 8001c32:	01c3      	lsls	r3, r0, #7
 8001c34:	d542      	bpl.n	8001cbc <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c36:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c38:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001c3c:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001c3e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001c42:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c44:	9b05      	ldr	r3, [sp, #20]
 8001c46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c4a:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c4c:	9b04      	ldr	r3, [sp, #16]
 8001c4e:	079f      	lsls	r7, r3, #30
 8001c50:	d50d      	bpl.n	8001c6e <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c52:	9b04      	ldr	r3, [sp, #16]
 8001c54:	07d8      	lsls	r0, r3, #31
 8001c56:	d506      	bpl.n	8001c66 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001c58:	69ab      	ldr	r3, [r5, #24]
 8001c5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001c5e:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c60:	4620      	mov	r0, r4
 8001c62:	f002 ffc9 	bl	8004bf8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001c66:	9b05      	ldr	r3, [sp, #20]
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c6e:	9b04      	ldr	r3, [sp, #16]
 8001c70:	0719      	lsls	r1, r3, #28
 8001c72:	d519      	bpl.n	8001ca8 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c74:	9b05      	ldr	r3, [sp, #20]
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c7c:	9b04      	ldr	r3, [sp, #16]
 8001c7e:	075a      	lsls	r2, r3, #29
 8001c80:	d550      	bpl.n	8001d24 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c82:	69a1      	ldr	r1, [r4, #24]
 8001c84:	2902      	cmp	r1, #2
 8001c86:	d145      	bne.n	8001d14 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c88:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c8a:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001c90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c94:	bf18      	it	ne
 8001c96:	2101      	movne	r1, #1
 8001c98:	f001 fc82 	bl	80035a0 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f002 ffb4 	bl	8004c0a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f002 ffa8 	bl	8004bf8 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ca8:	9b04      	ldr	r3, [sp, #16]
 8001caa:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001cac:	bf42      	ittt	mi
 8001cae:	9b05      	ldrmi	r3, [sp, #20]
 8001cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb4:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001cb6:	9b05      	ldr	r3, [sp, #20]
 8001cb8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	f001 fc67 	bl	8003590 <USB_ReadInterrupts>
 8001cc2:	0707      	lsls	r7, r0, #28
 8001cc4:	d505      	bpl.n	8001cd2 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f002 ff92 	bl	8004bf0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cd2:	6820      	ldr	r0, [r4, #0]
 8001cd4:	f001 fc5c 	bl	8003590 <USB_ReadInterrupts>
 8001cd8:	0185      	lsls	r5, r0, #6
 8001cda:	d512      	bpl.n	8001d02 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	f001 fdbe 	bl	800385e <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ce2:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ce6:	9001      	str	r0, [sp, #4]
 8001ce8:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cec:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cee:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001cf2:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	459a      	cmp	sl, r3
 8001cf8:	d323      	bcc.n	8001d42 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d02:	6820      	ldr	r0, [r4, #0]
 8001d04:	f001 fc44 	bl	8003590 <USB_ReadInterrupts>
 8001d08:	06c3      	lsls	r3, r0, #27
 8001d0a:	f100 8220 	bmi.w	800214e <HAL_HCD_IRQHandler+0x5be>
}
 8001d0e:	b007      	add	sp, #28
 8001d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001d14:	68e3      	ldr	r3, [r4, #12]
 8001d16:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001d18:	bf04      	itt	eq
 8001d1a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001d1e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001d22:	e7bb      	b.n	8001c9c <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f002 ff74 	bl	8004c12 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d2a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d2e:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d34:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d38:	6993      	ldr	r3, [r2, #24]
 8001d3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	e7b2      	b.n	8001ca8 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d42:	9a01      	ldr	r2, [sp, #4]
 8001d44:	f00a 030f 	and.w	r3, sl, #15
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	07d8      	lsls	r0, r3, #31
 8001d4e:	f140 808a 	bpl.w	8001e66 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d52:	f8d8 3000 	ldr.w	r3, [r8]
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001d5c:	fa5f f58a 	uxtb.w	r5, sl
 8001d60:	f000 8104 	beq.w	8001f6c <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d64:	016a      	lsls	r2, r5, #5
 8001d66:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001d6a:	18d6      	adds	r6, r2, r3
 8001d6c:	68b1      	ldr	r1, [r6, #8]
 8001d6e:	0749      	lsls	r1, r1, #29
 8001d70:	d513      	bpl.n	8001d9a <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d72:	2104      	movs	r1, #4
 8001d74:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d76:	68f1      	ldr	r1, [r6, #12]
 8001d78:	f041 0102 	orr.w	r1, r1, #2
 8001d7c:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d7e:	68b1      	ldr	r1, [r6, #8]
 8001d80:	0589      	lsls	r1, r1, #22
 8001d82:	d542      	bpl.n	8001e0a <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d84:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d86:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8e:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	f001 fd6a 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	e0c7      	b.n	8001f2a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d9a:	68b1      	ldr	r1, [r6, #8]
 8001d9c:	0689      	lsls	r1, r1, #26
 8001d9e:	d502      	bpl.n	8001da6 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da0:	2120      	movs	r1, #32
 8001da2:	60b1      	str	r1, [r6, #8]
 8001da4:	e7eb      	b.n	8001d7e <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001da6:	68b1      	ldr	r1, [r6, #8]
 8001da8:	0709      	lsls	r1, r1, #28
 8001daa:	d515      	bpl.n	8001dd8 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dac:	68f1      	ldr	r1, [r6, #12]
 8001dae:	9303      	str	r3, [sp, #12]
 8001db0:	f041 0102 	orr.w	r1, r1, #2
 8001db4:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001db6:	fb07 4105 	mla	r1, r7, r5, r4
 8001dba:	f04f 0e05 	mov.w	lr, #5
 8001dbe:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dca:	4629      	mov	r1, r5
 8001dcc:	9202      	str	r2, [sp, #8]
 8001dce:	f001 fd4b 	bl	8003868 <USB_HC_Halt>
 8001dd2:	9a02      	ldr	r2, [sp, #8]
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	e7d2      	b.n	8001d7e <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dd8:	68b1      	ldr	r1, [r6, #8]
 8001dda:	0549      	lsls	r1, r1, #21
 8001ddc:	d5cf      	bpl.n	8001d7e <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dde:	68f1      	ldr	r1, [r6, #12]
 8001de0:	9303      	str	r3, [sp, #12]
 8001de2:	f041 0102 	orr.w	r1, r1, #2
 8001de6:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de8:	4629      	mov	r1, r5
 8001dea:	9202      	str	r2, [sp, #8]
 8001dec:	f001 fd3c 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001df0:	2110      	movs	r1, #16
 8001df2:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001df4:	fb07 4105 	mla	r1, r7, r5, r4
 8001df8:	2008      	movs	r0, #8
 8001dfa:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	60b1      	str	r1, [r6, #8]
 8001e04:	9b03      	ldr	r3, [sp, #12]
 8001e06:	9a02      	ldr	r2, [sp, #8]
 8001e08:	e7b9      	b.n	8001d7e <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e0a:	68b1      	ldr	r1, [r6, #8]
 8001e0c:	07c8      	lsls	r0, r1, #31
 8001e0e:	d53d      	bpl.n	8001e8c <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001e10:	6921      	ldr	r1, [r4, #16]
 8001e12:	b149      	cbz	r1, 8001e28 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e14:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e18:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e1a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e1e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e22:	1a09      	subs	r1, r1, r0
 8001e24:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e28:	fb07 4e05 	mla	lr, r7, r5, r4
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e32:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e36:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e38:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8001e3c:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001e40:	d116      	bne.n	8001e70 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e42:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e44:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f001 fd0b 	bl	8003868 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e52:	2310      	movs	r3, #16
 8001e54:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e56:	fb07 4505 	mla	r5, r7, r5, r4
 8001e5a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e66:	f10a 0a01 	add.w	sl, sl, #1
 8001e6a:	f108 0820 	add.w	r8, r8, #32
 8001e6e:	e741      	b.n	8001cf4 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e70:	2903      	cmp	r1, #3
 8001e72:	d1f0      	bne.n	8001e56 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e74:	58d1      	ldr	r1, [r2, r3]
 8001e76:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001e7a:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e7c:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e80:	4602      	mov	r2, r0
 8001e82:	4629      	mov	r1, r5
 8001e84:	4620      	mov	r0, r4
 8001e86:	f002 febf 	bl	8004c08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e8a:	e7e4      	b.n	8001e56 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e8c:	68b1      	ldr	r1, [r6, #8]
 8001e8e:	0789      	lsls	r1, r1, #30
 8001e90:	d536      	bpl.n	8001f00 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e92:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e94:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e98:	f021 0102 	bic.w	r1, r1, #2
 8001e9c:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e9e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001ea2:	2901      	cmp	r1, #1
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001ea6:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eaa:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001eae:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eb2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f002 fea5 	bl	8004c08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ebe:	e7d2      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ec0:	2905      	cmp	r1, #5
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ec4:	2906      	cmp	r1, #6
 8001ec6:	d001      	beq.n	8001ecc <HAL_HCD_IRQHandler+0x33c>
 8001ec8:	2908      	cmp	r1, #8
 8001eca:	d114      	bne.n	8001ef6 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8001ecc:	fb07 4105 	mla	r1, r7, r5, r4
 8001ed0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001ed2:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001ed4:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001ed6:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed8:	bf83      	ittte	hi
 8001eda:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001edc:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ee0:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ee4:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ee8:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eea:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001eee:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ef2:	50d1      	str	r1, [r2, r3]
 8001ef4:	e7d9      	b.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ef6:	2903      	cmp	r1, #3
 8001ef8:	d1d7      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001efa:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001efe:	e7f3      	b.n	8001ee8 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f00:	68b1      	ldr	r1, [r6, #8]
 8001f02:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001f06:	d012      	beq.n	8001f2e <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f08:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f12:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8001f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f1e:	2206      	movs	r2, #6
 8001f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f24:	f001 fca0 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	60b3      	str	r3, [r6, #8]
 8001f2c:	e79b      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f2e:	68b3      	ldr	r3, [r6, #8]
 8001f30:	06da      	lsls	r2, r3, #27
 8001f32:	d598      	bpl.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f34:	fb07 4205 	mla	r2, r7, r5, r4
 8001f38:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d10a      	bne.n	8001f56 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f40:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f42:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f44:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f001 fc8b 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f52:	2310      	movs	r3, #16
 8001f54:	e7e9      	b.n	8001f2a <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f56:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001f5a:	d1fa      	bne.n	8001f52 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8001f5e:	6923      	ldr	r3, [r4, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f6      	bne.n	8001f52 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f64:	2303      	movs	r3, #3
 8001f66:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8001f6a:	e7ea      	b.n	8001f42 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f6c:	0169      	lsls	r1, r5, #5
 8001f6e:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001f72:	188e      	adds	r6, r1, r2
 8001f74:	68b3      	ldr	r3, [r6, #8]
 8001f76:	f013 0e04 	ands.w	lr, r3, #4
 8001f7a:	d006      	beq.n	8001f8a <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f80:	68f3      	ldr	r3, [r6, #12]
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	60f3      	str	r3, [r6, #12]
 8001f88:	e76d      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f8a:	68b3      	ldr	r3, [r6, #8]
 8001f8c:	f013 0320 	ands.w	r3, r3, #32
 8001f90:	d014      	beq.n	8001fbc <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f92:	2320      	movs	r3, #32
 8001f94:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001f96:	fb07 4305 	mla	r3, r7, r5, r4
 8001f9a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001f9e:	2a01      	cmp	r2, #1
 8001fa0:	f47f af61 	bne.w	8001e66 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fa4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001fa8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fac:	68f3      	ldr	r3, [r6, #12]
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f001 fc57 	bl	8003868 <USB_HC_Halt>
 8001fba:	e754      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fbc:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001fc0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001fc4:	d011      	beq.n	8001fea <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001fc6:	fb07 4205 	mla	r2, r7, r5, r4
 8001fca:	2104      	movs	r1, #4
 8001fcc:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd8:	68f3      	ldr	r3, [r6, #12]
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f001 fc41 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001fe6:	2340      	movs	r3, #64	; 0x40
 8001fe8:	e79f      	b.n	8001f2a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fea:	68b3      	ldr	r3, [r6, #8]
 8001fec:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001ff0:	d005      	beq.n	8001ffe <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff2:	68f3      	ldr	r3, [r6, #12]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	e6c8      	b.n	8001d90 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ffe:	68b3      	ldr	r3, [r6, #8]
 8002000:	07db      	lsls	r3, r3, #31
 8002002:	d511      	bpl.n	8002028 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002004:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002006:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800200a:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800200e:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002012:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002016:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002018:	f001 fc26 	bl	8003868 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 800201c:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800201e:	2201      	movs	r2, #1
 8002020:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8002026:	e71e      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002028:	68b3      	ldr	r3, [r6, #8]
 800202a:	071b      	lsls	r3, r3, #28
 800202c:	d50e      	bpl.n	800204c <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800202e:	2308      	movs	r3, #8
 8002030:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002032:	68f3      	ldr	r3, [r6, #12]
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	4629      	mov	r1, r5
 800203c:	f001 fc14 	bl	8003868 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002040:	fb07 4505 	mla	r5, r7, r5, r4
 8002044:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002046:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800204a:	e70c      	b.n	8001e66 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800204c:	68b3      	ldr	r3, [r6, #8]
 800204e:	06db      	lsls	r3, r3, #27
 8002050:	d515      	bpl.n	800207e <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002052:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8002056:	2203      	movs	r2, #3
 8002058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800205c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002060:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002064:	b92a      	cbnz	r2, 8002072 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002066:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800206a:	b912      	cbnz	r2, 8002072 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002072:	68f3      	ldr	r3, [r6, #12]
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	4629      	mov	r1, r5
 800207c:	e767      	b.n	8001f4e <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800207e:	68b3      	ldr	r3, [r6, #8]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	d50c      	bpl.n	800209e <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002084:	68f3      	ldr	r3, [r6, #12]
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208c:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 800208e:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002092:	f001 fbe9 	bl	8003868 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002096:	2306      	movs	r3, #6
 8002098:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800209c:	e744      	b.n	8001f28 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800209e:	68b3      	ldr	r3, [r6, #8]
 80020a0:	055b      	lsls	r3, r3, #21
 80020a2:	d50f      	bpl.n	80020c4 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a4:	68f3      	ldr	r3, [r6, #12]
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	4629      	mov	r1, r5
 80020ae:	f001 fbdb 	bl	8003868 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020b2:	2310      	movs	r3, #16
 80020b4:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020bc:	fb07 4505 	mla	r5, r7, r5, r4
 80020c0:	2308      	movs	r3, #8
 80020c2:	e7c0      	b.n	8002046 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020c4:	68b3      	ldr	r3, [r6, #8]
 80020c6:	0798      	lsls	r0, r3, #30
 80020c8:	f57f aecd 	bpl.w	8001e66 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020cc:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ce:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020d2:	f023 0302 	bic.w	r3, r3, #2
 80020d6:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020d8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10e      	bne.n	80020fe <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020e0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020e4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80020e8:	3b02      	subs	r3, #2
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f63f aedd 	bhi.w	8001eaa <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80020f0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 80020fc:	e6d5      	b.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d102      	bne.n	8002108 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002102:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8002106:	e6d0      	b.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002108:	2b04      	cmp	r3, #4
 800210a:	d0fa      	beq.n	8002102 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800210c:	2b05      	cmp	r3, #5
 800210e:	d102      	bne.n	8002116 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002110:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8002114:	e6c9      	b.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002116:	2b06      	cmp	r3, #6
 8002118:	d002      	beq.n	8002120 <HAL_HCD_IRQHandler+0x590>
 800211a:	2b08      	cmp	r3, #8
 800211c:	f47f aec5 	bne.w	8001eaa <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8002120:	fb07 4005 	mla	r0, r7, r5, r4
 8002124:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002126:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002128:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800212a:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800212c:	bf84      	itt	hi
 800212e:	2304      	movhi	r3, #4
 8002130:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002134:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002136:	bf88      	it	hi
 8002138:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800213c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002144:	bf98      	it	ls
 8002146:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800214a:	508b      	str	r3, [r1, r2]
 800214c:	e6ad      	b.n	8001eaa <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800214e:	6826      	ldr	r6, [r4, #0]
 8002150:	69b3      	ldr	r3, [r6, #24]
 8002152:	f023 0310 	bic.w	r3, r3, #16
 8002156:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8002158:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800215a:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800215e:	2a02      	cmp	r2, #2
 8002160:	d129      	bne.n	80021b6 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002162:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002166:	f1b8 0f00 	cmp.w	r8, #0
 800216a:	d024      	beq.n	80021b6 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800216c:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002170:	2728      	movs	r7, #40	; 0x28
 8002172:	fb07 4705 	mla	r7, r7, r5, r4
 8002176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002178:	b1e9      	cbz	r1, 80021b6 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800217a:	4642      	mov	r2, r8
 800217c:	4630      	mov	r0, r6
 800217e:	f001 f9f9 	bl	8003574 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002184:	4443      	add	r3, r8
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218a:	4443      	add	r3, r8
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800218e:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8002192:	016b      	lsls	r3, r5, #5
 8002194:	199a      	adds	r2, r3, r6
 8002196:	6911      	ldr	r1, [r2, #16]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_HCD_IRQHandler+0x634>)
 800219a:	400a      	ands	r2, r1
 800219c:	b15a      	cbz	r2, 80021b6 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800219e:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021a8:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80021aa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80021ae:	f083 0301 	eor.w	r3, r3, #1
 80021b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	6993      	ldr	r3, [r2, #24]
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	e5a5      	b.n	8001d0e <HAL_HCD_IRQHandler+0x17e>
 80021c2:	bf00      	nop
 80021c4:	1ff80000 	.word	0x1ff80000

080021c8 <HAL_HCD_Start>:
{
 80021c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80021ca:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80021ce:	2b01      	cmp	r3, #1
{
 80021d0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80021d2:	d00d      	beq.n	80021f0 <HAL_HCD_Start+0x28>
 80021d4:	2501      	movs	r5, #1
 80021d6:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021da:	6800      	ldr	r0, [r0, #0]
 80021dc:	f001 f970 	bl	80034c0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021e0:	4629      	mov	r1, r5
 80021e2:	6820      	ldr	r0, [r4, #0]
 80021e4:	f001 fa16 	bl	8003614 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80021f0:	2002      	movs	r0, #2
}
 80021f2:	bd38      	pop	{r3, r4, r5, pc}

080021f4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80021f4:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80021f8:	2b01      	cmp	r3, #1
{
 80021fa:	b510      	push	{r4, lr}
 80021fc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80021fe:	d009      	beq.n	8002214 <HAL_HCD_Stop+0x20>
 8002200:	2301      	movs	r3, #1
 8002202:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002206:	6800      	ldr	r0, [r0, #0]
 8002208:	f001 fc44 	bl	8003a94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800220c:	2000      	movs	r0, #0
 800220e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002212:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002214:	2002      	movs	r0, #2
}
 8002216:	bd10      	pop	{r4, pc}

08002218 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002218:	6800      	ldr	r0, [r0, #0]
 800221a:	f001 b9dd 	b.w	80035d8 <USB_ResetPort>

0800221e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800221e:	2328      	movs	r3, #40	; 0x28
 8002220:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002224:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002228:	4770      	bx	lr

0800222a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800222a:	2328      	movs	r3, #40	; 0x28
 800222c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002230:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002232:	4770      	bx	lr

08002234 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002234:	6800      	ldr	r0, [r0, #0]
 8002236:	f001 ba88 	b.w	800374a <USB_GetCurrentFrame>

0800223a <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800223a:	6800      	ldr	r0, [r0, #0]
 800223c:	f001 ba7a 	b.w	8003734 <USB_GetHostSpeed>

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002242:	4604      	mov	r4, r0
 8002244:	b908      	cbnz	r0, 800224a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002246:	2001      	movs	r0, #1
 8002248:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800224e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002252:	b91b      	cbnz	r3, 800225c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002254:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002258:	f7ff f84e 	bl	80012f8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800225c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800225e:	2324      	movs	r3, #36	; 0x24
 8002260:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800226c:	f000 fd0e 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002270:	6865      	ldr	r5, [r4, #4]
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_I2C_Init+0x138>)
 8002274:	429d      	cmp	r5, r3
 8002276:	d84d      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 8002278:	4b40      	ldr	r3, [pc, #256]	; (800237c <HAL_I2C_Init+0x13c>)
 800227a:	4298      	cmp	r0, r3
 800227c:	d9e3      	bls.n	8002246 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800227e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002280:	493f      	ldr	r1, [pc, #252]	; (8002380 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002284:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228c:	430b      	orrs	r3, r1
 800228e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002290:	6a13      	ldr	r3, [r2, #32]
 8002292:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002296:	3101      	adds	r1, #1
 8002298:	4319      	orrs	r1, r3
 800229a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	69d1      	ldr	r1, [r2, #28]
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_I2C_Init+0x138>)
 80022a0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80022a4:	429d      	cmp	r5, r3
 80022a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022aa:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80022ae:	d848      	bhi.n	8002342 <HAL_I2C_Init+0x102>
 80022b0:	006d      	lsls	r5, r5, #1
 80022b2:	fbb0 f0f5 	udiv	r0, r0, r5
 80022b6:	3001      	adds	r0, #1
 80022b8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80022bc:	2b04      	cmp	r3, #4
 80022be:	bf38      	it	cc
 80022c0:	2304      	movcc	r3, #4
 80022c2:	430b      	orrs	r3, r1
 80022c4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022c6:	6811      	ldr	r1, [r2, #0]
 80022c8:	6a20      	ldr	r0, [r4, #32]
 80022ca:	69e3      	ldr	r3, [r4, #28]
 80022cc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80022d0:	4303      	orrs	r3, r0
 80022d2:	430b      	orrs	r3, r1
 80022d4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d6:	6891      	ldr	r1, [r2, #8]
 80022d8:	68e0      	ldr	r0, [r4, #12]
 80022da:	6923      	ldr	r3, [r4, #16]
 80022dc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80022e0:	4303      	orrs	r3, r0
 80022e2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ea:	68d1      	ldr	r1, [r2, #12]
 80022ec:	69a0      	ldr	r0, [r4, #24]
 80022ee:	6963      	ldr	r3, [r4, #20]
 80022f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022f4:	4303      	orrs	r3, r0
 80022f6:	430b      	orrs	r3, r1
 80022f8:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002302:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002304:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002308:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800230c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8002312:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_I2C_Init+0x144>)
 8002316:	4298      	cmp	r0, r3
 8002318:	d995      	bls.n	8002246 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800231c:	4e18      	ldr	r6, [pc, #96]	; (8002380 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002320:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002328:	4333      	orrs	r3, r6
 800232a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232c:	6a13      	ldr	r3, [r2, #32]
 800232e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002332:	4371      	muls	r1, r6
 8002334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002338:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800233c:	fbb1 f1f6 	udiv	r1, r1, r6
 8002340:	e7a9      	b.n	8002296 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002342:	68a3      	ldr	r3, [r4, #8]
 8002344:	b953      	cbnz	r3, 800235c <HAL_I2C_Init+0x11c>
 8002346:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800234a:	fbb0 f0f3 	udiv	r0, r0, r3
 800234e:	1c43      	adds	r3, r0, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	b16b      	cbz	r3, 8002372 <HAL_I2C_Init+0x132>
 8002356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235a:	e7b2      	b.n	80022c2 <HAL_I2C_Init+0x82>
 800235c:	2319      	movs	r3, #25
 800235e:	436b      	muls	r3, r5
 8002360:	fbb0 f0f3 	udiv	r0, r0, r3
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	b113      	cbz	r3, 8002372 <HAL_I2C_Init+0x132>
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	e7a7      	b.n	80022c2 <HAL_I2C_Init+0x82>
 8002372:	2301      	movs	r3, #1
 8002374:	e7a5      	b.n	80022c2 <HAL_I2C_Init+0x82>
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	000f4240 	.word	0x000f4240
 8002384:	003d08ff 	.word	0x003d08ff

08002388 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800238a:	4604      	mov	r4, r0
 800238c:	2800      	cmp	r0, #0
 800238e:	d041      	beq.n	8002414 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002390:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002394:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002398:	b92b      	cbnz	r3, 80023a6 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800239a:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 800239c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023a0:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023a2:	f7fe ffe1 	bl	8001368 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023a6:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023a8:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80023aa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023ae:	69d3      	ldr	r3, [r2, #28]
 80023b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023ba:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80023bc:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023be:	428b      	cmp	r3, r1
 80023c0:	d031      	beq.n	8002426 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023c2:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023c4:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023c6:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80023c8:	bf0c      	ite	eq
 80023ca:	2510      	moveq	r5, #16
 80023cc:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80023ce:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023d0:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80023d2:	bf98      	it	ls
 80023d4:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80023d6:	f000 fd2f 	bl	8002e38 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80023da:	6923      	ldr	r3, [r4, #16]
 80023dc:	6961      	ldr	r1, [r4, #20]
 80023de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e2:	d11b      	bne.n	800241c <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023e4:	68e3      	ldr	r3, [r4, #12]
 80023e6:	220a      	movs	r2, #10
 80023e8:	b1b3      	cbz	r3, 8002418 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023ea:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023f2:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80023fa:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023fe:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002402:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002404:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002406:	1e99      	subs	r1, r3, #2
 8002408:	29fd      	cmp	r1, #253	; 0xfd
 800240a:	d90e      	bls.n	800242a <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800240c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800240e:	f043 0310 	orr.w	r3, r3, #16
 8002412:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002418:	00eb      	lsls	r3, r5, #3
 800241a:	e7e7      	b.n	80023ec <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800241c:	230a      	movs	r3, #10
 800241e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002422:	4343      	muls	r3, r0
 8002424:	e7e5      	b.n	80023f2 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8002426:	2200      	movs	r2, #0
 8002428:	e7ed      	b.n	8002406 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800242a:	4313      	orrs	r3, r2
 800242c:	6922      	ldr	r2, [r4, #16]
 800242e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002430:	6866      	ldr	r6, [r4, #4]
 8002432:	68e5      	ldr	r5, [r4, #12]
 8002434:	69a0      	ldr	r0, [r4, #24]
 8002436:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80024b4 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800243a:	4313      	orrs	r3, r2
 800243c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800243e:	68a3      	ldr	r3, [r4, #8]
 8002440:	69cf      	ldr	r7, [r1, #28]
 8002442:	ea46 0203 	orr.w	r2, r6, r3
 8002446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244a:	432a      	orrs	r2, r5
 800244c:	4302      	orrs	r2, r0
 800244e:	ea07 070e 	and.w	r7, r7, lr
 8002452:	433a      	orrs	r2, r7
 8002454:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002456:	6a22      	ldr	r2, [r4, #32]
 8002458:	2a01      	cmp	r2, #1
 800245a:	d11d      	bne.n	8002498 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_I2S_Init+0x120>)
 800245e:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002460:	4f12      	ldr	r7, [pc, #72]	; (80024ac <HAL_I2S_Init+0x124>)
 8002462:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <HAL_I2S_Init+0x128>)
 8002464:	42b9      	cmp	r1, r7
 8002466:	bf18      	it	ne
 8002468:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800246c:	432b      	orrs	r3, r5
 800246e:	69d1      	ldr	r1, [r2, #28]
 8002470:	ea01 010e 	and.w	r1, r1, lr
 8002474:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002476:	2102      	movs	r1, #2
 8002478:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800247a:	69d7      	ldr	r7, [r2, #28]
 800247c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002480:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8002482:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8002486:	ea43 0307 	orr.w	r3, r3, r7
 800248a:	bf0c      	ite	eq
 800248c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8002490:	2100      	movne	r1, #0
 8002492:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002494:	430b      	orrs	r3, r1
 8002496:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002498:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800249a:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800249c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800249e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80024a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a4:	080024bf 	.word	0x080024bf
 80024a8:	080025bd 	.word	0x080025bd
 80024ac:	40003800 	.word	0x40003800
 80024b0:	40003400 	.word	0x40003400
 80024b4:	fffff040 	.word	0xfffff040

080024b8 <HAL_I2S_TxCpltCallback>:
 80024b8:	4770      	bx	lr

080024ba <HAL_I2S_RxCpltCallback>:
 80024ba:	4770      	bx	lr

080024bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80024bc:	4770      	bx	lr

080024be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024c0:	6803      	ldr	r3, [r0, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024c6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80024ca:	2a04      	cmp	r2, #4
{
 80024cc:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024ce:	d136      	bne.n	800253e <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80024d0:	9a01      	ldr	r2, [sp, #4]
 80024d2:	07d1      	lsls	r1, r2, #31
 80024d4:	d517      	bpl.n	8002506 <I2S_IRQHandler+0x48>
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	0652      	lsls	r2, r2, #25
 80024da:	d514      	bpl.n	8002506 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80024de:	68d9      	ldr	r1, [r3, #12]
 80024e0:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80024e4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80024e6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80024e8:	3a01      	subs	r2, #1
 80024ea:	b292      	uxth	r2, r2
 80024ec:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80024ee:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80024f0:	b292      	uxth	r2, r2
 80024f2:	b942      	cbnz	r2, 8002506 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024fa:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002502:	f7ff ffda 	bl	80024ba <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002506:	9b01      	ldr	r3, [sp, #4]
 8002508:	0659      	lsls	r1, r3, #25
 800250a:	d518      	bpl.n	800253e <I2S_IRQHandler+0x80>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	0692      	lsls	r2, r2, #26
 8002512:	d514      	bpl.n	800253e <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800251a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800251c:	2200      	movs	r2, #0
 800251e:	9202      	str	r2, [sp, #8]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	9202      	str	r2, [sp, #8]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800252a:	2301      	movs	r3, #1
 800252c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002532:	f043 0302 	orr.w	r3, r3, #2
 8002536:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff ffbf 	bl	80024bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800253e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002542:	2b03      	cmp	r3, #3
 8002544:	d136      	bne.n	80025b4 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002546:	9b01      	ldr	r3, [sp, #4]
 8002548:	079b      	lsls	r3, r3, #30
 800254a:	d519      	bpl.n	8002580 <I2S_IRQHandler+0xc2>
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	6853      	ldr	r3, [r2, #4]
 8002550:	0618      	lsls	r0, r3, #24
 8002552:	d515      	bpl.n	8002580 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002556:	f833 1b02 	ldrh.w	r1, [r3], #2
 800255a:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 800255c:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800255e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002560:	3b01      	subs	r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	b94b      	cbnz	r3, 8002580 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800256c:	6853      	ldr	r3, [r2, #4]
 800256e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002572:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002574:	2301      	movs	r3, #1
 8002576:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff ff9c 	bl	80024b8 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	0719      	lsls	r1, r3, #28
 8002584:	d516      	bpl.n	80025b4 <I2S_IRQHandler+0xf6>
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	0692      	lsls	r2, r2, #26
 800258c:	d512      	bpl.n	80025b4 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002594:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002596:	2200      	movs	r2, #0
 8002598:	9203      	str	r2, [sp, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	9303      	str	r3, [sp, #12]
 800259e:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff ff84 	bl	80024bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025b4:	b004      	add	sp, #16
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80025bc:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025be:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80025c0:	498b      	ldr	r1, [pc, #556]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025c2:	6893      	ldr	r3, [r2, #8]
{
 80025c4:	b086      	sub	sp, #24
 80025c6:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025c8:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80025ca:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80025cc:	428a      	cmp	r2, r1
 80025ce:	bf18      	it	ne
 80025d0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80025d8:	6851      	ldr	r1, [r2, #4]
 80025da:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025e0:	6841      	ldr	r1, [r0, #4]
 80025e2:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80025e6:	f040 8090 	bne.w	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025ea:	9b00      	ldr	r3, [sp, #0]
 80025ec:	0799      	lsls	r1, r3, #30
 80025ee:	d51a      	bpl.n	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	d517      	bpl.n	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80025f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025f8:	1c99      	adds	r1, r3, #2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	6241      	str	r1, [r0, #36]	; 0x24
 80025fe:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002600:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002602:	3b01      	subs	r3, #1
 8002604:	b29b      	uxth	r3, r3
 8002606:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002608:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	b95b      	cbnz	r3, 8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002614:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002616:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002618:	b29b      	uxth	r3, r3
 800261a:	b923      	cbnz	r3, 8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800261c:	2301      	movs	r3, #1
 800261e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002622:	f7ff ffc9 	bl	80025b8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002626:	9b01      	ldr	r3, [sp, #4]
 8002628:	07d8      	lsls	r0, r3, #31
 800262a:	d522      	bpl.n	8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	0659      	lsls	r1, r3, #25
 8002630:	d51f      	bpl.n	8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002632:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	496e      	ldr	r1, [pc, #440]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8002638:	1c93      	adds	r3, r2, #2
 800263a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800263e:	4288      	cmp	r0, r1
 8002640:	bf18      	it	ne
 8002642:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 800264a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800264c:	3a01      	subs	r2, #1
 800264e:	b292      	uxth	r2, r2
 8002650:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002652:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002654:	b292      	uxth	r2, r2
 8002656:	b962      	cbnz	r2, 8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800265e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002660:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	b92b      	cbnz	r3, 8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002666:	2301      	movs	r3, #1
 8002668:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800266c:	4620      	mov	r0, r4
 800266e:	f7ff ffa3 	bl	80025b8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002672:	9b01      	ldr	r3, [sp, #4]
 8002674:	065a      	lsls	r2, r3, #25
 8002676:	d522      	bpl.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002678:	9b03      	ldr	r3, [sp, #12]
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	d51f      	bpl.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	495b      	ldr	r1, [pc, #364]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8002682:	4a5c      	ldr	r2, [pc, #368]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8002684:	428b      	cmp	r3, r1
 8002686:	bf18      	it	ne
 8002688:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 800268c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800268e:	6851      	ldr	r1, [r2, #4]
 8002690:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002694:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800269c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800269e:	2200      	movs	r2, #0
 80026a0:	9204      	str	r2, [sp, #16]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	9204      	str	r2, [sp, #16]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80026ba:	f7ff feff 	bl	80024bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026be:	9b00      	ldr	r3, [sp, #0]
 80026c0:	0718      	lsls	r0, r3, #28
 80026c2:	d520      	bpl.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 80026c4:	9b02      	ldr	r3, [sp, #8]
 80026c6:	0699      	lsls	r1, r3, #26
 80026c8:	d51d      	bpl.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026ca:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026cc:	4948      	ldr	r1, [pc, #288]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026d4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026d6:	4a47      	ldr	r2, [pc, #284]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80026d8:	428b      	cmp	r3, r1
 80026da:	bf18      	it	ne
 80026dc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80026e0:	6851      	ldr	r1, [r2, #4]
 80026e2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80026e6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026e8:	2200      	movs	r2, #0
 80026ea:	9205      	str	r2, [sp, #20]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	9305      	str	r3, [sp, #20]
 80026f0:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff fedb 	bl	80024bc <HAL_I2S_ErrorCallback>
}
 8002706:	b006      	add	sp, #24
 8002708:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	0792      	lsls	r2, r2, #30
 800270e:	d51a      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8002710:	9a03      	ldr	r2, [sp, #12]
 8002712:	0611      	lsls	r1, r2, #24
 8002714:	d517      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002716:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002718:	1c91      	adds	r1, r2, #2
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	6241      	str	r1, [r0, #36]	; 0x24
 800271e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002720:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002722:	3a01      	subs	r2, #1
 8002724:	b292      	uxth	r2, r2
 8002726:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002728:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800272a:	b292      	uxth	r2, r2
 800272c:	b95a      	cbnz	r2, 8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002734:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002736:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002738:	b29b      	uxth	r3, r3
 800273a:	b923      	cbnz	r3, 8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 800273c:	2301      	movs	r3, #1
 800273e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002742:	f7ff ff39 	bl	80025b8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002746:	9b00      	ldr	r3, [sp, #0]
 8002748:	07da      	lsls	r2, r3, #31
 800274a:	d51c      	bpl.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800274c:	9b02      	ldr	r3, [sp, #8]
 800274e:	065b      	lsls	r3, r3, #25
 8002750:	d519      	bpl.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	68d1      	ldr	r1, [r2, #12]
 800275c:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800275e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002760:	3b01      	subs	r3, #1
 8002762:	b29b      	uxth	r3, r3
 8002764:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002766:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002768:	b29b      	uxth	r3, r3
 800276a:	b963      	cbnz	r3, 8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800276c:	6853      	ldr	r3, [r2, #4]
 800276e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002772:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002774:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	b92b      	cbnz	r3, 8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 800277a:	2301      	movs	r3, #1
 800277c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff19 	bl	80025b8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002786:	9b00      	ldr	r3, [sp, #0]
 8002788:	0658      	lsls	r0, r3, #25
 800278a:	d51b      	bpl.n	80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800278c:	9b02      	ldr	r3, [sp, #8]
 800278e:	0699      	lsls	r1, r3, #26
 8002790:	d518      	bpl.n	80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002792:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002796:	6853      	ldr	r3, [r2, #4]
 8002798:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800279c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80027a0:	428a      	cmp	r2, r1
 80027a2:	bf18      	it	ne
 80027a4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80027a8:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027b0:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80027c0:	f7ff fe7c 	bl	80024bc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027c4:	9b01      	ldr	r3, [sp, #4]
 80027c6:	071a      	lsls	r2, r3, #28
 80027c8:	d59d      	bpl.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 80027ca:	9b03      	ldr	r3, [sp, #12]
 80027cc:	069b      	lsls	r3, r3, #26
 80027ce:	d59a      	bpl.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027d0:	6822      	ldr	r2, [r4, #0]
 80027d2:	4907      	ldr	r1, [pc, #28]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80027d6:	428a      	cmp	r2, r1
 80027d8:	bf18      	it	ne
 80027da:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80027e4:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027e6:	6853      	ldr	r3, [r2, #4]
 80027e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027ec:	6053      	str	r3, [r2, #4]
 80027ee:	e780      	b.n	80026f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 80027f0:	40003800 	.word	0x40003800
 80027f4:	40003400 	.word	0x40003400

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027fc:	4604      	mov	r4, r0
 80027fe:	b918      	cbnz	r0, 8002808 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002800:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002802:	b002      	add	sp, #8
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002808:	6803      	ldr	r3, [r0, #0]
 800280a:	07dd      	lsls	r5, r3, #31
 800280c:	d410      	bmi.n	8002830 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	0798      	lsls	r0, r3, #30
 8002812:	d458      	bmi.n	80028c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	071a      	lsls	r2, r3, #28
 8002818:	f100 809a 	bmi.w	8002950 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	075b      	lsls	r3, r3, #29
 8002820:	f100 80b8 	bmi.w	8002994 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	69a2      	ldr	r2, [r4, #24]
 8002826:	2a00      	cmp	r2, #0
 8002828:	f040 8119 	bne.w	8002a5e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e7e8      	b.n	8002802 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002830:	4ba6      	ldr	r3, [pc, #664]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	f002 020c 	and.w	r2, r2, #12
 8002838:	2a04      	cmp	r2, #4
 800283a:	d007      	beq.n	800284c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002842:	2a08      	cmp	r2, #8
 8002844:	d10a      	bne.n	800285c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0259      	lsls	r1, r3, #9
 800284a:	d507      	bpl.n	800285c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b9f      	ldr	r3, [pc, #636]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	039a      	lsls	r2, r3, #14
 8002852:	d5dc      	bpl.n	800280e <HAL_RCC_OscConfig+0x16>
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1d9      	bne.n	800280e <HAL_RCC_OscConfig+0x16>
 800285a:	e7d1      	b.n	8002800 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	6863      	ldr	r3, [r4, #4]
 800285e:	4d9b      	ldr	r5, [pc, #620]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d111      	bne.n	800288a <HAL_RCC_OscConfig+0x92>
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800286e:	f7fe ff3f 	bl	80016f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4d96      	ldr	r5, [pc, #600]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002874:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	039b      	lsls	r3, r3, #14
 800287a:	d4c8      	bmi.n	800280e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe ff38 	bl	80016f0 <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	2864      	cmp	r0, #100	; 0x64
 8002884:	d9f7      	bls.n	8002876 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002886:	2003      	movs	r0, #3
 8002888:	e7bb      	b.n	8002802 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288e:	d104      	bne.n	800289a <HAL_RCC_OscConfig+0xa2>
 8002890:	682b      	ldr	r3, [r5, #0]
 8002892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002896:	602b      	str	r3, [r5, #0]
 8002898:	e7e5      	b.n	8002866 <HAL_RCC_OscConfig+0x6e>
 800289a:	682a      	ldr	r2, [r5, #0]
 800289c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028a0:	602a      	str	r2, [r5, #0]
 80028a2:	682a      	ldr	r2, [r5, #0]
 80028a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1df      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80028ae:	f7fe ff1f 	bl	80016f0 <HAL_GetTick>
 80028b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	039f      	lsls	r7, r3, #14
 80028b8:	d5a9      	bpl.n	800280e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ba:	f7fe ff19 	bl	80016f0 <HAL_GetTick>
 80028be:	1b80      	subs	r0, r0, r6
 80028c0:	2864      	cmp	r0, #100	; 0x64
 80028c2:	d9f7      	bls.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 80028c4:	e7df      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	f012 0f0c 	tst.w	r2, #12
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d6:	2a08      	cmp	r2, #8
 80028d8:	d111      	bne.n	80028fe <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	025e      	lsls	r6, r3, #9
 80028de:	d40e      	bmi.n	80028fe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e0:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	0795      	lsls	r5, r2, #30
 80028e6:	d502      	bpl.n	80028ee <HAL_RCC_OscConfig+0xf6>
 80028e8:	68e2      	ldr	r2, [r4, #12]
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d188      	bne.n	8002800 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	6921      	ldr	r1, [r4, #16]
 80028f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80028f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80028fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fc:	e78a      	b.n	8002814 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fe:	68e2      	ldr	r2, [r4, #12]
 8002900:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x2d8>)
 8002902:	b1b2      	cbz	r2, 8002932 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002908:	f7fe fef2 	bl	80016f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	4d6f      	ldr	r5, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800290e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	0798      	lsls	r0, r3, #30
 8002914:	d507      	bpl.n	8002926 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800291e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002922:	602b      	str	r3, [r5, #0]
 8002924:	e776      	b.n	8002814 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fee3 	bl	80016f0 <HAL_GetTick>
 800292a:	1b80      	subs	r0, r0, r6
 800292c:	2802      	cmp	r0, #2
 800292e:	d9ef      	bls.n	8002910 <HAL_RCC_OscConfig+0x118>
 8002930:	e7a9      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002932:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002934:	f7fe fedc 	bl	80016f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002938:	4d64      	ldr	r5, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800293a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	0799      	lsls	r1, r3, #30
 8002940:	f57f af68 	bpl.w	8002814 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fed4 	bl	80016f0 <HAL_GetTick>
 8002948:	1b80      	subs	r0, r0, r6
 800294a:	2802      	cmp	r0, #2
 800294c:	d9f6      	bls.n	800293c <HAL_RCC_OscConfig+0x144>
 800294e:	e79a      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002950:	6962      	ldr	r2, [r4, #20]
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x2dc>)
 8002954:	b17a      	cbz	r2, 8002976 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800295a:	f7fe fec9 	bl	80016f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4d5b      	ldr	r5, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002960:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002964:	079f      	lsls	r7, r3, #30
 8002966:	f53f af59 	bmi.w	800281c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fec1 	bl	80016f0 <HAL_GetTick>
 800296e:	1b80      	subs	r0, r0, r6
 8002970:	2802      	cmp	r0, #2
 8002972:	d9f6      	bls.n	8002962 <HAL_RCC_OscConfig+0x16a>
 8002974:	e787      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002976:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002978:	f7fe feba 	bl	80016f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4d53      	ldr	r5, [pc, #332]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800297e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002982:	0798      	lsls	r0, r3, #30
 8002984:	f57f af4a 	bpl.w	800281c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe feb2 	bl	80016f0 <HAL_GetTick>
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	2802      	cmp	r0, #2
 8002990:	d9f6      	bls.n	8002980 <HAL_RCC_OscConfig+0x188>
 8002992:	e778      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002994:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 8002996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002998:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800299c:	d128      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	9201      	str	r2, [sp, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4d48      	ldr	r5, [pc, #288]	; (8002ad8 <HAL_RCC_OscConfig+0x2e0>)
 80029b6:	682b      	ldr	r3, [r5, #0]
 80029b8:	05d9      	lsls	r1, r3, #23
 80029ba:	d51b      	bpl.n	80029f4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	68a3      	ldr	r3, [r4, #8]
 80029be:	4d43      	ldr	r5, [pc, #268]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d127      	bne.n	8002a14 <HAL_RCC_OscConfig+0x21c>
 80029c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80029cc:	f7fe fe90 	bl	80016f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	4d3e      	ldr	r5, [pc, #248]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80029d2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029da:	079b      	lsls	r3, r3, #30
 80029dc:	d539      	bpl.n	8002a52 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80029de:	2e00      	cmp	r6, #0
 80029e0:	f43f af20 	beq.w	8002824 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 80029e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	e719      	b.n	8002824 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80029f0:	2600      	movs	r6, #0
 80029f2:	e7df      	b.n	80029b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029fc:	f7fe fe78 	bl	80016f0 <HAL_GetTick>
 8002a00:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	05da      	lsls	r2, r3, #23
 8002a06:	d4d9      	bmi.n	80029bc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a08:	f7fe fe72 	bl	80016f0 <HAL_GetTick>
 8002a0c:	1bc0      	subs	r0, r0, r7
 8002a0e:	2802      	cmp	r0, #2
 8002a10:	d9f7      	bls.n	8002a02 <HAL_RCC_OscConfig+0x20a>
 8002a12:	e738      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d104      	bne.n	8002a22 <HAL_RCC_OscConfig+0x22a>
 8002a18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	672b      	str	r3, [r5, #112]	; 0x70
 8002a20:	e7d0      	b.n	80029c4 <HAL_RCC_OscConfig+0x1cc>
 8002a22:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	672a      	str	r2, [r5, #112]	; 0x70
 8002a2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002a2c:	f022 0204 	bic.w	r2, r2, #4
 8002a30:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ca      	bne.n	80029cc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe5b 	bl	80016f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a3e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a42:	0798      	lsls	r0, r3, #30
 8002a44:	d5cb      	bpl.n	80029de <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fe53 	bl	80016f0 <HAL_GetTick>
 8002a4a:	1bc0      	subs	r0, r0, r7
 8002a4c:	4540      	cmp	r0, r8
 8002a4e:	d9f7      	bls.n	8002a40 <HAL_RCC_OscConfig+0x248>
 8002a50:	e719      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fe4d 	bl	80016f0 <HAL_GetTick>
 8002a56:	1bc0      	subs	r0, r0, r7
 8002a58:	4540      	cmp	r0, r8
 8002a5a:	d9bd      	bls.n	80029d8 <HAL_RCC_OscConfig+0x1e0>
 8002a5c:	e713      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5e:	4d1b      	ldr	r5, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
 8002a60:	68ab      	ldr	r3, [r5, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	f43f aeca 	beq.w	8002800 <HAL_RCC_OscConfig+0x8>
 8002a6c:	4e1b      	ldr	r6, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x2e4>)
 8002a6e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002a72:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a74:	d134      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002a76:	f7fe fe3b 	bl	80016f0 <HAL_GetTick>
 8002a7a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	0199      	lsls	r1, r3, #6
 8002a80:	d41e      	bmi.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a82:	6a22      	ldr	r2, [r4, #32]
 8002a84:	69e3      	ldr	r3, [r4, #28]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aa0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fe23 	bl	80016f0 <HAL_GetTick>
 8002aaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	019a      	lsls	r2, r3, #6
 8002ab0:	f53f aebc 	bmi.w	800282c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fe1c 	bl	80016f0 <HAL_GetTick>
 8002ab8:	1b40      	subs	r0, r0, r5
 8002aba:	2802      	cmp	r0, #2
 8002abc:	d9f6      	bls.n	8002aac <HAL_RCC_OscConfig+0x2b4>
 8002abe:	e6e2      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fe16 	bl	80016f0 <HAL_GetTick>
 8002ac4:	1bc0      	subs	r0, r0, r7
 8002ac6:	2802      	cmp	r0, #2
 8002ac8:	d9d8      	bls.n	8002a7c <HAL_RCC_OscConfig+0x284>
 8002aca:	e6dc      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fe06 	bl	80016f0 <HAL_GetTick>
 8002ae4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	682b      	ldr	r3, [r5, #0]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	f57f ae9f 	bpl.w	800282c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe fdff 	bl	80016f0 <HAL_GetTick>
 8002af2:	1b00      	subs	r0, r0, r4
 8002af4:	2802      	cmp	r0, #2
 8002af6:	d9f6      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x2ee>
 8002af8:	e6c5      	b.n	8002886 <HAL_RCC_OscConfig+0x8e>
 8002afa:	bf00      	nop

08002afc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afc:	4913      	ldr	r1, [pc, #76]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002afe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b00:	688b      	ldr	r3, [r1, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x16>
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0e:	4810      	ldr	r0, [pc, #64]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b10:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x58>)
 8002b14:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b18:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	bf14      	ite	ne
 8002b22:	480c      	ldrne	r0, [pc, #48]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b24:	480a      	ldreq	r0, [pc, #40]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002b2a:	bf18      	it	ne
 8002b2c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	fba1 0100 	umull	r0, r1, r1, r0
 8002b36:	f7fe f843 	bl	8000bc0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x50>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b4a:	bd08      	pop	{r3, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	007a1200 	.word	0x007a1200

08002b58 <HAL_RCC_ClockConfig>:
{
 8002b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	4604      	mov	r4, r0
 8002b60:	b910      	cbnz	r0, 8002b68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_ClockConfig+0x124>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f002 020f 	and.w	r2, r2, #15
 8002b70:	428a      	cmp	r2, r1
 8002b72:	d328      	bcc.n	8002bc6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	6821      	ldr	r1, [r4, #0]
 8002b76:	078f      	lsls	r7, r1, #30
 8002b78:	d42d      	bmi.n	8002bd6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	07c8      	lsls	r0, r1, #31
 8002b7c:	d440      	bmi.n	8002c00 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_ClockConfig+0x124>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f002 020f 	and.w	r2, r2, #15
 8002b86:	4295      	cmp	r5, r2
 8002b88:	d366      	bcc.n	8002c58 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	0751      	lsls	r1, r2, #29
 8002b8e:	d46c      	bmi.n	8002c6a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	0713      	lsls	r3, r2, #28
 8002b92:	d507      	bpl.n	8002ba4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b94:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
 8002b96:	6921      	ldr	r1, [r4, #16]
 8002b98:	6893      	ldr	r3, [r2, #8]
 8002b9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ba2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba4:	f7ff ffaa 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
 8002baa:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <HAL_RCC_ClockConfig+0x12c>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	40d8      	lsrs	r0, r3
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x130>)
 8002bb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fcb6 	bl	800152c <HAL_InitTick>
  return HAL_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	4299      	cmp	r1, r3
 8002bd2:	d1c6      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xa>
 8002bd4:	e7ce      	b.n	8002b74 <HAL_RCC_ClockConfig+0x1c>
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	bf1e      	ittt	ne
 8002bde:	689a      	ldrne	r2, [r3, #8]
 8002be0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002be4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	bf42      	ittt	mi
 8002bea:	689a      	ldrmi	r2, [r3, #8]
 8002bec:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002bf0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68a0      	ldr	r0, [r4, #8]
 8002bf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002bfa:	4302      	orrs	r2, r0
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e7bc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c00:	6862      	ldr	r2, [r4, #4]
 8002c02:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
 8002c04:	2a01      	cmp	r2, #1
 8002c06:	d11d      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	d0a8      	beq.n	8002b62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c10:	4e1b      	ldr	r6, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
 8002c12:	68b3      	ldr	r3, [r6, #8]
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fd68 	bl	80016f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002c24:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	68b3      	ldr	r3, [r6, #8]
 8002c28:	6862      	ldr	r2, [r4, #4]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c32:	d0a4      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fd5c 	bl	80016f0 <HAL_GetTick>
 8002c38:	1bc0      	subs	r0, r0, r7
 8002c3a:	4540      	cmp	r0, r8
 8002c3c:	d9f3      	bls.n	8002c26 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002c3e:	2003      	movs	r0, #3
}
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c44:	1e91      	subs	r1, r2, #2
 8002c46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c48:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	d802      	bhi.n	8002c52 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c50:	e7dd      	b.n	8002c0e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	f013 0f02 	tst.w	r3, #2
 8002c56:	e7da      	b.n	8002c0e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c58:	b2ea      	uxtb	r2, r5
 8002c5a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	429d      	cmp	r5, r3
 8002c64:	f47f af7d 	bne.w	8002b62 <HAL_RCC_ClockConfig+0xa>
 8002c68:	e78f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6a:	4905      	ldr	r1, [pc, #20]	; (8002c80 <HAL_RCC_ClockConfig+0x128>)
 8002c6c:	68e0      	ldr	r0, [r4, #12]
 8002c6e:	688b      	ldr	r3, [r1, #8]
 8002c70:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002c74:	4303      	orrs	r3, r0
 8002c76:	608b      	str	r3, [r1, #8]
 8002c78:	e78a      	b.n	8002b90 <HAL_RCC_ClockConfig+0x38>
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08011a10 	.word	0x08011a10
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c9a:	6810      	ldr	r0, [r2, #0]
}
 8002c9c:	40d8      	lsrs	r0, r3
 8002c9e:	4770      	bx	lr
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08011a20 	.word	0x08011a20
 8002ca8:	20000000 	.word	0x20000000

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002cba:	6810      	ldr	r0, [r2, #0]
}
 8002cbc:	40d8      	lsrs	r0, r3
 8002cbe:	4770      	bx	lr
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08011a20 	.word	0x08011a20
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_GetClockConfig+0x34>)
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002ce0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002ce8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002cf2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetClockConfig+0x38>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	600b      	str	r3, [r1, #0]
 8002cfe:	4770      	bx	lr
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	f013 0f05 	tst.w	r3, #5
{
 8002d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d10:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d12:	d105      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d14:	6828      	ldr	r0, [r5, #0]
 8002d16:	f010 0002 	ands.w	r0, r0, #2
 8002d1a:	d128      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002d20:	4c41      	ldr	r4, [pc, #260]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d22:	4e42      	ldr	r6, [pc, #264]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d28:	f7fe fce2 	bl	80016f0 <HAL_GetTick>
 8002d2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2e:	6833      	ldr	r3, [r6, #0]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	d415      	bmi.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d34:	68ab      	ldr	r3, [r5, #8]
 8002d36:	686a      	ldr	r2, [r5, #4]
 8002d38:	071b      	lsls	r3, r3, #28
 8002d3a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d3e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002d42:	2301      	movs	r3, #1
 8002d44:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d46:	f7fe fcd3 	bl	80016f0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4a:	4c38      	ldr	r4, [pc, #224]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002d4c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	0118      	lsls	r0, r3, #4
 8002d52:	d4df      	bmi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d54:	f7fe fccc 	bl	80016f0 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f7      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d60:	f7fe fcc6 	bl	80016f0 <HAL_GetTick>
 8002d64:	1bc0      	subs	r0, r0, r7
 8002d66:	2802      	cmp	r0, #2
 8002d68:	d9e1      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e7d6      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002d74:	4c2e      	ldr	r4, [pc, #184]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d90:	f7fe fcae 	bl	80016f0 <HAL_GetTick>
 8002d94:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	05d9      	lsls	r1, r3, #23
 8002d9a:	d51b      	bpl.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d9c:	4c23      	ldr	r4, [pc, #140]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002d9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da6:	68eb      	ldr	r3, [r5, #12]
 8002da8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002dac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002db0:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002db2:	d134      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002db4:	6891      	ldr	r1, [r2, #8]
 8002db6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002dba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002dbe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002dc2:	4301      	orrs	r1, r0
 8002dc4:	6091      	str	r1, [r2, #8]
 8002dc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e7a3      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe fc8c 	bl	80016f0 <HAL_GetTick>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9db      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002dde:	e7c4      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	68ea      	ldr	r2, [r5, #12]
 8002de2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d0dd      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dea:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df6:	2100      	movs	r1, #0
 8002df8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002dfa:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002dfe:	07da      	lsls	r2, r3, #31
 8002e00:	d5d1      	bpl.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002e02:	f7fe fc75 	bl	80016f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e0e:	079b      	lsls	r3, r3, #30
 8002e10:	d4c9      	bmi.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe fc6d 	bl	80016f0 <HAL_GetTick>
 8002e16:	1b80      	subs	r0, r0, r6
 8002e18:	42b8      	cmp	r0, r7
 8002e1a:	d9f7      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e1c:	e7a5      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1e:	6891      	ldr	r1, [r2, #8]
 8002e20:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002e24:	e7ce      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002e26:	bf00      	nop
 8002e28:	42470068 	.word	0x42470068
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470e40 	.word	0x42470e40

08002e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	d120      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002e3e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002e40:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002e44:	d004      	beq.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002e46:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e48:	480f      	ldr	r0, [pc, #60]	; (8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002e4a:	bf18      	it	ne
 8002e4c:	2000      	movne	r0, #0
 8002e4e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e50:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e52:	490c      	ldr	r1, [pc, #48]	; (8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e54:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e56:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e58:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e5c:	bf4c      	ite	mi
 8002e5e:	4b0b      	ldrmi	r3, [pc, #44]	; (8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e60:	4b0b      	ldrpl	r3, [pc, #44]	; (8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e66:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e6a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e6e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002e72:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e74:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002e78:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002e7c:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002e7e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	00bb8000 	.word	0x00bb8000
 8002e8c:	007a1200 	.word	0x007a1200
 8002e90:	00f42400 	.word	0x00f42400

08002e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e94:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e96:	4604      	mov	r4, r0
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d036      	beq.n	8002f0a <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002ea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ea8:	b91b      	cbnz	r3, 8002eb2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eaa:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eae:	f7fe faa5 	bl	80013fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eb2:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002eb4:	68a0      	ldr	r0, [r4, #8]
 8002eb6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002ebe:	680b      	ldr	r3, [r1, #0]
 8002ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ec6:	6863      	ldr	r3, [r4, #4]
 8002ec8:	4303      	orrs	r3, r0
 8002eca:	68e0      	ldr	r0, [r4, #12]
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	6920      	ldr	r0, [r4, #16]
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	6960      	ldr	r0, [r4, #20]
 8002ed4:	4303      	orrs	r3, r0
 8002ed6:	69e0      	ldr	r0, [r4, #28]
 8002ed8:	4303      	orrs	r3, r0
 8002eda:	6a20      	ldr	r0, [r4, #32]
 8002edc:	4303      	orrs	r3, r0
 8002ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ee0:	4303      	orrs	r3, r0
 8002ee2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002ee6:	4303      	orrs	r3, r0
 8002ee8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002eea:	0c12      	lsrs	r2, r2, #16
 8002eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eee:	f002 0204 	and.w	r2, r2, #4
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ef6:	69cb      	ldr	r3, [r1, #28]
 8002ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efc:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002efe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002f00:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f02:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f04:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002f08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
}
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <HAL_TIM_Base_MspInit>:
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002f22:	bf1e      	ittt	ne
 8002f24:	681a      	ldrne	r2, [r3, #0]
 8002f26:	f042 0201 	orrne.w	r2, r2, #1
 8002f2a:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_OC_DelayElapsedCallback>:
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_IC_CaptureCallback>:
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_TriggerCallback>:
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	0791      	lsls	r1, r2, #30
{
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f42:	d50e      	bpl.n	8002f62 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	0792      	lsls	r2, r2, #30
 8002f48:	d50b      	bpl.n	8002f62 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f4a:	f06f 0202 	mvn.w	r2, #2
 8002f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f50:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f52:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f56:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f58:	d077      	beq.n	800304a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	f7ff ffea 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	0750      	lsls	r0, r2, #29
 8002f68:	d510      	bpl.n	8002f8c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	0751      	lsls	r1, r2, #29
 8002f6e:	d50d      	bpl.n	8002f8c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	f06f 0204 	mvn.w	r2, #4
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f76:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f78:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f7a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f82:	d068      	beq.n	8003056 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f84:	f7ff ffd5 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	0712      	lsls	r2, r2, #28
 8002f92:	d50f      	bpl.n	8002fb4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	0710      	lsls	r0, r2, #28
 8002f98:	d50c      	bpl.n	8002fb4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f9a:	f06f 0208 	mvn.w	r2, #8
 8002f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002faa:	d05a      	beq.n	8003062 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fac:	f7ff ffc1 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	06d2      	lsls	r2, r2, #27
 8002fba:	d510      	bpl.n	8002fde <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	06d0      	lsls	r0, r2, #27
 8002fc0:	d50d      	bpl.n	8002fde <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc2:	f06f 0210 	mvn.w	r2, #16
 8002fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fca:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fcc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd4:	d04b      	beq.n	800306e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	f7ff ffac 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	07d1      	lsls	r1, r2, #31
 8002fe4:	d508      	bpl.n	8002ff8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	07d2      	lsls	r2, r2, #31
 8002fea:	d505      	bpl.n	8002ff8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fec:	f06f 0201 	mvn.w	r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7fe f94a 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	0610      	lsls	r0, r2, #24
 8002ffe:	d508      	bpl.n	8003012 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	0611      	lsls	r1, r2, #24
 8003004:	d505      	bpl.n	8003012 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003006:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300c:	4620      	mov	r0, r4
 800300e:	f000 f8b6 	bl	800317e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	0652      	lsls	r2, r2, #25
 8003018:	d508      	bpl.n	800302c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	0650      	lsls	r0, r2, #25
 800301e:	d505      	bpl.n	800302c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff ff85 	bl	8002f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	0691      	lsls	r1, r2, #26
 8003032:	d522      	bpl.n	800307a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	0692      	lsls	r2, r2, #26
 8003038:	d51f      	bpl.n	800307a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800303a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003040:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003046:	f000 b899 	b.w	800317c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	f7ff ff71 	bl	8002f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ff70 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003054:	e783      	b.n	8002f5e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	f7ff ff6b 	bl	8002f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ff6a 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003060:	e792      	b.n	8002f88 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	f7ff ff65 	bl	8002f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff ff64 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 800306c:	e7a0      	b.n	8002fb0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	f7ff ff5f 	bl	8002f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ff5e 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003078:	e7af      	b.n	8002fda <HAL_TIM_IRQHandler+0xa2>
 800307a:	bd10      	pop	{r4, pc}

0800307c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	4a30      	ldr	r2, [pc, #192]	; (8003140 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800307e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	4290      	cmp	r0, r2
 8003082:	d012      	beq.n	80030aa <TIM_Base_SetConfig+0x2e>
 8003084:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003088:	d00f      	beq.n	80030aa <TIM_Base_SetConfig+0x2e>
 800308a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800308e:	4290      	cmp	r0, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0x2e>
 8003092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003096:	4290      	cmp	r0, r2
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0x2e>
 800309a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800309e:	4290      	cmp	r0, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0x2e>
 80030a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030a6:	4290      	cmp	r0, r2
 80030a8:	d119      	bne.n	80030de <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80030aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <TIM_Base_SetConfig+0xc4>)
 80030b4:	4290      	cmp	r0, r2
 80030b6:	d029      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030bc:	d026      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030c2:	4290      	cmp	r0, r2
 80030c4:	d022      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ca:	4290      	cmp	r0, r2
 80030cc:	d01e      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d01a      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030da:	4290      	cmp	r0, r2
 80030dc:	d016      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <TIM_Base_SetConfig+0xc8>)
 80030e0:	4290      	cmp	r0, r2
 80030e2:	d013      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e8:	4290      	cmp	r0, r2
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030f0:	4290      	cmp	r0, r2
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030f4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80030f8:	4290      	cmp	r0, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 80030fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003100:	4290      	cmp	r0, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x90>
 8003104:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003108:	4290      	cmp	r0, r2
 800310a:	d103      	bne.n	8003114 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003112:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003114:	694a      	ldr	r2, [r1, #20]
 8003116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800311c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800311e:	688b      	ldr	r3, [r1, #8]
 8003120:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003122:	680b      	ldr	r3, [r1, #0]
 8003124:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <TIM_Base_SetConfig+0xc4>)
 8003128:	4298      	cmp	r0, r3
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0xb8>
 800312c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003130:	4298      	cmp	r0, r3
 8003132:	d101      	bne.n	8003138 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003134:	690b      	ldr	r3, [r1, #16]
 8003136:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003138:	2301      	movs	r3, #1
 800313a:	6143      	str	r3, [r0, #20]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40014000 	.word	0x40014000

08003148 <HAL_TIM_Base_Init>:
{
 8003148:	b510      	push	{r4, lr}
  if (htim == NULL)
 800314a:	4604      	mov	r4, r0
 800314c:	b1a0      	cbz	r0, 8003178 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003152:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003156:	b91b      	cbnz	r3, 8003160 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003158:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800315c:	f7ff fed7 	bl	8002f0e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	1d21      	adds	r1, r4, #4
 800316a:	f7ff ff87 	bl	800307c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800316e:	2301      	movs	r3, #1
 8003170:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003174:	2000      	movs	r0, #0
 8003176:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	bd10      	pop	{r4, pc}

0800317c <HAL_TIMEx_CommutCallback>:
 800317c:	4770      	bx	lr

0800317e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317e:	4770      	bx	lr

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	6806      	ldr	r6, [r0, #0]
 8003186:	68c2      	ldr	r2, [r0, #12]
 8003188:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800318c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003190:	4313      	orrs	r3, r2
 8003192:	6133      	str	r3, [r6, #16]
{
 8003194:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003196:	6883      	ldr	r3, [r0, #8]
 8003198:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800319a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319c:	4303      	orrs	r3, r0
 800319e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80031a0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80031a6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031aa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b0:	6973      	ldr	r3, [r6, #20]
 80031b2:	69a2      	ldr	r2, [r4, #24]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031be:	6173      	str	r3, [r6, #20]
 80031c0:	4b7a      	ldr	r3, [pc, #488]	; (80033ac <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c2:	d17c      	bne.n	80032be <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c4:	429e      	cmp	r6, r3
 80031c6:	d003      	beq.n	80031d0 <UART_SetConfig+0x50>
 80031c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031cc:	429e      	cmp	r6, r3
 80031ce:	d144      	bne.n	800325a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031d0:	f7ff fd6c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80031d4:	2519      	movs	r5, #25
 80031d6:	fb05 f300 	mul.w	r3, r5, r0
 80031da:	6860      	ldr	r0, [r4, #4]
 80031dc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80031e0:	0040      	lsls	r0, r0, #1
 80031e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80031e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	f7ff fd5d 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80031f2:	6863      	ldr	r3, [r4, #4]
 80031f4:	4368      	muls	r0, r5
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb0 f7f3 	udiv	r7, r0, r3
 80031fc:	f7ff fd56 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	4368      	muls	r0, r5
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	fbb3 f3f9 	udiv	r3, r3, r9
 800320e:	fb09 7313 	mls	r3, r9, r3, r7
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	fbb3 f3f9 	udiv	r3, r3, r9
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003220:	f7ff fd44 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003224:	6862      	ldr	r2, [r4, #4]
 8003226:	4368      	muls	r0, r5
 8003228:	0052      	lsls	r2, r2, #1
 800322a:	fbb0 faf2 	udiv	sl, r0, r2
 800322e:	f7ff fd3d 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	4368      	muls	r0, r5
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003240:	fb09 a313 	mls	r3, r9, r3, sl
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	3332      	adds	r3, #50	; 0x32
 8003248:	fbb3 f3f9 	udiv	r3, r3, r9
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003252:	443b      	add	r3, r7
 8003254:	60b3      	str	r3, [r6, #8]
 8003256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800325a:	f7ff fd17 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800325e:	2519      	movs	r5, #25
 8003260:	fb05 f300 	mul.w	r3, r5, r0
 8003264:	6860      	ldr	r0, [r4, #4]
 8003266:	f04f 0964 	mov.w	r9, #100	; 0x64
 800326a:	0040      	lsls	r0, r0, #1
 800326c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003270:	fbb3 f3f9 	udiv	r3, r3, r9
 8003274:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003278:	f7ff fd08 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	4368      	muls	r0, r5
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fbb0 f7f3 	udiv	r7, r0, r3
 8003286:	f7ff fd01 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800328a:	6863      	ldr	r3, [r4, #4]
 800328c:	4368      	muls	r0, r5
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fbb0 f3f3 	udiv	r3, r0, r3
 8003294:	fbb3 f3f9 	udiv	r3, r3, r9
 8003298:	fb09 7313 	mls	r3, r9, r3, r7
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80032aa:	f7ff fcef 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80032ae:	6862      	ldr	r2, [r4, #4]
 80032b0:	4368      	muls	r0, r5
 80032b2:	0052      	lsls	r2, r2, #1
 80032b4:	fbb0 faf2 	udiv	sl, r0, r2
 80032b8:	f7ff fce8 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80032bc:	e7b9      	b.n	8003232 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032be:	429e      	cmp	r6, r3
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x148>
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <UART_SetConfig+0x230>)
 80032c4:	429e      	cmp	r6, r3
 80032c6:	d140      	bne.n	800334a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80032c8:	f7ff fcf0 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80032cc:	6867      	ldr	r7, [r4, #4]
 80032ce:	2519      	movs	r5, #25
 80032d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80032d4:	fb05 f300 	mul.w	r3, r5, r0
 80032d8:	00bf      	lsls	r7, r7, #2
 80032da:	fbb3 f3f7 	udiv	r3, r3, r7
 80032de:	fbb3 f3f9 	udiv	r3, r3, r9
 80032e2:	011f      	lsls	r7, r3, #4
 80032e4:	f7ff fce2 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	4368      	muls	r0, r5
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fbb0 f8f3 	udiv	r8, r0, r3
 80032f2:	f7ff fcdb 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	4368      	muls	r0, r5
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003300:	fbb3 f3f9 	udiv	r3, r3, r9
 8003304:	fb09 8313 	mls	r3, r9, r3, r8
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003310:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003314:	f7ff fcca 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003318:	6862      	ldr	r2, [r4, #4]
 800331a:	4368      	muls	r0, r5
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	fbb0 faf2 	udiv	sl, r0, r2
 8003322:	f7ff fcc3 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003326:	6863      	ldr	r3, [r4, #4]
 8003328:	4368      	muls	r0, r5
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003330:	fbb3 f3f9 	udiv	r3, r3, r9
 8003334:	fb09 a313 	mls	r3, r9, r3, sl
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	3332      	adds	r3, #50	; 0x32
 800333c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	ea43 0308 	orr.w	r3, r3, r8
 8003348:	e783      	b.n	8003252 <UART_SetConfig+0xd2>
 800334a:	f7ff fc9f 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800334e:	6867      	ldr	r7, [r4, #4]
 8003350:	2519      	movs	r5, #25
 8003352:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003356:	fb05 f300 	mul.w	r3, r5, r0
 800335a:	00bf      	lsls	r7, r7, #2
 800335c:	fbb3 f3f7 	udiv	r3, r3, r7
 8003360:	fbb3 f3f9 	udiv	r3, r3, r9
 8003364:	011f      	lsls	r7, r3, #4
 8003366:	f7ff fc91 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800336a:	6863      	ldr	r3, [r4, #4]
 800336c:	4368      	muls	r0, r5
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb0 f8f3 	udiv	r8, r0, r3
 8003374:	f7ff fc8a 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8003378:	6863      	ldr	r3, [r4, #4]
 800337a:	4368      	muls	r0, r5
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	fbb3 f3f9 	udiv	r3, r3, r9
 8003386:	fb09 8313 	mls	r3, r9, r3, r8
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003392:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003396:	f7ff fc79 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	4368      	muls	r0, r5
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	fbb0 faf2 	udiv	sl, r0, r2
 80033a4:	f7ff fc72 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80033a8:	e7bd      	b.n	8003326 <UART_SetConfig+0x1a6>
 80033aa:	bf00      	nop
 80033ac:	40011000 	.word	0x40011000
 80033b0:	40011400 	.word	0x40011400

080033b4 <HAL_UART_Init>:
{
 80033b4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033b6:	4604      	mov	r4, r0
 80033b8:	b340      	cbz	r0, 800340c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033c2:	b91b      	cbnz	r3, 80033cc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80033c8:	f7fe f84c 	bl	8001464 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80033cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033ce:	2324      	movs	r3, #36	; 0x24
 80033d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033d4:	68d3      	ldr	r3, [r2, #12]
 80033d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033da:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff fecf 	bl	8003180 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033fe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003402:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800340a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
}
 800340e:	bd10      	pop	{r4, pc}

08003410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003412:	3b01      	subs	r3, #1
 8003414:	d101      	bne.n	800341a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003416:	2003      	movs	r0, #3
 8003418:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800341a:	6902      	ldr	r2, [r0, #16]
 800341c:	2a00      	cmp	r2, #0
 800341e:	daf8      	bge.n	8003412 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003420:	6903      	ldr	r3, [r0, #16]
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <USB_CoreReset+0x2c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800342a:	3a01      	subs	r2, #1
 800342c:	d0f3      	beq.n	8003416 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800342e:	6903      	ldr	r3, [r0, #16]
 8003430:	f013 0301 	ands.w	r3, r3, #1
 8003434:	d1f9      	bne.n	800342a <USB_CoreReset+0x1a>

  return HAL_OK;
 8003436:	4618      	mov	r0, r3
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	00030d41 	.word	0x00030d41

08003440 <USB_CoreInit>:
{
 8003440:	b084      	sub	sp, #16
 8003442:	b538      	push	{r3, r4, r5, lr}
 8003444:	ad05      	add	r5, sp, #20
 8003446:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800344a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800344c:	2b01      	cmp	r3, #1
{
 800344e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003450:	d125      	bne.n	800349e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003452:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003458:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800345a:	68c3      	ldr	r3, [r0, #12]
 800345c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003464:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003466:	68c3      	ldr	r3, [r0, #12]
 8003468:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800346c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800346e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003470:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003472:	bf02      	ittt	eq
 8003474:	68c3      	ldreq	r3, [r0, #12]
 8003476:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800347a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800347c:	f7ff ffc8 	bl	8003410 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003480:	9b08      	ldr	r3, [sp, #32]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003486:	68a3      	ldr	r3, [r4, #8]
 8003488:	f043 0306 	orr.w	r3, r3, #6
 800348c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800348e:	68a3      	ldr	r3, [r4, #8]
 8003490:	f043 0320 	orr.w	r3, r3, #32
 8003494:	60a3      	str	r3, [r4, #8]
}
 8003496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800349a:	b004      	add	sp, #16
 800349c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800349e:	68c3      	ldr	r3, [r0, #12]
 80034a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a4:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80034a6:	f7ff ffb3 	bl	8003410 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80034aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ac:	b923      	cbnz	r3, 80034b8 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80034b6:	e7e3      	b.n	8003480 <USB_CoreInit+0x40>
 80034b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	e7f9      	b.n	80034b4 <USB_CoreInit+0x74>

080034c0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034c0:	6883      	ldr	r3, [r0, #8]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6083      	str	r3, [r0, #8]
}
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034cc:	6883      	ldr	r3, [r0, #8]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6083      	str	r3, [r0, #8]
}
 80034d4:	2000      	movs	r0, #0
 80034d6:	4770      	bx	lr

080034d8 <USB_SetCurrentMode>:
{
 80034d8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034da:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80034dc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034de:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034e2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80034e4:	d108      	bne.n	80034f8 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80034e6:	68c3      	ldr	r3, [r0, #12]
 80034e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034ec:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80034ee:	2032      	movs	r0, #50	; 0x32
 80034f0:	f7fe f904 	bl	80016fc <HAL_Delay>
  return HAL_OK;
 80034f4:	2000      	movs	r0, #0
 80034f6:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80034f8:	b919      	cbnz	r1, 8003502 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034fa:	68c3      	ldr	r3, [r0, #12]
 80034fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003500:	e7f4      	b.n	80034ec <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
}
 8003504:	bd08      	pop	{r3, pc}
	...

08003508 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003508:	0189      	lsls	r1, r1, #6
 800350a:	f041 0120 	orr.w	r1, r1, #32
 800350e:	4a06      	ldr	r2, [pc, #24]	; (8003528 <USB_FlushTxFifo+0x20>)
 8003510:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003512:	3a01      	subs	r2, #1
 8003514:	d005      	beq.n	8003522 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003516:	6903      	ldr	r3, [r0, #16]
 8003518:	f013 0320 	ands.w	r3, r3, #32
 800351c:	d1f9      	bne.n	8003512 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800351e:	4618      	mov	r0, r3
 8003520:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003522:	2003      	movs	r0, #3
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	00030d41 	.word	0x00030d41

0800352c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800352c:	2310      	movs	r3, #16
 800352e:	4a06      	ldr	r2, [pc, #24]	; (8003548 <USB_FlushRxFifo+0x1c>)
 8003530:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003532:	3a01      	subs	r2, #1
 8003534:	d005      	beq.n	8003542 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003536:	6903      	ldr	r3, [r0, #16]
 8003538:	f013 0310 	ands.w	r3, r3, #16
 800353c:	d1f9      	bne.n	8003532 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800353e:	4618      	mov	r0, r3
 8003540:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003542:	2003      	movs	r0, #3
}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	00030d41 	.word	0x00030d41

0800354c <USB_WritePacket>:
{
 800354c:	b510      	push	{r4, lr}
 800354e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003552:	b94c      	cbnz	r4, 8003568 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003554:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003556:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003562:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8003564:	4299      	cmp	r1, r3
 8003566:	d101      	bne.n	800356c <USB_WritePacket+0x20>
}
 8003568:	2000      	movs	r0, #0
 800356a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800356c:	f851 2b04 	ldr.w	r2, [r1], #4
 8003570:	6002      	str	r2, [r0, #0]
 8003572:	e7f7      	b.n	8003564 <USB_WritePacket+0x18>

08003574 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003574:	3203      	adds	r2, #3
 8003576:	f022 0203 	bic.w	r2, r2, #3
 800357a:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800357c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003580:	4291      	cmp	r1, r2
 8003582:	d101      	bne.n	8003588 <USB_ReadPacket+0x14>
}
 8003584:	4608      	mov	r0, r1
 8003586:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	f841 3b04 	str.w	r3, [r1], #4
 800358e:	e7f7      	b.n	8003580 <USB_ReadPacket+0xc>

08003590 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003590:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003592:	6980      	ldr	r0, [r0, #24]
}
 8003594:	4010      	ands	r0, r2
 8003596:	4770      	bx	lr

08003598 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003598:	6940      	ldr	r0, [r0, #20]
}
 800359a:	f000 0001 	and.w	r0, r0, #1
 800359e:	4770      	bx	lr

080035a0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80035a0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80035a4:	f023 0303 	bic.w	r3, r3, #3
{
 80035a8:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80035aa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80035ae:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80035b2:	f001 0303 	and.w	r3, r1, #3
 80035b6:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80035b8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80035ba:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80035be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80035c2:	d104      	bne.n	80035ce <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80035c4:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80035c8:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80035ca:	2000      	movs	r0, #0
 80035cc:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80035ce:	2902      	cmp	r1, #2
 80035d0:	d1fb      	bne.n	80035ca <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80035d2:	f241 7370 	movw	r3, #6000	; 0x1770
 80035d6:	e7f7      	b.n	80035c8 <USB_InitFSLSPClkSel+0x28>

080035d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80035d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80035da:	2500      	movs	r5, #0
 80035dc:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80035de:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80035e2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035ea:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80035f2:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80035f4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	f7fe f87f 	bl	80016fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003604:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003608:	200a      	movs	r0, #10
 800360a:	f7fe f877 	bl	80016fc <HAL_Delay>

  return HAL_OK;
}
 800360e:	4628      	mov	r0, r5
 8003610:	b003      	add	sp, #12
 8003612:	bd30      	pop	{r4, r5, pc}

08003614 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003614:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800361a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800361e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003626:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003628:	9b01      	ldr	r3, [sp, #4]
 800362a:	04da      	lsls	r2, r3, #19
 800362c:	d406      	bmi.n	800363c <USB_DriveVbus+0x28>
 800362e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003630:	bf02      	ittt	eq
 8003632:	9b01      	ldreq	r3, [sp, #4]
 8003634:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003638:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	04db      	lsls	r3, r3, #19
 8003640:	d505      	bpl.n	800364e <USB_DriveVbus+0x3a>
 8003642:	b921      	cbnz	r1, 800364e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003644:	9b01      	ldr	r3, [sp, #4]
 8003646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800364a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800364e:	2000      	movs	r0, #0
 8003650:	b002      	add	sp, #8
 8003652:	4770      	bx	lr

08003654 <USB_HostInit>:
{
 8003654:	b084      	sub	sp, #16
 8003656:	b538      	push	{r3, r4, r5, lr}
 8003658:	4604      	mov	r4, r0
 800365a:	a805      	add	r0, sp, #20
 800365c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800366c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800366e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003670:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003674:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800367e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003680:	05da      	lsls	r2, r3, #23
 8003682:	d53f      	bpl.n	8003704 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003684:	9b07      	ldr	r3, [sp, #28]
 8003686:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003688:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800368c:	d13c      	bne.n	8003708 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800368e:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003692:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003696:	2110      	movs	r1, #16
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff ff35 	bl	8003508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff ff44 	bl	800352c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	9906      	ldr	r1, [sp, #24]
 80036a8:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 80036b0:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80036b2:	428b      	cmp	r3, r1
 80036b4:	d12b      	bne.n	800370e <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 80036b6:	2101      	movs	r1, #1
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff ffab 	bl	8003614 <USB_DriveVbus>
  HAL_Delay(200U);
 80036be:	20c8      	movs	r0, #200	; 0xc8
 80036c0:	f7fe f81c 	bl	80016fc <HAL_Delay>
  USBx->GINTMSK = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036cc:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80036ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036d0:	05db      	lsls	r3, r3, #23
 80036d2:	d521      	bpl.n	8003718 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 80036d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80036da:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80036de:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80036e2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80036e6:	9b08      	ldr	r3, [sp, #32]
 80036e8:	b91b      	cbnz	r3, 80036f2 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036ea:	69a3      	ldr	r3, [r4, #24]
 80036ec:	f043 0310 	orr.w	r3, r3, #16
 80036f0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80036f2:	69a2      	ldr	r2, [r4, #24]
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <USB_HostInit+0xd8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61a3      	str	r3, [r4, #24]
}
 80036fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036fe:	2000      	movs	r0, #0
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003704:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	e7c1      	b.n	8003692 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800370e:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003710:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003712:	60d5      	str	r5, [r2, #12]
 8003714:	3220      	adds	r2, #32
 8003716:	e7cc      	b.n	80036b2 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800371c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003720:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <USB_HostInit+0xdc>)
 8003724:	e7dd      	b.n	80036e2 <USB_HostInit+0x8e>
 8003726:	bf00      	nop
 8003728:	00e00300 	.word	0x00e00300
 800372c:	a3200008 	.word	0xa3200008
 8003730:	004000e0 	.word	0x004000e0

08003734 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003734:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800373a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800373e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003740:	9801      	ldr	r0, [sp, #4]
}
 8003742:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003746:	b002      	add	sp, #8
 8003748:	4770      	bx	lr

0800374a <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800374a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800374e:	6880      	ldr	r0, [r0, #8]
}
 8003750:	b280      	uxth	r0, r0
 8003752:	4770      	bx	lr

08003754 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003758:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 800375c:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8003760:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003764:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376a:	60a0      	str	r0, [r4, #8]
 800376c:	fa4f f882 	sxtb.w	r8, r2
 8003770:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8003774:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003778:	2e03      	cmp	r6, #3
 800377a:	d86c      	bhi.n	8003856 <USB_HC_Init+0x102>
 800377c:	e8df f006 	tbb	[pc, r6]
 8003780:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003784:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003788:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800378c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800378e:	da03      	bge.n	8003798 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003790:	68e1      	ldr	r1, [r4, #12]
 8003792:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003796:	e005      	b.n	80037a4 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003798:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800379a:	05c9      	lsls	r1, r1, #23
 800379c:	d542      	bpl.n	8003824 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800379e:	68e1      	ldr	r1, [r4, #12]
 80037a0:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80037a4:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80037a6:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80037a8:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f10e 	lsl.w	r1, r1, lr
 80037b2:	4321      	orrs	r1, r4
 80037b4:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80037b8:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80037ba:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80037be:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80037c2:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80037c4:	bfb4      	ite	lt
 80037c6:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 80037ca:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80037cc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 80037d0:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80037d4:	059b      	lsls	r3, r3, #22
 80037d6:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80037da:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80037de:	02d2      	lsls	r2, r2, #11
 80037e0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80037e4:	432b      	orrs	r3, r5
 80037e6:	4313      	orrs	r3, r2
 80037e8:	04b2      	lsls	r2, r6, #18
 80037ea:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 80037ee:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80037f0:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 80037f4:	bf0c      	ite	eq
 80037f6:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 80037fa:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80037fc:	4323      	orrs	r3, r4
 80037fe:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8003800:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003802:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8003806:	d128      	bne.n	800385a <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003808:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800380c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003810:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8003814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003818:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800381c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003820:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003822:	dbb5      	blt.n	8003790 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003824:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f10e 	lsl.w	r1, r1, lr
 800382e:	4301      	orrs	r1, r0
 8003830:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003834:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8003836:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003838:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800383c:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 800383e:	4604      	mov	r4, r0
 8003840:	e7c4      	b.n	80037cc <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003842:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003846:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800384a:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800384c:	daea      	bge.n	8003824 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800384e:	68e1      	ldr	r1, [r4, #12]
 8003850:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003854:	e7a6      	b.n	80037a4 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003856:	2001      	movs	r0, #1
 8003858:	e7a6      	b.n	80037a8 <USB_HC_Init+0x54>
}
 800385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800385e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800385e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003862:	6940      	ldr	r0, [r0, #20]
}
 8003864:	b280      	uxth	r0, r0
 8003866:	4770      	bx	lr

08003868 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003868:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800386c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8003870:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003874:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003878:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800387c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003880:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003884:	d11e      	bne.n	80038c4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003886:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003888:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800388c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003890:	d137      	bne.n	8003902 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003892:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003896:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800389a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800389e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038a2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80038a6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80038aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80038b2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 80038b6:	3b01      	subs	r3, #1
 80038b8:	d002      	beq.n	80038c0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80038ba:	6811      	ldr	r1, [r2, #0]
 80038bc:	2900      	cmp	r1, #0
 80038be:	dbfa      	blt.n	80038b6 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80038c0:	2000      	movs	r0, #0
 80038c2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80038c4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80038c8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80038cc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80038d0:	d117      	bne.n	8003902 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80038d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80038da:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80038de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80038e6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80038ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ee:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80038f2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 80038f6:	3b01      	subs	r3, #1
 80038f8:	d0e2      	beq.n	80038c0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80038fa:	6811      	ldr	r1, [r2, #0]
 80038fc:	2900      	cmp	r1, #0
 80038fe:	dbfa      	blt.n	80038f6 <USB_HC_Halt+0x8e>
 8003900:	e7de      	b.n	80038c0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003906:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800390a:	e7d9      	b.n	80038c0 <USB_HC_Halt+0x58>

0800390c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800390c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003910:	4a06      	ldr	r2, [pc, #24]	; (800392c <USB_DoPing+0x20>)
 8003912:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003916:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800391a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800391e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003922:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003926:	2000      	movs	r0, #0
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	80080000 	.word	0x80080000

08003930 <USB_HC_StartXfer>:
{
 8003930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003934:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003936:	05db      	lsls	r3, r3, #23
{
 8003938:	4616      	mov	r6, r2
 800393a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800393c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800393e:	d517      	bpl.n	8003970 <USB_HC_StartXfer+0x40>
 8003940:	790d      	ldrb	r5, [r1, #4]
 8003942:	b9ad      	cbnz	r5, 8003970 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003944:	b94e      	cbnz	r6, 800395a <USB_HC_StartXfer+0x2a>
 8003946:	794b      	ldrb	r3, [r1, #5]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d111      	bne.n	8003970 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 800394c:	4611      	mov	r1, r2
 800394e:	f7ff ffdd 	bl	800390c <USB_DoPing>
}
 8003952:	2000      	movs	r0, #0
 8003954:	b002      	add	sp, #8
 8003956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 800395a:	2e01      	cmp	r6, #1
 800395c:	d108      	bne.n	8003970 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800395e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003962:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003966:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800396a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800396e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8003970:	6908      	ldr	r0, [r1, #16]
 8003972:	2800      	cmp	r0, #0
 8003974:	d066      	beq.n	8003a44 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003976:	890b      	ldrh	r3, [r1, #8]
 8003978:	3801      	subs	r0, #1
 800397a:	4418      	add	r0, r3
 800397c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003980:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8003982:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003986:	d903      	bls.n	8003990 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 800398c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8003990:	78cf      	ldrb	r7, [r1, #3]
 8003992:	b117      	cbz	r7, 800399a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003994:	890b      	ldrh	r3, [r1, #8]
 8003996:	4343      	muls	r3, r0
 8003998:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800399a:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800399e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80039a0:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80039a4:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80039a8:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80039ac:	ea4e 0e08 	orr.w	lr, lr, r8
 80039b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003a90 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80039b4:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80039b8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 80039bc:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80039c0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 80039c4:	b116      	cbz	r6, 80039cc <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80039c6:	68c8      	ldr	r0, [r1, #12]
 80039c8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80039cc:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 80039d0:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80039d4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80039d8:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 80039dc:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80039e0:	43c0      	mvns	r0, r0
 80039e2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80039e6:	0740      	lsls	r0, r0, #29
 80039e8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80039ec:	ea40 000c 	orr.w	r0, r0, ip
 80039f0:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f4:	4825      	ldr	r0, [pc, #148]	; (8003a8c <USB_HC_StartXfer+0x15c>)
 80039f6:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80039fa:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039fe:	f8d0 c000 	ldr.w	ip, [r0]
 8003a02:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8003a06:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003a0a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8003a0e:	b1df      	cbz	r7, 8003a48 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003a10:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003a14:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a18:	f8d0 c000 	ldr.w	ip, [r0]
 8003a1c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8003a20:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a24:	6800      	ldr	r0, [r0, #0]
 8003a26:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003a2a:	2e00      	cmp	r6, #0
 8003a2c:	d191      	bne.n	8003952 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003a2e:	2f00      	cmp	r7, #0
 8003a30:	d18f      	bne.n	8003952 <USB_HC_StartXfer+0x22>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d08d      	beq.n	8003952 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003a36:	79c8      	ldrb	r0, [r1, #7]
 8003a38:	2803      	cmp	r0, #3
 8003a3a:	d813      	bhi.n	8003a64 <USB_HC_StartXfer+0x134>
 8003a3c:	e8df f000 	tbb	[pc, r0]
 8003a40:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e7a3      	b.n	8003990 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003a48:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003a4c:	e7e2      	b.n	8003a14 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003a4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003a50:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003a52:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003a56:	b280      	uxth	r0, r0
 8003a58:	4285      	cmp	r5, r0
 8003a5a:	d903      	bls.n	8003a64 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003a5c:	69a0      	ldr	r0, [r4, #24]
 8003a5e:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003a62:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003a64:	2000      	movs	r0, #0
 8003a66:	9000      	str	r0, [sp, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	68c9      	ldr	r1, [r1, #12]
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff fd6d 	bl	800354c <USB_WritePacket>
 8003a72:	e76e      	b.n	8003952 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003a74:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003a78:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003a7a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003a7e:	b280      	uxth	r0, r0
 8003a80:	4285      	cmp	r5, r0
 8003a82:	d9ef      	bls.n	8003a64 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003a84:	69a0      	ldr	r0, [r4, #24]
 8003a86:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003a8a:	e7ea      	b.n	8003a62 <USB_HC_StartXfer+0x132>
 8003a8c:	2001018c 	.word	0x2001018c
 8003a90:	1ff80000 	.word	0x1ff80000

08003a94 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a94:	6883      	ldr	r3, [r0, #8]
 8003a96:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003a9a:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a9c:	2110      	movs	r1, #16
{
 8003a9e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003aa0:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003aa2:	f7ff fd31 	bl	8003508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7ff fd40 	bl	800352c <USB_FlushRxFifo>
 8003aac:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8003ab0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8003ab4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003abc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8003ac0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8003ac4:	4290      	cmp	r0, r2
 8003ac6:	d1f6      	bne.n	8003ab6 <USB_StopHost+0x22>
 8003ac8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003ad0:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003ad4:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003adc:	d802      	bhi.n	8003ae4 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	dbf8      	blt.n	8003ad6 <USB_StopHost+0x42>
 8003ae4:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d1ef      	bne.n	8003aca <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aee:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003af2:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003af4:	68a3      	ldr	r3, [r4, #8]
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	4770      	bx	lr

08003b04 <USBH_CDC_InterfaceDeInit>:
{
 8003b04:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003b06:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003b0a:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003b0c:	7821      	ldrb	r1, [r4, #0]
{
 8003b0e:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003b10:	b139      	cbz	r1, 8003b22 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003b12:	f000 fe17 	bl	8004744 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003b16:	7821      	ldrb	r1, [r4, #0]
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 fe2f 	bl	800477c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003b1e:	2300      	movs	r3, #0
 8003b20:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003b22:	7b21      	ldrb	r1, [r4, #12]
 8003b24:	b141      	cbz	r1, 8003b38 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 fe0c 	bl	8004744 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003b2c:	7b21      	ldrb	r1, [r4, #12]
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fe24 	bl	800477c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003b34:	2300      	movs	r3, #0
 8003b36:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003b38:	7b61      	ldrb	r1, [r4, #13]
 8003b3a:	b141      	cbz	r1, 8003b4e <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 fe01 	bl	8004744 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003b42:	7b61      	ldrb	r1, [r4, #13]
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fe19 	bl	800477c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8003b4e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003b52:	69d8      	ldr	r0, [r3, #28]
 8003b54:	b128      	cbz	r0, 8003b62 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003b56:	f00a f9ed 	bl	800df34 <free>
    phost->pActiveClass->pData = 0U;
 8003b5a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
}
 8003b62:	2000      	movs	r0, #0
 8003b64:	bd38      	pop	{r3, r4, r5, pc}

08003b66 <USBH_CDC_InterfaceInit>:
{
 8003b66:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003b68:	2202      	movs	r2, #2
{
 8003b6a:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	4611      	mov	r1, r2
{
 8003b70:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8003b72:	f000 f9b2 	bl	8003eda <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003b76:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8003b78:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8003b7a:	d102      	bne.n	8003b82 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003b7c:	2002      	movs	r0, #2
}
 8003b7e:	b005      	add	sp, #20
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8003b82:	4601      	mov	r1, r0
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 f99f 	bl	8003ec8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003b8a:	2050      	movs	r0, #80	; 0x50
 8003b8c:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8003b90:	f00a f9c8 	bl	800df24 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003b94:	231a      	movs	r3, #26
 8003b96:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003b9a:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003b9c:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8003ba0:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003ba2:	bf42      	ittt	mi
 8003ba4:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003ba6:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8003baa:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003bac:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003bae:	7841      	ldrb	r1, [r0, #1]
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fdcc 	bl	800474e <USBH_AllocPipe>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8003bba:	8960      	ldrh	r0, [r4, #10]
 8003bbc:	9002      	str	r0, [sp, #8]
 8003bbe:	2003      	movs	r0, #3
 8003bc0:	9001      	str	r0, [sp, #4]
 8003bc2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003bc6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003bca:	7862      	ldrb	r2, [r4, #1]
 8003bcc:	9000      	str	r0, [sp, #0]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fda9 	bl	8004726 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	7821      	ldrb	r1, [r4, #0]
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f001 f8d2 	bl	8004d82 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8003bde:	2300      	movs	r3, #0
 8003be0:	461a      	mov	r2, r3
 8003be2:	210a      	movs	r1, #10
 8003be4:	4628      	mov	r0, r5
 8003be6:	f000 f978 	bl	8003eda <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8003bea:	28ff      	cmp	r0, #255	; 0xff
 8003bec:	d0c6      	beq.n	8003b7c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003bee:	231a      	movs	r3, #26
 8003bf0:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003bf4:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003bf8:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003bfc:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8003c00:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003c04:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c08:	bf0d      	iteet	eq
 8003c0a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c0c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c0e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c10:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003c12:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003c16:	bf08      	it	eq
 8003c18:	73a3      	strbeq	r3, [r4, #14]
 8003c1a:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c1e:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003c20:	bf18      	it	ne
 8003c22:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c24:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003c26:	bf14      	ite	ne
 8003c28:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003c2a:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c2c:	f000 fd8f 	bl	800474e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003c30:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c32:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 fd8a 	bl	800474e <USBH_AllocPipe>
 8003c3a:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003c3c:	8b20      	ldrh	r0, [r4, #24]
 8003c3e:	9002      	str	r0, [sp, #8]
 8003c40:	2602      	movs	r6, #2
 8003c42:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003c46:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003c4a:	7ba2      	ldrb	r2, [r4, #14]
 8003c4c:	7b61      	ldrb	r1, [r4, #13]
 8003c4e:	9601      	str	r6, [sp, #4]
 8003c50:	9000      	str	r0, [sp, #0]
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 fd67 	bl	8004726 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003c58:	8b60      	ldrh	r0, [r4, #26]
 8003c5a:	9002      	str	r0, [sp, #8]
 8003c5c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003c60:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003c64:	7be2      	ldrb	r2, [r4, #15]
 8003c66:	7b21      	ldrb	r1, [r4, #12]
 8003c68:	9601      	str	r6, [sp, #4]
 8003c6a:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003c6c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 fd59 	bl	8004726 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003c74:	4632      	mov	r2, r6
 8003c76:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003c78:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f001 f880 	bl	8004d82 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8003c82:	4632      	mov	r2, r6
 8003c84:	7b21      	ldrb	r1, [r4, #12]
 8003c86:	4628      	mov	r0, r5
 8003c88:	f001 f87b 	bl	8004d82 <USBH_LL_SetToggle>
      status = USBH_OK;
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	e776      	b.n	8003b7e <USBH_CDC_InterfaceInit+0x18>

08003c90 <USBH_CDC_ClassRequest>:
{
 8003c90:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003c92:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003c96:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003c98:	23a1      	movs	r3, #161	; 0xa1
 8003c9a:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003c9c:	2321      	movs	r3, #33	; 0x21
 8003c9e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003ca0:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003ca6:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003ca8:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003caa:	3140      	adds	r1, #64	; 0x40
{
 8003cac:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003cae:	f000 fac9 	bl	8004244 <USBH_CtlReq>
  if(status == USBH_OK)
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	b920      	cbnz	r0, 8003cc0 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003cb6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4798      	blx	r3
}
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}

08003cc4 <USBH_CDC_TransmitCallback>:
 8003cc4:	4770      	bx	lr

08003cc6 <USBH_CDC_ReceiveCallback>:
 8003cc6:	4770      	bx	lr

08003cc8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8003cc8:	4770      	bx	lr

08003cca <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003cca:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003cd0:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8003cd2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8003cd6:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d83d      	bhi.n	8003d58 <USBH_CDC_Process+0x8e>
 8003cdc:	e8df f003 	tbb	[pc, r3]
 8003ce0:	42170603 	.word	0x42170603
 8003ce4:	a6          	.byte	0xa6
 8003ce5:	00          	.byte	0x00
    status = USBH_OK;
 8003ce6:	2000      	movs	r0, #0
}
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8003cec:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8003cee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8003cf0:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003cf6:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003cfc:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003cfe:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d00:	f000 faa0 	bl	8004244 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003d04:	bb50      	cbnz	r0, 8003d5c <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8003d06:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8003d08:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8003d0c:	e024      	b.n	8003d58 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003d0e:	23a1      	movs	r3, #161	; 0xa1
 8003d10:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003d12:	2321      	movs	r3, #33	; 0x21
 8003d14:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003d16:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003d1c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003d1e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d20:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003d24:	f000 fa8e 	bl	8004244 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003d28:	b9c0      	cbnz	r0, 8003d5c <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003d2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8003d2e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003d32:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003d3c:	4291      	cmp	r1, r2
 8003d3e:	d10b      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d44:	795a      	ldrb	r2, [r3, #5]
 8003d46:	4291      	cmp	r1, r2
 8003d48:	d106      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003d4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d102      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7ff ffb8 	bl	8003cc8 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d58:	2001      	movs	r0, #1
 8003d5a:	e7c5      	b.n	8003ce8 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003d5c:	2801      	cmp	r0, #1
 8003d5e:	d0fb      	beq.n	8003d58 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8003d60:	2304      	movs	r3, #4
 8003d62:	e7d1      	b.n	8003d08 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003d64:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003d68:	2901      	cmp	r1, #1
 8003d6a:	d021      	beq.n	8003db0 <USBH_CDC_Process+0xe6>
 8003d6c:	2902      	cmp	r1, #2
 8003d6e:	d02e      	beq.n	8003dce <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003d70:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003d74:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003d76:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d045      	beq.n	8003e0a <USBH_CDC_Process+0x140>
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d1ea      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8003d82:	7b31      	ldrb	r1, [r6, #12]
 8003d84:	4628      	mov	r0, r5
 8003d86:	f000 ffeb 	bl	8004d60 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003d8a:	2801      	cmp	r0, #1
 8003d8c:	d1e4      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003d8e:	7b31      	ldrb	r1, [r6, #12]
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 ffa1 	bl	8004cd8 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8003d96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003d98:	4298      	cmp	r0, r3
 8003d9a:	d040      	beq.n	8003e1e <USBH_CDC_Process+0x154>
 8003d9c:	8b72      	ldrh	r2, [r6, #26]
 8003d9e:	4290      	cmp	r0, r2
 8003da0:	d93d      	bls.n	8003e1e <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 8003da2:	1a1b      	subs	r3, r3, r0
 8003da4:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003da6:	6a33      	ldr	r3, [r6, #32]
 8003da8:	4418      	add	r0, r3
 8003daa:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e033      	b.n	8003e18 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003db0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003db2:	8b22      	ldrh	r2, [r4, #24]
 8003db4:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8003db6:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003db8:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8003dba:	bf98      	it	ls
 8003dbc:	b282      	uxthls	r2, r0
 8003dbe:	69e1      	ldr	r1, [r4, #28]
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 fc89 	bl	80046d8 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003dc6:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003dc8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8003dcc:	e7d0      	b.n	8003d70 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8003dce:	7b61      	ldrb	r1, [r4, #13]
 8003dd0:	f000 ffc6 	bl	8004d60 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8003dd4:	2801      	cmp	r0, #1
 8003dd6:	d115      	bne.n	8003e04 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dda:	8b22      	ldrh	r2, [r4, #24]
 8003ddc:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8003dde:	bf83      	ittte	hi
 8003de0:	1a9b      	subhi	r3, r3, r2
 8003de2:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003de4:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8003de6:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003de8:	bf8a      	itet	hi
 8003dea:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8003dec:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003dee:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8003df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003df2:	b10b      	cbz	r3, 8003df8 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e7e7      	b.n	8003dc8 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8003df8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff ff61 	bl	8003cc4 <USBH_CDC_TransmitCallback>
 8003e02:	e7b5      	b.n	8003d70 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8003e04:	2802      	cmp	r0, #2
 8003e06:	d1b3      	bne.n	8003d70 <USBH_CDC_Process+0xa6>
 8003e08:	e7f4      	b.n	8003df4 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 8003e0a:	7b33      	ldrb	r3, [r6, #12]
 8003e0c:	8b72      	ldrh	r2, [r6, #26]
 8003e0e:	6a31      	ldr	r1, [r6, #32]
 8003e10:	4628      	mov	r0, r5
 8003e12:	f000 fc78 	bl	8004706 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003e16:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003e18:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003e1c:	e79c      	b.n	8003d58 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003e24:	4628      	mov	r0, r5
 8003e26:	f7ff ff4e 	bl	8003cc6 <USBH_CDC_ReceiveCallback>
 8003e2a:	e795      	b.n	8003d58 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f000 fc0d 	bl	800464c <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d190      	bne.n	8003d58 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003e36:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8003e3a:	e78d      	b.n	8003d58 <USBH_CDC_Process+0x8e>

08003e3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003e3c:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8003e40:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003e44:	2100      	movs	r1, #0
 8003e46:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d1fb      	bne.n	8003e46 <DeInitStateMachine+0xa>
 8003e4e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e52:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003e5c:	4291      	cmp	r1, r2
 8003e5e:	d1fb      	bne.n	8003e58 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003e60:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003e62:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003e64:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003e66:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003e68:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8003e6a:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8003e6e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003e70:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 8003e72:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003e74:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003e78:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	4770      	bx	lr

08003e80 <USBH_Init>:
{
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	460d      	mov	r5, r1
  if(phost == NULL)
 8003e84:	4604      	mov	r4, r0
 8003e86:	b180      	cbz	r0, 8003eaa <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003e88:	2300      	movs	r3, #0
  phost->id = id;
 8003e8a:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8003e8e:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8003e92:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8003e96:	f7ff ffd1 	bl	8003e3c <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003e9a:	b10d      	cbz	r5, 8003ea0 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003e9c:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f000 febb 	bl	8004c1c <USBH_LL_Init>
  return USBH_OK;
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8003eaa:	2002      	movs	r0, #2
}
 8003eac:	bd38      	pop	{r3, r4, r5, pc}

08003eae <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8003eae:	b149      	cbz	r1, 8003ec4 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003eb0:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003eb4:	b933      	cbnz	r3, 8003ec4 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8003ebc:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8003ec4:	2002      	movs	r0, #2
  }

  return status;
}
 8003ec6:	4770      	bx	lr

08003ec8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003ec8:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8003ecc:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8003ece:	bf86      	itte	hi
 8003ed0:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8003ed4:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8003ed6:	2002      	movls	r0, #2
  }
  return status;
}
 8003ed8:	4770      	bx	lr

08003eda <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003eda:	b570      	push	{r4, r5, r6, lr}
 8003edc:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8003ede:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8003ee2:	428e      	cmp	r6, r1
 8003ee4:	b2e5      	uxtb	r5, r4
 8003ee6:	d001      	beq.n	8003eec <USBH_FindInterface+0x12>
 8003ee8:	29ff      	cmp	r1, #255	; 0xff
 8003eea:	d10b      	bne.n	8003f04 <USBH_FindInterface+0x2a>
 8003eec:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8003ef0:	4296      	cmp	r6, r2
 8003ef2:	d001      	beq.n	8003ef8 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8003ef4:	2aff      	cmp	r2, #255	; 0xff
 8003ef6:	d105      	bne.n	8003f04 <USBH_FindInterface+0x2a>
 8003ef8:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8003efc:	429e      	cmp	r6, r3
 8003efe:	d007      	beq.n	8003f10 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003f00:	2bff      	cmp	r3, #255	; 0xff
 8003f02:	d005      	beq.n	8003f10 <USBH_FindInterface+0x36>
 8003f04:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003f06:	2c02      	cmp	r4, #2
 8003f08:	f100 001a 	add.w	r0, r0, #26
 8003f0c:	d1e7      	bne.n	8003ede <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8003f0e:	25ff      	movs	r5, #255	; 0xff
}
 8003f10:	4628      	mov	r0, r5
 8003f12:	bd70      	pop	{r4, r5, r6, pc}

08003f14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003f14:	b510      	push	{r4, lr}
 8003f16:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003f18:	f000 fea6 	bl	8004c68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 ff22 	bl	8004d68 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003f24:	2000      	movs	r0, #0
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003f28:	b530      	push	{r4, r5, lr}
 8003f2a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003f32:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 8003f36:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003f38:	b933      	cbnz	r3, 8003f48 <USBH_Process+0x20>
 8003f3a:	7802      	ldrb	r2, [r0, #0]
 8003f3c:	b122      	cbz	r2, 8003f48 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8003f3e:	7802      	ldrb	r2, [r0, #0]
 8003f40:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8003f42:	bf1c      	itt	ne
 8003f44:	2203      	movne	r2, #3
 8003f46:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003f48:	7822      	ldrb	r2, [r4, #0]
 8003f4a:	2a0b      	cmp	r2, #11
 8003f4c:	d818      	bhi.n	8003f80 <USBH_Process+0x58>
 8003f4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f52:	000c      	.short	0x000c
 8003f54:	001f001a 	.word	0x001f001a
 8003f58:	00170121 	.word	0x00170121
 8003f5c:	0107004f 	.word	0x0107004f
 8003f60:	00d000c6 	.word	0x00d000c6
 8003f64:	00e700da 	.word	0x00e700da
 8003f68:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8003f6a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003f6e:	b13b      	cbz	r3, 8003f80 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003f70:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8003f72:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003f74:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003f76:	f000 ff13 	bl	8004da0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f000 fe9e 	bl	8004cbc <USBH_LL_ResetPort>
}
 8003f80:	2000      	movs	r0, #0
 8003f82:	b007      	add	sp, #28
 8003f84:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d1fa      	bne.n	8003f80 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8003f8a:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8003f8c:	7023      	strb	r3, [r4, #0]
 8003f8e:	e7f7      	b.n	8003f80 <USBH_Process+0x58>
    USBH_Delay(100U);
 8003f90:	2064      	movs	r0, #100	; 0x64
 8003f92:	f000 ff05 	bl	8004da0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 fe82 	bl	8004ca0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003f9c:	2305      	movs	r3, #5
 8003f9e:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003fa0:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 fbd1 	bl	800474e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003fac:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003fae:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 fbcc 	bl	800474e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003fb6:	79a2      	ldrb	r2, [r4, #6]
 8003fb8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003fbc:	7120      	strb	r0, [r4, #4]
 8003fbe:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8003fc0:	9202      	str	r2, [sp, #8]
 8003fc2:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8003fc4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	9501      	str	r5, [sp, #4]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 fba9 	bl	8004726 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003fd4:	79a2      	ldrb	r2, [r4, #6]
 8003fd6:	9202      	str	r2, [sp, #8]
 8003fd8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003fdc:	9200      	str	r2, [sp, #0]
 8003fde:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003fe2:	7961      	ldrb	r1, [r4, #5]
 8003fe4:	9501      	str	r5, [sp, #4]
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 fb9c 	bl	8004726 <USBH_OpenPipe>
 8003fee:	e7c7      	b.n	8003f80 <USBH_Process+0x58>
  switch (phost->EnumState)
 8003ff0:	7863      	ldrb	r3, [r4, #1]
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d8c4      	bhi.n	8003f80 <USBH_Process+0x58>
 8003ff6:	e8df f003 	tbb	[pc, r3]
 8003ffa:	1504      	.short	0x1504
 8003ffc:	4138301e 	.word	0x4138301e
 8004000:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8004002:	2108      	movs	r1, #8
 8004004:	4620      	mov	r0, r4
 8004006:	f000 f9fa 	bl	80043fe <USBH_Get_DevDesc>
 800400a:	4605      	mov	r5, r0
 800400c:	2800      	cmp	r0, #0
 800400e:	d1b7      	bne.n	8003f80 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004010:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004012:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004016:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004018:	7921      	ldrb	r1, [r4, #4]
 800401a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800401e:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8004020:	9202      	str	r2, [sp, #8]
 8004022:	e7cf      	b.n	8003fc4 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8004024:	2112      	movs	r1, #18
 8004026:	4620      	mov	r0, r4
 8004028:	f000 f9e9 	bl	80043fe <USBH_Get_DevDesc>
 800402c:	2800      	cmp	r0, #0
 800402e:	d1a7      	bne.n	8003f80 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8004030:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004032:	7063      	strb	r3, [r4, #1]
 8004034:	e7a4      	b.n	8003f80 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8004036:	2101      	movs	r1, #1
 8004038:	4620      	mov	r0, r4
 800403a:	f000 fadd 	bl	80045f8 <USBH_SetAddress>
 800403e:	4605      	mov	r5, r0
 8004040:	2800      	cmp	r0, #0
 8004042:	d19d      	bne.n	8003f80 <USBH_Process+0x58>
      USBH_Delay(2U);
 8004044:	2002      	movs	r0, #2
 8004046:	f000 feab 	bl	8004da0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800404a:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800404c:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800404e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004050:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8004054:	7921      	ldrb	r1, [r4, #4]
 8004056:	79a2      	ldrb	r2, [r4, #6]
 8004058:	e7e2      	b.n	8004020 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 800405a:	2109      	movs	r1, #9
 800405c:	4620      	mov	r0, r4
 800405e:	f000 fa16 	bl	800448e <USBH_Get_CfgDesc>
 8004062:	2800      	cmp	r0, #0
 8004064:	d18c      	bne.n	8003f80 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004066:	2304      	movs	r3, #4
 8004068:	e7e3      	b.n	8004032 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 800406a:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800406e:	4620      	mov	r0, r4
 8004070:	f000 fa0d 	bl	800448e <USBH_Get_CfgDesc>
 8004074:	2800      	cmp	r0, #0
 8004076:	d183      	bne.n	8003f80 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004078:	2305      	movs	r3, #5
 800407a:	e7da      	b.n	8004032 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800407c:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8004080:	b141      	cbz	r1, 8004094 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8004082:	23ff      	movs	r3, #255	; 0xff
 8004084:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004088:	4620      	mov	r0, r4
 800408a:	f000 fa8e 	bl	80045aa <USBH_Get_StringDesc>
 800408e:	2800      	cmp	r0, #0
 8004090:	f47f af76 	bne.w	8003f80 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004094:	2306      	movs	r3, #6
 8004096:	e7cc      	b.n	8004032 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8004098:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800409c:	b141      	cbz	r1, 80040b0 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800409e:	23ff      	movs	r3, #255	; 0xff
 80040a0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 fa80 	bl	80045aa <USBH_Get_StringDesc>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	f47f af68 	bne.w	8003f80 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80040b0:	2307      	movs	r3, #7
 80040b2:	e7be      	b.n	8004032 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80040b4:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80040b8:	b141      	cbz	r1, 80040cc <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80040ba:	23ff      	movs	r3, #255	; 0xff
 80040bc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 fa72 	bl	80045aa <USBH_Get_StringDesc>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f47f af5a 	bne.w	8003f80 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80040d2:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d009      	beq.n	80040ee <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80040da:	2307      	movs	r3, #7
 80040dc:	e756      	b.n	8003f8c <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80040de:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43f af4c 	beq.w	8003f80 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80040e8:	2101      	movs	r1, #1
 80040ea:	4620      	mov	r0, r4
 80040ec:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80040ee:	2308      	movs	r3, #8
 80040f0:	e74c      	b.n	8003f8c <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80040f2:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80040f6:	4620      	mov	r0, r4
 80040f8:	f000 fa8c 	bl	8004614 <USBH_SetCfg>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f47f af3f 	bne.w	8003f80 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8004102:	2309      	movs	r3, #9
 8004104:	e742      	b.n	8003f8c <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004106:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	d506      	bpl.n	800411c <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800410e:	2101      	movs	r1, #1
 8004110:	4620      	mov	r0, r4
 8004112:	f000 fa8d 	bl	8004630 <USBH_SetFeature>
 8004116:	2800      	cmp	r0, #0
 8004118:	f47f af32 	bne.w	8003f80 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 800411c:	230a      	movs	r3, #10
 800411e:	e735      	b.n	8003f8c <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8004120:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004124:	2b00      	cmp	r3, #0
 8004126:	f43f af2b 	beq.w	8003f80 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004130:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8004134:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8004138:	7919      	ldrb	r1, [r3, #4]
 800413a:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800413c:	bf08      	it	eq
 800413e:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8004142:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004146:	b1d3      	cbz	r3, 800417e <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4620      	mov	r0, r4
 800414c:	4798      	blx	r3
 800414e:	b9b0      	cbnz	r0, 800417e <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8004150:	2306      	movs	r3, #6
 8004152:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004154:	2103      	movs	r1, #3
 8004156:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800415a:	4620      	mov	r0, r4
 800415c:	4798      	blx	r3
 800415e:	e70f      	b.n	8003f80 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8004160:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004164:	b15b      	cbz	r3, 800417e <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	4620      	mov	r0, r4
 800416a:	4798      	blx	r3
 800416c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8004170:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f af03 	bne.w	8003f80 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 800417a:	230b      	movs	r3, #11
 800417c:	e706      	b.n	8003f8c <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 800417e:	230d      	movs	r3, #13
 8004180:	e704      	b.n	8003f8c <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8004182:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004186:	2b00      	cmp	r3, #0
 8004188:	f43f aefa 	beq.w	8003f80 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4620      	mov	r0, r4
 8004190:	4798      	blx	r3
 8004192:	e6f5      	b.n	8003f80 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8004194:	4620      	mov	r0, r4
 8004196:	f7ff fe51 	bl	8003e3c <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800419a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f43f aeee 	beq.w	8003f80 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4620      	mov	r0, r4
 80041a8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80041b0:	e6e6      	b.n	8003f80 <USBH_Process+0x58>

080041b2 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80041b2:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80041b6:	4770      	bx	lr

080041b8 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80041b8:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80041bc:	3201      	adds	r2, #1
 80041be:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80041c2:	7802      	ldrb	r2, [r0, #0]
 80041c4:	2a0b      	cmp	r2, #11
 80041c6:	d104      	bne.n	80041d2 <USBH_LL_IncTimer+0x1a>
 80041c8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80041cc:	b10b      	cbz	r3, 80041d2 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	4718      	bx	r3
 80041d2:	4770      	bx	lr

080041d4 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80041da:	4770      	bx	lr

080041dc <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80041e2:	4770      	bx	lr

080041e4 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80041e4:	7802      	ldrb	r2, [r0, #0]
{
 80041e6:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80041e8:	b94a      	cbnz	r2, 80041fe <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80041ea:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80041ee:	2201      	movs	r2, #1
 80041f0:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80041f4:	b10b      	cbz	r3, 80041fa <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80041f6:	2104      	movs	r1, #4
 80041f8:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80041fa:	2000      	movs	r0, #0
 80041fc:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80041fe:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8004202:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8004204:	bf04      	itt	eq
 8004206:	2202      	moveq	r2, #2
 8004208:	7002      	strbeq	r2, [r0, #0]
 800420a:	e7f6      	b.n	80041fa <USBH_LL_Connect+0x16>

0800420c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800420c:	b510      	push	{r4, lr}
 800420e:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8004210:	f000 fd38 	bl	8004c84 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004214:	7921      	ldrb	r1, [r4, #4]
 8004216:	4620      	mov	r0, r4
 8004218:	f000 fab0 	bl	800477c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800421c:	7961      	ldrb	r1, [r4, #5]
 800421e:	4620      	mov	r0, r4
 8004220:	f000 faac 	bl	800477c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800422a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800422e:	b113      	cbz	r3, 8004236 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004230:	2105      	movs	r1, #5
 8004232:	4620      	mov	r0, r4
 8004234:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004236:	4620      	mov	r0, r4
 8004238:	f000 fd16 	bl	8004c68 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800423c:	2303      	movs	r3, #3
 800423e:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004240:	2000      	movs	r0, #0
 8004242:	bd10      	pop	{r4, pc}

08004244 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8004244:	b513      	push	{r0, r1, r4, lr}
 8004246:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8004248:	7880      	ldrb	r0, [r0, #2]
 800424a:	2801      	cmp	r0, #1
 800424c:	d003      	beq.n	8004256 <USBH_CtlReq+0x12>
 800424e:	2802      	cmp	r0, #2
 8004250:	d008      	beq.n	8004264 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8004252:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8004254:	e004      	b.n	8004260 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8004256:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8004258:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800425a:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 800425c:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800425e:	70a3      	strb	r3, [r4, #2]
}
 8004260:	b002      	add	sp, #8
 8004262:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8004264:	7e23      	ldrb	r3, [r4, #24]
 8004266:	3b01      	subs	r3, #1
 8004268:	2101      	movs	r1, #1
 800426a:	2b0a      	cmp	r3, #10
 800426c:	d8f1      	bhi.n	8004252 <USBH_CtlReq+0xe>
 800426e:	e8df f003 	tbb	[pc, r3]
 8004272:	0f06      	.short	0x0f06
 8004274:	4c40362b 	.word	0x4c40362b
 8004278:	8c806f64 	.word	0x8c806f64
 800427c:	95          	.byte	0x95
 800427d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800427e:	7962      	ldrb	r2, [r4, #5]
 8004280:	f104 0110 	add.w	r1, r4, #16
 8004284:	4620      	mov	r0, r4
 8004286:	f000 f9ef 	bl	8004668 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800428a:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800428c:	7623      	strb	r3, [r4, #24]
 800428e:	e7e0      	b.n	8004252 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004290:	7961      	ldrb	r1, [r4, #5]
 8004292:	4620      	mov	r0, r4
 8004294:	f000 fd64 	bl	8004d60 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004298:	2801      	cmp	r0, #1
 800429a:	d10f      	bne.n	80042bc <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 800429c:	8ae2      	ldrh	r2, [r4, #22]
 800429e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80042a2:	b12a      	cbz	r2, 80042b0 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da01      	bge.n	80042ac <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e7ef      	b.n	800428c <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80042ac:	2305      	movs	r3, #5
 80042ae:	e7ed      	b.n	800428c <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	da01      	bge.n	80042b8 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80042b4:	2309      	movs	r3, #9
 80042b6:	e7e9      	b.n	800428c <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80042b8:	2307      	movs	r3, #7
 80042ba:	e7e7      	b.n	800428c <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80042bc:	2804      	cmp	r0, #4
 80042be:	d001      	beq.n	80042c4 <USBH_CtlReq+0x80>
 80042c0:	2802      	cmp	r0, #2
 80042c2:	d1c6      	bne.n	8004252 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80042c4:	230b      	movs	r3, #11
 80042c6:	e7e1      	b.n	800428c <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80042c8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80042cc:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80042ce:	89a2      	ldrh	r2, [r4, #12]
 80042d0:	7923      	ldrb	r3, [r4, #4]
 80042d2:	68a1      	ldr	r1, [r4, #8]
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f9ef 	bl	80046b8 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80042da:	2304      	movs	r3, #4
 80042dc:	e7d6      	b.n	800428c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80042de:	7921      	ldrb	r1, [r4, #4]
 80042e0:	4620      	mov	r0, r4
 80042e2:	f000 fd3d 	bl	8004d60 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80042e6:	2801      	cmp	r0, #1
 80042e8:	d0e4      	beq.n	80042b4 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80042ea:	2805      	cmp	r0, #5
 80042ec:	d015      	beq.n	800431a <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80042ee:	2804      	cmp	r0, #4
 80042f0:	e7e7      	b.n	80042c2 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80042f2:	7963      	ldrb	r3, [r4, #5]
 80042f4:	9100      	str	r1, [sp, #0]
 80042f6:	89a2      	ldrh	r2, [r4, #12]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	4620      	mov	r0, r4
 80042fc:	f000 f9c5 	bl	800468a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004300:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004304:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004306:	2306      	movs	r3, #6
 8004308:	e7c0      	b.n	800428c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800430a:	7961      	ldrb	r1, [r4, #5]
 800430c:	4620      	mov	r0, r4
 800430e:	f000 fd27 	bl	8004d60 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004312:	2801      	cmp	r0, #1
 8004314:	d0d0      	beq.n	80042b8 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8004316:	2805      	cmp	r0, #5
 8004318:	d105      	bne.n	8004326 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800431a:	2301      	movs	r3, #1
 800431c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800431e:	2300      	movs	r3, #0
 8004320:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8004322:	2003      	movs	r0, #3
 8004324:	e79c      	b.n	8004260 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004326:	2802      	cmp	r0, #2
 8004328:	d0c0      	beq.n	80042ac <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800432a:	2804      	cmp	r0, #4
 800432c:	d191      	bne.n	8004252 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800432e:	230b      	movs	r3, #11
 8004330:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8004332:	2301      	movs	r3, #1
 8004334:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8004336:	2002      	movs	r0, #2
 8004338:	e792      	b.n	8004260 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800433a:	2200      	movs	r2, #0
 800433c:	7923      	ldrb	r3, [r4, #4]
 800433e:	4611      	mov	r1, r2
 8004340:	4620      	mov	r0, r4
 8004342:	f000 f9b9 	bl	80046b8 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004346:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800434a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800434c:	2308      	movs	r3, #8
 800434e:	e79d      	b.n	800428c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004350:	7921      	ldrb	r1, [r4, #4]
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fd04 	bl	8004d60 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004358:	2801      	cmp	r0, #1
 800435a:	d104      	bne.n	8004366 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 800435c:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800435e:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8004360:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8004362:	7620      	strb	r0, [r4, #24]
 8004364:	e77c      	b.n	8004260 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8004366:	2804      	cmp	r0, #4
 8004368:	d0ac      	beq.n	80042c4 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 800436a:	2805      	cmp	r0, #5
 800436c:	f47f af71 	bne.w	8004252 <USBH_CtlReq+0xe>
 8004370:	e7d3      	b.n	800431a <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8004372:	2200      	movs	r2, #0
 8004374:	7963      	ldrb	r3, [r4, #5]
 8004376:	9100      	str	r1, [sp, #0]
 8004378:	4620      	mov	r0, r4
 800437a:	4611      	mov	r1, r2
 800437c:	f000 f985 	bl	800468a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004380:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004384:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004386:	230a      	movs	r3, #10
 8004388:	e780      	b.n	800428c <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800438a:	7961      	ldrb	r1, [r4, #5]
 800438c:	4620      	mov	r0, r4
 800438e:	f000 fce7 	bl	8004d60 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004392:	2801      	cmp	r0, #1
 8004394:	d0e2      	beq.n	800435c <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004396:	2802      	cmp	r0, #2
 8004398:	d1a9      	bne.n	80042ee <USBH_CtlReq+0xaa>
 800439a:	e78b      	b.n	80042b4 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800439c:	7e63      	ldrb	r3, [r4, #25]
 800439e:	3301      	adds	r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	7663      	strb	r3, [r4, #25]
 80043a6:	d806      	bhi.n	80043b6 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 fc6b 	bl	8004c84 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80043ae:	2301      	movs	r3, #1
 80043b0:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80043b2:	70a3      	strb	r3, [r4, #2]
 80043b4:	e74d      	b.n	8004252 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80043b6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80043ba:	2106      	movs	r1, #6
 80043bc:	4620      	mov	r0, r4
 80043be:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	7663      	strb	r3, [r4, #25]
 80043c4:	e7b5      	b.n	8004332 <USBH_CtlReq+0xee>

080043c6 <USBH_GetDescriptor>:
{
 80043c6:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80043c8:	7884      	ldrb	r4, [r0, #2]
{
 80043ca:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80043ce:	2c01      	cmp	r4, #1
 80043d0:	d110      	bne.n	80043f4 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80043d2:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80043d6:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80043d8:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80043dc:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80043e0:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80043e2:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80043e6:	bf0c      	ite	eq
 80043e8:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80043ec:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80043ee:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80043f0:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80043f2:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80043f4:	462a      	mov	r2, r5
 80043f6:	4619      	mov	r1, r3
}
 80043f8:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80043fa:	f7ff bf23 	b.w	8004244 <USBH_CtlReq>

080043fe <USBH_Get_DevDesc>:
{
 80043fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8004400:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8004404:	460d      	mov	r5, r1
 8004406:	9100      	str	r1, [sp, #0]
 8004408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800440c:	2100      	movs	r1, #0
{
 800440e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004410:	f7ff ffd9 	bl	80043c6 <USBH_GetDescriptor>
 8004414:	bbc8      	cbnz	r0, 800448a <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8004416:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800441a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800441e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8004422:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8004426:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800442a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800442e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8004432:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004436:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800443a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800443e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8004442:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8004446:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004448:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800444c:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8004450:	d91b      	bls.n	800448a <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004452:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8004456:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800445a:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800445e:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004462:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8004466:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800446a:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800446e:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004472:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8004476:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800447a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800447e:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004482:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8004486:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800448a:	b003      	add	sp, #12
 800448c:	bd30      	pop	{r4, r5, pc}

0800448e <USBH_Get_CfgDesc>:
{
 800448e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8004492:	f100 051c 	add.w	r5, r0, #28
{
 8004496:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8004498:	9100      	str	r1, [sp, #0]
 800449a:	462b      	mov	r3, r5
 800449c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a0:	2100      	movs	r1, #0
{
 80044a2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80044a4:	f7ff ff8f 	bl	80043c6 <USBH_GetDescriptor>
 80044a8:	bb48      	cbnz	r0, 80044fe <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80044aa:	7f23      	ldrb	r3, [r4, #28]
 80044ac:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80044b0:	7f63      	ldrb	r3, [r4, #29]
 80044b2:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80044b6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80044ba:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80044be:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80044c2:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80044c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80044ca:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80044ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80044d2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80044d6:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80044da:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80044dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80044e0:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80044e4:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80044e8:	d909      	bls.n	80044fe <USBH_Get_CfgDesc+0x70>
 80044ea:	4627      	mov	r7, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	4606      	mov	r6, r0
 80044f0:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80044f2:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80044f6:	2e02      	cmp	r6, #2
 80044f8:	d001      	beq.n	80044fe <USBH_Get_CfgDesc+0x70>
 80044fa:	4596      	cmp	lr, r2
 80044fc:	d802      	bhi.n	8004504 <USBH_Get_CfgDesc+0x76>
}
 80044fe:	b003      	add	sp, #12
 8004500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004504:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004506:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004508:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800450a:	7859      	ldrb	r1, [r3, #1]
 800450c:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800450e:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004510:	d1f1      	bne.n	80044f6 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004512:	7819      	ldrb	r1, [r3, #0]
 8004514:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004518:	7859      	ldrb	r1, [r3, #1]
 800451a:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800451e:	7899      	ldrb	r1, [r3, #2]
 8004520:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004524:	78d9      	ldrb	r1, [r3, #3]
 8004526:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800452a:	7919      	ldrb	r1, [r3, #4]
 800452c:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004530:	7959      	ldrb	r1, [r3, #5]
 8004532:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004536:	7999      	ldrb	r1, [r3, #6]
 8004538:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800453c:	79d9      	ldrb	r1, [r3, #7]
 800453e:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004542:	7a19      	ldrb	r1, [r3, #8]
 8004544:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004548:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 800454c:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800454e:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8004552:	428d      	cmp	r5, r1
 8004554:	d802      	bhi.n	800455c <USBH_Get_CfgDesc+0xce>
 8004556:	3601      	adds	r6, #1
 8004558:	371a      	adds	r7, #26
 800455a:	e7cc      	b.n	80044f6 <USBH_Get_CfgDesc+0x68>
 800455c:	4596      	cmp	lr, r2
 800455e:	d9fa      	bls.n	8004556 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004560:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004562:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004564:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004566:	785d      	ldrb	r5, [r3, #1]
 8004568:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800456a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800456c:	d1ef      	bne.n	800454e <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800456e:	1c4d      	adds	r5, r1, #1
 8004570:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8004574:	4421      	add	r1, r4
 8004576:	f893 9000 	ldrb.w	r9, [r3]
 800457a:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800457e:	f893 9001 	ldrb.w	r9, [r3, #1]
 8004582:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004586:	f893 9002 	ldrb.w	r9, [r3, #2]
 800458a:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800458e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8004592:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004596:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800459a:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800459e:	f893 9006 	ldrb.w	r9, [r3, #6]
 80045a2:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 80045a6:	b2e9      	uxtb	r1, r5
 80045a8:	e7d1      	b.n	800454e <USBH_Get_CfgDesc+0xc0>

080045aa <USBH_Get_StringDesc>:
{
 80045aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80045ac:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80045b0:	4614      	mov	r4, r2
 80045b2:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80045ba:	462b      	mov	r3, r5
 80045bc:	2100      	movs	r1, #0
{
 80045be:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 80045c0:	f7ff ff01 	bl	80043c6 <USBH_GetDescriptor>
 80045c4:	b978      	cbnz	r0, 80045e6 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80045c6:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d10b      	bne.n	80045e6 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80045ce:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80045d2:	3b02      	subs	r3, #2
 80045d4:	42bb      	cmp	r3, r7
 80045d6:	bf28      	it	cs
 80045d8:	463b      	movcs	r3, r7
 80045da:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80045dc:	4602      	mov	r2, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	d803      	bhi.n	80045ea <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80045e2:	2300      	movs	r3, #0
 80045e4:	7023      	strb	r3, [r4, #0]
}
 80045e6:	b003      	add	sp, #12
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80045ea:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80045ec:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80045ee:	7889      	ldrb	r1, [r1, #2]
 80045f0:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80045f4:	b292      	uxth	r2, r2
 80045f6:	e7f2      	b.n	80045de <USBH_Get_StringDesc+0x34>

080045f8 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80045f8:	7883      	ldrb	r3, [r0, #2]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d106      	bne.n	800460c <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80045fe:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004600:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004602:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004604:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004606:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004608:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800460a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800460c:	2200      	movs	r2, #0
 800460e:	4611      	mov	r1, r2
 8004610:	f7ff be18 	b.w	8004244 <USBH_CtlReq>

08004614 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004614:	7883      	ldrb	r3, [r0, #2]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d106      	bne.n	8004628 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800461a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800461c:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800461e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004620:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004622:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004624:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004626:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004628:	2200      	movs	r2, #0
 800462a:	4611      	mov	r1, r2
 800462c:	f7ff be0a 	b.w	8004244 <USBH_CtlReq>

08004630 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004630:	7883      	ldrb	r3, [r0, #2]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d106      	bne.n	8004644 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004636:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004638:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800463a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800463c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800463e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004640:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004642:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004644:	2200      	movs	r2, #0
 8004646:	4611      	mov	r1, r2
 8004648:	f7ff bdfc 	b.w	8004244 <USBH_CtlReq>

0800464c <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800464c:	7883      	ldrb	r3, [r0, #2]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d106      	bne.n	8004660 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004652:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004654:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004656:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004658:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800465a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800465c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800465e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004660:	2200      	movs	r2, #0
 8004662:	4611      	mov	r1, r2
 8004664:	f7ff bdee 	b.w	8004244 <USBH_CtlReq>

08004668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004668:	b530      	push	{r4, r5, lr}
 800466a:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800466c:	2400      	movs	r4, #0
{
 800466e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004670:	2308      	movs	r3, #8
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	9101      	str	r1, [sp, #4]
 8004676:	9403      	str	r4, [sp, #12]
 8004678:	9400      	str	r4, [sp, #0]
 800467a:	4623      	mov	r3, r4
 800467c:	4622      	mov	r2, r4
 800467e:	4629      	mov	r1, r5
 8004680:	f000 fb54 	bl	8004d2c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004684:	4620      	mov	r0, r4
 8004686:	b005      	add	sp, #20
 8004688:	bd30      	pop	{r4, r5, pc}

0800468a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800468a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800468c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004690:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004692:	2d00      	cmp	r5, #0
{
 8004694:	461c      	mov	r4, r3
 8004696:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800469a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800469c:	bf18      	it	ne
 800469e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	2301      	movs	r3, #1
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9101      	str	r1, [sp, #4]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4621      	mov	r1, r4
 80046ae:	f000 fb3d 	bl	8004d2c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80046b2:	2000      	movs	r0, #0
 80046b4:	b005      	add	sp, #20
 80046b6:	bd30      	pop	{r4, r5, pc}

080046b8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80046b8:	b530      	push	{r4, r5, lr}
 80046ba:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046bc:	2400      	movs	r4, #0
{
 80046be:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046c0:	9202      	str	r2, [sp, #8]
 80046c2:	2201      	movs	r2, #1
 80046c4:	9101      	str	r1, [sp, #4]
 80046c6:	9403      	str	r4, [sp, #12]
 80046c8:	9200      	str	r2, [sp, #0]
 80046ca:	4623      	mov	r3, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f000 fb2d 	bl	8004d2c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80046d2:	4620      	mov	r0, r4
 80046d4:	b005      	add	sp, #20
 80046d6:	bd30      	pop	{r4, r5, pc}

080046d8 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80046d8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80046da:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80046de:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80046e0:	2d00      	cmp	r5, #0
{
 80046e2:	461c      	mov	r4, r3
 80046e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046e8:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80046ea:	bf18      	it	ne
 80046ec:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	2301      	movs	r3, #1
 80046f2:	9101      	str	r1, [sp, #4]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2302      	movs	r3, #2
 80046fa:	4621      	mov	r1, r4
 80046fc:	f000 fb16 	bl	8004d2c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004700:	2000      	movs	r0, #0
 8004702:	b005      	add	sp, #20
 8004704:	bd30      	pop	{r4, r5, pc}

08004706 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004706:	b530      	push	{r4, r5, lr}
 8004708:	b085      	sub	sp, #20
 800470a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800470c:	2400      	movs	r4, #0
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	2201      	movs	r2, #1
 8004712:	9101      	str	r1, [sp, #4]
 8004714:	9403      	str	r4, [sp, #12]
 8004716:	9200      	str	r2, [sp, #0]
 8004718:	2302      	movs	r3, #2
 800471a:	4629      	mov	r1, r5
 800471c:	f000 fb06 	bl	8004d2c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004720:	4620      	mov	r0, r4
 8004722:	b005      	add	sp, #20
 8004724:	bd30      	pop	{r4, r5, pc}

08004726 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004726:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004728:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800472c:	9402      	str	r4, [sp, #8]
 800472e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004732:	9401      	str	r4, [sp, #4]
 8004734:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004738:	9400      	str	r4, [sp, #0]
 800473a:	f000 fad1 	bl	8004ce0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 800473e:	2000      	movs	r0, #0
 8004740:	b004      	add	sp, #16
 8004742:	bd10      	pop	{r4, pc}

08004744 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004744:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004746:	f000 fae3 	bl	8004d10 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 800474a:	2000      	movs	r0, #0
 800474c:	bd08      	pop	{r3, pc}

0800474e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800474e:	b530      	push	{r4, r5, lr}
 8004750:	2300      	movs	r3, #0
 8004752:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004756:	f854 5b04 	ldr.w	r5, [r4], #4
 800475a:	042d      	lsls	r5, r5, #16
 800475c:	b2da      	uxtb	r2, r3
 800475e:	d407      	bmi.n	8004770 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004760:	33e0      	adds	r3, #224	; 0xe0
 8004762:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004766:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 800476a:	b292      	uxth	r2, r2
}
 800476c:	b2d0      	uxtb	r0, r2
 800476e:	bd30      	pop	{r4, r5, pc}
 8004770:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004772:	2b0b      	cmp	r3, #11
 8004774:	d1ef      	bne.n	8004756 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800477a:	e7f7      	b.n	800476c <USBH_AllocPipe+0x1e>

0800477c <USBH_FreePipe>:
   if(idx < 11U)
 800477c:	290a      	cmp	r1, #10
 800477e:	bf9f      	itttt	ls
 8004780:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004784:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004788:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800478c:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <btn_event_btn5>:
	lv_scr_load(Tela_RCP);
}

static void btn_event_btn5(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 8004794:	2907      	cmp	r1, #7
{
 8004796:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8004798:	d115      	bne.n	80047c6 <btn_event_btn5+0x32>
		printf("debug: %d\n", lv_btn_get_state(btn));
 800479a:	f008 fb01 	bl	800cda0 <lv_btn_get_state>
 800479e:	4601      	mov	r1, r0
 80047a0:	4809      	ldr	r0, [pc, #36]	; (80047c8 <btn_event_btn5+0x34>)
 80047a2:	f009 fdfd 	bl	800e3a0 <printf>
		if(btn5) {
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <btn_event_btn5+0x38>)
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <btn_event_btn5+0x3c>)
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	b139      	cbz	r1, 80047be <btn_event_btn5+0x2a>
			btn5 = 0;
 80047ae:	2100      	movs	r1, #0
 80047b0:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_PR);
 80047b2:	2103      	movs	r1, #3
		}
		else {
			btn5 = 1;
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 80047b4:	6810      	ldr	r0, [r2, #0]
		}
	}
}
 80047b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 80047ba:	f008 ba2a 	b.w	800cc12 <lv_btn_set_state>
			btn5 = 1;
 80047be:	2101      	movs	r1, #1
 80047c0:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 80047c2:	2102      	movs	r1, #2
 80047c4:	e7f6      	b.n	80047b4 <btn_event_btn5+0x20>
 80047c6:	bd08      	pop	{r3, pc}
 80047c8:	080e4bbc 	.word	0x080e4bbc
 80047cc:	20010198 	.word	0x20010198
 80047d0:	200101b8 	.word	0x200101b8

080047d4 <btn_event_btn4>:

static void btn_event_btn4(lv_obj_t * btn, lv_event_t event)
{
	if(event == LV_EVENT_RELEASED) {
 80047d4:	2907      	cmp	r1, #7
{
 80047d6:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 80047d8:	d115      	bne.n	8004806 <btn_event_btn4+0x32>
		printf("debug: %d\n", lv_btn_get_state(btn));
 80047da:	f008 fae1 	bl	800cda0 <lv_btn_get_state>
 80047de:	4601      	mov	r1, r0
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <btn_event_btn4+0x34>)
 80047e2:	f009 fddd 	bl	800e3a0 <printf>
		if(btn4) {
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <btn_event_btn4+0x38>)
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <btn_event_btn4+0x3c>)
 80047ea:	6819      	ldr	r1, [r3, #0]
 80047ec:	b139      	cbz	r1, 80047fe <btn_event_btn4+0x2a>
			btn4 = 0;
 80047ee:	2100      	movs	r1, #0
 80047f0:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_PR);
 80047f2:	2103      	movs	r1, #3
		}
		else {
			btn4 = 1;
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 80047f4:	6810      	ldr	r0, [r2, #0]
		}
	}
}
 80047f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 80047fa:	f008 ba0a 	b.w	800cc12 <lv_btn_set_state>
			btn4 = 1;
 80047fe:	2101      	movs	r1, #1
 8004800:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 8004802:	2102      	movs	r1, #2
 8004804:	e7f6      	b.n	80047f4 <btn_event_btn4+0x20>
 8004806:	bd08      	pop	{r3, pc}
 8004808:	080e4bbc 	.word	0x080e4bbc
 800480c:	20010194 	.word	0x20010194
 8004810:	200101b4 	.word	0x200101b4

08004814 <simulacare>:
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004814:	2100      	movs	r1, #0
{
 8004816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004818:	4608      	mov	r0, r1
 800481a:	f002 fa01 	bl	8006c20 <lv_obj_create>
 800481e:	4c9d      	ldr	r4, [pc, #628]	; (8004a94 <simulacare+0x280>)
	lv_style_copy(&style_fundo, &lv_style_plain_color);
 8004820:	4d9d      	ldr	r5, [pc, #628]	; (8004a98 <simulacare+0x284>)
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004822:	6020      	str	r0, [r4, #0]
	lv_style_copy(&style_fundo, &lv_style_plain_color);
 8004824:	499d      	ldr	r1, [pc, #628]	; (8004a9c <simulacare+0x288>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 8004826:	4e9e      	ldr	r6, [pc, #632]	; (8004aa0 <simulacare+0x28c>)
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_TGL_PR, &Btn_OFF);
 8004828:	4f9e      	ldr	r7, [pc, #632]	; (8004aa4 <simulacare+0x290>)
	lv_style_copy(&style_fundo, &lv_style_plain_color);
 800482a:	4628      	mov	r0, r5
 800482c:	f003 f826 	bl	800787c <lv_style_copy>
	style_fundo.body.main_color = LV_COLOR_WHITE;
 8004830:	23ff      	movs	r3, #255	; 0xff
	lv_obj_set_style(Tela_RCP, &style_fundo); 					// Configura o estilo criado
 8004832:	4629      	mov	r1, r5
 8004834:	6820      	ldr	r0, [r4, #0]
	style_fundo.body.main_color = LV_COLOR_WHITE;
 8004836:	712b      	strb	r3, [r5, #4]
 8004838:	716b      	strb	r3, [r5, #5]
 800483a:	71ab      	strb	r3, [r5, #6]
 800483c:	71eb      	strb	r3, [r5, #7]
	style_fundo.body.grad_color = LV_COLOR_WHITE;
 800483e:	722b      	strb	r3, [r5, #8]
 8004840:	726b      	strb	r3, [r5, #9]
 8004842:	72ab      	strb	r3, [r5, #10]
 8004844:	72eb      	strb	r3, [r5, #11]
	lv_obj_set_style(Tela_RCP, &style_fundo); 					// Configura o estilo criado
 8004846:	f002 fbbb 	bl	8006fc0 <lv_obj_set_style>
    img_pulmao = lv_img_create(Tela_RCP, NULL);
 800484a:	2100      	movs	r1, #0
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	4d96      	ldr	r5, [pc, #600]	; (8004aa8 <simulacare+0x294>)
 8004850:	f009 f98e 	bl	800db70 <lv_img_create>
    lv_img_set_src(img_pulmao, &Pulmao);
 8004854:	4995      	ldr	r1, [pc, #596]	; (8004aac <simulacare+0x298>)
    img_pulmao = lv_img_create(Tela_RCP, NULL);
 8004856:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_pulmao, &Pulmao);
 8004858:	f009 f8fb 	bl	800da52 <lv_img_set_src>
    lv_img_set_auto_size(img_pulmao, true);
 800485c:	6828      	ldr	r0, [r5, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	f009 f8e7 	bl	800da32 <lv_img_set_auto_size>
    lv_obj_set_pos(img_pulmao, 60, 250);
 8004864:	22fa      	movs	r2, #250	; 0xfa
 8004866:	6828      	ldr	r0, [r5, #0]
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 8004868:	4d91      	ldr	r5, [pc, #580]	; (8004ab0 <simulacare+0x29c>)
    lv_obj_set_pos(img_pulmao, 60, 250);
 800486a:	213c      	movs	r1, #60	; 0x3c
 800486c:	f001 ff61 	bl	8006732 <lv_obj_set_pos>
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 8004870:	2100      	movs	r1, #0
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f009 f97c 	bl	800db70 <lv_img_create>
    lv_img_set_src(img_frequencia, &Frequencia);
 8004878:	498e      	ldr	r1, [pc, #568]	; (8004ab4 <simulacare+0x2a0>)
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 800487a:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_frequencia, &Frequencia);
 800487c:	f009 f8e9 	bl	800da52 <lv_img_set_src>
    lv_img_set_auto_size(img_frequencia, true);
 8004880:	6828      	ldr	r0, [r5, #0]
 8004882:	2101      	movs	r1, #1
 8004884:	f009 f8d5 	bl	800da32 <lv_img_set_auto_size>
    lv_obj_set_pos(img_frequencia, 350, 140);
 8004888:	228c      	movs	r2, #140	; 0x8c
 800488a:	6828      	ldr	r0, [r5, #0]
    img_duracao = lv_img_create(Tela_RCP, NULL);
 800488c:	4d8a      	ldr	r5, [pc, #552]	; (8004ab8 <simulacare+0x2a4>)
    lv_obj_set_pos(img_frequencia, 350, 140);
 800488e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004892:	f001 ff4e 	bl	8006732 <lv_obj_set_pos>
    img_duracao = lv_img_create(Tela_RCP, NULL);
 8004896:	2100      	movs	r1, #0
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f009 f969 	bl	800db70 <lv_img_create>
    lv_img_set_src(img_duracao, &Duracao);
 800489e:	4987      	ldr	r1, [pc, #540]	; (8004abc <simulacare+0x2a8>)
    img_duracao = lv_img_create(Tela_RCP, NULL);
 80048a0:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_duracao, &Duracao);
 80048a2:	f009 f8d6 	bl	800da52 <lv_img_set_src>
    lv_img_set_auto_size(img_duracao, true);
 80048a6:	6828      	ldr	r0, [r5, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	f009 f8c2 	bl	800da32 <lv_img_set_auto_size>
    lv_obj_set_pos(img_duracao, 350, 50);
 80048ae:	2232      	movs	r2, #50	; 0x32
 80048b0:	6828      	ldr	r0, [r5, #0]
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 80048b2:	4d83      	ldr	r5, [pc, #524]	; (8004ac0 <simulacare+0x2ac>)
    lv_obj_set_pos(img_duracao, 350, 50);
 80048b4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80048b8:	f001 ff3b 	bl	8006732 <lv_obj_set_pos>
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 80048bc:	2100      	movs	r1, #0
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	f009 fa80 	bl	800ddc4 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 80048c4:	4632      	mov	r2, r6
 80048c6:	2100      	movs	r1, #0
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 80048c8:	6028      	str	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 80048ca:	f009 fac3 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_Home);
 80048ce:	4632      	mov	r2, r6
 80048d0:	6828      	ldr	r0, [r5, #0]
 80048d2:	2102      	movs	r1, #2
 80048d4:	f009 fabe 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Btn_Home);
 80048d8:	4632      	mov	r2, r6
 80048da:	6828      	ldr	r0, [r5, #0]
 80048dc:	2103      	movs	r1, #3
 80048de:	f009 fab9 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Btn_Home);
 80048e2:	4632      	mov	r2, r6
 80048e4:	6828      	ldr	r0, [r5, #0]
 80048e6:	2101      	movs	r1, #1
 80048e8:	f009 fab4 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 80048ec:	4632      	mov	r2, r6
 80048ee:	6828      	ldr	r0, [r5, #0]
 80048f0:	2100      	movs	r1, #0
 80048f2:	f009 faaf 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_Home);
 80048f6:	4632      	mov	r2, r6
 80048f8:	6828      	ldr	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 80048fa:	4e72      	ldr	r6, [pc, #456]	; (8004ac4 <simulacare+0x2b0>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_Home);
 80048fc:	2104      	movs	r1, #4
 80048fe:	f009 faa9 	bl	800de54 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn1, 380, 325);
 8004902:	f240 1245 	movw	r2, #325	; 0x145
 8004906:	6828      	ldr	r0, [r5, #0]
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 8004908:	4d6f      	ldr	r5, [pc, #444]	; (8004ac8 <simulacare+0x2b4>)
	lv_obj_set_pos(imgbtn1, 380, 325);
 800490a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800490e:	f001 ff10 	bl	8006732 <lv_obj_set_pos>
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 8004912:	2100      	movs	r1, #0
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	f009 fa55 	bl	800ddc4 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 800491a:	4632      	mov	r2, r6
 800491c:	2100      	movs	r1, #0
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 800491e:	6028      	str	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 8004920:	f009 fa98 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_Inicio);
 8004924:	4632      	mov	r2, r6
 8004926:	6828      	ldr	r0, [r5, #0]
 8004928:	2102      	movs	r1, #2
 800492a:	f009 fa93 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Btn_Inicio);
 800492e:	4632      	mov	r2, r6
 8004930:	6828      	ldr	r0, [r5, #0]
 8004932:	2103      	movs	r1, #3
 8004934:	f009 fa8e 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Btn_Inicio);
 8004938:	4632      	mov	r2, r6
 800493a:	6828      	ldr	r0, [r5, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	f009 fa89 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 8004942:	4632      	mov	r2, r6
 8004944:	6828      	ldr	r0, [r5, #0]
 8004946:	2100      	movs	r1, #0
 8004948:	f009 fa84 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_Inicio);
 800494c:	4632      	mov	r2, r6
 800494e:	6828      	ldr	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8004950:	4e5e      	ldr	r6, [pc, #376]	; (8004acc <simulacare+0x2b8>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_Inicio);
 8004952:	2104      	movs	r1, #4
 8004954:	f009 fa7e 	bl	800de54 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn2, 490, 325);
 8004958:	f240 1245 	movw	r2, #325	; 0x145
 800495c:	6828      	ldr	r0, [r5, #0]
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 800495e:	4d5c      	ldr	r5, [pc, #368]	; (8004ad0 <simulacare+0x2bc>)
	lv_obj_set_pos(imgbtn2, 490, 325);
 8004960:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8004964:	f001 fee5 	bl	8006732 <lv_obj_set_pos>
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 8004968:	2100      	movs	r1, #0
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	f009 fa2a 	bl	800ddc4 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8004970:	4632      	mov	r2, r6
 8004972:	2100      	movs	r1, #0
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 8004974:	6028      	str	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8004976:	f009 fa6d 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_TGL_REL, &Btn_Pausa);
 800497a:	4632      	mov	r2, r6
 800497c:	6828      	ldr	r0, [r5, #0]
 800497e:	2102      	movs	r1, #2
 8004980:	f009 fa68 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_TGL_PR, &Btn_Pausa);
 8004984:	4632      	mov	r2, r6
 8004986:	6828      	ldr	r0, [r5, #0]
 8004988:	2103      	movs	r1, #3
 800498a:	f009 fa63 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_PR, &Btn_Pausa);
 800498e:	4632      	mov	r2, r6
 8004990:	6828      	ldr	r0, [r5, #0]
 8004992:	2101      	movs	r1, #1
 8004994:	f009 fa5e 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8004998:	4632      	mov	r2, r6
 800499a:	6828      	ldr	r0, [r5, #0]
 800499c:	2100      	movs	r1, #0
 800499e:	f009 fa59 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_INA, &Btn_Pausa);
 80049a2:	4632      	mov	r2, r6
 80049a4:	6828      	ldr	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Btn_Distorcia);
 80049a6:	4e4b      	ldr	r6, [pc, #300]	; (8004ad4 <simulacare+0x2c0>)
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_INA, &Btn_Pausa);
 80049a8:	2104      	movs	r1, #4
 80049aa:	f009 fa53 	bl	800de54 <lv_imgbtn_set_src>
	lv_obj_set_pos(imgbtn3, 600, 325);
 80049ae:	f240 1245 	movw	r2, #325	; 0x145
 80049b2:	6828      	ldr	r0, [r5, #0]
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 80049b4:	4d48      	ldr	r5, [pc, #288]	; (8004ad8 <simulacare+0x2c4>)
	lv_obj_set_pos(imgbtn3, 600, 325);
 80049b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80049ba:	f001 feba 	bl	8006732 <lv_obj_set_pos>
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 80049be:	2100      	movs	r1, #0
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	f009 f9ff 	bl	800ddc4 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Btn_Distorcia);
 80049c6:	4632      	mov	r2, r6
 80049c8:	2100      	movs	r1, #0
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 80049ca:	6028      	str	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Btn_Distorcia);
 80049cc:	f009 fa42 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_TGL_REL, &Btn_Distorcia);
 80049d0:	4632      	mov	r2, r6
 80049d2:	6828      	ldr	r0, [r5, #0]
 80049d4:	2102      	movs	r1, #2
 80049d6:	f009 fa3d 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_TGL_PR, &Btn_Distorcia_OFF);
 80049da:	6828      	ldr	r0, [r5, #0]
 80049dc:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <simulacare+0x2c8>)
 80049de:	2103      	movs	r1, #3
 80049e0:	f009 fa38 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_PR, &Btn_Distorcia);
 80049e4:	4632      	mov	r2, r6
 80049e6:	6828      	ldr	r0, [r5, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	f009 fa33 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Btn_Distorcia);
 80049ee:	4632      	mov	r2, r6
 80049f0:	6828      	ldr	r0, [r5, #0]
 80049f2:	2100      	movs	r1, #0
 80049f4:	f009 fa2e 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_INA, &Btn_Distorcia);
 80049f8:	4632      	mov	r2, r6
 80049fa:	6828      	ldr	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &Btn_ON);
 80049fc:	4e38      	ldr	r6, [pc, #224]	; (8004ae0 <simulacare+0x2cc>)
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_INA, &Btn_Distorcia);
 80049fe:	2104      	movs	r1, #4
 8004a00:	f009 fa28 	bl	800de54 <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn4, btn_event_btn4);
 8004a04:	6828      	ldr	r0, [r5, #0]
 8004a06:	4937      	ldr	r1, [pc, #220]	; (8004ae4 <simulacare+0x2d0>)
 8004a08:	f001 fda6 	bl	8006558 <lv_obj_set_event_cb>
	lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_PR);
 8004a0c:	6828      	ldr	r0, [r5, #0]
 8004a0e:	2103      	movs	r1, #3
 8004a10:	f008 f8ff 	bl	800cc12 <lv_btn_set_state>
	lv_obj_set_pos(imgbtn4, 350, 230);
 8004a14:	22e6      	movs	r2, #230	; 0xe6
 8004a16:	6828      	ldr	r0, [r5, #0]
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 8004a18:	4d33      	ldr	r5, [pc, #204]	; (8004ae8 <simulacare+0x2d4>)
	lv_obj_set_pos(imgbtn4, 350, 230);
 8004a1a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004a1e:	f001 fe88 	bl	8006732 <lv_obj_set_pos>
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 8004a22:	2100      	movs	r1, #0
 8004a24:	6820      	ldr	r0, [r4, #0]
 8004a26:	f009 f9cd 	bl	800ddc4 <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &Btn_ON);
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	2100      	movs	r1, #0
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 8004a2e:	6028      	str	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &Btn_ON);
 8004a30:	f009 fa10 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_TGL_REL, &Btn_ON);
 8004a34:	4632      	mov	r2, r6
 8004a36:	6828      	ldr	r0, [r5, #0]
 8004a38:	2102      	movs	r1, #2
 8004a3a:	f009 fa0b 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_TGL_PR, &Btn_OFF);
 8004a3e:	463a      	mov	r2, r7
 8004a40:	6828      	ldr	r0, [r5, #0]
 8004a42:	2103      	movs	r1, #3
 8004a44:	f009 fa06 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_PR, &Btn_OFF);
 8004a48:	463a      	mov	r2, r7
 8004a4a:	6828      	ldr	r0, [r5, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	f009 fa01 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &Btn_ON);
 8004a52:	4632      	mov	r2, r6
 8004a54:	6828      	ldr	r0, [r5, #0]
 8004a56:	2100      	movs	r1, #0
 8004a58:	f009 f9fc 	bl	800de54 <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_INA, &Btn_ON);
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	6828      	ldr	r0, [r5, #0]
 8004a60:	2104      	movs	r1, #4
 8004a62:	f009 f9f7 	bl	800de54 <lv_imgbtn_set_src>
 * @param imgbtn pointer to an image button object
 * @param tgl true: enable toggled states, false: disable
 */
static inline void lv_imgbtn_set_toggle(lv_obj_t * imgbtn, bool tgl)
{
    lv_btn_set_toggle(imgbtn, tgl);
 8004a66:	6828      	ldr	r0, [r5, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	f008 f8c9 	bl	800cc00 <lv_btn_set_toggle>
	lv_obj_set_event_cb(imgbtn5, btn_event_btn5);
 8004a6e:	6828      	ldr	r0, [r5, #0]
 8004a70:	491e      	ldr	r1, [pc, #120]	; (8004aec <simulacare+0x2d8>)
 8004a72:	f001 fd71 	bl	8006558 <lv_obj_set_event_cb>
	lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_PR);
 8004a76:	6828      	ldr	r0, [r5, #0]
 8004a78:	2103      	movs	r1, #3
 8004a7a:	f008 f8ca 	bl	800cc12 <lv_btn_set_state>
	lv_obj_set_pos(imgbtn5, 660, 1);
 8004a7e:	6828      	ldr	r0, [r5, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f44f 7125 	mov.w	r1, #660	; 0x294
 8004a86:	f001 fe54 	bl	8006732 <lv_obj_set_pos>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 8004a8a:	6820      	ldr	r0, [r4, #0]
}
 8004a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a90:	f000 bc33 	b.w	80052fa <lv_disp_load_scr>
 8004a94:	20010190 	.word	0x20010190
 8004a98:	200101bc 	.word	0x200101bc
 8004a9c:	20015b6c 	.word	0x20015b6c
 8004aa0:	20000040 	.word	0x20000040
 8004aa4:	20000058 	.word	0x20000058
 8004aa8:	200101a4 	.word	0x200101a4
 8004aac:	20000094 	.word	0x20000094
 8004ab0:	200101a0 	.word	0x200101a0
 8004ab4:	20000088 	.word	0x20000088
 8004ab8:	2001019c 	.word	0x2001019c
 8004abc:	2000007c 	.word	0x2000007c
 8004ac0:	200101a8 	.word	0x200101a8
 8004ac4:	2000004c 	.word	0x2000004c
 8004ac8:	200101ac 	.word	0x200101ac
 8004acc:	20000070 	.word	0x20000070
 8004ad0:	200101b0 	.word	0x200101b0
 8004ad4:	20000028 	.word	0x20000028
 8004ad8:	200101b4 	.word	0x200101b4
 8004adc:	20000034 	.word	0x20000034
 8004ae0:	20000064 	.word	0x20000064
 8004ae4:	080047d5 	.word	0x080047d5
 8004ae8:	200101b8 	.word	0x200101b8
 8004aec:	08004795 	.word	0x08004795

08004af0 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004af0:	2904      	cmp	r1, #4
 8004af2:	d00a      	beq.n	8004b0a <USBH_UserProcess+0x1a>
 8004af4:	2905      	cmp	r1, #5
 8004af6:	d004      	beq.n	8004b02 <USBH_UserProcess+0x12>
 8004af8:	2902      	cmp	r1, #2
 8004afa:	d105      	bne.n	8004b08 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <USBH_UserProcess+0x20>)
 8004afe:	7019      	strb	r1, [r3, #0]
  break;
 8004b00:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8004b02:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8004b04:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <USBH_UserProcess+0x20>)
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	4770      	bx	lr
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	e7fa      	b.n	8004b04 <USBH_UserProcess+0x14>
 8004b0e:	bf00      	nop
 8004b10:	2001020c 	.word	0x2001020c

08004b14 <MX_USB_HOST_Init>:
{
 8004b14:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004b16:	2201      	movs	r2, #1
 8004b18:	490b      	ldr	r1, [pc, #44]	; (8004b48 <MX_USB_HOST_Init+0x34>)
 8004b1a:	480c      	ldr	r0, [pc, #48]	; (8004b4c <MX_USB_HOST_Init+0x38>)
 8004b1c:	f7ff f9b0 	bl	8003e80 <USBH_Init>
 8004b20:	b108      	cbz	r0, 8004b26 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8004b22:	f7fc fbc7 	bl	80012b4 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8004b26:	490a      	ldr	r1, [pc, #40]	; (8004b50 <MX_USB_HOST_Init+0x3c>)
 8004b28:	4808      	ldr	r0, [pc, #32]	; (8004b4c <MX_USB_HOST_Init+0x38>)
 8004b2a:	f7ff f9c0 	bl	8003eae <USBH_RegisterClass>
 8004b2e:	b108      	cbz	r0, 8004b34 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8004b30:	f7fc fbc0 	bl	80012b4 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004b34:	4805      	ldr	r0, [pc, #20]	; (8004b4c <MX_USB_HOST_Init+0x38>)
 8004b36:	f7ff f9ed 	bl	8003f14 <USBH_Start>
 8004b3a:	b118      	cbz	r0, 8004b44 <MX_USB_HOST_Init+0x30>
}
 8004b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004b40:	f7fc bbb8 	b.w	80012b4 <Error_Handler>
 8004b44:	bd08      	pop	{r3, pc}
 8004b46:	bf00      	nop
 8004b48:	08004af1 	.word	0x08004af1
 8004b4c:	20015108 	.word	0x20015108
 8004b50:	20000008 	.word	0x20000008

08004b54 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <MX_USB_HOST_Process+0x8>)
 8004b56:	f7ff b9e7 	b.w	8003f28 <USBH_Process>
 8004b5a:	bf00      	nop
 8004b5c:	20015108 	.word	0x20015108

08004b60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004b60:	b530      	push	{r4, r5, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b66:	2214      	movs	r2, #20
 8004b68:	2100      	movs	r1, #0
 8004b6a:	a803      	add	r0, sp, #12
 8004b6c:	f009 fc03 	bl	800e376 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b76:	d135      	bne.n	8004be4 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b78:	4c1b      	ldr	r4, [pc, #108]	; (8004be8 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004b7a:	481c      	ldr	r0, [pc, #112]	; (8004bec <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	9501      	str	r5, [sp, #4]
 8004b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6323      	str	r3, [r4, #48]	; 0x30
 8004b88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004b92:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b98:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	f7fc fe17 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004b9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004ba2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004baa:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bac:	480f      	ldr	r0, [pc, #60]	; (8004bec <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004bae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb4:	f7fc fe0a 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	6363      	str	r3, [r4, #52]	; 0x34
 8004bc0:	9502      	str	r5, [sp, #8]
 8004bc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc8:	6463      	str	r3, [r4, #68]	; 0x44
 8004bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd0:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004bd2:	2043      	movs	r0, #67	; 0x43
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004bd8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004bda:	f7fc fdb5 	bl	8001748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004bde:	2043      	movs	r0, #67	; 0x43
 8004be0:	f7fc fde6 	bl	80017b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004be4:	b009      	add	sp, #36	; 0x24
 8004be6:	bd30      	pop	{r4, r5, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40020000 	.word	0x40020000

08004bf0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004bf0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bf4:	f7ff bae0 	b.w	80041b8 <USBH_LL_IncTimer>

08004bf8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8004bf8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bfc:	f7ff baf2 	b.w	80041e4 <USBH_LL_Connect>

08004c00 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004c00:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c04:	f7ff bb02 	b.w	800420c <USBH_LL_Disconnect>

08004c08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004c08:	4770      	bx	lr

08004c0a <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004c0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c0e:	f7ff bae1 	b.w	80041d4 <USBH_LL_PortEnabled>

08004c12 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8004c12:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c16:	f7ff bae1 	b.w	80041dc <USBH_LL_PortDisabled>
	...

08004c1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004c1c:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004c1e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004c22:	2b01      	cmp	r3, #1
{
 8004c24:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8004c26:	d11b      	bne.n	8004c60 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004c28:	480e      	ldr	r0, [pc, #56]	; (8004c64 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8004c2a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c32:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004c34:	2208      	movs	r2, #8
 8004c36:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004c38:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004c3a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004c3c:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8004c3e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004c42:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004c44:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004c46:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004c48:	f7fc fef6 	bl	8001a38 <HAL_HCD_Init>
 8004c4c:	b108      	cbz	r0, 8004c52 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8004c4e:	f7fc fb31 	bl	80012b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004c52:	4804      	ldr	r0, [pc, #16]	; (8004c64 <USBH_LL_Init+0x48>)
 8004c54:	f7fd faee 	bl	8002234 <HAL_HCD_GetCurrentFrame>
 8004c58:	4601      	mov	r1, r0
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff faa9 	bl	80041b2 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004c60:	2000      	movs	r0, #0
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	200154d4 	.word	0x200154d4

08004c68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004c68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004c6a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c6e:	f7fd faab 	bl	80021c8 <HAL_HCD_Start>
 8004c72:	2803      	cmp	r0, #3
 8004c74:	bf9a      	itte	ls
 8004c76:	4b02      	ldrls	r3, [pc, #8]	; (8004c80 <USBH_LL_Start+0x18>)
 8004c78:	5c18      	ldrbls	r0, [r3, r0]
 8004c7a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004c7c:	bd08      	pop	{r3, pc}
 8004c7e:	bf00      	nop
 8004c80:	080e4bca 	.word	0x080e4bca

08004c84 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004c84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8004c86:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c8a:	f7fd fab3 	bl	80021f4 <HAL_HCD_Stop>
 8004c8e:	2803      	cmp	r0, #3
 8004c90:	bf9a      	itte	ls
 8004c92:	4b02      	ldrls	r3, [pc, #8]	; (8004c9c <USBH_LL_Stop+0x18>)
 8004c94:	5c18      	ldrbls	r0, [r3, r0]
 8004c96:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004c98:	bd08      	pop	{r3, pc}
 8004c9a:	bf00      	nop
 8004c9c:	080e4bca 	.word	0x080e4bca

08004ca0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004ca0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004ca2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004ca6:	f7fd fac8 	bl	800223a <HAL_HCD_GetCurrentSpeed>
 8004caa:	2802      	cmp	r0, #2
 8004cac:	bf9a      	itte	ls
 8004cae:	4b02      	ldrls	r3, [pc, #8]	; (8004cb8 <USBH_LL_GetSpeed+0x18>)
 8004cb0:	5c18      	ldrbls	r0, [r3, r0]
 8004cb2:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004cb4:	bd08      	pop	{r3, pc}
 8004cb6:	bf00      	nop
 8004cb8:	080e4bc7 	.word	0x080e4bc7

08004cbc <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004cbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004cbe:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004cc2:	f7fd faa9 	bl	8002218 <HAL_HCD_ResetPort>
 8004cc6:	2803      	cmp	r0, #3
 8004cc8:	bf9a      	itte	ls
 8004cca:	4b02      	ldrls	r3, [pc, #8]	; (8004cd4 <USBH_LL_ResetPort+0x18>)
 8004ccc:	5c18      	ldrbls	r0, [r3, r0]
 8004cce:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004cd0:	bd08      	pop	{r3, pc}
 8004cd2:	bf00      	nop
 8004cd4:	080e4bca 	.word	0x080e4bca

08004cd8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004cd8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004cdc:	f7fd baa5 	b.w	800222a <HAL_HCD_HC_GetXferCount>

08004ce0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004ce2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004ce6:	9402      	str	r4, [sp, #8]
 8004ce8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004cec:	9401      	str	r4, [sp, #4]
 8004cee:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004cf2:	9400      	str	r4, [sp, #0]
 8004cf4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004cf8:	f7fc fe54 	bl	80019a4 <HAL_HCD_HC_Init>
 8004cfc:	2803      	cmp	r0, #3
 8004cfe:	bf9a      	itte	ls
 8004d00:	4b02      	ldrls	r3, [pc, #8]	; (8004d0c <USBH_LL_OpenPipe+0x2c>)
 8004d02:	5c18      	ldrbls	r0, [r3, r0]
 8004d04:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004d06:	b004      	add	sp, #16
 8004d08:	bd10      	pop	{r4, pc}
 8004d0a:	bf00      	nop
 8004d0c:	080e4bca 	.word	0x080e4bca

08004d10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004d10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004d12:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d16:	f7fc fe7d 	bl	8001a14 <HAL_HCD_HC_Halt>
 8004d1a:	2803      	cmp	r0, #3
 8004d1c:	bf9a      	itte	ls
 8004d1e:	4b02      	ldrls	r3, [pc, #8]	; (8004d28 <USBH_LL_ClosePipe+0x18>)
 8004d20:	5c18      	ldrbls	r0, [r3, r0]
 8004d22:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004d24:	bd08      	pop	{r3, pc}
 8004d26:	bf00      	nop
 8004d28:	080e4bca 	.word	0x080e4bca

08004d2c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004d2e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004d32:	9403      	str	r4, [sp, #12]
 8004d34:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004d38:	9402      	str	r4, [sp, #8]
 8004d3a:	9c07      	ldr	r4, [sp, #28]
 8004d3c:	9401      	str	r4, [sp, #4]
 8004d3e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004d42:	9400      	str	r4, [sp, #0]
 8004d44:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d48:	f7fc fec0 	bl	8001acc <HAL_HCD_HC_SubmitRequest>
 8004d4c:	2803      	cmp	r0, #3
 8004d4e:	bf9a      	itte	ls
 8004d50:	4b02      	ldrls	r3, [pc, #8]	; (8004d5c <USBH_LL_SubmitURB+0x30>)
 8004d52:	5c18      	ldrbls	r0, [r3, r0]
 8004d54:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004d56:	b004      	add	sp, #16
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	bf00      	nop
 8004d5c:	080e4bca 	.word	0x080e4bca

08004d60 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004d60:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d64:	f7fd ba5b 	b.w	800221e <HAL_HCD_HC_GetURBState>

08004d68 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004d68:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004d6a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d102      	bne.n	8004d78 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8004d72:	4608      	mov	r0, r1
 8004d74:	f000 f816 	bl	8004da4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004d78:	20c8      	movs	r0, #200	; 0xc8
 8004d7a:	f7fc fcbf 	bl	80016fc <HAL_Delay>
  return USBH_OK;
}
 8004d7e:	2000      	movs	r0, #0
 8004d80:	bd08      	pop	{r3, pc}

08004d82 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004d82:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8004d86:	2328      	movs	r3, #40	; 0x28
 8004d88:	fb03 0101 	mla	r1, r3, r1, r0
 8004d8c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004d90:	b11b      	cbz	r3, 8004d9a <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004d92:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8004d96:	2000      	movs	r0, #0
 8004d98:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8004d9a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8004d9e:	e7fa      	b.n	8004d96 <USBH_LL_SetToggle+0x14>

08004da0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004da0:	f7fc bcac 	b.w	80016fc <HAL_Delay>

08004da4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8004da4:	fab0 f280 	clz	r2, r0
 8004da8:	0952      	lsrs	r2, r2, #5
 8004daa:	2101      	movs	r1, #1
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <MX_DriverVbusFS+0x10>)
 8004dae:	f7fc bded 	b.w	800198c <HAL_GPIO_WritePin>
 8004db2:	bf00      	nop
 8004db4:	40020800 	.word	0x40020800

08004db8 <ssd1963_data_mode>:
/**
 * Data mode
 */
static inline void ssd1963_data_mode(void)
{
    if(cmd_mode != false) {
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <ssd1963_data_mode+0xc>)
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	b10a      	cbz	r2, 8004dc2 <ssd1963_data_mode+0xa>
        LV_DRV_DISP_CMD_DATA(SSD1963_DATA_MODE);
        cmd_mode = false;
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	4770      	bx	lr
 8004dc4:	200000a0 	.word	0x200000a0

08004dc8 <ssd1963_data>:
/**
 * Write data
 * @param data the data
 */
static inline void ssd1963_data(uint8_t data)
{
 8004dc8:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8004dca:	4c0e      	ldr	r4, [pc, #56]	; (8004e04 <ssd1963_data+0x3c>)
{
 8004dcc:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dd6:	f7fc fdd9 	bl	800198c <HAL_GPIO_WritePin>
	// Escreve DATA no Port D
	 GPIOD->ODR = (GPIOD->ODR & 0xFFFFFF00) | data;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <ssd1963_data+0x40>)
 8004ddc:	6958      	ldr	r0, [r3, #20]
 8004dde:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004de2:	4328      	orrs	r0, r5
 8004de4:	6158      	str	r0, [r3, #20]
	// Gera Pulso de Escrita
	HAL_GPIO_WritePin(TFT_WR_GPIO_Port, TFT_WR_Pin, GPIO_PIN_RESET);
 8004de6:	2200      	movs	r2, #0
 8004de8:	4620      	mov	r0, r4
 8004dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dee:	f7fc fdcd 	bl	800198c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_WR_GPIO_Port, TFT_WR_Pin, GPIO_PIN_SET);
 8004df2:	4620      	mov	r0, r4
 8004df4:	2201      	movs	r2, #1
 8004df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8004dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(TFT_WR_GPIO_Port, TFT_WR_Pin, GPIO_PIN_SET);
 8004dfe:	f7fc bdc5 	b.w	800198c <HAL_GPIO_WritePin>
 8004e02:	bf00      	nop
 8004e04:	40020400 	.word	0x40020400
 8004e08:	40020c00 	.word	0x40020c00

08004e0c <ssd1963_cmd>:
{
 8004e0c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8004e0e:	4c11      	ldr	r4, [pc, #68]	; (8004e54 <ssd1963_cmd+0x48>)
{
 8004e10:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	4620      	mov	r0, r4
 8004e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e1a:	f7fc fdb7 	bl	800198c <HAL_GPIO_WritePin>
	GPIOD->ODR = (GPIOD->ODR & 0xFFFFFF00) | cmd;
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <ssd1963_cmd+0x4c>)
 8004e20:	6958      	ldr	r0, [r3, #20]
 8004e22:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004e26:	4328      	orrs	r0, r5
 8004e28:	6158      	str	r0, [r3, #20]
	HAL_GPIO_WritePin(TFT_WR_GPIO_Port, TFT_WR_Pin, GPIO_PIN_RESET);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e32:	f7fc fdab 	bl	800198c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_WR_GPIO_Port, TFT_WR_Pin, GPIO_PIN_SET);
 8004e36:	4620      	mov	r0, r4
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e3e:	f7fc fda5 	bl	800198c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8004e42:	4620      	mov	r0, r4
 8004e44:	2201      	movs	r2, #1
 8004e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
 8004e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8004e4e:	f7fc bd9d 	b.w	800198c <HAL_GPIO_WritePin>
 8004e52:	bf00      	nop
 8004e54:	40020400 	.word	0x40020400
 8004e58:	40020c00 	.word	0x40020c00

08004e5c <ssd1963_init>:
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
    cmd_mode = true;
 8004e5e:	4bba      	ldr	r3, [pc, #744]	; (8005148 <ssd1963_init+0x2ec>)
    LV_DRV_DISP_RST(1);
 8004e60:	48ba      	ldr	r0, [pc, #744]	; (800514c <ssd1963_init+0x2f0>)
    cmd_mode = true;
 8004e62:	2401      	movs	r4, #1
    LV_DRV_DISP_RST(1);
 8004e64:	4622      	mov	r2, r4
 8004e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    cmd_mode = true;
 8004e6a:	701c      	strb	r4, [r3, #0]
    LV_DRV_DISP_RST(1);
 8004e6c:	f7fc fd8e 	bl	800198c <HAL_GPIO_WritePin>
    LV_DRV_DELAY_MS(50);
 8004e70:	2032      	movs	r0, #50	; 0x32
 8004e72:	f7fc fc43 	bl	80016fc <HAL_Delay>
    LV_DRV_DISP_RST(0);
 8004e76:	2200      	movs	r2, #0
 8004e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e7c:	48b3      	ldr	r0, [pc, #716]	; (800514c <ssd1963_init+0x2f0>)
 8004e7e:	f7fc fd85 	bl	800198c <HAL_GPIO_WritePin>
    LV_DRV_DELAY_MS(50);
 8004e82:	2032      	movs	r0, #50	; 0x32
 8004e84:	f7fc fc3a 	bl	80016fc <HAL_Delay>
    LV_DRV_DISP_RST(1);
 8004e88:	4622      	mov	r2, r4
 8004e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e8e:	48af      	ldr	r0, [pc, #700]	; (800514c <ssd1963_init+0x2f0>)
 8004e90:	f7fc fd7c 	bl	800198c <HAL_GPIO_WritePin>
    LV_DRV_DELAY_MS(50);
 8004e94:	2032      	movs	r0, #50	; 0x32
 8004e96:	f7fc fc31 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x01);
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7ff ffb6 	bl	8004e0c <ssd1963_cmd>
    LV_DRV_DELAY_MS(20);
 8004ea0:	2014      	movs	r0, #20
 8004ea2:	f7fc fc2b 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x01);
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff ffb0 	bl	8004e0c <ssd1963_cmd>
    LV_DRV_DELAY_MS(20);
 8004eac:	2014      	movs	r0, #20
 8004eae:	f7fc fc25 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x01);
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff ffaa 	bl	8004e0c <ssd1963_cmd>
    LV_DRV_DELAY_MS(20);
 8004eb8:	2014      	movs	r0, #20
 8004eba:	f7fc fc1f 	bl	80016fc <HAL_Delay>
    LV_DRV_DELAY_MS(250);
 8004ebe:	20fa      	movs	r0, #250	; 0xfa
 8004ec0:	f7fc fc1c 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x00E2);    //PLL multiplier, set PLL clock to 120M
 8004ec4:	20e2      	movs	r0, #226	; 0xe2
 8004ec6:	f7ff ffa1 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0023);   //N=0x36 for 6.5M, 0x23 for 10M crystal
 8004eca:	2023      	movs	r0, #35	; 0x23
 8004ecc:	f7ff ff7c 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0002);
 8004ed0:	2002      	movs	r0, #2
 8004ed2:	f7ff ff79 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0004);
 8004ed6:	2004      	movs	r0, #4
 8004ed8:	f7ff ff76 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00E0);    // PLL enable
 8004edc:	20e0      	movs	r0, #224	; 0xe0
 8004ede:	f7ff ff95 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0001);
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ff70 	bl	8004dc8 <ssd1963_data>
    LV_DRV_DELAY_MS(1);
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fc fc07 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x00E0);
 8004eee:	20e0      	movs	r0, #224	; 0xe0
 8004ef0:	f7ff ff8c 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0003);   // now, use PLL output as system clock
 8004ef4:	2003      	movs	r0, #3
 8004ef6:	f7ff ff67 	bl	8004dc8 <ssd1963_data>
    LV_DRV_DELAY_MS(1);
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7fc fbfe 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x0001);    // software reset
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7ff ff83 	bl	8004e0c <ssd1963_cmd>
    LV_DRV_DELAY_MS(1);
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7fc fbf8 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x00E6);    //PLL setting for PCLK, depends on resolution
 8004f0c:	20e6      	movs	r0, #230	; 0xe6
 8004f0e:	f7ff ff7d 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0001);  //HX8257C
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ff58 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0047);  //HX8257C
 8004f18:	2047      	movs	r0, #71	; 0x47
 8004f1a:	f7ff ff55 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00B1);  //HX8257C
 8004f1e:	20b1      	movs	r0, #177	; 0xb1
 8004f20:	f7ff ff52 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00B0);    //LCD SPECIFICATION
 8004f24:	20b0      	movs	r0, #176	; 0xb0
 8004f26:	f7ff ff71 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0020);
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	f7ff ff4c 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0000);
 8004f30:	2000      	movs	r0, #0
 8004f32:	f7ff ff49 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(((SSD1963_HOR_RES - 1) >> 8) & 0X00FF); //Set HDP
 8004f36:	f006 fd71 	bl	800ba1c <lv_disp_get_default>
 8004f3a:	f006 fd75 	bl	800ba28 <lv_disp_get_hor_res>
 8004f3e:	3801      	subs	r0, #1
 8004f40:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004f44:	f7ff ff40 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_HOR_RES - 1) & 0X00FF);
 8004f48:	f006 fd68 	bl	800ba1c <lv_disp_get_default>
 8004f4c:	f006 fd6c 	bl	800ba28 <lv_disp_get_hor_res>
 8004f50:	3801      	subs	r0, #1
 8004f52:	b2c0      	uxtb	r0, r0
 8004f54:	f7ff ff38 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(((SSD1963_VER_RES - 1) >> 8) & 0X00FF); //Set VDP
 8004f58:	f006 fd60 	bl	800ba1c <lv_disp_get_default>
 8004f5c:	f006 fd76 	bl	800ba4c <lv_disp_get_ver_res>
 8004f60:	3801      	subs	r0, #1
 8004f62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004f66:	f7ff ff2f 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_VER_RES - 1) & 0X00FF);
 8004f6a:	f006 fd57 	bl	800ba1c <lv_disp_get_default>
 8004f6e:	f006 fd6d 	bl	800ba4c <lv_disp_get_ver_res>
 8004f72:	3801      	subs	r0, #1
 8004f74:	b2c0      	uxtb	r0, r0
 8004f76:	f7ff ff27 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0000);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7ff ff24 	bl	8004dc8 <ssd1963_data>
    LV_DRV_DELAY_MS(1);//Delay10us(5);
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fc fbbb 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x00B4);            //HSYNC
 8004f86:	20b4      	movs	r0, #180	; 0xb4
 8004f88:	f7ff ff40 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data((SSD1963_HT >> 8) & 0X00FF); //Set HT
 8004f8c:	2004      	movs	r0, #4
 8004f8e:	f7ff ff1b 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_HT & 0X00FF);
 8004f92:	201f      	movs	r0, #31
 8004f94:	f7ff ff18 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_HPS >> 8) & 0X00FF); //Set HPS
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7ff ff15 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_HPS & 0X00FF);
 8004f9e:	20d2      	movs	r0, #210	; 0xd2
 8004fa0:	f7ff ff12 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_HPW);              //Set HPW
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7ff ff0f 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_LPS >> 8) & 0X00FF); //SetLPS
 8004faa:	2000      	movs	r0, #0
 8004fac:	f7ff ff0c 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_LPS & 0X00FF);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f7ff ff09 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0000);
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7ff ff06 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00B6);            //VSYNC
 8004fbc:	20b6      	movs	r0, #182	; 0xb6
 8004fbe:	f7ff ff25 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data((SSD1963_VT >> 8) & 0X00FF); //Set VT
 8004fc2:	2002      	movs	r0, #2
 8004fc4:	f7ff ff00 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_VT & 0X00FF);
 8004fc8:	200c      	movs	r0, #12
 8004fca:	f7ff fefd 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_VPS >> 8) & 0X00FF); //Set VPS
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f7ff fefa 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_VPS & 0X00FF);
 8004fd4:	2022      	movs	r0, #34	; 0x22
 8004fd6:	f7ff fef7 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_VPW);              //Set VPW
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7ff fef4 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_FPS >> 8) & 0X00FF); //Set FPS
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f7ff fef1 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(SSD1963_FPS & 0X00FF);
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7ff feee 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00B8);
 8004fec:	20b8      	movs	r0, #184	; 0xb8
 8004fee:	f7ff ff0d 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0007);    //GPIO is controlled by host GPIO[3:0]=output   GPIO[0]=1  LCD ON  GPIO[0]=1  LCD OFF
 8004ff2:	2007      	movs	r0, #7
 8004ff4:	f7ff fee8 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0001);    //GPIO0 normal
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f7ff fee5 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00BA);
 8004ffe:	20ba      	movs	r0, #186	; 0xba
 8005000:	f7ff ff04 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x000F);    //GPIO[0] out 1 --- LCD display on/off control PIN
 8005004:	200f      	movs	r0, #15
 8005006:	f7ff fedf 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x0036);    //rotation
 800500a:	2036      	movs	r0, #54	; 0x36
 800500c:	f7ff fefe 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0010);   //RGB=BGR
 8005010:	2010      	movs	r0, #16
 8005012:	f7ff fed9 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x003A);    //Set the current pixel format for RGB image data
 8005016:	203a      	movs	r0, #58	; 0x3a
 8005018:	f7ff fef8 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0050);   //16-bit/pixel
 800501c:	2050      	movs	r0, #80	; 0x50
 800501e:	f7ff fed3 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00F0);    //Pixel Data Interface Format
 8005022:	20f0      	movs	r0, #240	; 0xf0
 8005024:	f7ff fef2 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0000);   //16-bit(565 format) data
 8005028:	2000      	movs	r0, #0
 800502a:	f7ff fecd 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00BC);
 800502e:	20bc      	movs	r0, #188	; 0xbc
 8005030:	f7ff feec 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x0040);   //contrast value
 8005034:	2040      	movs	r0, #64	; 0x40
 8005036:	f7ff fec7 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0080);   //brightness value
 800503a:	2080      	movs	r0, #128	; 0x80
 800503c:	f7ff fec4 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0040);   //saturation value
 8005040:	2040      	movs	r0, #64	; 0x40
 8005042:	f7ff fec1 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x0001);   //Post Processor Enable
 8005046:	4620      	mov	r0, r4
 8005048:	f7ff febe 	bl	8004dc8 <ssd1963_data>
    LV_DRV_DELAY_MS(1);
 800504c:	4620      	mov	r0, r4
 800504e:	f7fc fb55 	bl	80016fc <HAL_Delay>
    ssd1963_cmd(0x2a);			//SET page address
 8005052:	202a      	movs	r0, #42	; 0x2a
 8005054:	f7ff feda 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x00);			//SET start page address
 8005058:	2000      	movs	r0, #0
 800505a:	f7ff feb5 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00);
 800505e:	2000      	movs	r0, #0
 8005060:	f7ff feb2 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_HOR_RES - 1) >> 8);		//SET end page address
 8005064:	f006 fcda 	bl	800ba1c <lv_disp_get_default>
 8005068:	f006 fcde 	bl	800ba28 <lv_disp_get_hor_res>
 800506c:	3801      	subs	r0, #1
 800506e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005072:	f7ff fea9 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_HOR_RES - 1) & 0xFF);
 8005076:	f006 fcd1 	bl	800ba1c <lv_disp_get_default>
 800507a:	f006 fcd5 	bl	800ba28 <lv_disp_get_hor_res>
 800507e:	3801      	subs	r0, #1
 8005080:	b2c0      	uxtb	r0, r0
 8005082:	f7ff fea1 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x2b);			//SET column address
 8005086:	202b      	movs	r0, #43	; 0x2b
 8005088:	f7ff fec0 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x00);				//SET start column address
 800508c:	2000      	movs	r0, #0
 800508e:	f7ff fe9b 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00);
 8005092:	2000      	movs	r0, #0
 8005094:	f7ff fe98 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_VER_RES - 1) >> 8);		//SET end column address
 8005098:	f006 fcc0 	bl	800ba1c <lv_disp_get_default>
 800509c:	f006 fcd6 	bl	800ba4c <lv_disp_get_ver_res>
 80050a0:	3801      	subs	r0, #1
 80050a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80050a6:	f7ff fe8f 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((SSD1963_VER_RES - 1) & 0xFF);
 80050aa:	f006 fcb7 	bl	800ba1c <lv_disp_get_default>
 80050ae:	f006 fccd 	bl	800ba4c <lv_disp_get_ver_res>
 80050b2:	3801      	subs	r0, #1
 80050b4:	b2c0      	uxtb	r0, r0
 80050b6:	f7ff fe87 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x2c);
 80050ba:	202c      	movs	r0, #44	; 0x2c
 80050bc:	f7ff fea6 	bl	8004e0c <ssd1963_cmd>
    for (uint16_t x=0; x < SSD1963_HOR_RES; x++)
 80050c0:	2500      	movs	r5, #0
 80050c2:	f006 fcab 	bl	800ba1c <lv_disp_get_default>
 80050c6:	f006 fcaf 	bl	800ba28 <lv_disp_get_hor_res>
 80050ca:	b2ab      	uxth	r3, r5
 80050cc:	4283      	cmp	r3, r0
 80050ce:	da15      	bge.n	80050fc <ssd1963_init+0x2a0>
 80050d0:	2400      	movs	r4, #0
 80050d2:	e008      	b.n	80050e6 <ssd1963_init+0x28a>
    	  ssd1963_data((0x000000)>>16); 		// color is red
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7ff fe77 	bl	8004dc8 <ssd1963_data>
    	  ssd1963_data((0x000000)>>8);  		// color is green
 80050da:	2000      	movs	r0, #0
 80050dc:	f7ff fe74 	bl	8004dc8 <ssd1963_data>
    	  ssd1963_data(0x000000);  		 		// color is blue
 80050e0:	2000      	movs	r0, #0
 80050e2:	f7ff fe71 	bl	8004dc8 <ssd1963_data>
      for (uint16_t y= 0; y < SSD1963_VER_RES; y++)
 80050e6:	f006 fc99 	bl	800ba1c <lv_disp_get_default>
 80050ea:	f006 fcaf 	bl	800ba4c <lv_disp_get_ver_res>
 80050ee:	b2a6      	uxth	r6, r4
 80050f0:	4286      	cmp	r6, r0
 80050f2:	f104 0401 	add.w	r4, r4, #1
 80050f6:	dbed      	blt.n	80050d4 <ssd1963_init+0x278>
 80050f8:	3501      	adds	r5, #1
 80050fa:	e7e2      	b.n	80050c2 <ssd1963_init+0x266>
    ssd1963_cmd(0x29); //display on
 80050fc:	2029      	movs	r0, #41	; 0x29
 80050fe:	f7ff fe85 	bl	8004e0c <ssd1963_cmd>
    ssd1963_cmd(0xBE); //set PWM for B/L
 8005102:	20be      	movs	r0, #190	; 0xbe
 8005104:	f7ff fe82 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x06);
 8005108:	2006      	movs	r0, #6
 800510a:	f7ff fe5d 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0xF0);
 800510e:	20f0      	movs	r0, #240	; 0xf0
 8005110:	f7ff fe5a 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x01);
 8005114:	2001      	movs	r0, #1
 8005116:	f7ff fe57 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0xf0);
 800511a:	20f0      	movs	r0, #240	; 0xf0
 800511c:	f7ff fe54 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00);
 8005120:	2000      	movs	r0, #0
 8005122:	f7ff fe51 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00);
 8005126:	2000      	movs	r0, #0
 8005128:	f7ff fe4e 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x00d0);
 800512c:	20d0      	movs	r0, #208	; 0xd0
 800512e:	f7ff fe6d 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(0x000d);
 8005132:	200d      	movs	r0, #13
 8005134:	f7ff fe48 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x2c);
 8005138:	202c      	movs	r0, #44	; 0x2c
 800513a:	f7ff fe67 	bl	8004e0c <ssd1963_cmd>
    LV_DRV_DELAY_MS(30);
 800513e:	201e      	movs	r0, #30
}
 8005140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LV_DRV_DELAY_MS(30);
 8005144:	f7fc bada 	b.w	80016fc <HAL_Delay>
 8005148:	200000a0 	.word	0x200000a0
 800514c:	40020400 	.word	0x40020400

08005150 <ssd1963_flush>:
    if(area->x2 < 0) return;
 8005150:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005154:	2b00      	cmp	r3, #0
{
 8005156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515a:	4606      	mov	r6, r0
 800515c:	468a      	mov	sl, r1
 800515e:	4617      	mov	r7, r2
    if(area->x2 < 0) return;
 8005160:	db7d      	blt.n	800525e <ssd1963_flush+0x10e>
    if(area->y2 < 0) return;
 8005162:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005166:	2b00      	cmp	r3, #0
 8005168:	db79      	blt.n	800525e <ssd1963_flush+0x10e>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
 800516a:	f006 fc57 	bl	800ba1c <lv_disp_get_default>
 800516e:	f006 fc5b 	bl	800ba28 <lv_disp_get_hor_res>
 8005172:	f9ba 3000 	ldrsh.w	r3, [sl]
 8005176:	4283      	cmp	r3, r0
 8005178:	da71      	bge.n	800525e <ssd1963_flush+0x10e>
    if(area->y1 > SSD1963_VER_RES - 1) return;
 800517a:	f006 fc4f 	bl	800ba1c <lv_disp_get_default>
 800517e:	f006 fc65 	bl	800ba4c <lv_disp_get_ver_res>
 8005182:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
 8005186:	42a8      	cmp	r0, r5
 8005188:	dd69      	ble.n	800525e <ssd1963_flush+0x10e>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 800518a:	f9ba 4000 	ldrsh.w	r4, [sl]
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 800518e:	f006 fc45 	bl	800ba1c <lv_disp_get_default>
 8005192:	f006 fc49 	bl	800ba28 <lv_disp_get_hor_res>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 8005196:	ea24 79e4 	bic.w	r9, r4, r4, asr #31
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 800519a:	f9ba 4004 	ldrsh.w	r4, [sl, #4]
 800519e:	42a0      	cmp	r0, r4
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
 80051a0:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 80051a4:	dc04      	bgt.n	80051b0 <ssd1963_flush+0x60>
 80051a6:	f006 fc39 	bl	800ba1c <lv_disp_get_default>
 80051aa:	f006 fc3d 	bl	800ba28 <lv_disp_get_hor_res>
 80051ae:	1e44      	subs	r4, r0, #1
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
 80051b0:	f006 fc34 	bl	800ba1c <lv_disp_get_default>
 80051b4:	f006 fc4a 	bl	800ba4c <lv_disp_get_ver_res>
 80051b8:	f9ba 5006 	ldrsh.w	r5, [sl, #6]
 80051bc:	42a8      	cmp	r0, r5
 80051be:	dc04      	bgt.n	80051ca <ssd1963_flush+0x7a>
 80051c0:	f006 fc2c 	bl	800ba1c <lv_disp_get_default>
 80051c4:	f006 fc42 	bl	800ba4c <lv_disp_get_ver_res>
 80051c8:	1e45      	subs	r5, r0, #1
    ssd1963_cmd(0x002A);
 80051ca:	202a      	movs	r0, #42	; 0x2a
 80051cc:	f7ff fe1e 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data(act_x1 >> 8);
 80051d0:	f3c9 2007 	ubfx	r0, r9, #8, #8
 80051d4:	f7ff fdf8 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00FF & act_x1);
 80051d8:	fa5f f089 	uxtb.w	r0, r9
 80051dc:	f7ff fdf4 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(act_x2 >> 8);
 80051e0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80051e4:	f7ff fdf0 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00FF & act_x2);
 80051e8:	b2e0      	uxtb	r0, r4
 80051ea:	f7ff fded 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x002B);
 80051ee:	202b      	movs	r0, #43	; 0x2b
 80051f0:	f7ff fe0c 	bl	8004e0c <ssd1963_cmd>
    ssd1963_data((act_y1 + OFFSET_Y) >> 8);
 80051f4:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80051f8:	f7ff fde6 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00FF & (act_y1 + OFFSET_Y));
 80051fc:	fa5f f088 	uxtb.w	r0, r8
 8005200:	f7ff fde2 	bl	8004dc8 <ssd1963_data>
    ssd1963_data((act_y2 + OFFSET_Y) >> 8);
 8005204:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8005208:	f7ff fdde 	bl	8004dc8 <ssd1963_data>
    ssd1963_data(0x00FF & (act_y2 + OFFSET_Y));
 800520c:	b2e8      	uxtb	r0, r5
 800520e:	f7ff fddb 	bl	8004dc8 <ssd1963_data>
    ssd1963_cmd(0x2c);
 8005212:	202c      	movs	r0, #44	; 0x2c
    uint32_t size = (act_x2 - act_x1 + 1) * (act_y2 - act_y1 + 1);
 8005214:	eba5 0508 	sub.w	r5, r5, r8
    ssd1963_cmd(0x2c);
 8005218:	f7ff fdf8 	bl	8004e0c <ssd1963_cmd>
    uint32_t size = (act_x2 - act_x1 + 1) * (act_y2 - act_y1 + 1);
 800521c:	eba4 0409 	sub.w	r4, r4, r9
    ssd1963_data_mode();
 8005220:	f7ff fdca 	bl	8004db8 <ssd1963_data_mode>
    uint32_t size = (act_x2 - act_x1 + 1) * (act_y2 - act_y1 + 1);
 8005224:	fb05 4404 	mla	r4, r5, r4, r4
    for(uint32_t i = 0; i <= size-1; i++) {
 8005228:	f04f 0800 	mov.w	r8, #0
 800522c:	442c      	add	r4, r5
 800522e:	45a0      	cmp	r8, r4
 8005230:	f107 0704 	add.w	r7, r7, #4
 8005234:	d904      	bls.n	8005240 <ssd1963_flush+0xf0>
    lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 8005236:	4630      	mov	r0, r6
}
 8005238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800523c:	f006 bc22 	b.w	800ba84 <lv_disp_flush_ready>
    	ssd1963_data(color_p->ch.red); 			// color red
 8005240:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8005244:	f7ff fdc0 	bl	8004dc8 <ssd1963_data>
    	ssd1963_data(color_p->ch.green); 		// color green
 8005248:	f817 0c03 	ldrb.w	r0, [r7, #-3]
 800524c:	f7ff fdbc 	bl	8004dc8 <ssd1963_data>
    	ssd1963_data(color_p->ch.blue); 		// color blue
 8005250:	f817 0c04 	ldrb.w	r0, [r7, #-4]
 8005254:	f7ff fdb8 	bl	8004dc8 <ssd1963_data>
    for(uint32_t i = 0; i <= size-1; i++) {
 8005258:	f108 0801 	add.w	r8, r8, #1
 800525c:	e7e7      	b.n	800522e <ssd1963_flush+0xde>
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005264 <xpt2046_read>:
 * Get the current position and state of the touchpad
 * @param data store the read data here
 * @return false: because no ore data to be read
 */
bool xpt2046_read(lv_indev_data_t * data)
{
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int16_t y = 0;

    uint8_t irq = LV_DRV_INDEV_IRQ_READ;

    if(irq == 0) {
        LV_DRV_INDEV_SPI_CS(0);
 8005266:	2200      	movs	r2, #0
 8005268:	2110      	movs	r1, #16
{
 800526a:	4606      	mov	r6, r0
        LV_DRV_INDEV_SPI_CS(0);
 800526c:	481b      	ldr	r0, [pc, #108]	; (80052dc <xpt2046_read+0x78>)
 800526e:	f7fc fb8d 	bl	800198c <HAL_GPIO_WritePin>
static void xpt2046_avg(int16_t * x, int16_t * y)
{
    /*Shift out the oldest data*/
    uint8_t i;
    for(i = XPT2046_AVG - 1; i > 0 ; i--) {
        avg_buf_x[i] = avg_buf_x[i - 1];
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <xpt2046_read+0x7c>)
 8005274:	8893      	ldrh	r3, [r2, #4]
 8005276:	80d3      	strh	r3, [r2, #6]
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <xpt2046_read+0x80>)
 800527a:	8899      	ldrh	r1, [r3, #4]
 800527c:	80d9      	strh	r1, [r3, #6]
        avg_buf_x[i] = avg_buf_x[i - 1];
 800527e:	8851      	ldrh	r1, [r2, #2]
 8005280:	8091      	strh	r1, [r2, #4]
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005282:	8859      	ldrh	r1, [r3, #2]
 8005284:	8099      	strh	r1, [r3, #4]
        avg_buf_x[i] = avg_buf_x[i - 1];
 8005286:	8811      	ldrh	r1, [r2, #0]
 8005288:	8051      	strh	r1, [r2, #2]
        avg_buf_y[i] = avg_buf_y[i - 1];
 800528a:	8819      	ldrh	r1, [r3, #0]
 800528c:	8059      	strh	r1, [r3, #2]
    }

    /*Insert the new point*/
    avg_buf_x[0] = *x;
 800528e:	2100      	movs	r1, #0
 8005290:	8011      	strh	r1, [r2, #0]
    avg_buf_y[0] = *y;
 8005292:	8019      	strh	r1, [r3, #0]
    if(avg_last < XPT2046_AVG) avg_last++;
 8005294:	4914      	ldr	r1, [pc, #80]	; (80052e8 <xpt2046_read+0x84>)
 8005296:	7808      	ldrb	r0, [r1, #0]
 8005298:	2803      	cmp	r0, #3
 800529a:	bf9c      	itt	ls
 800529c:	3001      	addls	r0, #1
 800529e:	7008      	strbls	r0, [r1, #0]

    /*Sum the x and y coordinates*/
    int32_t x_sum = 0;
    int32_t y_sum = 0;
    for(i = 0; i < avg_last ; i++) {
 80052a0:	780f      	ldrb	r7, [r1, #0]
 80052a2:	2100      	movs	r1, #0
 80052a4:	460c      	mov	r4, r1
 80052a6:	460d      	mov	r5, r1
 80052a8:	b2c8      	uxtb	r0, r1
 80052aa:	4287      	cmp	r7, r0
 80052ac:	d80d      	bhi.n	80052ca <xpt2046_read+0x66>
        LV_DRV_INDEV_SPI_CS(1);
 80052ae:	2201      	movs	r2, #1
 80052b0:	2110      	movs	r1, #16
 80052b2:	480a      	ldr	r0, [pc, #40]	; (80052dc <xpt2046_read+0x78>)
 80052b4:	f7fc fb6a 	bl	800198c <HAL_GPIO_WritePin>
        x_sum += avg_buf_x[i];
        y_sum += avg_buf_y[i];
    }

    /*Normalize the sums*/
    (*x) = (int32_t)x_sum / avg_last;
 80052b8:	fb95 f5f7 	sdiv	r5, r5, r7
    (*y) = (int32_t)y_sum / avg_last;
 80052bc:	fb94 f4f7 	sdiv	r4, r4, r7
    data->state = valid == false ? LV_INDEV_STATE_REL : LV_INDEV_STATE_PR;
 80052c0:	2001      	movs	r0, #1
 80052c2:	73b0      	strb	r0, [r6, #14]
    (*x) = (int32_t)x_sum / avg_last;
 80052c4:	8035      	strh	r5, [r6, #0]
    (*y) = (int32_t)y_sum / avg_last;
 80052c6:	8074      	strh	r4, [r6, #2]
}
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        x_sum += avg_buf_x[i];
 80052ca:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 80052ce:	4405      	add	r5, r0
        y_sum += avg_buf_y[i];
 80052d0:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
 80052d4:	3101      	adds	r1, #1
 80052d6:	4404      	add	r4, r0
 80052d8:	e7e6      	b.n	80052a8 <xpt2046_read+0x44>
 80052da:	bf00      	nop
 80052dc:	40020800 	.word	0x40020800
 80052e0:	2001579a 	.word	0x2001579a
 80052e4:	200157a2 	.word	0x200157a2
 80052e8:	20015798 	.word	0x20015798

080052ec <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80052ec:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80052ee:	b910      	cbnz	r0, 80052f6 <lv_disp_get_scr_act+0xa>
 80052f0:	f006 fb94 	bl	800ba1c <lv_disp_get_default>
    if(!disp) {
 80052f4:	b100      	cbz	r0, 80052f8 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 80052f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80052f8:	bd08      	pop	{r3, pc}

080052fa <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 80052fe:	f001 f985 	bl	800660c <lv_obj_get_disp>

    d->act_scr = scr;
 8005302:	6384      	str	r4, [r0, #56]	; 0x38

    lv_obj_invalidate(scr);
 8005304:	4620      	mov	r0, r4
}
 8005306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 800530a:	f001 b9a5 	b.w	8006658 <lv_obj_invalidate>

0800530e <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800530e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8005310:	b910      	cbnz	r0, 8005318 <lv_disp_get_layer_top+0xa>
 8005312:	f006 fb83 	bl	800ba1c <lv_disp_get_default>
    if(!disp) {
 8005316:	b100      	cbz	r0, 800531a <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8005318:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800531a:	bd08      	pop	{r3, pc}

0800531c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800531c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800531e:	b910      	cbnz	r0, 8005326 <lv_disp_get_layer_sys+0xa>
 8005320:	f006 fb7c 	bl	800ba1c <lv_disp_get_default>
    if(!disp) {
 8005324:	b100      	cbz	r0, 8005328 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 8005326:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005328:	bd08      	pop	{r3, pc}

0800532a <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800532a:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800532c:	2400      	movs	r4, #0
    while(i != NULL) {
 800532e:	b928      	cbnz	r0, 800533c <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8005330:	b16c      	cbz	r4, 800534e <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8005332:	4620      	mov	r0, r4
    }
}
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 8005338:	f001 b9de 	b.w	80066f8 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800533c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005340:	f013 0f20 	tst.w	r3, #32
 8005344:	bf18      	it	ne
 8005346:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 8005348:	f001 fe16 	bl	8006f78 <lv_obj_get_parent>
 800534c:	e7ef      	b.n	800532e <obj_to_foreground+0x4>
 800534e:	bd10      	pop	{r4, pc}

08005350 <focus_next_core.part.1>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 8005354:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8005356:	4604      	mov	r4, r0
 8005358:	4689      	mov	r9, r1
 800535a:	4692      	mov	sl, r2
    bool can_begin           = true;
 800535c:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800535e:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 8005360:	2d00      	cmp	r5, #0
 8005362:	d14d      	bne.n	8005400 <focus_next_core.part.1+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8005364:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005368:	06db      	lsls	r3, r3, #27
 800536a:	d403      	bmi.n	8005374 <focus_next_core.part.1+0x24>
 800536c:	2e00      	cmp	r6, #0
 800536e:	d056      	beq.n	800541e <focus_next_core.part.1+0xce>
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 8005374:	2f00      	cmp	r7, #0
 8005376:	d054      	beq.n	8005422 <focus_next_core.part.1+0xd2>
                obj_next  = begin(&group->obj_ll);
 8005378:	4620      	mov	r0, r4
 800537a:	47c8      	blx	r9
 800537c:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 800537e:	2e00      	cmp	r6, #0
 8005380:	d13a      	bne.n	80053f8 <focus_next_core.part.1+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8005382:	2d00      	cmp	r5, #0
 8005384:	d04d      	beq.n	8005422 <focus_next_core.part.1+0xd2>
 8005386:	462e      	mov	r6, r5
 8005388:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 800538a:	6828      	ldr	r0, [r5, #0]
 800538c:	f001 fea6 	bl	80070dc <lv_obj_get_hidden>
 8005390:	4680      	mov	r8, r0
 8005392:	2800      	cmp	r0, #0
 8005394:	d1e4      	bne.n	8005360 <focus_next_core.part.1+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	42ab      	cmp	r3, r5
 800539a:	d042      	beq.n	8005422 <focus_next_core.part.1+0xd2>
    if(group->obj_focus) {
 800539c:	b183      	cbz	r3, 80053c0 <focus_next_core.part.1+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	4642      	mov	r2, r8
 80053a2:	69c3      	ldr	r3, [r0, #28]
 80053a4:	2110      	movs	r1, #16
 80053a6:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80053a8:	68e3      	ldr	r3, [r4, #12]
 80053aa:	4642      	mov	r2, r8
 80053ac:	210d      	movs	r1, #13
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	f001 f918 	bl	80065e4 <lv_event_send>
        if(res != LV_RES_OK) return;
 80053b4:	2801      	cmp	r0, #1
 80053b6:	d134      	bne.n	8005422 <focus_next_core.part.1+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	f001 f94c 	bl	8006658 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80053c0:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 80053c2:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80053c4:	69c3      	ldr	r3, [r0, #28]
 80053c6:	2200      	movs	r2, #0
 80053c8:	210f      	movs	r1, #15
 80053ca:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 80053cc:	68e3      	ldr	r3, [r4, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	210c      	movs	r1, #12
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	f001 f906 	bl	80065e4 <lv_event_send>
    if(res != LV_RES_OK) return;
 80053d8:	2801      	cmp	r0, #1
 80053da:	d122      	bne.n	8005422 <focus_next_core.part.1+0xd2>
    obj_to_foreground(*group->obj_focus);
 80053dc:	68e3      	ldr	r3, [r4, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	f7ff ffa3 	bl	800532a <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 80053e4:	68e3      	ldr	r3, [r4, #12]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	f001 f936 	bl	8006658 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 80053ec:	69a3      	ldr	r3, [r4, #24]
 80053ee:	b1c3      	cbz	r3, 8005422 <focus_next_core.part.1+0xd2>
 80053f0:	4620      	mov	r0, r4
}
 80053f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 80053f6:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 80053f8:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 80053fa:	2d00      	cmp	r5, #0
 80053fc:	d1c5      	bne.n	800538a <focus_next_core.part.1+0x3a>
 80053fe:	e7b1      	b.n	8005364 <focus_next_core.part.1+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 8005400:	4629      	mov	r1, r5
 8005402:	4620      	mov	r0, r4
 8005404:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 8005406:	2e00      	cmp	r6, #0
 8005408:	bf08      	it	eq
 800540a:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 800540c:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 800540e:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 8005410:	d1f3      	bne.n	80053fa <focus_next_core.part.1+0xaa>
 8005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 8005416:	4620      	mov	r0, r4
 8005418:	47c8      	blx	r9
 800541a:	4605      	mov	r5, r0
 800541c:	e7b1      	b.n	8005382 <focus_next_core.part.1+0x32>
                if(!can_begin) return;
 800541e:	2f00      	cmp	r7, #0
 8005420:	d1f9      	bne.n	8005416 <focus_next_core.part.1+0xc6>
 8005422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005428 <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8005428:	2170      	movs	r1, #112	; 0x70
 800542a:	4801      	ldr	r0, [pc, #4]	; (8005430 <lv_group_init+0x8>)
 800542c:	f006 be45 	b.w	800c0ba <lv_ll_init>
 8005430:	20015c10 	.word	0x20015c10

08005434 <lv_group_focus_next>:
    if(group->frozen) return;
 8005434:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005438:	07db      	lsls	r3, r3, #31
 800543a:	d403      	bmi.n	8005444 <lv_group_focus_next+0x10>
 800543c:	4a02      	ldr	r2, [pc, #8]	; (8005448 <lv_group_focus_next+0x14>)
 800543e:	4903      	ldr	r1, [pc, #12]	; (800544c <lv_group_focus_next+0x18>)
 8005440:	f7ff bf86 	b.w	8005350 <focus_next_core.part.1>
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	0800c153 	.word	0x0800c153
 800544c:	0800c147 	.word	0x0800c147

08005450 <lv_group_focus_prev>:
 8005450:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005454:	07db      	lsls	r3, r3, #31
 8005456:	d403      	bmi.n	8005460 <lv_group_focus_prev+0x10>
 8005458:	4a02      	ldr	r2, [pc, #8]	; (8005464 <lv_group_focus_prev+0x14>)
 800545a:	4903      	ldr	r1, [pc, #12]	; (8005468 <lv_group_focus_prev+0x18>)
 800545c:	f7ff bf78 	b.w	8005350 <focus_next_core.part.1>
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	0800c15d 	.word	0x0800c15d
 8005468:	0800c14d 	.word	0x0800c14d

0800546c <lv_group_refocus>:
{
 800546c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800546e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005472:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 8005476:	f043 0310 	orr.w	r3, r3, #16
 800547a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800547e:	071b      	lsls	r3, r3, #28
{
 8005480:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8005482:	d408      	bmi.n	8005496 <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 8005484:	f7ff ffd6 	bl	8005434 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8005488:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800548c:	f365 1304 	bfi	r3, r5, #4, #1
 8005490:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8005494:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8005496:	f7ff ffdb 	bl	8005450 <lv_group_focus_prev>
 800549a:	e7f5      	b.n	8005488 <lv_group_refocus+0x1c>

0800549c <lv_group_add_obj>:
{
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	460c      	mov	r4, r1
    if(group == NULL) return;
 80054a0:	4605      	mov	r5, r0
 80054a2:	b328      	cbz	r0, 80054f0 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 80054a4:	f006 fe4f 	bl	800c146 <lv_ll_get_head>
 80054a8:	b978      	cbnz	r0, 80054ca <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 80054aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054ac:	b133      	cbz	r3, 80054bc <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 80054ae:	4620      	mov	r0, r4
 80054b0:	f001 fe9e 	bl	80071f0 <lv_obj_is_focused>
 80054b4:	b110      	cbz	r0, 80054bc <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 80054b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80054b8:	f7ff ffd8 	bl	800546c <lv_group_refocus>
    obj->group_p     = group;
 80054bc:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 80054be:	4628      	mov	r0, r5
 80054c0:	f006 fe23 	bl	800c10a <lv_ll_ins_tail>
    lv_mem_assert(next);
 80054c4:	4606      	mov	r6, r0
 80054c6:	b940      	cbnz	r0, 80054da <lv_group_add_obj+0x3e>
 80054c8:	e7fe      	b.n	80054c8 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d00f      	beq.n	80054f0 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 80054d0:	4601      	mov	r1, r0
 80054d2:	4628      	mov	r0, r5
 80054d4:	f006 fe3d 	bl	800c152 <lv_ll_get_next>
 80054d8:	e7e6      	b.n	80054a8 <lv_group_add_obj+0xc>
    *next = obj;
 80054da:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 80054dc:	4628      	mov	r0, r5
 80054de:	f006 fe32 	bl	800c146 <lv_ll_get_head>
 80054e2:	4286      	cmp	r6, r0
 80054e4:	d104      	bne.n	80054f0 <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 80054e6:	4628      	mov	r0, r5
}
 80054e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 80054ec:	f7ff bfbe 	b.w	800546c <lv_group_refocus>
 80054f0:	bd70      	pop	{r4, r5, r6, pc}

080054f2 <lv_group_mod_style>:
{
 80054f2:	b538      	push	{r3, r4, r5, lr}
 80054f4:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 80054f6:	f100 051c 	add.w	r5, r0, #28
 80054fa:	4628      	mov	r0, r5
 80054fc:	f002 f9be 	bl	800787c <lv_style_copy>
    if(group->editing) {
 8005500:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005504:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8005506:	bf4c      	ite	mi
 8005508:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 800550a:	6923      	ldrpl	r3, [r4, #16]
 800550c:	b113      	cbz	r3, 8005514 <lv_group_mod_style+0x22>
 800550e:	4629      	mov	r1, r5
 8005510:	4620      	mov	r0, r4
 8005512:	4798      	blx	r3
}
 8005514:	4628      	mov	r0, r5
 8005516:	bd38      	pop	{r3, r4, r5, pc}

08005518 <lv_group_get_focused>:
    if(!group) return NULL;
 8005518:	b110      	cbz	r0, 8005520 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 800551a:	68c0      	ldr	r0, [r0, #12]
 800551c:	b100      	cbz	r0, 8005520 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 800551e:	6800      	ldr	r0, [r0, #0]
}
 8005520:	4770      	bx	lr

08005522 <lv_group_send_data>:
{
 8005522:	b513      	push	{r0, r1, r4, lr}
 8005524:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8005526:	f7ff fff7 	bl	8005518 <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 800552a:	4604      	mov	r4, r0
 800552c:	b160      	cbz	r0, 8005548 <lv_group_send_data+0x26>
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 800552e:	69c3      	ldr	r3, [r0, #28]
 8005530:	aa01      	add	r2, sp, #4
 8005532:	2111      	movs	r1, #17
 8005534:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8005536:	2801      	cmp	r0, #1
 8005538:	d104      	bne.n	8005544 <lv_group_send_data+0x22>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 800553a:	aa01      	add	r2, sp, #4
 800553c:	210b      	movs	r1, #11
 800553e:	4620      	mov	r0, r4
 8005540:	f001 f850 	bl	80065e4 <lv_event_send>
}
 8005544:	b002      	add	sp, #8
 8005546:	bd10      	pop	{r4, pc}
    if(act == NULL) return LV_RES_OK;
 8005548:	2001      	movs	r0, #1
 800554a:	e7fb      	b.n	8005544 <lv_group_send_data+0x22>

0800554c <lv_group_set_editing>:
{
 800554c:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800554e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005552:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005556:	428a      	cmp	r2, r1
{
 8005558:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 800555a:	d018      	beq.n	800558e <lv_group_set_editing+0x42>
    group->editing     = en_val;
 800555c:	f361 0341 	bfi	r3, r1, #1, #1
 8005560:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    lv_obj_t * focused = lv_group_get_focused(group);
 8005564:	f7ff ffd8 	bl	8005518 <lv_group_get_focused>
    if(focused) {
 8005568:	4605      	mov	r5, r0
 800556a:	b920      	cbnz	r0, 8005576 <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 800556c:	4628      	mov	r0, r5
}
 800556e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 8005572:	f001 b871 	b.w	8006658 <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8005576:	69c3      	ldr	r3, [r0, #28]
 8005578:	2200      	movs	r2, #0
 800557a:	210f      	movs	r1, #15
 800557c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	210c      	movs	r1, #12
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	f001 f82d 	bl	80065e4 <lv_event_send>
        if(res != LV_RES_OK) return;
 800558a:	2801      	cmp	r0, #1
 800558c:	d0ee      	beq.n	800556c <lv_group_set_editing+0x20>
 800558e:	bd38      	pop	{r3, r4, r5, pc}

08005590 <lv_group_focus_obj>:
{
 8005590:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 8005592:	4606      	mov	r6, r0
 8005594:	b170      	cbz	r0, 80055b4 <lv_group_focus_obj+0x24>
    lv_group_t * g = obj->group_p;
 8005596:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    if(g == NULL) return;
 8005598:	b164      	cbz	r4, 80055b4 <lv_group_focus_obj+0x24>
    if(g->frozen != 0) return;
 800559a:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 800559e:	f011 0101 	ands.w	r1, r1, #1
 80055a2:	d107      	bne.n	80055b4 <lv_group_focus_obj+0x24>
    lv_group_set_editing(g, false);
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff ffd1 	bl	800554c <lv_group_set_editing>
    LV_LL_READ(g->obj_ll, i)
 80055aa:	4620      	mov	r0, r4
 80055ac:	f006 fdcb 	bl	800c146 <lv_ll_get_head>
 80055b0:	4605      	mov	r5, r0
 80055b2:	b900      	cbnz	r0, 80055b6 <lv_group_focus_obj+0x26>
 80055b4:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	429e      	cmp	r6, r3
 80055ba:	d12e      	bne.n	800561a <lv_group_focus_obj+0x8a>
            if(g->obj_focus != NULL) {
 80055bc:	68e3      	ldr	r3, [r4, #12]
 80055be:	b183      	cbz	r3, 80055e2 <lv_group_focus_obj+0x52>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	69c3      	ldr	r3, [r0, #28]
 80055c6:	2110      	movs	r1, #16
 80055c8:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80055ca:	68e3      	ldr	r3, [r4, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	210d      	movs	r1, #13
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	f001 f807 	bl	80065e4 <lv_event_send>
                if(res != LV_RES_OK) return;
 80055d6:	2801      	cmp	r0, #1
 80055d8:	d1ec      	bne.n	80055b4 <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	f001 f83b 	bl	8006658 <lv_obj_invalidate>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80055e2:	6828      	ldr	r0, [r5, #0]
            g->obj_focus = i;
 80055e4:	60e5      	str	r5, [r4, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80055e6:	69c3      	ldr	r3, [r0, #28]
 80055e8:	2200      	movs	r2, #0
 80055ea:	210f      	movs	r1, #15
 80055ec:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80055ee:	69a3      	ldr	r3, [r4, #24]
 80055f0:	b10b      	cbz	r3, 80055f6 <lv_group_focus_obj+0x66>
 80055f2:	4620      	mov	r0, r4
 80055f4:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80055f6:	68e3      	ldr	r3, [r4, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	210c      	movs	r1, #12
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	f000 fff1 	bl	80065e4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8005602:	2801      	cmp	r0, #1
 8005604:	d1d6      	bne.n	80055b4 <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f001 f825 	bl	8006658 <lv_obj_invalidate>
                obj_to_foreground(*g->obj_focus);
 800560e:	68e3      	ldr	r3, [r4, #12]
}
 8005610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                obj_to_foreground(*g->obj_focus);
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f7ff be88 	b.w	800532a <obj_to_foreground>
    LV_LL_READ(g->obj_ll, i)
 800561a:	4629      	mov	r1, r5
 800561c:	4620      	mov	r0, r4
 800561e:	f006 fd98 	bl	800c152 <lv_ll_get_next>
 8005622:	e7c5      	b.n	80055b0 <lv_group_focus_obj+0x20>

08005624 <lv_group_get_editing>:
    if(!group) return false;
 8005624:	b118      	cbz	r0, 800562e <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 8005626:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 800562a:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 800562e:	4770      	bx	lr

08005630 <lv_group_get_click_focus>:
    if(!group) return false;
 8005630:	b118      	cbz	r0, 800563a <lv_group_get_click_focus+0xa>
    return group->click_focus ? true : false;
 8005632:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 8005636:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 800563a:	4770      	bx	lr

0800563c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 800563c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8005640:	f010 0002 	ands.w	r0, r0, #2
        indev_obj_act = NULL;
 8005644:	bf1e      	ittt	ne
 8005646:	4b03      	ldrne	r3, [pc, #12]	; (8005654 <indev_reset_check+0x18>)
 8005648:	2200      	movne	r2, #0
 800564a:	601a      	strne	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
 800564c:	3000      	adds	r0, #0
 800564e:	bf18      	it	ne
 8005650:	2001      	movne	r0, #1
 8005652:	4770      	bx	lr
 8005654:	20010214 	.word	0x20010214

08005658 <indev_search_obj>:
{
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	460c      	mov	r4, r1
 800565c:	4607      	mov	r7, r0
    if(lv_area_is_point_on(&obj->coords, &proc->types.pointer.act_point)) {
 800565e:	1d01      	adds	r1, r0, #4
 8005660:	f104 0010 	add.w	r0, r4, #16
 8005664:	f006 fbe2 	bl	800be2c <lv_area_is_point_on>
 8005668:	b908      	cbnz	r0, 800566e <indev_search_obj+0x16>
    lv_obj_t * found_p = NULL;
 800566a:	2000      	movs	r0, #0
 800566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(obj->child_ll, i)
 800566e:	1d26      	adds	r6, r4, #4
 8005670:	4630      	mov	r0, r6
 8005672:	f006 fd68 	bl	800c146 <lv_ll_get_head>
 8005676:	4605      	mov	r5, r0
 8005678:	b930      	cbnz	r0, 8005688 <indev_search_obj+0x30>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 800567a:	4620      	mov	r0, r4
 800567c:	f001 fd33 	bl	80070e6 <lv_obj_get_click>
 8005680:	2800      	cmp	r0, #0
 8005682:	d0f2      	beq.n	800566a <indev_search_obj+0x12>
 8005684:	4625      	mov	r5, r4
 8005686:	e012      	b.n	80056ae <indev_search_obj+0x56>
            found_p = indev_search_obj(proc, i);
 8005688:	4629      	mov	r1, r5
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff ffe4 	bl	8005658 <indev_search_obj>
            if(found_p != NULL) {
 8005690:	b988      	cbnz	r0, 80056b6 <indev_search_obj+0x5e>
        LV_LL_READ(obj->child_ll, i)
 8005692:	4629      	mov	r1, r5
 8005694:	4630      	mov	r0, r6
 8005696:	f006 fd5c 	bl	800c152 <lv_ll_get_next>
 800569a:	e7ec      	b.n	8005676 <indev_search_obj+0x1e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 800569c:	4628      	mov	r0, r5
 800569e:	f001 fd1d 	bl	80070dc <lv_obj_get_hidden>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d1e1      	bne.n	800566a <indev_search_obj+0x12>
                hidden_i = lv_obj_get_parent(hidden_i);
 80056a6:	4628      	mov	r0, r5
 80056a8:	f001 fc66 	bl	8006f78 <lv_obj_get_parent>
 80056ac:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	d1f4      	bne.n	800569c <indev_search_obj+0x44>
            if(hidden_i == NULL) found_p = obj;
 80056b2:	4620      	mov	r0, r4
    return found_p;
 80056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80056b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056b8 <indev_proc_press>:
{
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 80056be:	4ea3      	ldr	r6, [pc, #652]	; (800594c <indev_proc_press+0x294>)
    if(proc->wait_until_release != 0) return;
 80056c0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
 80056c4:	6980      	ldr	r0, [r0, #24]
 80056c6:	6030      	str	r0, [r6, #0]
    if(proc->wait_until_release != 0) return;
 80056c8:	071a      	lsls	r2, r3, #28
{
 80056ca:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
 80056cc:	f100 8124 	bmi.w	8005918 <indev_proc_press+0x260>
    lv_disp_t * disp = indev_act->driver.disp;
 80056d0:	4f9f      	ldr	r7, [pc, #636]	; (8005950 <indev_proc_press+0x298>)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68dd      	ldr	r5, [r3, #12]
    if(indev_obj_act == NULL) {
 80056d6:	b9d8      	cbnz	r0, 8005710 <indev_proc_press+0x58>
        indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_sys(disp));
 80056d8:	4628      	mov	r0, r5
 80056da:	f7ff fe1f 	bl	800531c <lv_disp_get_layer_sys>
 80056de:	4601      	mov	r1, r0
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff ffb9 	bl	8005658 <indev_search_obj>
 80056e6:	6030      	str	r0, [r6, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_top(disp));
 80056e8:	b938      	cbnz	r0, 80056fa <indev_proc_press+0x42>
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7ff fe0f 	bl	800530e <lv_disp_get_layer_top>
 80056f0:	4601      	mov	r1, r0
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ffb0 	bl	8005658 <indev_search_obj>
 80056f8:	6030      	str	r0, [r6, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_scr_act(disp));
 80056fa:	6833      	ldr	r3, [r6, #0]
 80056fc:	b98b      	cbnz	r3, 8005722 <indev_proc_press+0x6a>
 80056fe:	4628      	mov	r0, r5
 8005700:	f7ff fdf4 	bl	80052ec <lv_disp_get_scr_act>
 8005704:	4601      	mov	r1, r0
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff ffa6 	bl	8005658 <indev_search_obj>
 800570c:	6030      	str	r0, [r6, #0]
 800570e:	e008      	b.n	8005722 <indev_proc_press+0x6a>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8005710:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005714:	079b      	lsls	r3, r3, #30
 8005716:	d409      	bmi.n	800572c <indev_proc_press+0x74>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8005718:	2110      	movs	r1, #16
 800571a:	f001 fd5a 	bl	80071d2 <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 800571e:	2800      	cmp	r0, #0
 8005720:	d0da      	beq.n	80056d8 <indev_proc_press+0x20>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8005722:	69a5      	ldr	r5, [r4, #24]
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	429d      	cmp	r5, r3
 8005728:	f040 80a5 	bne.w	8005876 <indev_proc_press+0x1be>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800572c:	8923      	ldrh	r3, [r4, #8]
 800572e:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005730:	88e1      	ldrh	r1, [r4, #6]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8005732:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8005736:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005738:	8963      	ldrh	r3, [r4, #10]
 800573a:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800573c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8005740:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005744:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8005746:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800574a:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800574c:	b209      	sxth	r1, r1
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800574e:	10db      	asrs	r3, r3, #3
    if(proc->types.pointer.drag_throw_vect.x < 0)
 8005750:	2a00      	cmp	r2, #0
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8005752:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005754:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8005756:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8005758:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
 800575a:	f280 80e9 	bge.w	8005930 <indev_proc_press+0x278>
        proc->types.pointer.drag_throw_vect.x++;
 800575e:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
 8005760:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
 8005762:	2b00      	cmp	r3, #0
 8005764:	f280 80e8 	bge.w	8005938 <indev_proc_press+0x280>
        proc->types.pointer.drag_throw_vect.y++;
 8005768:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
 800576a:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 800576c:	8aa3      	ldrh	r3, [r4, #20]
 800576e:	eb03 0060 	add.w	r0, r3, r0, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8005772:	8ae3      	ldrh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8005774:	82a0      	strh	r0, [r4, #20]
    if(indev_obj_act != NULL) {
 8005776:	6830      	ldr	r0, [r6, #0]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8005778:	eb03 0161 	add.w	r1, r3, r1, asr #1
 800577c:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
 800577e:	2800      	cmp	r0, #0
 8005780:	f000 80ca 	beq.w	8005918 <indev_proc_press+0x260>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	69c3      	ldr	r3, [r0, #28]
 8005788:	2108      	movs	r1, #8
 800578a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 800578c:	4620      	mov	r0, r4
 800578e:	f7ff ff55 	bl	800563c <indev_reset_check>
 8005792:	4602      	mov	r2, r0
 8005794:	2800      	cmp	r0, #0
 8005796:	f040 80bf 	bne.w	8005918 <indev_proc_press+0x260>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 800579a:	2101      	movs	r1, #1
 800579c:	6830      	ldr	r0, [r6, #0]
 800579e:	f000 ff21 	bl	80065e4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ff4a 	bl	800563c <indev_reset_check>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f040 80b5 	bne.w	8005918 <indev_proc_press+0x260>
    lv_obj_t * drag_obj    = state->types.pointer.act_obj;
 80057ae:	69a5      	ldr	r5, [r4, #24]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80057b0:	4628      	mov	r0, r5
 80057b2:	f001 fcac 	bl	800710e <lv_obj_get_drag_parent>
 80057b6:	4680      	mov	r8, r0
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f000 80cb 	beq.w	8005954 <indev_proc_press+0x29c>
 80057be:	2d00      	cmp	r5, #0
 80057c0:	f040 80be 	bne.w	8005940 <indev_proc_press+0x288>
        if(indev_reset_check(proc)) return;
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff ff39 	bl	800563c <indev_reset_check>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	f040 80a4 	bne.w	8005918 <indev_proc_press+0x260>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 80057d0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80057d4:	0798      	lsls	r0, r3, #30
 80057d6:	f100 809f 	bmi.w	8005918 <indev_proc_press+0x260>
 80057da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	d427      	bmi.n	8005832 <indev_proc_press+0x17a>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 80057e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057e4:	f006 fa08 	bl	800bbf8 <lv_tick_elaps>
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	8ad3      	ldrh	r3, [r2, #22]
 80057ec:	4298      	cmp	r0, r3
 80057ee:	d91c      	bls.n	800582a <indev_proc_press+0x172>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 80057f0:	6830      	ldr	r0, [r6, #0]
 80057f2:	210b      	movs	r1, #11
 80057f4:	69c3      	ldr	r3, [r0, #28]
 80057f6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff ff1f 	bl	800563c <indev_reset_check>
 80057fe:	4602      	mov	r2, r0
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 8089 	bne.w	8005918 <indev_proc_press+0x260>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8005806:	2104      	movs	r1, #4
 8005808:	6830      	ldr	r0, [r6, #0]
 800580a:	f000 feeb 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800580e:	4620      	mov	r0, r4
 8005810:	f7ff ff14 	bl	800563c <indev_reset_check>
 8005814:	2800      	cmp	r0, #0
 8005816:	d17f      	bne.n	8005918 <indev_proc_press+0x260>
                proc->long_pr_sent = 1;
 8005818:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                proc->longpr_rep_timestamp = lv_tick_get();
 8005824:	f006 f9da 	bl	800bbdc <lv_tick_get>
 8005828:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 800582a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800582e:	079a      	lsls	r2, r3, #30
 8005830:	d472      	bmi.n	8005918 <indev_proc_press+0x260>
 8005832:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005836:	07db      	lsls	r3, r3, #31
 8005838:	d56e      	bpl.n	8005918 <indev_proc_press+0x260>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 800583a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800583c:	f006 f9dc 	bl	800bbf8 <lv_tick_elaps>
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	8b13      	ldrh	r3, [r2, #24]
 8005844:	4298      	cmp	r0, r3
 8005846:	d967      	bls.n	8005918 <indev_proc_press+0x260>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 8005848:	6830      	ldr	r0, [r6, #0]
 800584a:	210c      	movs	r1, #12
 800584c:	69c3      	ldr	r3, [r0, #28]
 800584e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff fef3 	bl	800563c <indev_reset_check>
 8005856:	4602      	mov	r2, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d15d      	bne.n	8005918 <indev_proc_press+0x260>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 800585c:	2105      	movs	r1, #5
 800585e:	6830      	ldr	r0, [r6, #0]
 8005860:	f000 fec0 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff fee9 	bl	800563c <indev_reset_check>
 800586a:	2800      	cmp	r0, #0
 800586c:	d154      	bne.n	8005918 <indev_proc_press+0x260>
                proc->longpr_rep_timestamp = lv_tick_get();
 800586e:	f006 f9b5 	bl	800bbdc <lv_tick_get>
 8005872:	62e0      	str	r0, [r4, #44]	; 0x2c
 8005874:	e050      	b.n	8005918 <indev_proc_press+0x260>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8005876:	88a3      	ldrh	r3, [r4, #4]
 8005878:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 800587a:	88e3      	ldrh	r3, [r4, #6]
 800587c:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
 800587e:	2d00      	cmp	r5, #0
 8005880:	d137      	bne.n	80058f2 <indev_proc_press+0x23a>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 8005886:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
 8005888:	2b00      	cmp	r3, #0
 800588a:	f43f af4f 	beq.w	800572c <indev_proc_press+0x74>
            proc->pr_timestamp                 = lv_tick_get();
 800588e:	f006 f9a5 	bl	800bbdc <lv_tick_get>
            proc->long_pr_sent                 = 0;
 8005892:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            proc->pr_timestamp                 = lv_tick_get();
 8005896:	62a0      	str	r0, [r4, #40]	; 0x28
            proc->long_pr_sent                 = 0;
 8005898:	f36f 0300 	bfc	r3, #0, #1
 800589c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            proc->types.pointer.drag_limit_out = 0;
 80058a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
            lv_obj_t * i        = indev_obj_act;
 80058a4:	6830      	ldr	r0, [r6, #0]
            proc->types.pointer.drag_in_prog   = 0;
 80058a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80058aa:	f36f 0341 	bfc	r3, #1, #1
 80058ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            proc->types.pointer.drag_sum.x     = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
 80058b6:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.vect.x         = 0;
 80058b8:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
 80058ba:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * last_top = NULL;
 80058bc:	461d      	mov	r5, r3
            while(i != NULL) {
 80058be:	bb70      	cbnz	r0, 800591e <indev_proc_press+0x266>
            if(last_top != NULL) {
 80058c0:	b115      	cbz	r5, 80058c8 <indev_proc_press+0x210>
                lv_obj_move_foreground(last_top);
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 ff18 	bl	80066f8 <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 80058c8:	6830      	ldr	r0, [r6, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	69c3      	ldr	r3, [r0, #28]
 80058ce:	2107      	movs	r1, #7
 80058d0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff feb2 	bl	800563c <indev_reset_check>
 80058d8:	4602      	mov	r2, r0
 80058da:	b9e8      	cbnz	r0, 8005918 <indev_proc_press+0x260>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 80058dc:	4601      	mov	r1, r0
 80058de:	6830      	ldr	r0, [r6, #0]
 80058e0:	f000 fe80 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7ff fea9 	bl	800563c <indev_reset_check>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f43f af1e 	beq.w	800572c <indev_proc_press+0x74>
 80058f0:	e012      	b.n	8005918 <indev_proc_press+0x260>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	69eb      	ldr	r3, [r5, #28]
 80058f6:	2109      	movs	r1, #9
 80058f8:	4628      	mov	r0, r5
 80058fa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff fe9d 	bl	800563c <indev_reset_check>
 8005902:	4602      	mov	r2, r0
 8005904:	b940      	cbnz	r0, 8005918 <indev_proc_press+0x260>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8005906:	2102      	movs	r1, #2
 8005908:	4628      	mov	r0, r5
 800590a:	f000 fe6b 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 800590e:	4620      	mov	r0, r4
 8005910:	f7ff fe94 	bl	800563c <indev_reset_check>
 8005914:	2800      	cmp	r0, #0
 8005916:	d0b4      	beq.n	8005882 <indev_proc_press+0x1ca>
}
 8005918:	b005      	add	sp, #20
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
 800591e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005922:	f013 0f20 	tst.w	r3, #32
 8005926:	bf18      	it	ne
 8005928:	4605      	movne	r5, r0
                i = lv_obj_get_parent(i);
 800592a:	f001 fb25 	bl	8006f78 <lv_obj_get_parent>
 800592e:	e7c6      	b.n	80058be <indev_proc_press+0x206>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8005930:	f43f af17 	beq.w	8005762 <indev_proc_press+0xaa>
        proc->types.pointer.drag_throw_vect.x--;
 8005934:	3a01      	subs	r2, #1
 8005936:	e713      	b.n	8005760 <indev_proc_press+0xa8>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8005938:	f43f af18 	beq.w	800576c <indev_proc_press+0xb4>
        proc->types.pointer.drag_throw_vect.y--;
 800593c:	3b01      	subs	r3, #1
 800593e:	e714      	b.n	800576a <indev_proc_press+0xb2>
        drag_obj = lv_obj_get_parent(drag_obj);
 8005940:	4628      	mov	r0, r5
 8005942:	f001 fb19 	bl	8006f78 <lv_obj_get_parent>
 8005946:	4605      	mov	r5, r0
 8005948:	e732      	b.n	80057b0 <indev_proc_press+0xf8>
 800594a:	bf00      	nop
 800594c:	20010214 	.word	0x20010214
 8005950:	20010210 	.word	0x20010210
    if(drag_obj == NULL) return;
 8005954:	2d00      	cmp	r5, #0
 8005956:	f43f af35 	beq.w	80057c4 <indev_proc_press+0x10c>
    if(lv_obj_get_drag(drag_obj) == false) return;
 800595a:	4628      	mov	r0, r5
 800595c:	f001 fbc8 	bl	80070f0 <lv_obj_get_drag>
 8005960:	4681      	mov	r9, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	f43f af2e 	beq.w	80057c4 <indev_proc_press+0x10c>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8005968:	4628      	mov	r0, r5
 800596a:	f001 fbc6 	bl	80070fa <lv_obj_get_drag_dir>
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 800596e:	8a21      	ldrh	r1, [r4, #16]
 8005970:	89a2      	ldrh	r2, [r4, #12]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8005972:	4603      	mov	r3, r0
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 8005974:	4411      	add	r1, r2
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 8005976:	89e0      	ldrh	r0, [r4, #14]
 8005978:	8a62      	ldrh	r2, [r4, #18]
 800597a:	4402      	add	r2, r0
    if(state->types.pointer.drag_limit_out == 0) {
 800597c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 8005980:	b209      	sxth	r1, r1
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 8005982:	b212      	sxth	r2, r2
    if(state->types.pointer.drag_limit_out == 0) {
 8005984:	07c0      	lsls	r0, r0, #31
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 8005986:	8221      	strh	r1, [r4, #16]
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 8005988:	8262      	strh	r2, [r4, #18]
    if(state->types.pointer.drag_limit_out == 0) {
 800598a:	d418      	bmi.n	80059be <indev_proc_press+0x306>
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 800598c:	07d8      	lsls	r0, r3, #31
 800598e:	d506      	bpl.n	800599e <indev_proc_press+0x2e6>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8005990:	6838      	ldr	r0, [r7, #0]
 8005992:	2900      	cmp	r1, #0
 8005994:	7d00      	ldrb	r0, [r0, #20]
 8005996:	bfb8      	it	lt
 8005998:	4249      	neglt	r1, r1
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 800599a:	4281      	cmp	r1, r0
 800599c:	da08      	bge.n	80059b0 <indev_proc_press+0x2f8>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 800599e:	0798      	lsls	r0, r3, #30
 80059a0:	d50d      	bpl.n	80059be <indev_proc_press+0x306>
            LV_MATH_ABS(state->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	7d09      	ldrb	r1, [r1, #20]
 80059a8:	bfb8      	it	lt
 80059aa:	4252      	neglt	r2, r2
           ((allowed_dirs & LV_DRAG_DIR_VER) &&
 80059ac:	428a      	cmp	r2, r1
 80059ae:	db06      	blt.n	80059be <indev_proc_press+0x306>
            state->types.pointer.drag_limit_out = 1;
 80059b0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            drag_just_started                   = true;
 80059bc:	46c8      	mov	r8, r9
    if(state->types.pointer.drag_limit_out != 0) {
 80059be:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80059c2:	07d1      	lsls	r1, r2, #31
 80059c4:	f57f aefe 	bpl.w	80057c4 <indev_proc_press+0x10c>
        if(state->types.pointer.vect.x != 0 || state->types.pointer.vect.y != 0) {
 80059c8:	68e2      	ldr	r2, [r4, #12]
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	f43f aefa 	beq.w	80057c4 <indev_proc_press+0x10c>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	9303      	str	r3, [sp, #12]
            uint16_t inv_buf_size =
 80059d4:	68d0      	ldr	r0, [r2, #12]
 80059d6:	f006 f85d 	bl	800ba94 <lv_disp_get_inv_buf_size>
            lv_coord_t prev_x     = drag_obj->coords.x1;
 80059da:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80059de:	9300      	str	r3, [sp, #0]
            uint16_t inv_buf_size =
 80059e0:	4681      	mov	r9, r0
            lv_coord_t prev_y     = drag_obj->coords.y1;
 80059e2:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80059e6:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80059e8:	4628      	mov	r0, r5
 80059ea:	f001 fac5 	bl	8006f78 <lv_obj_get_parent>
 80059ee:	f001 fb03 	bl	8006ff8 <lv_obj_get_width>
 80059f2:	4683      	mov	fp, r0
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80059f4:	4628      	mov	r0, r5
 80059f6:	f001 fabf 	bl	8006f78 <lv_obj_get_parent>
 80059fa:	f001 fb03 	bl	8007004 <lv_obj_get_height>
 80059fe:	4682      	mov	sl, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 8005a00:	4628      	mov	r0, r5
 8005a02:	f001 faed 	bl	8006fe0 <lv_obj_get_x>
 8005a06:	9002      	str	r0, [sp, #8]
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f001 faef 	bl	8006fec <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_ALL) {
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	9902      	ldr	r1, [sp, #8]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d138      	bne.n	8005a88 <indev_proc_press+0x3d0>
                if(drag_just_started) {
 8005a16:	f1b8 0f00 	cmp.w	r8, #0
 8005a1a:	d005      	beq.n	8005a28 <indev_proc_press+0x370>
                    act_x += state->types.pointer.drag_sum.x;
 8005a1c:	8a23      	ldrh	r3, [r4, #16]
                    act_y += state->types.pointer.drag_sum.y;
 8005a1e:	8a62      	ldrh	r2, [r4, #18]
                    act_x += state->types.pointer.drag_sum.x;
 8005a20:	4419      	add	r1, r3
                    act_y += state->types.pointer.drag_sum.y;
 8005a22:	4410      	add	r0, r2
                    act_x += state->types.pointer.drag_sum.x;
 8005a24:	b209      	sxth	r1, r1
                    act_y += state->types.pointer.drag_sum.y;
 8005a26:	b200      	sxth	r0, r0
                lv_obj_set_pos(drag_obj, act_x + state->types.pointer.vect.x, act_y + state->types.pointer.vect.y);
 8005a28:	89e2      	ldrh	r2, [r4, #14]
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4419      	add	r1, r3
 8005a30:	b212      	sxth	r2, r2
 8005a32:	b209      	sxth	r1, r1
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 fe7c 	bl	8006732 <lv_obj_set_pos>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8005a3a:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8005a3e:	9a00      	ldr	r2, [sp, #0]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d13f      	bne.n	8005ac4 <indev_proc_press+0x40c>
 8005a44:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8005a48:	9a01      	ldr	r2, [sp, #4]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d13a      	bne.n	8005ac4 <indev_proc_press+0x40c>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f001 fa92 	bl	8006f78 <lv_obj_get_parent>
 8005a54:	f001 fad0 	bl	8006ff8 <lv_obj_get_width>
 8005a58:	4680      	mov	r8, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f001 fa8c 	bl	8006f78 <lv_obj_get_parent>
 8005a60:	f001 fad0 	bl	8007004 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8005a64:	45c3      	cmp	fp, r8
 8005a66:	f47f aead 	bne.w	80057c4 <indev_proc_press+0x10c>
 8005a6a:	4582      	cmp	sl, r0
 8005a6c:	f47f aeaa 	bne.w	80057c4 <indev_proc_press+0x10c>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68d8      	ldr	r0, [r3, #12]
 8005a74:	f006 f80e 	bl	800ba94 <lv_disp_get_inv_buf_size>
                    lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	eba0 0109 	sub.w	r1, r0, r9
 8005a7e:	b289      	uxth	r1, r1
 8005a80:	68d8      	ldr	r0, [r3, #12]
 8005a82:	f006 f80c 	bl	800ba9e <lv_disp_pop_from_inv_buf>
 8005a86:	e69d      	b.n	80057c4 <indev_proc_press+0x10c>
            } else if(allowed_dirs & LV_DRAG_DIR_HOR) {
 8005a88:	07da      	lsls	r2, r3, #31
 8005a8a:	d50c      	bpl.n	8005aa6 <indev_proc_press+0x3ee>
                if(drag_just_started) {
 8005a8c:	f1b8 0f00 	cmp.w	r8, #0
 8005a90:	d002      	beq.n	8005a98 <indev_proc_press+0x3e0>
                    act_x += state->types.pointer.drag_sum.x;
 8005a92:	8a23      	ldrh	r3, [r4, #16]
 8005a94:	4419      	add	r1, r3
 8005a96:	b209      	sxth	r1, r1
                lv_obj_set_x(drag_obj, act_x + state->types.pointer.vect.x);
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	4419      	add	r1, r3
 8005a9c:	b209      	sxth	r1, r1
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fe8a 	bl	80067b8 <lv_obj_set_x>
 8005aa4:	e7c9      	b.n	8005a3a <indev_proc_press+0x382>
            } else if(allowed_dirs & LV_DRAG_DIR_VER) {
 8005aa6:	079b      	lsls	r3, r3, #30
 8005aa8:	d5c7      	bpl.n	8005a3a <indev_proc_press+0x382>
                if(drag_just_started) {
 8005aaa:	f1b8 0f00 	cmp.w	r8, #0
 8005aae:	d002      	beq.n	8005ab6 <indev_proc_press+0x3fe>
                    act_y += state->types.pointer.drag_sum.y;
 8005ab0:	8a62      	ldrh	r2, [r4, #18]
 8005ab2:	4410      	add	r0, r2
 8005ab4:	b200      	sxth	r0, r0
                lv_obj_set_y(drag_obj, act_y + state->types.pointer.vect.y);
 8005ab6:	89e1      	ldrh	r1, [r4, #14]
 8005ab8:	4401      	add	r1, r0
 8005aba:	b209      	sxth	r1, r1
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 fe85 	bl	80067cc <lv_obj_set_y>
 8005ac2:	e7ba      	b.n	8005a3a <indev_proc_press+0x382>
                state->types.pointer.drag_in_prog = 1;
 8005ac4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                if(drag_just_started) {
 8005ad0:	f1b8 0f00 	cmp.w	r8, #0
 8005ad4:	f43f ae76 	beq.w	80057c4 <indev_proc_press+0x10c>
                    drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	69eb      	ldr	r3, [r5, #28]
 8005adc:	210d      	movs	r1, #13
 8005ade:	4628      	mov	r0, r5
 8005ae0:	4798      	blx	r3
                    if(indev_reset_check(state)) return;
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f7ff fdaa 	bl	800563c <indev_reset_check>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f47f ae6a 	bne.w	80057c4 <indev_proc_press+0x10c>
                    lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8005af0:	2108      	movs	r1, #8
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 fd76 	bl	80065e4 <lv_event_send>
                    if(indev_reset_check(state)) return;
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff fd9f 	bl	800563c <indev_reset_check>
 8005afe:	e661      	b.n	80057c4 <indev_proc_press+0x10c>

08005b00 <indev_proc_release>:
{
 8005b00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(proc->wait_until_release != 0) {
 8005b04:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005b08:	071f      	lsls	r7, r3, #28
{
 8005b0a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8005b0c:	d508      	bpl.n	8005b20 <indev_proc_release+0x20>
        proc->types.pointer.act_obj  = NULL;
 8005b0e:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 8005b10:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.act_obj  = NULL;
 8005b14:	6182      	str	r2, [r0, #24]
        proc->types.pointer.last_obj = NULL;
 8005b16:	61c2      	str	r2, [r0, #28]
        proc->pr_timestamp           = 0;
 8005b18:	6282      	str	r2, [r0, #40]	; 0x28
        proc->longpr_rep_timestamp   = 0;
 8005b1a:	62c2      	str	r2, [r0, #44]	; 0x2c
        proc->wait_until_release     = 0;
 8005b1c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
 8005b20:	69a0      	ldr	r0, [r4, #24]
 8005b22:	4d8a      	ldr	r5, [pc, #552]	; (8005d4c <indev_proc_release+0x24c>)
 8005b24:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d068      	beq.n	8005bfc <indev_proc_release+0xfc>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8005b2a:	2110      	movs	r1, #16
 8005b2c:	f001 fb51 	bl	80071d2 <lv_obj_is_protected>
 8005b30:	4b87      	ldr	r3, [pc, #540]	; (8005d50 <indev_proc_release+0x250>)
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f000 808c 	beq.w	8005c50 <indev_proc_release+0x150>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8005b38:	6828      	ldr	r0, [r5, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	69c6      	ldr	r6, [r0, #28]
 8005b3e:	210a      	movs	r1, #10
 8005b40:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7ff fd7a 	bl	800563c <indev_reset_check>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d17e      	bne.n	8005c4a <indev_proc_release+0x14a>
            if(proc->types.pointer.drag_in_prog == 0) {
 8005b4c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005b50:	079e      	lsls	r6, r3, #30
 8005b52:	d561      	bpl.n	8005c18 <indev_proc_release+0x118>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8005b54:	2200      	movs	r2, #0
 8005b56:	2107      	movs	r1, #7
 8005b58:	6828      	ldr	r0, [r5, #0]
 8005b5a:	f000 fd43 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fd6c 	bl	800563c <indev_reset_check>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d170      	bne.n	8005c4a <indev_proc_release+0x14a>
        if(indev_reset_check(proc)) return;
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f7ff fd67 	bl	800563c <indev_reset_check>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d16a      	bne.n	8005c4a <indev_proc_release+0x14a>
        lv_group_t * g = lv_obj_get_group(indev_obj_act);
 8005b74:	6828      	ldr	r0, [r5, #0]
 8005b76:	f001 fb39 	bl	80071ec <lv_obj_get_group>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false) {
 8005b7a:	2120      	movs	r1, #32
        lv_group_t * g = lv_obj_get_group(indev_obj_act);
 8005b7c:	4680      	mov	r8, r0
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false) {
 8005b7e:	6828      	ldr	r0, [r5, #0]
 8005b80:	f001 fb27 	bl	80071d2 <lv_obj_is_protected>
 8005b84:	b970      	cbnz	r0, 8005ba4 <indev_proc_release+0xa4>
            lv_obj_t * parent = indev_obj_act;
 8005b86:	682f      	ldr	r7, [r5, #0]
            while(g == NULL) {
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	f000 8083 	beq.w	8005c96 <indev_proc_release+0x196>
            if(g && parent) {
 8005b90:	b147      	cbz	r7, 8005ba4 <indev_proc_release+0xa4>
                if(lv_group_get_click_focus(g)) {
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fd4c 	bl	8005630 <lv_group_get_click_focus>
 8005b98:	4680      	mov	r8, r0
 8005b9a:	b118      	cbz	r0, 8005ba4 <indev_proc_release+0xa4>
                    lv_group_focus_obj(parent);
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff fcf7 	bl	8005590 <lv_group_focus_obj>
                    click_focus_sent = true;
 8005ba2:	4646      	mov	r6, r8
        if(proc->types.pointer.last_pressed != indev_obj_act && click_focus_sent == false) {
 8005ba4:	6a20      	ldr	r0, [r4, #32]
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	4298      	cmp	r0, r3
 8005baa:	d015      	beq.n	8005bd8 <indev_proc_release+0xd8>
 8005bac:	b9a6      	cbnz	r6, 8005bd8 <indev_proc_release+0xd8>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8005bae:	4632      	mov	r2, r6
 8005bb0:	210d      	movs	r1, #13
 8005bb2:	f000 fd17 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff fd40 	bl	800563c <indev_reset_check>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d144      	bne.n	8005c4a <indev_proc_release+0x14a>
            lv_event_send(proc->types.pointer.act_obj, LV_EVENT_FOCUSED, NULL);
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	210c      	movs	r1, #12
 8005bc4:	69a0      	ldr	r0, [r4, #24]
 8005bc6:	f000 fd0d 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff fd36 	bl	800563c <indev_reset_check>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d13a      	bne.n	8005c4a <indev_proc_release+0x14a>
            proc->types.pointer.last_pressed = indev_obj_act;
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6223      	str	r3, [r4, #32]
        if(indev_reset_check(proc)) return;
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff fd2f 	bl	800563c <indev_reset_check>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d133      	bne.n	8005c4a <indev_proc_release+0x14a>
        lv_obj_t * drag_obj = indev_obj_act;
 8005be2:	682d      	ldr	r5, [r5, #0]
        while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8005be4:	4628      	mov	r0, r5
 8005be6:	f001 fa92 	bl	800710e <lv_obj_get_drag_parent>
 8005bea:	4606      	mov	r6, r0
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d068      	beq.n	8005cc2 <indev_proc_release+0x1c2>
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	d161      	bne.n	8005cb8 <indev_proc_release+0x1b8>
        proc->types.pointer.act_obj = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
 8005bf8:	62a3      	str	r3, [r4, #40]	; 0x28
        proc->longpr_rep_timestamp  = 0;
 8005bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8005bfc:	69e5      	ldr	r5, [r4, #28]
 8005bfe:	b325      	cbz	r5, 8005c4a <indev_proc_release+0x14a>
 8005c00:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005c04:	079a      	lsls	r2, r3, #30
 8005c06:	d420      	bmi.n	8005c4a <indev_proc_release+0x14a>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8005c08:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005c0c:	079b      	lsls	r3, r3, #30
 8005c0e:	d472      	bmi.n	8005cf6 <indev_proc_release+0x1f6>
        if(indev_reset_check(proc)) return;
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff fd13 	bl	800563c <indev_reset_check>
 8005c16:	e018      	b.n	8005c4a <indev_proc_release+0x14a>
                if(proc->long_pr_sent == 0) {
 8005c18:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8005c1c:	f012 0201 	ands.w	r2, r2, #1
 8005c20:	d00a      	beq.n	8005c38 <indev_proc_release+0x138>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8005c22:	2200      	movs	r2, #0
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8005c24:	2106      	movs	r1, #6
 8005c26:	6828      	ldr	r0, [r5, #0]
 8005c28:	f000 fcdc 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fd05 	bl	800563c <indev_reset_check>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d08e      	beq.n	8005b54 <indev_proc_release+0x54>
 8005c36:	e008      	b.n	8005c4a <indev_proc_release+0x14a>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8005c38:	2103      	movs	r1, #3
 8005c3a:	6828      	ldr	r0, [r5, #0]
 8005c3c:	f000 fcd2 	bl	80065e4 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff fcfb 	bl	800563c <indev_reset_check>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d0eb      	beq.n	8005c22 <indev_proc_release+0x122>
}
 8005c4a:	b004      	add	sp, #16
 8005c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8005c50:	6828      	ldr	r0, [r5, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	69c6      	ldr	r6, [r0, #28]
 8005c56:	210a      	movs	r1, #10
 8005c58:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7ff fcee 	bl	800563c <indev_reset_check>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d1f2      	bne.n	8005c4a <indev_proc_release+0x14a>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8005c64:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005c68:	07d8      	lsls	r0, r3, #31
 8005c6a:	d505      	bpl.n	8005c78 <indev_proc_release+0x178>
            if(proc->types.pointer.drag_in_prog == 0) {
 8005c6c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005c70:	f012 0202 	ands.w	r2, r2, #2
 8005c74:	d0d6      	beq.n	8005c24 <indev_proc_release+0x124>
 8005c76:	e76d      	b.n	8005b54 <indev_proc_release+0x54>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8005c78:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005c7c:	f012 0202 	ands.w	r2, r2, #2
 8005c80:	d1f4      	bne.n	8005c6c <indev_proc_release+0x16c>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8005c82:	2103      	movs	r1, #3
 8005c84:	6828      	ldr	r0, [r5, #0]
 8005c86:	f000 fcad 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7ff fcd6 	bl	800563c <indev_reset_check>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0eb      	beq.n	8005c6c <indev_proc_release+0x16c>
 8005c94:	e7d9      	b.n	8005c4a <indev_proc_release+0x14a>
                parent = lv_obj_get_parent(parent);
 8005c96:	4638      	mov	r0, r7
 8005c98:	f001 f96e 	bl	8006f78 <lv_obj_get_parent>
                if(parent == NULL) break;
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d080      	beq.n	8005ba4 <indev_proc_release+0xa4>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	f001 fa95 	bl	80071d2 <lv_obj_is_protected>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f47f af7b 	bne.w	8005ba4 <indev_proc_release+0xa4>
                g = lv_obj_get_group(parent);
 8005cae:	4638      	mov	r0, r7
 8005cb0:	f001 fa9c 	bl	80071ec <lv_obj_get_group>
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	e767      	b.n	8005b88 <indev_proc_release+0x88>
            drag_obj = lv_obj_get_parent(drag_obj);
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f001 f95d 	bl	8006f78 <lv_obj_get_parent>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	e790      	b.n	8005be4 <indev_proc_release+0xe4>
        if(drag_obj) {
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	d096      	beq.n	8005bf4 <indev_proc_release+0xf4>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f001 fa1c 	bl	8007104 <lv_obj_get_drag_throw>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d091      	beq.n	8005bf4 <indev_proc_release+0xf4>
 8005cd0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005cd4:	0799      	lsls	r1, r3, #30
 8005cd6:	d58d      	bpl.n	8005bf4 <indev_proc_release+0xf4>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8005cd8:	4632      	mov	r2, r6
 8005cda:	210a      	movs	r1, #10
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 fc81 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff fcaa 	bl	800563c <indev_reset_check>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d083      	beq.n	8005bf4 <indev_proc_release+0xf4>
 8005cec:	e7ad      	b.n	8005c4a <indev_proc_release+0x14a>
        drag_obj = lv_obj_get_parent(drag_obj);
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f001 f942 	bl	8006f78 <lv_obj_get_parent>
 8005cf4:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f001 fa09 	bl	800710e <lv_obj_get_drag_parent>
 8005cfc:	b110      	cbz	r0, 8005d04 <indev_proc_release+0x204>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	d1f5      	bne.n	8005cee <indev_proc_release+0x1ee>
 8005d02:	e785      	b.n	8005c10 <indev_proc_release+0x110>
    if(drag_obj == NULL) {
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	d083      	beq.n	8005c10 <indev_proc_release+0x110>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f001 f9fb 	bl	8007104 <lv_obj_get_drag_throw>
 8005d0e:	4f10      	ldr	r7, [pc, #64]	; (8005d50 <indev_proc_release+0x250>)
 8005d10:	4606      	mov	r6, r0
 8005d12:	b9f8      	cbnz	r0, 8005d54 <indev_proc_release+0x254>
        proc->types.pointer.drag_in_prog = 0;
 8005d14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005d18:	683a      	ldr	r2, [r7, #0]
        proc->types.pointer.drag_in_prog = 0;
 8005d1a:	f360 0341 	bfi	r3, r0, #1, #1
 8005d1e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005d22:	69eb      	ldr	r3, [r5, #28]
 8005d24:	210e      	movs	r1, #14
 8005d26:	4628      	mov	r0, r5
 8005d28:	4798      	blx	r3
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	2109      	movs	r1, #9
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 fc58 	bl	80065e4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8005d34:	4620      	mov	r0, r4
 8005d36:	f7ff fc81 	bl	800563c <indev_reset_check>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f47f af67 	bne.w	8005c10 <indev_proc_release+0x110>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8005d42:	2109      	movs	r1, #9
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 fc4d 	bl	80065e4 <lv_event_send>
 8005d4a:	e761      	b.n	8005c10 <indev_proc_release+0x110>
 8005d4c:	20010214 	.word	0x20010214
 8005d50:	20010210 	.word	0x20010210
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8005d54:	4628      	mov	r0, r5
 8005d56:	f001 f9d0 	bl	80070fa <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	7d51      	ldrb	r1, [r2, #21]
 8005d5e:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
 8005d62:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8005d66:	4680      	mov	r8, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8005d68:	4359      	muls	r1, r3
 8005d6a:	2064      	movs	r0, #100	; 0x64
 8005d6c:	fb91 f1f0 	sdiv	r1, r1, r0
    proc->types.pointer.drag_throw_vect.x =
 8005d70:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8005d72:	7d53      	ldrb	r3, [r2, #21]
 8005d74:	1ac1      	subs	r1, r0, r3
 8005d76:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8005d7a:	434b      	muls	r3, r1
 8005d7c:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
 8005d80:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8005d82:	6961      	ldr	r1, [r4, #20]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d05f      	beq.n	8005e48 <indev_proc_release+0x348>
        lv_obj_get_coords(drag_obj, &coords_ori);
 8005d88:	4669      	mov	r1, sp
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f001 f922 	bl	8006fd4 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8005d90:	4628      	mov	r0, r5
 8005d92:	f001 f925 	bl	8006fe0 <lv_obj_get_x>
 8005d96:	8aa6      	ldrh	r6, [r4, #20]
 8005d98:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f001 f926 	bl	8006fec <lv_obj_get_y>
 8005da0:	8ae2      	ldrh	r2, [r4, #22]
        if(allowed_dirs == LV_DRAG_DIR_ALL)
 8005da2:	f1b8 0f03 	cmp.w	r8, #3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8005da6:	4402      	add	r2, r0
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8005da8:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8005daa:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_ALL)
 8005dac:	d13c      	bne.n	8005e28 <indev_proc_release+0x328>
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 fcbe 	bl	8006732 <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
 8005db6:	a902      	add	r1, sp, #8
 8005db8:	4628      	mov	r0, r5
 8005dba:	f001 f90b 	bl	8006fd4 <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8005dbe:	f9bd 2000 	ldrsh.w	r2, [sp]
 8005dc2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d004      	beq.n	8005dd4 <indev_proc_release+0x2d4>
 8005dca:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f47f af1e 	bne.w	8005c10 <indev_proc_release+0x110>
 8005dd4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8005dd8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d004      	beq.n	8005dea <indev_proc_release+0x2ea>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8005de0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f47f af13 	bne.w	8005c10 <indev_proc_release+0x110>
            proc->types.pointer.drag_in_prog      = 0;
 8005dea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005dee:	683a      	ldr	r2, [r7, #0]
            proc->types.pointer.drag_in_prog      = 0;
 8005df0:	f36f 0341 	bfc	r3, #1, #1
 8005df4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            proc->types.pointer.vect.x            = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
 8005dfc:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8005dfe:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8005e00:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005e02:	69eb      	ldr	r3, [r5, #28]
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005e04:	210e      	movs	r1, #14
 8005e06:	4628      	mov	r0, r5
 8005e08:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fc16 	bl	800563c <indev_reset_check>
 8005e10:	4602      	mov	r2, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f47f aefc 	bne.w	8005c10 <indev_proc_release+0x110>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8005e18:	2109      	movs	r1, #9
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fbe2 	bl	80065e4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7ff fc0b 	bl	800563c <indev_reset_check>
 8005e26:	e6f3      	b.n	8005c10 <indev_proc_release+0x110>
        else if(allowed_dirs & LV_DRAG_DIR_HOR)
 8005e28:	f018 0f01 	tst.w	r8, #1
 8005e2c:	d004      	beq.n	8005e38 <indev_proc_release+0x338>
            lv_obj_set_x(drag_obj, act_x);
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 fcc1 	bl	80067b8 <lv_obj_set_x>
 8005e36:	e7be      	b.n	8005db6 <indev_proc_release+0x2b6>
        else if(allowed_dirs & LV_DRAG_DIR_VER)
 8005e38:	f018 0f02 	tst.w	r8, #2
 8005e3c:	d0bb      	beq.n	8005db6 <indev_proc_release+0x2b6>
            lv_obj_set_y(drag_obj, act_y);
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 fcc3 	bl	80067cc <lv_obj_set_y>
 8005e46:	e7b6      	b.n	8005db6 <indev_proc_release+0x2b6>
        proc->types.pointer.drag_in_prog = 0;
 8005e48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005e4c:	f361 0341 	bfi	r3, r1, #1, #1
 8005e50:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8005e54:	69eb      	ldr	r3, [r5, #28]
 8005e56:	e7d5      	b.n	8005e04 <indev_proc_release+0x304>

08005e58 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8005e58:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8005e5c:	0793      	lsls	r3, r2, #30
 8005e5e:	d519      	bpl.n	8005e94 <indev_proc_reset_query_handler+0x3c>
        indev->proc.types.pointer.act_obj           = NULL;
 8005e60:	2300      	movs	r3, #0
        indev->proc.types.pointer.drag_limit_out    = 0;
 8005e62:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.types.pointer.act_obj           = NULL;
 8005e66:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.reset_query                     = 0;
 8005e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e6c:	f363 0241 	bfi	r2, r3, #1, #1
        indev->proc.types.pointer.drag_in_prog      = 0;
 8005e70:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
        indev->proc.reset_query                     = 0;
 8005e74:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
        indev_obj_act                               = NULL;
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <indev_proc_reset_query_handler+0x40>)
        indev->proc.types.pointer.last_obj          = NULL;
 8005e7a:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_in_prog      = 0;
 8005e7c:	f363 0141 	bfi	r1, r3, #1, #1
        indev->proc.types.pointer.last_pressed      = NULL;
 8005e80:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.types.pointer.drag_in_prog      = 0;
 8005e82:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev->proc.pr_timestamp                    = 0;
 8005e86:	6443      	str	r3, [r0, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8005e88:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.types.pointer.drag_sum.x        = 0;
 8005e8a:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
 8005e8c:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8005e8e:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 8005e90:	8643      	strh	r3, [r0, #50]	; 0x32
        indev_obj_act                               = NULL;
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	20010214 	.word	0x20010214

08005e9c <lv_indev_reset.part.1>:
void lv_indev_reset(lv_indev_t * indev)
 8005e9c:	b508      	push	{r3, lr}
        lv_indev_t * i = lv_indev_get_next(NULL);
 8005e9e:	2000      	movs	r0, #0
            i = lv_indev_get_next(i);
 8005ea0:	f005 fe68 	bl	800bb74 <lv_indev_get_next>
        while(i) {
 8005ea4:	b900      	cbnz	r0, 8005ea8 <lv_indev_reset.part.1+0xc>
}
 8005ea6:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 8005ea8:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8005eac:	f043 0302 	orr.w	r3, r3, #2
 8005eb0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8005eb4:	e7f4      	b.n	8005ea0 <lv_indev_reset.part.1+0x4>

08005eb6 <lv_indev_init>:
{
 8005eb6:	f7ff bff1 	b.w	8005e9c <lv_indev_reset.part.1>
	...

08005ebc <lv_indev_read_task>:
{
 8005ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    indev_act = task->user_data;
 8005ec0:	68c4      	ldr	r4, [r0, #12]
 8005ec2:	4bb8      	ldr	r3, [pc, #736]	; (80061a4 <lv_indev_read_task+0x2e8>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8005ec4:	68e2      	ldr	r2, [r4, #12]
    indev_act = task->user_data;
 8005ec6:	601c      	str	r4, [r3, #0]
{
 8005ec8:	b087      	sub	sp, #28
 8005eca:	4698      	mov	r8, r3
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	f000 80ad 	beq.w	800602c <lv_indev_read_task+0x170>
    indev_proc_reset_query_handler(indev_act);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff ffc0 	bl	8005e58 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 8005ed8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005edc:	0758      	lsls	r0, r3, #29
 8005ede:	f100 80a5 	bmi.w	800602c <lv_indev_read_task+0x170>
        indev_obj_act = NULL;
 8005ee2:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80061a8 <lv_indev_read_task+0x2ec>
 8005ee6:	4655      	mov	r5, sl
        more_to_read = lv_indev_read(indev_act, &data);
 8005ee8:	a902      	add	r1, sp, #8
 8005eea:	f8d8 0000 	ldr.w	r0, [r8]
 8005eee:	f005 fe4b 	bl	800bb88 <lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8005ef2:	f8d8 4000 	ldr.w	r4, [r8]
        more_to_read = lv_indev_read(indev_act, &data);
 8005ef6:	4681      	mov	r9, r0
        indev_proc_reset_query_handler(indev_act);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff ffad 	bl	8005e58 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8ca 3000 	str.w	r3, [sl]
        indev_act->proc.state = data.state;
 8005f04:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005f08:	7723      	strb	r3, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <lv_indev_read_task+0x5e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8005f0e:	68e4      	ldr	r4, [r4, #12]
 8005f10:	f005 fe64 	bl	800bbdc <lv_tick_get>
 8005f14:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
 8005f18:	e006      	b.n	8005f28 <lv_indev_read_task+0x6c>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8005f1a:	7823      	ldrb	r3, [r4, #0]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d103      	bne.n	8005f28 <lv_indev_read_task+0x6c>
 8005f20:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f2      	bne.n	8005f0e <lv_indev_read_task+0x52>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8005f28:	f8d8 4000 	ldr.w	r4, [r8]
 8005f2c:	7823      	ldrb	r3, [r4, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d11e      	bne.n	8005f70 <lv_indev_read_task+0xb4>
    if(i->cursor != NULL &&
 8005f32:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005f34:	b148      	cbz	r0, 8005f4a <lv_indev_read_task+0x8e>
 8005f36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f38:	9b02      	ldr	r3, [sp, #8]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d005      	beq.n	8005f4a <lv_indev_read_task+0x8e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8005f3e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8005f42:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8005f46:	f000 fbf4 	bl	8006732 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 8005f4a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8005f4e:	8423      	strh	r3, [r4, #32]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8005f50:	4620      	mov	r0, r4
    i->proc.types.pointer.act_point.y = data->point.y;
 8005f52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005f56:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8005f58:	f810 3f1c 	ldrb.w	r3, [r0, #28]!
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 827e 	bne.w	800645e <lv_indev_read_task+0x5a2>
        indev_proc_press(&i->proc);
 8005f62:	f7ff fba9 	bl	80056b8 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8005f66:	8c23      	ldrh	r3, [r4, #32]
 8005f68:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8005f6a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005f6c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8005f6e:	e051      	b.n	8006014 <lv_indev_read_task+0x158>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	f040 811b 	bne.w	80061ac <lv_indev_read_task+0x2f0>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8005f76:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005f80:	d101      	bne.n	8005f86 <lv_indev_read_task+0xca>
 8005f82:	0719      	lsls	r1, r3, #28
 8005f84:	d446      	bmi.n	8006014 <lv_indev_read_task+0x158>
    if(i->proc.wait_until_release) {
 8005f86:	071a      	lsls	r2, r3, #28
 8005f88:	d509      	bpl.n	8005f9e <lv_indev_read_task+0xe2>
        i->proc.pr_timestamp            = 0;
 8005f8a:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8005f8c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8005f90:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 8005f94:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8005f96:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8005f9a:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
 8005f9e:	6d66      	ldr	r6, [r4, #84]	; 0x54
    if(g == NULL) return;
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	d037      	beq.n	8006014 <lv_indev_read_task+0x158>
    indev_obj_act = lv_group_get_focused(g);
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff fab7 	bl	8005518 <lv_group_get_focused>
 8005faa:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8005fac:	b390      	cbz	r0, 8006014 <lv_indev_read_task+0x158>
    i->proc.types.keypad.last_key = data->key;
 8005fae:	9a03      	ldr	r2, [sp, #12]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8005fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
 8005fb2:	6262      	str	r2, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8005fb4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8005fb8:	f894 7020 	ldrb.w	r7, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
 8005fbc:	f884 2020 	strb.w	r2, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8005fc0:	2a01      	cmp	r2, #1
 8005fc2:	f040 80b2 	bne.w	800612a <lv_indev_read_task+0x26e>
 8005fc6:	2f00      	cmp	r7, #0
 8005fc8:	d14d      	bne.n	8006066 <lv_indev_read_task+0x1aa>
        i->proc.pr_timestamp = lv_tick_get();
 8005fca:	f005 fe07 	bl	800bbdc <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8005fce:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 8005fd0:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 8005fd2:	290a      	cmp	r1, #10
 8005fd4:	d10f      	bne.n	8005ff6 <lv_indev_read_task+0x13a>
            lv_group_send_data(g, LV_KEY_ENTER);
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7ff faa3 	bl	8005522 <lv_group_send_data>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8005fdc:	6828      	ldr	r0, [r5, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	69c3      	ldr	r3, [r0, #28]
 8005fe2:	2107      	movs	r1, #7
            if(indev_reset_check(&i->proc)) return;
 8005fe4:	341c      	adds	r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8005fe6:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7ff fb27 	bl	800563c <indev_reset_check>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	b980      	cbnz	r0, 8006014 <lv_indev_read_task+0x158>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	e05d      	b.n	80060b2 <lv_indev_read_task+0x1f6>
        } else if(data->key == LV_KEY_ESC) {
 8005ff6:	291b      	cmp	r1, #27
 8005ff8:	d11b      	bne.n	8006032 <lv_indev_read_task+0x176>
            lv_group_send_data(g, LV_KEY_ESC);
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff fa91 	bl	8005522 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8006000:	463a      	mov	r2, r7
 8006002:	2112      	movs	r1, #18
 8006004:	6828      	ldr	r0, [r5, #0]
 8006006:	f000 faed 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800600a:	f104 001c 	add.w	r0, r4, #28
                if(indev_reset_check(&i->proc)) return;
 800600e:	f7ff fb15 	bl	800563c <indev_reset_check>
 8006012:	b328      	cbz	r0, 8006060 <lv_indev_read_task+0x1a4>
        indev_proc_reset_query_handler(indev_act);
 8006014:	f8d8 0000 	ldr.w	r0, [r8]
 8006018:	f7ff ff1e 	bl	8005e58 <indev_proc_reset_query_handler>
    } while(more_to_read);
 800601c:	f1b9 0f00 	cmp.w	r9, #0
 8006020:	f47f af62 	bne.w	8005ee8 <lv_indev_read_task+0x2c>
    indev_act     = NULL;
 8006024:	f8c8 9000 	str.w	r9, [r8]
    indev_obj_act = NULL;
 8006028:	f8c5 9000 	str.w	r9, [r5]
}
 800602c:	b007      	add	sp, #28
 800602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(data->key == LV_KEY_NEXT) {
 8006032:	2909      	cmp	r1, #9
 8006034:	d107      	bne.n	8006046 <lv_indev_read_task+0x18a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7ff fa87 	bl	800554c <lv_group_set_editing>
            lv_group_focus_next(g);
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff f9f8 	bl	8005434 <lv_group_focus_next>
 8006044:	e7e1      	b.n	800600a <lv_indev_read_task+0x14e>
        else if(data->key == LV_KEY_PREV) {
 8006046:	290b      	cmp	r1, #11
 8006048:	d107      	bne.n	800605a <lv_indev_read_task+0x19e>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7ff fa7d 	bl	800554c <lv_group_set_editing>
            lv_group_focus_prev(g);
 8006052:	4630      	mov	r0, r6
 8006054:	f7ff f9fc 	bl	8005450 <lv_group_focus_prev>
 8006058:	e7d7      	b.n	800600a <lv_indev_read_task+0x14e>
            lv_group_send_data(g, data->key);
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff fa61 	bl	8005522 <lv_group_send_data>
    indev_obj_act = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	e7d6      	b.n	8006014 <lv_indev_read_task+0x158>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 8006066:	2f01      	cmp	r7, #1
 8006068:	d1fa      	bne.n	8006060 <lv_indev_read_task+0x1a4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800606a:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
 800606e:	f017 0701 	ands.w	r7, r7, #1
 8006072:	d123      	bne.n	80060bc <lv_indev_read_task+0x200>
 8006074:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006076:	f005 fdbf 	bl	800bbf8 <lv_tick_elaps>
 800607a:	8ae3      	ldrh	r3, [r4, #22]
 800607c:	4298      	cmp	r0, r3
 800607e:	d91d      	bls.n	80060bc <lv_indev_read_task+0x200>
            i->proc.long_pr_sent = 1;
 8006080:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	2b0a      	cmp	r3, #10
 8006090:	d1e6      	bne.n	8006060 <lv_indev_read_task+0x1a4>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8006092:	f005 fda3 	bl	800bbdc <lv_tick_get>
 8006096:	64a0      	str	r0, [r4, #72]	; 0x48
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8006098:	6828      	ldr	r0, [r5, #0]
 800609a:	463a      	mov	r2, r7
 800609c:	69c3      	ldr	r3, [r0, #28]
 800609e:	210b      	movs	r1, #11
                if(indev_reset_check(&i->proc)) return;
 80060a0:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80060a2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff fac9 	bl	800563c <indev_reset_check>
 80060aa:	4602      	mov	r2, r0
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1b1      	bne.n	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80060b0:	2104      	movs	r1, #4
 80060b2:	6828      	ldr	r0, [r5, #0]
 80060b4:	f000 fa96 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80060b8:	4620      	mov	r0, r4
 80060ba:	e7a8      	b.n	800600e <lv_indev_read_task+0x152>
        else if(i->proc.long_pr_sent != 0 &&
 80060bc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80060c0:	07df      	lsls	r7, r3, #31
 80060c2:	d5cd      	bpl.n	8006060 <lv_indev_read_task+0x1a4>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 80060c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80060c6:	f005 fd97 	bl	800bbf8 <lv_tick_elaps>
 80060ca:	8b23      	ldrh	r3, [r4, #24]
        else if(i->proc.long_pr_sent != 0 &&
 80060cc:	4298      	cmp	r0, r3
 80060ce:	d9c7      	bls.n	8006060 <lv_indev_read_task+0x1a4>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80060d0:	f005 fd84 	bl	800bbdc <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80060d4:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80060d6:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 80060d8:	290a      	cmp	r1, #10
 80060da:	f104 041c 	add.w	r4, r4, #28
 80060de:	d10c      	bne.n	80060fa <lv_indev_read_task+0x23e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 80060e0:	6828      	ldr	r0, [r5, #0]
 80060e2:	2200      	movs	r2, #0
 80060e4:	69c3      	ldr	r3, [r0, #28]
 80060e6:	210c      	movs	r1, #12
 80060e8:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff faa6 	bl	800563c <indev_reset_check>
 80060f0:	4602      	mov	r2, r0
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d18e      	bne.n	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80060f6:	2105      	movs	r1, #5
 80060f8:	e7db      	b.n	80060b2 <lv_indev_read_task+0x1f6>
            else if(data->key == LV_KEY_NEXT) {
 80060fa:	2909      	cmp	r1, #9
 80060fc:	d107      	bne.n	800610e <lv_indev_read_task+0x252>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80060fe:	4630      	mov	r0, r6
 8006100:	2100      	movs	r1, #0
 8006102:	f7ff fa23 	bl	800554c <lv_group_set_editing>
                lv_group_focus_next(g);
 8006106:	4630      	mov	r0, r6
 8006108:	f7ff f994 	bl	8005434 <lv_group_focus_next>
 800610c:	e7d4      	b.n	80060b8 <lv_indev_read_task+0x1fc>
            else if(data->key == LV_KEY_PREV) {
 800610e:	290b      	cmp	r1, #11
 8006110:	d107      	bne.n	8006122 <lv_indev_read_task+0x266>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8006112:	4630      	mov	r0, r6
 8006114:	2100      	movs	r1, #0
 8006116:	f7ff fa19 	bl	800554c <lv_group_set_editing>
                lv_group_focus_prev(g);
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff f998 	bl	8005450 <lv_group_focus_prev>
 8006120:	e7ca      	b.n	80060b8 <lv_indev_read_task+0x1fc>
                lv_group_send_data(g, data->key);
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff f9fd 	bl	8005522 <lv_group_send_data>
 8006128:	e7c6      	b.n	80060b8 <lv_indev_read_task+0x1fc>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 800612a:	2a00      	cmp	r2, #0
 800612c:	d198      	bne.n	8006060 <lv_indev_read_task+0x1a4>
 800612e:	2f01      	cmp	r7, #1
 8006130:	d196      	bne.n	8006060 <lv_indev_read_task+0x1a4>
        if(data->key == LV_KEY_ENTER) {
 8006132:	290a      	cmp	r1, #10
        data->key = prev_key;
 8006134:	9103      	str	r1, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 8006136:	d006      	beq.n	8006146 <lv_indev_read_task+0x28a>
        i->proc.long_pr_sent = 0;
 8006138:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
        i->proc.pr_timestamp = 0;
 800613c:	2200      	movs	r2, #0
 800613e:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8006140:	f362 0300 	bfi	r3, r2, #0, #1
 8006144:	e0e4      	b.n	8006310 <lv_indev_read_task+0x454>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006146:	69c3      	ldr	r3, [r0, #28]
            if(indev_reset_check(&i->proc)) return;
 8006148:	f104 061c 	add.w	r6, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800614c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800614e:	4630      	mov	r0, r6
 8006150:	f7ff fa74 	bl	800563c <indev_reset_check>
 8006154:	2800      	cmp	r0, #0
 8006156:	f47f af5d 	bne.w	8006014 <lv_indev_read_task+0x158>
            if(i->proc.long_pr_sent == 0) {
 800615a:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800615e:	f012 0201 	ands.w	r2, r2, #1
 8006162:	d015      	beq.n	8006190 <lv_indev_read_task+0x2d4>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006164:	2200      	movs	r2, #0
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006166:	2106      	movs	r1, #6
 8006168:	6828      	ldr	r0, [r5, #0]
 800616a:	f000 fa3b 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff fa64 	bl	800563c <indev_reset_check>
 8006174:	4602      	mov	r2, r0
 8006176:	2800      	cmp	r0, #0
 8006178:	f47f af4c 	bne.w	8006014 <lv_indev_read_task+0x158>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 800617c:	2107      	movs	r1, #7
 800617e:	6828      	ldr	r0, [r5, #0]
 8006180:	f000 fa30 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff fa59 	bl	800563c <indev_reset_check>
 800618a:	2800      	cmp	r0, #0
 800618c:	d0d4      	beq.n	8006138 <lv_indev_read_task+0x27c>
 800618e:	e741      	b.n	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8006190:	2103      	movs	r1, #3
 8006192:	6828      	ldr	r0, [r5, #0]
 8006194:	f000 fa26 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006198:	4630      	mov	r0, r6
 800619a:	f7ff fa4f 	bl	800563c <indev_reset_check>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0e0      	beq.n	8006164 <lv_indev_read_task+0x2a8>
 80061a2:	e737      	b.n	8006014 <lv_indev_read_task+0x158>
 80061a4:	20010210 	.word	0x20010210
 80061a8:	20010214 	.word	0x20010214
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	f040 8140 	bne.w	8006432 <lv_indev_read_task+0x576>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80061b2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80061b6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80061ba:	2901      	cmp	r1, #1
 80061bc:	d102      	bne.n	80061c4 <lv_indev_read_task+0x308>
 80061be:	071e      	lsls	r6, r3, #28
 80061c0:	f53f af28 	bmi.w	8006014 <lv_indev_read_task+0x158>
    if(i->proc.wait_until_release) {
 80061c4:	0718      	lsls	r0, r3, #28
 80061c6:	d509      	bpl.n	80061dc <lv_indev_read_task+0x320>
        i->proc.pr_timestamp            = 0;
 80061c8:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 80061ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80061ce:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 80061d2:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 80061d4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80061d8:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
 80061dc:	6d66      	ldr	r6, [r4, #84]	; 0x54
    i->proc.types.keypad.last_key   = data->key;
 80061de:	9b03      	ldr	r3, [sp, #12]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80061e0:	f894 b020 	ldrb.w	fp, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 80061e4:	6263      	str	r3, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 80061e6:	f884 1020 	strb.w	r1, [r4, #32]
    if(g == NULL) return;
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	f43f af12 	beq.w	8006014 <lv_indev_read_task+0x158>
    indev_obj_act = lv_group_get_focused(g);
 80061f0:	4630      	mov	r0, r6
 80061f2:	f7ff f991 	bl	8005518 <lv_group_get_focused>
 80061f6:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 80061f8:	2800      	cmp	r0, #0
 80061fa:	f43f af0b 	beq.w	8006014 <lv_indev_read_task+0x158>
    if(data->state == LV_INDEV_STATE_REL) {
 80061fe:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8006202:	b31f      	cbz	r7, 800624c <lv_indev_read_task+0x390>
    indev_obj_act = lv_group_get_focused(g);
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff f987 	bl	8005518 <lv_group_get_focused>
 800620a:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 800620c:	2800      	cmp	r0, #0
 800620e:	f43f af01 	beq.w	8006014 <lv_indev_read_task+0x158>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8006212:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8006216:	2901      	cmp	r1, #1
 8006218:	f040 8094 	bne.w	8006344 <lv_indev_read_task+0x488>
 800621c:	f1bb 0f00 	cmp.w	fp, #0
 8006220:	d14a      	bne.n	80062b8 <lv_indev_read_task+0x3fc>
        bool editable = false;
 8006222:	aa06      	add	r2, sp, #24
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006224:	69c3      	ldr	r3, [r0, #28]
        bool editable = false;
 8006226:	f802 bd11 	strb.w	fp, [r2, #-17]!
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800622a:	2112      	movs	r1, #18
 800622c:	4798      	blx	r3
        i->proc.pr_timestamp = lv_tick_get();
 800622e:	f005 fcd5 	bl	800bbdc <lv_tick_get>
 8006232:	6460      	str	r0, [r4, #68]	; 0x44
        if(lv_group_get_editing(g) == true || editable == false) {
 8006234:	4630      	mov	r0, r6
 8006236:	f7ff f9f5 	bl	8005624 <lv_group_get_editing>
 800623a:	2800      	cmp	r0, #0
 800623c:	f47f aece 	bne.w	8005fdc <lv_indev_read_task+0x120>
 8006240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f af0b 	bne.w	8006060 <lv_indev_read_task+0x1a4>
 800624a:	e6c7      	b.n	8005fdc <lv_indev_read_task+0x120>
        if(lv_group_get_editing(g)) {
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff f9e9 	bl	8005624 <lv_group_get_editing>
 8006252:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006256:	b1b8      	cbz	r0, 8006288 <lv_indev_read_task+0x3cc>
            if(data->enc_diff < 0) {
 8006258:	2b00      	cmp	r3, #0
 800625a:	da0a      	bge.n	8006272 <lv_indev_read_task+0x3b6>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 800625c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006260:	425b      	negs	r3, r3
 8006262:	429f      	cmp	r7, r3
 8006264:	dace      	bge.n	8006204 <lv_indev_read_task+0x348>
 8006266:	2114      	movs	r1, #20
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff f95a 	bl	8005522 <lv_group_send_data>
 800626e:	3701      	adds	r7, #1
 8006270:	e7f4      	b.n	800625c <lv_indev_read_task+0x3a0>
            } else if(data->enc_diff > 0) {
 8006272:	d0c7      	beq.n	8006204 <lv_indev_read_task+0x348>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8006274:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006278:	429f      	cmp	r7, r3
 800627a:	dac3      	bge.n	8006204 <lv_indev_read_task+0x348>
 800627c:	2113      	movs	r1, #19
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff f94f 	bl	8005522 <lv_group_send_data>
 8006284:	3701      	adds	r7, #1
 8006286:	e7f5      	b.n	8006274 <lv_indev_read_task+0x3b8>
            if(data->enc_diff < 0) {
 8006288:	2b00      	cmp	r3, #0
 800628a:	da0a      	bge.n	80062a2 <lv_indev_read_task+0x3e6>
 800628c:	4607      	mov	r7, r0
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 800628e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006292:	425b      	negs	r3, r3
 8006294:	429f      	cmp	r7, r3
 8006296:	dab5      	bge.n	8006204 <lv_indev_read_task+0x348>
 8006298:	4630      	mov	r0, r6
 800629a:	f7ff f8d9 	bl	8005450 <lv_group_focus_prev>
 800629e:	3701      	adds	r7, #1
 80062a0:	e7f5      	b.n	800628e <lv_indev_read_task+0x3d2>
            } else if(data->enc_diff > 0) {
 80062a2:	d0af      	beq.n	8006204 <lv_indev_read_task+0x348>
 80062a4:	4607      	mov	r7, r0
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 80062a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80062aa:	429f      	cmp	r7, r3
 80062ac:	daaa      	bge.n	8006204 <lv_indev_read_task+0x348>
 80062ae:	4630      	mov	r0, r6
 80062b0:	f7ff f8c0 	bl	8005434 <lv_group_focus_next>
 80062b4:	3701      	adds	r7, #1
 80062b6:	e7f6      	b.n	80062a6 <lv_indev_read_task+0x3ea>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 80062b8:	f1bb 0f01 	cmp.w	fp, #1
 80062bc:	f47f aed0 	bne.w	8006060 <lv_indev_read_task+0x1a4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80062c0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80062c4:	f013 0701 	ands.w	r7, r3, #1
 80062c8:	f47f aeca 	bne.w	8006060 <lv_indev_read_task+0x1a4>
 80062cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062ce:	f005 fc93 	bl	800bbf8 <lv_tick_elaps>
 80062d2:	8ae3      	ldrh	r3, [r4, #22]
 80062d4:	4298      	cmp	r0, r3
 80062d6:	f67f aec3 	bls.w	8006060 <lv_indev_read_task+0x1a4>
            bool editable = false;
 80062da:	aa06      	add	r2, sp, #24
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80062dc:	6828      	ldr	r0, [r5, #0]
            bool editable = false;
 80062de:	f802 7d11 	strb.w	r7, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80062e2:	69c3      	ldr	r3, [r0, #28]
 80062e4:	2112      	movs	r1, #18
 80062e6:	4798      	blx	r3
            if(editable) {
 80062e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80062ec:	b19a      	cbz	r2, 8006316 <lv_indev_read_task+0x45a>
                if(lv_ll_is_empty(&g->obj_ll) == false) {
 80062ee:	4630      	mov	r0, r6
 80062f0:	f006 f81e 	bl	800c330 <lv_ll_is_empty>
 80062f4:	b940      	cbnz	r0, 8006308 <lv_indev_read_task+0x44c>
                    lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff f994 	bl	8005624 <lv_group_get_editing>
 80062fc:	f080 0101 	eor.w	r1, r0, #1
 8006300:	b2c9      	uxtb	r1, r1
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff f922 	bl	800554c <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 8006308:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8006314:	e6a4      	b.n	8006060 <lv_indev_read_task+0x1a4>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8006316:	6828      	ldr	r0, [r5, #0]
 8006318:	210b      	movs	r1, #11
 800631a:	69c3      	ldr	r3, [r0, #28]
                if(indev_reset_check(&i->proc)) return;
 800631c:	f104 061c 	add.w	r6, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8006320:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff f98a 	bl	800563c <indev_reset_check>
 8006328:	4602      	mov	r2, r0
 800632a:	2800      	cmp	r0, #0
 800632c:	f47f ae72 	bne.w	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8006330:	2104      	movs	r1, #4
 8006332:	6828      	ldr	r0, [r5, #0]
 8006334:	f000 f956 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff f97f 	bl	800563c <indev_reset_check>
 800633e:	2800      	cmp	r0, #0
 8006340:	d0e2      	beq.n	8006308 <lv_indev_read_task+0x44c>
 8006342:	e667      	b.n	8006014 <lv_indev_read_task+0x158>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 8006344:	2900      	cmp	r1, #0
 8006346:	f47f ae8b 	bne.w	8006060 <lv_indev_read_task+0x1a4>
 800634a:	f1bb 0f01 	cmp.w	fp, #1
 800634e:	f47f ae87 	bne.w	8006060 <lv_indev_read_task+0x1a4>
        bool editable = false;
 8006352:	aa06      	add	r2, sp, #24
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006354:	69c3      	ldr	r3, [r0, #28]
        bool editable = false;
 8006356:	f802 1d11 	strb.w	r1, [r2, #-17]!
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800635a:	2112      	movs	r1, #18
 800635c:	4798      	blx	r3
        if(editable == false) {
 800635e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006362:	b9e2      	cbnz	r2, 800639e <lv_indev_read_task+0x4e2>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006364:	6828      	ldr	r0, [r5, #0]
 8006366:	210a      	movs	r1, #10
 8006368:	69c3      	ldr	r3, [r0, #28]
            if(indev_reset_check(&i->proc)) return;
 800636a:	f104 061c 	add.w	r6, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800636e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff f963 	bl	800563c <indev_reset_check>
 8006376:	2800      	cmp	r0, #0
 8006378:	f47f ae4c 	bne.w	8006014 <lv_indev_read_task+0x158>
            if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800637c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8006380:	f012 0201 	ands.w	r2, r2, #1
 8006384:	d103      	bne.n	800638e <lv_indev_read_task+0x4d2>
 8006386:	2103      	movs	r1, #3
 8006388:	6828      	ldr	r0, [r5, #0]
 800638a:	f000 f92b 	bl	80065e4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff f954 	bl	800563c <indev_reset_check>
 8006394:	4602      	mov	r2, r0
 8006396:	2800      	cmp	r0, #0
 8006398:	f47f ae3c 	bne.w	8006014 <lv_indev_read_task+0x158>
 800639c:	e6e3      	b.n	8006166 <lv_indev_read_task+0x2aa>
        else if(g->editing) {
 800639e:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
 80063a2:	f013 0f02 	tst.w	r3, #2
 80063a6:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80063aa:	d03a      	beq.n	8006422 <lv_indev_read_task+0x566>
            if(!i->proc.long_pr_sent || lv_ll_is_empty(&g->obj_ll)) {
 80063ac:	07da      	lsls	r2, r3, #31
 80063ae:	d432      	bmi.n	8006416 <lv_indev_read_task+0x55a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80063b0:	6828      	ldr	r0, [r5, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	69c3      	ldr	r3, [r0, #28]
 80063b6:	210a      	movs	r1, #10
                if(indev_reset_check(&i->proc)) return;
 80063b8:	f104 071c 	add.w	r7, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80063bc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80063be:	4638      	mov	r0, r7
 80063c0:	f7ff f93c 	bl	800563c <indev_reset_check>
 80063c4:	4602      	mov	r2, r0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f47f ae24 	bne.w	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80063cc:	2103      	movs	r1, #3
 80063ce:	6828      	ldr	r0, [r5, #0]
 80063d0:	f000 f908 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80063d4:	4638      	mov	r0, r7
 80063d6:	f7ff f931 	bl	800563c <indev_reset_check>
 80063da:	4602      	mov	r2, r0
 80063dc:	2800      	cmp	r0, #0
 80063de:	f47f ae19 	bne.w	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80063e2:	2106      	movs	r1, #6
 80063e4:	6828      	ldr	r0, [r5, #0]
 80063e6:	f000 f8fd 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80063ea:	4638      	mov	r0, r7
 80063ec:	f7ff f926 	bl	800563c <indev_reset_check>
 80063f0:	4602      	mov	r2, r0
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f47f ae0e 	bne.w	8006014 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80063f8:	2107      	movs	r1, #7
 80063fa:	6828      	ldr	r0, [r5, #0]
 80063fc:	f000 f8f2 	bl	80065e4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006400:	4638      	mov	r0, r7
 8006402:	f7ff f91b 	bl	800563c <indev_reset_check>
 8006406:	2800      	cmp	r0, #0
 8006408:	f47f ae04 	bne.w	8006014 <lv_indev_read_task+0x158>
                lv_group_send_data(g, LV_KEY_ENTER);
 800640c:	210a      	movs	r1, #10
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff f887 	bl	8005522 <lv_group_send_data>
 8006414:	e690      	b.n	8006138 <lv_indev_read_task+0x27c>
            if(!i->proc.long_pr_sent || lv_ll_is_empty(&g->obj_ll)) {
 8006416:	4630      	mov	r0, r6
 8006418:	f005 ff8a 	bl	800c330 <lv_ll_is_empty>
 800641c:	2800      	cmp	r0, #0
 800641e:	d1c7      	bne.n	80063b0 <lv_indev_read_task+0x4f4>
 8006420:	e68a      	b.n	8006138 <lv_indev_read_task+0x27c>
        else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8006422:	07db      	lsls	r3, r3, #31
 8006424:	f53f ae88 	bmi.w	8006138 <lv_indev_read_task+0x27c>
            lv_group_set_editing(g, true); /*Set edit mode*/
 8006428:	4659      	mov	r1, fp
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff f88e 	bl	800554c <lv_group_set_editing>
 8006430:	e682      	b.n	8006138 <lv_indev_read_task+0x27c>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8006432:	2b03      	cmp	r3, #3
 8006434:	f47f adee 	bne.w	8006014 <lv_indev_read_task+0x158>
    i->proc.types.pointer.act_point.x = i->btn_points[data->btn_id].x;
 8006438:	9a04      	ldr	r2, [sp, #16]
 800643a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800643c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006440:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 8006444:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = i->btn_points[data->btn_id].y;
 8006446:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800644a:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
 800644c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800644e:	6a23      	ldr	r3, [r4, #32]
 8006450:	429a      	cmp	r2, r3
 8006452:	f104 001c 	add.w	r0, r4, #28
 8006456:	d102      	bne.n	800645e <lv_indev_read_task+0x5a2>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8006458:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800645c:	e57e      	b.n	8005f5c <lv_indev_read_task+0xa0>
        indev_proc_release(&i->proc);
 800645e:	f7ff fb4f 	bl	8005b00 <indev_proc_release>
 8006462:	e580      	b.n	8005f66 <lv_indev_read_task+0xaa>

08006464 <lv_indev_get_act>:
}
 8006464:	4b01      	ldr	r3, [pc, #4]	; (800646c <lv_indev_get_act+0x8>)
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20010210 	.word	0x20010210

08006470 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8006470:	b150      	cbz	r0, 8006488 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8006472:	7803      	ldrb	r3, [r0, #0]
 8006474:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8006478:	2b01      	cmp	r3, #1
 800647a:	d104      	bne.n	8006486 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800647c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8006480:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006484:	4770      	bx	lr
    if(indev == NULL) return false;
 8006486:	2000      	movs	r0, #0
}
 8006488:	4770      	bx	lr

0800648a <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 800648a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 800648e:	1d05      	adds	r5, r0, #4
 8006490:	4628      	mov	r0, r5
{
 8006492:	460e      	mov	r6, r1
 8006494:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 8006496:	f005 fe56 	bl	800c146 <lv_ll_get_head>
    {
        i->coords.x1 += x_diff;
 800649a:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 800649e:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 80064a0:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 80064a4:	b90c      	cbnz	r4, 80064aa <refresh_children_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 80064a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 80064aa:	8a23      	ldrh	r3, [r4, #16]
 80064ac:	4443      	add	r3, r8
 80064ae:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 80064b0:	8a63      	ldrh	r3, [r4, #18]
 80064b2:	444b      	add	r3, r9
 80064b4:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 80064b6:	8aa3      	ldrh	r3, [r4, #20]
 80064b8:	4443      	add	r3, r8
 80064ba:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 80064bc:	8ae3      	ldrh	r3, [r4, #22]
 80064be:	444b      	add	r3, r9
 80064c0:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 80064c2:	4620      	mov	r0, r4
 80064c4:	463a      	mov	r2, r7
 80064c6:	4631      	mov	r1, r6
 80064c8:	f7ff ffdf 	bl	800648a <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f005 fe3f 	bl	800c152 <lv_ll_get_next>
 80064d4:	4604      	mov	r4, r0
 80064d6:	e7e5      	b.n	80064a4 <refresh_children_position+0x1a>

080064d8 <lv_init>:
{
 80064d8:	b510      	push	{r4, lr}
    if(lv_initialized) {
 80064da:	4c12      	ldr	r4, [pc, #72]	; (8006524 <lv_init+0x4c>)
 80064dc:	7823      	ldrb	r3, [r4, #0]
 80064de:	b9fb      	cbnz	r3, 8006520 <lv_init+0x48>
    lv_mem_init();
 80064e0:	f005 ff66 	bl	800c3b0 <lv_mem_init>
    lv_task_core_init();
 80064e4:	f006 f800 	bl	800c4e8 <lv_task_core_init>
    lv_fs_init();
 80064e8:	f005 fd2a 	bl	800bf40 <lv_fs_init>
    lv_anim_core_init();
 80064ec:	f005 fc20 	bl	800bd30 <lv_anim_core_init>
    lv_group_init();
 80064f0:	f7fe ff9a 	bl	8005428 <lv_group_init>
    lv_style_init();
 80064f4:	f001 f9c6 	bl	8007884 <lv_style_init>
    lv_refr_init();
 80064f8:	f000 ffa8 	bl	800744c <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80064fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006500:	4809      	ldr	r0, [pc, #36]	; (8006528 <lv_init+0x50>)
 8006502:	f005 fdda 	bl	800c0ba <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006506:	215c      	movs	r1, #92	; 0x5c
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <lv_init+0x54>)
 800650a:	f005 fdd6 	bl	800c0ba <lv_ll_init>
    lv_indev_init();
 800650e:	f7ff fcd2 	bl	8005eb6 <lv_indev_init>
    lv_img_decoder_init();
 8006512:	f005 f8bb 	bl	800b68c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8006516:	2001      	movs	r0, #1
 8006518:	f004 fd5a 	bl	800afd0 <lv_img_cache_set_size>
    lv_initialized = true;
 800651c:	2301      	movs	r3, #1
 800651e:	7023      	strb	r3, [r4, #0]
 8006520:	bd10      	pop	{r4, pc}
 8006522:	bf00      	nop
 8006524:	20010220 	.word	0x20010220
 8006528:	20015bd8 	.word	0x20015bd8
 800652c:	20015bc8 	.word	0x20015bc8

08006530 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8006530:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006534:	f361 0300 	bfi	r3, r1, #0, #1
 8006538:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800653c:	4770      	bx	lr

0800653e <lv_obj_set_protect>:
    obj->protect |= prot;
 800653e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006542:	4319      	orrs	r1, r3
 8006544:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8006548:	4770      	bx	lr

0800654a <lv_obj_clear_protect>:
    obj->protect &= prot;
 800654a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800654e:	ea23 0101 	bic.w	r1, r3, r1
 8006552:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8006556:	4770      	bx	lr

08006558 <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 8006558:	6181      	str	r1, [r0, #24]
 800655a:	4770      	bx	lr

0800655c <lv_event_send_func>:
{
 800655c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 8006560:	4c1e      	ldr	r4, [pc, #120]	; (80065dc <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 8006562:	9101      	str	r1, [sp, #4]
{
 8006564:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 8006566:	2300      	movs	r3, #0
 8006568:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 800656c:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 800656e:	6823      	ldr	r3, [r4, #0]
{
 8006570:	4681      	mov	r9, r0
 8006572:	460d      	mov	r5, r1
 8006574:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 8006576:	b103      	cbz	r3, 800657a <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 8006578:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 800657a:	4e19      	ldr	r6, [pc, #100]	; (80065e0 <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 800657c:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 800657e:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 8006582:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 8006584:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006588:	f7ff ff6c 	bl	8006464 <lv_indev_get_act>
    if(indev_act) {
 800658c:	b118      	cbz	r0, 8006596 <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800658e:	6883      	ldr	r3, [r0, #8]
 8006590:	b10b      	cbz	r3, 8006596 <lv_event_send_func+0x3a>
 8006592:	4639      	mov	r1, r7
 8006594:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8006596:	f1b9 0f00 	cmp.w	r9, #0
 800659a:	d002      	beq.n	80065a2 <lv_event_send_func+0x46>
 800659c:	4639      	mov	r1, r7
 800659e:	4628      	mov	r0, r5
 80065a0:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 80065a2:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 80065a4:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 80065ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80065b0:	b983      	cbnz	r3, 80065d4 <lv_event_send_func+0x78>
    if(obj) {
 80065b2:	b18d      	cbz	r5, 80065d8 <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 80065b4:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	da0d      	bge.n	80065d8 <lv_event_send_func+0x7c>
 80065bc:	6828      	ldr	r0, [r5, #0]
 80065be:	b158      	cbz	r0, 80065d8 <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 80065c0:	4642      	mov	r2, r8
 80065c2:	4639      	mov	r1, r7
 80065c4:	f000 f80e 	bl	80065e4 <lv_event_send>
        return LV_RES_INV;
 80065c8:	1e43      	subs	r3, r0, #1
 80065ca:	4258      	negs	r0, r3
 80065cc:	4158      	adcs	r0, r3
}
 80065ce:	b004      	add	sp, #16
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7fa      	b.n	80065ce <lv_event_send_func+0x72>
    return LV_RES_OK;
 80065d8:	2001      	movs	r0, #1
 80065da:	e7f8      	b.n	80065ce <lv_event_send_func+0x72>
 80065dc:	2001021c 	.word	0x2001021c
 80065e0:	20010218 	.word	0x20010218

080065e4 <lv_event_send>:
{
 80065e4:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 80065e6:	b120      	cbz	r0, 80065f2 <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80065e8:	460a      	mov	r2, r1
 80065ea:	4601      	mov	r1, r0
 80065ec:	6980      	ldr	r0, [r0, #24]
 80065ee:	f7ff bfb5 	b.w	800655c <lv_event_send_func>
}
 80065f2:	2001      	movs	r0, #1
 80065f4:	4770      	bx	lr

080065f6 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 80065f6:	61c1      	str	r1, [r0, #28]
 80065f8:	4770      	bx	lr

080065fa <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 80065fa:	6201      	str	r1, [r0, #32]
 80065fc:	4770      	bx	lr

080065fe <lv_obj_allocate_ext_attr>:
{
 80065fe:	b510      	push	{r4, lr}
 8006600:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006602:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006604:	f005 ff46 	bl	800c494 <lv_mem_realloc>
 8006608:	6260      	str	r0, [r4, #36]	; 0x24
}
 800660a:	bd10      	pop	{r4, pc}

0800660c <lv_obj_get_disp>:
{
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 800660e:	6803      	ldr	r3, [r0, #0]
{
 8006610:	4605      	mov	r5, r0
    if(obj->par == NULL)
 8006612:	b943      	cbnz	r3, 8006626 <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006614:	480f      	ldr	r0, [pc, #60]	; (8006654 <lv_obj_get_disp+0x48>)
 8006616:	4f0f      	ldr	r7, [pc, #60]	; (8006654 <lv_obj_get_disp+0x48>)
 8006618:	f005 fd95 	bl	800c146 <lv_ll_get_head>
 800661c:	4604      	mov	r4, r0
 800661e:	b934      	cbnz	r4, 800662e <lv_obj_get_disp+0x22>
}
 8006620:	4620      	mov	r0, r4
 8006622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006624:	461d      	mov	r5, r3
    return obj->par;
 8006626:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1fb      	bne.n	8006624 <lv_obj_get_disp+0x18>
 800662c:	e7f2      	b.n	8006614 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 800662e:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8006632:	4630      	mov	r0, r6
 8006634:	f005 fd87 	bl	800c146 <lv_ll_get_head>
 8006638:	b928      	cbnz	r0, 8006646 <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800663a:	4621      	mov	r1, r4
 800663c:	4638      	mov	r0, r7
 800663e:	f005 fd88 	bl	800c152 <lv_ll_get_next>
 8006642:	4604      	mov	r4, r0
 8006644:	e7eb      	b.n	800661e <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8006646:	4285      	cmp	r5, r0
 8006648:	d0ea      	beq.n	8006620 <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 800664a:	4601      	mov	r1, r0
 800664c:	4630      	mov	r0, r6
 800664e:	f005 fd80 	bl	800c152 <lv_ll_get_next>
 8006652:	e7f1      	b.n	8006638 <lv_obj_get_disp+0x2c>
 8006654:	20015bd8 	.word	0x20015bd8

08006658 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8006658:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 800665c:	06da      	lsls	r2, r3, #27
{
 800665e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006660:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8006662:	d439      	bmi.n	80066d8 <lv_obj_invalidate+0x80>
 8006664:	4605      	mov	r5, r0
    return obj->par;
 8006666:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006668:	bb53      	cbnz	r3, 80066c0 <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800666a:	4628      	mov	r0, r5
 800666c:	f7ff ffce 	bl	800660c <lv_obj_get_disp>
 8006670:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006672:	f7fe fe3b 	bl	80052ec <lv_disp_get_scr_act>
 8006676:	4285      	cmp	r5, r0
 8006678:	d124      	bne.n	80066c4 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 800667a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 800667e:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8006680:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8006684:	6861      	ldr	r1, [r4, #4]
 8006686:	466a      	mov	r2, sp
 8006688:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 800668a:	f8bd 2000 	ldrh.w	r2, [sp]
 800668e:	b29b      	uxth	r3, r3
 8006690:	1ad2      	subs	r2, r2, r3
 8006692:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 8006696:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 80066a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80066a4:	441a      	add	r2, r3
 80066a6:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 80066aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80066ae:	4413      	add	r3, r2
 80066b0:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 80066b4:	b995      	cbnz	r5, 80066dc <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 80066b6:	4669      	mov	r1, sp
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 fec8 	bl	800744e <lv_inv_area>
 80066be:	e00b      	b.n	80066d8 <lv_obj_invalidate+0x80>
    } while(par != NULL);
 80066c0:	461d      	mov	r5, r3
 80066c2:	e7d0      	b.n	8006666 <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7fe fe22 	bl	800530e <lv_disp_get_layer_top>
 80066ca:	4285      	cmp	r5, r0
 80066cc:	d0d5      	beq.n	800667a <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7fe fe24 	bl	800531c <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80066d4:	4285      	cmp	r5, r0
 80066d6:	d0d0      	beq.n	800667a <lv_obj_invalidate+0x22>
}
 80066d8:	b002      	add	sp, #8
 80066da:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 80066dc:	f105 0210 	add.w	r2, r5, #16
 80066e0:	4669      	mov	r1, sp
 80066e2:	4668      	mov	r0, sp
 80066e4:	f005 fb56 	bl	800bd94 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0f5      	beq.n	80066d8 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 80066ec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80066f0:	06db      	lsls	r3, r3, #27
 80066f2:	d4f1      	bmi.n	80066d8 <lv_obj_invalidate+0x80>
    return obj->par;
 80066f4:	682d      	ldr	r5, [r5, #0]
 80066f6:	e7dd      	b.n	80066b4 <lv_obj_invalidate+0x5c>

080066f8 <lv_obj_move_foreground>:
{
 80066f8:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 80066fa:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 80066fc:	1d26      	adds	r6, r4, #4
{
 80066fe:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8006700:	4630      	mov	r0, r6
 8006702:	f005 fd20 	bl	800c146 <lv_ll_get_head>
 8006706:	4285      	cmp	r5, r0
 8006708:	d012      	beq.n	8006730 <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff ffa4 	bl	8006658 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8006710:	462a      	mov	r2, r5
 8006712:	4631      	mov	r1, r6
 8006714:	4630      	mov	r0, r6
 8006716:	2301      	movs	r3, #1
 8006718:	f005 fd8e 	bl	800c238 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800671c:	69e3      	ldr	r3, [r4, #28]
 800671e:	462a      	mov	r2, r5
 8006720:	4620      	mov	r0, r4
 8006722:	2101      	movs	r1, #1
 8006724:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8006726:	4620      	mov	r0, r4
}
 8006728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800672c:	f7ff bf94 	b.w	8006658 <lv_obj_invalidate>
 8006730:	bd70      	pop	{r4, r5, r6, pc}

08006732 <lv_obj_set_pos>:
{
 8006732:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 8006736:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 8006738:	8a03      	ldrh	r3, [r0, #16]
 800673a:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 800673e:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 8006740:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 8006744:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 8006746:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 8006748:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 800674a:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 800674e:	4415      	add	r5, r2
 8006750:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 8006752:	fa0f f788 	sxth.w	r7, r8
{
 8006756:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 8006758:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 800675c:	b917      	cbnz	r7, 8006764 <lv_obj_set_pos+0x32>
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	d026      	beq.n	80067b2 <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff ff77 	bl	8006658 <lv_obj_invalidate>
 800676a:	4622      	mov	r2, r4
 800676c:	466b      	mov	r3, sp
 800676e:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8006772:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 8006774:	8ae2      	ldrh	r2, [r4, #22]
 8006776:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 8006778:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 800677a:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 800677c:	4443      	add	r3, r8
 800677e:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 8006780:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 8006782:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 8006784:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 8006786:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 8006788:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800678a:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 800678c:	464a      	mov	r2, r9
 800678e:	4639      	mov	r1, r7
 8006790:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 8006792:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8006794:	f7ff fe79 	bl	800648a <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006798:	69e3      	ldr	r3, [r4, #28]
 800679a:	466a      	mov	r2, sp
 800679c:	2102      	movs	r1, #2
 800679e:	4620      	mov	r0, r4
 80067a0:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80067a2:	69f3      	ldr	r3, [r6, #28]
 80067a4:	4622      	mov	r2, r4
 80067a6:	2101      	movs	r1, #1
 80067a8:	4630      	mov	r0, r6
 80067aa:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff ff53 	bl	8006658 <lv_obj_invalidate>
}
 80067b2:	b003      	add	sp, #12
 80067b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067b8 <lv_obj_set_x>:
{
 80067b8:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80067ba:	6804      	ldr	r4, [r0, #0]
 80067bc:	8a42      	ldrh	r2, [r0, #18]
 80067be:	8a63      	ldrh	r3, [r4, #18]
}
 80067c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80067c4:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 80067c6:	b212      	sxth	r2, r2
 80067c8:	f7ff bfb3 	b.w	8006732 <lv_obj_set_pos>

080067cc <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80067cc:	6802      	ldr	r2, [r0, #0]
 80067ce:	8a03      	ldrh	r3, [r0, #16]
 80067d0:	8a12      	ldrh	r2, [r2, #16]
 80067d2:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80067d4:	460a      	mov	r2, r1
 80067d6:	b219      	sxth	r1, r3
 80067d8:	f7ff bfab 	b.w	8006732 <lv_obj_set_pos>

080067dc <lv_obj_align>:
{
 80067dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 80067e0:	6804      	ldr	r4, [r0, #0]
{
 80067e2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80067e6:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80067ea:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 80067ee:	4605      	mov	r5, r0
 80067f0:	4616      	mov	r6, r2
 80067f2:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80067f4:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80067f6:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 80067fa:	2900      	cmp	r1, #0
 80067fc:	bf18      	it	ne
 80067fe:	460c      	movne	r4, r1
    switch(align) {
 8006800:	2a14      	cmp	r2, #20
 8006802:	d816      	bhi.n	8006832 <lv_obj_align+0x56>
 8006804:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006808:	0128001c 	.word	0x0128001c
 800680c:	00540042 	.word	0x00540042
 8006810:	0083005a 	.word	0x0083005a
 8006814:	00a4009e 	.word	0x00a4009e
 8006818:	00cd00b5 	.word	0x00cd00b5
 800681c:	00e700d2 	.word	0x00e700d2
 8006820:	00f200ed 	.word	0x00f200ed
 8006824:	010d0107 	.word	0x010d0107
 8006828:	01150111 	.word	0x01150111
 800682c:	011e0119 	.word	0x011e0119
 8006830:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006832:	eba0 010e 	sub.w	r1, r0, lr
 8006836:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006838:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800683c:	b212      	sxth	r2, r2
            break;
 800683e:	e049      	b.n	80068d4 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8006840:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 8006844:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8006846:	8ae3      	ldrh	r3, [r4, #22]
 8006848:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 800684a:	f10a 0a01 	add.w	sl, sl, #1
 800684e:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 8006852:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 8006854:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 800685a:	3101      	adds	r1, #1
 800685c:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 800685e:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006860:	f04f 0b02 	mov.w	fp, #2
 8006864:	fa0f fa8a 	sxth.w	sl, sl
 8006868:	b209      	sxth	r1, r1
 800686a:	fb9a fafb 	sdiv	sl, sl, fp
 800686e:	fb91 f1fb 	sdiv	r1, r1, fp
 8006872:	eba2 0209 	sub.w	r2, r2, r9
 8006876:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800687a:	b21b      	sxth	r3, r3
 800687c:	b212      	sxth	r2, r2
 800687e:	fb93 f3fb 	sdiv	r3, r3, fp
 8006882:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006886:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006888:	1a9a      	subs	r2, r3, r2
 800688a:	e7d7      	b.n	800683c <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 800688c:	8aa1      	ldrh	r1, [r4, #20]
 800688e:	8a23      	ldrh	r3, [r4, #16]
 8006890:	3101      	adds	r1, #1
 8006892:	1ac9      	subs	r1, r1, r3
 8006894:	8aab      	ldrh	r3, [r5, #20]
 8006896:	3301      	adds	r3, #1
 8006898:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800689a:	2202      	movs	r2, #2
 800689c:	b209      	sxth	r1, r1
 800689e:	b200      	sxth	r0, r0
 80068a0:	fb91 f1f2 	sdiv	r1, r1, r2
 80068a4:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80068a8:	1a09      	subs	r1, r1, r0
 80068aa:	b209      	sxth	r1, r1
            new_y = 0;
 80068ac:	2200      	movs	r2, #0
            break;
 80068ae:	e011      	b.n	80068d4 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80068b0:	8aa9      	ldrh	r1, [r5, #20]
 80068b2:	1a08      	subs	r0, r1, r0
 80068b4:	8aa1      	ldrh	r1, [r4, #20]
 80068b6:	1a09      	subs	r1, r1, r0
 80068b8:	8a20      	ldrh	r0, [r4, #16]
 80068ba:	e7f5      	b.n	80068a8 <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80068bc:	8aea      	ldrh	r2, [r5, #22]
 80068be:	eba2 0909 	sub.w	r9, r2, r9
 80068c2:	8ae2      	ldrh	r2, [r4, #22]
 80068c4:	eba2 0209 	sub.w	r2, r2, r9
 80068c8:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 80068cc:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 80068d0:	b212      	sxth	r2, r2
            new_x = 0;
 80068d2:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 80068d4:	8a23      	ldrh	r3, [r4, #16]
 80068d6:	eba8 0e0e 	sub.w	lr, r8, lr
 80068da:	449e      	add	lr, r3
    new_y -= par_abs_y;
 80068dc:	8a63      	ldrh	r3, [r4, #18]
 80068de:	eba7 0c0c 	sub.w	ip, r7, ip
 80068e2:	449c      	add	ip, r3
    new_x -= par_abs_x;
 80068e4:	4471      	add	r1, lr
    new_y -= par_abs_y;
 80068e6:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 80068e8:	b212      	sxth	r2, r2
 80068ea:	b209      	sxth	r1, r1
 80068ec:	4628      	mov	r0, r5
 80068ee:	f7ff ff20 	bl	8006732 <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 80068f2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 80068f6:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 80068fa:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 80068fe:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006902:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 8006904:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 8006906:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800690a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800690e:	8aa1      	ldrh	r1, [r4, #20]
 8006910:	8a23      	ldrh	r3, [r4, #16]
 8006912:	3101      	adds	r1, #1
 8006914:	1ac9      	subs	r1, r1, r3
 8006916:	8aab      	ldrh	r3, [r5, #20]
 8006918:	3301      	adds	r3, #1
 800691a:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800691c:	2202      	movs	r2, #2
 800691e:	b209      	sxth	r1, r1
 8006920:	b200      	sxth	r0, r0
 8006922:	fb91 f1f2 	sdiv	r1, r1, r2
 8006926:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800692a:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800692c:	8aea      	ldrh	r2, [r5, #22]
 800692e:	eba2 0909 	sub.w	r9, r2, r9
 8006932:	8ae2      	ldrh	r2, [r4, #22]
 8006934:	eba2 0209 	sub.w	r2, r2, r9
 8006938:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800693c:	b209      	sxth	r1, r1
 800693e:	eba2 0209 	sub.w	r2, r2, r9
 8006942:	e77b      	b.n	800683c <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006944:	8aa9      	ldrh	r1, [r5, #20]
 8006946:	1a08      	subs	r0, r1, r0
 8006948:	8aa1      	ldrh	r1, [r4, #20]
 800694a:	1a09      	subs	r1, r1, r0
 800694c:	8a20      	ldrh	r0, [r4, #16]
 800694e:	e7ec      	b.n	800692a <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 8006950:	8ae3      	ldrh	r3, [r4, #22]
 8006952:	8a62      	ldrh	r2, [r4, #18]
 8006954:	3301      	adds	r3, #1
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	8aea      	ldrh	r2, [r5, #22]
 800695a:	3201      	adds	r2, #1
 800695c:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006960:	2102      	movs	r1, #2
 8006962:	b21b      	sxth	r3, r3
 8006964:	b212      	sxth	r2, r2
 8006966:	fb93 f3f1 	sdiv	r3, r3, r1
 800696a:	fb92 f2f1 	sdiv	r2, r2, r1
 800696e:	1a9a      	subs	r2, r3, r2
 8006970:	e7ae      	b.n	80068d0 <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006972:	8aa9      	ldrh	r1, [r5, #20]
 8006974:	1a08      	subs	r0, r1, r0
 8006976:	8aa1      	ldrh	r1, [r4, #20]
 8006978:	1a09      	subs	r1, r1, r0
 800697a:	8a20      	ldrh	r0, [r4, #16]
 800697c:	1a09      	subs	r1, r1, r0
 800697e:	8ae0      	ldrh	r0, [r4, #22]
 8006980:	8a62      	ldrh	r2, [r4, #18]
 8006982:	3001      	adds	r0, #1
 8006984:	1a80      	subs	r0, r0, r2
 8006986:	8aea      	ldrh	r2, [r5, #22]
 8006988:	3201      	adds	r2, #1
 800698a:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800698e:	2302      	movs	r3, #2
 8006990:	b200      	sxth	r0, r0
 8006992:	b212      	sxth	r2, r2
 8006994:	fb90 f0f3 	sdiv	r0, r0, r3
 8006998:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800699c:	b209      	sxth	r1, r1
 800699e:	1a82      	subs	r2, r0, r2
 80069a0:	e74c      	b.n	800683c <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 80069a2:	8aea      	ldrh	r2, [r5, #22]
 80069a4:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 80069a8:	43d2      	mvns	r2, r2
 80069aa:	e791      	b.n	80068d0 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 80069ac:	8aa1      	ldrh	r1, [r4, #20]
 80069ae:	8a23      	ldrh	r3, [r4, #16]
 80069b0:	3101      	adds	r1, #1
 80069b2:	1ac9      	subs	r1, r1, r3
 80069b4:	8aab      	ldrh	r3, [r5, #20]
 80069b6:	3301      	adds	r3, #1
 80069b8:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80069ba:	2202      	movs	r2, #2
 80069bc:	b209      	sxth	r1, r1
 80069be:	b200      	sxth	r0, r0
 80069c0:	fb91 f1f2 	sdiv	r1, r1, r2
 80069c4:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 80069c8:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80069ca:	1a09      	subs	r1, r1, r0
 80069cc:	eba2 0209 	sub.w	r2, r2, r9
 80069d0:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 80069d2:	43d2      	mvns	r2, r2
 80069d4:	e732      	b.n	800683c <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80069d6:	8aa9      	ldrh	r1, [r5, #20]
 80069d8:	1a08      	subs	r0, r1, r0
 80069da:	8aa1      	ldrh	r1, [r4, #20]
 80069dc:	1a09      	subs	r1, r1, r0
 80069de:	8a20      	ldrh	r0, [r4, #16]
 80069e0:	e7f2      	b.n	80069c8 <lv_obj_align+0x1ec>
 80069e2:	8ae2      	ldrh	r2, [r4, #22]
 80069e4:	8a63      	ldrh	r3, [r4, #18]
 80069e6:	3201      	adds	r2, #1
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	e771      	b.n	80068d0 <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 80069ec:	8aa1      	ldrh	r1, [r4, #20]
 80069ee:	8a23      	ldrh	r3, [r4, #16]
 80069f0:	3101      	adds	r1, #1
 80069f2:	1ac9      	subs	r1, r1, r3
 80069f4:	8aab      	ldrh	r3, [r5, #20]
 80069f6:	3301      	adds	r3, #1
 80069f8:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80069fa:	2202      	movs	r2, #2
 80069fc:	b209      	sxth	r1, r1
 80069fe:	b200      	sxth	r0, r0
 8006a00:	fb91 f1f2 	sdiv	r1, r1, r2
 8006a04:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 8006a08:	8ae2      	ldrh	r2, [r4, #22]
 8006a0a:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006a0c:	1a09      	subs	r1, r1, r0
 8006a0e:	3201      	adds	r2, #1
 8006a10:	b209      	sxth	r1, r1
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	e712      	b.n	800683c <lv_obj_align+0x60>
 8006a16:	8aa9      	ldrh	r1, [r5, #20]
 8006a18:	1a08      	subs	r0, r1, r0
 8006a1a:	8aa1      	ldrh	r1, [r4, #20]
 8006a1c:	1a09      	subs	r1, r1, r0
 8006a1e:	8a20      	ldrh	r0, [r4, #16]
 8006a20:	e7f2      	b.n	8006a08 <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 8006a22:	8aa9      	ldrh	r1, [r5, #20]
 8006a24:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8006a26:	43c9      	mvns	r1, r1
 8006a28:	e73f      	b.n	80068aa <lv_obj_align+0xce>
 8006a2a:	8aa9      	ldrh	r1, [r5, #20]
 8006a2c:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8006a2e:	43c9      	mvns	r1, r1
 8006a30:	e7a5      	b.n	800697e <lv_obj_align+0x1a2>
 8006a32:	8aa9      	ldrh	r1, [r5, #20]
 8006a34:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8006a36:	43c9      	mvns	r1, r1
 8006a38:	e778      	b.n	800692c <lv_obj_align+0x150>
 8006a3a:	8aa1      	ldrh	r1, [r4, #20]
 8006a3c:	8a23      	ldrh	r3, [r4, #16]
 8006a3e:	3101      	adds	r1, #1
 8006a40:	1ac9      	subs	r1, r1, r3
 8006a42:	e732      	b.n	80068aa <lv_obj_align+0xce>
 8006a44:	8aa1      	ldrh	r1, [r4, #20]
 8006a46:	8a23      	ldrh	r3, [r4, #16]
 8006a48:	3101      	adds	r1, #1
 8006a4a:	1ac9      	subs	r1, r1, r3
 8006a4c:	e797      	b.n	800697e <lv_obj_align+0x1a2>
 8006a4e:	8aa1      	ldrh	r1, [r4, #20]
 8006a50:	8a23      	ldrh	r3, [r4, #16]
 8006a52:	3101      	adds	r1, #1
 8006a54:	1ac9      	subs	r1, r1, r3
 8006a56:	e769      	b.n	800692c <lv_obj_align+0x150>
            new_y = 0;
 8006a58:	2200      	movs	r2, #0
            new_x = 0;
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	e73a      	b.n	80068d4 <lv_obj_align+0xf8>

08006a5e <lv_obj_align_origo>:
{
 8006a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	4616      	mov	r6, r2
 8006a66:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 8006a6a:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006a6c:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006a70:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 8006a74:	6804      	ldr	r4, [r0, #0]
{
 8006a76:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006a7a:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 8006a7c:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 8006a80:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 8006a82:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 8006a86:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006a8a:	f04f 0a02 	mov.w	sl, #2
{
 8006a8e:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006a90:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006a94:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006a96:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8006a9a:	b212      	sxth	r2, r2
    if(base == NULL) {
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	bf18      	it	ne
 8006aa0:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8006aa2:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 8006aa6:	2e14      	cmp	r6, #20
 8006aa8:	d80c      	bhi.n	8006ac4 <lv_obj_align_origo+0x66>
 8006aaa:	e8df f006 	tbb	[pc, r6]
 8006aae:	672e      	.short	0x672e
 8006ab0:	597c894b 	.word	0x597c894b
 8006ab4:	67916c9b 	.word	0x67916c9b
 8006ab8:	597c894b 	.word	0x597c894b
 8006abc:	7c6c679b 	.word	0x7c6c679b
 8006ac0:	9189      	.short	0x9189
 8006ac2:	9b          	.byte	0x9b
 8006ac3:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006ac4:	eba9 0103 	sub.w	r1, r9, r3
 8006ac8:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006aca:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 8006ace:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 8006ad2:	eba8 0303 	sub.w	r3, r8, r3
 8006ad6:	4473      	add	r3, lr
 8006ad8:	4419      	add	r1, r3
    new_y -= par_abs_y;
 8006ada:	8a63      	ldrh	r3, [r4, #18]
 8006adc:	1a38      	subs	r0, r7, r0
 8006ade:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006ae0:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 8006ae2:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 8006ae4:	b212      	sxth	r2, r2
 8006ae6:	b209      	sxth	r1, r1
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7ff fe22 	bl	8006732 <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 8006aee:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 8006af2:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 8006af6:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 8006afa:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006afe:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 8006b00:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 8006b02:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 8006b0a:	8aa1      	ldrh	r1, [r4, #20]
 8006b0c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 8006b10:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 8006b14:	3101      	adds	r1, #1
 8006b16:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006b1a:	b209      	sxth	r1, r1
 8006b1c:	f04f 0c02 	mov.w	ip, #2
 8006b20:	fb91 f1fc 	sdiv	r1, r1, ip
 8006b24:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 8006b28:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8006b2c:	f10e 0e01 	add.w	lr, lr, #1
 8006b30:	ebae 0e09 	sub.w	lr, lr, r9
 8006b34:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006b36:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006b3a:	fb9e fefc 	sdiv	lr, lr, ip
 8006b3e:	ebae 0202 	sub.w	r2, lr, r2
 8006b42:	e7c4      	b.n	8006ace <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 8006b44:	8aa1      	ldrh	r1, [r4, #20]
 8006b46:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8006b4a:	3101      	adds	r1, #1
 8006b4c:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006b50:	b209      	sxth	r1, r1
 8006b52:	f04f 0c02 	mov.w	ip, #2
 8006b56:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b5a:	eba1 010e 	sub.w	r1, r1, lr
 8006b5e:	e00f      	b.n	8006b80 <lv_obj_align_origo+0x122>
 8006b60:	8aa1      	ldrh	r1, [r4, #20]
 8006b62:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8006b66:	3101      	adds	r1, #1
 8006b68:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8006b6c:	b209      	sxth	r1, r1
 8006b6e:	f04f 0c02 	mov.w	ip, #2
 8006b72:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b76:	eba1 010e 	sub.w	r1, r1, lr
 8006b7a:	e016      	b.n	8006baa <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 8006b7c:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b80:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 8006b82:	4252      	negs	r2, r2
 8006b84:	e7a3      	b.n	8006ace <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 8006b86:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 8006b8a:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8006b8e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8006b92:	f10e 0e01 	add.w	lr, lr, #1
 8006b96:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006b9a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8006b9c:	fa0f fe8e 	sxth.w	lr, lr
 8006ba0:	f04f 0c02 	mov.w	ip, #2
 8006ba4:	e7c9      	b.n	8006b3a <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 8006ba6:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006baa:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8006bae:	f1c2 0201 	rsb	r2, r2, #1
 8006bb2:	4472      	add	r2, lr
 8006bb4:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006bb8:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8006bba:	eba2 020e 	sub.w	r2, r2, lr
 8006bbe:	e786      	b.n	8006ace <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006bc0:	f1ce 0101 	rsb	r1, lr, #1
 8006bc4:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8006bc8:	4471      	add	r1, lr
 8006bca:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 8006bce:	e7c4      	b.n	8006b5a <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006bd0:	f1ce 0101 	rsb	r1, lr, #1
 8006bd4:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8006bd8:	4471      	add	r1, lr
 8006bda:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 8006bde:	eba1 010e 	sub.w	r1, r1, lr
 8006be2:	e7d2      	b.n	8006b8a <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006be4:	f1ce 0101 	rsb	r1, lr, #1
 8006be8:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8006bec:	4471      	add	r1, lr
 8006bee:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 8006bf2:	e7c0      	b.n	8006b76 <lv_obj_align_origo+0x118>

08006bf4 <lv_obj_realign>:
{
 8006bf4:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 8006bf6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006bfa:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 8006bfe:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006c02:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 8006c04:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006c08:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006c0a:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 8006c0e:	d003      	beq.n	8006c18 <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006c10:	f7ff ff25 	bl	8006a5e <lv_obj_align_origo>
}
 8006c14:	b002      	add	sp, #8
 8006c16:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8006c18:	f7ff fde0 	bl	80067dc <lv_obj_align>
}
 8006c1c:	e7fa      	b.n	8006c14 <lv_obj_realign+0x20>
	...

08006c20 <lv_obj_create>:
{
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	460d      	mov	r5, r1
    if(parent == NULL) {
 8006c24:	4606      	mov	r6, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f040 80e6 	bne.w	8006df8 <lv_obj_create+0x1d8>
        lv_disp_t * disp = lv_disp_get_default();
 8006c2c:	f004 fef6 	bl	800ba1c <lv_disp_get_default>
        if(!disp) {
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f000 8133 	beq.w	8006e9c <lv_obj_create+0x27c>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8006c36:	302c      	adds	r0, #44	; 0x2c
 8006c38:	f005 fa49 	bl	800c0ce <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	b900      	cbnz	r0, 8006c42 <lv_obj_create+0x22>
 8006c40:	e7fe      	b.n	8006c40 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8006c42:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 8006c44:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8006c48:	f005 fa37 	bl	800c0ba <lv_ll_init>
        new_obj->coords.x1    = 0;
 8006c4c:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 8006c4e:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8006c50:	4630      	mov	r0, r6
 8006c52:	f004 fee9 	bl	800ba28 <lv_disp_get_hor_res>
 8006c56:	3801      	subs	r0, #1
 8006c58:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f004 fef6 	bl	800ba4c <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 8006c60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 8006c64:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8006c66:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 8006c68:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8006c6c:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8006c6e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8006c72:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8006c74:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8006c76:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8006c78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 8006c7c:	f007 f8f8 	bl	800de70 <lv_theme_get_current>
        if(th) {
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f000 80b7 	beq.w	8006df4 <lv_obj_create+0x1d4>
            new_obj->style_p = th->style.scr;
 8006c86:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 8006c88:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 8006c8c:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8006c8e:	4b84      	ldr	r3, [pc, #528]	; (8006ea0 <lv_obj_create+0x280>)
 8006c90:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8006c92:	4b84      	ldr	r3, [pc, #528]	; (8006ea4 <lv_obj_create+0x284>)
 8006c94:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 8006c96:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 8006c9a:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 8006c9c:	f363 12c7 	bfi	r2, r3, #7, #1
 8006ca0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 8006ca4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 8006ca8:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 8006caa:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 8006cac:	f363 0287 	bfi	r2, r3, #2, #6
        new_obj->group_p = NULL;
 8006cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8006cb2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8006cb6:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 8006cba:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 8006cbe:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	f000 80e7 	beq.w	8006e94 <lv_obj_create+0x274>
    memcpy(dest, src, sizeof(lv_area_t));
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	f852 3f10 	ldr.w	r3, [r2, #16]!
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	6853      	ldr	r3, [r2, #4]
 8006cd0:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8006cd2:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 8006cd6:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 8006cd8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8006cdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8006ce0:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 8006ce4:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8006ce6:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 8006cea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8006cec:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8006cee:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 8006cf2:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8006cf4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006cf8:	f362 0300 	bfi	r3, r2, #0, #1
 8006cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 8006d00:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 8006d02:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 8006d06:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 8006d08:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006d0c:	f362 0300 	bfi	r3, r2, #0, #1
 8006d10:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8006d14:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d18:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006d1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d20:	f363 0241 	bfi	r2, r3, #1, #1
 8006d24:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8006d28:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 8006d2c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006d30:	f362 0301 	bfi	r3, r2, #0, #2
 8006d34:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8006d38:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d3c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006d40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006d44:	f363 0282 	bfi	r2, r3, #2, #1
 8006d48:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8006d4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006d56:	f363 02c3 	bfi	r2, r3, #3, #1
 8006d5a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 8006d5e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006d68:	f363 1204 	bfi	r2, r3, #4, #1
 8006d6c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 8006d70:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d7a:	f363 1245 	bfi	r2, r3, #5, #1
 8006d7e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 8006d82:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	09db      	lsrs	r3, r3, #7
 8006d8a:	f363 12c7 	bfi	r2, r3, #7, #1
 8006d8e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 8006d92:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d9c:	f363 1286 	bfi	r2, r3, #6, #1
 8006da0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 8006da4:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8006da8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8006dac:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8006db0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 8006db4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8006db6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006db8:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 8006dba:	b110      	cbz	r0, 8006dc2 <lv_obj_create+0x1a2>
            lv_group_add_obj(copy->group_p, new_obj);
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7fe fb6d 	bl	800549c <lv_group_add_obj>
    return obj->par;
 8006dc2:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d060      	beq.n	8006e8a <lv_obj_create+0x26a>
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	d05e      	beq.n	8006e8a <lv_obj_create+0x26a>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006dcc:	8a59      	ldrh	r1, [r3, #18]
 8006dce:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006dd0:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006dd2:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006dd4:	8a29      	ldrh	r1, [r5, #16]
 8006dd6:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8006dd8:	b212      	sxth	r2, r2
 8006dda:	b209      	sxth	r1, r1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff fca8 	bl	8006732 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8006de2:	69f3      	ldr	r3, [r6, #28]
 8006de4:	4622      	mov	r2, r4
 8006de6:	2101      	movs	r1, #1
 8006de8:	4630      	mov	r0, r6
 8006dea:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7ff fc33 	bl	8006658 <lv_obj_invalidate>
 8006df2:	e051      	b.n	8006e98 <lv_obj_create+0x278>
            new_obj->style_p = &lv_style_scr;
 8006df4:	4b2c      	ldr	r3, [pc, #176]	; (8006ea8 <lv_obj_create+0x288>)
 8006df6:	e747      	b.n	8006c88 <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8006df8:	3004      	adds	r0, #4
 8006dfa:	f005 f968 	bl	800c0ce <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8006dfe:	4604      	mov	r4, r0
 8006e00:	b900      	cbnz	r0, 8006e04 <lv_obj_create+0x1e4>
 8006e02:	e7fe      	b.n	8006e02 <lv_obj_create+0x1e2>
        new_obj->par = parent; /*Set the parent*/
 8006e04:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8006e08:	2144      	movs	r1, #68	; 0x44
 8006e0a:	f005 f956 	bl	800c0ba <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 8006e0e:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8006e12:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8006e14:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8006e18:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8006e1a:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 8006e1c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8006e20:	3364      	adds	r3, #100	; 0x64
 8006e22:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8006e24:	8a73      	ldrh	r3, [r6, #18]
 8006e26:	3342      	adds	r3, #66	; 0x42
 8006e28:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8006e2a:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 8006e2c:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 8006e30:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8006e32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8006e36:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8006e38:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8006e3a:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8006e3c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 8006e40:	f007 f816 	bl	800de70 <lv_theme_get_current>
        if(th) {
 8006e44:	b1f8      	cbz	r0, 8006e86 <lv_obj_create+0x266>
            new_obj->style_p = th->style.panel;
 8006e46:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 8006e48:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <lv_obj_create+0x280>)
 8006e4c:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <lv_obj_create+0x284>)
 8006e50:	6223      	str	r3, [r4, #32]
        new_obj->click        = 1;
 8006e52:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8006e56:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
        new_obj->drag         = 0;
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
        new_obj->event_cb = NULL;
 8006e5e:	2200      	movs	r2, #0
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8006e60:	f041 0103 	orr.w	r1, r1, #3
        new_obj->parent_event = 0;
 8006e64:	f003 0381 	and.w	r3, r3, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8006e68:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 8006e6c:	f362 13c7 	bfi	r3, r2, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 8006e70:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 8006e72:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 8006e74:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 8006e76:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8006e7a:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 8006e7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_attr = NULL;
 8006e82:	6262      	str	r2, [r4, #36]	; 0x24
 8006e84:	e71c      	b.n	8006cc0 <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <lv_obj_create+0x28c>)
 8006e88:	e7de      	b.n	8006e48 <lv_obj_create+0x228>
            lv_obj_set_pos(new_obj, 0, 0);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f7ff fc4f 	bl	8006732 <lv_obj_set_pos>
    if(parent != NULL) {
 8006e94:	2e00      	cmp	r6, #0
 8006e96:	d1a4      	bne.n	8006de2 <lv_obj_create+0x1c2>
}
 8006e98:	4620      	mov	r0, r4
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e7fb      	b.n	8006e98 <lv_obj_create+0x278>
 8006ea0:	08007075 	.word	0x08007075
 8006ea4:	08007131 	.word	0x08007131
 8006ea8:	20015acc 	.word	0x20015acc
 8006eac:	20015b6c 	.word	0x20015b6c

08006eb0 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 8006eb0:	8a83      	ldrh	r3, [r0, #20]
{
 8006eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	8a02      	ldrh	r2, [r0, #16]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8006ebc:	b21b      	sxth	r3, r3
 8006ebe:	4299      	cmp	r1, r3
{
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8006ec4:	d106      	bne.n	8006ed4 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 8006ec6:	8ac3      	ldrh	r3, [r0, #22]
 8006ec8:	8a42      	ldrh	r2, [r0, #18]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	1a9b      	subs	r3, r3, r2
 8006ece:	b21b      	sxth	r3, r3
 8006ed0:	429e      	cmp	r6, r3
 8006ed2:	d02b      	beq.n	8006f2c <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff fbbf 	bl	8006658 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8006eda:	4622      	mov	r2, r4
 8006edc:	466b      	mov	r3, sp
 8006ede:	f852 0f10 	ldr.w	r0, [r2, #16]!
 8006ee2:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8006ee4:	8a62      	ldrh	r2, [r4, #18]
 8006ee6:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8006ee8:	8a23      	ldrh	r3, [r4, #16]
 8006eea:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8006eec:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8006eee:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8006ef0:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8006ef2:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8006ef4:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006ef6:	69e3      	ldr	r3, [r4, #28]
 8006ef8:	466a      	mov	r2, sp
 8006efa:	2102      	movs	r1, #2
 8006efc:	4620      	mov	r0, r4
 8006efe:	4798      	blx	r3
    return obj->par;
 8006f00:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8006f02:	b118      	cbz	r0, 8006f0c <lv_obj_set_size+0x5c>
 8006f04:	69c3      	ldr	r3, [r0, #28]
 8006f06:	4622      	mov	r2, r4
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8006f0c:	1d26      	adds	r6, r4, #4
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f005 f919 	bl	800c146 <lv_ll_get_head>
 8006f14:	4605      	mov	r5, r0
 8006f16:	b958      	cbnz	r0, 8006f30 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7ff fb9d 	bl	8006658 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8006f1e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006f22:	07db      	lsls	r3, r3, #31
 8006f24:	d502      	bpl.n	8006f2c <lv_obj_set_size+0x7c>
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7ff fe64 	bl	8006bf4 <lv_obj_realign>
}
 8006f2c:	b002      	add	sp, #8
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8006f30:	69eb      	ldr	r3, [r5, #28]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2103      	movs	r1, #3
 8006f36:	4628      	mov	r0, r5
 8006f38:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f005 f908 	bl	800c152 <lv_ll_get_next>
 8006f42:	e7e7      	b.n	8006f14 <lv_obj_set_size+0x64>

08006f44 <lv_obj_refresh_style>:
{
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8006f48:	f7ff fb86 	bl	8006658 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8006f4c:	69e3      	ldr	r3, [r4, #28]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	2104      	movs	r1, #4
 8006f54:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006f56:	4620      	mov	r0, r4
}
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8006f5c:	f7ff bb7c 	b.w	8006658 <lv_obj_invalidate>

08006f60 <lv_obj_refresh_ext_draw_pad>:
{
 8006f60:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 8006f62:	2200      	movs	r2, #0
{
 8006f64:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 8006f66:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8006f68:	69c3      	ldr	r3, [r0, #28]
 8006f6a:	2105      	movs	r1, #5
 8006f6c:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006f6e:	4620      	mov	r0, r4
}
 8006f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 8006f74:	f7ff bb70 	b.w	8006658 <lv_obj_invalidate>

08006f78 <lv_obj_get_parent>:
}
 8006f78:	6800      	ldr	r0, [r0, #0]
 8006f7a:	4770      	bx	lr

08006f7c <lv_obj_get_child>:
{
 8006f7c:	3004      	adds	r0, #4
    if(child == NULL) {
 8006f7e:	b909      	cbnz	r1, 8006f84 <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 8006f80:	f005 b8e1 	b.w	800c146 <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 8006f84:	f005 b8e5 	b.w	800c152 <lv_ll_get_next>

08006f88 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 8006f8c:	3004      	adds	r0, #4
 8006f8e:	f005 f8da 	bl	800c146 <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
 8006f92:	4604      	mov	r4, r0
    while(child != NULL) {
 8006f94:	b900      	cbnz	r0, 8006f98 <refresh_children_style+0x10>
    }
}
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 8006f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f9a:	b953      	cbnz	r3, 8006fb2 <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff fff3 	bl	8006f88 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f7ff ffce 	bl	8006f44 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7ff ffe6 	bl	8006f7c <lv_obj_get_child>
 8006fb0:	e7ef      	b.n	8006f92 <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	07db      	lsls	r3, r3, #31
 8006fb6:	d5f7      	bpl.n	8006fa8 <refresh_children_style+0x20>
            refresh_children_style(child);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7ff ffe5 	bl	8006f88 <refresh_children_style>
 8006fbe:	e7f3      	b.n	8006fa8 <refresh_children_style+0x20>

08006fc0 <lv_obj_set_style>:
{
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4604      	mov	r4, r0
    obj->style_p = style;
 8006fc4:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8006fc6:	f7ff ffdf 	bl	8006f88 <refresh_children_style>
    lv_obj_refresh_style(obj);
 8006fca:	4620      	mov	r0, r4
}
 8006fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 8006fd0:	f7ff bfb8 	b.w	8006f44 <lv_obj_refresh_style>

08006fd4 <lv_obj_get_coords>:
 8006fd4:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8006fd8:	600b      	str	r3, [r1, #0]
 8006fda:	6843      	ldr	r3, [r0, #4]
 8006fdc:	604b      	str	r3, [r1, #4]
 8006fde:	4770      	bx	lr

08006fe0 <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006fe0:	6803      	ldr	r3, [r0, #0]
 8006fe2:	8a00      	ldrh	r0, [r0, #16]
 8006fe4:	8a1b      	ldrh	r3, [r3, #16]
 8006fe6:	1ac0      	subs	r0, r0, r3
}
 8006fe8:	b200      	sxth	r0, r0
 8006fea:	4770      	bx	lr

08006fec <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006fec:	6803      	ldr	r3, [r0, #0]
 8006fee:	8a40      	ldrh	r0, [r0, #18]
 8006ff0:	8a5b      	ldrh	r3, [r3, #18]
 8006ff2:	1ac0      	subs	r0, r0, r3
}
 8006ff4:	b200      	sxth	r0, r0
 8006ff6:	4770      	bx	lr

08006ff8 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8006ff8:	8a83      	ldrh	r3, [r0, #20]
 8006ffa:	8a00      	ldrh	r0, [r0, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	1a18      	subs	r0, r3, r0
}
 8007000:	b200      	sxth	r0, r0
 8007002:	4770      	bx	lr

08007004 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8007004:	8ac3      	ldrh	r3, [r0, #22]
 8007006:	8a40      	ldrh	r0, [r0, #18]
 8007008:	3301      	adds	r3, #1
 800700a:	1a18      	subs	r0, r3, r0
}
 800700c:	b200      	sxth	r0, r0
 800700e:	4770      	bx	lr

08007010 <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 8007010:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007014:	f000 0001 	and.w	r0, r0, #1
 8007018:	4770      	bx	lr
	...

0800701c <lv_obj_get_style>:
{
 800701c:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 800701e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8007020:	4606      	mov	r6, r0
    if(style_act == NULL) {
 8007022:	b98d      	cbnz	r5, 8007048 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 8007024:	6804      	ldr	r4, [r0, #0]
        while(par) {
 8007026:	b17c      	cbz	r4, 8007048 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8007028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800702a:	b1fb      	cbz	r3, 800706c <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	07db      	lsls	r3, r3, #31
 8007030:	d41c      	bmi.n	800706c <lv_obj_get_style+0x50>
    return obj->group_p;
 8007032:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8007034:	4628      	mov	r0, r5
 8007036:	f7fe fa6f 	bl	8005518 <lv_group_get_focused>
 800703a:	4284      	cmp	r4, r0
 800703c:	d114      	bne.n	8007068 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 800703e:	4628      	mov	r0, r5
 8007040:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007042:	f7fe fa56 	bl	80054f2 <lv_group_mod_style>
 8007046:	4605      	mov	r5, r0
    if(obj->group_p) {
 8007048:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800704a:	b140      	cbz	r0, 800705e <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800704c:	f7fe fa64 	bl	8005518 <lv_group_get_focused>
 8007050:	4286      	cmp	r6, r0
 8007052:	d104      	bne.n	800705e <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8007054:	4629      	mov	r1, r5
 8007056:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007058:	f7fe fa4b 	bl	80054f2 <lv_group_mod_style>
 800705c:	4605      	mov	r5, r0
}
 800705e:	4804      	ldr	r0, [pc, #16]	; (8007070 <lv_obj_get_style+0x54>)
 8007060:	2d00      	cmp	r5, #0
 8007062:	bf18      	it	ne
 8007064:	4628      	movne	r0, r5
 8007066:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 8007068:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800706a:	e7ed      	b.n	8007048 <lv_obj_get_style+0x2c>
            par = par->par;
 800706c:	6824      	ldr	r4, [r4, #0]
 800706e:	e7da      	b.n	8007026 <lv_obj_get_style+0xa>
 8007070:	20015a2c 	.word	0x20015a2c

08007074 <lv_obj_signal>:
{
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	460c      	mov	r4, r1
 8007078:	4605      	mov	r5, r0
 800707a:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 800707c:	f7ff ffce 	bl	800701c <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8007080:	2c01      	cmp	r4, #1
 8007082:	d105      	bne.n	8007090 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8007084:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8007088:	43c0      	mvns	r0, r0
 800708a:	f000 0001 	and.w	r0, r0, #1
 800708e:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8007090:	2c05      	cmp	r4, #5
 8007092:	d108      	bne.n	80070a6 <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8007094:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8007098:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 800709c:	429a      	cmp	r2, r3
 800709e:	da00      	bge.n	80070a2 <lv_obj_signal+0x2e>
 80070a0:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 80070a2:	2001      	movs	r0, #1
}
 80070a4:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80070a6:	2c04      	cmp	r4, #4
 80070a8:	d103      	bne.n	80070b2 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff ff58 	bl	8006f60 <lv_obj_refresh_ext_draw_pad>
 80070b0:	e7f7      	b.n	80070a2 <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80070b2:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 80070b4:	bf04      	itt	eq
 80070b6:	4b01      	ldreq	r3, [pc, #4]	; (80070bc <lv_obj_signal+0x48>)
 80070b8:	6033      	streq	r3, [r6, #0]
 80070ba:	e7f2      	b.n	80070a2 <lv_obj_signal+0x2e>
 80070bc:	080e4bce 	.word	0x080e4bce

080070c0 <lv_obj_get_width_fit>:
{
 80070c0:	b510      	push	{r4, lr}
 80070c2:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 80070c4:	f7ff ffaa 	bl	800701c <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 80070c8:	8aa3      	ldrh	r3, [r4, #20]
 80070ca:	8a22      	ldrh	r2, [r4, #16]
 80070cc:	3301      	adds	r3, #1
 80070ce:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 80070d0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80070d2:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	1a18      	subs	r0, r3, r0
}
 80070d8:	b200      	sxth	r0, r0
 80070da:	bd10      	pop	{r4, pc}

080070dc <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80070dc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 80070e0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80070e4:	4770      	bx	lr

080070e6 <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
 80070e6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 80070ea:	f000 0001 	and.w	r0, r0, #1
 80070ee:	4770      	bx	lr

080070f0 <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
 80070f0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 80070f4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80070f8:	4770      	bx	lr

080070fa <lv_obj_get_drag_dir>:
    return obj->drag_dir;
 80070fa:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
}
 80070fe:	f000 0003 	and.w	r0, r0, #3
 8007102:	4770      	bx	lr

08007104 <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
 8007104:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007108:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800710c:	4770      	bx	lr

0800710e <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 800710e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007112:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8007116:	4770      	bx	lr

08007118 <lv_obj_get_opa_scale>:
    while(parent) {
 8007118:	b908      	cbnz	r0, 800711e <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 800711a:	20ff      	movs	r0, #255	; 0xff
}
 800711c:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 800711e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007122:	065b      	lsls	r3, r3, #25
 8007124:	d502      	bpl.n	800712c <lv_obj_get_opa_scale+0x14>
 8007126:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 800712a:	4770      	bx	lr
    return obj->par;
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	e7f3      	b.n	8007118 <lv_obj_get_opa_scale>

08007130 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8007130:	2a02      	cmp	r2, #2
{
 8007132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8007138:	d13c      	bne.n	80071b4 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800713a:	f100 0510 	add.w	r5, r0, #16
 800713e:	4629      	mov	r1, r5
 8007140:	4630      	mov	r0, r6
 8007142:	f004 fea9 	bl	800be98 <lv_area_is_in>
 8007146:	b390      	cbz	r0, 80071ae <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff ff67 	bl	800701c <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 800714e:	7b83      	ldrb	r3, [r0, #14]
 8007150:	2bfa      	cmp	r3, #250	; 0xfa
 8007152:	d92c      	bls.n	80071ae <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 8007154:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
 8007158:	f647 4318 	movw	r3, #31768	; 0x7c18
 800715c:	429c      	cmp	r4, r3
 800715e:	d026      	beq.n	80071ae <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 8007160:	6828      	ldr	r0, [r5, #0]
 8007162:	6869      	ldr	r1, [r5, #4]
 8007164:	466b      	mov	r3, sp
 8007166:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 8007168:	f8bd 3000 	ldrh.w	r3, [sp]
 800716c:	b2a4      	uxth	r4, r4
 800716e:	4423      	add	r3, r4
 8007170:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 8007174:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007178:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 800717a:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800717c:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 800717e:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007182:	f004 fe89 	bl	800be98 <lv_area_is_in>
 8007186:	b190      	cbz	r0, 80071ae <lv_obj_design+0x7e>
 8007188:	6828      	ldr	r0, [r5, #0]
 800718a:	6869      	ldr	r1, [r5, #4]
 800718c:	466b      	mov	r3, sp
 800718e:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8007190:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007194:	4423      	add	r3, r4
 8007196:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 800719a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800719e:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 80071a0:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80071a2:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 80071a4:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80071a8:	f004 fe76 	bl	800be98 <lv_area_is_in>
 80071ac:	b900      	cbnz	r0, 80071b0 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 80071ae:	2000      	movs	r0, #0
}
 80071b0:	b002      	add	sp, #8
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80071b4:	b95a      	cbnz	r2, 80071ce <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 80071b6:	f7ff ff31 	bl	800701c <lv_obj_get_style>
 80071ba:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff ffab 	bl	8007118 <lv_obj_get_opa_scale>
 80071c2:	4631      	mov	r1, r6
 80071c4:	4603      	mov	r3, r0
 80071c6:	f104 0010 	add.w	r0, r4, #16
 80071ca:	f001 fedb 	bl	8008f84 <lv_draw_rect>
    return true;
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7ee      	b.n	80071b0 <lv_obj_design+0x80>

080071d2 <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 80071d2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80071d6:	4219      	tst	r1, r3
}
 80071d8:	bf14      	ite	ne
 80071da:	2001      	movne	r0, #1
 80071dc:	2000      	moveq	r0, #0
 80071de:	4770      	bx	lr

080071e0 <lv_obj_get_signal_cb>:
}
 80071e0:	69c0      	ldr	r0, [r0, #28]
 80071e2:	4770      	bx	lr

080071e4 <lv_obj_get_design_cb>:
}
 80071e4:	6a00      	ldr	r0, [r0, #32]
 80071e6:	4770      	bx	lr

080071e8 <lv_obj_get_ext_attr>:
}
 80071e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80071ea:	4770      	bx	lr

080071ec <lv_obj_get_group>:
}
 80071ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80071ee:	4770      	bx	lr

080071f0 <lv_obj_is_focused>:
{
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4604      	mov	r4, r0
    if(obj->group_p) {
 80071f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80071f6:	b120      	cbz	r0, 8007202 <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80071f8:	f7fe f98e 	bl	8005518 <lv_group_get_focused>
 80071fc:	1a23      	subs	r3, r4, r0
 80071fe:	4258      	negs	r0, r3
 8007200:	4158      	adcs	r0, r3
}
 8007202:	bd10      	pop	{r4, pc}

08007204 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007204:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007206:	4d10      	ldr	r5, [pc, #64]	; (8007248 <lv_refr_vdb_flush+0x44>)
 8007208:	6828      	ldr	r0, [r5, #0]
 800720a:	f004 fc41 	bl	800ba90 <lv_disp_get_buf>
 800720e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007210:	6828      	ldr	r0, [r5, #0]
 8007212:	f004 fc52 	bl	800baba <lv_disp_is_double_buf>
 8007216:	b110      	cbz	r0, 800721e <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 8007218:	69a3      	ldr	r3, [r4, #24]
 800721a:	07db      	lsls	r3, r3, #31
 800721c:	d4fc      	bmi.n	8007218 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 800721e:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 8007220:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8007228:	68c3      	ldr	r3, [r0, #12]
 800722a:	b11b      	cbz	r3, 8007234 <lv_refr_vdb_flush+0x30>
 800722c:	68a2      	ldr	r2, [r4, #8]
 800722e:	f104 0110 	add.w	r1, r4, #16
 8007232:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	b133      	cbz	r3, 8007246 <lv_refr_vdb_flush+0x42>
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	b122      	cbz	r2, 8007246 <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 800723c:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 800723e:	428b      	cmp	r3, r1
 8007240:	bf08      	it	eq
 8007242:	4613      	moveq	r3, r2
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	20010224 	.word	0x20010224

0800724c <lv_refr_get_top_obj>:
{
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007250:	3110      	adds	r1, #16
{
 8007252:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007254:	f004 fe20 	bl	800be98 <lv_area_is_in>
 8007258:	b908      	cbnz	r0, 800725e <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 800725a:	2000      	movs	r0, #0
 800725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 800725e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007262:	06db      	lsls	r3, r3, #27
 8007264:	d4f9      	bmi.n	800725a <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 8007266:	1d27      	adds	r7, r4, #4
 8007268:	4638      	mov	r0, r7
 800726a:	f004 ff6c 	bl	800c146 <lv_ll_get_head>
 800726e:	4605      	mov	r5, r0
 8007270:	b998      	cbnz	r0, 800729a <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007272:	4620      	mov	r0, r4
 8007274:	f7ff fed2 	bl	800701c <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007278:	7b83      	ldrb	r3, [r0, #14]
 800727a:	2bff      	cmp	r3, #255	; 0xff
 800727c:	d1ed      	bne.n	800725a <lv_refr_get_top_obj+0xe>
 800727e:	6a23      	ldr	r3, [r4, #32]
 8007280:	2202      	movs	r2, #2
 8007282:	4631      	mov	r1, r6
 8007284:	4620      	mov	r0, r4
 8007286:	4798      	blx	r3
 8007288:	2800      	cmp	r0, #0
 800728a:	d0e6      	beq.n	800725a <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff ff43 	bl	8007118 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007292:	28ff      	cmp	r0, #255	; 0xff
 8007294:	d1e1      	bne.n	800725a <lv_refr_get_top_obj+0xe>
 8007296:	4620      	mov	r0, r4
    return found_p;
 8007298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 800729a:	4629      	mov	r1, r5
 800729c:	4630      	mov	r0, r6
 800729e:	f7ff ffd5 	bl	800724c <lv_refr_get_top_obj>
            if(found_p != NULL) {
 80072a2:	b920      	cbnz	r0, 80072ae <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 80072a4:	4629      	mov	r1, r5
 80072a6:	4638      	mov	r0, r7
 80072a8:	f004 ff53 	bl	800c152 <lv_ll_get_next>
 80072ac:	e7df      	b.n	800726e <lv_refr_get_top_obj+0x22>
}
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072b0 <lv_refr_obj>:
{
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 80072b2:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 80072b6:	f016 0610 	ands.w	r6, r6, #16
{
 80072ba:	b08b      	sub	sp, #44	; 0x2c
 80072bc:	4604      	mov	r4, r0
 80072be:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 80072c0:	d139      	bne.n	8007336 <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 80072c2:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 80072c6:	a904      	add	r1, sp, #16
 80072c8:	f7ff fe84 	bl	8006fd4 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 80072cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80072d0:	b2ab      	uxth	r3, r5
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 80072d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 80072e2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80072e6:	441a      	add	r2, r3
 80072e8:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 80072ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80072f0:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 80072f2:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80072f4:	a802      	add	r0, sp, #8
 80072f6:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 80072f8:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80072fc:	f004 fd4a 	bl	800bd94 <lv_area_intersect>
    if(union_ok != false) {
 8007300:	b1c8      	cbz	r0, 8007336 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007302:	4632      	mov	r2, r6
 8007304:	6a23      	ldr	r3, [r4, #32]
 8007306:	a902      	add	r1, sp, #8
 8007308:	4620      	mov	r0, r4
 800730a:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 800730c:	a904      	add	r1, sp, #16
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff fe60 	bl	8006fd4 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007314:	aa04      	add	r2, sp, #16
 8007316:	4639      	mov	r1, r7
 8007318:	4668      	mov	r0, sp
 800731a:	f004 fd3b 	bl	800bd94 <lv_area_intersect>
        if(union_ok != false) {
 800731e:	b128      	cbz	r0, 800732c <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007320:	1d26      	adds	r6, r4, #4
 8007322:	4630      	mov	r0, r6
 8007324:	f004 ff12 	bl	800c14c <lv_ll_get_tail>
 8007328:	4605      	mov	r5, r0
 800732a:	b930      	cbnz	r0, 800733a <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800732c:	6a23      	ldr	r3, [r4, #32]
 800732e:	2201      	movs	r2, #1
 8007330:	a902      	add	r1, sp, #8
 8007332:	4620      	mov	r0, r4
 8007334:	4798      	blx	r3
}
 8007336:	b00b      	add	sp, #44	; 0x2c
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800733a:	a908      	add	r1, sp, #32
 800733c:	4628      	mov	r0, r5
 800733e:	f7ff fe49 	bl	8006fd4 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8007342:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007344:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 800734e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8007358:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800735c:	441a      	add	r2, r3
 800735e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8007362:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007366:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 8007368:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800736a:	a806      	add	r0, sp, #24
 800736c:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800736e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007372:	f004 fd0f 	bl	800bd94 <lv_area_intersect>
                if(union_ok) {
 8007376:	b118      	cbz	r0, 8007380 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 8007378:	a906      	add	r1, sp, #24
 800737a:	4628      	mov	r0, r5
 800737c:	f7ff ff98 	bl	80072b0 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007380:	4629      	mov	r1, r5
 8007382:	4630      	mov	r0, r6
 8007384:	f004 feea 	bl	800c15c <lv_ll_get_prev>
 8007388:	e7ce      	b.n	8007328 <lv_refr_obj+0x78>
	...

0800738c <lv_refr_obj_and_children>:
{
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007390:	4605      	mov	r5, r0
 8007392:	b920      	cbnz	r0, 800739e <lv_refr_obj_and_children+0x12>
 8007394:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <lv_refr_obj_and_children+0x54>)
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	f7fd ffa8 	bl	80052ec <lv_disp_get_scr_act>
 800739c:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 800739e:	4628      	mov	r0, r5
 80073a0:	4631      	mov	r1, r6
 80073a2:	f7ff ff85 	bl	80072b0 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7ff fde6 	bl	8006f78 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 80073ac:	4604      	mov	r4, r0
    while(par != NULL) {
 80073ae:	b900      	cbnz	r0, 80073b2 <lv_refr_obj_and_children+0x26>
}
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 80073b2:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 80073b4:	4629      	mov	r1, r5
 80073b6:	4638      	mov	r0, r7
 80073b8:	f004 fed0 	bl	800c15c <lv_ll_get_prev>
 80073bc:	4605      	mov	r5, r0
        while(i != NULL) {
 80073be:	b948      	cbnz	r0, 80073d4 <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 80073c0:	6a23      	ldr	r3, [r4, #32]
 80073c2:	2201      	movs	r2, #1
 80073c4:	4631      	mov	r1, r6
 80073c6:	4620      	mov	r0, r4
 80073c8:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7ff fdd4 	bl	8006f78 <lv_obj_get_parent>
 80073d0:	4625      	mov	r5, r4
 80073d2:	e7eb      	b.n	80073ac <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7ff ff6a 	bl	80072b0 <lv_refr_obj>
 80073dc:	e7ea      	b.n	80073b4 <lv_refr_obj_and_children+0x28>
 80073de:	bf00      	nop
 80073e0:	20010224 	.word	0x20010224

080073e4 <lv_refr_area_part>:
{
 80073e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80073e6:	4c18      	ldr	r4, [pc, #96]	; (8007448 <lv_refr_area_part+0x64>)
{
 80073e8:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80073ea:	6820      	ldr	r0, [r4, #0]
 80073ec:	f004 fb50 	bl	800ba90 <lv_disp_get_buf>
 80073f0:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	f004 fb61 	bl	800baba <lv_disp_is_double_buf>
 80073f8:	b910      	cbnz	r0, 8007400 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 80073fa:	69ab      	ldr	r3, [r5, #24]
 80073fc:	07db      	lsls	r3, r3, #31
 80073fe:	d4fc      	bmi.n	80073fa <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007400:	f105 0210 	add.w	r2, r5, #16
 8007404:	4631      	mov	r1, r6
 8007406:	4668      	mov	r0, sp
 8007408:	f004 fcc4 	bl	800bd94 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	f7fd ff6d 	bl	80052ec <lv_disp_get_scr_act>
 8007412:	4601      	mov	r1, r0
 8007414:	4668      	mov	r0, sp
 8007416:	f7ff ff19 	bl	800724c <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 800741a:	4669      	mov	r1, sp
 800741c:	f7ff ffb6 	bl	800738c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	f7fd ff74 	bl	800530e <lv_disp_get_layer_top>
 8007426:	4669      	mov	r1, sp
 8007428:	f7ff ffb0 	bl	800738c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	f7fd ff75 	bl	800531c <lv_disp_get_layer_sys>
 8007432:	4669      	mov	r1, sp
 8007434:	f7ff ffaa 	bl	800738c <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	f004 fb46 	bl	800baca <lv_disp_is_true_double_buf>
 800743e:	b908      	cbnz	r0, 8007444 <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 8007440:	f7ff fee0 	bl	8007204 <lv_refr_vdb_flush>
}
 8007444:	b002      	add	sp, #8
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	20010224 	.word	0x20010224

0800744c <lv_refr_init>:
{
 800744c:	4770      	bx	lr

0800744e <lv_inv_area>:
{
 800744e:	b530      	push	{r4, r5, lr}
 8007450:	460d      	mov	r5, r1
 8007452:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 8007454:	4604      	mov	r4, r0
 8007456:	b920      	cbnz	r0, 8007462 <lv_inv_area+0x14>
 8007458:	f004 fae0 	bl	800ba1c <lv_disp_get_default>
    if(!disp) return;
 800745c:	4604      	mov	r4, r0
 800745e:	2800      	cmp	r0, #0
 8007460:	d044      	beq.n	80074ec <lv_inv_area+0x9e>
    if(area_p == NULL) {
 8007462:	b935      	cbnz	r5, 8007472 <lv_inv_area+0x24>
        disp->inv_p = 0;
 8007464:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 8007468:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 800746c:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 8007470:	e03c      	b.n	80074ec <lv_inv_area+0x9e>
    scr_area.x1 = 0;
 8007472:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007474:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8007476:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 800747a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800747e:	f004 fad3 	bl	800ba28 <lv_disp_get_hor_res>
 8007482:	3801      	subs	r0, #1
 8007484:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007488:	4620      	mov	r0, r4
 800748a:	f004 fadf 	bl	800ba4c <lv_disp_get_ver_res>
 800748e:	3801      	subs	r0, #1
 8007490:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8007494:	466a      	mov	r2, sp
 8007496:	4629      	mov	r1, r5
 8007498:	a802      	add	r0, sp, #8
 800749a:	f004 fc7b 	bl	800bd94 <lv_area_intersect>
    if(suc != false) {
 800749e:	b328      	cbz	r0, 80074ec <lv_inv_area+0x9e>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	b113      	cbz	r3, 80074aa <lv_inv_area+0x5c>
 80074a4:	a902      	add	r1, sp, #8
 80074a6:	4620      	mov	r0, r4
 80074a8:	4798      	blx	r3
{
 80074aa:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 80074ac:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 80074b0:	b2a9      	uxth	r1, r5
 80074b2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80074b6:	4299      	cmp	r1, r3
 80074b8:	db0f      	blt.n	80074da <lv_inv_area+0x8c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 80074ba:	2b1f      	cmp	r3, #31
 80074bc:	dc18      	bgt.n	80074f0 <lv_inv_area+0xa2>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80074c4:	ab02      	add	r3, sp, #8
 80074c6:	cb03      	ldmia	r3!, {r0, r1}
 80074c8:	18a5      	adds	r5, r4, r2
 80074ca:	50a0      	str	r0, [r4, r2]
 80074cc:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 80074ce:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	f362 0309 	bfi	r3, r2, #0, #10
 80074d8:	e7c8      	b.n	800746c <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 80074da:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80074de:	3144      	adds	r1, #68	; 0x44
 80074e0:	a802      	add	r0, sp, #8
 80074e2:	f004 fcd9 	bl	800be98 <lv_area_is_in>
 80074e6:	3501      	adds	r5, #1
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d0df      	beq.n	80074ac <lv_inv_area+0x5e>
}
 80074ec:	b005      	add	sp, #20
 80074ee:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 80074f0:	4613      	mov	r3, r2
 80074f2:	f36f 0309 	bfc	r3, #0, #10
 80074f6:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 80074fa:	466b      	mov	r3, sp
 80074fc:	cb03      	ldmia	r3!, {r0, r1}
 80074fe:	6460      	str	r0, [r4, #68]	; 0x44
 8007500:	64a1      	str	r1, [r4, #72]	; 0x48
 8007502:	e7e4      	b.n	80074ce <lv_inv_area+0x80>

08007504 <lv_refr_get_disp_refreshing>:
}
 8007504:	4b01      	ldr	r3, [pc, #4]	; (800750c <lv_refr_get_disp_refreshing+0x8>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20010224 	.word	0x20010224

08007510 <lv_disp_refr_task>:
{
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	b089      	sub	sp, #36	; 0x24
 8007516:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 8007518:	f004 fb60 	bl	800bbdc <lv_tick_get>
    disp_refr = task->user_data;
 800751c:	4bbe      	ldr	r3, [pc, #760]	; (8007818 <lv_disp_refr_task+0x308>)
 800751e:	68e2      	ldr	r2, [r4, #12]
    uint32_t start = lv_tick_get();
 8007520:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 8007522:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007524:	2600      	movs	r6, #0
 8007526:	469a      	mov	sl, r3
                disp_refr->inv_area_joined[join_from] = 1;
 8007528:	2701      	movs	r7, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800752a:	f8da 3000 	ldr.w	r3, [sl]
 800752e:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
 8007532:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007536:	4296      	cmp	r6, r2
 8007538:	d330      	bcc.n	800759c <lv_disp_refr_task+0x8c>
    px_num = 0;
 800753a:	4bb8      	ldr	r3, [pc, #736]	; (800781c <lv_disp_refr_task+0x30c>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800753c:	9301      	str	r3, [sp, #4]
    px_num = 0;
 800753e:	2400      	movs	r4, #0
 8007540:	601c      	str	r4, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007542:	f8da 7000 	ldr.w	r7, [sl]
 8007546:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 800754a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800754e:	4294      	cmp	r4, r2
 8007550:	d36c      	bcc.n	800762c <lv_disp_refr_task+0x11c>
    if(disp_refr->inv_p != 0) {
 8007552:	b1f2      	cbz	r2, 8007592 <lv_disp_refr_task+0x82>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8007554:	4638      	mov	r0, r7
 8007556:	f004 fab8 	bl	800baca <lv_disp_is_true_double_buf>
 800755a:	2800      	cmp	r0, #0
 800755c:	f040 8134 	bne.w	80077c8 <lv_disp_refr_task+0x2b8>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007560:	f8da 4000 	ldr.w	r4, [sl]
 8007564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007568:	2100      	movs	r1, #0
 800756a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800756e:	f006 ff02 	bl	800e376 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007572:	2220      	movs	r2, #32
 8007574:	2100      	movs	r1, #0
 8007576:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800757a:	f006 fefc 	bl	800e376 <memset>
        disp_refr->inv_p = 0;
 800757e:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 8007582:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 8007584:	f36f 0309 	bfc	r3, #0, #10
 8007588:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 800758c:	2d00      	cmp	r5, #0
 800758e:	f040 816a 	bne.w	8007866 <lv_disp_refr_task+0x356>
    lv_draw_free_buf();
 8007592:	f000 fbef 	bl	8007d74 <lv_draw_free_buf>
}
 8007596:	b009      	add	sp, #36	; 0x24
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800759c:	4433      	add	r3, r6
 800759e:	f893 4144 	ldrb.w	r4, [r3, #324]	; 0x144
 80075a2:	b94c      	cbnz	r4, 80075b8 <lv_disp_refr_task+0xa8>
 80075a4:	00f5      	lsls	r5, r6, #3
 80075a6:	3544      	adds	r5, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80075a8:	f8da 0000 	ldr.w	r0, [sl]
 80075ac:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 80075b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d301      	bcc.n	80075bc <lv_disp_refr_task+0xac>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80075b8:	3601      	adds	r6, #1
 80075ba:	e7b6      	b.n	800752a <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 80075bc:	1903      	adds	r3, r0, r4
 80075be:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80075c2:	bb8b      	cbnz	r3, 8007628 <lv_disp_refr_task+0x118>
 80075c4:	42a6      	cmp	r6, r4
 80075c6:	d02f      	beq.n	8007628 <lv_disp_refr_task+0x118>
 80075c8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80075cc:	f108 0844 	add.w	r8, r8, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 80075d0:	eb00 0108 	add.w	r1, r0, r8
 80075d4:	4428      	add	r0, r5
 80075d6:	f004 fc42 	bl	800be5e <lv_area_is_on>
 80075da:	b328      	cbz	r0, 8007628 <lv_disp_refr_task+0x118>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80075dc:	f8da 1000 	ldr.w	r1, [sl]
 80075e0:	a806      	add	r0, sp, #24
 80075e2:	eb01 0208 	add.w	r2, r1, r8
 80075e6:	4429      	add	r1, r5
 80075e8:	f004 fbfe 	bl	800bde8 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80075ec:	a806      	add	r0, sp, #24
 80075ee:	f004 fbc3 	bl	800bd78 <lv_area_get_size>
 80075f2:	4683      	mov	fp, r0
 80075f4:	f8da 0000 	ldr.w	r0, [sl]
 80075f8:	4428      	add	r0, r5
 80075fa:	f004 fbbd 	bl	800bd78 <lv_area_get_size>
 80075fe:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007600:	f8da 0000 	ldr.w	r0, [sl]
 8007604:	4440      	add	r0, r8
 8007606:	f004 fbb7 	bl	800bd78 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800760a:	4448      	add	r0, r9
 800760c:	4583      	cmp	fp, r0
 800760e:	d20b      	bcs.n	8007628 <lv_disp_refr_task+0x118>
 8007610:	aa06      	add	r2, sp, #24
 8007612:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007614:	f8da 3000 	ldr.w	r3, [sl]
 8007618:	5158      	str	r0, [r3, r5]
 800761a:	eb03 0e05 	add.w	lr, r3, r5
                disp_refr->inv_area_joined[join_from] = 1;
 800761e:	4423      	add	r3, r4
 8007620:	f8ce 1004 	str.w	r1, [lr, #4]
 8007624:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007628:	3401      	adds	r4, #1
 800762a:	e7bd      	b.n	80075a8 <lv_disp_refr_task+0x98>
        if(disp_refr->inv_area_joined[i] == 0) {
 800762c:	193b      	adds	r3, r7, r4
 800762e:	f893 5144 	ldrb.w	r5, [r3, #324]	; 0x144
 8007632:	2d00      	cmp	r5, #0
 8007634:	f040 8084 	bne.w	8007740 <lv_disp_refr_task+0x230>
 8007638:	00e3      	lsls	r3, r4, #3
 800763a:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800763c:	4638      	mov	r0, r7
 800763e:	3344      	adds	r3, #68	; 0x44
 8007640:	9300      	str	r3, [sp, #0]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8007642:	eb07 0803 	add.w	r8, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007646:	f004 fa40 	bl	800baca <lv_disp_is_true_double_buf>
 800764a:	b1b0      	cbz	r0, 800767a <lv_disp_refr_task+0x16a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800764c:	f8da 0000 	ldr.w	r0, [sl]
 8007650:	f004 fa1e 	bl	800ba90 <lv_disp_get_buf>
 8007654:	4606      	mov	r6, r0
        vdb->area.x1        = 0;
 8007656:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007658:	f8da 0000 	ldr.w	r0, [sl]
 800765c:	f004 f9e4 	bl	800ba28 <lv_disp_get_hor_res>
 8007660:	3801      	subs	r0, #1
 8007662:	82b0      	strh	r0, [r6, #20]
        vdb->area.y1        = 0;
 8007664:	8275      	strh	r5, [r6, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007666:	f8da 0000 	ldr.w	r0, [sl]
 800766a:	f004 f9ef 	bl	800ba4c <lv_disp_get_ver_res>
 800766e:	3801      	subs	r0, #1
 8007670:	82f0      	strh	r0, [r6, #22]
            lv_refr_area_part(area_p);
 8007672:	4640      	mov	r0, r8
 8007674:	f7ff feb6 	bl	80073e4 <lv_refr_area_part>
 8007678:	e055      	b.n	8007726 <lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800767a:	f8da 0000 	ldr.w	r0, [sl]
 800767e:	f004 fa07 	bl	800ba90 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8007682:	9b00      	ldr	r3, [sp, #0]
 8007684:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 8007688:	5afe      	ldrh	r6, [r7, r3]
 800768a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
    return area_p->y2 - area_p->y1 + 1;
 800768e:	f8b8 b002 	ldrh.w	fp, [r8, #2]
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	4605      	mov	r5, r0
    return area_p->x2 - area_p->x1 + 1;
 8007696:	f109 0901 	add.w	r9, r9, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800769a:	f8da 0000 	ldr.w	r0, [sl]
 800769e:	eba9 0906 	sub.w	r9, r9, r6
    return area_p->y2 - area_p->y1 + 1;
 80076a2:	1c5e      	adds	r6, r3, #1
 80076a4:	f004 f9d2 	bl	800ba4c <lv_disp_get_ver_res>
        lv_coord_t y2 =
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	eba6 060b 	sub.w	r6, r6, fp
 80076ae:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 80076b0:	fa0f f989 	sxth.w	r9, r9
    return area_p->y2 - area_p->y1 + 1;
 80076b4:	fa0f fb86 	sxth.w	fp, r6
 80076b8:	db44      	blt.n	8007744 <lv_disp_refr_task+0x234>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80076ba:	f8da 0000 	ldr.w	r0, [sl]
 80076be:	f004 f9c5 	bl	800ba4c <lv_disp_get_ver_res>
 80076c2:	3801      	subs	r0, #1
 80076c4:	b203      	sxth	r3, r0
        if(disp_refr->driver.rounder_cb) {
 80076c6:	f8da 2000 	ldr.w	r2, [sl]
        int32_t max_row = (uint32_t)vdb->size / w;
 80076ca:	68ee      	ldr	r6, [r5, #12]
        if(disp_refr->driver.rounder_cb) {
 80076cc:	6912      	ldr	r2, [r2, #16]
        int32_t max_row = (uint32_t)vdb->size / w;
 80076ce:	fbb6 f6f9 	udiv	r6, r6, r9
 80076d2:	455e      	cmp	r6, fp
 80076d4:	bfa8      	it	ge
 80076d6:	465e      	movge	r6, fp
        if(disp_refr->driver.rounder_cb) {
 80076d8:	2a00      	cmp	r2, #0
 80076da:	d03c      	beq.n	8007756 <lv_disp_refr_task+0x246>
            tmp.x1 = 0;
 80076dc:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 80076e0:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 80076e4:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 80076e8:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 80076ec:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 80076f0:	fa0f f989 	sxth.w	r9, r9
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 80076f4:	f8da 0000 	ldr.w	r0, [sl]
                tmp.y2 = y_tmp;
 80076f8:	f8ad 901e 	strh.w	r9, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 80076fc:	6902      	ldr	r2, [r0, #16]
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	a906      	add	r1, sp, #24
 8007702:	4790      	blx	r2
 8007704:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8007708:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 800770c:	9b04      	ldr	r3, [sp, #16]
 800770e:	3101      	adds	r1, #1
 8007710:	1a8a      	subs	r2, r1, r2
 8007712:	b212      	sxth	r2, r2
 8007714:	42b2      	cmp	r2, r6
 8007716:	dd1a      	ble.n	800774e <lv_disp_refr_task+0x23e>
 8007718:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800771c:	fa0f f989 	sxth.w	r9, r9
            } while(y_tmp != 0);
 8007720:	f1b9 0f00 	cmp.w	r9, #0
 8007724:	d1e6      	bne.n	80076f4 <lv_disp_refr_task+0x1e4>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007726:	f8da 0000 	ldr.w	r0, [sl]
 800772a:	6983      	ldr	r3, [r0, #24]
 800772c:	b143      	cbz	r3, 8007740 <lv_disp_refr_task+0x230>
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	4418      	add	r0, r3
 8007732:	f004 fb21 	bl	800bd78 <lv_area_get_size>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4418      	add	r0, r3
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007740:	3401      	adds	r4, #1
 8007742:	e6fe      	b.n	8007542 <lv_disp_refr_task+0x32>
        lv_coord_t y2 =
 8007744:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
 8007748:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800774c:	e7bb      	b.n	80076c6 <lv_disp_refr_task+0x1b6>
            if(y_tmp == 0) {
 800774e:	f1b9 0f00 	cmp.w	r9, #0
 8007752:	d0e8      	beq.n	8007726 <lv_disp_refr_task+0x216>
                max_row = tmp.y2 + 1;
 8007754:	460e      	mov	r6, r1
 8007756:	9a03      	ldr	r2, [sp, #12]
 8007758:	4417      	add	r7, r2
            vdb->area.y2 = row + max_row - 1;
 800775a:	b2b2      	uxth	r2, r6
 800775c:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800775e:	f9b7 9046 	ldrsh.w	r9, [r7, #70]	; 0x46
 8007762:	9103      	str	r1, [sp, #12]
        lv_coord_t row_last = 0;
 8007764:	f04f 0b00 	mov.w	fp, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007768:	eb09 0106 	add.w	r1, r9, r6
 800776c:	3901      	subs	r1, #1
 800776e:	4299      	cmp	r1, r3
 8007770:	dd0b      	ble.n	800778a <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 8007772:	455b      	cmp	r3, fp
 8007774:	d0d7      	beq.n	8007726 <lv_disp_refr_task+0x216>
            vdb->area.x1 = area_p->x1;
 8007776:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800777a:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
 800777c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8007780:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
 8007782:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = y2;
 8007786:	82eb      	strh	r3, [r5, #22]
 8007788:	e773      	b.n	8007672 <lv_disp_refr_task+0x162>
            vdb->area.x1 = area_p->x1;
 800778a:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800778e:	9205      	str	r2, [sp, #20]
 8007790:	8229      	strh	r1, [r5, #16]
 8007792:	9a03      	ldr	r2, [sp, #12]
            vdb->area.x2 = area_p->x2;
 8007794:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
            vdb->area.y1 = row;
 8007798:	f8a5 9012 	strh.w	r9, [r5, #18]
 800779c:	fa1f f989 	uxth.w	r9, r9
 80077a0:	eb09 0b02 	add.w	fp, r9, r2
 80077a4:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 80077a8:	459b      	cmp	fp, r3
 80077aa:	bfa8      	it	ge
 80077ac:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 80077ae:	82a9      	strh	r1, [r5, #20]
            vdb->area.y2 = row + max_row - 1;
 80077b0:	f8a5 b016 	strh.w	fp, [r5, #22]
            lv_refr_area_part(area_p);
 80077b4:	4640      	mov	r0, r8
            vdb->area.y2 = row + max_row - 1;
 80077b6:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 80077b8:	f7ff fe14 	bl	80073e4 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	4491      	add	r9, r2
 80077c2:	fa0f f989 	sxth.w	r9, r9
 80077c6:	e7cf      	b.n	8007768 <lv_disp_refr_task+0x258>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80077c8:	f8da 0000 	ldr.w	r0, [sl]
 80077cc:	f004 f960 	bl	800ba90 <lv_disp_get_buf>
 80077d0:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
 80077d2:	f7ff fd17 	bl	8007204 <lv_refr_vdb_flush>
            while(vdb->flushing)
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	07db      	lsls	r3, r3, #31
 80077da:	d4fc      	bmi.n	80077d6 <lv_disp_refr_task+0x2c6>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80077dc:	68a3      	ldr	r3, [r4, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80077de:	6827      	ldr	r7, [r4, #0]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80077e0:	f8da 0000 	ldr.w	r0, [sl]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80077e4:	9300      	str	r3, [sp, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80077e6:	42bb      	cmp	r3, r7
 80077e8:	bf08      	it	eq
 80077ea:	6867      	ldreq	r7, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80077ec:	f004 f91c 	bl	800ba28 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 80077f0:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80077f2:	4681      	mov	r9, r0
                        start_offs += hres * sizeof(lv_color_t);
 80077f4:	ea4f 0b80 	mov.w	fp, r0, lsl #2
            for(a = 0; a < disp_refr->inv_p; a++) {
 80077f8:	f8da 1000 	ldr.w	r1, [sl]
 80077fc:	f8b1 3164 	ldrh.w	r3, [r1, #356]	; 0x164
 8007800:	b2b2      	uxth	r2, r6
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	429a      	cmp	r2, r3
 8007808:	f6bf aeaa 	bge.w	8007560 <lv_disp_refr_task+0x50>
                if(disp_refr->inv_area_joined[a] == 0) {
 800780c:	188b      	adds	r3, r1, r2
 800780e:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8007812:	b12b      	cbz	r3, 8007820 <lv_disp_refr_task+0x310>
 8007814:	3601      	adds	r6, #1
 8007816:	e7ef      	b.n	80077f8 <lv_disp_refr_task+0x2e8>
 8007818:	20010224 	.word	0x20010224
 800781c:	20010228 	.word	0x20010228
 8007820:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8007824:	f9b8 3044 	ldrsh.w	r3, [r8, #68]	; 0x44
 8007828:	f9b8 5046 	ldrsh.w	r5, [r8, #70]	; 0x46
    return area_p->x2 - area_p->x1 + 1;
 800782c:	f8b8 2048 	ldrh.w	r2, [r8, #72]	; 0x48
 8007830:	fb09 3405 	mla	r4, r9, r5, r3
 8007834:	f1c3 0301 	rsb	r3, r3, #1
 8007838:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800783a:	b21b      	sxth	r3, r3
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	9b00      	ldr	r3, [sp, #0]
                    uint32_t start_offs =
 8007842:	00a4      	lsls	r4, r4, #2
 8007844:	4423      	add	r3, r4
 8007846:	443c      	add	r4, r7
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8007848:	f9b8 204a 	ldrsh.w	r2, [r8, #74]	; 0x4a
 800784c:	42aa      	cmp	r2, r5
 800784e:	dbe1      	blt.n	8007814 <lv_disp_refr_task+0x304>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 8007850:	4621      	mov	r1, r4
 8007852:	4618      	mov	r0, r3
 8007854:	9a01      	ldr	r2, [sp, #4]
 8007856:	f006 fd83 	bl	800e360 <memcpy>
 800785a:	3501      	adds	r5, #1
 800785c:	4603      	mov	r3, r0
 800785e:	b22d      	sxth	r5, r5
 8007860:	445b      	add	r3, fp
 8007862:	445c      	add	r4, fp
 8007864:	e7f0      	b.n	8007848 <lv_disp_refr_task+0x338>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8007866:	9802      	ldr	r0, [sp, #8]
 8007868:	f004 f9c6 	bl	800bbf8 <lv_tick_elaps>
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <lv_disp_refr_task+0x368>)
 800786e:	4601      	mov	r1, r0
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	47a8      	blx	r5
 8007876:	e68c      	b.n	8007592 <lv_disp_refr_task+0x82>
 8007878:	20010228 	.word	0x20010228

0800787c <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 800787c:	2250      	movs	r2, #80	; 0x50
 800787e:	f006 bd6f 	b.w	800e360 <memcpy>
	...

08007884 <lv_style_init>:
{
 8007884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 8007888:	49e9      	ldr	r1, [pc, #932]	; (8007c30 <lv_style_init+0x3ac>)
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800788a:	f8df 93c8 	ldr.w	r9, [pc, #968]	; 8007c54 <lv_style_init+0x3d0>
    lv_style_scr.glass               = 0;
 800788e:	780b      	ldrb	r3, [r1, #0]
 8007890:	f36f 0300 	bfc	r3, #0, #1
 8007894:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8007896:	230f      	movs	r3, #15
 8007898:	758b      	strb	r3, [r1, #22]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800789a:	f04f 0301 	mov.w	r3, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 800789e:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.body.radius         = 0;
 80078a0:	2600      	movs	r6, #0
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80078a2:	2780      	movs	r7, #128	; 0x80
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 80078a4:	2505      	movs	r5, #5
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 80078a6:	778b      	strb	r3, [r1, #30]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80078a8:	2330      	movs	r3, #48	; 0x30
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80078aa:	738c      	strb	r4, [r1, #14]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80078ac:	710c      	strb	r4, [r1, #4]
 80078ae:	714c      	strb	r4, [r1, #5]
 80078b0:	718c      	strb	r4, [r1, #6]
 80078b2:	71cc      	strb	r4, [r1, #7]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80078b4:	720c      	strb	r4, [r1, #8]
 80078b6:	724c      	strb	r4, [r1, #9]
 80078b8:	728c      	strb	r4, [r1, #10]
 80078ba:	72cc      	strb	r4, [r1, #11]
    lv_style_scr.body.radius         = 0;
 80078bc:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.padding.left   = 0;
 80078be:	848e      	strh	r6, [r1, #36]	; 0x24
    lv_style_scr.body.padding.right  = 0;
 80078c0:	84ce      	strh	r6, [r1, #38]	; 0x26
    lv_style_scr.body.padding.top    = 0;
 80078c2:	840e      	strh	r6, [r1, #32]
    lv_style_scr.body.padding.bottom = 0;
 80078c4:	844e      	strh	r6, [r1, #34]	; 0x22
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 80078c6:	850d      	strh	r5, [r1, #40]	; 0x28
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80078c8:	740e      	strb	r6, [r1, #16]
 80078ca:	744e      	strb	r6, [r1, #17]
 80078cc:	748e      	strb	r6, [r1, #18]
 80078ce:	74cc      	strb	r4, [r1, #19]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 80078d0:	75cc      	strb	r4, [r1, #23]
    lv_style_scr.body.border.width = 0;
 80078d2:	828e      	strh	r6, [r1, #20]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80078d4:	760f      	strb	r7, [r1, #24]
 80078d6:	764f      	strb	r7, [r1, #25]
 80078d8:	768f      	strb	r7, [r1, #26]
 80078da:	76cc      	strb	r4, [r1, #27]
    lv_style_scr.body.shadow.width = 0;
 80078dc:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 80078de:	f881 403c 	strb.w	r4, [r1, #60]	; 0x3c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80078e2:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_style_scr.line.rounded = 0;
 80078e6:	f891 004f 	ldrb.w	r0, [r1, #79]	; 0x4f
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80078ea:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80078ee:	f04f 0a20 	mov.w	sl, #32
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 80078f2:	f04f 08d8 	mov.w	r8, #216	; 0xd8
 80078f6:	2296      	movs	r2, #150	; 0x96
 80078f8:	f04f 0b55 	mov.w	fp, #85	; 0x55
    lv_style_scr.line.rounded = 0;
 80078fc:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8007900:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8007904:	4bcb      	ldr	r3, [pc, #812]	; (8007c34 <lv_style_init+0x3b0>)
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8007906:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800790a:	f881 402f 	strb.w	r4, [r1, #47]	; 0x2f
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800790e:	f881 8030 	strb.w	r8, [r1, #48]	; 0x30
 8007912:	f881 b032 	strb.w	fp, [r1, #50]	; 0x32
 8007916:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800791a:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800791c:	f881 a040 	strb.w	sl, [r1, #64]	; 0x40
    lv_style_scr.text.line_space   = 2;
 8007920:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007924:	f881 a041 	strb.w	sl, [r1, #65]	; 0x41
 8007928:	f881 a042 	strb.w	sl, [r1, #66]	; 0x42
 800792c:	f881 4043 	strb.w	r4, [r1, #67]	; 0x43
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8007930:	f881 a048 	strb.w	sl, [r1, #72]	; 0x48
 8007934:	f881 a049 	strb.w	sl, [r1, #73]	; 0x49
 8007938:	f881 a04a 	strb.w	sl, [r1, #74]	; 0x4a
 800793c:	f881 404b 	strb.w	r4, [r1, #75]	; 0x4b
    lv_style_scr.line.rounded = 0;
 8007940:	f881 004f 	strb.w	r0, [r1, #79]	; 0x4f
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8007944:	4648      	mov	r0, r9
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8007946:	9200      	str	r2, [sp, #0]
    lv_style_scr.text.line_space   = 2;
 8007948:	874b      	strh	r3, [r1, #58]	; 0x3a
    lv_style_scr.line.width   = 2;
 800794a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
    lv_style_scr.text.letter_space = 0;
 800794e:	870e      	strh	r6, [r1, #56]	; 0x38
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8007950:	f881 4045 	strb.w	r4, [r1, #69]	; 0x45
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8007954:	f881 6044 	strb.w	r6, [r1, #68]	; 0x44
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8007958:	f881 404e 	strb.w	r4, [r1, #78]	; 0x4e
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800795c:	f7ff ff8e 	bl	800787c <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8007960:	f8a9 5024 	strh.w	r5, [r9, #36]	; 0x24
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8007964:	f8a9 5026 	strh.w	r5, [r9, #38]	; 0x26
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8007968:	f8a9 5020 	strh.w	r5, [r9, #32]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800796c:	f8a9 5022 	strh.w	r5, [r9, #34]	; 0x22
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8007970:	4db1      	ldr	r5, [pc, #708]	; (8007c38 <lv_style_init+0x3b4>)
 8007972:	4649      	mov	r1, r9
 8007974:	4628      	mov	r0, r5
 8007976:	f7ff ff81 	bl	800787c <lv_style_copy>
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800797a:	9a00      	ldr	r2, [sp, #0]
 800797c:	f885 8004 	strb.w	r8, [r5, #4]
 8007980:	f885 b006 	strb.w	fp, [r5, #6]
 8007984:	71ec      	strb	r4, [r5, #7]
 8007986:	716a      	strb	r2, [r5, #5]
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8007988:	21f0      	movs	r1, #240	; 0xf0
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 800798a:	686a      	ldr	r2, [r5, #4]
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800798c:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
 8007990:	f885 102d 	strb.w	r1, [r5, #45]	; 0x2d
 8007994:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
 8007998:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800799c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
 80079a0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
 80079a4:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
 80079a8:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80079ac:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
 80079b0:	f885 1049 	strb.w	r1, [r5, #73]	; 0x49
 80079b4:	f885 104a 	strb.w	r1, [r5, #74]	; 0x4a
 80079b8:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 80079bc:	60aa      	str	r2, [r5, #8]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80079be:	4d9f      	ldr	r5, [pc, #636]	; (8007c3c <lv_style_init+0x3b8>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80079c0:	f8df b294 	ldr.w	fp, [pc, #660]	; 8007c58 <lv_style_init+0x3d4>
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80079c4:	4649      	mov	r1, r9
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7ff ff58 	bl	800787c <lv_style_copy>
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 80079cc:	2140      	movs	r1, #64	; 0x40
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80079ce:	f04f 0302 	mov.w	r3, #2
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 80079d2:	22c0      	movs	r2, #192	; 0xc0
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80079d4:	f885 a02c 	strb.w	sl, [r5, #44]	; 0x2c
 80079d8:	f885 a02d 	strb.w	sl, [r5, #45]	; 0x2d
 80079dc:	f885 a02e 	strb.w	sl, [r5, #46]	; 0x2e
 80079e0:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 80079e4:	f885 a040 	strb.w	sl, [r5, #64]	; 0x40
 80079e8:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
 80079ec:	f885 a042 	strb.w	sl, [r5, #66]	; 0x42
 80079f0:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 80079f4:	f885 a048 	strb.w	sl, [r5, #72]	; 0x48
 80079f8:	f885 a049 	strb.w	sl, [r5, #73]	; 0x49
 80079fc:	f885 a04a 	strb.w	sl, [r5, #74]	; 0x4a
 8007a00:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8007a04:	f04f 0a06 	mov.w	sl, #6
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8007a08:	7429      	strb	r1, [r5, #16]
 8007a0a:	7469      	strb	r1, [r5, #17]
 8007a0c:	74a9      	strb	r1, [r5, #18]
 8007a0e:	74ec      	strb	r4, [r5, #19]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8007a10:	82ab      	strh	r3, [r5, #20]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007a12:	4629      	mov	r1, r5
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8007a14:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007a18:	4658      	mov	r0, fp
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8007a1a:	712c      	strb	r4, [r5, #4]
 8007a1c:	716c      	strb	r4, [r5, #5]
 8007a1e:	71ac      	strb	r4, [r5, #6]
 8007a20:	71ec      	strb	r4, [r5, #7]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8007a22:	722a      	strb	r2, [r5, #8]
 8007a24:	726a      	strb	r2, [r5, #9]
 8007a26:	72aa      	strb	r2, [r5, #10]
 8007a28:	9200      	str	r2, [sp, #0]
 8007a2a:	72ec      	strb	r4, [r5, #11]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8007a2c:	f8a5 a00c 	strh.w	sl, [r5, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8007a30:	75eb      	strb	r3, [r5, #23]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007a32:	f7ff ff23 	bl	800787c <lv_style_copy>
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8007a36:	9a00      	ldr	r2, [sp, #0]
 8007a38:	f88b 2048 	strb.w	r2, [fp, #72]	; 0x48
 8007a3c:	f88b 2049 	strb.w	r2, [fp, #73]	; 0x49
 8007a40:	f88b 204a 	strb.w	r2, [fp, #74]	; 0x4a
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8007a44:	22c7      	movs	r2, #199	; 0xc7
 8007a46:	f88b 2004 	strb.w	r2, [fp, #4]
 8007a4a:	229a      	movs	r2, #154	; 0x9a
 8007a4c:	f88b 2005 	strb.w	r2, [fp, #5]
 8007a50:	226b      	movs	r2, #107	; 0x6b
 8007a52:	f88b 2006 	strb.w	r2, [fp, #6]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007a56:	228b      	movs	r2, #139	; 0x8b
 8007a58:	f88b 2008 	strb.w	r2, [fp, #8]
 8007a5c:	2259      	movs	r2, #89	; 0x59
 8007a5e:	f88b 2009 	strb.w	r2, [fp, #9]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8007a62:	2242      	movs	r2, #66	; 0x42
 8007a64:	f88b 2010 	strb.w	r2, [fp, #16]
 8007a68:	222c      	movs	r2, #44	; 0x2c
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8007a6a:	21e0      	movs	r1, #224	; 0xe0
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007a6c:	232b      	movs	r3, #43	; 0x2b
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8007a6e:	f88b 2011 	strb.w	r2, [fp, #17]
 8007a72:	2215      	movs	r2, #21
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007a74:	f88b 300a 	strb.w	r3, [fp, #10]
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8007a78:	f88b 102c 	strb.w	r1, [fp, #44]	; 0x2c
 8007a7c:	f88b 102d 	strb.w	r1, [fp, #45]	; 0x2d
 8007a80:	f88b 102e 	strb.w	r1, [fp, #46]	; 0x2e
 8007a84:	f88b 402f 	strb.w	r4, [fp, #47]	; 0x2f
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8007a88:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
 8007a8c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
 8007a90:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
 8007a94:	f88b 4043 	strb.w	r4, [fp, #67]	; 0x43
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8007a98:	f88b 404b 	strb.w	r4, [fp, #75]	; 0x4b
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8007a9c:	f88b 4007 	strb.w	r4, [fp, #7]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007aa0:	f88b 400b 	strb.w	r4, [fp, #11]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8007aa4:	f88b 2012 	strb.w	r2, [fp, #18]
 8007aa8:	f88b 4013 	strb.w	r4, [fp, #19]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8007aac:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8007c5c <lv_style_init+0x3d8>
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007ab0:	9301      	str	r3, [sp, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	f7ff fee1 	bl	800787c <lv_style_copy>
    lv_style_transp.glass             = 1;
 8007aba:	f89b 2000 	ldrb.w	r2, [fp]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8007abe:	4d60      	ldr	r5, [pc, #384]	; (8007c40 <lv_style_init+0x3bc>)
    lv_style_transp.body.border.width = 0;
 8007ac0:	f8ab 6014 	strh.w	r6, [fp, #20]
    lv_style_transp.glass             = 1;
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	f88b 2000 	strb.w	r2, [fp]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8007acc:	f88b 600e 	strb.w	r6, [fp, #14]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	4628      	mov	r0, r5
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8007ad4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8007c60 <lv_style_init+0x3dc>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8007ad8:	f7ff fed0 	bl	800787c <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8007adc:	84ae      	strh	r6, [r5, #36]	; 0x24
    lv_style_transp_fit.body.padding.right  = 0;
 8007ade:	84ee      	strh	r6, [r5, #38]	; 0x26
    lv_style_transp_fit.body.padding.top    = 0;
 8007ae0:	842e      	strh	r6, [r5, #32]
    lv_style_transp_fit.body.padding.bottom = 0;
 8007ae2:	846e      	strh	r6, [r5, #34]	; 0x22
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8007ae4:	4629      	mov	r1, r5
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8007ae6:	4d57      	ldr	r5, [pc, #348]	; (8007c44 <lv_style_init+0x3c0>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8007ae8:	4658      	mov	r0, fp
 8007aea:	f7ff fec7 	bl	800787c <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8007aee:	4649      	mov	r1, r9
 8007af0:	4628      	mov	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 8007af2:	f8ab 6028 	strh.w	r6, [fp, #40]	; 0x28
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8007af6:	f7ff fec1 	bl	800787c <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8007afa:	22d0      	movs	r2, #208	; 0xd0
 8007afc:	712a      	strb	r2, [r5, #4]
 8007afe:	22a2      	movs	r2, #162	; 0xa2
 8007b00:	716a      	strb	r2, [r5, #5]
 8007b02:	2276      	movs	r2, #118	; 0x76
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007b04:	2119      	movs	r1, #25
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8007b06:	71aa      	strb	r2, [r5, #6]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007b08:	225d      	movs	r2, #93	; 0x5d
 8007b0a:	722a      	strb	r2, [r5, #8]
 8007b0c:	72a9      	strb	r1, [r5, #10]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8007b0e:	84a9      	strh	r1, [r5, #36]	; 0x24
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8007b10:	84e9      	strh	r1, [r5, #38]	; 0x26
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007b12:	7469      	strb	r1, [r5, #17]
    lv_style_btn_rel.body.shadow.width   = 0;
 8007b14:	83ae      	strh	r6, [r5, #28]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007b16:	223a      	movs	r2, #58	; 0x3a
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8007b18:	4e4b      	ldr	r6, [pc, #300]	; (8007c48 <lv_style_init+0x3c4>)
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007b1a:	726a      	strb	r2, [r5, #9]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007b1c:	210b      	movs	r1, #11
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8007b1e:	220a      	movs	r2, #10
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8007b20:	f04f 0910 	mov.w	r9, #16
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8007b24:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007b28:	74a9      	strb	r1, [r5, #18]
 8007b2a:	2028      	movs	r0, #40	; 0x28
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8007b2c:	21b2      	movs	r1, #178	; 0xb2
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8007b2e:	852a      	strh	r2, [r5, #40]	; 0x28
 8007b30:	9200      	str	r2, [sp, #0]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8007b32:	82ab      	strh	r3, [r5, #20]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8007b34:	f8a5 a00c 	strh.w	sl, [r5, #12]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8007b38:	f8a5 9020 	strh.w	r9, [r5, #32]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8007b3c:	f8a5 9022 	strh.w	r9, [r5, #34]	; 0x22
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007b40:	7428      	strb	r0, [r5, #16]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8007b42:	75e9      	strb	r1, [r5, #23]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8007b44:	762f      	strb	r7, [r5, #24]
 8007b46:	766f      	strb	r7, [r5, #25]
 8007b48:	76af      	strb	r7, [r5, #26]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4630      	mov	r0, r6
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8007b4e:	71ec      	strb	r4, [r5, #7]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007b50:	72ec      	strb	r4, [r5, #11]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007b52:	74ec      	strb	r4, [r5, #19]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8007b54:	76ec      	strb	r4, [r5, #27]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8007b56:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8007b5a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
 8007b5e:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
 8007b62:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8007b66:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
 8007b6a:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
 8007b6e:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
 8007b72:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8007b76:	f7ff fe81 	bl	800787c <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8007b7a:	2194      	movs	r1, #148	; 0x94
 8007b7c:	7131      	strb	r1, [r6, #4]
 8007b7e:	2133      	movs	r1, #51	; 0x33
 8007b80:	71b1      	strb	r1, [r6, #6]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8007b82:	213c      	movs	r1, #60	; 0x3c
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007b84:	f04f 0bc6 	mov.w	fp, #198	; 0xc6
 8007b88:	f04f 0ab5 	mov.w	sl, #181	; 0xb5
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8007b8c:	2762      	movs	r7, #98	; 0x62
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8007b8e:	7231      	strb	r1, [r6, #8]
 8007b90:	f886 900a 	strb.w	r9, [r6, #10]
 8007b94:	2126      	movs	r1, #38	; 0x26
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007b96:	f04f 09a4 	mov.w	r9, #164	; 0xa4
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8007b9a:	7177      	strb	r7, [r6, #5]
 8007b9c:	71f4      	strb	r4, [r6, #7]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8007b9e:	7271      	strb	r1, [r6, #9]
 8007ba0:	72f4      	strb	r4, [r6, #11]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007ba2:	f886 b02c 	strb.w	fp, [r6, #44]	; 0x2c
 8007ba6:	f886 a02d 	strb.w	sl, [r6, #45]	; 0x2d
 8007baa:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
 8007bae:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8007bb2:	f886 b040 	strb.w	fp, [r6, #64]	; 0x40
 8007bb6:	f886 a041 	strb.w	sl, [r6, #65]	; 0x41
 8007bba:	f886 9042 	strb.w	r9, [r6, #66]	; 0x42
 8007bbe:	f886 4043 	strb.w	r4, [r6, #67]	; 0x43
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007bc2:	f886 b048 	strb.w	fp, [r6, #72]	; 0x48
 8007bc6:	f886 a049 	strb.w	sl, [r6, #73]	; 0x49
 8007bca:	f886 904a 	strb.w	r9, [r6, #74]	; 0x4a
 8007bce:	f886 404b 	strb.w	r4, [r6, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8007bd2:	4e1e      	ldr	r6, [pc, #120]	; (8007c4c <lv_style_init+0x3c8>)
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff fe50 	bl	800787c <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8007bdc:	2122      	movs	r1, #34	; 0x22
 8007bde:	7131      	strb	r1, [r6, #4]
 8007be0:	2111      	movs	r1, #17
 8007be2:	7171      	strb	r1, [r6, #5]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007be4:	2137      	movs	r1, #55	; 0x37
 8007be6:	7277      	strb	r7, [r6, #9]
 8007be8:	72b1      	strb	r1, [r6, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007bea:	27f4      	movs	r7, #244	; 0xf4
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007bec:	210d      	movs	r1, #13
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8007bee:	9a00      	ldr	r2, [sp, #0]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007bf0:	7431      	strb	r1, [r6, #16]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007bf2:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8007bf6:	f886 7040 	strb.w	r7, [r6, #64]	; 0x40
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007bfa:	f886 7048 	strb.w	r7, [r6, #72]	; 0x48
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007bfe:	2107      	movs	r1, #7
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8007c00:	4f13      	ldr	r7, [pc, #76]	; (8007c50 <lv_style_init+0x3cc>)
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8007c02:	71b2      	strb	r2, [r6, #6]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007c04:	20dd      	movs	r0, #221	; 0xdd
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007c06:	2290      	movs	r2, #144	; 0x90
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007c08:	7471      	strb	r1, [r6, #17]
 8007c0a:	f04f 0301 	mov.w	r3, #1
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007c0e:	21c8      	movs	r1, #200	; 0xc8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007c10:	7232      	strb	r2, [r6, #8]
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8007c12:	71f4      	strb	r4, [r6, #7]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007c14:	72f4      	strb	r4, [r6, #11]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007c16:	74b3      	strb	r3, [r6, #18]
 8007c18:	74f4      	strb	r4, [r6, #19]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007c1a:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
 8007c1e:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
 8007c22:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8007c26:	f886 0041 	strb.w	r0, [r6, #65]	; 0x41
 8007c2a:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
 8007c2e:	e019      	b.n	8007c64 <lv_style_init+0x3e0>
 8007c30:	20015acc 	.word	0x20015acc
 8007c34:	200000c0 	.word	0x200000c0
 8007c38:	20015b6c 	.word	0x20015b6c
 8007c3c:	200158ec 	.word	0x200158ec
 8007c40:	200159dc 	.word	0x200159dc
 8007c44:	2001584c 	.word	0x2001584c
 8007c48:	2001589c 	.word	0x2001589c
 8007c4c:	20015a7c 	.word	0x20015a7c
 8007c50:	20015b1c 	.word	0x20015b1c
 8007c54:	20015a2c 	.word	0x20015a2c
 8007c58:	200157ac 	.word	0x200157ac
 8007c5c:	200157fc 	.word	0x200157fc
 8007c60:	2001593c 	.word	0x2001593c
 8007c64:	f886 4043 	strb.w	r4, [r6, #67]	; 0x43
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007c68:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
 8007c6c:	f886 104a 	strb.w	r1, [r6, #74]	; 0x4a
 8007c70:	f886 404b 	strb.w	r4, [r6, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8007c74:	4631      	mov	r1, r6
 8007c76:	4638      	mov	r0, r7
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007c78:	9200      	str	r2, [sp, #0]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8007c7a:	f7ff fdff 	bl	800787c <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8007c7e:	f04f 0302 	mov.w	r3, #2
 8007c82:	71bb      	strb	r3, [r7, #6]
 8007c84:	2127      	movs	r1, #39	; 0x27
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8007c86:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8007c8a:	2670      	movs	r6, #112	; 0x70
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8007c8c:	7139      	strb	r1, [r7, #4]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8007c8e:	727b      	strb	r3, [r7, #9]
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8007c90:	2114      	movs	r1, #20
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8007c92:	9b01      	ldr	r3, [sp, #4]
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8007c94:	7179      	strb	r1, [r7, #5]
 8007c96:	71fc      	strb	r4, [r7, #7]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8007c98:	723e      	strb	r6, [r7, #8]
 8007c9a:	72bb      	strb	r3, [r7, #10]
 8007c9c:	72fc      	strb	r4, [r7, #11]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007c9e:	f887 b02c 	strb.w	fp, [r7, #44]	; 0x2c
 8007ca2:	f887 a02d 	strb.w	sl, [r7, #45]	; 0x2d
 8007ca6:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
 8007caa:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8007cae:	f887 b040 	strb.w	fp, [r7, #64]	; 0x40
 8007cb2:	f887 a041 	strb.w	sl, [r7, #65]	; 0x41
 8007cb6:	f887 9042 	strb.w	r9, [r7, #66]	; 0x42
 8007cba:	f887 4043 	strb.w	r4, [r7, #67]	; 0x43
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007cbe:	f887 b048 	strb.w	fp, [r7, #72]	; 0x48
 8007cc2:	f887 a049 	strb.w	sl, [r7, #73]	; 0x49
 8007cc6:	f887 904a 	strb.w	r9, [r7, #74]	; 0x4a
 8007cca:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8007cce:	4f19      	ldr	r7, [pc, #100]	; (8007d34 <lv_style_init+0x4b0>)
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff fdd2 	bl	800787c <lv_style_copy>
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8007cd8:	9a00      	ldr	r2, [sp, #0]
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8007cda:	f887 8004 	strb.w	r8, [r7, #4]
 8007cde:	f887 8005 	strb.w	r8, [r7, #5]
 8007ce2:	f887 8006 	strb.w	r8, [r7, #6]
 8007ce6:	71fc      	strb	r4, [r7, #7]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8007ce8:	f887 8008 	strb.w	r8, [r7, #8]
 8007cec:	f887 8009 	strb.w	r8, [r7, #9]
 8007cf0:	f887 800a 	strb.w	r8, [r7, #10]
 8007cf4:	72fc      	strb	r4, [r7, #11]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8007cf6:	743a      	strb	r2, [r7, #16]
 8007cf8:	747a      	strb	r2, [r7, #17]
 8007cfa:	74ba      	strb	r2, [r7, #18]
 8007cfc:	74fc      	strb	r4, [r7, #19]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8007cfe:	f887 602c 	strb.w	r6, [r7, #44]	; 0x2c
 8007d02:	f887 602d 	strb.w	r6, [r7, #45]	; 0x2d
 8007d06:	f887 602e 	strb.w	r6, [r7, #46]	; 0x2e
 8007d0a:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8007d0e:	f887 6040 	strb.w	r6, [r7, #64]	; 0x40
 8007d12:	f887 6041 	strb.w	r6, [r7, #65]	; 0x41
 8007d16:	f887 6042 	strb.w	r6, [r7, #66]	; 0x42
 8007d1a:	f887 4043 	strb.w	r4, [r7, #67]	; 0x43
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8007d1e:	f887 6048 	strb.w	r6, [r7, #72]	; 0x48
 8007d22:	f887 6049 	strb.w	r6, [r7, #73]	; 0x49
 8007d26:	f887 604a 	strb.w	r6, [r7, #74]	; 0x4a
 8007d2a:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
}
 8007d2e:	b003      	add	sp, #12
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	2001598c 	.word	0x2001598c

08007d38 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <lv_draw_get_buf+0x34>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4282      	cmp	r2, r0
{
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	4601      	mov	r1, r0
 8007d42:	4c0b      	ldr	r4, [pc, #44]	; (8007d70 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8007d44:	d301      	bcc.n	8007d4a <lv_draw_get_buf+0x12>
 8007d46:	6820      	ldr	r0, [r4, #0]
 8007d48:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8007d4a:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	b923      	cbnz	r3, 8007d5a <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8007d50:	f004 fb40 	bl	800c3d4 <lv_mem_alloc>
 8007d54:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8007d56:	b938      	cbnz	r0, 8007d68 <lv_draw_get_buf+0x30>
 8007d58:	e7fe      	b.n	8007d58 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f004 fb9a 	bl	800c494 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8007d60:	b108      	cbz	r0, 8007d66 <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	e7fe      	b.n	8007d66 <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2001022c 	.word	0x2001022c
 8007d70:	20015bd4 	.word	0x20015bd4

08007d74 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8007d74:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8007d76:	4c05      	ldr	r4, [pc, #20]	; (8007d8c <lv_draw_free_buf+0x18>)
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	b128      	cbz	r0, 8007d88 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 8007d7c:	f004 fb60 	bl	800c440 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 8007d80:	4a03      	ldr	r2, [pc, #12]	; (8007d90 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20015bd4 	.word	0x20015bd4
 8007d90:	2001022c 	.word	0x2001022c

08007d94 <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8007d94:	b188      	cbz	r0, 8007dba <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 8007d96:	2807      	cmp	r0, #7
 8007d98:	dc08      	bgt.n	8007dac <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8007d9a:	3801      	subs	r0, #1
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <lv_draw_aa_get_opa+0x28>)
 8007d9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007da2:	5c58      	ldrb	r0, [r3, r1]
 8007da4:	fb10 f002 	smulbb	r0, r0, r2
 8007da8:	0a00      	lsrs	r0, r0, #8
 8007daa:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8007dac:	0049      	lsls	r1, r1, #1
 8007dae:	fb01 2202 	mla	r2, r1, r2, r2
 8007db2:	0040      	lsls	r0, r0, #1
 8007db4:	fb92 f0f0 	sdiv	r0, r2, r0
 8007db8:	b2c0      	uxtb	r0, r0
    }
}
 8007dba:	4770      	bx	lr
 8007dbc:	080e4bfc 	.word	0x080e4bfc

08007dc0 <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	f89d 4018 	ldrb.w	r4, [sp, #24]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007dc6:	b2a5      	uxth	r5, r4
 8007dc8:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8007dcc:	4363      	muls	r3, r4
 8007dce:	fb00 3305 	mla	r3, r0, r5, r3
 8007dd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f363 0007 	bfi	r0, r3, #0, #8
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8007ddc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007de0:	b2a6      	uxth	r6, r4
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8007de2:	fb13 f306 	smulbb	r3, r3, r6
 8007de6:	fb01 3105 	mla	r1, r1, r5, r3
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007dea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007dee:	fb13 f606 	smulbb	r6, r3, r6
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8007df2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007df6:	fb02 6205 	mla	r2, r2, r5, r6
    return ret;
 8007dfa:	f361 200f 	bfi	r0, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007dfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 8007e02:	f362 4017 	bfi	r0, r2, #16, #8
}
 8007e06:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}

08007e0c <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	b089      	sub	sp, #36	; 0x24
 8007e12:	461d      	mov	r5, r3
 8007e14:	fa5f fb83 	uxtb.w	fp, r3
 8007e18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9007      	str	r0, [sp, #28]
 8007e26:	9106      	str	r1, [sp, #24]
 8007e28:	4614      	mov	r4, r2
 8007e2a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8007e2e:	f7ff fb69 	bl	8007504 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 8007e32:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8007e34:	4682      	mov	sl, r0
    if(disp->driver.set_px_cb) {
 8007e36:	b35b      	cbz	r3, 8007e90 <sw_color_fill+0x84>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8007e38:	f9b4 7000 	ldrsh.w	r7, [r4]
 8007e3c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8007e40:	42bb      	cmp	r3, r7
 8007e42:	da02      	bge.n	8007e4a <sw_color_fill+0x3e>
                }
                mem += mem_width;
            }
        }
    }
}
 8007e44:	b009      	add	sp, #36	; 0x24
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8007e4a:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
 8007e4e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8007e52:	4543      	cmp	r3, r8
 8007e54:	da02      	bge.n	8007e5c <sw_color_fill+0x50>
 8007e56:	3701      	adds	r7, #1
 8007e58:	b23f      	sxth	r7, r7
 8007e5a:	e7ef      	b.n	8007e3c <sw_color_fill+0x30>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8007e5c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007e60:	9a06      	ldr	r2, [sp, #24]
 8007e62:	f8cd 8000 	str.w	r8, [sp]
 8007e66:	461e      	mov	r6, r3
 8007e68:	9b05      	ldr	r3, [sp, #20]
 8007e6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e6e:	f36b 0507 	bfi	r5, fp, #0, #8
 8007e72:	f363 250f 	bfi	r5, r3, #8, #8
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	9907      	ldr	r1, [sp, #28]
 8007e7a:	f363 4517 	bfi	r5, r3, #16, #8
 8007e7e:	9501      	str	r5, [sp, #4]
 8007e80:	463b      	mov	r3, r7
 8007e82:	4650      	mov	r0, sl
 8007e84:	f108 0801 	add.w	r8, r8, #1
 8007e88:	47b0      	blx	r6
 8007e8a:	fa0f f888 	sxth.w	r8, r8
 8007e8e:	e7de      	b.n	8007e4e <sw_color_fill+0x42>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8007e90:	9a06      	ldr	r2, [sp, #24]
 8007e92:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8007e96:	fb01 f702 	mul.w	r7, r1, r2
 8007e9a:	9a07      	ldr	r2, [sp, #28]
        if(opa == LV_OPA_COVER) {
 8007e9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8007ea0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
        if(opa == LV_OPA_COVER) {
 8007ea4:	d131      	bne.n	8007f0a <sw_color_fill+0xfe>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8007ea6:	f9b4 9000 	ldrsh.w	r9, [r4]
 8007eaa:	464a      	mov	r2, r9
 8007eac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	dd1d      	ble.n	8007ef0 <sw_color_fill+0xe4>
            lv_color_t * mem_first = &mem[fill_area->x1];
 8007eb4:	eb07 0889 	add.w	r8, r7, r9, lsl #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8007eb8:	eba3 0909 	sub.w	r9, r3, r9
            mem += mem_width;
 8007ebc:	9b06      	ldr	r3, [sp, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8007ebe:	f109 0901 	add.w	r9, r9, #1
 8007ec2:	ea4f 0989 	mov.w	r9, r9, lsl #2
            mem += mem_width;
 8007ec6:	009e      	lsls	r6, r3, #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8007ec8:	fa0f f989 	sxth.w	r9, r9
            mem += mem_width;
 8007ecc:	4437      	add	r7, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8007ece:	1c4d      	adds	r5, r1, #1
 8007ed0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8007ed4:	b22d      	sxth	r5, r5
 8007ed6:	42ab      	cmp	r3, r5
 8007ed8:	dbb4      	blt.n	8007e44 <sw_color_fill+0x38>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8007eda:	f9b4 0000 	ldrsh.w	r0, [r4]
 8007ede:	464a      	mov	r2, r9
 8007ee0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	f006 fa3b 	bl	800e360 <memcpy>
                mem += mem_width;
 8007eea:	4437      	add	r7, r6
 8007eec:	3501      	adds	r5, #1
 8007eee:	e7ef      	b.n	8007ed0 <sw_color_fill+0xc4>
                mem[col] = color;
 8007ef0:	9b05      	ldr	r3, [sp, #20]
 8007ef2:	f36b 0507 	bfi	r5, fp, #0, #8
 8007ef6:	f363 250f 	bfi	r5, r3, #8, #8
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	f363 4517 	bfi	r5, r3, #16, #8
 8007f00:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
 8007f04:	3201      	adds	r2, #1
 8007f06:	b212      	sxth	r2, r2
 8007f08:	e7d0      	b.n	8007eac <sw_color_fill+0xa0>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	f363 0507 	bfi	r5, r3, #0, #8
 8007f10:	f363 250f 	bfi	r5, r3, #8, #8
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f1c:	9a04      	ldr	r2, [sp, #16]
 8007f1e:	9905      	ldr	r1, [sp, #20]
 8007f20:	4658      	mov	r0, fp
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8007f22:	f363 4517 	bfi	r5, r3, #16, #8
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8007f26:	f7ff ff4b 	bl	8007dc0 <lv_color_mix.isra.0>
                mem += mem_width;
 8007f2a:	9b06      	ldr	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8007f2c:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
                mem += mem_width;
 8007f30:	009b      	lsls	r3, r3, #2
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8007f32:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
                mem += mem_width;
 8007f36:	9306      	str	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8007f38:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	db81      	blt.n	8007e44 <sw_color_fill+0x38>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8007f40:	f9b4 6000 	ldrsh.w	r6, [r4]
 8007f44:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8007f48:	42b3      	cmp	r3, r6
 8007f4a:	da06      	bge.n	8007f5a <sw_color_fill+0x14e>
                mem += mem_width;
 8007f4c:	9b06      	ldr	r3, [sp, #24]
 8007f4e:	f108 0801 	add.w	r8, r8, #1
 8007f52:	441f      	add	r7, r3
 8007f54:	fa0f f888 	sxth.w	r8, r8
 8007f58:	e7ee      	b.n	8007f38 <sw_color_fill+0x12c>
                        if(mem[col].full != bg_tmp.full) {
 8007f5a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8007f5e:	42ab      	cmp	r3, r5
 8007f60:	eb07 0a86 	add.w	sl, r7, r6, lsl #2
 8007f64:	d00e      	beq.n	8007f84 <sw_color_fill+0x178>
                            bg_tmp  = mem[col];
 8007f66:	461d      	mov	r5, r3
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8007f68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f78:	b2eb      	uxtb	r3, r5
 8007f7a:	9a04      	ldr	r2, [sp, #16]
 8007f7c:	9905      	ldr	r1, [sp, #20]
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f7ff ff1e 	bl	8007dc0 <lv_color_mix.isra.0>
 8007f84:	3601      	adds	r6, #1
                        mem[col] = opa_tmp;
 8007f86:	f8ca 0000 	str.w	r0, [sl]
 8007f8a:	b236      	sxth	r6, r6
 8007f8c:	e7da      	b.n	8007f44 <sw_color_fill+0x138>

08007f8e <lv_draw_px>:
{
 8007f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f92:	b085      	sub	sp, #20
 8007f94:	4606      	mov	r6, r0
 8007f96:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if(opa < LV_OPA_MIN) return;
 8007f9a:	f1b9 0f0f 	cmp.w	r9, #15
{
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 8007fa2:	d92b      	bls.n	8007ffc <lv_draw_px+0x6e>
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8007fa4:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8007fa8:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 8007fac:	bf28      	it	cs
 8007fae:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8007fb2:	4283      	cmp	r3, r0
 8007fb4:	dc22      	bgt.n	8007ffc <lv_draw_px+0x6e>
 8007fb6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	db1e      	blt.n	8007ffc <lv_draw_px+0x6e>
 8007fbe:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8007fc2:	428b      	cmp	r3, r1
 8007fc4:	dc1a      	bgt.n	8007ffc <lv_draw_px+0x6e>
 8007fc6:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8007fca:	428b      	cmp	r3, r1
 8007fcc:	db16      	blt.n	8007ffc <lv_draw_px+0x6e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8007fce:	f7ff fa99 	bl	8007504 <lv_refr_get_disp_refreshing>
 8007fd2:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8007fd4:	f003 fd5c 	bl	800ba90 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8007fd8:	8a82      	ldrh	r2, [r0, #20]
    y -= vdb->area.y1;
 8007fda:	8a44      	ldrh	r4, [r0, #18]
 8007fdc:	8a03      	ldrh	r3, [r0, #16]
 8007fde:	1b2c      	subs	r4, r5, r4
 8007fe0:	3201      	adds	r2, #1
    if(disp->driver.set_px_cb) {
 8007fe2:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8007fe6:	1ad2      	subs	r2, r2, r3
    x -= vdb->area.x1;
 8007fe8:	1af3      	subs	r3, r6, r3
 8007fea:	b212      	sxth	r2, r2
 8007fec:	b21b      	sxth	r3, r3
    y -= vdb->area.y1;
 8007fee:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 8007ff0:	b13d      	cbz	r5, 8008002 <lv_draw_px+0x74>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8007ff2:	e88d 0290 	stmia.w	sp, {r4, r7, r9}
 8007ff6:	6881      	ldr	r1, [r0, #8]
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	47a8      	blx	r5
}
 8007ffc:	b005      	add	sp, #20
 8007ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_color_t * vdb_px_p = vdb->buf_act;
 8008002:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 8008004:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 8008008:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        vdb_px_p += y * vdb_width + x;
 800800c:	eb05 0284 	add.w	r2, r5, r4, lsl #2
            if(opa == LV_OPA_COVER) {
 8008010:	d102      	bne.n	8008018 <lv_draw_px+0x8a>
                *vdb_px_p = color;
 8008012:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
 8008016:	e7f1      	b.n	8007ffc <lv_draw_px+0x6e>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8008018:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
 800801c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008020:	7891      	ldrb	r1, [r2, #2]
 8008022:	9101      	str	r1, [sp, #4]
 8008024:	7852      	ldrb	r2, [r2, #1]
 8008026:	9200      	str	r2, [sp, #0]
 8008028:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800802c:	f3c7 4207 	ubfx	r2, r7, #16, #8
 8008030:	b2f8      	uxtb	r0, r7
 8008032:	f7ff fec5 	bl	8007dc0 <lv_color_mix.isra.0>
 8008036:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800803a:	e7df      	b.n	8007ffc <lv_draw_px+0x6e>

0800803c <lv_draw_fill>:
{
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 8008040:	2b0f      	cmp	r3, #15
{
 8008042:	b087      	sub	sp, #28
 8008044:	4617      	mov	r7, r2
 8008046:	4699      	mov	r9, r3
    if(opa < LV_OPA_MIN) return;
 8008048:	d950      	bls.n	80080ec <lv_draw_fill+0xb0>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800804a:	2bfc      	cmp	r3, #252	; 0xfc
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800804c:	460a      	mov	r2, r1
 800804e:	4601      	mov	r1, r0
 8008050:	a802      	add	r0, sp, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008052:	bf28      	it	cs
 8008054:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8008058:	f003 fe9c 	bl	800bd94 <lv_area_intersect>
    if(union_ok == false) {
 800805c:	2800      	cmp	r0, #0
 800805e:	d045      	beq.n	80080ec <lv_draw_fill+0xb0>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008060:	f7ff fa50 	bl	8007504 <lv_refr_get_disp_refreshing>
 8008064:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008066:	f003 fd13 	bl	800ba90 <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800806a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800806e:	8a41      	ldrh	r1, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8008070:	f8b0 a010 	ldrh.w	sl, [r0, #16]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8008074:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8008078:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800807c:	1a5b      	subs	r3, r3, r1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800807e:	4684      	mov	ip, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008080:	fa1f fe83 	uxth.w	lr, r3
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8008084:	eba2 020a 	sub.w	r2, r2, sl
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008088:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800808c:	6880      	ldr	r0, [r0, #8]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800808e:	eba4 040a 	sub.w	r4, r4, sl
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8008092:	b292      	uxth	r2, r2
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8008094:	b2a6      	uxth	r6, r4
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008096:	1a5b      	subs	r3, r3, r1
 8008098:	1c54      	adds	r4, r2, #1
 800809a:	f8bc 1014 	ldrh.w	r1, [ip, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800809e:	f8ad 6010 	strh.w	r6, [sp, #16]
 80080a2:	1ba4      	subs	r4, r4, r6
 80080a4:	3101      	adds	r1, #1
 80080a6:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80080a8:	fa0f f58e 	sxth.w	r5, lr
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	eba1 010a 	sub.w	r1, r1, sl
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 80080b2:	2c31      	cmp	r4, #49	; 0x31
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80080b4:	f8ad 5012 	strh.w	r5, [sp, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80080b8:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80080bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080c0:	b209      	sxth	r1, r1
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 80080c2:	dc02      	bgt.n	80080ca <lv_draw_fill+0x8e>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 80080c4:	f8cd 9000 	str.w	r9, [sp]
 80080c8:	e04c      	b.n	8008164 <lv_draw_fill+0x128>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 80080ca:	00ae      	lsls	r6, r5, #2
    else if(opa == LV_OPA_COVER) {
 80080cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 80080d0:	fb01 0606 	mla	r6, r1, r6, r0
    else if(opa == LV_OPA_COVER) {
 80080d4:	d14b      	bne.n	800816e <lv_draw_fill+0x132>
        if(disp->driver.gpu_fill_cb) {
 80080d6:	f8d8 9020 	ldr.w	r9, [r8, #32]
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	d008      	beq.n	80080f2 <lv_draw_fill+0xb6>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 80080e0:	460a      	mov	r2, r1
 80080e2:	9700      	str	r7, [sp, #0]
 80080e4:	4601      	mov	r1, r0
 80080e6:	ab04      	add	r3, sp, #16
 80080e8:	4640      	mov	r0, r8
 80080ea:	47c8      	blx	r9
}
 80080ec:	b007      	add	sp, #28
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80080f2:	3301      	adds	r3, #1
 80080f4:	eba3 030e 	sub.w	r3, r3, lr
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 80080f8:	b21b      	sxth	r3, r3
 80080fa:	2b32      	cmp	r3, #50	; 0x32
 80080fc:	dd30      	ble.n	8008160 <lv_draw_fill+0x124>
 80080fe:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008102:	b36b      	cbz	r3, 8008160 <lv_draw_fill+0x124>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008104:	4b32      	ldr	r3, [pc, #200]	; (80081d0 <lv_draw_fill+0x194>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4297      	cmp	r7, r2
 800810a:	d104      	bne.n	8008116 <lv_draw_fill+0xda>
 800810c:	4a31      	ldr	r2, [pc, #196]	; (80081d4 <lv_draw_fill+0x198>)
 800810e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008112:	42a2      	cmp	r2, r4
 8008114:	d007      	beq.n	8008126 <lv_draw_fill+0xea>
                for(i = 0; i < w; i++) {
 8008116:	fa1f f289 	uxth.w	r2, r9
 800811a:	42a2      	cmp	r2, r4
 800811c:	f109 0901 	add.w	r9, r9, #1
 8008120:	db1b      	blt.n	800815a <lv_draw_fill+0x11e>
                last_width = w;
 8008122:	4b2c      	ldr	r3, [pc, #176]	; (80081d4 <lv_draw_fill+0x198>)
 8008124:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008126:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80081d0 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 800812a:	ea4f 0981 	mov.w	r9, r1, lsl #2
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800812e:	f04f 0aff 	mov.w	sl, #255	; 0xff
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8008132:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8008136:	42ab      	cmp	r3, r5
 8008138:	dbd8      	blt.n	80080ec <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800813a:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800813e:	f8cd a000 	str.w	sl, [sp]
 8008142:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8008146:	4623      	mov	r3, r4
 8008148:	465a      	mov	r2, fp
 800814a:	4640      	mov	r0, r8
 800814c:	f8d8 701c 	ldr.w	r7, [r8, #28]
 8008150:	3501      	adds	r5, #1
 8008152:	47b8      	blx	r7
                vdb_buf_tmp += vdb_width;
 8008154:	444e      	add	r6, r9
 8008156:	b22d      	sxth	r5, r5
 8008158:	e7eb      	b.n	8008132 <lv_draw_fill+0xf6>
                    color_array_tmp[i].full = color.full;
 800815a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 800815e:	e7da      	b.n	8008116 <lv_draw_fill+0xda>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008160:	23ff      	movs	r3, #255	; 0xff
 8008162:	9300      	str	r3, [sp, #0]
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008164:	463b      	mov	r3, r7
 8008166:	aa04      	add	r2, sp, #16
 8008168:	f7ff fe50 	bl	8007e0c <sw_color_fill>
 800816c:	e7be      	b.n	80080ec <lv_draw_fill+0xb0>
        if(disp->driver.gpu_blend_cb) {
 800816e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0a6      	beq.n	80080c4 <lv_draw_fill+0x88>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008176:	4a16      	ldr	r2, [pc, #88]	; (80081d0 <lv_draw_fill+0x194>)
 8008178:	6813      	ldr	r3, [r2, #0]
 800817a:	429f      	cmp	r7, r3
 800817c:	d104      	bne.n	8008188 <lv_draw_fill+0x14c>
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <lv_draw_fill+0x198>)
 8008180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008184:	42a3      	cmp	r3, r4
 8008186:	d007      	beq.n	8008198 <lv_draw_fill+0x15c>
 8008188:	2300      	movs	r3, #0
                for(i = 0; i < w; i++) {
 800818a:	b298      	uxth	r0, r3
 800818c:	42a0      	cmp	r0, r4
 800818e:	f103 0301 	add.w	r3, r3, #1
 8008192:	db19      	blt.n	80081c8 <lv_draw_fill+0x18c>
                last_width = w;
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <lv_draw_fill+0x198>)
 8008196:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008198:	f8df b034 	ldr.w	fp, [pc, #52]	; 80081d0 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 800819c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 80081a0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80081a4:	42ab      	cmp	r3, r5
 80081a6:	dba1      	blt.n	80080ec <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 80081a8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80081ac:	f8cd 9000 	str.w	r9, [sp]
 80081b0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80081b4:	4623      	mov	r3, r4
 80081b6:	465a      	mov	r2, fp
 80081b8:	4640      	mov	r0, r8
 80081ba:	f8d8 701c 	ldr.w	r7, [r8, #28]
 80081be:	3501      	adds	r5, #1
 80081c0:	47b8      	blx	r7
                vdb_buf_tmp += vdb_width;
 80081c2:	4456      	add	r6, sl
 80081c4:	b22d      	sxth	r5, r5
 80081c6:	e7eb      	b.n	80081a0 <lv_draw_fill+0x164>
                    color_array_tmp[i].full = color.full;
 80081c8:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 80081cc:	e7dd      	b.n	800818a <lv_draw_fill+0x14e>
 80081ce:	bf00      	nop
 80081d0:	20010230 	.word	0x20010230
 80081d4:	200000a2 	.word	0x200000a2

080081d8 <lv_draw_letter>:
{
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	b09d      	sub	sp, #116	; 0x74
 80081de:	4615      	mov	r5, r2
 80081e0:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80081e2:	2200      	movs	r2, #0
{
 80081e4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80081e8:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80081ea:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
 80081ee:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80081f0:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 80081f4:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80081f6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80081fa:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
 80081fe:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8008202:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008204:	4bb5      	ldr	r3, [pc, #724]	; (80084dc <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008206:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800820a:	aa18      	add	r2, sp, #96	; 0x60
{
 800820c:	4604      	mov	r4, r0
 800820e:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008210:	f103 0c10 	add.w	ip, r3, #16
 8008214:	4616      	mov	r6, r2
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	6859      	ldr	r1, [r3, #4]
 800821a:	4696      	mov	lr, r2
 800821c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8008220:	3308      	adds	r3, #8
 8008222:	4563      	cmp	r3, ip
 8008224:	4672      	mov	r2, lr
 8008226:	d1f6      	bne.n	8008216 <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	2b0f      	cmp	r3, #15
 800822c:	f240 80e2 	bls.w	80083f4 <lv_draw_letter+0x21c>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008230:	2bfc      	cmp	r3, #252	; 0xfc
 8008232:	bf28      	it	cs
 8008234:	23ff      	movcs	r3, #255	; 0xff
 8008236:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 8008238:	2d00      	cmp	r5, #0
 800823a:	f000 80db 	beq.w	80083f4 <lv_draw_letter+0x21c>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800823e:	2300      	movs	r3, #0
 8008240:	464a      	mov	r2, r9
 8008242:	a916      	add	r1, sp, #88	; 0x58
 8008244:	4628      	mov	r0, r5
 8008246:	f003 fa3f 	bl	800b6c8 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 800824a:	2800      	cmp	r0, #0
 800824c:	f000 80d2 	beq.w	80083f4 <lv_draw_letter+0x21c>
    switch(g.bpp) {
 8008250:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8008254:	3b01      	subs	r3, #1
 8008256:	2b07      	cmp	r3, #7
 8008258:	f200 80cc 	bhi.w	80083f4 <lv_draw_letter+0x21c>
 800825c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008260:	00d10008 	.word	0x00d10008
 8008264:	000d00ca 	.word	0x000d00ca
 8008268:	00ca00ca 	.word	0x00ca00ca
 800826c:	00cd00ca 	.word	0x00cd00ca
            bitmask_init  = 0x80;
 8008270:	2380      	movs	r3, #128	; 0x80
 8008272:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp1_opa_table;
 8008274:	ab14      	add	r3, sp, #80	; 0x50
            bpp_opa_table = bpp2_opa_table;
 8008276:	9308      	str	r3, [sp, #32]
 8008278:	e002      	b.n	8008280 <lv_draw_letter+0xa8>
            bitmask_init  = 0xF0;
 800827a:	23f0      	movs	r3, #240	; 0xf0
 800827c:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp4_opa_table;
 800827e:	9608      	str	r6, [sp, #32]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008280:	f99d 205c 	ldrsb.w	r2, [sp, #92]	; 0x5c
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008284:	f99d 305d 	ldrsb.w	r3, [sp, #93]	; 0x5d
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008288:	f9b4 8000 	ldrsh.w	r8, [r4]
 800828c:	9207      	str	r2, [sp, #28]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800828e:	4649      	mov	r1, r9
 8008290:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008292:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8008296:	f895 b008 	ldrb.w	fp, [r5, #8]
 800829a:	f895 a009 	ldrb.w	sl, [r5, #9]
 800829e:	f89d 605b 	ldrb.w	r6, [sp, #91]	; 0x5b
 80082a2:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 80082a4:	f003 fa0e 	bl	800b6c4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 80082a8:	4681      	mov	r9, r0
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f000 80a2 	beq.w	80083f4 <lv_draw_letter+0x21c>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80082b0:	9a07      	ldr	r2, [sp, #28]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80082b2:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80082b6:	4490      	add	r8, r2
 80082b8:	fa1f f388 	uxth.w	r3, r8
 80082bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082be:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80082c2:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80082c6:	4442      	add	r2, r8
 80082c8:	428a      	cmp	r2, r1
 80082ca:	f2c0 8093 	blt.w	80083f4 <lv_draw_letter+0x21c>
 80082ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80082d2:	4542      	cmp	r2, r8
 80082d4:	f2c0 808e 	blt.w	80083f4 <lv_draw_letter+0x21c>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80082d8:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80082da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80082de:	441e      	add	r6, r3
 80082e0:	1ba4      	subs	r4, r4, r6
 80082e2:	44a3      	add	fp, r4
 80082e4:	ebab 0a0a 	sub.w	sl, fp, sl
 80082e8:	fa1f f38a 	uxth.w	r3, sl
 80082ec:	930c      	str	r3, [sp, #48]	; 0x30
 80082ee:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 80082f2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80082f6:	445b      	add	r3, fp
 80082f8:	4293      	cmp	r3, r2
 80082fa:	db7b      	blt.n	80083f4 <lv_draw_letter+0x21c>
 80082fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008300:	455b      	cmp	r3, fp
 8008302:	db77      	blt.n	80083f4 <lv_draw_letter+0x21c>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008304:	f7ff f8fe 	bl	8007504 <lv_refr_get_disp_refreshing>
 8008308:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800830a:	f003 fbc1 	bl	800ba90 <lv_disp_get_buf>
 800830e:	4682      	mov	sl, r0
 8008310:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
    return area_p->x2 - area_p->x1 + 1;
 8008314:	f8ba 3014 	ldrh.w	r3, [sl, #20]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8008318:	f89d 605a 	ldrb.w	r6, [sp, #90]	; 0x5a
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800831c:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008320:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008324:	f89d e05b 	ldrb.w	lr, [sp, #91]	; 0x5b
 8008328:	3301      	adds	r3, #1
 800832a:	1a1b      	subs	r3, r3, r0
 800832c:	b21b      	sxth	r3, r3
 800832e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008330:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008334:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8008336:	f9b7 3000 	ldrsh.w	r3, [r7]
 800833a:	4598      	cmp	r8, r3
 800833c:	bfbd      	ittte	lt
 800833e:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 8008340:	1a5b      	sublt	r3, r3, r1
 8008342:	b29b      	uxthlt	r3, r3
 8008344:	2300      	movge	r3, #0
 8008346:	b219      	sxth	r1, r3
 8008348:	9107      	str	r1, [sp, #28]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800834a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800834e:	eb08 0406 	add.w	r4, r8, r6
 8008352:	428c      	cmp	r4, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008354:	fb06 fc02 	mul.w	ip, r6, r2
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008358:	bfc2      	ittt	gt
 800835a:	1c4e      	addgt	r6, r1, #1
 800835c:	990b      	ldrgt	r1, [sp, #44]	; 0x2c
 800835e:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008360:	45ab      	cmp	fp, r5
 8008362:	bfbd      	ittte	lt
 8008364:	990c      	ldrlt	r1, [sp, #48]	; 0x30
 8008366:	1a6d      	sublt	r5, r5, r1
 8008368:	b2ad      	uxthlt	r5, r5
 800836a:	2500      	movge	r5, #0
 800836c:	b229      	sxth	r1, r5
 800836e:	9106      	str	r1, [sp, #24]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008370:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8008374:	eb0e 040b 	add.w	r4, lr, fp
 8008378:	428c      	cmp	r4, r1
 800837a:	bfc3      	ittte	gt
 800837c:	9c0c      	ldrgt	r4, [sp, #48]	; 0x30
 800837e:	3101      	addgt	r1, #1
 8008380:	1b09      	subgt	r1, r1, r4
 8008382:	fa0f f18e 	sxthle.w	r1, lr
 8008386:	bfc8      	it	gt
 8008388:	b209      	sxthgt	r1, r1
 800838a:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800838c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8008390:	fb12 f401 	smulbb	r4, r2, r1
 8008394:	9a06      	ldr	r2, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008396:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008398:	fb0c 4402 	mla	r4, ip, r2, r4
    map_p += bit_ofs >> 3;
 800839c:	eb09 02d4 	add.w	r2, r9, r4, lsr #3
 80083a0:	920a      	str	r2, [sp, #40]	; 0x28
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80083a2:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 80083a4:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 80083a6:	1ab2      	subs	r2, r6, r2
 80083a8:	1af3      	subs	r3, r6, r3
 80083aa:	1a8a      	subs	r2, r1, r2
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	9907      	ldr	r1, [sp, #28]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	42b1      	cmp	r1, r6
 80083b4:	bfc8      	it	gt
 80083b6:	2300      	movgt	r3, #0
 80083b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80083bc:	9311      	str	r3, [sp, #68]	; 0x44
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80083be:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 80083c2:	ebab 0b03 	sub.w	fp, fp, r3
 80083c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80083c8:	460a      	mov	r2, r1
 80083ca:	9906      	ldr	r1, [sp, #24]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80083cc:	fb03 880b 	mla	r8, r3, fp, r8
 80083d0:	eba8 0000 	sub.w	r0, r8, r0
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80083d4:	fb03 2801 	mla	r8, r3, r1, r2
 80083d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083da:	4440      	add	r0, r8
 80083dc:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 80083e0:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 80083e4:	9313      	str	r3, [sp, #76]	; 0x4c
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 80083e6:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 80083ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ec:	9a06      	ldr	r2, [sp, #24]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	465f      	mov	r7, fp
 80083f2:	db0a      	blt.n	800840a <lv_draw_letter+0x232>
}
 80083f4:	b01d      	add	sp, #116	; 0x74
 80083f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 80083fa:	23ff      	movs	r3, #255	; 0xff
 80083fc:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	e739      	b.n	8008276 <lv_draw_letter+0x9e>
            bitmask_init  = 0xC0;
 8008402:	23c0      	movs	r3, #192	; 0xc0
 8008404:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp2_opa_table;
 8008406:	ab15      	add	r3, sp, #84	; 0x54
 8008408:	e735      	b.n	8008276 <lv_draw_letter+0x9e>
        bitmask = bitmask_init >> col_bit;
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800840c:	f8dd 801c 	ldr.w	r8, [sp, #28]
        bitmask = bitmask_init >> col_bit;
 8008410:	fa43 f904 	asr.w	r9, r3, r4
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008414:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008416:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800841a:	9310      	str	r3, [sp, #64]	; 0x40
 800841c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800841e:	f3c3 2307 	ubfx	r3, r3, #8, #8
        bitmask = bitmask_init >> col_bit;
 8008422:	fa5f f989 	uxtb.w	r9, r9
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008426:	9312      	str	r3, [sp, #72]	; 0x48
        for(col = col_start; col < col_end; col++) {
 8008428:	45b0      	cmp	r8, r6
 800842a:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 800842e:	db15      	blt.n	800845c <lv_draw_letter+0x284>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008430:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8008434:	9907      	ldr	r1, [sp, #28]
 8008436:	9d06      	ldr	r5, [sp, #24]
 8008438:	1b92      	subs	r2, r2, r6
 800843a:	440a      	add	r2, r1
 800843c:	fb13 f302 	smulbb	r3, r3, r2
 8008440:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008444:	b2a4      	uxth	r4, r4
        map_p += (col_bit >> 3);
 8008446:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 800844a:	3501      	adds	r5, #1
 800844c:	930a      	str	r3, [sp, #40]	; 0x28
 800844e:	b22b      	sxth	r3, r5
 8008450:	9306      	str	r3, [sp, #24]
 8008452:	9b11      	ldr	r3, [sp, #68]	; 0x44
        col_bit = col_bit & 0x7;
 8008454:	f004 0407 	and.w	r4, r4, #7
 8008458:	449b      	add	fp, r3
 800845a:	e7c6      	b.n	80083ea <lv_draw_letter+0x212>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 800845c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	f1c4 0108 	rsb	r1, r4, #8
 8008464:	ea09 0202 	and.w	r2, r9, r2
 8008468:	1ac9      	subs	r1, r1, r3
 800846a:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 800846c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8008470:	d021      	beq.n	80084b6 <lv_draw_letter+0x2de>
                if(opa == LV_OPA_COVER) {
 8008472:	9905      	ldr	r1, [sp, #20]
 8008474:	29ff      	cmp	r1, #255	; 0xff
 8008476:	d133      	bne.n	80084e0 <lv_draw_letter+0x308>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8008478:	2b08      	cmp	r3, #8
 800847a:	d001      	beq.n	8008480 <lv_draw_letter+0x2a8>
 800847c:	9b08      	ldr	r3, [sp, #32]
 800847e:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 8008480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	461d      	mov	r5, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d035      	beq.n	80084f6 <lv_draw_letter+0x31e>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800848a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800848e:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008490:	9202      	str	r2, [sp, #8]
 8008492:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008494:	9201      	str	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008496:	1acb      	subs	r3, r1, r3
 8008498:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 800849c:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800849e:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80084a0:	1a8a      	subs	r2, r1, r2
 80084a2:	9906      	ldr	r1, [sp, #24]
 80084a4:	440a      	add	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80084a6:	b212      	sxth	r2, r2
 80084a8:	9200      	str	r2, [sp, #0]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 80084aa:	4443      	add	r3, r8
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 80084ac:	b21b      	sxth	r3, r3
 80084ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084b0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80084b4:	47a8      	blx	r5
            if(col_bit < 8 - g.bpp) {
 80084b6:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 80084ba:	f1c3 0208 	rsb	r2, r3, #8
 80084be:	4294      	cmp	r4, r2
            vdb_buf_tmp++;
 80084c0:	f107 0704 	add.w	r7, r7, #4
            if(col_bit < 8 - g.bpp) {
 80084c4:	da2e      	bge.n	8008524 <lv_draw_letter+0x34c>
                col_bit += g.bpp;
 80084c6:	441c      	add	r4, r3
                bitmask = bitmask >> g.bpp;
 80084c8:	fa49 f903 	asr.w	r9, r9, r3
                col_bit += g.bpp;
 80084cc:	b2a4      	uxth	r4, r4
                bitmask = bitmask >> g.bpp;
 80084ce:	fa5f f989 	uxtb.w	r9, r9
 80084d2:	f108 0801 	add.w	r8, r8, #1
 80084d6:	fa0f f888 	sxth.w	r8, r8
 80084da:	e7a5      	b.n	8008428 <lv_draw_letter+0x250>
 80084dc:	080119f0 	.word	0x080119f0
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80084e0:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 80084e2:	bf1c      	itt	ne
 80084e4:	9b08      	ldrne	r3, [sp, #32]
 80084e6:	5c9a      	ldrbne	r2, [r3, r2]
 80084e8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80084ec:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80084f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80084f4:	e7c4      	b.n	8008480 <lv_draw_letter+0x2a8>
                } else if(vdb_buf_tmp->full != color.full) {
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80084fa:	428b      	cmp	r3, r1
 80084fc:	d0db      	beq.n	80084b6 <lv_draw_letter+0x2de>
                    if(px_opa > LV_OPA_MAX)
 80084fe:	2afb      	cmp	r2, #251	; 0xfb
 8008500:	d901      	bls.n	8008506 <lv_draw_letter+0x32e>
                        *vdb_buf_tmp = color;
 8008502:	6039      	str	r1, [r7, #0]
 8008504:	e7d7      	b.n	80084b6 <lv_draw_letter+0x2de>
                    else if(px_opa > LV_OPA_MIN) {
 8008506:	2a10      	cmp	r2, #16
 8008508:	d9d5      	bls.n	80084b6 <lv_draw_letter+0x2de>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800850a:	783b      	ldrb	r3, [r7, #0]
 800850c:	9202      	str	r2, [sp, #8]
 800850e:	78ba      	ldrb	r2, [r7, #2]
 8008510:	9201      	str	r2, [sp, #4]
 8008512:	787a      	ldrb	r2, [r7, #1]
 8008514:	9200      	str	r2, [sp, #0]
 8008516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008518:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800851a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800851c:	f7ff fc50 	bl	8007dc0 <lv_color_mix.isra.0>
 8008520:	6038      	str	r0, [r7, #0]
 8008522:	e7c8      	b.n	80084b6 <lv_draw_letter+0x2de>
                map_p++;
 8008524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                bitmask = bitmask_init;
 8008526:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                map_p++;
 800852a:	3301      	adds	r3, #1
 800852c:	930a      	str	r3, [sp, #40]	; 0x28
                col_bit = 0;
 800852e:	2400      	movs	r4, #0
 8008530:	e7cf      	b.n	80084d2 <lv_draw_letter+0x2fa>
 8008532:	bf00      	nop

08008534 <lv_draw_map>:
{
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b095      	sub	sp, #84	; 0x54
 800853a:	461d      	mov	r5, r3
 800853c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8008540:	930f      	str	r3, [sp, #60]	; 0x3c
 8008542:	4614      	mov	r4, r2
 8008544:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8008548:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800854c:	9310      	str	r3, [sp, #64]	; 0x40
    if(opa < LV_OPA_MIN) return;
 800854e:	2d0f      	cmp	r5, #15
{
 8008550:	4606      	mov	r6, r0
 8008552:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008554:	920a      	str	r2, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8008556:	d97d      	bls.n	8008654 <lv_draw_map+0x120>
 8008558:	b2da      	uxtb	r2, r3
 800855a:	920d      	str	r2, [sp, #52]	; 0x34
 800855c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008560:	2dfc      	cmp	r5, #252	; 0xfc
 8008562:	920c      	str	r2, [sp, #48]	; 0x30
 8008564:	f3c3 4307 	ubfx	r3, r3, #16, #8
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8008568:	460a      	mov	r2, r1
 800856a:	4601      	mov	r1, r0
 800856c:	a812      	add	r0, sp, #72	; 0x48
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800856e:	bf28      	it	cs
 8008570:	25ff      	movcs	r5, #255	; 0xff
 8008572:	930e      	str	r3, [sp, #56]	; 0x38
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8008574:	f003 fc0e 	bl	800bd94 <lv_area_intersect>
    if(union_ok == false) return;
 8008578:	2800      	cmp	r0, #0
 800857a:	d06b      	beq.n	8008654 <lv_draw_map+0x120>
    if(cords_p->y1 < masked_a.y1) {
 800857c:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8008580:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8008584:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8008588:	f9b6 2000 	ldrsh.w	r2, [r6]
 800858c:	4299      	cmp	r1, r3
 800858e:	f10a 0a01 	add.w	sl, sl, #1
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8008592:	bfb8      	it	lt
 8008594:	1a5b      	sublt	r3, r3, r1
 8008596:	ebaa 0a02 	sub.w	sl, sl, r2
 800859a:	bfb8      	it	lt
 800859c:	009b      	lsllt	r3, r3, #2
 800859e:	fa0f fa8a 	sxth.w	sl, sl
 80085a2:	bfb8      	it	lt
 80085a4:	fb0a 4403 	mlalt	r4, sl, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 80085a8:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 80085ac:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 80085ae:	bfc4      	itt	gt
 80085b0:	1a9a      	subgt	r2, r3, r2
 80085b2:	eb04 0482 	addgt.w	r4, r4, r2, lsl #2
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80085b6:	f7fe ffa5 	bl	8007504 <lv_refr_get_disp_refreshing>
 80085ba:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80085bc:	f003 fa68 	bl	800ba90 <lv_disp_get_buf>
 80085c0:	4683      	mov	fp, r0
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80085c2:	f8bd 604e 	ldrh.w	r6, [sp, #78]	; 0x4e
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80085c6:	f8bb e012 	ldrh.w	lr, [fp, #18]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80085ca:	8a01      	ldrh	r1, [r0, #16]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80085cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80085d0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 80085d4:	f8bd 704a 	ldrh.w	r7, [sp, #74]	; 0x4a
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 80085d8:	eba6 060e 	sub.w	r6, r6, lr
 80085dc:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
 80085e0:	f8bb 6014 	ldrh.w	r6, [fp, #20]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80085e4:	1a5b      	subs	r3, r3, r1
 80085e6:	3601      	adds	r6, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80085e8:	1a52      	subs	r2, r2, r1
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	1a71      	subs	r1, r6, r1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80085ee:	b292      	uxth	r2, r2
 80085f0:	b209      	sxth	r1, r1
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 80085f2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80085f6:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 80085f8:	b210      	sxth	r0, r2
 80085fa:	9105      	str	r1, [sp, #20]
 80085fc:	1a9a      	subs	r2, r3, r2
 80085fe:	b213      	sxth	r3, r2
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008600:	eba7 070e 	sub.w	r7, r7, lr
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008604:	9e05      	ldr	r6, [sp, #20]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008606:	f8db 1008 	ldr.w	r1, [fp, #8]
 800860a:	9309      	str	r3, [sp, #36]	; 0x24
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 800860c:	b23f      	sxth	r7, r7
 800860e:	ea4f 038a 	mov.w	r3, sl, lsl #2
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008612:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8008616:	930b      	str	r3, [sp, #44]	; 0x2c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008618:	fb06 0007 	mla	r0, r6, r7, r0
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 800861c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 800861e:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008622:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008626:	9104      	str	r1, [sp, #16]
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8008628:	2b00      	cmp	r3, #0
 800862a:	d151      	bne.n	80086d0 <lv_draw_map+0x19c>
 800862c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800862e:	2b00      	cmp	r3, #0
 8008630:	d14e      	bne.n	80086d0 <lv_draw_map+0x19c>
 8008632:	2dff      	cmp	r5, #255	; 0xff
 8008634:	d14c      	bne.n	80086d0 <lv_draw_map+0x19c>
 8008636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008638:	2b00      	cmp	r3, #0
 800863a:	d149      	bne.n	80086d0 <lv_draw_map+0x19c>
        if(disp->driver.set_px_cb) {
 800863c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008640:	b95b      	cbnz	r3, 800865a <lv_draw_map+0x126>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008644:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008648:	ea4f 0983 	mov.w	r9, r3, lsl #2
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800864c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8008650:	42bb      	cmp	r3, r7
 8008652:	da26      	bge.n	80086a2 <lv_draw_map+0x16e>
}
 8008654:	b015      	add	sp, #84	; 0x54
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800865a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800865e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8008662:	42bb      	cmp	r3, r7
 8008664:	dbf6      	blt.n	8008654 <lv_draw_map+0x120>
 8008666:	f04f 0900 	mov.w	r9, #0
 800866a:	e011      	b.n	8008690 <lv_draw_map+0x15c>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 800866c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8008670:	f854 2029 	ldr.w	r2, [r4, r9, lsl #2]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	9502      	str	r5, [sp, #8]
 8008678:	9700      	str	r7, [sp, #0]
 800867a:	444b      	add	r3, r9
 800867c:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8008680:	9a05      	ldr	r2, [sp, #20]
 8008682:	f8db 1008 	ldr.w	r1, [fp, #8]
 8008686:	b21b      	sxth	r3, r3
 8008688:	4640      	mov	r0, r8
 800868a:	47b0      	blx	r6
 800868c:	f109 0901 	add.w	r9, r9, #1
                for(col = 0; col < map_useful_w; col++) {
 8008690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008692:	fa0f f389 	sxth.w	r3, r9
 8008696:	4293      	cmp	r3, r2
 8008698:	dbe8      	blt.n	800866c <lv_draw_map+0x138>
 800869a:	3701      	adds	r7, #1
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800869c:	4454      	add	r4, sl
 800869e:	b23f      	sxth	r7, r7
 80086a0:	e7dd      	b.n	800865e <lv_draw_map+0x12a>
                if(disp->driver.gpu_blend_cb == false) {
 80086a2:	f8d8 601c 	ldr.w	r6, [r8, #28]
 80086a6:	b966      	cbnz	r6, 80086c2 <lv_draw_map+0x18e>
        memcpy(dest, src, length * sizeof(lv_color_t));
 80086a8:	464a      	mov	r2, r9
 80086aa:	4621      	mov	r1, r4
 80086ac:	9804      	ldr	r0, [sp, #16]
 80086ae:	f005 fe57 	bl	800e360 <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 80086b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b4:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	3701      	adds	r7, #1
 80086ba:	4453      	add	r3, sl
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	b23f      	sxth	r7, r7
 80086c0:	e7c4      	b.n	800864c <lv_draw_map+0x118>
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 80086c2:	9500      	str	r5, [sp, #0]
 80086c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c6:	9904      	ldr	r1, [sp, #16]
 80086c8:	4622      	mov	r2, r4
 80086ca:	4640      	mov	r0, r8
 80086cc:	47b0      	blx	r6
 80086ce:	e7f0      	b.n	80086b2 <lv_draw_map+0x17e>
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80086d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80086e0:	f7ff fb6e 	bl	8007dc0 <lv_color_mix.isra.0>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 80086e4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80086e8:	9306      	str	r3, [sp, #24]
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80086ea:	f04f 0900 	mov.w	r9, #0
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80086ee:	9b05      	ldr	r3, [sp, #20]
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80086f0:	f36f 0907 	bfc	r9, #0, #8
 80086f4:	f36f 290f 	bfc	r9, #8, #8
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80086f8:	009b      	lsls	r3, r3, #2
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 80086fa:	f6cf 7900 	movt	r9, #65280	; 0xff00
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80086fe:	4682      	mov	sl, r0
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008700:	9311      	str	r3, [sp, #68]	; 0x44
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008702:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8008706:	9a06      	ldr	r2, [sp, #24]
 8008708:	4293      	cmp	r3, r2
 800870a:	dba3      	blt.n	8008654 <lv_draw_map+0x120>
 800870c:	2300      	movs	r3, #0
 800870e:	9f04      	ldr	r7, [sp, #16]
 8008710:	9408      	str	r4, [sp, #32]
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	e04b      	b.n	80087ae <lv_draw_map+0x27a>
                if(alpha_byte) {
 8008716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d039      	beq.n	8008790 <lv_draw_map+0x25c>
                    px_color = *((lv_color_t *)px_color_p);
 800871c:	9b08      	ldr	r3, [sp, #32]
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 800871e:	78de      	ldrb	r6, [r3, #3]
                    px_color = *((lv_color_t *)px_color_p);
 8008720:	6818      	ldr	r0, [r3, #0]
                    if(px_opa == LV_OPA_TRANSP)
 8008722:	2e00      	cmp	r6, #0
 8008724:	d03c      	beq.n	80087a0 <lv_draw_map+0x26c>
                    else if(px_opa != LV_OPA_COVER)
 8008726:	2eff      	cmp	r6, #255	; 0xff
 8008728:	d034      	beq.n	8008794 <lv_draw_map+0x260>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 800872a:	fb16 f605 	smulbb	r6, r6, r5
 800872e:	f3c6 2607 	ubfx	r6, r6, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8008732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008734:	b11b      	cbz	r3, 800873e <lv_draw_map+0x20a>
 8008736:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800873a:	4298      	cmp	r0, r3
 800873c:	d030      	beq.n	80087a0 <lv_draw_map+0x26c>
                if(recolor_opa != LV_OPA_TRANSP) {
 800873e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d053      	beq.n	80087ec <lv_draw_map+0x2b8>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8008744:	4581      	cmp	r9, r0
 8008746:	d00e      	beq.n	8008766 <lv_draw_map+0x232>
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8008748:	9302      	str	r3, [sp, #8]
 800874a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008754:	9300      	str	r3, [sp, #0]
                        last_img_px  = px_color;
 8008756:	4681      	mov	r9, r0
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8008758:	b2c3      	uxtb	r3, r0
 800875a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800875c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800875e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008760:	f7ff fb2e 	bl	8007dc0 <lv_color_mix.isra.0>
 8008764:	4682      	mov	sl, r0
                    if(disp->driver.set_px_cb) {
 8008766:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800876a:	469e      	mov	lr, r3
 800876c:	b1a3      	cbz	r3, 8008798 <lv_draw_map+0x264>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800876e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	9602      	str	r6, [sp, #8]
 8008776:	4413      	add	r3, r2
 8008778:	f8cd a004 	str.w	sl, [sp, #4]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800877c:	9a06      	ldr	r2, [sp, #24]
 800877e:	9200      	str	r2, [sp, #0]
 8008780:	b21b      	sxth	r3, r3
 8008782:	9a05      	ldr	r2, [sp, #20]
 8008784:	f8db 1008 	ldr.w	r1, [fp, #8]
 8008788:	4640      	mov	r0, r8
 800878a:	4676      	mov	r6, lr
 800878c:	47b0      	blx	r6
 800878e:	e007      	b.n	80087a0 <lv_draw_map+0x26c>
                    px_color = *((lv_color_t *)px_color_p);
 8008790:	9b08      	ldr	r3, [sp, #32]
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	462e      	mov	r6, r5
 8008796:	e7cc      	b.n	8008732 <lv_draw_map+0x1fe>
                        if(opa_result == LV_OPA_COVER)
 8008798:	2eff      	cmp	r6, #255	; 0xff
 800879a:	d118      	bne.n	80087ce <lv_draw_map+0x29a>
                            vdb_buf_tmp[col].full = recolored_px.full;
 800879c:	f8c7 a000 	str.w	sl, [r7]
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	3301      	adds	r3, #1
 80087a4:	9307      	str	r3, [sp, #28]
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	3304      	adds	r3, #4
 80087aa:	3704      	adds	r7, #4
 80087ac:	9308      	str	r3, [sp, #32]
            for(col = 0; col < map_useful_w; col++) {
 80087ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80087b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087b4:	429a      	cmp	r2, r3
 80087b6:	dcae      	bgt.n	8008716 <lv_draw_map+0x1e2>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 80087b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80087ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
            map_p += map_width * px_size_byte; /*Next row on the map*/
 80087bc:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	4413      	add	r3, r2
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	3301      	adds	r3, #1
 80087c8:	b21b      	sxth	r3, r3
 80087ca:	9306      	str	r3, [sp, #24]
 80087cc:	e799      	b.n	8008702 <lv_draw_map+0x1ce>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 80087ce:	783b      	ldrb	r3, [r7, #0]
 80087d0:	9602      	str	r6, [sp, #8]
 80087d2:	78ba      	ldrb	r2, [r7, #2]
 80087d4:	9201      	str	r2, [sp, #4]
 80087d6:	787a      	ldrb	r2, [r7, #1]
 80087d8:	9200      	str	r2, [sp, #0]
 80087da:	f3ca 2107 	ubfx	r1, sl, #8, #8
 80087de:	f3ca 4207 	ubfx	r2, sl, #16, #8
 80087e2:	fa5f f08a 	uxtb.w	r0, sl
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 80087e6:	f7ff faeb 	bl	8007dc0 <lv_color_mix.isra.0>
 80087ea:	e00c      	b.n	8008806 <lv_draw_map+0x2d2>
                    if(disp->driver.set_px_cb) {
 80087ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80087f0:	469e      	mov	lr, r3
 80087f2:	b133      	cbz	r3, 8008802 <lv_draw_map+0x2ce>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 80087f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80087f8:	9a07      	ldr	r2, [sp, #28]
 80087fa:	9602      	str	r6, [sp, #8]
 80087fc:	4413      	add	r3, r2
 80087fe:	9001      	str	r0, [sp, #4]
 8008800:	e7bc      	b.n	800877c <lv_draw_map+0x248>
                        if(opa_result == LV_OPA_COVER)
 8008802:	2eff      	cmp	r6, #255	; 0xff
 8008804:	d101      	bne.n	800880a <lv_draw_map+0x2d6>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8008806:	6038      	str	r0, [r7, #0]
 8008808:	e7ca      	b.n	80087a0 <lv_draw_map+0x26c>
 800880a:	783b      	ldrb	r3, [r7, #0]
 800880c:	9602      	str	r6, [sp, #8]
 800880e:	78ba      	ldrb	r2, [r7, #2]
 8008810:	9201      	str	r2, [sp, #4]
 8008812:	787a      	ldrb	r2, [r7, #1]
 8008814:	9200      	str	r2, [sp, #0]
 8008816:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800881a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800881e:	b2c0      	uxtb	r0, r0
 8008820:	e7e1      	b.n	80087e6 <lv_draw_map+0x2b2>
	...

08008824 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8008824:	3804      	subs	r0, #4
 8008826:	b2c0      	uxtb	r0, r0
 8008828:	280a      	cmp	r0, #10
 800882a:	bf9a      	itte	ls
 800882c:	4b01      	ldrls	r3, [pc, #4]	; (8008834 <lv_img_color_format_get_px_size+0x10>)
 800882e:	5c18      	ldrbls	r0, [r3, r0]
 8008830:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8008832:	4770      	bx	lr
 8008834:	080e4c1c 	.word	0x080e4c1c

08008838 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 8008838:	280a      	cmp	r0, #10
 800883a:	d808      	bhi.n	800884e <lv_img_color_format_is_chroma_keyed+0x16>
 800883c:	2301      	movs	r3, #1
 800883e:	fa03 f000 	lsl.w	r0, r3, r0
 8008842:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 8008846:	bf14      	ite	ne
 8008848:	4618      	movne	r0, r3
 800884a:	2000      	moveq	r0, #0
 800884c:	4770      	bx	lr
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 800884e:	2000      	movs	r0, #0
    }

    return is_chroma_keyed;
}
 8008850:	4770      	bx	lr

08008852 <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 8008852:	3802      	subs	r0, #2
 8008854:	b2c0      	uxtb	r0, r0
 8008856:	280c      	cmp	r0, #12
 8008858:	d809      	bhi.n	800886e <lv_img_color_format_has_alpha+0x1c>
 800885a:	2301      	movs	r3, #1
 800885c:	fa03 f000 	lsl.w	r0, r3, r0
 8008860:	f641 6309 	movw	r3, #7689	; 0x1e09
 8008864:	4218      	tst	r0, r3
 8008866:	bf14      	ite	ne
 8008868:	2001      	movne	r0, #1
 800886a:	2000      	moveq	r0, #0
 800886c:	4770      	bx	lr
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 800886e:	2000      	movs	r0, #0
    }

    return has_alpha;
}
 8008870:	4770      	bx	lr
	...

08008874 <lv_draw_img>:
{
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	b093      	sub	sp, #76	; 0x4c
 800887a:	4604      	mov	r4, r0
 800887c:	460f      	mov	r7, r1
 800887e:	469a      	mov	sl, r3
 8008880:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
    if(src == NULL) {
 8008884:	4615      	mov	r5, r2
 8008886:	b962      	cbnz	r2, 80088a2 <lv_draw_img+0x2e>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8008888:	23ff      	movs	r3, #255	; 0xff
 800888a:	4a64      	ldr	r2, [pc, #400]	; (8008a1c <lv_draw_img+0x1a8>)
 800888c:	f000 fb7a 	bl	8008f84 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8008890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008894:	9505      	str	r5, [sp, #20]
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	9502      	str	r5, [sp, #8]
 800889c:	9501      	str	r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800889e:	4b60      	ldr	r3, [pc, #384]	; (8008a20 <lv_draw_img+0x1ac>)
 80088a0:	e036      	b.n	8008910 <lv_draw_img+0x9c>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 80088a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80088a6:	4602      	mov	r2, r0
 80088a8:	4640      	mov	r0, r8
 80088aa:	f003 fa73 	bl	800bd94 <lv_area_intersect>
    if(union_ok == false) {
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d048      	beq.n	8008944 <lv_draw_img+0xd0>
 80088b2:	f89a 6045 	ldrb.w	r6, [sl, #69]	; 0x45
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 80088b6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80088ba:	bf18      	it	ne
 80088bc:	fb06 f609 	mulne.w	r6, r6, r9
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80088c0:	4651      	mov	r1, sl
 80088c2:	4628      	mov	r0, r5
    lv_opa_t opa =
 80088c4:	bf18      	it	ne
 80088c6:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80088ca:	f002 faeb 	bl	800aea4 <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 80088ce:	4681      	mov	r9, r0
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d079      	beq.n	80089c8 <lv_draw_img+0x154>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 80088d4:	7c02      	ldrb	r2, [r0, #16]
 80088d6:	f002 021f 	and.w	r2, r2, #31
 80088da:	4610      	mov	r0, r2
 80088dc:	f7ff ffac 	bl	8008838 <lv_img_color_format_is_chroma_keyed>
 80088e0:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80088e2:	4610      	mov	r0, r2
 80088e4:	f7ff ffb5 	bl	8008852 <lv_img_color_format_has_alpha>

    if(cdsc->dec_dsc.error_msg != NULL) {
 80088e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80088ec:	9008      	str	r0, [sp, #32]
    if(cdsc->dec_dsc.error_msg != NULL) {
 80088ee:	b1bb      	cbz	r3, 8008920 <lv_draw_img+0xac>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80088f0:	23ff      	movs	r3, #255	; 0xff
 80088f2:	4a4a      	ldr	r2, [pc, #296]	; (8008a1c <lv_draw_img+0x1a8>)
 80088f4:	4639      	mov	r1, r7
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 fb44 	bl	8008f84 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 80088fc:	2300      	movs	r3, #0
 80088fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008902:	9305      	str	r3, [sp, #20]
 8008904:	9204      	str	r2, [sp, #16]
 8008906:	9203      	str	r2, [sp, #12]
 8008908:	9302      	str	r3, [sp, #8]
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	f8d9 301c 	ldr.w	r3, [r9, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4a42      	ldr	r2, [pc, #264]	; (8008a1c <lv_draw_img+0x1a8>)
 8008914:	23ff      	movs	r3, #255	; 0xff
 8008916:	4639      	mov	r1, r7
 8008918:	4620      	mov	r0, r4
 800891a:	f000 f8a9 	bl	8008a70 <lv_draw_label>
        return;
 800891e:	e011      	b.n	8008944 <lv_draw_img+0xd0>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8008920:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8008924:	b18a      	cbz	r2, 800894a <lv_draw_img+0xd6>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 8008926:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	9b07      	ldr	r3, [sp, #28]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4639      	mov	r1, r7
 800893c:	4633      	mov	r3, r6
 800893e:	4620      	mov	r0, r4
 8008940:	f7ff fdf8 	bl	8008534 <lv_draw_map>
}
 8008944:	b013      	add	sp, #76	; 0x4c
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800894a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800894e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8008952:	920d      	str	r2, [sp, #52]	; 0x34
 8008954:	3501      	adds	r5, #1
 8008956:	1aed      	subs	r5, r5, r3
 8008958:	b22d      	sxth	r5, r5
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 800895a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800895e:	f7ff f9eb 	bl	8007d38 <lv_draw_get_buf>
 8008962:	9009      	str	r0, [sp, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 8008964:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008968:	ab10      	add	r3, sp, #64	; 0x40
 800896a:	e883 0003 	stmia.w	r3, {r0, r1}

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 800896e:	4618      	mov	r0, r3
 8008970:	2101      	movs	r1, #1
 8008972:	930c      	str	r3, [sp, #48]	; 0x30
 8008974:	f003 f9fb 	bl	800bd6e <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8008978:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800897c:	8820      	ldrh	r0, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 800897e:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
 8008982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t x = mask_com.x1 - coords->x1;
 8008984:	1a09      	subs	r1, r1, r0
 8008986:	b20b      	sxth	r3, r1
        lv_coord_t y = mask_com.y1 - coords->y1;
 8008988:	8861      	ldrh	r1, [r4, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 800898a:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 800898c:	ebab 0101 	sub.w	r1, fp, r1
 8008990:	b28b      	uxth	r3, r1
 8008992:	930b      	str	r3, [sp, #44]	; 0x2c
 8008994:	4690      	mov	r8, r2
 8008996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8008998:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800899c:	fa1f f388 	uxth.w	r3, r8
 80089a0:	441a      	add	r2, r3
 80089a2:	445b      	add	r3, fp
 80089a4:	b21b      	sxth	r3, r3
 80089a6:	4299      	cmp	r1, r3
 80089a8:	b212      	sxth	r2, r2
 80089aa:	dbcb      	blt.n	8008944 <lv_draw_img+0xd0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089b2:	462b      	mov	r3, r5
 80089b4:	4648      	mov	r0, r9
 80089b6:	f002 fe41 	bl	800b63c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 80089ba:	2801      	cmp	r0, #1
 80089bc:	f108 0801 	add.w	r8, r8, #1
 80089c0:	d011      	beq.n	80089e6 <lv_draw_img+0x172>
                lv_img_decoder_close(&cdsc->dec_dsc);
 80089c2:	4648      	mov	r0, r9
 80089c4:	f002 fe4a 	bl	800b65c <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80089c8:	23ff      	movs	r3, #255	; 0xff
 80089ca:	4a14      	ldr	r2, [pc, #80]	; (8008a1c <lv_draw_img+0x1a8>)
 80089cc:	4639      	mov	r1, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fad8 	bl	8008f84 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80089d4:	2300      	movs	r3, #0
 80089d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	9204      	str	r2, [sp, #16]
 80089de:	9203      	str	r2, [sp, #12]
 80089e0:	9302      	str	r3, [sp, #8]
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	e75b      	b.n	800889e <lv_draw_img+0x2a>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80089e6:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089fe:	4633      	mov	r3, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7ff fd97 	bl	8008534 <lv_draw_map>
            line.y1++;
 8008a06:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            line.y2++;
 8008a10:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8008a14:	3301      	adds	r3, #1
 8008a16:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8008a1a:	e7bc      	b.n	8008996 <lv_draw_img+0x122>
 8008a1c:	20015a2c 	.word	0x20015a2c
 8008a20:	080e4c27 	.word	0x080e4c27

08008a24 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8008a24:	b150      	cbz	r0, 8008a3c <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8008a26:	7803      	ldrb	r3, [r0, #0]
 8008a28:	f1a3 0220 	sub.w	r2, r3, #32
 8008a2c:	2a5f      	cmp	r2, #95	; 0x5f
 8008a2e:	d907      	bls.n	8008a40 <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 8008a30:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8008a34:	bf14      	ite	ne
 8008a36:	2002      	movne	r0, #2
 8008a38:	2000      	moveq	r0, #0
 8008a3a:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8008a3c:	2003      	movs	r0, #3
 8008a3e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8008a40:	2001      	movs	r0, #1
}
 8008a42:	4770      	bx	lr

08008a44 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8008a44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b09      	cmp	r3, #9
 8008a4c:	d90a      	bls.n	8008a64 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8008a4e:	2860      	cmp	r0, #96	; 0x60
 8008a50:	bf84      	itt	hi
 8008a52:	3820      	subhi	r0, #32
 8008a54:	b2c0      	uxtbhi	r0, r0
 8008a56:	3841      	subs	r0, #65	; 0x41
 8008a58:	b2c0      	uxtb	r0, r0
 8008a5a:	2805      	cmp	r0, #5
 8008a5c:	d804      	bhi.n	8008a68 <hex_char_to_num+0x24>
 8008a5e:	4b03      	ldr	r3, [pc, #12]	; (8008a6c <hex_char_to_num+0x28>)
 8008a60:	5c18      	ldrb	r0, [r3, r0]
 8008a62:	4770      	bx	lr
 8008a64:	4618      	mov	r0, r3
 8008a66:	4770      	bx	lr
 8008a68:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 8008a6a:	4770      	bx	lr
 8008a6c:	080e4c2f 	.word	0x080e4c2f

08008a70 <lv_draw_label>:
{
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	b0ab      	sub	sp, #172	; 0xac
 8008a76:	4605      	mov	r5, r0
 8008a78:	f89d b0d4 	ldrb.w	fp, [sp, #212]	; 0xd4
 8008a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7e:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 8008a82:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8008a84:	f01b 0f02 	tst.w	fp, #2
{
 8008a88:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 8008a8c:	9107      	str	r1, [sp, #28]
 8008a8e:	4614      	mov	r4, r2
 8008a90:	930e      	str	r3, [sp, #56]	; 0x38
 8008a92:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
    const lv_font_t * font = style->text.font;
 8008a96:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8008a9a:	f040 8095 	bne.w	8008bc8 <lv_draw_label+0x158>
    return area_p->x2 - area_p->x1 + 1;
 8008a9e:	8883      	ldrh	r3, [r0, #4]
 8008aa0:	8802      	ldrh	r2, [r0, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8008aa8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
        w = p.x;
 8008aaa:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8008aac:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	9305      	str	r3, [sp, #20]
 8008ab6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008aba:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 8008abc:	882b      	ldrh	r3, [r5, #0]
 8008abe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    if(offset != NULL) {
 8008ac2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    pos.y = coords->y1;
 8008ac4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8008ac8:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(offset != NULL) {
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 81ea 	beq.w	8008ea6 <lv_draw_label+0x436>
        x_ofs = offset->x;
 8008ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad6:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 8008ad8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008ada:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 8008ade:	18d1      	adds	r1, r2, r3
 8008ae0:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8008ae4:	f1b8 0f00 	cmp.w	r8, #0
 8008ae8:	f000 81e3 	beq.w	8008eb2 <lv_draw_label+0x442>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 81e0 	bne.w	8008eb2 <lv_draw_label+0x442>
 8008af2:	2a00      	cmp	r2, #0
 8008af4:	f280 81dd 	bge.w	8008eb2 <lv_draw_label+0x442>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8008af8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	9a06      	ldr	r2, [sp, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfb8      	it	lt
 8008b04:	425b      	neglt	r3, r3
 8008b06:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8008b0a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8008b0e:	bfc4      	itt	gt
 8008b10:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 8008b14:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 8008b18:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 8008b1c:	2f00      	cmp	r7, #0
 8008b1e:	f2c0 81c8 	blt.w	8008eb2 <lv_draw_label+0x442>
        pos.y += hint->y;
 8008b22:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8008b26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008b30:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008b32:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8008b36:	f8cd b000 	str.w	fp, [sp]
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	4651      	mov	r1, sl
 8008b3e:	4438      	add	r0, r7
 8008b40:	f003 ff0a 	bl	800c958 <lv_txt_get_next_line>
 8008b44:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 8008b46:	9a06      	ldr	r2, [sp, #24]
 8008b48:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8008b4c:	4413      	add	r3, r2
 8008b4e:	9a07      	ldr	r2, [sp, #28]
 8008b50:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	db4c      	blt.n	8008bf2 <lv_draw_label+0x182>
    if(flag & LV_TXT_FLAG_CENTER) {
 8008b58:	f01b 0304 	ands.w	r3, fp, #4
 8008b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b5e:	d076      	beq.n	8008c4e <lv_draw_label+0x1de>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8008b60:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008b62:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8008b66:	f8cd b000 	str.w	fp, [sp]
 8008b6a:	1bf1      	subs	r1, r6, r7
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	4438      	add	r0, r7
 8008b72:	f003 ff79 	bl	800ca68 <lv_txt_get_width>
 8008b76:	88ab      	ldrh	r3, [r5, #4]
 8008b78:	882a      	ldrh	r2, [r5, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	1a18      	subs	r0, r3, r0
 8008b82:	2302      	movs	r3, #2
 8008b84:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 8008b88:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008b8c:	4418      	add	r0, r3
 8008b8e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8008b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8008b94:	49b7      	ldr	r1, [pc, #732]	; (8008e74 <lv_draw_label+0x404>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8008b96:	2bff      	cmp	r3, #255	; 0xff
 8008b98:	bf18      	it	ne
 8008b9a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8008b9c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008ba0:	bf1c      	itt	ne
 8008ba2:	4353      	mulne	r3, r2
 8008ba4:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8008ba8:	a816      	add	r0, sp, #88	; 0x58
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8008bac:	f7fe fe66 	bl	800787c <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8008bb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008bb2:	9318      	str	r3, [sp, #96]	; 0x60
 8008bb4:	9317      	str	r3, [sp, #92]	; 0x5c
    uint16_t par_start = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 8008bba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008bbc:	5ddb      	ldrb	r3, [r3, r7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d15a      	bne.n	8008c78 <lv_draw_label+0x208>
}
 8008bc2:	b02b      	add	sp, #172	; 0xac
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8008bc8:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	; 0x38
 8008bcc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008bce:	f8cd b008 	str.w	fp, [sp, #8]
 8008bd2:	f647 4218 	movw	r2, #31768	; 0x7c18
 8008bd6:	9201      	str	r2, [sp, #4]
 8008bd8:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	a816      	add	r0, sp, #88	; 0x58
 8008be0:	4652      	mov	r2, sl
 8008be2:	f003 ff89 	bl	800caf8 <lv_txt_get_size>
        w = p.x;
 8008be6:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8008bea:	e75d      	b.n	8008aa8 <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 8008bec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008bee:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf0:	e77f      	b.n	8008af2 <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008bf2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008bf4:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8008bf8:	f8cd b000 	str.w	fp, [sp]
 8008bfc:	4433      	add	r3, r6
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	4651      	mov	r1, sl
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	9808      	ldr	r0, [sp, #32]
 8008c06:	f003 fea7 	bl	800c958 <lv_txt_get_next_line>
        pos.y += line_height;
 8008c0a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8008c0e:	9a05      	ldr	r2, [sp, #20]
 8008c10:	4413      	add	r3, r2
 8008c12:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008c14:	4430      	add	r0, r6
        pos.y += line_height;
 8008c16:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8008c1a:	f1b8 0f00 	cmp.w	r8, #0
 8008c1e:	d00f      	beq.n	8008c40 <lv_draw_label+0x1d0>
 8008c20:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8008c24:	db0c      	blt.n	8008c40 <lv_draw_label+0x1d0>
 8008c26:	f8d8 2000 	ldr.w	r2, [r8]
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	da08      	bge.n	8008c40 <lv_draw_label+0x1d0>
            hint->y          = pos.y - coords->y1;
 8008c2e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 8008c32:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 8008c36:	1a9b      	subs	r3, r3, r2
 8008c38:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 8008c3c:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	4637      	mov	r7, r6
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0bb      	beq.n	8008bc2 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	e77b      	b.n	8008b46 <lv_draw_label+0xd6>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 8008c4e:	f01b 0f08 	tst.w	fp, #8
 8008c52:	d09e      	beq.n	8008b92 <lv_draw_label+0x122>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8008c54:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008c56:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8008c5a:	f8cd b000 	str.w	fp, [sp]
 8008c5e:	1bf1      	subs	r1, r6, r7
 8008c60:	4652      	mov	r2, sl
 8008c62:	b289      	uxth	r1, r1
 8008c64:	4438      	add	r0, r7
 8008c66:	f003 feff 	bl	800ca68 <lv_txt_get_width>
 8008c6a:	88ab      	ldrh	r3, [r5, #4]
 8008c6c:	882a      	ldrh	r2, [r5, #0]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	1a18      	subs	r0, r3, r0
 8008c76:	e787      	b.n	8008b88 <lv_draw_label+0x118>
        if(offset != NULL) {
 8008c78:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008c7a:	b12b      	cbz	r3, 8008c88 <lv_draw_label+0x218>
            pos.x += x_ofs;
 8008c7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c82:	4413      	add	r3, r2
 8008c84:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008c88:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 8008c8c:	9713      	str	r7, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008c8e:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 8008c90:	2700      	movs	r7, #0
        while(i < line_end) {
 8008c92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c94:	429e      	cmp	r6, r3
 8008c96:	d83a      	bhi.n	8008d0e <lv_draw_label+0x29e>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008c98:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008c9a:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8008c9e:	f8cd b000 	str.w	fp, [sp]
 8008ca2:	199f      	adds	r7, r3, r6
 8008ca4:	4651      	mov	r1, sl
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f003 fe55 	bl	800c958 <lv_txt_get_next_line>
        pos.x = coords->x1;
 8008cae:	882b      	ldrh	r3, [r5, #0]
 8008cb0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(flag & LV_TXT_FLAG_CENTER) {
 8008cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80df 	beq.w	8008e80 <lv_draw_label+0x410>
            line_width =
 8008cc2:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8008cc6:	f8cd b000 	str.w	fp, [sp]
 8008cca:	4652      	mov	r2, sl
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f003 fecb 	bl	800ca68 <lv_txt_get_width>
 8008cd2:	88ab      	ldrh	r3, [r5, #4]
 8008cd4:	882a      	ldrh	r2, [r5, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	1a18      	subs	r0, r3, r0
 8008cde:	2302      	movs	r3, #2
 8008ce0:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 8008ce4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008ce8:	4418      	add	r0, r3
 8008cea:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 8008cee:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8008cf2:	9a05      	ldr	r2, [sp, #20]
 8008cf4:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 8008cf6:	9a07      	ldr	r2, [sp, #28]
 8008cf8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 8008cfc:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 8008cfe:	429a      	cmp	r2, r3
        pos.y += line_height;
 8008d00:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8008d04:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 8008d06:	f6ff af5c 	blt.w	8008bc2 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008d0a:	4646      	mov	r6, r8
 8008d0c:	e755      	b.n	8008bba <lv_draw_label+0x14a>
            letter      = lv_txt_encoded_next(txt, &i);
 8008d0e:	4b5a      	ldr	r3, [pc, #360]	; (8008e78 <lv_draw_label+0x408>)
 8008d10:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	a913      	add	r1, sp, #76	; 0x4c
 8008d16:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8008d18:	9a34      	ldr	r2, [sp, #208]	; 0xd0
            letter      = lv_txt_encoded_next(txt, &i);
 8008d1a:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8008d1c:	4b56      	ldr	r3, [pc, #344]	; (8008e78 <lv_draw_label+0x408>)
 8008d1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4410      	add	r0, r2
 8008d24:	2100      	movs	r1, #0
 8008d26:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8008d2a:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d051      	beq.n	8008dd4 <lv_draw_label+0x364>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8008d30:	9b06      	ldr	r3, [sp, #24]
 8008d32:	2b23      	cmp	r3, #35	; 0x23
 8008d34:	d10c      	bne.n	8008d50 <lv_draw_label+0x2e0>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8008d36:	b927      	cbnz	r7, 8008d42 <lv_draw_label+0x2d2>
                        par_start = i;
 8008d38:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8008d3c:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 8008d3e:	2701      	movs	r7, #1
                        continue;
 8008d40:	e7a7      	b.n	8008c92 <lv_draw_label+0x222>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8008d42:	2f01      	cmp	r7, #1
 8008d44:	f000 80b7 	beq.w	8008eb6 <lv_draw_label+0x446>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 8008d48:	2f02      	cmp	r7, #2
 8008d4a:	d145      	bne.n	8008dd8 <lv_draw_label+0x368>
                        cmd_state = CMD_STATE_WAIT;
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	e7a0      	b.n	8008c92 <lv_draw_label+0x222>
                if(cmd_state == CMD_STATE_PAR) {
 8008d50:	2f01      	cmp	r7, #1
 8008d52:	d13f      	bne.n	8008dd4 <lv_draw_label+0x364>
                    if(letter == ' ') {
 8008d54:	9b06      	ldr	r3, [sp, #24]
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d19b      	bne.n	8008c92 <lv_draw_label+0x222>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8008d5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d5c:	9a08      	ldr	r2, [sp, #32]
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	d134      	bne.n	8008dce <lv_draw_label+0x35e>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8008d64:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8008d66:	4413      	add	r3, r2
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	9014      	str	r0, [sp, #80]	; 0x50
 8008d6c:	0e01      	lsrs	r1, r0, #24
 8008d6e:	889b      	ldrh	r3, [r3, #4]
 8008d70:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8008d74:	0c07      	lsrs	r7, r0, #16
 8008d76:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008d7a:	b2c0      	uxtb	r0, r0
 8008d7c:	f7ff fe62 	bl	8008a44 <hex_char_to_num>
 8008d80:	4602      	mov	r2, r0
 8008d82:	fa5f f088 	uxtb.w	r0, r8
 8008d86:	f7ff fe5d 	bl	8008a44 <hex_char_to_num>
 8008d8a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8008d8e:	b2f8      	uxtb	r0, r7
 8008d90:	f7ff fe58 	bl	8008a44 <hex_char_to_num>
 8008d94:	4607      	mov	r7, r0
 8008d96:	b2c8      	uxtb	r0, r1
 8008d98:	f7ff fe54 	bl	8008a44 <hex_char_to_num>
 8008d9c:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8008da0:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8008da4:	f7ff fe4e 	bl	8008a44 <hex_char_to_num>
 8008da8:	4607      	mov	r7, r0
 8008daa:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8008dae:	f7ff fe49 	bl	8008a44 <hex_char_to_num>
 8008db2:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8008db6:	f360 0907 	bfi	r9, r0, #0, #8
 8008dba:	f361 290f 	bfi	r9, r1, #8, #8
 8008dbe:	f362 4917 	bfi	r9, r2, #16, #8
 8008dc2:	f049 497f 	orr.w	r9, r9, #4278190080	; 0xff000000
 8008dc6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008dca:	2702      	movs	r7, #2
 8008dcc:	e761      	b.n	8008c92 <lv_draw_label+0x222>
                            recolor.full = style->text.color.full;
 8008dce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd2:	e7fa      	b.n	8008dca <lv_draw_label+0x35a>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008dd4:	2f02      	cmp	r7, #2
 8008dd6:	d04a      	beq.n	8008e6e <lv_draw_label+0x3fe>
            lv_color_t color = style->text.color;
 8008dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008dda:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008ddc:	930c      	str	r3, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008dde:	4650      	mov	r0, sl
 8008de0:	f002 fc78 	bl	800b6d4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008de4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008de6:	b203      	sxth	r3, r0
 8008de8:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dee:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008df0:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008df2:	d026      	beq.n	8008e42 <lv_draw_label+0x3d2>
 8008df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d023      	beq.n	8008e42 <lv_draw_label+0x3d2>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <lv_draw_label+0x40c>)
 8008dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008e02:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 8008e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e06:	4298      	cmp	r0, r3
 8008e08:	dd1b      	ble.n	8008e42 <lv_draw_label+0x3d2>
 8008e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e0c:	4298      	cmp	r0, r3
 8008e0e:	dc18      	bgt.n	8008e42 <lv_draw_label+0x3d2>
                    sel_coords.x1 = pos.x;
 8008e10:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8008e14:	8f21      	ldrh	r1, [r4, #56]	; 0x38
                    sel_coords.x1 = pos.x;
 8008e16:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 8008e1e:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 8008e22:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8008e26:	4443      	add	r3, r8
 8008e28:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.y2 = pos.y + line_height - 1;
 8008e2c:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8008e2e:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 8008e30:	3a01      	subs	r2, #1
 8008e32:	441a      	add	r2, r3
 8008e34:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	aa16      	add	r2, sp, #88	; 0x58
 8008e3c:	a814      	add	r0, sp, #80	; 0x50
 8008e3e:	f000 f8a1 	bl	8008f84 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 8008e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	4652      	mov	r2, sl
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	9907      	ldr	r1, [sp, #28]
 8008e50:	a812      	add	r0, sp, #72	; 0x48
 8008e52:	f7ff f9c1 	bl	80081d8 <lv_draw_letter>
            if(letter_w > 0) {
 8008e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f77f af1a 	ble.w	8008c92 <lv_draw_label+0x222>
                pos.x += letter_w + style->text.letter_space;
 8008e5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8008e62:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8008e64:	4413      	add	r3, r2
 8008e66:	4498      	add	r8, r3
 8008e68:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
 8008e6c:	e711      	b.n	8008c92 <lv_draw_label+0x222>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e70:	e7b3      	b.n	8008dda <lv_draw_label+0x36a>
 8008e72:	bf00      	nop
 8008e74:	20015b6c 	.word	0x20015b6c
 8008e78:	200000d4 	.word	0x200000d4
 8008e7c:	200000d0 	.word	0x200000d0
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8008e80:	f01b 0f08 	tst.w	fp, #8
 8008e84:	f43f af33 	beq.w	8008cee <lv_draw_label+0x27e>
            line_width =
 8008e88:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8008e8c:	f8cd b000 	str.w	fp, [sp]
 8008e90:	4652      	mov	r2, sl
 8008e92:	4638      	mov	r0, r7
 8008e94:	f003 fde8 	bl	800ca68 <lv_txt_get_width>
 8008e98:	88ab      	ldrh	r3, [r5, #4]
 8008e9a:	882a      	ldrh	r2, [r5, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	1a18      	subs	r0, r3, r0
 8008ea4:	e71e      	b.n	8008ce4 <lv_draw_label+0x274>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8008ea6:	f1b8 0f00 	cmp.w	r8, #0
 8008eaa:	f47f ae9f 	bne.w	8008bec <lv_draw_label+0x17c>
    lv_coord_t x_ofs = 0;
 8008eae:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 8008eb2:	2700      	movs	r7, #0
 8008eb4:	e63c      	b.n	8008b30 <lv_draw_label+0xc0>
                        cmd_state = CMD_STATE_WAIT;
 8008eb6:	2700      	movs	r7, #0
 8008eb8:	e78e      	b.n	8008dd8 <lv_draw_label+0x368>
 8008eba:	bf00      	nop

08008ebc <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460e      	mov	r6, r1
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8008ec4:	f7fe fb1e 	bl	8007504 <lv_refr_get_disp_refreshing>
 8008ec8:	f002 fdd2 	bl	800ba70 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 8008ecc:	1071      	asrs	r1, r6, #1
 8008ece:	428c      	cmp	r4, r1
 8008ed0:	db03      	blt.n	8008eda <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 8008ed2:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 8008ed4:	b10c      	cbz	r4, 8008eda <lv_draw_cont_radius_corr+0x1e>
 8008ed6:	3c01      	subs	r4, #1
 8008ed8:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 8008eda:	106a      	asrs	r2, r5, #1
 8008edc:	4294      	cmp	r4, r2
 8008ede:	db03      	blt.n	8008ee8 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 8008ee0:	b294      	uxth	r4, r2
        if(r != 0) r--;
 8008ee2:	b124      	cbz	r4, 8008eee <lv_draw_cont_radius_corr+0x32>
 8008ee4:	3c01      	subs	r4, #1
 8008ee6:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 8008ee8:	b10c      	cbz	r4, 8008eee <lv_draw_cont_radius_corr+0x32>
 8008eea:	1a24      	subs	r4, r4, r0
 8008eec:	b2a4      	uxth	r4, r4

    return r;
}
 8008eee:	4620      	mov	r0, r4
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}

08008ef2 <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	f89d 4018 	ldrb.w	r4, [sp, #24]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008ef8:	b2a5      	uxth	r5, r4
 8008efa:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8008efe:	4363      	muls	r3, r4
 8008f00:	fb00 3305 	mla	r3, r0, r5, r3
 8008f04:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f363 0007 	bfi	r0, r3, #0, #8
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008f0e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008f12:	b2a6      	uxth	r6, r4
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008f14:	fb13 f306 	smulbb	r3, r3, r6
 8008f18:	fb01 3105 	mla	r1, r1, r5, r3
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008f1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008f20:	fb13 f606 	smulbb	r6, r3, r6
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008f24:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008f28:	fb02 6205 	mla	r2, r2, r5, r6
    return ret;
 8008f2c:	f361 200f 	bfi	r0, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008f30:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 8008f34:	f362 4017 	bfi	r0, r2, #16, #8
}
 8008f38:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f40 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 8008f40:	2802      	cmp	r0, #2
 8008f42:	d105      	bne.n	8008f50 <antialias_get_opa_circ+0x10>
 8008f44:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8008f46:	5c58      	ldrb	r0, [r3, r1]
 8008f48:	fb10 f002 	smulbb	r0, r0, r2
 8008f4c:	0a00      	lsrs	r0, r0, #8
}
 8008f4e:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 8008f50:	2803      	cmp	r0, #3
 8008f52:	d101      	bne.n	8008f58 <antialias_get_opa_circ+0x18>
 8008f54:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <antialias_get_opa_circ+0x38>)
 8008f56:	e7f6      	b.n	8008f46 <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8008f58:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8008f5a:	bf1b      	ittet	ne
 8008f5c:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 8008f60:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8008f64:	4b05      	ldreq	r3, [pc, #20]	; (8008f7c <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8008f66:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8008f6a:	bf1c      	itt	ne
 8008f6c:	4b04      	ldrne	r3, [pc, #16]	; (8008f80 <antialias_get_opa_circ+0x40>)
 8008f6e:	b2c9      	uxtbne	r1, r1
 8008f70:	e7e9      	b.n	8008f46 <antialias_get_opa_circ+0x6>
 8008f72:	bf00      	nop
 8008f74:	080e4c35 	.word	0x080e4c35
 8008f78:	080e4c37 	.word	0x080e4c37
 8008f7c:	080e4c3a 	.word	0x080e4c3a
 8008f80:	080e4c3e 	.word	0x080e4c3e

08008f84 <lv_draw_rect>:
{
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	b0b1      	sub	sp, #196	; 0xc4
 8008f8a:	4682      	mov	sl, r0
 8008f8c:	9204      	str	r2, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8008f8e:	88c2      	ldrh	r2, [r0, #6]
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	8843      	ldrh	r3, [r0, #2]
 8008f94:	3201      	adds	r2, #1
 8008f96:	1ad2      	subs	r2, r2, r3
 8008f98:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8008f9a:	2a00      	cmp	r2, #0
{
 8008f9c:	4689      	mov	r9, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8008f9e:	f340 86a6 	ble.w	8009cee <lv_draw_rect+0xd6a>
    return area_p->x2 - area_p->x1 + 1;
 8008fa2:	8881      	ldrh	r1, [r0, #4]
 8008fa4:	8803      	ldrh	r3, [r0, #0]
 8008fa6:	3101      	adds	r1, #1
 8008fa8:	1ac9      	subs	r1, r1, r3
 8008faa:	b209      	sxth	r1, r1
 8008fac:	2900      	cmp	r1, #0
 8008fae:	f340 869e 	ble.w	8009cee <lv_draw_rect+0xd6a>
    if(style->body.shadow.width != 0) {
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 82ce 	beq.w	800955a <lv_draw_rect+0x5d6>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	8998      	ldrh	r0, [r3, #12]
 8008fc2:	f7ff ff7b 	bl	8008ebc <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 8008fc6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f8da 0000 	ldr.w	r0, [sl]
 8008fd0:	ab26      	add	r3, sp, #152	; 0x98
 8008fd2:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 8008fd4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8008fd8:	4423      	add	r3, r4
 8008fda:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_tmp.x2 -= radius;
 8008fde:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8008fe2:	a926      	add	r1, sp, #152	; 0x98
    area_tmp.x2 -= radius;
 8008fe4:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8008fe6:	4648      	mov	r0, r9
    area_tmp.x2 -= radius;
 8008fe8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8008fec:	f002 ff54 	bl	800be98 <lv_area_is_in>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f040 82b2 	bne.w	800955a <lv_draw_rect+0x5d6>
 8008ff6:	f8da 0000 	ldr.w	r0, [sl]
 8008ffa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008ffe:	ab26      	add	r3, sp, #152	; 0x98
 8009000:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 8009002:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8009006:	4423      	add	r3, r4
 8009008:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    area_tmp.y2 -= radius;
 800900c:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009010:	a926      	add	r1, sp, #152	; 0x98
    area_tmp.y2 -= radius;
 8009012:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009014:	4648      	mov	r0, r9
    area_tmp.y2 -= radius;
 8009016:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800901a:	f002 ff3d 	bl	800be98 <lv_area_is_in>
 800901e:	4605      	mov	r5, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	f040 829a 	bne.w	800955a <lv_draw_rect+0x5d6>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	7f9b      	ldrb	r3, [r3, #30]
 800902a:	2b01      	cmp	r3, #1
 800902c:	f040 820d 	bne.w	800944a <lv_draw_rect+0x4c6>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009030:	f7fe fa68 	bl	8007504 <lv_refr_get_disp_refreshing>
 8009034:	f002 fd1c 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009038:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800903a:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800903e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009048:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800904c:	3201      	adds	r2, #1
 800904e:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009050:	f8ba 3000 	ldrh.w	r3, [sl]
 8009054:	3101      	adds	r1, #1
 8009056:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800905c:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800905e:	b212      	sxth	r2, r2
 8009060:	8998      	ldrh	r0, [r3, #12]
 8009062:	f7ff ff2b 	bl	8008ebc <lv_draw_cont_radius_corr>
    radius += aa;
 8009066:	b2a4      	uxth	r4, r4
 8009068:	4420      	add	r0, r4
 800906a:	b283      	uxth	r3, r0
 800906c:	9306      	str	r3, [sp, #24]
    int16_t filter_width = 2 * swidth + 1;
 800906e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    radius += aa;
 8009072:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009076:	9a05      	ldr	r2, [sp, #20]
    radius += aa;
 8009078:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t filter_width = 2 * swidth + 1;
 800907a:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800907e:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 8009080:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009084:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 8009086:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800908a:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800908e:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 8009092:	0042      	lsls	r2, r0, #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009094:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009098:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800909c:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800909e:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	f7fe fe49 	bl	8007d38 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 80090a6:	9a07      	ldr	r2, [sp, #28]
 80090a8:	1883      	adds	r3, r0, r2
    memset(curve_x, 0, curve_x_size);
 80090aa:	4629      	mov	r1, r5
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 80090ac:	930d      	str	r3, [sp, #52]	; 0x34
    lv_circ_init(&circ, &circ_tmp, radius);
 80090ae:	ad25      	add	r5, sp, #148	; 0x94
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 80090b0:	19c3      	adds	r3, r0, r7
    lv_circ_init(&circ, &circ_tmp, radius);
 80090b2:	f10d 0792 	add.w	r7, sp, #146	; 0x92
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 80090b6:	4683      	mov	fp, r0
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 80090b8:	930e      	str	r3, [sp, #56]	; 0x38
    memset(curve_x, 0, curve_x_size);
 80090ba:	f005 f95c 	bl	800e376 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 80090be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c0:	4639      	mov	r1, r7
 80090c2:	4628      	mov	r0, r5
 80090c4:	f002 ff05 	bl	800bed2 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 80090c8:	4628      	mov	r0, r5
 80090ca:	f002 ff09 	bl	800bee0 <lv_circ_cont>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d159      	bne.n	8009186 <lv_draw_rect+0x202>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80090d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d4:	2bff      	cmp	r3, #255	; 0xff
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	bf18      	it	ne
 80090da:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 80090dc:	7b9b      	ldrb	r3, [r3, #14]
 80090de:	bf1c      	itt	ne
 80090e0:	4353      	mulne	r3, r2
 80090e2:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80090ec:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80090f0:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 80090f2:	fb08 f508 	mul.w	r5, r8, r8
 80090f6:	4353      	muls	r3, r2
 80090f8:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 80090fa:	b210      	sxth	r0, r2
 80090fc:	4580      	cmp	r8, r0
 80090fe:	dc53      	bgt.n	80091a8 <lv_draw_rect+0x224>
    ofs_rb.x = coords->x2 - radius - aa;
 8009100:	9a06      	ldr	r2, [sp, #24]
 8009102:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	1b1b      	subs	r3, r3, r4
 800910a:	b29b      	uxth	r3, r3
 800910c:	9310      	str	r3, [sp, #64]	; 0x40
 800910e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009112:	9316      	str	r3, [sp, #88]	; 0x58
    ofs_rb.y = coords->y2 - radius - aa;
 8009114:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009118:	1a9b      	subs	r3, r3, r2
 800911a:	1b1b      	subs	r3, r3, r4
 800911c:	b29b      	uxth	r3, r3
 800911e:	9311      	str	r3, [sp, #68]	; 0x44
 8009120:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8009124:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_rt.y = coords->y1 + radius + aa;
 8009126:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800912a:	4423      	add	r3, r4
 800912c:	4413      	add	r3, r2
 800912e:	b29b      	uxth	r3, r3
 8009130:	9313      	str	r3, [sp, #76]	; 0x4c
 8009132:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8009136:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_lb.x = coords->x1 + radius + aa;
 8009138:	f8ba 3000 	ldrh.w	r3, [sl]
 800913c:	441c      	add	r4, r3
 800913e:	4414      	add	r4, r2
 8009140:	b2a3      	uxth	r3, r4
 8009142:	9315      	str	r3, [sp, #84]	; 0x54
 8009144:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8009148:	9317      	str	r3, [sp, #92]	; 0x5c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800914a:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 800914c:	2300      	movs	r3, #0
 800914e:	930a      	str	r3, [sp, #40]	; 0x28
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009150:	b233      	sxth	r3, r6
 8009152:	931a      	str	r3, [sp, #104]	; 0x68
 8009154:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8009158:	9307      	str	r3, [sp, #28]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800915a:	9a07      	ldr	r2, [sp, #28]
 800915c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800915e:	4293      	cmp	r3, r2
 8009160:	f2c0 81fb 	blt.w	800955a <lv_draw_rect+0x5d6>
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009164:	9b05      	ldr	r3, [sp, #20]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009166:	eb0b 0542 	add.w	r5, fp, r2, lsl #1
 800916a:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800916c:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800916e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009170:	b283      	uxth	r3, r0
 8009172:	429a      	cmp	r2, r3
 8009174:	9308      	str	r3, [sp, #32]
 8009176:	db3a      	blt.n	80091ee <lv_draw_rect+0x26a>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009178:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            uint32_t px_opa_sum = 0;
 800917a:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800917c:	9b05      	ldr	r3, [sp, #20]
 800917e:	4293      	cmp	r3, r2
 8009180:	da1a      	bge.n	80091b8 <lv_draw_rect+0x234>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009182:	2200      	movs	r2, #0
 8009184:	e028      	b.n	80091d8 <lv_draw_rect+0x254>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8009186:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 800918a:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
 800918e:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8009192:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8009196:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
 800919a:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800919e:	4639      	mov	r1, r7
 80091a0:	4628      	mov	r0, r5
 80091a2:	f002 fea6 	bl	800bef2 <lv_circ_next>
 80091a6:	e78f      	b.n	80090c8 <lv_draw_rect+0x144>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 80091a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80091aa:	fbb3 f0f5 	udiv	r0, r3, r5
 80091ae:	440b      	add	r3, r1
 80091b0:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 80091b4:	3201      	adds	r2, #1
 80091b6:	e7a0      	b.n	80090fa <lv_draw_rect+0x176>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 80091b8:	9b07      	ldr	r3, [sp, #28]
 80091ba:	18d3      	adds	r3, r2, r3
 80091bc:	f140 80a9 	bpl.w	8009312 <lv_draw_rect+0x38e>
                    col_rel = radius - curve_x[line] - col;
 80091c0:	882b      	ldrh	r3, [r5, #0]
 80091c2:	9e06      	ldr	r6, [sp, #24]
 80091c4:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80091c6:	9e08      	ldr	r6, [sp, #32]
 80091c8:	1b9b      	subs	r3, r3, r6
 80091ca:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	f280 80a9 	bge.w	8009324 <lv_draw_rect+0x3a0>
                    if(line_rel == -swidth)
 80091d2:	1b16      	subs	r6, r2, r4
 80091d4:	4272      	negs	r2, r6
 80091d6:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80091d8:	b283      	uxth	r3, r0
 80091da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80091dc:	0a09      	lsrs	r1, r1, #8
 80091de:	54f1      	strb	r1, [r6, r3]
 80091e0:	3001      	adds	r0, #1
            if(line_ready) {
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d0c3      	beq.n	800916e <lv_draw_rect+0x1ea>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 80091e6:	9b08      	ldr	r3, [sp, #32]
 80091e8:	3301      	adds	r3, #1
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	9308      	str	r3, [sp, #32]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80091ee:	9b07      	ldr	r3, [sp, #28]
 80091f0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 80091f4:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
 80091f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	440a      	add	r2, r1
 80091fe:	b293      	uxth	r3, r2
 8009200:	9318      	str	r3, [sp, #96]	; 0x60
 8009202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009204:	1b1e      	subs	r6, r3, r4
 8009206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009208:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 800920a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800920c:	3b01      	subs	r3, #1
 800920e:	1a5b      	subs	r3, r3, r1
 8009210:	b29b      	uxth	r3, r3
 8009212:	9319      	str	r3, [sp, #100]	; 0x64
 8009214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009216:	1c5d      	adds	r5, r3, #1
 8009218:	2300      	movs	r3, #0
 800921a:	b236      	sxth	r6, r6
 800921c:	b224      	sxth	r4, r4
 800921e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009220:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009224:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009226:	eba2 0803 	sub.w	r8, r2, r3
 800922a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800922c:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 800922e:	3301      	adds	r3, #1
 8009230:	9a08      	ldr	r2, [sp, #32]
 8009232:	b29b      	uxth	r3, r3
 8009234:	429a      	cmp	r2, r3
 8009236:	fa0f f888 	sxth.w	r8, r8
 800923a:	b23f      	sxth	r7, r7
 800923c:	f200 8081 	bhi.w	8009342 <lv_draw_rect+0x3be>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8009240:	9b07      	ldr	r3, [sp, #28]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d161      	bne.n	800930a <lv_draw_rect+0x386>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009246:	f7fe f95d 	bl	8007504 <lv_refr_get_disp_refreshing>
 800924a:	f002 fc11 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800924e:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009250:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009254:	f9b3 801c 	ldrsh.w	r8, [r3, #28]
 8009258:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800925c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009260:	3201      	adds	r2, #1
 8009262:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009264:	f8ba 3000 	ldrh.w	r3, [sl]
 8009268:	3101      	adds	r1, #1
 800926a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800926c:	9b04      	ldr	r3, [sp, #16]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800926e:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009270:	b212      	sxth	r2, r2
 8009272:	b209      	sxth	r1, r1
 8009274:	8998      	ldrh	r0, [r3, #12]
 8009276:	f7ff fe21 	bl	8008ebc <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 800927a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 800927e:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 8009282:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8009284:	1c4a      	adds	r2, r1, #1
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	b212      	sxth	r2, r2
    radius += aa;
 800928a:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 800928c:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 8009290:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    right_area.x2 = right_area.x1;
 8009294:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    right_area.y2 = coords->y2 - radius - aa;
 8009298:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 800929c:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 800929e:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 80092a2:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 80092a4:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 80092a6:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 80092a8:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 80092aa:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 80092ac:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 80092ae:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 80092b0:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 80092b2:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 80092b4:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 80092b6:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 80092b8:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 80092ba:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 80092bc:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 80092be:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 80092c2:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 80092c4:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 80092c6:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 80092c8:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 80092ca:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 80092cc:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
    bottom_area.x1 = coords->x1 + radius + aa;
 80092d0:	f8ad 40b8 	strh.w	r4, [sp, #184]	; 0xb8
    right_area.y1 = coords->y1 + radius + aa;
 80092d4:	f8ad e0a2 	strh.w	lr, [sp, #162]	; 0xa2
    right_area.y2 = coords->y2 - radius - aa;
 80092d8:	f8ad 60a6 	strh.w	r6, [sp, #166]	; 0xa6
    left_area.x1 = coords->x1 - 1 + aa;
 80092dc:	f8ad 70a8 	strh.w	r7, [sp, #168]	; 0xa8
    left_area.y1 = coords->y1 + radius + aa;
 80092e0:	f8ad e0aa 	strh.w	lr, [sp, #170]	; 0xaa
    left_area.x2 = left_area.x1;
 80092e4:	f8ad 70ac 	strh.w	r7, [sp, #172]	; 0xac
    left_area.y2 = coords->y2 - radius - aa;
 80092e8:	f8ad 60ae 	strh.w	r6, [sp, #174]	; 0xae
    top_area.y1 = coords->y1 - 1 + aa;
 80092ec:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
    top_area.x2 = coords->x2 - radius - aa;
 80092f0:	f8ad 10b4 	strh.w	r1, [sp, #180]	; 0xb4
    top_area.y2 = top_area.y1;
 80092f4:	f8ad 50b6 	strh.w	r5, [sp, #182]	; 0xb6
    bottom_area.y1 = coords->y2 + 1 - aa;
 80092f8:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    bottom_area.x2 = coords->x2 - radius - aa;
 80092fc:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
    bottom_area.y2 = bottom_area.y1;
 8009300:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009304:	2401      	movs	r4, #1
 8009306:	45a0      	cmp	r8, r4
 8009308:	da56      	bge.n	80093b8 <lv_draw_rect+0x434>
 800930a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930c:	3301      	adds	r3, #1
 800930e:	930a      	str	r3, [sp, #40]	; 0x28
 8009310:	e720      	b.n	8009154 <lv_draw_rect+0x1d0>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009312:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009314:	429e      	cmp	r6, r3
 8009316:	f6ff af34 	blt.w	8009182 <lv_draw_rect+0x1fe>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800931a:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
 800931e:	882e      	ldrh	r6, [r5, #0]
 8009320:	1b9b      	subs	r3, r3, r6
 8009322:	e750      	b.n	80091c6 <lv_draw_rect+0x242>
                } else if(col_rel > swidth)
 8009324:	9e05      	ldr	r6, [sp, #20]
 8009326:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009328:	bfa9      	itett	ge
 800932a:	9e05      	ldrge	r6, [sp, #20]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800932c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800932e:	1af3      	subge	r3, r6, r3
 8009330:	9e0d      	ldrge	r6, [sp, #52]	; 0x34
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009332:	bfb4      	ite	lt
 8009334:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009336:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 800933a:	3201      	adds	r2, #1
 800933c:	4419      	add	r1, r3
 800933e:	b212      	sxth	r2, r2
 8009340:	e71c      	b.n	800917c <lv_draw_rect+0x1f8>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8009342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009344:	4543      	cmp	r3, r8
 8009346:	dd17      	ble.n	8009378 <lv_draw_rect+0x3f4>
 8009348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800934a:	42b3      	cmp	r3, r6
 800934c:	dd08      	ble.n	8009360 <lv_draw_rect+0x3dc>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800934e:	782b      	ldrb	r3, [r5, #0]
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	464a      	mov	r2, r9
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	4631      	mov	r1, r6
 800935a:	4640      	mov	r0, r8
 800935c:	f7fe fe17 	bl	8007f8e <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8009360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009362:	42a3      	cmp	r3, r4
 8009364:	da08      	bge.n	8009378 <lv_draw_rect+0x3f4>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009366:	782b      	ldrb	r3, [r5, #0]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	9b04      	ldr	r3, [sp, #16]
 800936c:	464a      	mov	r2, r9
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7fe fe0b 	bl	8007f8e <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8009378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800937a:	42bb      	cmp	r3, r7
 800937c:	da17      	bge.n	80093ae <lv_draw_rect+0x42a>
 800937e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009380:	42b3      	cmp	r3, r6
 8009382:	dd08      	ble.n	8009396 <lv_draw_rect+0x412>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009384:	782b      	ldrb	r3, [r5, #0]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	464a      	mov	r2, r9
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	4631      	mov	r1, r6
 8009390:	4638      	mov	r0, r7
 8009392:	f7fe fdfc 	bl	8007f8e <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8009396:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009398:	42a3      	cmp	r3, r4
 800939a:	da08      	bge.n	80093ae <lv_draw_rect+0x42a>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800939c:	782b      	ldrb	r3, [r5, #0]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	464a      	mov	r2, r9
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	4621      	mov	r1, r4
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7fe fdf0 	bl	8007f8e <lv_draw_px>
 80093ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b0:	3301      	adds	r3, #1
 80093b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b4:	3501      	adds	r5, #1
 80093b6:	e733      	b.n	8009220 <lv_draw_rect+0x29c>
        opa_act = map[d];
 80093b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 80093ba:	9a04      	ldr	r2, [sp, #16]
        opa_act = map[d];
 80093bc:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 80093be:	6992      	ldr	r2, [r2, #24]
 80093c0:	462b      	mov	r3, r5
 80093c2:	4649      	mov	r1, r9
 80093c4:	a828      	add	r0, sp, #160	; 0xa0
 80093c6:	f7fe fe39 	bl	800803c <lv_draw_fill>
        right_area.x1++;
 80093ca:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80093ce:	9a04      	ldr	r2, [sp, #16]
        right_area.x1++;
 80093d0:	3301      	adds	r3, #1
 80093d2:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        right_area.x2++;
 80093d6:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80093da:	6992      	ldr	r2, [r2, #24]
        right_area.x2++;
 80093dc:	3301      	adds	r3, #1
 80093de:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 80093e2:	4649      	mov	r1, r9
 80093e4:	462b      	mov	r3, r5
 80093e6:	a82a      	add	r0, sp, #168	; 0xa8
 80093e8:	f7fe fe28 	bl	800803c <lv_draw_fill>
        left_area.x1--;
 80093ec:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80093f0:	9a04      	ldr	r2, [sp, #16]
        left_area.x1--;
 80093f2:	3b01      	subs	r3, #1
 80093f4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
        left_area.x2--;
 80093f8:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 80093fc:	6992      	ldr	r2, [r2, #24]
        left_area.x2--;
 80093fe:	3b01      	subs	r3, #1
 8009400:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009404:	4649      	mov	r1, r9
 8009406:	462b      	mov	r3, r5
 8009408:	a82c      	add	r0, sp, #176	; 0xb0
 800940a:	f7fe fe17 	bl	800803c <lv_draw_fill>
        top_area.y1--;
 800940e:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009412:	9a04      	ldr	r2, [sp, #16]
        top_area.y1--;
 8009414:	3b01      	subs	r3, #1
 8009416:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        top_area.y2--;
 800941a:	f8bd 30b6 	ldrh.w	r3, [sp, #182]	; 0xb6
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800941e:	6992      	ldr	r2, [r2, #24]
        top_area.y2--;
 8009420:	3b01      	subs	r3, #1
 8009422:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009426:	4649      	mov	r1, r9
 8009428:	462b      	mov	r3, r5
 800942a:	a82e      	add	r0, sp, #184	; 0xb8
 800942c:	f7fe fe06 	bl	800803c <lv_draw_fill>
        bottom_area.y1++;
 8009430:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
 8009434:	3301      	adds	r3, #1
 8009436:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        bottom_area.y2++;
 800943a:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 800943e:	3401      	adds	r4, #1
 8009440:	3301      	adds	r3, #1
 8009442:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8009446:	b224      	sxth	r4, r4
 8009448:	e75d      	b.n	8009306 <lv_draw_rect+0x382>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800944a:	2b00      	cmp	r3, #0
 800944c:	f040 8085 	bne.w	800955a <lv_draw_rect+0x5d6>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009450:	f7fe f858 	bl	8007504 <lv_refr_get_disp_refreshing>
 8009454:	f002 fb0c 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009458:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800945a:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800945e:	f9b3 401c 	ldrsh.w	r4, [r3, #28]
 8009462:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009466:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800946a:	3201      	adds	r2, #1
 800946c:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800946e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009472:	3101      	adds	r1, #1
 8009474:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	b212      	sxth	r2, r2
 800947a:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800947c:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800947e:	8998      	ldrh	r0, [r3, #12]
 8009480:	f7ff fd1c 	bl	8008ebc <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8009484:	fa1f f888 	uxth.w	r8, r8
 8009488:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 800948c:	4405      	add	r5, r0
 800948e:	b2ad      	uxth	r5, r5
 8009490:	b22b      	sxth	r3, r5
    swidth += aa;
 8009492:	eb08 0004 	add.w	r0, r8, r4
 8009496:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009498:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 800949a:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800949c:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 80094a0:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 80094a2:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80094a4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80094a8:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 80094aa:	9305      	str	r3, [sp, #20]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80094ac:	f7fe fc44 	bl	8007d38 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 80094b0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 80094b4:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 80094b6:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 80094b8:	9a05      	ldr	r2, [sp, #20]
 80094ba:	a92a      	add	r1, sp, #168	; 0xa8
 80094bc:	4658      	mov	r0, fp
 80094be:	f002 fd08 	bl	800bed2 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 80094c2:	4658      	mov	r0, fp
 80094c4:	f002 fd0c 	bl	800bee0 <lv_circ_cont>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f040 8413 	bne.w	8009cf4 <lv_draw_rect+0xd70>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80094ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d0:	2bff      	cmp	r3, #255	; 0xff
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	bf18      	it	ne
 80094d6:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 80094d8:	7b9b      	ldrb	r3, [r3, #14]
 80094da:	bf1c      	itt	ne
 80094dc:	4353      	mulne	r3, r2
 80094de:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 80094e2:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 80094e6:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 80094e8:	1b0a      	subs	r2, r1, r4
 80094ea:	b212      	sxth	r2, r2
 80094ec:	4296      	cmp	r6, r2
 80094ee:	f300 8413 	bgt.w	8009d18 <lv_draw_rect+0xd94>
    ofs_l.x = coords->x1 + radius;
 80094f2:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 80094f6:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 80094fa:	442b      	add	r3, r5
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	9306      	str	r3, [sp, #24]
 8009500:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009504:	930d      	str	r3, [sp, #52]	; 0x34
 8009506:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800950a:	3301      	adds	r3, #1
 800950c:	eba3 0808 	sub.w	r8, r3, r8
 8009510:	fa1f f388 	uxth.w	r3, r8
 8009514:	9307      	str	r3, [sp, #28]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8009516:	1b5b      	subs	r3, r3, r5
 8009518:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 800951a:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800951c:	930e      	str	r3, [sp, #56]	; 0x38
    ofs_r.x = coords->x2 - radius;
 800951e:	b2ab      	uxth	r3, r5
 8009520:	9308      	str	r3, [sp, #32]
 8009522:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 8009526:	9a05      	ldr	r2, [sp, #20]
 8009528:	fa0f f388 	sxth.w	r3, r8
 800952c:	429a      	cmp	r2, r3
 800952e:	f280 83fb 	bge.w	8009d28 <lv_draw_rect+0xda4>
    area_mid.x1 = ofs_l.x + 1;
 8009532:	9b06      	ldr	r3, [sp, #24]
    area_mid.y1 = ofs_l.y + radius;
 8009534:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8009538:	f8ad 80ba 	strh.w	r8, [sp, #186]	; 0xba
    area_mid.x1 = ofs_l.x + 1;
 800953c:	3301      	adds	r3, #1
 800953e:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    area_mid.x2 = ofs_r.x - 1;
 8009542:	9b08      	ldr	r3, [sp, #32]
    area_mid.y2 = area_mid.y1;
 8009544:	f8ad 80be 	strh.w	r8, [sp, #190]	; 0xbe
    area_mid.x2 = ofs_r.x - 1;
 8009548:	1e5d      	subs	r5, r3, #1
 800954a:	f8ad 50bc 	strh.w	r5, [sp, #188]	; 0xbc
    area_mid.y2 = area_mid.y1;
 800954e:	2300      	movs	r3, #0
 8009550:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 8009552:	b29b      	uxth	r3, r3
 8009554:	42b3      	cmp	r3, r6
 8009556:	f2c0 8430 	blt.w	8009dba <lv_draw_rect+0xe36>
    if(lv_area_is_on(coords, mask) == false) return;
 800955a:	4649      	mov	r1, r9
 800955c:	4650      	mov	r0, sl
 800955e:	f002 fc7e 	bl	800be5e <lv_area_is_on>
 8009562:	2800      	cmp	r0, #0
 8009564:	f000 83c3 	beq.w	8009cee <lv_draw_rect+0xd6a>
    if(style->body.opa > LV_OPA_MIN) {
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	7b9b      	ldrb	r3, [r3, #14]
 800956c:	2b10      	cmp	r3, #16
 800956e:	f240 81fa 	bls.w	8009966 <lv_draw_rect+0x9e2>
    uint16_t radius = style->body.radius;
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	899d      	ldrh	r5, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009576:	f7fd ffc5 	bl	8007504 <lv_refr_get_disp_refreshing>
 800957a:	f002 fa79 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800957e:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009580:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 8009584:	f8d3 8004 	ldr.w	r8, [r3, #4]
    lv_color_t gcolor = style->body.grad_color;
 8009588:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800958c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009590:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009594:	3601      	adds	r6, #1
 8009596:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8009598:	f8ba 3000 	ldrh.w	r3, [sl]
 800959c:	3101      	adds	r1, #1
 800959e:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	2bff      	cmp	r3, #255	; 0xff
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	7b9f      	ldrb	r7, [r3, #14]
 80095a8:	bf18      	it	ne
 80095aa:	9b09      	ldrne	r3, [sp, #36]	; 0x24
    return area_p->y2 - area_p->y1 + 1;
 80095ac:	b236      	sxth	r6, r6
 80095ae:	bf18      	it	ne
 80095b0:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80095b2:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 80095b4:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80095b6:	4632      	mov	r2, r6
 80095b8:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80095ba:	bf18      	it	ne
 80095bc:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80095c0:	f7ff fc7c 	bl	8008ebc <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 80095c4:	2302      	movs	r3, #2
 80095c6:	fb96 f3f3 	sdiv	r3, r6, r3
 80095ca:	4298      	cmp	r0, r3
 80095cc:	dc29      	bgt.n	8009622 <lv_draw_rect+0x69e>
    work_area.x1 = coords->x1;
 80095ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80095d2:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    work_area.x2 = coords->x2;
 80095d6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80095da:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 80095de:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80095e2:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 80095e6:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 80095e8:	45d8      	cmp	r8, fp
        work_area.y1 = coords->y1 + radius;
 80095ea:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 80095ec:	f040 83fe 	bne.w	8009dec <lv_draw_rect+0xe68>
        if(style->body.radius != 0) {
 80095f0:	9a04      	ldr	r2, [sp, #16]
        work_area.y1 = coords->y1 + radius;
 80095f2:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        work_area.y2 = coords->y2 - radius;
 80095f6:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 80095f8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
        work_area.y2 = coords->y2 - radius;
 80095fc:	b2ad      	uxth	r5, r5
 80095fe:	f8ad 50be 	strh.w	r5, [sp, #190]	; 0xbe
        if(style->body.radius != 0) {
 8009602:	b142      	cbz	r2, 8009616 <lv_draw_rect+0x692>
            if(aa) {
 8009604:	2c00      	cmp	r4, #0
 8009606:	f000 83ec 	beq.w	8009de2 <lv_draw_rect+0xe5e>
                work_area.y1 += 2;
 800960a:	3302      	adds	r3, #2
 800960c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                work_area.y2 -= 2;
 8009610:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 8009612:	f8ad 50be 	strh.w	r5, [sp, #190]	; 0xbe
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8009616:	463b      	mov	r3, r7
 8009618:	4642      	mov	r2, r8
 800961a:	4649      	mov	r1, r9
 800961c:	a82e      	add	r0, sp, #184	; 0xb8
 800961e:	f7fe fd0d 	bl	800803c <lv_draw_fill>
        if(style->body.radius != 0) {
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 8009628:	2d00      	cmp	r5, #0
 800962a:	f000 819c 	beq.w	8009966 <lv_draw_rect+0x9e2>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800962e:	f7fd ff69 	bl	8007504 <lv_refr_get_disp_refreshing>
 8009632:	f002 fa1d 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009636:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009638:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800963c:	685c      	ldr	r4, [r3, #4]
    lv_color_t gcolor = style->body.grad_color;
 800963e:	f8d3 b008 	ldr.w	fp, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009642:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return area_p->x2 - area_p->x1 + 1;
 8009644:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009648:	901b      	str	r0, [sp, #108]	; 0x6c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800964a:	2bff      	cmp	r3, #255	; 0xff
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	7b9e      	ldrb	r6, [r3, #14]
 8009650:	bf17      	itett	ne
 8009652:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 8009654:	9605      	streq	r6, [sp, #20]
 8009656:	435e      	mulne	r6, r3
 8009658:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 800965c:	bf18      	it	ne
 800965e:	9305      	strne	r3, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 8009660:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009664:	3301      	adds	r3, #1
 8009666:	1a9b      	subs	r3, r3, r2
 8009668:	b21b      	sxth	r3, r3
 800966a:	9306      	str	r3, [sp, #24]
    return area_p->x2 - area_p->x1 + 1;
 800966c:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009670:	9a06      	ldr	r2, [sp, #24]
 8009672:	3101      	adds	r1, #1
 8009674:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 8009676:	b2ad      	uxth	r5, r5
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009678:	b209      	sxth	r1, r1
 800967a:	4628      	mov	r0, r5
 800967c:	f7ff fc1e 	bl	8008ebc <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8009680:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8009684:	f8ba 7000 	ldrh.w	r7, [sl]
    lb_origo.y = coords->y2 - radius - aa;
 8009688:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800968c:	900a      	str	r0, [sp, #40]	; 0x28
    lt_origo.x = coords->x1 + radius + aa;
 800968e:	442f      	add	r7, r5
 8009690:	4407      	add	r7, r0
 8009692:	b2bb      	uxth	r3, r7
 8009694:	9307      	str	r3, [sp, #28]
    lt_origo.y = coords->y1 + radius + aa;
 8009696:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800969a:	442b      	add	r3, r5
 800969c:	4403      	add	r3, r0
 800969e:	b29b      	uxth	r3, r3
 80096a0:	930b      	str	r3, [sp, #44]	; 0x2c
    lb_origo.y = coords->y2 - radius - aa;
 80096a2:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 80096a6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80096aa:	931c      	str	r3, [sp, #112]	; 0x70
    lb_origo.y = coords->y2 - radius - aa;
 80096ac:	eba8 0805 	sub.w	r8, r8, r5
 80096b0:	fa1f f388 	uxth.w	r3, r8
 80096b4:	930c      	str	r3, [sp, #48]	; 0x30
 80096b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80096ba:	931d      	str	r3, [sp, #116]	; 0x74
    rt_origo.x = coords->x2 - radius - aa;
 80096bc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 80096c0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    rt_origo.x = coords->x2 - radius - aa;
 80096c4:	1a1b      	subs	r3, r3, r0
 80096c6:	1b5d      	subs	r5, r3, r5
 80096c8:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 80096ca:	ad26      	add	r5, sp, #152	; 0x98
 80096cc:	4642      	mov	r2, r8
 80096ce:	a925      	add	r1, sp, #148	; 0x94
 80096d0:	4628      	mov	r0, r5
    rt_origo.x = coords->x2 - radius - aa;
 80096d2:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir, &cir_tmp, radius);
 80096d4:	f002 fbfd 	bl	800bed2 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80096d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096da:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 80096de:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 80096e2:	9807      	ldr	r0, [sp, #28]
 80096e4:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80096e6:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80096e8:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80096ea:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80096ec:	1a41      	subs	r1, r0, r1
 80096ee:	9200      	str	r2, [sp, #0]
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	b209      	sxth	r1, r1
 80096f4:	a82c      	add	r0, sp, #176	; 0xb0
 80096f6:	f002 fb33 	bl	800bd60 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 80096fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096fc:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8009700:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 8009704:	9807      	ldr	r0, [sp, #28]
 8009706:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009708:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800970a:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800970c:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800970e:	1a41      	subs	r1, r0, r1
 8009710:	9200      	str	r2, [sp, #0]
 8009712:	b21b      	sxth	r3, r3
 8009714:	b209      	sxth	r1, r1
 8009716:	a82e      	add	r0, sp, #184	; 0xb8
 8009718:	f002 fb22 	bl	800bd60 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800971c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800971e:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 8009722:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8009726:	9807      	ldr	r0, [sp, #28]
 8009728:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800972a:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800972c:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800972e:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009730:	1a41      	subs	r1, r0, r1
 8009732:	9200      	str	r2, [sp, #0]
 8009734:	b21b      	sxth	r3, r3
 8009736:	b209      	sxth	r1, r1
 8009738:	a82a      	add	r0, sp, #168	; 0xa8
 800973a:	f002 fb11 	bl	800bd60 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800973e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009740:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8009744:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 8009748:	9807      	ldr	r0, [sp, #28]
 800974a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800974c:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800974e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009750:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009752:	1a41      	subs	r1, r0, r1
 8009754:	b21b      	sxth	r3, r3
 8009756:	9200      	str	r2, [sp, #0]
 8009758:	b209      	sxth	r1, r1
 800975a:	a828      	add	r0, sp, #160	; 0xa0
 800975c:	f002 fb00 	bl	800bd60 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	930f      	str	r3, [sp, #60]	; 0x3c
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    while(lv_circ_cont(&cir)) {
 8009766:	9521      	str	r5, [sp, #132]	; 0x84
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009768:	3301      	adds	r3, #1
 800976a:	9323      	str	r3, [sp, #140]	; 0x8c
    while(lv_circ_cont(&cir)) {
 800976c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800976e:	f002 fbb7 	bl	800bee0 <lv_circ_cont>
 8009772:	2800      	cmp	r0, #0
 8009774:	f040 837d 	bne.w	8009e72 <lv_draw_rect+0xeee>
    if(mcolor.full == gcolor.full)
 8009778:	455c      	cmp	r4, fp
 800977a:	f040 8566 	bne.w	800a24a <lv_draw_rect+0x12c6>
        act_color = mcolor;
 800977e:	4622      	mov	r2, r4
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8009780:	9b05      	ldr	r3, [sp, #20]
 8009782:	4649      	mov	r1, r9
 8009784:	a828      	add	r0, sp, #160	; 0xa0
 8009786:	f7fe fc59 	bl	800803c <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 800978a:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800978e:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8009792:	4293      	cmp	r3, r2
 8009794:	d008      	beq.n	80097a8 <lv_draw_rect+0x824>
        if(mcolor.full == gcolor.full)
 8009796:	455c      	cmp	r4, fp
 8009798:	f040 8575 	bne.w	800a286 <lv_draw_rect+0x1302>
            act_color = mcolor;
 800979c:	4622      	mov	r2, r4
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800979e:	9b05      	ldr	r3, [sp, #20]
 80097a0:	4649      	mov	r1, r9
 80097a2:	a82a      	add	r0, sp, #168	; 0xa8
 80097a4:	f7fe fc4a 	bl	800803c <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 80097a8:	455c      	cmp	r4, fp
 80097aa:	f040 8588 	bne.w	800a2be <lv_draw_rect+0x133a>
        act_color = mcolor;
 80097ae:	4622      	mov	r2, r4
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	4649      	mov	r1, r9
 80097b4:	a82c      	add	r0, sp, #176	; 0xb0
 80097b6:	f7fe fc41 	bl	800803c <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 80097ba:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 80097be:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d008      	beq.n	80097d8 <lv_draw_rect+0x854>
        if(mcolor.full == gcolor.full)
 80097c6:	455c      	cmp	r4, fp
 80097c8:	f040 8597 	bne.w	800a2fa <lv_draw_rect+0x1376>
            act_color = mcolor;
 80097cc:	4622      	mov	r2, r4
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	4649      	mov	r1, r9
 80097d2:	a82e      	add	r0, sp, #184	; 0xb8
 80097d4:	f7fe fc32 	bl	800803c <lv_draw_fill>
    if(aa) {
 80097d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80c3 	beq.w	8009966 <lv_draw_rect+0x9e2>
        edge_top_area.x1 = coords->x1 + radius + 2;
 80097e0:	f8ba 3000 	ldrh.w	r3, [sl]
 80097e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097e6:	3302      	adds	r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        edge_top_area.x2 = coords->x2 - radius - 2;
 80097ee:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80097f2:	3b02      	subs	r3, #2
 80097f4:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 80097f6:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.x2 = coords->x2 - radius - 2;
 80097f8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        edge_top_area.y1 = coords->y1;
 80097fc:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8009800:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        edge_top_area.y2 = coords->y1;
 8009804:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8009808:	6852      	ldr	r2, [r2, #4]
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	4649      	mov	r1, r9
 800980e:	a828      	add	r0, sp, #160	; 0xa0
 8009810:	f7fe fc14 	bl	800803c <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8009814:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y2;
 8009816:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800981a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        edge_top_area.y2 = coords->y2;
 800981e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8009822:	6892      	ldr	r2, [r2, #8]
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	4649      	mov	r1, r9
 8009828:	a828      	add	r0, sp, #160	; 0xa0
 800982a:	f7fe fc07 	bl	800803c <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800982e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009832:	9315      	str	r3, [sp, #84]	; 0x54
 8009834:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009836:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	b21b      	sxth	r3, r3
 800983e:	9319      	str	r3, [sp, #100]	; 0x64
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	eba3 0508 	sub.w	r5, r3, r8
 8009846:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	fbb5 f5f3 	udiv	r5, r5, r3
 8009850:	fa5f f38b 	uxtb.w	r3, fp
 8009854:	9310      	str	r3, [sp, #64]	; 0x40
 8009856:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800985a:	9311      	str	r3, [sp, #68]	; 0x44
 800985c:	f3cb 4307 	ubfx	r3, fp, #16, #8
 8009860:	9312      	str	r3, [sp, #72]	; 0x48
 8009862:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009866:	9313      	str	r3, [sp, #76]	; 0x4c
 8009868:	f3c4 4307 	ubfx	r3, r4, #16, #8
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800986c:	9301      	str	r3, [sp, #4]
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800986e:	b2ed      	uxtb	r5, r5
 8009870:	9314      	str	r3, [sp, #80]	; 0x50
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8009872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	fa5f fb84 	uxtb.w	fp, r4
 800987a:	9502      	str	r5, [sp, #8]
 800987c:	a810      	add	r0, sp, #64	; 0x40
 800987e:	c807      	ldmia	r0, {r0, r1, r2}
 8009880:	465b      	mov	r3, fp
 8009882:	f7ff fb36 	bl	8008ef2 <lv_color_mix.isra.0>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8009886:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	9b11      	ldr	r3, [sp, #68]	; 0x44
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800988c:	900e      	str	r0, [sp, #56]	; 0x38
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009894:	9502      	str	r5, [sp, #8]
 8009896:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009898:	4658      	mov	r0, fp
 800989a:	f7ff fb2a 	bl	8008ef2 <lv_color_mix.isra.0>
 800989e:	2300      	movs	r3, #0
 80098a0:	9316      	str	r3, [sp, #88]	; 0x58
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80098a2:	fa1f f388 	uxth.w	r3, r8
 80098a6:	9318      	str	r3, [sp, #96]	; 0x60
 80098a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 80098ac:	900d      	str	r0, [sp, #52]	; 0x34
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 80098ae:	3301      	adds	r3, #1
 80098b0:	18d3      	adds	r3, r2, r3
 80098b2:	931c      	str	r3, [sp, #112]	; 0x70
 80098b4:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
        for(i = 0; i < seg_size; i++) {
 80098b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098ba:	428b      	cmp	r3, r1
 80098bc:	f300 8539 	bgt.w	800a332 <lv_draw_rect+0x13ae>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 80098c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098c4:	eba8 0303 	sub.w	r3, r8, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfb8      	it	lt
 80098cc:	425b      	neglt	r3, r3
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d149      	bne.n	8009966 <lv_draw_rect+0x9e2>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 80098d8:	fbb4 f4f3 	udiv	r4, r4, r3
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80098dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098de:	9301      	str	r3, [sp, #4]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 80098e0:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80098e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098e4:	9402      	str	r4, [sp, #8]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	a810      	add	r0, sp, #64	; 0x40
 80098ea:	c807      	ldmia	r0, {r0, r1, r2}
 80098ec:	465b      	mov	r3, fp
 80098ee:	f7ff fb00 	bl	8008ef2 <lv_color_mix.isra.0>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80098f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 80098f8:	900d      	str	r0, [sp, #52]	; 0x34
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 80098fa:	9402      	str	r4, [sp, #8]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009900:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009902:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009904:	4658      	mov	r0, fp
 8009906:	f7ff faf4 	bl	8008ef2 <lv_color_mix.isra.0>
            lv_opa_t aa_opa = opa >> 1;
 800990a:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800990c:	900e      	str	r0, [sp, #56]	; 0x38
            lv_opa_t aa_opa = opa >> 1;
 800990e:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8009910:	9b08      	ldr	r3, [sp, #32]
 8009912:	9600      	str	r6, [sp, #0]
 8009914:	fa1f f488 	uxth.w	r4, r8
 8009918:	4423      	add	r3, r4
 800991a:	b21d      	sxth	r5, r3
 800991c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800991e:	4423      	add	r3, r4
 8009920:	fa0f f883 	sxth.w	r8, r3
 8009924:	464a      	mov	r2, r9
 8009926:	4603      	mov	r3, r0
 8009928:	4641      	mov	r1, r8
 800992a:	4628      	mov	r0, r5
 800992c:	f7fe fb2f 	bl	8007f8e <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	9600      	str	r6, [sp, #0]
 8009934:	1b1f      	subs	r7, r3, r4
 8009936:	b23f      	sxth	r7, r7
 8009938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800993a:	464a      	mov	r2, r9
 800993c:	4641      	mov	r1, r8
 800993e:	4638      	mov	r0, r7
 8009940:	f7fe fb25 	bl	8007f8e <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 8009944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009946:	9600      	str	r6, [sp, #0]
 8009948:	1b1c      	subs	r4, r3, r4
 800994a:	b224      	sxth	r4, r4
 800994c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800994e:	464a      	mov	r2, r9
 8009950:	4621      	mov	r1, r4
 8009952:	4638      	mov	r0, r7
 8009954:	f7fe fb1b 	bl	8007f8e <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8009958:	9600      	str	r6, [sp, #0]
 800995a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995c:	464a      	mov	r2, r9
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f7fe fb14 	bl	8007f8e <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 8009966:	9b04      	ldr	r3, [sp, #16]
 8009968:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 81be 	beq.w	8009cee <lv_draw_rect+0xd6a>
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	7d9b      	ldrb	r3, [r3, #22]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 81b9 	beq.w	8009cee <lv_draw_rect+0xd6a>
 800997c:	9b04      	ldr	r3, [sp, #16]
 800997e:	7ddb      	ldrb	r3, [r3, #23]
 8009980:	2b0f      	cmp	r3, #15
 8009982:	f240 81b4 	bls.w	8009cee <lv_draw_rect+0xd6a>
    uint16_t radius = style->body.radius;
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	f8b3 b00c 	ldrh.w	fp, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800998c:	f7fd fdba 	bl	8007504 <lv_refr_get_disp_refreshing>
 8009990:	f002 f86e 	bl	800ba70 <lv_disp_get_antialiasing>
 8009994:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8009998:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800999c:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 80099a0:	3101      	adds	r1, #1
 80099a2:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 80099a4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80099a8:	4680      	mov	r8, r0
 80099aa:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80099ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ae:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 80099b0:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80099b2:	28ff      	cmp	r0, #255	; 0xff
 80099b4:	9804      	ldr	r0, [sp, #16]
    lv_coord_t bwidth = style->body.border.width;
 80099b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80099ba:	7dc4      	ldrb	r4, [r0, #23]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80099bc:	bf18      	it	ne
 80099be:	9809      	ldrne	r0, [sp, #36]	; 0x24
    bwidth--;
 80099c0:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80099c2:	bf18      	it	ne
 80099c4:	4344      	mulne	r4, r0
    bwidth--;
 80099c6:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 80099ca:	9804      	ldr	r0, [sp, #16]
    bwidth--;
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	b2b6      	uxth	r6, r6
 80099d0:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 80099d2:	7d85      	ldrb	r5, [r0, #22]
    lv_color_t color      = style->body.border.color;
 80099d4:	6907      	ldr	r7, [r0, #16]
    bwidth--;
 80099d6:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 80099d8:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80099da:	4658      	mov	r0, fp
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 80099dc:	bf18      	it	ne
 80099de:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 80099e2:	9306      	str	r3, [sp, #24]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80099e4:	f7ff fa6a 	bl	8008ebc <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 80099e8:	9b06      	ldr	r3, [sp, #24]
 80099ea:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 80099ec:	bfbd      	ittte	lt
 80099ee:	1a32      	sublt	r2, r6, r0
 80099f0:	eba2 0208 	sublt.w	r2, r2, r8
 80099f4:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 80099f6:	2200      	movge	r2, #0
 80099f8:	9206      	str	r2, [sp, #24]
    if(style->body.radius == 0) {
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
        corner_size = radius + aa;
 8009a00:	bfa8      	it	ge
 8009a02:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009a06:	4683      	mov	fp, r0
        corner_size = radius + aa;
 8009a08:	bfa8      	it	ge
 8009a0a:	b21b      	sxthge	r3, r3
 8009a0c:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 8009a10:	2900      	cmp	r1, #0
 8009a12:	f040 8522 	bne.w	800a45a <lv_draw_rect+0x14d6>
        if(part & LV_BORDER_TOP) {
 8009a16:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8009a1a:	b1a2      	cbz	r2, 8009a46 <lv_draw_rect+0xac2>
            work_area.x1 = coords->x1;
 8009a1c:	f8ba 3000 	ldrh.w	r3, [sl]
 8009a20:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x2;
 8009a24:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009a28:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1;
 8009a2c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8009a30:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 8009a34:	4433      	add	r3, r6
 8009a36:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	4649      	mov	r1, r9
 8009a40:	a82e      	add	r0, sp, #184	; 0xb8
 8009a42:	f7fe fafb 	bl	800803c <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 8009a46:	0729      	lsls	r1, r5, #28
 8009a48:	d520      	bpl.n	8009a8c <lv_draw_rect+0xb08>
            work_area.x1 = coords->x2 - bwidth;
 8009a4a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 8009a4e:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - bwidth;
 8009a52:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8009a54:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 8009a58:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8009a5c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009a60:	9a05      	ldr	r2, [sp, #20]
 8009a62:	bf08      	it	eq
 8009a64:	2200      	moveq	r2, #0
 8009a66:	4413      	add	r3, r2
 8009a68:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8009a6c:	9a05      	ldr	r2, [sp, #20]
 8009a6e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009a72:	f015 0f01 	tst.w	r5, #1
 8009a76:	bf08      	it	eq
 8009a78:	2200      	moveq	r2, #0
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 8009a80:	463a      	mov	r2, r7
 8009a82:	4623      	mov	r3, r4
 8009a84:	4649      	mov	r1, r9
 8009a86:	a82e      	add	r0, sp, #184	; 0xb8
 8009a88:	f7fe fad8 	bl	800803c <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 8009a8c:	f015 0f04 	tst.w	r5, #4
 8009a90:	f005 0501 	and.w	r5, r5, #1
 8009a94:	d020      	beq.n	8009ad8 <lv_draw_rect+0xb54>
            work_area.x1 = coords->x1;
 8009a96:	f9ba 3000 	ldrsh.w	r3, [sl]
 8009a9a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + bwidth;
 8009a9e:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8009aa0:	9a05      	ldr	r2, [sp, #20]
            work_area.x2 = coords->x1 + bwidth;
 8009aa2:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 8009aa6:	f1b8 0f00 	cmp.w	r8, #0
 8009aaa:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009aae:	bf08      	it	eq
 8009ab0:	2200      	moveq	r2, #0
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 8009ab8:	9a05      	ldr	r2, [sp, #20]
 8009aba:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	bf08      	it	eq
 8009ac2:	2200      	moveq	r2, #0
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	9205      	str	r2, [sp, #20]
 8009ac8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 8009acc:	463a      	mov	r2, r7
 8009ace:	4623      	mov	r3, r4
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	a82e      	add	r0, sp, #184	; 0xb8
 8009ad4:	f7fe fab2 	bl	800803c <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 8009ad8:	b1a5      	cbz	r5, 8009b04 <lv_draw_rect+0xb80>
            work_area.x1 = coords->x1;
 8009ada:	f8ba 3000 	ldrh.w	r3, [sl]
 8009ade:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x2;
 8009ae2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009ae6:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - bwidth;
 8009aea:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8009aee:	1b9e      	subs	r6, r3, r6
 8009af0:	f8ad 60ba 	strh.w	r6, [sp, #186]	; 0xba
            work_area.y2 = coords->y2;
 8009af4:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 8009af8:	463a      	mov	r2, r7
 8009afa:	4623      	mov	r3, r4
 8009afc:	4649      	mov	r1, r9
 8009afe:	a82e      	add	r0, sp, #184	; 0xb8
 8009b00:	f7fe fa9c 	bl	800803c <lv_draw_fill>
        if(style->body.radius != 0) {
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	f000 80ef 	beq.w	8009cee <lv_draw_rect+0xd6a>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009b10:	f7fd fcf8 	bl	8007504 <lv_refr_get_disp_refreshing>
 8009b14:	f001 ffac 	bl	800ba70 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 8009b18:	9b04      	ldr	r3, [sp, #16]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009b1a:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_coord_t bwidth     = style->body.border.width;
 8009b1c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
    lv_color_t color      = style->body.border.color;
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_border_part_t part = style->body.border.part;
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	7d9b      	ldrb	r3, [r3, #22]
 8009b28:	9306      	str	r3, [sp, #24]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 8009b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2c:	2bff      	cmp	r3, #255	; 0xff
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	bf18      	it	ne
 8009b32:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8009b34:	7ddb      	ldrb	r3, [r3, #23]
 8009b36:	bf1c      	itt	ne
 8009b38:	4353      	mulne	r3, r2
 8009b3a:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8009b3e:	9308      	str	r3, [sp, #32]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8009b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    uint16_t radius       = style->body.radius;
 8009b42:	b2ad      	uxth	r5, r5
    bwidth--;
 8009b44:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f040 85d7 	bne.w	800a6fa <lv_draw_rect+0x1776>
    bwidth--;
 8009b4c:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 8009b4e:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009b52:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009b56:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009b5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b62:	3101      	adds	r1, #1
 8009b64:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009b66:	b212      	sxth	r2, r2
 8009b68:	b209      	sxth	r1, r1
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7ff f9a6 	bl	8008ebc <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8009b70:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009b74:	f8ba 2000 	ldrh.w	r2, [sl]
    lb_origo.y = coords->y2 - radius - aa;
 8009b78:	f8ba b006 	ldrh.w	fp, [sl, #6]
    lt_origo.x = coords->x1 + radius + aa;
 8009b7c:	441a      	add	r2, r3
 8009b7e:	4402      	add	r2, r0
 8009b80:	b292      	uxth	r2, r2
 8009b82:	9207      	str	r2, [sp, #28]
    lt_origo.y = coords->y1 + radius + aa;
 8009b84:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009b88:	441a      	add	r2, r3
 8009b8a:	4402      	add	r2, r0
 8009b8c:	b292      	uxth	r2, r2
    lb_origo.y = coords->y2 - radius - aa;
 8009b8e:	ebab 0b00 	sub.w	fp, fp, r0
    lt_origo.y = coords->y1 + radius + aa;
 8009b92:	9205      	str	r2, [sp, #20]
    lb_origo.y = coords->y2 - radius - aa;
 8009b94:	ebab 0b03 	sub.w	fp, fp, r3
    lt_origo.y = coords->y1 + radius + aa;
 8009b98:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8009b9c:	9212      	str	r2, [sp, #72]	; 0x48
    lb_origo.y = coords->y2 - radius - aa;
 8009b9e:	fa1f fb8b 	uxth.w	fp, fp
 8009ba2:	fa0f f28b 	sxth.w	r2, fp
 8009ba6:	9213      	str	r2, [sp, #76]	; 0x4c
    rt_origo.x = coords->x2 - radius - aa;
 8009ba8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009bac:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009bae:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 8009bb0:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8009bb2:	b207      	sxth	r7, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 8009bb4:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 8009bb6:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 8009bb8:	463a      	mov	r2, r7
 8009bba:	a926      	add	r1, sp, #152	; 0x98
 8009bbc:	a82a      	add	r0, sp, #168	; 0xa8
    lv_coord_t radius_in = radius - bwidth;
 8009bbe:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 8009bc0:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir_out, &tmp_out, radius);
 8009bc2:	f002 f986 	bl	800bed2 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 8009bc6:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8009bc8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009bcc:	a928      	add	r1, sp, #160	; 0xa0
 8009bce:	a82c      	add	r0, sp, #176	; 0xb0
    lv_coord_t radius_in = radius - bwidth;
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 8009bd2:	f002 f97e 	bl	800bed2 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t out_y_seg_start = 0;
 8009bda:	9310      	str	r3, [sp, #64]	; 0x40
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bde:	3b01      	subs	r3, #1
 8009be0:	9318      	str	r3, [sp, #96]	; 0x60
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	f003 0309 	and.w	r3, r3, #9
 8009be8:	9311      	str	r3, [sp, #68]	; 0x44
    while(cir_out.y <= cir_out.x) {
 8009bea:	f9bd a0aa 	ldrsh.w	sl, [sp, #170]	; 0xaa
 8009bee:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
 8009bf2:	4552      	cmp	r2, sl
 8009bf4:	f280 8584 	bge.w	800a700 <lv_draw_rect+0x177c>
    if(aa) {
 8009bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d077      	beq.n	8009cee <lv_draw_rect+0xd6a>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009bfe:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8009c02:	ebaa 0a05 	sub.w	sl, sl, r5
 8009c06:	fa0f f38a 	sxth.w	r3, sl
 8009c0a:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0e:	fa1f fa87 	uxth.w	sl, r7
 8009c12:	3301      	adds	r3, #1
 8009c14:	4453      	add	r3, sl
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009c16:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009c18:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 8009c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c1c:	b231      	sxth	r1, r6
 8009c1e:	428b      	cmp	r3, r1
 8009c20:	f300 87f7 	bgt.w	800ac12 <lv_draw_rect+0x1c8e>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8009c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c26:	1afd      	subs	r5, r7, r3
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c2c:	bfb8      	it	lt
 8009c2e:	426d      	neglt	r5, r5
 8009c30:	429d      	cmp	r5, r3
 8009c32:	d149      	bne.n	8009cc8 <lv_draw_rect+0xd44>
            lv_opa_t aa_opa = opa >> 1;
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	f003 0309 	and.w	r3, r3, #9
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d10c      	bne.n	8009c5c <lv_draw_rect+0xcd8>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 8009c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c44:	9400      	str	r4, [sp, #0]
 8009c46:	b2b8      	uxth	r0, r7
 8009c48:	eb0b 0100 	add.w	r1, fp, r0
 8009c4c:	4418      	add	r0, r3
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	464a      	mov	r2, r9
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	b209      	sxth	r1, r1
 8009c56:	b200      	sxth	r0, r0
 8009c58:	f7fe f999 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 8009c5c:	9b06      	ldr	r3, [sp, #24]
 8009c5e:	f003 0305 	and.w	r3, r3, #5
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	d10c      	bne.n	8009c80 <lv_draw_rect+0xcfc>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 8009c66:	9b07      	ldr	r3, [sp, #28]
 8009c68:	9400      	str	r4, [sp, #0]
 8009c6a:	b2b8      	uxth	r0, r7
 8009c6c:	eb0b 0100 	add.w	r1, fp, r0
 8009c70:	1a18      	subs	r0, r3, r0
 8009c72:	9b04      	ldr	r3, [sp, #16]
 8009c74:	464a      	mov	r2, r9
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	b209      	sxth	r1, r1
 8009c7a:	b200      	sxth	r0, r0
 8009c7c:	f7fe f987 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 8009c80:	9b06      	ldr	r3, [sp, #24]
 8009c82:	f003 0306 	and.w	r3, r3, #6
 8009c86:	2b06      	cmp	r3, #6
 8009c88:	d10c      	bne.n	8009ca4 <lv_draw_rect+0xd20>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 8009c8a:	9b05      	ldr	r3, [sp, #20]
 8009c8c:	9400      	str	r4, [sp, #0]
 8009c8e:	b2b8      	uxth	r0, r7
 8009c90:	1a19      	subs	r1, r3, r0
 8009c92:	9b07      	ldr	r3, [sp, #28]
 8009c94:	1a18      	subs	r0, r3, r0
 8009c96:	9b04      	ldr	r3, [sp, #16]
 8009c98:	464a      	mov	r2, r9
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	b209      	sxth	r1, r1
 8009c9e:	b200      	sxth	r0, r0
 8009ca0:	f7fe f975 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 8009ca4:	9b06      	ldr	r3, [sp, #24]
 8009ca6:	f003 030a 	and.w	r3, r3, #10
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	d10c      	bne.n	8009cc8 <lv_draw_rect+0xd44>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 8009cae:	9b05      	ldr	r3, [sp, #20]
 8009cb0:	9400      	str	r4, [sp, #0]
 8009cb2:	b2bf      	uxth	r7, r7
 8009cb4:	1bd9      	subs	r1, r3, r7
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	441f      	add	r7, r3
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	464a      	mov	r2, r9
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	b209      	sxth	r1, r1
 8009cc2:	b238      	sxth	r0, r7
 8009cc4:	f7fe f963 	bl	8007f8e <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 8009cc8:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 8009ccc:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
        seg_size     = in_y_seg_end - in_y_seg_start;
 8009cd2:	1b5b      	subs	r3, r3, r5
 8009cd4:	b21b      	sxth	r3, r3
 8009cd6:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 8009ce0:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009ce2:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 8009ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce6:	b221      	sxth	r1, r4
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	f301 802f 	bgt.w	800ad4c <lv_draw_rect+0x1dc8>
}
 8009cee:	b031      	add	sp, #196	; 0xc4
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8009cf4:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8009cf8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 8009cfc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8009d00:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 8009d04:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 8009d08:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8009d0c:	a92a      	add	r1, sp, #168	; 0xa8
 8009d0e:	4658      	mov	r0, fp
 8009d10:	f002 f8ef 	bl	800bef2 <lv_circ_next>
 8009d14:	f7ff bbd5 	b.w	80094c2 <lv_draw_rect+0x53e>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 8009d18:	0842      	lsrs	r2, r0, #1
 8009d1a:	1ac0      	subs	r0, r0, r3
 8009d1c:	fbb2 f2f6 	udiv	r2, r2, r6
 8009d20:	f801 2b01 	strb.w	r2, [r1], #1
 8009d24:	f7ff bbe0 	b.w	80094e8 <lv_draw_rect+0x564>
        point_l.y = ofs_l.y + curve_x[col];
 8009d28:	f837 b013 	ldrh.w	fp, [r7, r3, lsl #1]
 8009d2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d2e:	9906      	ldr	r1, [sp, #24]
 8009d30:	4458      	add	r0, fp
 8009d32:	b280      	uxth	r0, r0
 8009d34:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d36:	9808      	ldr	r0, [sp, #32]
 8009d38:	fa1f f288 	uxth.w	r2, r8
 8009d3c:	1a89      	subs	r1, r1, r2
 8009d3e:	4402      	add	r2, r0
 8009d40:	b209      	sxth	r1, r1
 8009d42:	b212      	sxth	r2, r2
 8009d44:	9110      	str	r1, [sp, #64]	; 0x40
 8009d46:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d48:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 8009d4a:	b12b      	cbz	r3, 8009d58 <lv_draw_rect+0xdd4>
 8009d4c:	187a      	adds	r2, r7, r1
 8009d4e:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 8009d52:	eba3 030b 	sub.w	r3, r3, fp
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	b21b      	sxth	r3, r3
 8009d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d5c:	f04f 0b00 	mov.w	fp, #0
 8009d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d62:	445b      	add	r3, fp
 8009d64:	b21b      	sxth	r3, r3
 8009d66:	930c      	str	r3, [sp, #48]	; 0x30
        for(d = 0; d < swidth; d++) {
 8009d68:	fa1f f38b 	uxth.w	r3, fp
 8009d6c:	42b3      	cmp	r3, r6
 8009d6e:	db03      	blt.n	8009d78 <lv_draw_rect+0xdf4>
 8009d70:	f108 0801 	add.w	r8, r8, #1
 8009d74:	f7ff bbd7 	b.w	8009526 <lv_draw_rect+0x5a2>
            if(diff == 0) {
 8009d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                px_opa = line_1d_blur[d];
 8009d7a:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 8009d7c:	b9b2      	cbnz	r2, 8009dac <lv_draw_rect+0xe28>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 8009d7e:	9b04      	ldr	r3, [sp, #16]
 8009d80:	9500      	str	r5, [sp, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d88:	464a      	mov	r2, r9
 8009d8a:	f7fe f900 	bl	8007f8e <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 8009d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d92:	4293      	cmp	r3, r2
 8009d94:	da07      	bge.n	8009da6 <lv_draw_rect+0xe22>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	9500      	str	r5, [sp, #0]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009da0:	464a      	mov	r2, r9
 8009da2:	f7fe f8f4 	bl	8007f8e <lv_draw_px>
 8009da6:	f10b 0b01 	add.w	fp, fp, #1
 8009daa:	e7d9      	b.n	8009d60 <lv_draw_rect+0xddc>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 8009dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	5ce3      	ldrb	r3, [r4, r3]
 8009db2:	441d      	add	r5, r3
 8009db4:	f3c5 0547 	ubfx	r5, r5, #1, #8
 8009db8:	e7e1      	b.n	8009d7e <lv_draw_rect+0xdfa>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 8009dba:	9a04      	ldr	r2, [sp, #16]
 8009dbc:	5ce3      	ldrb	r3, [r4, r3]
 8009dbe:	6992      	ldr	r2, [r2, #24]
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	a82e      	add	r0, sp, #184	; 0xb8
 8009dc4:	f7fe f93a 	bl	800803c <lv_draw_fill>
        area_mid.y1++;
 8009dc8:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        area_mid.y2++;
 8009dd2:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8009ddc:	462b      	mov	r3, r5
 8009dde:	f7ff bbb7 	b.w	8009550 <lv_draw_rect+0x5cc>
                work_area.y1 += 1;
 8009de2:	3301      	adds	r3, #1
 8009de4:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                work_area.y2 -= 1;
 8009de8:	3d01      	subs	r5, #1
 8009dea:	e412      	b.n	8009612 <lv_draw_rect+0x68e>
        if(style->body.radius != 0) {
 8009dec:	9a04      	ldr	r2, [sp, #16]
 8009dee:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
        lv_coord_t row_end   = coords->y2 - radius;
 8009df2:	1a2d      	subs	r5, r5, r0
 8009df4:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	d132      	bne.n	8009e60 <lv_draw_rect+0xedc>
        lv_coord_t row_start = coords->y1 + radius;
 8009dfa:	b21c      	sxth	r4, r3
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8009dfc:	fa5f f38b 	uxtb.w	r3, fp
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	f3c8 2307 	ubfx	r3, r8, #8, #8
                row_end -= 1;
 8009e0c:	b22d      	sxth	r5, r5
 8009e0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8009e12:	9307      	str	r3, [sp, #28]
        for(row = row_start; row <= row_end; row++) {
 8009e14:	42ac      	cmp	r4, r5
 8009e16:	f73f ac04 	bgt.w	8009622 <lv_draw_rect+0x69e>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8009e1a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8009e1e:	9a06      	ldr	r2, [sp, #24]
 8009e20:	9907      	ldr	r1, [sp, #28]
            work_area.y1 = row;
 8009e22:	f8ad 40ba 	strh.w	r4, [sp, #186]	; 0xba
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 8009e26:	1b1b      	subs	r3, r3, r4
 8009e28:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8009e2c:	fbb3 f3f6 	udiv	r3, r3, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	f3cb 4307 	ubfx	r3, fp, #16, #8
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	fa5f f088 	uxtb.w	r0, r8
 8009e44:	9b05      	ldr	r3, [sp, #20]
            work_area.y2 = row;
 8009e46:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 8009e4a:	f7ff f852 	bl	8008ef2 <lv_color_mix.isra.0>
 8009e4e:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 8009e50:	4602      	mov	r2, r0
 8009e52:	463b      	mov	r3, r7
 8009e54:	4649      	mov	r1, r9
 8009e56:	a82e      	add	r0, sp, #184	; 0xb8
 8009e58:	f7fe f8f0 	bl	800803c <lv_draw_fill>
 8009e5c:	b224      	sxth	r4, r4
 8009e5e:	e7d9      	b.n	8009e14 <lv_draw_rect+0xe90>
            if(aa) {
 8009e60:	b11c      	cbz	r4, 8009e6a <lv_draw_rect+0xee6>
                row_start += 2;
 8009e62:	1c9c      	adds	r4, r3, #2
 8009e64:	b224      	sxth	r4, r4
                row_end -= 2;
 8009e66:	3d02      	subs	r5, #2
 8009e68:	e7c8      	b.n	8009dfc <lv_draw_rect+0xe78>
                row_start += 1;
 8009e6a:	1c5c      	adds	r4, r3, #1
 8009e6c:	b224      	sxth	r4, r4
                row_end -= 1;
 8009e6e:	3d01      	subs	r5, #1
 8009e70:	e7c4      	b.n	8009dfc <lv_draw_rect+0xe78>
        if(aa) {
 8009e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d04e      	beq.n	8009f16 <lv_draw_rect+0xf92>
            if(out_x_last != cir.x) {
 8009e78:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 8009e7c:	4543      	cmp	r3, r8
 8009e7e:	d04a      	beq.n	8009f16 <lv_draw_rect+0xf92>
                out_y_seg_end       = cir.y;
 8009e80:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 8009e84:	931e      	str	r3, [sp, #120]	; 0x78
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009e86:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009e8a:	9311      	str	r3, [sp, #68]	; 0x44
 8009e8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e90:	1a9b      	subs	r3, r3, r2
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	9312      	str	r3, [sp, #72]	; 0x48
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e98:	eba3 0508 	sub.w	r5, r3, r8
 8009e9c:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	fbb5 f5f3 	udiv	r5, r5, r3
 8009ea6:	fa5f f38b 	uxtb.w	r3, fp
 8009eaa:	9313      	str	r3, [sp, #76]	; 0x4c
 8009eac:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8009eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8009eb2:	f3cb 4307 	ubfx	r3, fp, #16, #8
 8009eb6:	9315      	str	r3, [sp, #84]	; 0x54
 8009eb8:	b2e3      	uxtb	r3, r4
 8009eba:	9316      	str	r3, [sp, #88]	; 0x58
 8009ebc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009ec0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ec2:	f3c4 4307 	ubfx	r3, r4, #16, #8
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009ec6:	9301      	str	r3, [sp, #4]
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ec8:	b2ed      	uxtb	r5, r5
 8009eca:	9318      	str	r3, [sp, #96]	; 0x60
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ece:	9502      	str	r5, [sp, #8]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	a813      	add	r0, sp, #76	; 0x4c
 8009ed4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8009ed6:	f7ff f80c 	bl	8008ef2 <lv_color_mix.isra.0>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ee0:	9300      	str	r3, [sp, #0]
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009ee2:	900d      	str	r0, [sp, #52]	; 0x34
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009ee4:	9502      	str	r5, [sp, #8]
 8009ee6:	a816      	add	r0, sp, #88	; 0x58
 8009ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eea:	c807      	ldmia	r0, {r0, r1, r2}
 8009eec:	f7ff f801 	bl	8008ef2 <lv_color_mix.isra.0>
 8009ef0:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009ef2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009ef4:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009ef6:	fa1f f388 	uxth.w	r3, r8
 8009efa:	931a      	str	r3, [sp, #104]	; 0x68
 8009efc:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009efe:	900e      	str	r0, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009f00:	9322      	str	r3, [sp, #136]	; 0x88
 8009f02:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 8009f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	f300 808c 	bgt.w	800a026 <lv_draw_rect+0x10a2>
                out_y_seg_start = out_y_seg_end;
 8009f0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
                out_x_last      = cir.x;
 8009f10:	f9bd 8098 	ldrsh.w	r8, [sp, #152]	; 0x98
                out_y_seg_start = out_y_seg_end;
 8009f14:	930f      	str	r3, [sp, #60]	; 0x3c
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8009f16:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8009f1a:	f9bd 509a 	ldrsh.w	r5, [sp, #154]	; 0x9a
 8009f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8009f22:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8009f26:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8009f2a:	f9bd 70aa 	ldrsh.w	r7, [sp, #170]	; 0xaa
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8009f2e:	18ee      	adds	r6, r5, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8009f30:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 8009f34:	930e      	str	r3, [sp, #56]	; 0x38
 8009f36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f38:	4413      	add	r3, r2
 8009f3a:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8009f3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8009f3e:	1a9a      	subs	r2, r3, r2
 8009f40:	4291      	cmp	r1, r2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8009f42:	eba3 0505 	sub.w	r5, r3, r5
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8009f46:	f040 87a1 	bne.w	800ae8c <lv_draw_rect+0x1f08>
        if(mid_top_refr != 0) {
 8009f4a:	42af      	cmp	r7, r5
 8009f4c:	d008      	beq.n	8009f60 <lv_draw_rect+0xfdc>
            if(mcolor.full == gcolor.full)
 8009f4e:	455c      	cmp	r4, fp
 8009f50:	f040 8124 	bne.w	800a19c <lv_draw_rect+0x1218>
                act_color = mcolor;
 8009f54:	4622      	mov	r2, r4
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	4649      	mov	r1, r9
 8009f5a:	a82a      	add	r0, sp, #168	; 0xa8
 8009f5c:	f7fe f86e 	bl	800803c <lv_draw_fill>
        if(mid_bot_refr != 0) {
 8009f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f62:	42b3      	cmp	r3, r6
 8009f64:	d008      	beq.n	8009f78 <lv_draw_rect+0xff4>
            if(mcolor.full == gcolor.full)
 8009f66:	455c      	cmp	r4, fp
 8009f68:	f040 8135 	bne.w	800a1d6 <lv_draw_rect+0x1252>
                act_color = mcolor;
 8009f6c:	4622      	mov	r2, r4
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8009f6e:	9b05      	ldr	r3, [sp, #20]
 8009f70:	4649      	mov	r1, r9
 8009f72:	a82c      	add	r0, sp, #176	; 0xb0
 8009f74:	f7fe f862 	bl	800803c <lv_draw_fill>
        if(edge_bot_refr != 0) {
 8009f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d008      	beq.n	8009f92 <lv_draw_rect+0x100e>
            if(mcolor.full == gcolor.full)
 8009f80:	455c      	cmp	r4, fp
 8009f82:	f040 8145 	bne.w	800a210 <lv_draw_rect+0x128c>
                act_color = mcolor;
 8009f86:	4622      	mov	r2, r4
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	a82e      	add	r0, sp, #184	; 0xb8
 8009f8e:	f7fe f855 	bl	800803c <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f94:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 8009f98:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8009f9c:	9807      	ldr	r0, [sp, #28]
 8009f9e:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009fa0:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009fa2:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009fa4:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009fa6:	1a41      	subs	r1, r0, r1
 8009fa8:	9200      	str	r2, [sp, #0]
 8009faa:	a82c      	add	r0, sp, #176	; 0xb0
 8009fac:	b21b      	sxth	r3, r3
 8009fae:	b209      	sxth	r1, r1
 8009fb0:	f001 fed6 	bl	800bd60 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb6:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8009fba:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 8009fbe:	9807      	ldr	r0, [sp, #28]
 8009fc0:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009fc2:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009fc4:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009fc6:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009fc8:	1a41      	subs	r1, r0, r1
 8009fca:	9200      	str	r2, [sp, #0]
 8009fcc:	a82e      	add	r0, sp, #184	; 0xb8
 8009fce:	b21b      	sxth	r3, r3
 8009fd0:	b209      	sxth	r1, r1
 8009fd2:	f001 fec5 	bl	800bd60 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd8:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 8009fdc:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8009fe0:	9807      	ldr	r0, [sp, #28]
 8009fe2:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009fe4:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009fe6:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009fe8:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009fea:	1a41      	subs	r1, r0, r1
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	a82a      	add	r0, sp, #168	; 0xa8
 8009ff0:	b21b      	sxth	r3, r3
 8009ff2:	b209      	sxth	r1, r1
 8009ff4:	f001 feb4 	bl	800bd60 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ffa:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8009ffe:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 800a002:	9807      	ldr	r0, [sp, #28]
 800a004:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a006:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a008:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a00a:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a00c:	1a41      	subs	r1, r0, r1
 800a00e:	9200      	str	r2, [sp, #0]
 800a010:	a828      	add	r0, sp, #160	; 0xa0
 800a012:	b21b      	sxth	r3, r3
 800a014:	b209      	sxth	r1, r1
 800a016:	f001 fea3 	bl	800bd60 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800a01a:	a925      	add	r1, sp, #148	; 0x94
 800a01c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a01e:	f001 ff68 	bl	800bef2 <lv_circ_next>
 800a022:	f7ff bba3 	b.w	800976c <lv_draw_rect+0x7e8>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a026:	9b12      	ldr	r3, [sp, #72]	; 0x48
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a028:	9a05      	ldr	r2, [sp, #20]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	f000 8093 	beq.w	800a156 <lv_draw_rect+0x11d2>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe ff85 	bl	8008f40 <antialias_get_opa_circ>
 800a036:	4606      	mov	r6, r0
 800a038:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a03c:	9319      	str	r3, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a03e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	f9bd 7088 	ldrsh.w	r7, [sp, #136]	; 0x88
 800a046:	9600      	str	r6, [sp, #0]
 800a048:	189d      	adds	r5, r3, r2
 800a04a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a04c:	441d      	add	r5, r3
 800a04e:	b22d      	sxth	r5, r5
 800a050:	4639      	mov	r1, r7
 800a052:	4628      	mov	r0, r5
 800a054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a056:	464a      	mov	r2, r9
 800a058:	f7fd ff99 	bl	8007f8e <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a060:	9600      	str	r6, [sp, #0]
 800a062:	eba3 0802 	sub.w	r8, r3, r2
 800a066:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a068:	eba8 0803 	sub.w	r8, r8, r3
 800a06c:	fa0f f888 	sxth.w	r8, r8
 800a070:	4639      	mov	r1, r7
 800a072:	4640      	mov	r0, r8
 800a074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a076:	464a      	mov	r2, r9
 800a078:	f7fd ff89 	bl	8007f8e <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a07e:	9600      	str	r6, [sp, #0]
 800a080:	1e5f      	subs	r7, r3, #1
 800a082:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a084:	1aff      	subs	r7, r7, r3
 800a086:	b23f      	sxth	r7, r7
 800a088:	4639      	mov	r1, r7
 800a08a:	4640      	mov	r0, r8
 800a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08e:	464a      	mov	r2, r9
 800a090:	f7fd ff7d 	bl	8007f8e <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a094:	4639      	mov	r1, r7
 800a096:	4628      	mov	r0, r5
 800a098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09a:	9600      	str	r6, [sp, #0]
 800a09c:	464a      	mov	r2, r9
 800a09e:	f7fd ff76 	bl	8007f8e <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0a6:	1a9f      	subs	r7, r3, r2
 800a0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0aa:	441f      	add	r7, r3
 800a0ac:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 800a0b0:	9b06      	ldr	r3, [sp, #24]
 800a0b2:	fbb7 f7f3 	udiv	r7, r7, r3
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a0b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0b8:	9301      	str	r3, [sp, #4]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a0ba:	b2ff      	uxtb	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a0bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0be:	9702      	str	r7, [sp, #8]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	a816      	add	r0, sp, #88	; 0x58
 800a0c4:	c807      	ldmia	r0, {r0, r1, r2}
 800a0c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0c8:	f7fe ff13 	bl	8008ef2 <lv_color_mix.isra.0>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a0cc:	9b08      	ldr	r3, [sp, #32]
 800a0ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0d0:	9600      	str	r6, [sp, #0]
 800a0d2:	f103 0801 	add.w	r8, r3, #1
 800a0d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a0d8:	4498      	add	r8, r3
 800a0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0dc:	4413      	add	r3, r2
 800a0de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0e0:	4413      	add	r3, r2
 800a0e2:	b21b      	sxth	r3, r3
 800a0e4:	9320      	str	r3, [sp, #128]	; 0x80
 800a0e6:	fa0f f888 	sxth.w	r8, r8
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a0ea:	4605      	mov	r5, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	464a      	mov	r2, r9
 800a0f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7fd ff4b 	bl	8007f8e <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800a0f8:	9b07      	ldr	r3, [sp, #28]
 800a0fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a0fc:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a0fe:	9600      	str	r6, [sp, #0]
 800a100:	3b01      	subs	r3, #1
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	b21b      	sxth	r3, r3
 800a106:	931f      	str	r3, [sp, #124]	; 0x7c
 800a108:	464a      	mov	r2, r9
 800a10a:	462b      	mov	r3, r5
 800a10c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800a10e:	f7fd ff3e 	bl	8007f8e <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a112:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a118:	9702      	str	r7, [sp, #8]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	a813      	add	r0, sp, #76	; 0x4c
 800a11e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800a120:	f7fe fee7 	bl	8008ef2 <lv_color_mix.isra.0>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a126:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a128:	9600      	str	r6, [sp, #0]
 800a12a:	1a9f      	subs	r7, r3, r2
 800a12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a12e:	1aff      	subs	r7, r7, r3
 800a130:	b23f      	sxth	r7, r7
 800a132:	4603      	mov	r3, r0
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a134:	4605      	mov	r5, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a136:	464a      	mov	r2, r9
 800a138:	4639      	mov	r1, r7
 800a13a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800a13c:	f7fd ff27 	bl	8007f8e <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800a140:	462b      	mov	r3, r5
 800a142:	9600      	str	r6, [sp, #0]
 800a144:	464a      	mov	r2, r9
 800a146:	4639      	mov	r1, r7
 800a148:	4640      	mov	r0, r8
 800a14a:	f7fd ff20 	bl	8007f8e <lv_draw_px>
 800a14e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a150:	3301      	adds	r3, #1
 800a152:	9310      	str	r3, [sp, #64]	; 0x40
 800a154:	e6d5      	b.n	8009f02 <lv_draw_rect+0xf7e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a156:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a158:	f7fd fe1c 	bl	8007d94 <lv_draw_aa_get_opa>
 800a15c:	9b05      	ldr	r3, [sp, #20]
 800a15e:	1a18      	subs	r0, r3, r0
 800a160:	b2c6      	uxtb	r6, r0
 800a162:	e769      	b.n	800a038 <lv_draw_rect+0x10b4>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a164:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a168:	9a06      	ldr	r2, [sp, #24]
 800a16a:	1a5b      	subs	r3, r3, r1
 800a16c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a170:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a174:	b2db      	uxtb	r3, r3
 800a176:	9302      	str	r3, [sp, #8]
 800a178:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a188:	fa5f f38b 	uxtb.w	r3, fp
 800a18c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a190:	b2e0      	uxtb	r0, r4
 800a192:	f7fe feae 	bl	8008ef2 <lv_color_mix.isra.0>
 800a196:	4602      	mov	r2, r0
 800a198:	f000 be7c 	b.w	800ae94 <lv_draw_rect+0x1f10>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a19c:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a1a0:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a1aa:	9a06      	ldr	r2, [sp, #24]
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	9302      	str	r3, [sp, #8]
 800a1b4:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a1c4:	fa5f f38b 	uxtb.w	r3, fp
 800a1c8:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a1cc:	b2e0      	uxtb	r0, r4
 800a1ce:	f7fe fe90 	bl	8008ef2 <lv_color_mix.isra.0>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	e6bf      	b.n	8009f56 <lv_draw_rect+0xfd2>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a1d6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a1da:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a1e4:	9a06      	ldr	r2, [sp, #24]
 800a1e6:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	9302      	str	r3, [sp, #8]
 800a1ee:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a1fe:	fa5f f38b 	uxtb.w	r3, fp
 800a202:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a206:	b2e0      	uxtb	r0, r4
 800a208:	f7fe fe73 	bl	8008ef2 <lv_color_mix.isra.0>
 800a20c:	4602      	mov	r2, r0
 800a20e:	e6ae      	b.n	8009f6e <lv_draw_rect+0xfea>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a210:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a214:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800a218:	1a9b      	subs	r3, r3, r2
 800a21a:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a21e:	9a06      	ldr	r2, [sp, #24]
 800a220:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a224:	b2db      	uxtb	r3, r3
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a238:	fa5f f38b 	uxtb.w	r3, fp
 800a23c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a240:	b2e0      	uxtb	r0, r4
 800a242:	f7fe fe56 	bl	8008ef2 <lv_color_mix.isra.0>
 800a246:	4602      	mov	r2, r0
 800a248:	e69e      	b.n	8009f88 <lv_draw_rect+0x1004>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a24a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a24e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a258:	9a06      	ldr	r2, [sp, #24]
 800a25a:	fbb3 f3f2 	udiv	r3, r3, r2
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	9302      	str	r3, [sp, #8]
 800a262:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a272:	fa5f f38b 	uxtb.w	r3, fp
 800a276:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a27a:	b2e0      	uxtb	r0, r4
 800a27c:	f7fe fe39 	bl	8008ef2 <lv_color_mix.isra.0>
 800a280:	4602      	mov	r2, r0
 800a282:	f7ff ba7d 	b.w	8009780 <lv_draw_rect+0x7fc>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a286:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a290:	9a06      	ldr	r2, [sp, #24]
 800a292:	fbb3 f3f2 	udiv	r3, r3, r2
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a296:	b2db      	uxtb	r3, r3
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a2aa:	fa5f f38b 	uxtb.w	r3, fp
 800a2ae:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a2b2:	b2e0      	uxtb	r0, r4
 800a2b4:	f7fe fe1d 	bl	8008ef2 <lv_color_mix.isra.0>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	f7ff ba70 	b.w	800979e <lv_draw_rect+0x81a>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a2be:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a2c2:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800a2c6:	1a9b      	subs	r3, r3, r2
 800a2c8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a2cc:	9a06      	ldr	r2, [sp, #24]
 800a2ce:	fbb3 f3f2 	udiv	r3, r3, r2
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a2e6:	fa5f f38b 	uxtb.w	r3, fp
 800a2ea:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a2ee:	b2e0      	uxtb	r0, r4
 800a2f0:	f7fe fdff 	bl	8008ef2 <lv_color_mix.isra.0>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	f7ff ba5b 	b.w	80097b0 <lv_draw_rect+0x82c>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a2fa:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a2fe:	1a9b      	subs	r3, r3, r2
 800a300:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a304:	9a06      	ldr	r2, [sp, #24]
 800a306:	fbb3 f3f2 	udiv	r3, r3, r2
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800a31e:	fa5f f38b 	uxtb.w	r3, fp
 800a322:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a326:	b2e0      	uxtb	r0, r4
 800a328:	f7fe fde3 	bl	8008ef2 <lv_color_mix.isra.0>
 800a32c:	4602      	mov	r2, r0
 800a32e:	f7ff ba4e 	b.w	80097ce <lv_draw_rect+0x84a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a332:	9a05      	ldr	r2, [sp, #20]
 800a334:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a336:	f7fd fd2d 	bl	8007d94 <lv_draw_aa_get_opa>
 800a33a:	9b05      	ldr	r3, [sp, #20]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a33c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a33e:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a342:	1a18      	subs	r0, r3, r0
 800a344:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a348:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	189c      	adds	r4, r3, r2
 800a34e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a350:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a352:	b2c6      	uxtb	r6, r0
 800a354:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a356:	4629      	mov	r1, r5
 800a358:	4620      	mov	r0, r4
 800a35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35c:	9600      	str	r6, [sp, #0]
 800a35e:	464a      	mov	r2, r9
 800a360:	f7fd fe15 	bl	8007f8e <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a368:	9600      	str	r6, [sp, #0]
 800a36a:	1a9f      	subs	r7, r3, r2
 800a36c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a36e:	1aff      	subs	r7, r7, r3
 800a370:	b23f      	sxth	r7, r7
 800a372:	4629      	mov	r1, r5
 800a374:	4638      	mov	r0, r7
 800a376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a378:	464a      	mov	r2, r9
 800a37a:	f7fd fe08 	bl	8007f8e <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a380:	9600      	str	r6, [sp, #0]
 800a382:	1e5d      	subs	r5, r3, #1
 800a384:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a386:	1aed      	subs	r5, r5, r3
 800a388:	b22d      	sxth	r5, r5
 800a38a:	4629      	mov	r1, r5
 800a38c:	4638      	mov	r0, r7
 800a38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a390:	464a      	mov	r2, r9
 800a392:	f7fd fdfc 	bl	8007f8e <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a396:	4629      	mov	r1, r5
 800a398:	4620      	mov	r0, r4
 800a39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39c:	9600      	str	r6, [sp, #0]
 800a39e:	464a      	mov	r2, r9
 800a3a0:	f7fd fdf5 	bl	8007f8e <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a3a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a3aa:	1a9c      	subs	r4, r3, r2
 800a3ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a3ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a3b0:	441c      	add	r4, r3
 800a3b2:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800a3b6:	9b06      	ldr	r3, [sp, #24]
 800a3b8:	fbb4 f4f3 	udiv	r4, r4, r3
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3be:	9301      	str	r3, [sp, #4]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a3c0:	b2e4      	uxtb	r4, r4
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a3c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3c4:	9402      	str	r4, [sp, #8]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4658      	mov	r0, fp
 800a3ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3cc:	f7fe fd91 	bl	8008ef2 <lv_color_mix.isra.0>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a3d4:	9600      	str	r6, [sp, #0]
 800a3d6:	1c5f      	adds	r7, r3, #1
 800a3d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a3da:	441f      	add	r7, r3
 800a3dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3de:	4413      	add	r3, r2
 800a3e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3e2:	4413      	add	r3, r2
 800a3e4:	b21b      	sxth	r3, r3
 800a3e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3e8:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a3ea:	4605      	mov	r5, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f7fd fdcb 	bl	8007f8e <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800a3f8:	9b07      	ldr	r3, [sp, #28]
 800a3fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3fc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a3fe:	9600      	str	r6, [sp, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	b21b      	sxth	r3, r3
 800a406:	931a      	str	r3, [sp, #104]	; 0x68
 800a408:	464a      	mov	r2, r9
 800a40a:	462b      	mov	r3, r5
 800a40c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a40e:	f7fd fdbe 	bl	8007f8e <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a418:	9402      	str	r4, [sp, #8]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	a810      	add	r0, sp, #64	; 0x40
 800a41e:	c807      	ldmia	r0, {r0, r1, r2}
 800a420:	465b      	mov	r3, fp
 800a422:	f7fe fd66 	bl	8008ef2 <lv_color_mix.isra.0>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800a426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a42a:	9600      	str	r6, [sp, #0]
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a430:	1a9b      	subs	r3, r3, r2
 800a432:	b21c      	sxth	r4, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a434:	4605      	mov	r5, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800a436:	4603      	mov	r3, r0
 800a438:	464a      	mov	r2, r9
 800a43a:	4621      	mov	r1, r4
 800a43c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a43e:	f7fd fda6 	bl	8007f8e <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800a442:	462b      	mov	r3, r5
 800a444:	9600      	str	r6, [sp, #0]
 800a446:	464a      	mov	r2, r9
 800a448:	4621      	mov	r1, r4
 800a44a:	4638      	mov	r0, r7
 800a44c:	f7fd fd9f 	bl	8007f8e <lv_draw_px>
 800a450:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a452:	3301      	adds	r3, #1
 800a454:	9316      	str	r3, [sp, #88]	; 0x58
 800a456:	f7ff ba2d 	b.w	80098b4 <lv_draw_rect+0x930>
    corner_size++;
 800a45a:	3301      	adds	r3, #1
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	9305      	str	r3, [sp, #20]
    if(part & LV_BORDER_TOP)
 800a460:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800a464:	9307      	str	r3, [sp, #28]
 800a466:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	f000 8143 	beq.w	800a6f6 <lv_draw_rect+0x1772>
        work_area.y1 = coords->y1 + corner_size;
 800a470:	9a05      	ldr	r2, [sp, #20]
 800a472:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 800a474:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    if(part & LV_BORDER_BOTTOM)
 800a478:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 800a47c:	bf18      	it	ne
 800a47e:	9a05      	ldrne	r2, [sp, #20]
    if(part & LV_BORDER_BOTTOM)
 800a480:	9308      	str	r3, [sp, #32]
 800a482:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 800a486:	bf14      	ite	ne
 800a488:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 800a48a:	eba3 030b 	subeq.w	r3, r3, fp
    if(part & LV_BORDER_LEFT) {
 800a48e:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 800a490:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
    if(part & LV_BORDER_LEFT) {
 800a494:	d50c      	bpl.n	800a4b0 <lv_draw_rect+0x152c>
        work_area.x1 = coords->x1;
 800a496:	f9ba 3000 	ldrsh.w	r3, [sl]
 800a49a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        work_area.x2 = work_area.x1 + bwidth;
 800a49e:	4433      	add	r3, r6
 800a4a0:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        lv_draw_fill(&work_area, mask, color, opa);
 800a4a4:	463a      	mov	r2, r7
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	a82e      	add	r0, sp, #184	; 0xb8
 800a4ac:	f7fd fdc6 	bl	800803c <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800a4b0:	072b      	lsls	r3, r5, #28
 800a4b2:	d50c      	bpl.n	800a4ce <lv_draw_rect+0x154a>
        work_area.x2 = coords->x2;
 800a4b4:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800a4b8:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        work_area.x1 = work_area.x2 - bwidth;
 800a4bc:	a830      	add	r0, sp, #192	; 0xc0
 800a4be:	1b9b      	subs	r3, r3, r6
 800a4c0:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 800a4c4:	463a      	mov	r2, r7
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	f7fd fdb7 	bl	800803c <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800a4ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a4d2:	9a05      	ldr	r2, [sp, #20]
 800a4d4:	f8ba 1000 	ldrh.w	r1, [sl]
 800a4d8:	1ad2      	subs	r2, r2, r3
 800a4da:	440a      	add	r2, r1
 800a4dc:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800a4e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	9a05      	ldr	r2, [sp, #20]
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
    if(part & LV_BORDER_TOP) {
 800a4ee:	9b07      	ldr	r3, [sp, #28]
 800a4f0:	b163      	cbz	r3, 800a50c <lv_draw_rect+0x1588>
        work_area.y1 = coords->y1;
 800a4f2:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800a4f6:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        work_area.y2 = coords->y1 + bwidth;
 800a4fa:	4433      	add	r3, r6
 800a4fc:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        lv_draw_fill(&work_area, mask, color, opa);
 800a500:	463a      	mov	r2, r7
 800a502:	4623      	mov	r3, r4
 800a504:	4649      	mov	r1, r9
 800a506:	a82e      	add	r0, sp, #184	; 0xb8
 800a508:	f7fd fd98 	bl	800803c <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	b163      	cbz	r3, 800a52a <lv_draw_rect+0x15a6>
        work_area.y2 = coords->y2;
 800a510:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a514:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        work_area.y1 = work_area.y2 - bwidth;
 800a518:	1b9b      	subs	r3, r3, r6
 800a51a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        lv_draw_fill(&work_area, mask, color, opa);
 800a51e:	463a      	mov	r2, r7
 800a520:	4623      	mov	r3, r4
 800a522:	4649      	mov	r1, r9
 800a524:	a82e      	add	r0, sp, #184	; 0xb8
 800a526:	f7fd fd89 	bl	800803c <lv_draw_fill>
    if(length_corr != 0) {
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d07b      	beq.n	800a628 <lv_draw_rect+0x16a4>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a530:	f005 0306 	and.w	r3, r5, #6
 800a534:	2b06      	cmp	r3, #6
 800a536:	d119      	bne.n	800a56c <lv_draw_rect+0x15e8>
            work_area.x1 = coords->x1;
 800a538:	f9ba 2000 	ldrsh.w	r2, [sl]
 800a53c:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + radius + aa;
 800a540:	fa1f f388 	uxth.w	r3, r8
 800a544:	441a      	add	r2, r3
 800a546:	445a      	add	r2, fp
 800a548:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800a54c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a550:	1c51      	adds	r1, r2, #1
 800a552:	440b      	add	r3, r1
 800a554:	445b      	add	r3, fp
            work_area.y2 = coords->y1 + bwidth;
 800a556:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800a558:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 800a55c:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a560:	4623      	mov	r3, r4
 800a562:	463a      	mov	r2, r7
 800a564:	4649      	mov	r1, r9
 800a566:	a82e      	add	r0, sp, #184	; 0xb8
 800a568:	f7fd fd68 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a56c:	f005 030a 	and.w	r3, r5, #10
 800a570:	2b0a      	cmp	r3, #10
 800a572:	d11a      	bne.n	800a5aa <lv_draw_rect+0x1626>
            work_area.x1 = coords->x2 - radius - aa;
 800a574:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800a578:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - radius - aa;
 800a57c:	fa1f f388 	uxth.w	r3, r8
 800a580:	eba1 020b 	sub.w	r2, r1, fp
 800a584:	1ad2      	subs	r2, r2, r3
 800a586:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800a58a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a58e:	1c51      	adds	r1, r2, #1
 800a590:	440b      	add	r3, r1
 800a592:	445b      	add	r3, fp
            work_area.y2 = coords->y1 + bwidth;
 800a594:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800a596:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 800a59a:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a59e:	4623      	mov	r3, r4
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	a82e      	add	r0, sp, #184	; 0xb8
 800a5a6:	f7fd fd49 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a5aa:	f005 0305 	and.w	r3, r5, #5
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d11a      	bne.n	800a5e8 <lv_draw_rect+0x1664>
            work_area.x1 = coords->x1;
 800a5b2:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 800a5b6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 800a5ba:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + radius + aa;
 800a5be:	fa1f f188 	uxth.w	r1, r8
 800a5c2:	440a      	add	r2, r1
 800a5c4:	445a      	add	r2, fp
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800a5c6:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 800a5c8:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - bwidth;
 800a5cc:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800a5ce:	440b      	add	r3, r1
 800a5d0:	eba3 030b 	sub.w	r3, r3, fp
            work_area.y1 = coords->y2 - bwidth;
 800a5d4:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800a5d8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a5dc:	463a      	mov	r2, r7
 800a5de:	4623      	mov	r3, r4
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	a82e      	add	r0, sp, #184	; 0xb8
 800a5e4:	f7fd fd2a 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a5e8:	f005 0309 	and.w	r3, r5, #9
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	d11b      	bne.n	800a628 <lv_draw_rect+0x16a4>
            work_area.x1 = coords->x2 - radius - aa;
 800a5f0:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800a5f4:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - radius - aa;
 800a5f8:	fa1f f288 	uxth.w	r2, r8
 800a5fc:	eba1 030b 	sub.w	r3, r1, fp
 800a600:	1a9b      	subs	r3, r3, r2
 800a602:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.y1 = coords->y2 - bwidth;
 800a606:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800a60a:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 800a60c:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800a60e:	4413      	add	r3, r2
 800a610:	eba3 030b 	sub.w	r3, r3, fp
 800a614:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a618:	463a      	mov	r2, r7
 800a61a:	4623      	mov	r3, r4
 800a61c:	4649      	mov	r1, r9
 800a61e:	a82e      	add	r0, sp, #184	; 0xb8
            work_area.y1 = coords->y2 - bwidth;
 800a620:	f8ad 60ba 	strh.w	r6, [sp, #186]	; 0xba
            lv_draw_fill(&work_area, mask, color, opa);
 800a624:	f7fd fd0a 	bl	800803c <lv_draw_fill>
    if(style->body.radius == 0) {
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f47f aa68 	bne.w	8009b04 <lv_draw_rect+0xb80>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800a634:	f015 0f06 	tst.w	r5, #6
 800a638:	d015      	beq.n	800a666 <lv_draw_rect+0x16e2>
            work_area.x1 = coords->x1;
 800a63a:	f9ba 2000 	ldrsh.w	r2, [sl]
 800a63e:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + aa;
 800a642:	fa1f f388 	uxth.w	r3, r8
 800a646:	441a      	add	r2, r3
 800a648:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1;
 800a64c:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800a650:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + aa;
 800a654:	4413      	add	r3, r2
 800a656:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a65a:	463a      	mov	r2, r7
 800a65c:	4623      	mov	r3, r4
 800a65e:	4649      	mov	r1, r9
 800a660:	a82e      	add	r0, sp, #184	; 0xb8
 800a662:	f7fd fceb 	bl	800803c <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800a666:	f015 0f0a 	tst.w	r5, #10
 800a66a:	d015      	beq.n	800a698 <lv_draw_rect+0x1714>
            work_area.x1 = coords->x2 - aa;
 800a66c:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 800a670:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - aa;
 800a674:	fa1f f388 	uxth.w	r3, r8
 800a678:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 800a67a:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 800a67e:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            work_area.y2 = coords->y1 + aa;
 800a682:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 800a684:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + aa;
 800a688:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a68c:	463a      	mov	r2, r7
 800a68e:	4623      	mov	r3, r4
 800a690:	4649      	mov	r1, r9
 800a692:	a82e      	add	r0, sp, #184	; 0xb8
 800a694:	f7fd fcd2 	bl	800803c <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800a698:	f015 0f05 	tst.w	r5, #5
 800a69c:	d015      	beq.n	800a6ca <lv_draw_rect+0x1746>
            work_area.x1 = coords->x1;
 800a69e:	f9ba 2000 	ldrsh.w	r2, [sl]
 800a6a2:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + aa;
 800a6a6:	fa1f f388 	uxth.w	r3, r8
 800a6aa:	441a      	add	r2, r3
 800a6ac:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - aa;
 800a6b0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 800a6b4:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            work_area.y1 = coords->y2 - aa;
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            lv_draw_fill(&work_area, mask, color, opa);
 800a6be:	463a      	mov	r2, r7
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	a82e      	add	r0, sp, #184	; 0xb8
 800a6c6:	f7fd fcb9 	bl	800803c <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800a6ca:	f015 0f09 	tst.w	r5, #9
 800a6ce:	f43f aa19 	beq.w	8009b04 <lv_draw_rect+0xb80>
            work_area.x1 = coords->x2 - aa;
 800a6d2:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800a6d6:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - aa;
 800a6da:	fa1f f888 	uxth.w	r8, r8
 800a6de:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 800a6e2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 800a6e6:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y2 - aa;
 800a6ea:	eba3 0808 	sub.w	r8, r3, r8
 800a6ee:	f8ad 80ba 	strh.w	r8, [sp, #186]	; 0xba
 800a6f2:	f7ff b9ff 	b.w	8009af4 <lv_draw_rect+0xb70>
        work_area.y1 = coords->y1 + radius;
 800a6f6:	4403      	add	r3, r0
 800a6f8:	e6bc      	b.n	800a474 <lv_draw_rect+0x14f0>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a6fa:	3c02      	subs	r4, #2
 800a6fc:	f7ff ba27 	b.w	8009b4e <lv_draw_rect+0xbca>
        if(cir_in.y < cir_in.x) {
 800a700:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800a704:	f9bd 10b2 	ldrsh.w	r1, [sp, #178]	; 0xb2
 800a708:	4299      	cmp	r1, r3
 800a70a:	f280 8133 	bge.w	800a974 <lv_draw_rect+0x19f0>
            act_w1 = cir_out.x - cir_in.x;
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	b21b      	sxth	r3, r3
 800a712:	930c      	str	r3, [sp, #48]	; 0x30
            act_w2 = act_w1 - 1;
 800a714:	930e      	str	r3, [sp, #56]	; 0x38
        if(aa) {
 800a716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a718:	b38b      	cbz	r3, 800a77e <lv_draw_rect+0x17fa>
            if(out_x_last != cir_out.x) {
 800a71a:	42ba      	cmp	r2, r7
 800a71c:	d013      	beq.n	800a746 <lv_draw_rect+0x17c2>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a720:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a724:	b2bf      	uxth	r7, r7
 800a726:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a728:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a72c:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a72e:	fa0f f888 	sxth.w	r8, r8
 800a732:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a734:	9314      	str	r3, [sp, #80]	; 0x50
 800a736:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 800a738:	4588      	cmp	r8, r1
 800a73a:	f300 8123 	bgt.w	800a984 <lv_draw_rect+0x1a00>
                out_x_last      = cir_out.x;
 800a73e:	f9bd 70a8 	ldrsh.w	r7, [sp, #168]	; 0xa8
 800a742:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
            if(in_x_last != cir_in.x) {
 800a746:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800a74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d016      	beq.n	800a77e <lv_draw_rect+0x17fa>
                in_y_seg_end        = cir_out.y;
 800a750:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800a754:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
                in_y_seg_end        = cir_out.y;
 800a758:	9314      	str	r3, [sp, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800a75a:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a75e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a760:	4413      	add	r3, r2
 800a762:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800a764:	fa0f fa8a 	sxth.w	sl, sl
 800a768:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a76a:	9317      	str	r3, [sp, #92]	; 0x5c
 800a76c:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 800a76e:	458a      	cmp	sl, r1
 800a770:	f300 81a7 	bgt.w	800aac2 <lv_draw_rect+0x1b3e>
                in_x_last      = cir_in.x;
 800a774:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800a778:	9309      	str	r3, [sp, #36]	; 0x24
                in_y_seg_start = in_y_seg_end;
 800a77a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a77c:	930d      	str	r3, [sp, #52]	; 0x34
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a780:	2b09      	cmp	r3, #9
 800a782:	d131      	bne.n	800a7e8 <lv_draw_rect+0x1864>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800a784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a786:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a78a:	4413      	add	r3, r2
 800a78c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a78e:	b29b      	uxth	r3, r3
 800a790:	1a9a      	subs	r2, r3, r2
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800a792:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800a796:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800a79a:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800a79e:	445b      	add	r3, fp
 800a7a0:	b21b      	sxth	r3, r3
 800a7a2:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800a7a6:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a7aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	a82e      	add	r0, sp, #184	; 0xb8
 800a7b2:	f7fd fc43 	bl	800803c <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800a7b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7b8:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800a7bc:	4413      	add	r3, r2
 800a7be:	b21b      	sxth	r3, r3
 800a7c0:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800a7c4:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800a7c8:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ce:	445b      	add	r3, fp
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	1a9a      	subs	r2, r3, r2
 800a7d4:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800a7d8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a7dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	a82e      	add	r0, sp, #184	; 0xb8
 800a7e4:	f7fd fc2a 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	f003 0305 	and.w	r3, r3, #5
 800a7ee:	2b05      	cmp	r3, #5
 800a7f0:	d131      	bne.n	800a856 <lv_draw_rect+0x18d2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800a800:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800a804:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a80a:	445b      	add	r3, fp
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	1a9a      	subs	r2, r3, r2
 800a810:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800a814:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	4649      	mov	r1, r9
 800a81e:	a82e      	add	r0, sp, #184	; 0xb8
 800a820:	f7fd fc0c 	bl	800803c <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800a824:	9a07      	ldr	r2, [sp, #28]
 800a826:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a82a:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800a82c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800a82e:	b29b      	uxth	r3, r3
 800a830:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800a834:	4413      	add	r3, r2
 800a836:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800a83a:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            lv_draw_fill(&circ_area, mask, color, opa);
 800a83e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800a840:	445b      	add	r3, fp
 800a842:	b21b      	sxth	r3, r3
 800a844:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800a848:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a84c:	4649      	mov	r1, r9
 800a84e:	9b08      	ldr	r3, [sp, #32]
 800a850:	a82e      	add	r0, sp, #184	; 0xb8
 800a852:	f7fd fbf3 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a856:	9b06      	ldr	r3, [sp, #24]
 800a858:	f003 0306 	and.w	r3, r3, #6
 800a85c:	2b06      	cmp	r3, #6
 800a85e:	d139      	bne.n	800a8d4 <lv_draw_rect+0x1950>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800a860:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800a864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a866:	18d1      	adds	r1, r2, r3
 800a868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a86a:	1ad2      	subs	r2, r2, r3
 800a86c:	4291      	cmp	r1, r2
 800a86e:	dd17      	ble.n	800a8a0 <lv_draw_rect+0x191c>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800a870:	9907      	ldr	r1, [sp, #28]
 800a872:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 800a876:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800a878:	990e      	ldr	r1, [sp, #56]	; 0x38
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800a87a:	b292      	uxth	r2, r2
 800a87c:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800a880:	440a      	add	r2, r1
 800a882:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800a886:	9a05      	ldr	r2, [sp, #20]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	b21b      	sxth	r3, r3
 800a88c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800a890:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
                lv_draw_fill(&circ_area, mask, color, opa);
 800a894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	4649      	mov	r1, r9
 800a89a:	a82e      	add	r0, sp, #184	; 0xb8
 800a89c:	f7fd fbce 	bl	800803c <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800a8a0:	9a07      	ldr	r2, [sp, #28]
 800a8a2:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800a8aa:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800a8ac:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800a8b0:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800a8b4:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a8b8:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800a8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a8c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	a82e      	add	r0, sp, #184	; 0xb8
 800a8d0:	f7fd fbb4 	bl	800803c <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	f003 030a 	and.w	r3, r3, #10
 800a8da:	2b0a      	cmp	r3, #10
 800a8dc:	d139      	bne.n	800a952 <lv_draw_rect+0x19ce>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800a8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8e0:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800a8e4:	4413      	add	r3, r2
 800a8e6:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800a8e8:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800a8ea:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800a8ee:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800a8f2:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a8f6:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800a8f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800a900:	4413      	add	r3, r2
 800a902:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800a906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	4649      	mov	r1, r9
 800a90c:	a82e      	add	r0, sp, #184	; 0xb8
 800a90e:	f7fd fb95 	bl	800803c <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800a912:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800a916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a918:	18d1      	adds	r1, r2, r3
 800a91a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a91c:	1ad2      	subs	r2, r2, r3
 800a91e:	4291      	cmp	r1, r2
 800a920:	dd17      	ble.n	800a952 <lv_draw_rect+0x19ce>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800a922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a924:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	; 0xa8
 800a928:	4411      	add	r1, r2
 800a92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a92c:	b289      	uxth	r1, r1
 800a92e:	1a8a      	subs	r2, r1, r2
 800a930:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800a934:	9a05      	ldr	r2, [sp, #20]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800a936:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	b21b      	sxth	r3, r3
 800a93e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800a942:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
                lv_draw_fill(&circ_area, mask, color, opa);
 800a946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a948:	9b08      	ldr	r3, [sp, #32]
 800a94a:	4649      	mov	r1, r9
 800a94c:	a82e      	add	r0, sp, #184	; 0xb8
 800a94e:	f7fd fb75 	bl	800803c <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800a952:	a926      	add	r1, sp, #152	; 0x98
 800a954:	a82a      	add	r0, sp, #168	; 0xa8
 800a956:	f001 facc 	bl	800bef2 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800a95a:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800a95e:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800a962:	429a      	cmp	r2, r3
 800a964:	f6bf a941 	bge.w	8009bea <lv_draw_rect+0xc66>
            lv_circ_next(&cir_in, &tmp_in);
 800a968:	a928      	add	r1, sp, #160	; 0xa0
 800a96a:	a82c      	add	r0, sp, #176	; 0xb0
 800a96c:	f001 fac1 	bl	800bef2 <lv_circ_next>
 800a970:	f7ff b93b 	b.w	8009bea <lv_draw_rect+0xc66>
            act_w1 = cir_out.x - cir_out.y;
 800a974:	eba2 030a 	sub.w	r3, r2, sl
 800a978:	b29b      	uxth	r3, r3
 800a97a:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800a97c:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800a97e:	910c      	str	r1, [sp, #48]	; 0x30
            act_w2 = act_w1 - 1;
 800a980:	b21b      	sxth	r3, r3
 800a982:	e6c7      	b.n	800a714 <lv_draw_rect+0x1790>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a984:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a988:	9a08      	ldr	r2, [sp, #32]
 800a98a:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a98c:	f000 8093 	beq.w	800aab6 <lv_draw_rect+0x1b32>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a990:	f7fe fad6 	bl	8008f40 <antialias_get_opa_circ>
 800a994:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a998:	2b09      	cmp	r3, #9
 800a99a:	d11c      	bne.n	800a9d6 <lv_draw_rect+0x1a52>
 800a99c:	b2b3      	uxth	r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a99e:	eb0b 0105 	add.w	r1, fp, r5
 800a9a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9a4:	4419      	add	r1, r3
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	9400      	str	r4, [sp, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800a9b0:	464a      	mov	r2, r9
 800a9b2:	b209      	sxth	r1, r1
 800a9b4:	f7fd faeb 	bl	8007f8e <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	9400      	str	r4, [sp, #0]
 800a9bc:	1958      	adds	r0, r3, r5
 800a9be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9c0:	f10b 0101 	add.w	r1, fp, #1
 800a9c4:	4418      	add	r0, r3
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	4439      	add	r1, r7
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	464a      	mov	r2, r9
 800a9ce:	b209      	sxth	r1, r1
 800a9d0:	b200      	sxth	r0, r0
 800a9d2:	f7fd fadc 	bl	8007f8e <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	f003 0305 	and.w	r3, r3, #5
 800a9dc:	2b05      	cmp	r3, #5
 800a9de:	d11f      	bne.n	800aa20 <lv_draw_rect+0x1a9c>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a9e0:	9a07      	ldr	r2, [sp, #28]
 800a9e2:	9400      	str	r4, [sp, #0]
 800a9e4:	b2b3      	uxth	r3, r6
 800a9e6:	1b50      	subs	r0, r2, r5
 800a9e8:	9310      	str	r3, [sp, #64]	; 0x40
 800a9ea:	1ac0      	subs	r0, r0, r3
 800a9ec:	f10b 0e01 	add.w	lr, fp, #1
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	44be      	add	lr, r7
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	464a      	mov	r2, r9
 800a9f8:	fa0f f18e 	sxth.w	r1, lr
 800a9fc:	b200      	sxth	r0, r0
 800a9fe:	f7fd fac6 	bl	8007f8e <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800aa02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa04:	9400      	str	r4, [sp, #0]
 800aa06:	eb0b 0105 	add.w	r1, fp, r5
 800aa0a:	4419      	add	r1, r3
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	1e58      	subs	r0, r3, #1
 800aa10:	9b04      	ldr	r3, [sp, #16]
 800aa12:	1bc0      	subs	r0, r0, r7
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	464a      	mov	r2, r9
 800aa18:	b209      	sxth	r1, r1
 800aa1a:	b200      	sxth	r0, r0
 800aa1c:	f7fd fab7 	bl	8007f8e <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800aa20:	9b06      	ldr	r3, [sp, #24]
 800aa22:	f003 0306 	and.w	r3, r3, #6
 800aa26:	2b06      	cmp	r3, #6
 800aa28:	d11e      	bne.n	800aa68 <lv_draw_rect+0x1ae4>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800aa2a:	9a05      	ldr	r2, [sp, #20]
 800aa2c:	9400      	str	r4, [sp, #0]
 800aa2e:	b2b3      	uxth	r3, r6
 800aa30:	1b51      	subs	r1, r2, r5
 800aa32:	9310      	str	r3, [sp, #64]	; 0x40
 800aa34:	1ac9      	subs	r1, r1, r3
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	1e58      	subs	r0, r3, #1
 800aa3a:	9b04      	ldr	r3, [sp, #16]
 800aa3c:	1bc0      	subs	r0, r0, r7
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	464a      	mov	r2, r9
 800aa42:	b209      	sxth	r1, r1
 800aa44:	b200      	sxth	r0, r0
 800aa46:	f7fd faa2 	bl	8007f8e <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	9400      	str	r4, [sp, #0]
 800aa4e:	1e59      	subs	r1, r3, #1
 800aa50:	9b07      	ldr	r3, [sp, #28]
 800aa52:	1b58      	subs	r0, r3, r5
 800aa54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa56:	1ac0      	subs	r0, r0, r3
 800aa58:	9b04      	ldr	r3, [sp, #16]
 800aa5a:	1bc9      	subs	r1, r1, r7
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	464a      	mov	r2, r9
 800aa60:	b209      	sxth	r1, r1
 800aa62:	b200      	sxth	r0, r0
 800aa64:	f7fd fa93 	bl	8007f8e <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800aa68:	9b06      	ldr	r3, [sp, #24]
 800aa6a:	f003 030a 	and.w	r3, r3, #10
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d11f      	bne.n	800aab2 <lv_draw_rect+0x1b2e>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800aa72:	9a05      	ldr	r2, [sp, #20]
 800aa74:	9400      	str	r4, [sp, #0]
 800aa76:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800aa7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa7c:	b2b3      	uxth	r3, r6
 800aa7e:	1950      	adds	r0, r2, r5
 800aa80:	9310      	str	r3, [sp, #64]	; 0x40
 800aa82:	4418      	add	r0, r3
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	ebae 0e07 	sub.w	lr, lr, r7
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	fa0f f18e 	sxth.w	r1, lr
 800aa92:	b200      	sxth	r0, r0
 800aa94:	f7fd fa7b 	bl	8007f8e <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	9400      	str	r4, [sp, #0]
 800aa9c:	1b59      	subs	r1, r3, r5
 800aa9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaa0:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800aaa4:	1ac9      	subs	r1, r1, r3
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	464a      	mov	r2, r9
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	b209      	sxth	r1, r1
 800aaae:	f7fd fa6e 	bl	8007f8e <lv_draw_px>
 800aab2:	3601      	adds	r6, #1
 800aab4:	e63f      	b.n	800a736 <lv_draw_rect+0x17b2>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aab6:	f7fd f96d 	bl	8007d94 <lv_draw_aa_get_opa>
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	1a18      	subs	r0, r3, r0
 800aabe:	b2c4      	uxtb	r4, r0
 800aac0:	e769      	b.n	800a996 <lv_draw_rect+0x1a12>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800aac2:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800aac6:	9a08      	ldr	r2, [sp, #32]
 800aac8:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800aaca:	f000 809e 	beq.w	800ac0a <lv_draw_rect+0x1c86>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800aace:	f7fe fa37 	bl	8008f40 <antialias_get_opa_circ>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	1a18      	subs	r0, r3, r0
 800aad6:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800aad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aada:	2b09      	cmp	r3, #9
 800aadc:	d10a      	bne.n	800aaf4 <lv_draw_rect+0x1b70>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800aade:	eb0b 0106 	add.w	r1, fp, r6
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	9500      	str	r5, [sp, #0]
 800aae6:	4421      	add	r1, r4
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aaec:	464a      	mov	r2, r9
 800aaee:	b209      	sxth	r1, r1
 800aaf0:	f7fd fa4d 	bl	8007f8e <lv_draw_px>
 800aaf4:	9b06      	ldr	r3, [sp, #24]
 800aaf6:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	9315      	str	r3, [sp, #84]	; 0x54
 800aafe:	d10e      	bne.n	800ab1e <lv_draw_rect+0x1b9a>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab02:	9500      	str	r5, [sp, #0]
 800ab04:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800ab08:	4419      	add	r1, r3
 800ab0a:	9b07      	ldr	r3, [sp, #28]
 800ab0c:	1b98      	subs	r0, r3, r6
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	1b00      	subs	r0, r0, r4
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	464a      	mov	r2, r9
 800ab16:	b209      	sxth	r1, r1
 800ab18:	b200      	sxth	r0, r0
 800ab1a:	f7fd fa38 	bl	8007f8e <lv_draw_px>
 800ab1e:	9b06      	ldr	r3, [sp, #24]
 800ab20:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ab24:	f1b8 0f06 	cmp.w	r8, #6
 800ab28:	d10e      	bne.n	800ab48 <lv_draw_rect+0x1bc4>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	9500      	str	r5, [sp, #0]
 800ab2e:	1b99      	subs	r1, r3, r6
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	1c58      	adds	r0, r3, #1
 800ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab36:	1ac0      	subs	r0, r0, r3
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	1b09      	subs	r1, r1, r4
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	464a      	mov	r2, r9
 800ab40:	b209      	sxth	r1, r1
 800ab42:	b200      	sxth	r0, r0
 800ab44:	f7fd fa23 	bl	8007f8e <lv_draw_px>
 800ab48:	9b06      	ldr	r3, [sp, #24]
 800ab4a:	f003 030a 	and.w	r3, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ab4e:	2b0a      	cmp	r3, #10
 800ab50:	9316      	str	r3, [sp, #88]	; 0x58
 800ab52:	d10e      	bne.n	800ab72 <lv_draw_rect+0x1bee>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800ab54:	9b05      	ldr	r3, [sp, #20]
 800ab56:	9500      	str	r5, [sp, #0]
 800ab58:	1c59      	adds	r1, r3, #1
 800ab5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5c:	1ac9      	subs	r1, r1, r3
 800ab5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab60:	1998      	adds	r0, r3, r6
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	4420      	add	r0, r4
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	464a      	mov	r2, r9
 800ab6a:	b209      	sxth	r1, r1
 800ab6c:	b200      	sxth	r0, r0
 800ab6e:	f7fd fa0e 	bl	8007f8e <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800ab72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab76:	4423      	add	r3, r4
 800ab78:	3a01      	subs	r2, #1
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d043      	beq.n	800ac06 <lv_draw_rect+0x1c82>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ab7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	d10e      	bne.n	800aba2 <lv_draw_rect+0x1c1e>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800ab84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab86:	9500      	str	r5, [sp, #0]
 800ab88:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800ab8c:	4419      	add	r1, r3
 800ab8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab90:	1998      	adds	r0, r3, r6
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	4420      	add	r0, r4
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	464a      	mov	r2, r9
 800ab9a:	b209      	sxth	r1, r1
 800ab9c:	b200      	sxth	r0, r0
 800ab9e:	f7fd f9f6 	bl	8007f8e <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800aba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d10e      	bne.n	800abc6 <lv_draw_rect+0x1c42>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	9500      	str	r5, [sp, #0]
 800abac:	1c58      	adds	r0, r3, #1
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	eb0b 0106 	add.w	r1, fp, r6
 800abb4:	1ac0      	subs	r0, r0, r3
 800abb6:	9b04      	ldr	r3, [sp, #16]
 800abb8:	4421      	add	r1, r4
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	464a      	mov	r2, r9
 800abbe:	b209      	sxth	r1, r1
 800abc0:	b200      	sxth	r0, r0
 800abc2:	f7fd f9e4 	bl	8007f8e <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800abc6:	f1b8 0f06 	cmp.w	r8, #6
 800abca:	d10e      	bne.n	800abea <lv_draw_rect+0x1c66>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800abcc:	9b05      	ldr	r3, [sp, #20]
 800abce:	9500      	str	r5, [sp, #0]
 800abd0:	1c59      	adds	r1, r3, #1
 800abd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd4:	1ac9      	subs	r1, r1, r3
 800abd6:	9b07      	ldr	r3, [sp, #28]
 800abd8:	1b98      	subs	r0, r3, r6
 800abda:	9b04      	ldr	r3, [sp, #16]
 800abdc:	1b00      	subs	r0, r0, r4
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	464a      	mov	r2, r9
 800abe2:	b209      	sxth	r1, r1
 800abe4:	b200      	sxth	r0, r0
 800abe6:	f7fd f9d2 	bl	8007f8e <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800abea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800abec:	2b0a      	cmp	r3, #10
 800abee:	d10a      	bne.n	800ac06 <lv_draw_rect+0x1c82>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800abf0:	9b05      	ldr	r3, [sp, #20]
 800abf2:	9500      	str	r5, [sp, #0]
 800abf4:	1b99      	subs	r1, r3, r6
 800abf6:	9b04      	ldr	r3, [sp, #16]
 800abf8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	1b09      	subs	r1, r1, r4
 800abfe:	464a      	mov	r2, r9
 800ac00:	b209      	sxth	r1, r1
 800ac02:	f7fd f9c4 	bl	8007f8e <lv_draw_px>
 800ac06:	3401      	adds	r4, #1
 800ac08:	e5b0      	b.n	800a76c <lv_draw_rect+0x17e8>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ac0a:	f7fd f8c3 	bl	8007d94 <lv_draw_aa_get_opa>
 800ac0e:	4605      	mov	r5, r0
 800ac10:	e762      	b.n	800aad8 <lv_draw_rect+0x1b54>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800ac12:	9a08      	ldr	r2, [sp, #32]
 800ac14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ac16:	f7fd f8bd 	bl	8007d94 <lv_draw_aa_get_opa>
 800ac1a:	9b08      	ldr	r3, [sp, #32]
 800ac1c:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	f003 0309 	and.w	r3, r3, #9
 800ac24:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800ac26:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ac28:	d11b      	bne.n	800ac62 <lv_draw_rect+0x1cde>
 800ac2a:	fa1f f886 	uxth.w	r8, r6
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	9400      	str	r4, [sp, #0]
 800ac32:	eb0b 0105 	add.w	r1, fp, r5
 800ac36:	4441      	add	r1, r8
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800ac3e:	464a      	mov	r2, r9
 800ac40:	b209      	sxth	r1, r1
 800ac42:	f7fd f9a4 	bl	8007f8e <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	9400      	str	r4, [sp, #0]
 800ac4a:	1958      	adds	r0, r3, r5
 800ac4c:	f10b 0101 	add.w	r1, fp, #1
 800ac50:	9b04      	ldr	r3, [sp, #16]
 800ac52:	4451      	add	r1, sl
 800ac54:	4440      	add	r0, r8
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	464a      	mov	r2, r9
 800ac5a:	b209      	sxth	r1, r1
 800ac5c:	b200      	sxth	r0, r0
 800ac5e:	f7fd f996 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ac62:	9b06      	ldr	r3, [sp, #24]
 800ac64:	f003 0305 	and.w	r3, r3, #5
 800ac68:	2b05      	cmp	r3, #5
 800ac6a:	d120      	bne.n	800acae <lv_draw_rect+0x1d2a>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800ac6c:	9b07      	ldr	r3, [sp, #28]
 800ac6e:	9400      	str	r4, [sp, #0]
 800ac70:	fa1f f886 	uxth.w	r8, r6
 800ac74:	1b58      	subs	r0, r3, r5
 800ac76:	f10b 0e01 	add.w	lr, fp, #1
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	44d6      	add	lr, sl
 800ac7e:	eba0 0008 	sub.w	r0, r0, r8
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	464a      	mov	r2, r9
 800ac86:	fa0f f18e 	sxth.w	r1, lr
 800ac8a:	b200      	sxth	r0, r0
 800ac8c:	f7fd f97f 	bl	8007f8e <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ac90:	9b07      	ldr	r3, [sp, #28]
 800ac92:	9400      	str	r4, [sp, #0]
 800ac94:	1e58      	subs	r0, r3, #1
 800ac96:	eb0b 0105 	add.w	r1, fp, r5
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	4441      	add	r1, r8
 800ac9e:	eba0 000a 	sub.w	r0, r0, sl
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	464a      	mov	r2, r9
 800aca6:	b209      	sxth	r1, r1
 800aca8:	b200      	sxth	r0, r0
 800acaa:	f7fd f970 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	f003 0306 	and.w	r3, r3, #6
 800acb4:	2b06      	cmp	r3, #6
 800acb6:	d121      	bne.n	800acfc <lv_draw_rect+0x1d78>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800acb8:	9b05      	ldr	r3, [sp, #20]
 800acba:	9400      	str	r4, [sp, #0]
 800acbc:	1b59      	subs	r1, r3, r5
 800acbe:	9b07      	ldr	r3, [sp, #28]
 800acc0:	fa1f f886 	uxth.w	r8, r6
 800acc4:	1e58      	subs	r0, r3, #1
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	eba1 0108 	sub.w	r1, r1, r8
 800accc:	eba0 000a 	sub.w	r0, r0, sl
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	464a      	mov	r2, r9
 800acd4:	b209      	sxth	r1, r1
 800acd6:	b200      	sxth	r0, r0
 800acd8:	f7fd f959 	bl	8007f8e <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800acdc:	9b05      	ldr	r3, [sp, #20]
 800acde:	9400      	str	r4, [sp, #0]
 800ace0:	1e59      	subs	r1, r3, #1
 800ace2:	9b07      	ldr	r3, [sp, #28]
 800ace4:	1b58      	subs	r0, r3, r5
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	eba1 010a 	sub.w	r1, r1, sl
 800acec:	eba0 0008 	sub.w	r0, r0, r8
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	464a      	mov	r2, r9
 800acf4:	b209      	sxth	r1, r1
 800acf6:	b200      	sxth	r0, r0
 800acf8:	f7fd f949 	bl	8007f8e <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	f003 030a 	and.w	r3, r3, #10
 800ad02:	2b0a      	cmp	r3, #10
 800ad04:	d11f      	bne.n	800ad46 <lv_draw_rect+0x1dc2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800ad06:	9b05      	ldr	r3, [sp, #20]
 800ad08:	9400      	str	r4, [sp, #0]
 800ad0a:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800ad0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad10:	fa1f f886 	uxth.w	r8, r6
 800ad14:	1958      	adds	r0, r3, r5
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	ebae 0e0a 	sub.w	lr, lr, sl
 800ad1c:	4440      	add	r0, r8
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	464a      	mov	r2, r9
 800ad22:	fa0f f18e 	sxth.w	r1, lr
 800ad26:	b200      	sxth	r0, r0
 800ad28:	f7fd f931 	bl	8007f8e <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800ad2c:	9b05      	ldr	r3, [sp, #20]
 800ad2e:	9400      	str	r4, [sp, #0]
 800ad30:	1b59      	subs	r1, r3, r5
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	eba1 0108 	sub.w	r1, r1, r8
 800ad3e:	464a      	mov	r2, r9
 800ad40:	b209      	sxth	r1, r1
 800ad42:	f7fd f924 	bl	8007f8e <lv_draw_px>
 800ad46:	3601      	adds	r6, #1
 800ad48:	f7fe bf67 	b.w	8009c1a <lv_draw_rect+0xc96>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ad4c:	9a08      	ldr	r2, [sp, #32]
 800ad4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ad50:	f7fd f820 	bl	8007d94 <lv_draw_aa_get_opa>
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	f003 0a09 	and.w	sl, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ad5a:	f1ba 0f09 	cmp.w	sl, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ad5e:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ad60:	d10a      	bne.n	800ad78 <lv_draw_rect+0x1df4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800ad62:	eb0b 0105 	add.w	r1, fp, r5
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	9000      	str	r0, [sp, #0]
 800ad6a:	4421      	add	r1, r4
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad70:	464a      	mov	r2, r9
 800ad72:	b209      	sxth	r1, r1
 800ad74:	f7fd f90b 	bl	8007f8e <lv_draw_px>
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	f003 0305 	and.w	r3, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ad7e:	2b05      	cmp	r3, #5
 800ad80:	930c      	str	r3, [sp, #48]	; 0x30
 800ad82:	d10e      	bne.n	800ada2 <lv_draw_rect+0x1e1e>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800ad84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad86:	9600      	str	r6, [sp, #0]
 800ad88:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800ad8c:	4419      	add	r1, r3
 800ad8e:	9b07      	ldr	r3, [sp, #28]
 800ad90:	1b58      	subs	r0, r3, r5
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	1b00      	subs	r0, r0, r4
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	464a      	mov	r2, r9
 800ad9a:	b209      	sxth	r1, r1
 800ad9c:	b200      	sxth	r0, r0
 800ad9e:	f7fd f8f6 	bl	8007f8e <lv_draw_px>
 800ada2:	9b06      	ldr	r3, [sp, #24]
 800ada4:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ada8:	f1b8 0f06 	cmp.w	r8, #6
 800adac:	d10e      	bne.n	800adcc <lv_draw_rect+0x1e48>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	9600      	str	r6, [sp, #0]
 800adb2:	1b59      	subs	r1, r3, r5
 800adb4:	9b07      	ldr	r3, [sp, #28]
 800adb6:	1c58      	adds	r0, r3, #1
 800adb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adba:	1ac0      	subs	r0, r0, r3
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	1b09      	subs	r1, r1, r4
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	464a      	mov	r2, r9
 800adc4:	b209      	sxth	r1, r1
 800adc6:	b200      	sxth	r0, r0
 800adc8:	f7fd f8e1 	bl	8007f8e <lv_draw_px>
 800adcc:	9b06      	ldr	r3, [sp, #24]
 800adce:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800add2:	2f0a      	cmp	r7, #10
 800add4:	d10e      	bne.n	800adf4 <lv_draw_rect+0x1e70>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800add6:	9b05      	ldr	r3, [sp, #20]
 800add8:	9600      	str	r6, [sp, #0]
 800adda:	1c59      	adds	r1, r3, #1
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	1ac9      	subs	r1, r1, r3
 800ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade2:	1958      	adds	r0, r3, r5
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	4420      	add	r0, r4
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	464a      	mov	r2, r9
 800adec:	b209      	sxth	r1, r1
 800adee:	b200      	sxth	r0, r0
 800adf0:	f7fd f8cd 	bl	8007f8e <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800adf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adf8:	3b01      	subs	r3, #1
 800adfa:	4422      	add	r2, r4
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d042      	beq.n	800ae86 <lv_draw_rect+0x1f02>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ae00:	f1ba 0f09 	cmp.w	sl, #9
 800ae04:	d10e      	bne.n	800ae24 <lv_draw_rect+0x1ea0>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800ae06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae08:	9600      	str	r6, [sp, #0]
 800ae0a:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800ae0e:	4419      	add	r1, r3
 800ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae12:	1958      	adds	r0, r3, r5
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4420      	add	r0, r4
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	464a      	mov	r2, r9
 800ae1c:	b209      	sxth	r1, r1
 800ae1e:	b200      	sxth	r0, r0
 800ae20:	f7fd f8b5 	bl	8007f8e <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ae24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	d10e      	bne.n	800ae48 <lv_draw_rect+0x1ec4>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800ae2a:	9b07      	ldr	r3, [sp, #28]
 800ae2c:	9600      	str	r6, [sp, #0]
 800ae2e:	1c58      	adds	r0, r3, #1
 800ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae32:	eb0b 0105 	add.w	r1, fp, r5
 800ae36:	1ac0      	subs	r0, r0, r3
 800ae38:	9b04      	ldr	r3, [sp, #16]
 800ae3a:	4421      	add	r1, r4
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	464a      	mov	r2, r9
 800ae40:	b209      	sxth	r1, r1
 800ae42:	b200      	sxth	r0, r0
 800ae44:	f7fd f8a3 	bl	8007f8e <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ae48:	f1b8 0f06 	cmp.w	r8, #6
 800ae4c:	d10e      	bne.n	800ae6c <lv_draw_rect+0x1ee8>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800ae4e:	9b05      	ldr	r3, [sp, #20]
 800ae50:	9600      	str	r6, [sp, #0]
 800ae52:	1c59      	adds	r1, r3, #1
 800ae54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae56:	1ac9      	subs	r1, r1, r3
 800ae58:	9b07      	ldr	r3, [sp, #28]
 800ae5a:	1b58      	subs	r0, r3, r5
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	1b00      	subs	r0, r0, r4
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	464a      	mov	r2, r9
 800ae64:	b209      	sxth	r1, r1
 800ae66:	b200      	sxth	r0, r0
 800ae68:	f7fd f891 	bl	8007f8e <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ae6c:	2f0a      	cmp	r7, #10
 800ae6e:	d10a      	bne.n	800ae86 <lv_draw_rect+0x1f02>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800ae70:	9b05      	ldr	r3, [sp, #20]
 800ae72:	9600      	str	r6, [sp, #0]
 800ae74:	1b59      	subs	r1, r3, r5
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	1b09      	subs	r1, r1, r4
 800ae7e:	464a      	mov	r2, r9
 800ae80:	b209      	sxth	r1, r1
 800ae82:	f7fd f884 	bl	8007f8e <lv_draw_px>
 800ae86:	3401      	adds	r4, #1
 800ae88:	f7fe bf2c 	b.w	8009ce4 <lv_draw_rect+0xd60>
            if(mcolor.full == gcolor.full)
 800ae8c:	455c      	cmp	r4, fp
 800ae8e:	f47f a969 	bne.w	800a164 <lv_draw_rect+0x11e0>
                act_color = mcolor;
 800ae92:	4622      	mov	r2, r4
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800ae94:	9b05      	ldr	r3, [sp, #20]
 800ae96:	4649      	mov	r1, r9
 800ae98:	a828      	add	r0, sp, #160	; 0xa0
 800ae9a:	f7fd f8cf 	bl	800803c <lv_draw_fill>
 800ae9e:	f7ff b854 	b.w	8009f4a <lv_draw_rect+0xfc6>
	...

0800aea4 <lv_img_cache_open>:
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
    if(entry_cnt == 0) {
 800aea4:	4b34      	ldr	r3, [pc, #208]	; (800af78 <lv_img_cache_open+0xd4>)
{
 800aea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(entry_cnt == 0) {
 800aeaa:	881c      	ldrh	r4, [r3, #0]
{
 800aeac:	4605      	mov	r5, r0
 800aeae:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
 800aeb0:	b1ec      	cbz	r4, 800aeee <lv_img_cache_open+0x4a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800aeb2:	4b32      	ldr	r3, [pc, #200]	; (800af7c <lv_img_cache_open+0xd8>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800aeb4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 800af80 <lv_img_cache_open+0xdc>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	2728      	movs	r7, #40	; 0x28
 800aebc:	4613      	mov	r3, r2
 800aebe:	fb07 2704 	mla	r7, r7, r4, r2
    for(i = 0; i < entry_cnt; i++) {
 800aec2:	4611      	mov	r1, r2
 800aec4:	428f      	cmp	r7, r1
 800aec6:	d115      	bne.n	800aef4 <lv_img_cache_open+0x50>
 800aec8:	3c01      	subs	r4, #1
 800aeca:	b2a4      	uxth	r4, r4
 800aecc:	2128      	movs	r1, #40	; 0x28
 800aece:	fb04 1101 	mla	r1, r4, r1, r1
 800aed2:	4411      	add	r1, r2
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 800aed4:	6858      	ldr	r0, [r3, #4]
 800aed6:	42a8      	cmp	r0, r5
 800aed8:	461c      	mov	r4, r3
 800aeda:	d113      	bne.n	800af04 <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aede:	69a2      	ldr	r2, [r4, #24]
 800aee0:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800aee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aee6:	bfc8      	it	gt
 800aee8:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 800aeec:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 800aeee:	4620      	mov	r0, r4
 800aef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800aef4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800aef6:	4570      	cmp	r0, lr
            cache[i].life -= LV_IMG_CACHE_AGING;
 800aef8:	bfa4      	itt	ge
 800aefa:	f100 30ff 	addge.w	r0, r0, #4294967295	; 0xffffffff
 800aefe:	6248      	strge	r0, [r1, #36]	; 0x24
 800af00:	3128      	adds	r1, #40	; 0x28
 800af02:	e7df      	b.n	800aec4 <lv_img_cache_open+0x20>
 800af04:	3328      	adds	r3, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800af06:	428b      	cmp	r3, r1
 800af08:	d1e4      	bne.n	800aed4 <lv_img_cache_open+0x30>
 800af0a:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800af0e:	4614      	mov	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 800af10:	428b      	cmp	r3, r1
 800af12:	d11d      	bne.n	800af50 <lv_img_cache_open+0xac>
        if(cached_src->dec_dsc.src) {
 800af14:	6863      	ldr	r3, [r4, #4]
 800af16:	b113      	cbz	r3, 800af1e <lv_img_cache_open+0x7a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fb9f 	bl	800b65c <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 800af1e:	f000 fe5d 	bl	800bbdc <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 800af22:	2700      	movs	r7, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800af24:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
 800af26:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 800af28:	61a7      	str	r7, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800af2a:	4632      	mov	r2, r6
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fb47 	bl	800b5c0 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 800af32:	4605      	mov	r5, r0
 800af34:	b998      	cbnz	r0, 800af5e <lv_img_cache_open+0xba>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800af36:	4620      	mov	r0, r4
 800af38:	f000 fb90 	bl	800b65c <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 800af3c:	4620      	mov	r0, r4
 800af3e:	2228      	movs	r2, #40	; 0x28
 800af40:	4629      	mov	r1, r5
 800af42:	f003 fa18 	bl	800e376 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800af46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af4a:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 800af4c:	462c      	mov	r4, r5
 800af4e:	e7ce      	b.n	800aeee <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 800af50:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800af52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800af54:	4290      	cmp	r0, r2
 800af56:	bfb8      	it	lt
 800af58:	460c      	movlt	r4, r1
 800af5a:	3128      	adds	r1, #40	; 0x28
 800af5c:	e7d8      	b.n	800af10 <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 800af5e:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 800af60:	6267      	str	r7, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 800af62:	b91b      	cbnz	r3, 800af6c <lv_img_cache_open+0xc8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800af64:	4640      	mov	r0, r8
 800af66:	f000 fe47 	bl	800bbf8 <lv_tick_elaps>
 800af6a:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800af6c:	69a3      	ldr	r3, [r4, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1bd      	bne.n	800aeee <lv_img_cache_open+0x4a>
 800af72:	2301      	movs	r3, #1
 800af74:	61a3      	str	r3, [r4, #24]
 800af76:	e7ba      	b.n	800aeee <lv_img_cache_open+0x4a>
 800af78:	20010eb0 	.word	0x20010eb0
 800af7c:	20015c00 	.word	0x20015c00
 800af80:	80000002 	.word	0x80000002

0800af84 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800af84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800af88:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800af8a:	4f10      	ldr	r7, [pc, #64]	; (800afcc <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800af8c:	f8d3 8000 	ldr.w	r8, [r3]
{
 800af90:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800af92:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800af94:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800af98:	883a      	ldrh	r2, [r7, #0]
 800af9a:	b2ab      	uxth	r3, r5
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d801      	bhi.n	800afa4 <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800afa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800afa4:	b2ac      	uxth	r4, r5
 800afa6:	fb09 8404 	mla	r4, r9, r4, r8
 800afaa:	6863      	ldr	r3, [r4, #4]
 800afac:	42b3      	cmp	r3, r6
 800afae:	d000      	beq.n	800afb2 <lv_img_cache_invalidate_src+0x2e>
 800afb0:	b946      	cbnz	r6, 800afc4 <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 800afb2:	b113      	cbz	r3, 800afba <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fb51 	bl	800b65c <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800afba:	2228      	movs	r2, #40	; 0x28
 800afbc:	2100      	movs	r1, #0
 800afbe:	4620      	mov	r0, r4
 800afc0:	f003 f9d9 	bl	800e376 <memset>
 800afc4:	3501      	adds	r5, #1
 800afc6:	e7e7      	b.n	800af98 <lv_img_cache_invalidate_src+0x14>
 800afc8:	20015c00 	.word	0x20015c00
 800afcc:	20010eb0 	.word	0x20010eb0

0800afd0 <lv_img_cache_set_size>:
{
 800afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800afd4:	4c14      	ldr	r4, [pc, #80]	; (800b028 <lv_img_cache_set_size+0x58>)
 800afd6:	6823      	ldr	r3, [r4, #0]
{
 800afd8:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800afda:	b12b      	cbz	r3, 800afe8 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800afdc:	2000      	movs	r0, #0
 800afde:	f7ff ffd1 	bl	800af84 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	f001 fa2c 	bl	800c440 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800afe8:	2628      	movs	r6, #40	; 0x28
 800afea:	fb06 f008 	mul.w	r0, r6, r8
 800afee:	f001 f9f1 	bl	800c3d4 <lv_mem_alloc>
 800aff2:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800aff4:	b900      	cbnz	r0, 800aff8 <lv_img_cache_set_size+0x28>
 800aff6:	e7fe      	b.n	800aff6 <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 800aff8:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 800affa:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 800affc:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 800b000:	45a8      	cmp	r8, r5
 800b002:	d101      	bne.n	800b008 <lv_img_cache_set_size+0x38>
}
 800b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800b008:	6820      	ldr	r0, [r4, #0]
 800b00a:	fb06 f705 	mul.w	r7, r6, r5
 800b00e:	2224      	movs	r2, #36	; 0x24
 800b010:	2100      	movs	r1, #0
 800b012:	4438      	add	r0, r7
 800b014:	f003 f9af 	bl	800e376 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	2228      	movs	r2, #40	; 0x28
 800b01c:	2100      	movs	r1, #0
 800b01e:	4438      	add	r0, r7
 800b020:	f003 f9a9 	bl	800e376 <memset>
 800b024:	3501      	adds	r5, #1
 800b026:	e7eb      	b.n	800b000 <lv_img_cache_set_size+0x30>
 800b028:	20015c00 	.word	0x20015c00
 800b02c:	20010eb0 	.word	0x20010eb0

0800b030 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800b030:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b032:	6a0c      	ldr	r4, [r1, #32]
{
 800b034:	460d      	mov	r5, r1
    if(user_data) {
 800b036:	b17c      	cbz	r4, 800b058 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	b120      	cbz	r0, 800b046 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 800b03c:	f000 ff86 	bl	800bf4c <lv_fs_close>
            lv_mem_free(user_data->f);
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	f001 f9fd 	bl	800c440 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800b046:	6860      	ldr	r0, [r4, #4]
 800b048:	b108      	cbz	r0, 800b04e <lv_img_decoder_built_in_close+0x1e>
 800b04a:	f001 f9f9 	bl	800c440 <lv_mem_free>

        lv_mem_free(user_data);
 800b04e:	4620      	mov	r0, r4
 800b050:	f001 f9f6 	bl	800c440 <lv_mem_free>

        dsc->user_data = NULL;
 800b054:	2300      	movs	r3, #0
 800b056:	622b      	str	r3, [r5, #32]
 800b058:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b05c <lv_img_decoder_built_in_open>:
{
 800b05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b05e:	7b0b      	ldrb	r3, [r1, #12]
 800b060:	2b01      	cmp	r3, #1
{
 800b062:	4605      	mov	r5, r0
 800b064:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b066:	d124      	bne.n	800b0b2 <lv_img_decoder_built_in_open+0x56>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800b068:	6848      	ldr	r0, [r1, #4]
 800b06a:	f001 f801 	bl	800c070 <lv_fs_get_ext>
 800b06e:	493d      	ldr	r1, [pc, #244]	; (800b164 <lv_img_decoder_built_in_open+0x108>)
 800b070:	f7f5 f8ae 	bl	80001d0 <strcmp>
 800b074:	2800      	cmp	r0, #0
 800b076:	d172      	bne.n	800b15e <lv_img_decoder_built_in_open+0x102>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800b078:	2202      	movs	r2, #2
 800b07a:	6861      	ldr	r1, [r4, #4]
 800b07c:	4668      	mov	r0, sp
 800b07e:	f000 ffbb 	bl	800bff8 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800b082:	2800      	cmp	r0, #0
 800b084:	d16b      	bne.n	800b15e <lv_img_decoder_built_in_open+0x102>
        if(dsc->user_data == NULL) {
 800b086:	6a26      	ldr	r6, [r4, #32]
 800b088:	b93e      	cbnz	r6, 800b09a <lv_img_decoder_built_in_open+0x3e>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b08a:	2008      	movs	r0, #8
 800b08c:	f001 f9a2 	bl	800c3d4 <lv_mem_alloc>
 800b090:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b092:	b900      	cbnz	r0, 800b096 <lv_img_decoder_built_in_open+0x3a>
 800b094:	e7fe      	b.n	800b094 <lv_img_decoder_built_in_open+0x38>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b096:	6006      	str	r6, [r0, #0]
 800b098:	6046      	str	r6, [r0, #4]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b09a:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b09c:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b09e:	f001 f999 	bl	800c3d4 <lv_mem_alloc>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800b0a6:	b900      	cbnz	r0, 800b0aa <lv_img_decoder_built_in_open+0x4e>
 800b0a8:	e7fe      	b.n	800b0a8 <lv_img_decoder_built_in_open+0x4c>
        memcpy(user_data->f, &f, sizeof(f));
 800b0aa:	466b      	mov	r3, sp
 800b0ac:	cb03      	ldmia	r3!, {r0, r1}
 800b0ae:	6010      	str	r0, [r2, #0]
 800b0b0:	6051      	str	r1, [r2, #4]
    lv_img_cf_t cf = dsc->header.cf;
 800b0b2:	7c20      	ldrb	r0, [r4, #16]
 800b0b4:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800b0b8:	1f03      	subs	r3, r0, #4
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d807      	bhi.n	800b0ce <lv_img_decoder_built_in_open+0x72>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b0be:	7b23      	ldrb	r3, [r4, #12]
 800b0c0:	bb6b      	cbnz	r3, 800b11e <lv_img_decoder_built_in_open+0xc2>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800b0c2:	6863      	ldr	r3, [r4, #4]
 800b0c4:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 800b0c6:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 800b0c8:	2001      	movs	r0, #1
}
 800b0ca:	b003      	add	sp, #12
 800b0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800b0ce:	1fc3      	subs	r3, r0, #7
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d83d      	bhi.n	800b150 <lv_img_decoder_built_in_open+0xf4>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b0d4:	f7fd fba6 	bl	8008824 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800b0d8:	6a25      	ldr	r5, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b0da:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800b0dc:	b93d      	cbnz	r5, 800b0ee <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b0de:	2008      	movs	r0, #8
 800b0e0:	f001 f978 	bl	800c3d4 <lv_mem_alloc>
 800b0e4:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b0e6:	b900      	cbnz	r0, 800b0ea <lv_img_decoder_built_in_open+0x8e>
 800b0e8:	e7fe      	b.n	800b0e8 <lv_img_decoder_built_in_open+0x8c>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b0ea:	6005      	str	r5, [r0, #0]
 800b0ec:	6045      	str	r5, [r0, #4]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b0ee:	2604      	movs	r6, #4
 800b0f0:	40be      	lsls	r6, r7
 800b0f2:	4630      	mov	r0, r6
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b0f4:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b0f6:	f001 f96d 	bl	800c3d4 <lv_mem_alloc>
 800b0fa:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL) {
 800b0fc:	b910      	cbnz	r0, 800b104 <lv_img_decoder_built_in_open+0xa8>
            lv_mem_assert(user_data->f);
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	b903      	cbnz	r3, 800b104 <lv_img_decoder_built_in_open+0xa8>
 800b102:	e7fe      	b.n	800b102 <lv_img_decoder_built_in_open+0xa6>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b104:	7b23      	ldrb	r3, [r4, #12]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d10b      	bne.n	800b122 <lv_img_decoder_built_in_open+0xc6>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800b10a:	2104      	movs	r1, #4
 800b10c:	6828      	ldr	r0, [r5, #0]
 800b10e:	f000 ff4f 	bl	800bfb0 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800b112:	2300      	movs	r3, #0
 800b114:	4632      	mov	r2, r6
 800b116:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b11a:	f000 ff2c 	bl	800bf76 <lv_fs_read>
            dsc->img_data = NULL;
 800b11e:	2300      	movs	r3, #0
 800b120:	e7d1      	b.n	800b0c6 <lv_img_decoder_built_in_open+0x6a>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800b122:	6863      	ldr	r3, [r4, #4]
 800b124:	2204      	movs	r2, #4
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	40ba      	lsls	r2, r7
 800b12a:	441a      	add	r2, r3
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b12c:	21ff      	movs	r1, #255	; 0xff
            for(i = 0; i < palette_size; i++) {
 800b12e:	429a      	cmp	r2, r3
 800b130:	f100 0004 	add.w	r0, r0, #4
 800b134:	d0f3      	beq.n	800b11e <lv_img_decoder_built_in_open+0xc2>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b136:	789d      	ldrb	r5, [r3, #2]
 800b138:	785e      	ldrb	r6, [r3, #1]
 800b13a:	f813 7b04 	ldrb.w	r7, [r3], #4
 800b13e:	f800 7c04 	strb.w	r7, [r0, #-4]
 800b142:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b146:	f800 5c02 	strb.w	r5, [r0, #-2]
 800b14a:	f800 1c01 	strb.w	r1, [r0, #-1]
 800b14e:	e7ee      	b.n	800b12e <lv_img_decoder_built_in_open+0xd2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800b150:	380b      	subs	r0, #11
 800b152:	2803      	cmp	r0, #3
 800b154:	d9e3      	bls.n	800b11e <lv_img_decoder_built_in_open+0xc2>
        lv_img_decoder_built_in_close(decoder, dsc);
 800b156:	4621      	mov	r1, r4
 800b158:	4628      	mov	r0, r5
 800b15a:	f7ff ff69 	bl	800b030 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800b15e:	2000      	movs	r0, #0
 800b160:	e7b3      	b.n	800b0ca <lv_img_decoder_built_in_open+0x6e>
 800b162:	bf00      	nop
 800b164:	080e4c46 	.word	0x080e4c46

0800b168 <lv_img_decoder_built_in_line_alpha>:
#endif
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 800b170:	4616      	mov	r6, r2
 800b172:	4699      	mov	r9, r3

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800b174:	2200      	movs	r2, #0
 800b176:	23ff      	movs	r3, #255	; 0xff
 800b178:	f88d 2000 	strb.w	r2, [sp]
 800b17c:	f88d 3001 	strb.w	r3, [sp, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b180:	f88d 2004 	strb.w	r2, [sp, #4]
 800b184:	f88d 3007 	strb.w	r3, [sp, #7]
 800b188:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800b18a:	4b5e      	ldr	r3, [pc, #376]	; (800b304 <lv_img_decoder_built_in_line_alpha+0x19c>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b18c:	f88d 2005 	strb.w	r2, [sp, #5]
 800b190:	22aa      	movs	r2, #170	; 0xaa
{
 800b192:	4605      	mov	r5, r0
 800b194:	460c      	mov	r4, r1
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b196:	f88d 2006 	strb.w	r2, [sp, #6]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800b19a:	af02      	add	r7, sp, #8
 800b19c:	f103 0e10 	add.w	lr, r3, #16
 800b1a0:	6818      	ldr	r0, [r3, #0]
 800b1a2:	6859      	ldr	r1, [r3, #4]
 800b1a4:	463a      	mov	r2, r7
 800b1a6:	c203      	stmia	r2!, {r0, r1}
 800b1a8:	3308      	adds	r3, #8
 800b1aa:	4573      	cmp	r3, lr
 800b1ac:	4617      	mov	r7, r2
 800b1ae:	d1f7      	bne.n	800b1a0 <lv_img_decoder_built_in_line_alpha+0x38>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800b1b0:	68ab      	ldr	r3, [r5, #8]
 800b1b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	b21a      	sxth	r2, r3
 800b1b8:	4591      	cmp	r9, r2
 800b1ba:	dc13      	bgt.n	800b1e4 <lv_img_decoder_built_in_line_alpha+0x7c>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800b1bc:	7c28      	ldrb	r0, [r5, #16]
 800b1be:	f000 001f 	and.w	r0, r0, #31
 800b1c2:	f7fd fb2f 	bl	8008824 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800b1c6:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b1c8:	2701      	movs	r7, #1
 800b1ca:	4087      	lsls	r7, r0
    switch(dsc->header.cf) {
 800b1cc:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b1d0:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 800b1d2:	3b0b      	subs	r3, #11
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800b1d4:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b1d6:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d862      	bhi.n	800b2a2 <lv_img_decoder_built_in_line_alpha+0x13a>
 800b1dc:	e8df f003 	tbb	[pc, r3]
 800b1e0:	57422c07 	.word	0x57422c07
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 800b1e4:	9ad8      	ldr	r2, [sp, #864]	; 0x360
 800b1e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	e7e3      	b.n	800b1b6 <lv_img_decoder_built_in_line_alpha+0x4e>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b1ee:	692b      	ldr	r3, [r5, #16]
 800b1f0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800b1f4:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800b1f6:	0758      	lsls	r0, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800b1f8:	ea4f 01e4 	mov.w	r1, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b1fc:	bf0c      	ite	eq
 800b1fe:	fa0f fa82 	sxtheq.w	sl, r2
            if(dsc->header.w & 0x7) w++;
 800b202:	f102 0a01 	addne.w	sl, r2, #1
            pos       = 7 - (x & 0x7);
 800b206:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800b208:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 7 - (x & 0x7);
 800b20c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800b210:	466e      	mov	r6, sp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b212:	7b2b      	ldrb	r3, [r5, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d148      	bne.n	800b2aa <lv_img_decoder_built_in_line_alpha+0x142>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800b218:	686b      	ldr	r3, [r5, #4]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800b21e:	f1c8 0008 	rsb	r0, r8, #8
        data_tmp = fs_buf;
 800b222:	2200      	movs	r2, #0
            pos = 8 - px_size;
 800b224:	fa4f fc80 	sxtb.w	ip, r0
    for(i = 0; i < len; i++) {
 800b228:	b213      	sxth	r3, r2
 800b22a:	4599      	cmp	r9, r3
 800b22c:	dc4d      	bgt.n	800b2ca <lv_img_decoder_built_in_line_alpha+0x162>

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800b22e:	2001      	movs	r0, #1
 800b230:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b238:	692b      	ldr	r3, [r5, #16]
 800b23a:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x3) w++;
 800b23e:	0799      	lsls	r1, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b240:	ea4f 02a3 	mov.w	r2, r3, asr #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800b244:	ea4f 01a4 	mov.w	r1, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 800b248:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b24c:	bf0c      	ite	eq
 800b24e:	fa0f fa82 	sxtheq.w	sl, r2
            if(dsc->header.w & 0x3) w++;
 800b252:	f102 0a01 	addne.w	sl, r2, #1
            pos       = 6 - ((x & 0x3) * 2);
 800b256:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b25a:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 6 - ((x & 0x3) * 2);
 800b25e:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800b260:	ae01      	add	r6, sp, #4
            break;
 800b262:	e7d6      	b.n	800b212 <lv_img_decoder_built_in_line_alpha+0xaa>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b264:	692b      	ldr	r3, [r5, #16]
 800b266:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800b26a:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800b26c:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800b26e:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b272:	bf54      	ite	pl
 800b274:	fa0f fa82 	sxthpl.w	sl, r2
            if(dsc->header.w & 0x1) w++;
 800b278:	f102 0a01 	addmi.w	sl, r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 800b27c:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800b280:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 4 - ((x & 0x1) * 4);
 800b284:	bf0c      	ite	eq
 800b286:	2404      	moveq	r4, #4
 800b288:	2400      	movne	r4, #0
 800b28a:	ae02      	add	r6, sp, #8
 800b28c:	e7c1      	b.n	800b212 <lv_img_decoder_built_in_line_alpha+0xaa>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b28e:	6929      	ldr	r1, [r5, #16]
 800b290:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800b294:	fa0f fa81 	sxth.w	sl, r1
            ofs += w * y + x;  /*First pixel*/
 800b298:	fb16 4101 	smlabb	r1, r6, r1, r4
            pos = 0;
 800b29c:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800b29e:	4626      	mov	r6, r4
 800b2a0:	e7b7      	b.n	800b212 <lv_img_decoder_built_in_line_alpha+0xaa>
    int8_t pos   = 0;
 800b2a2:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 800b2a4:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 800b2a6:	46a2      	mov	sl, r4
 800b2a8:	e7f9      	b.n	800b29e <lv_img_decoder_built_in_line_alpha+0x136>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b2aa:	f8d5 b020 	ldr.w	fp, [r5, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800b2ae:	3104      	adds	r1, #4
 800b2b0:	f8db 0000 	ldr.w	r0, [fp]
 800b2b4:	f000 fe7c 	bl	800bfb0 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800b2b8:	a906      	add	r1, sp, #24
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4652      	mov	r2, sl
 800b2be:	f8db 0000 	ldr.w	r0, [fp]
 800b2c2:	f000 fe58 	bl	800bf76 <lv_fs_read>
        data_tmp = fs_buf;
 800b2c6:	a906      	add	r1, sp, #24
 800b2c8:	e7a9      	b.n	800b21e <lv_img_decoder_built_in_line_alpha+0xb6>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b2ca:	780b      	ldrb	r3, [r1, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b2cc:	98d8      	ldr	r0, [sp, #864]	; 0x360
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b2ce:	fa07 fe04 	lsl.w	lr, r7, r4
 800b2d2:	ea03 030e 	and.w	r3, r3, lr
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800b2d6:	f895 e010 	ldrb.w	lr, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b2da:	4123      	asrs	r3, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b2dc:	f00e 0e1f 	and.w	lr, lr, #31
 800b2e0:	b2db      	uxtb	r3, r3
        pos -= px_size;
 800b2e2:	eba4 0408 	sub.w	r4, r4, r8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b2e6:	f1be 0f0e 	cmp.w	lr, #14
        pos -= px_size;
 800b2ea:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b2ec:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 800b2f0:	bf18      	it	ne
 800b2f2:	5cf3      	ldrbne	r3, [r6, r3]
 800b2f4:	f88e 3003 	strb.w	r3, [lr, #3]
        if(pos < 0) {
 800b2f8:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800b2fa:	bfbc      	itt	lt
 800b2fc:	4664      	movlt	r4, ip
            data_tmp++;
 800b2fe:	3101      	addlt	r1, #1
 800b300:	3201      	adds	r2, #1
 800b302:	e791      	b.n	800b228 <lv_img_decoder_built_in_line_alpha+0xc0>
 800b304:	08011a00 	.word	0x08011a00

0800b308 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	4606      	mov	r6, r0

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b30e:	7c00      	ldrb	r0, [r0, #16]
{
 800b310:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b314:	f000 001f 	and.w	r0, r0, #31
{
 800b318:	469b      	mov	fp, r3
 800b31a:	460c      	mov	r4, r1
 800b31c:	4692      	mov	sl, r2
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b31e:	f7fd fa81 	bl	8008824 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800b322:	7c33      	ldrb	r3, [r6, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b324:	f04f 0801 	mov.w	r8, #1
 800b328:	fa08 f800 	lsl.w	r8, r8, r0
    switch(dsc->header.cf) {
 800b32c:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b330:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
 800b334:	3b07      	subs	r3, #7
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b336:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b338:	fa1f f888 	uxth.w	r8, r8
    switch(dsc->header.cf) {
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d857      	bhi.n	800b3f0 <lv_img_decoder_built_in_line_indexed+0xe8>
 800b340:	e8df f003 	tbb	[pc, r3]
 800b344:	4c382502 	.word	0x4c382502
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b348:	6933      	ldr	r3, [r6, #16]
 800b34a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800b34e:	10dd      	asrs	r5, r3, #3
            if(dsc->header.w & 0x7) w++;
 800b350:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800b352:	ea4f 02e4 	mov.w	r2, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b356:	bf0c      	ite	eq
 800b358:	b22d      	sxtheq	r5, r5
            if(dsc->header.w & 0x7) w++;
 800b35a:	3501      	addne	r5, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800b35c:	fb05 220a 	mla	r2, r5, sl, r2
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
 800b360:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 800b362:	3208      	adds	r2, #8
            pos = 7 - (x & 0x7);
 800b364:	f004 0407 	and.w	r4, r4, #7

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b368:	7b33      	ldrb	r3, [r6, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b36a:	6a37      	ldr	r7, [r6, #32]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d143      	bne.n	800b3f8 <lv_img_decoder_built_in_line_indexed+0xf0>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800b370:	6873      	ldr	r3, [r6, #4]
 800b372:	6899      	ldr	r1, [r3, #8]
 800b374:	440a      	add	r2, r1
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800b376:	f1c9 0508 	rsb	r5, r9, #8
        data_tmp = fs_buf;
 800b37a:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800b37c:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800b37e:	b203      	sxth	r3, r0
 800b380:	459b      	cmp	fp, r3
 800b382:	dc45      	bgt.n	800b410 <lv_img_decoder_built_in_line_indexed+0x108>
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800b384:	2001      	movs	r0, #1
 800b386:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b38e:	6933      	ldr	r3, [r6, #16]
 800b390:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800b394:	109d      	asrs	r5, r3, #2
            if(dsc->header.w & 0x3) w++;
 800b396:	079a      	lsls	r2, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b398:	bf08      	it	eq
 800b39a:	b22d      	sxtheq	r5, r5
            ofs += w * y + (x >> 2); /*First pixel*/
 800b39c:	ea4f 02a4 	mov.w	r2, r4, asr #2
            if(dsc->header.w & 0x3) w++;
 800b3a0:	bf18      	it	ne
 800b3a2:	3501      	addne	r5, #1
            pos = 6 - ((x & 0x3) * 2);
 800b3a4:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800b3a6:	fb05 220a 	mla	r2, r5, sl, r2
            pos = 6 - ((x & 0x3) * 2);
 800b3aa:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 800b3ae:	3210      	adds	r2, #16
            pos = 6 - ((x & 0x3) * 2);
 800b3b0:	0064      	lsls	r4, r4, #1
            break;
 800b3b2:	e7d9      	b.n	800b368 <lv_img_decoder_built_in_line_indexed+0x60>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b3b4:	6933      	ldr	r3, [r6, #16]
 800b3b6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800b3ba:	105d      	asrs	r5, r3, #1
            if(dsc->header.w & 0x1) w++;
 800b3bc:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800b3be:	ea4f 0264 	mov.w	r2, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b3c2:	bf54      	ite	pl
 800b3c4:	b22d      	sxthpl	r5, r5
            if(dsc->header.w & 0x1) w++;
 800b3c6:	3501      	addmi	r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800b3c8:	fb05 220a 	mla	r2, r5, sl, r2
            pos = 4 - ((x & 0x1) * 4);
 800b3cc:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 800b3d0:	f102 0240 	add.w	r2, r2, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800b3d4:	bf0c      	ite	eq
 800b3d6:	2404      	moveq	r4, #4
 800b3d8:	2400      	movne	r4, #0
 800b3da:	e7c5      	b.n	800b368 <lv_img_decoder_built_in_line_indexed+0x60>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b3dc:	6932      	ldr	r2, [r6, #16]
 800b3de:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800b3e2:	b215      	sxth	r5, r2
            ofs += w * y + x;  /*First pixel*/
 800b3e4:	fb1a 4202 	smlabb	r2, sl, r2, r4
            ofs += 1024;       /*Skip the palette*/
 800b3e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
            pos = 0;
 800b3ec:	2400      	movs	r4, #0
            break;
 800b3ee:	e7bb      	b.n	800b368 <lv_img_decoder_built_in_line_indexed+0x60>
    uint32_t ofs = 0;
 800b3f0:	2200      	movs	r2, #0
    int8_t pos   = 0;
 800b3f2:	4614      	mov	r4, r2
    lv_coord_t w = 0;
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	e7b7      	b.n	800b368 <lv_img_decoder_built_in_line_indexed+0x60>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800b3f8:	1d11      	adds	r1, r2, #4
 800b3fa:	6838      	ldr	r0, [r7, #0]
 800b3fc:	f000 fdd8 	bl	800bfb0 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800b400:	462a      	mov	r2, r5
 800b402:	2300      	movs	r3, #0
 800b404:	4669      	mov	r1, sp
 800b406:	6838      	ldr	r0, [r7, #0]
 800b408:	f000 fdb5 	bl	800bf76 <lv_fs_read>
        data_tmp = fs_buf;
 800b40c:	466a      	mov	r2, sp
 800b40e:	e7b2      	b.n	800b376 <lv_img_decoder_built_in_line_indexed+0x6e>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b410:	7813      	ldrb	r3, [r2, #0]
 800b412:	fa08 f104 	lsl.w	r1, r8, r4
 800b416:	400b      	ands	r3, r1
 800b418:	4123      	asrs	r3, r4
        cbuf[i] = user_data->palette[val_act];
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	b2db      	uxtb	r3, r3
        pos -= px_size;
 800b41e:	eba4 0409 	sub.w	r4, r4, r9
        cbuf[i] = user_data->palette[val_act];
 800b422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b426:	99d2      	ldr	r1, [sp, #840]	; 0x348
        pos -= px_size;
 800b428:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800b42a:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 800b42c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
            pos = 8 - px_size;
 800b430:	bfbc      	itt	lt
 800b432:	462c      	movlt	r4, r5
            data_tmp++;
 800b434:	3201      	addlt	r2, #1
 800b436:	3001      	adds	r0, #1
 800b438:	e7a1      	b.n	800b37e <lv_img_decoder_built_in_line_indexed+0x76>

0800b43a <lv_img_decoder_built_in_info>:
{
 800b43a:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b43c:	4608      	mov	r0, r1
{
 800b43e:	b085      	sub	sp, #20
 800b440:	460d      	mov	r5, r1
 800b442:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b444:	f7fd faee 	bl	8008a24 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b448:	b9d0      	cbnz	r0, 800b480 <lv_img_decoder_built_in_info+0x46>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800b44a:	782b      	ldrb	r3, [r5, #0]
 800b44c:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b450:	1f1a      	subs	r2, r3, #4
 800b452:	2a0a      	cmp	r2, #10
 800b454:	d812      	bhi.n	800b47c <lv_img_decoder_built_in_info+0x42>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800b456:	682a      	ldr	r2, [r5, #0]
 800b458:	6821      	ldr	r1, [r4, #0]
 800b45a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800b45e:	f362 2194 	bfi	r1, r2, #10, #11
 800b462:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b464:	886a      	ldrh	r2, [r5, #2]
 800b466:	8861      	ldrh	r1, [r4, #2]
 800b468:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800b46c:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800b470:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b472:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800b474:	f363 0204 	bfi	r2, r3, #0, #5
 800b478:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800b47a:	2001      	movs	r0, #1
}
 800b47c:	b005      	add	sp, #20
 800b47e:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800b480:	2801      	cmp	r0, #1
 800b482:	d117      	bne.n	800b4b4 <lv_img_decoder_built_in_info+0x7a>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800b484:	2202      	movs	r2, #2
 800b486:	4629      	mov	r1, r5
 800b488:	a802      	add	r0, sp, #8
 800b48a:	f000 fdb5 	bl	800bff8 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800b48e:	b940      	cbnz	r0, 800b4a2 <lv_img_decoder_built_in_info+0x68>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800b490:	ab01      	add	r3, sp, #4
 800b492:	2204      	movs	r2, #4
 800b494:	4621      	mov	r1, r4
 800b496:	a802      	add	r0, sp, #8
 800b498:	f000 fd6d 	bl	800bf76 <lv_fs_read>
            lv_fs_close(&file);
 800b49c:	a802      	add	r0, sp, #8
 800b49e:	f000 fd55 	bl	800bf4c <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b4a2:	7820      	ldrb	r0, [r4, #0]
 800b4a4:	301c      	adds	r0, #28
 800b4a6:	f000 001f 	and.w	r0, r0, #31
 800b4aa:	280a      	cmp	r0, #10
 800b4ac:	bf8c      	ite	hi
 800b4ae:	2000      	movhi	r0, #0
 800b4b0:	2001      	movls	r0, #1
 800b4b2:	e7e3      	b.n	800b47c <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800b4b4:	2802      	cmp	r0, #2
 800b4b6:	d10d      	bne.n	800b4d4 <lv_img_decoder_built_in_info+0x9a>
        header->w = 1;
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 800b4c0:	0c1a      	lsrs	r2, r3, #16
 800b4c2:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 800b4c6:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800b4c8:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800b4ca:	220b      	movs	r2, #11
 800b4cc:	f362 0304 	bfi	r3, r2, #0, #5
 800b4d0:	7023      	strb	r3, [r4, #0]
 800b4d2:	e7d3      	b.n	800b47c <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7d1      	b.n	800b47c <lv_img_decoder_built_in_info+0x42>

0800b4d8 <lv_img_decoder_built_in_read_line>:
{
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4dc:	7c08      	ldrb	r0, [r1, #16]
{
 800b4de:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 800b4e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b4e4:	469a      	mov	sl, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4e6:	f000 031f 	and.w	r3, r0, #31
{
 800b4ea:	4691      	mov	r9, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4ec:	1f1a      	subs	r2, r3, #4
 800b4ee:	2a02      	cmp	r2, #2
{
 800b4f0:	460c      	mov	r4, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b4f2:	d827      	bhi.n	800b544 <lv_img_decoder_built_in_read_line+0x6c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b4f4:	7b0b      	ldrb	r3, [r1, #12]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d13b      	bne.n	800b572 <lv_img_decoder_built_in_read_line+0x9a>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b4fa:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b4fe:	6a0e      	ldr	r6, [r1, #32]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b500:	f7fd f990 	bl	8008824 <lv_img_color_format_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b504:	6924      	ldr	r4, [r4, #16]
 800b506:	f3c4 248a 	ubfx	r4, r4, #10, #11
 800b50a:	fb1a 9104 	smlabb	r1, sl, r4, r9
 800b50e:	4341      	muls	r1, r0
 800b510:	10c9      	asrs	r1, r1, #3
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b512:	4607      	mov	r7, r0
    res = lv_fs_seek(user_data->f, pos);
 800b514:	3104      	adds	r1, #4
 800b516:	6830      	ldr	r0, [r6, #0]
 800b518:	f000 fd4a 	bl	800bfb0 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800b51c:	bb48      	cbnz	r0, 800b572 <lv_img_decoder_built_in_read_line+0x9a>
    uint32_t br  = 0;
 800b51e:	ab04      	add	r3, sp, #16
    uint32_t btr = len * (px_size >> 3);
 800b520:	f3c7 04c7 	ubfx	r4, r7, #3, #8
 800b524:	fb14 f408 	smulbb	r4, r4, r8
    uint32_t br  = 0;
 800b528:	f843 0d04 	str.w	r0, [r3, #-4]!
    lv_fs_read(user_data->f, buf, btr, &br);
 800b52c:	4622      	mov	r2, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	6830      	ldr	r0, [r6, #0]
 800b532:	f000 fd20 	bl	800bf76 <lv_fs_read>
        return LV_RES_INV;
 800b536:	9803      	ldr	r0, [sp, #12]
 800b538:	1b03      	subs	r3, r0, r4
 800b53a:	4258      	negs	r0, r3
 800b53c:	4158      	adcs	r0, r3
}
 800b53e:	b004      	add	sp, #16
 800b540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800b544:	f1a3 020b 	sub.w	r2, r3, #11
 800b548:	2a03      	cmp	r2, #3
 800b54a:	d807      	bhi.n	800b55c <lv_img_decoder_built_in_read_line+0x84>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 800b54c:	9500      	str	r5, [sp, #0]
 800b54e:	4643      	mov	r3, r8
 800b550:	4652      	mov	r2, sl
 800b552:	4649      	mov	r1, r9
 800b554:	4620      	mov	r0, r4
 800b556:	f7ff fe07 	bl	800b168 <lv_img_decoder_built_in_line_alpha>
 800b55a:	e7f0      	b.n	800b53e <lv_img_decoder_built_in_read_line+0x66>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800b55c:	3b07      	subs	r3, #7
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d807      	bhi.n	800b572 <lv_img_decoder_built_in_read_line+0x9a>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800b562:	9500      	str	r5, [sp, #0]
 800b564:	4643      	mov	r3, r8
 800b566:	4652      	mov	r2, sl
 800b568:	4649      	mov	r1, r9
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff fecc 	bl	800b308 <lv_img_decoder_built_in_line_indexed>
 800b570:	e7e5      	b.n	800b53e <lv_img_decoder_built_in_read_line+0x66>
    lv_res_t res = LV_RES_INV;
 800b572:	2000      	movs	r0, #0
 800b574:	e7e3      	b.n	800b53e <lv_img_decoder_built_in_read_line+0x66>
	...

0800b578 <lv_img_decoder_get_info>:
    header->always_zero = 0;
 800b578:	780b      	ldrb	r3, [r1, #0]
 800b57a:	f36f 1347 	bfc	r3, #5, #3
{
 800b57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b582:	4607      	mov	r7, r0
    header->always_zero = 0;
 800b584:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b586:	480d      	ldr	r0, [pc, #52]	; (800b5bc <lv_img_decoder_get_info+0x44>)
 800b588:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800b5bc <lv_img_decoder_get_info+0x44>
{
 800b58c:	460e      	mov	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b58e:	f000 fdda 	bl	800c146 <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800b592:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b594:	4605      	mov	r5, r0
 800b596:	b915      	cbnz	r5, 800b59e <lv_img_decoder_get_info+0x26>
}
 800b598:	4620      	mov	r0, r4
 800b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800b59e:	682c      	ldr	r4, [r5, #0]
 800b5a0:	b134      	cbz	r4, 800b5b0 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 800b5aa:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800b5ac:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 800b5ae:	d0f3      	beq.n	800b598 <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	f000 fdcd 	bl	800c152 <lv_ll_get_next>
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	e7ec      	b.n	800b596 <lv_img_decoder_get_info+0x1e>
 800b5bc:	20015be4 	.word	0x20015be4

0800b5c0 <lv_img_decoder_open>:
{
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	4605      	mov	r5, r0
    dsc->style     = style;
 800b5c6:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 800b5c8:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 800b5ca:	4608      	mov	r0, r1
{
 800b5cc:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 800b5ce:	f7fd fa29 	bl	8008a24 <lv_img_src_get_type>
    dsc->user_data = NULL;
 800b5d2:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 800b5d4:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
 800b5d6:	622c      	str	r4, [r5, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b5d8:	4817      	ldr	r0, [pc, #92]	; (800b638 <lv_img_decoder_open+0x78>)
 800b5da:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800b638 <lv_img_decoder_open+0x78>
 800b5de:	f000 fdb2 	bl	800c146 <lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 800b5e2:	f105 0910 	add.w	r9, r5, #16
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b5e6:	4606      	mov	r6, r0
        dsc->error_msg = NULL;
 800b5e8:	46a0      	mov	r8, r4
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b5ea:	b946      	cbnz	r6, 800b5fe <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 800b5ec:	b924      	cbnz	r4, 800b5f8 <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800b5ee:	2224      	movs	r2, #36	; 0x24
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f002 febf 	bl	800e376 <memset>
}
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800b5fe:	6833      	ldr	r3, [r6, #0]
 800b600:	b1a3      	cbz	r3, 800b62c <lv_img_decoder_open+0x6c>
 800b602:	6872      	ldr	r2, [r6, #4]
 800b604:	b192      	cbz	r2, 800b62c <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 800b606:	464a      	mov	r2, r9
 800b608:	4639      	mov	r1, r7
 800b60a:	4630      	mov	r0, r6
 800b60c:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800b60e:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 800b610:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 800b612:	d10b      	bne.n	800b62c <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 800b614:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
 800b618:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
 800b61c:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 800b61e:	6873      	ldr	r3, [r6, #4]
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 800b626:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 800b628:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 800b62a:	d0e5      	beq.n	800b5f8 <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800b62c:	4631      	mov	r1, r6
 800b62e:	4650      	mov	r0, sl
 800b630:	f000 fd8f 	bl	800c152 <lv_ll_get_next>
 800b634:	4606      	mov	r6, r0
 800b636:	e7d8      	b.n	800b5ea <lv_img_decoder_open+0x2a>
 800b638:	20015be4 	.word	0x20015be4

0800b63c <lv_img_decoder_read_line>:
{
 800b63c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b63e:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800b640:	6800      	ldr	r0, [r0, #0]
 800b642:	6884      	ldr	r4, [r0, #8]
 800b644:	b144      	cbz	r4, 800b658 <lv_img_decoder_read_line+0x1c>
 800b646:	9e06      	ldr	r6, [sp, #24]
 800b648:	e88d 0048 	stmia.w	sp, {r3, r6}
 800b64c:	4613      	mov	r3, r2
 800b64e:	460a      	mov	r2, r1
 800b650:	4629      	mov	r1, r5
 800b652:	47a0      	blx	r4
}
 800b654:	b002      	add	sp, #8
 800b656:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800b658:	4620      	mov	r0, r4
 800b65a:	e7fb      	b.n	800b654 <lv_img_decoder_read_line+0x18>

0800b65c <lv_img_decoder_close>:
{
 800b65c:	4601      	mov	r1, r0
    if(dsc->decoder) {
 800b65e:	6800      	ldr	r0, [r0, #0]
 800b660:	b110      	cbz	r0, 800b668 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800b662:	68c2      	ldr	r2, [r0, #12]
 800b664:	b102      	cbz	r2, 800b668 <lv_img_decoder_close+0xc>
 800b666:	4710      	bx	r2
 800b668:	4770      	bx	lr
	...

0800b66c <lv_img_decoder_create>:
{
 800b66c:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800b66e:	4806      	ldr	r0, [pc, #24]	; (800b688 <lv_img_decoder_create+0x1c>)
 800b670:	f000 fd2d 	bl	800c0ce <lv_ll_ins_head>
    lv_mem_assert(decoder);
 800b674:	4604      	mov	r4, r0
 800b676:	b900      	cbnz	r0, 800b67a <lv_img_decoder_create+0xe>
 800b678:	e7fe      	b.n	800b678 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800b67a:	2210      	movs	r2, #16
 800b67c:	2100      	movs	r1, #0
 800b67e:	f002 fe7a 	bl	800e376 <memset>
}
 800b682:	4620      	mov	r0, r4
 800b684:	bd10      	pop	{r4, pc}
 800b686:	bf00      	nop
 800b688:	20015be4 	.word	0x20015be4

0800b68c <lv_img_decoder_init>:
{
 800b68c:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800b68e:	2110      	movs	r1, #16
 800b690:	4807      	ldr	r0, [pc, #28]	; (800b6b0 <lv_img_decoder_init+0x24>)
 800b692:	f000 fd12 	bl	800c0ba <lv_ll_init>
    decoder = lv_img_decoder_create();
 800b696:	f7ff ffe9 	bl	800b66c <lv_img_decoder_create>
    if(decoder == NULL) {
 800b69a:	b900      	cbnz	r0, 800b69e <lv_img_decoder_init+0x12>
 800b69c:	e7fe      	b.n	800b69c <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800b69e:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <lv_img_decoder_init+0x28>)
 800b6a0:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800b6a2:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <lv_img_decoder_init+0x2c>)
 800b6a4:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800b6a6:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <lv_img_decoder_init+0x30>)
 800b6a8:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800b6aa:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <lv_img_decoder_init+0x34>)
 800b6ac:	60c3      	str	r3, [r0, #12]
 800b6ae:	bd08      	pop	{r3, pc}
 800b6b0:	20015be4 	.word	0x20015be4
 800b6b4:	0800b43b 	.word	0x0800b43b
 800b6b8:	0800b05d 	.word	0x0800b05d
 800b6bc:	0800b4d9 	.word	0x0800b4d9
 800b6c0:	0800b031 	.word	0x0800b031

0800b6c4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 800b6c4:	6843      	ldr	r3, [r0, #4]
 800b6c6:	4718      	bx	r3

0800b6c8 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800b6c8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800b6ca:	6804      	ldr	r4, [r0, #0]
 800b6cc:	46a4      	mov	ip, r4
}
 800b6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800b6d2:	4760      	bx	ip

0800b6d4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800b6d4:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	460a      	mov	r2, r1
 800b6da:	4669      	mov	r1, sp
 800b6dc:	f7ff fff4 	bl	800b6c8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 800b6e0:	b108      	cbz	r0, 800b6e6 <lv_font_get_glyph_width+0x12>
 800b6e2:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 800b6e6:	b003      	add	sp, #12
 800b6e8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6ec <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800b6ec:	7803      	ldrb	r3, [r0, #0]
 800b6ee:	780a      	ldrb	r2, [r1, #0]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bf11      	iteee	ne
 800b6f4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800b6f6:	784b      	ldrbeq	r3, [r1, #1]
 800b6f8:	7840      	ldrbeq	r0, [r0, #1]
 800b6fa:	1ac0      	subeq	r0, r0, r3

}
 800b6fc:	4770      	bx	lr

0800b6fe <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800b6fe:	8803      	ldrh	r3, [r0, #0]
 800b700:	880a      	ldrh	r2, [r1, #0]
 800b702:	4293      	cmp	r3, r2
 800b704:	bf11      	iteee	ne
 800b706:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800b708:	884b      	ldrheq	r3, [r1, #2]
 800b70a:	8840      	ldrheq	r0, [r0, #2]
 800b70c:	1ac0      	subeq	r0, r0, r3
}
 800b70e:	4770      	bx	lr

0800b710 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800b710:	8800      	ldrh	r0, [r0, #0]
 800b712:	880b      	ldrh	r3, [r1, #0]
}
 800b714:	1ac0      	subs	r0, r0, r3
 800b716:	4770      	bx	lr

0800b718 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800b718:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b71a:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b71c:	6963      	ldr	r3, [r4, #20]
 800b71e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800b720:	b085      	sub	sp, #20
 800b722:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b724:	d00b      	beq.n	800b73e <get_glyph_dsc_id.isra.0.part.1+0x26>
 800b726:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b728:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800b72c:	8a63      	ldrh	r3, [r4, #18]
 800b72e:	b2be      	uxth	r6, r7
 800b730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b734:	429e      	cmp	r6, r3
 800b736:	db05      	blt.n	800b744 <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 800b738:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800b73a:	2000      	movs	r0, #0
 800b73c:	e015      	b.n	800b76a <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800b73e:	69a0      	ldr	r0, [r4, #24]
}
 800b740:	b005      	add	sp, #20
 800b742:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	fb0e f606 	mul.w	r6, lr, r6
 800b74a:	1999      	adds	r1, r3, r6
 800b74c:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800b74e:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b750:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800b752:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800b754:	9203      	str	r2, [sp, #12]
 800b756:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800b75a:	d8e7      	bhi.n	800b72c <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800b75c:	7c8b      	ldrb	r3, [r1, #18]
 800b75e:	f013 0303 	ands.w	r3, r3, #3
 800b762:	d104      	bne.n	800b76e <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800b764:	88c8      	ldrh	r0, [r1, #6]
 800b766:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 800b768:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800b76a:	61a0      	str	r0, [r4, #24]
 800b76c:	e7e8      	b.n	800b740 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d104      	bne.n	800b77c <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800b772:	68cb      	ldr	r3, [r1, #12]
 800b774:	5c98      	ldrb	r0, [r3, r2]
 800b776:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800b778:	4418      	add	r0, r3
 800b77a:	e7f5      	b.n	800b768 <get_glyph_dsc_id.isra.0.part.1+0x50>
 800b77c:	4811      	ldr	r0, [pc, #68]	; (800b7c4 <get_glyph_dsc_id.isra.0.part.1+0xac>)
 800b77e:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800b780:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800b782:	2b02      	cmp	r3, #2
 800b784:	d10e      	bne.n	800b7a4 <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800b786:	6889      	ldr	r1, [r1, #8]
 800b788:	a803      	add	r0, sp, #12
 800b78a:	f001 fa0a 	bl	800cba2 <lv_utils_bsearch>
            if(p) {
 800b78e:	b908      	cbnz	r0, 800b794 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800b790:	2000      	movs	r0, #0
 800b792:	e7e9      	b.n	800b768 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	441e      	add	r6, r3
 800b798:	68b3      	ldr	r3, [r6, #8]
 800b79a:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800b79c:	88f0      	ldrh	r0, [r6, #6]
 800b79e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b7a2:	e7e1      	b.n	800b768 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	6889      	ldr	r1, [r1, #8]
 800b7a8:	a803      	add	r0, sp, #12
 800b7aa:	f001 f9fa 	bl	800cba2 <lv_utils_bsearch>
            if(p) {
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d0ee      	beq.n	800b790 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	441e      	add	r6, r3
 800b7b6:	68b3      	ldr	r3, [r6, #8]
 800b7b8:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800b7ba:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800b7bc:	68f3      	ldr	r3, [r6, #12]
 800b7be:	5c18      	ldrb	r0, [r3, r0]
 800b7c0:	88f3      	ldrh	r3, [r6, #6]
 800b7c2:	e7d9      	b.n	800b778 <get_glyph_dsc_id.isra.0.part.1+0x60>
 800b7c4:	0800b711 	.word	0x0800b711

0800b7c8 <lv_font_get_bitmap_fmt_txt>:
{
 800b7c8:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800b7ca:	b909      	cbnz	r1, 800b7d0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b7d0:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 800b7d4:	f7ff ffa0 	bl	800b718 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0f7      	beq.n	800b7cc <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b7dc:	6863      	ldr	r3, [r4, #4]
 800b7de:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	d0f2      	beq.n	800b7cc <lv_font_get_bitmap_fmt_txt+0x4>
 800b7e6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800b7ea:	6820      	ldr	r0, [r4, #0]
 800b7ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7f0:	4418      	add	r0, r3
}
 800b7f2:	bd10      	pop	{r4, pc}

0800b7f4 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800b7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 800b800:	b91a      	cbnz	r2, 800b80a <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 800b802:	2000      	movs	r0, #0
}
 800b804:	b005      	add	sp, #20
 800b806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800b80a:	4607      	mov	r7, r0
 800b80c:	4611      	mov	r1, r2
 800b80e:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 800b812:	4638      	mov	r0, r7
 800b814:	f7ff ff80 	bl	800b718 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800b818:	4606      	mov	r6, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d0f1      	beq.n	800b802 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800b81e:	68eb      	ldr	r3, [r5, #12]
 800b820:	b9db      	cbnz	r3, 800b85a <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800b822:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800b824:	686b      	ldr	r3, [r5, #4]
 800b826:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800b82a:	8a2b      	ldrh	r3, [r5, #16]
 800b82c:	4358      	muls	r0, r3
 800b82e:	8873      	ldrh	r3, [r6, #2]
 800b830:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800b834:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800b838:	3008      	adds	r0, #8
 800b83a:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 800b83c:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 800b83e:	7973      	ldrb	r3, [r6, #5]
 800b840:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 800b842:	7933      	ldrb	r3, [r6, #4]
 800b844:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800b846:	79b3      	ldrb	r3, [r6, #6]
 800b848:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800b84a:	79f3      	ldrb	r3, [r6, #7]
 800b84c:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 800b84e:	7ceb      	ldrb	r3, [r5, #19]
 800b850:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800b854:	71a3      	strb	r3, [r4, #6]
    return true;
 800b856:	2001      	movs	r0, #1
 800b858:	e7d4      	b.n	800b804 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800b85a:	f1b9 0f00 	cmp.w	r9, #0
 800b85e:	d0e0      	beq.n	800b822 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800b860:	4649      	mov	r1, r9
 800b862:	4638      	mov	r0, r7
 800b864:	f7ff ff58 	bl	800b718 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0da      	beq.n	800b822 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800b86c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 800b870:	7cda      	ldrb	r2, [r3, #19]
 800b872:	68df      	ldr	r7, [r3, #12]
 800b874:	f012 0f20 	tst.w	r2, #32
 800b878:	d133      	bne.n	800b8e2 <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	f013 0303 	ands.w	r3, r3, #3
 800b880:	d117      	bne.n	800b8b2 <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b882:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800b886:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 800b888:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800b88c:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b88e:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800b892:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b89a:	2302      	movs	r3, #2
 800b89c:	4641      	mov	r1, r8
 800b89e:	f001 f980 	bl	800cba2 <lv_utils_bsearch>
            if(kid_p) {
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d0be      	beq.n	800b824 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800b8a6:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800b8aa:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	5618      	ldrsb	r0, [r3, r0]
 800b8b0:	e7b8      	b.n	800b824 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d1b5      	bne.n	800b822 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b8b6:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800b8ba:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 800b8bc:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b8c0:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800b8c2:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800b8c6:	4b10      	ldr	r3, [pc, #64]	; (800b908 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b8ce:	2304      	movs	r3, #4
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	f001 f966 	bl	800cba2 <lv_utils_bsearch>
            if(kid_p) {
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d0a4      	beq.n	800b824 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800b8da:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800b8de:	0900      	lsrs	r0, r0, #4
 800b8e0:	e7e4      	b.n	800b8ac <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d09b      	beq.n	800b822 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800b8ea:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d098      	beq.n	800b822 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	7b78      	ldrb	r0, [r7, #13]
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	440a      	add	r2, r1
 800b8f8:	fb00 2303 	mla	r3, r0, r3, r2
 800b8fc:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800b900:	e790      	b.n	800b824 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800b902:	bf00      	nop
 800b904:	0800b6ed 	.word	0x0800b6ed
 800b908:	0800b6ff 	.word	0x0800b6ff

0800b90c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800b90c:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800b90e:	2228      	movs	r2, #40	; 0x28
{
 800b910:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800b912:	2100      	movs	r1, #0
 800b914:	f002 fd2f 	bl	800e376 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800b918:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b91c:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800b91e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    driver->flush_cb         = NULL;
 800b922:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 800b924:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800b926:	23ff      	movs	r3, #255	; 0xff
 800b928:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800b92c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 800b930:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800b934:	2301      	movs	r3, #1
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800b936:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
    driver->antialiasing = true;
 800b93a:	7223      	strb	r3, [r4, #8]
 800b93c:	bd10      	pop	{r4, pc}

0800b93e <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800b93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b940:	4604      	mov	r4, r0
 800b942:	460d      	mov	r5, r1
 800b944:	4617      	mov	r7, r2
 800b946:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800b948:	221c      	movs	r2, #28
 800b94a:	2100      	movs	r1, #0
 800b94c:	f002 fd13 	bl	800e376 <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 800b950:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 800b954:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800b956:	60e6      	str	r6, [r4, #12]
 800b958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b95c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800b960:	482a      	ldr	r0, [pc, #168]	; (800ba0c <lv_disp_drv_register+0xb0>)
 800b962:	f000 fbb4 	bl	800c0ce <lv_ll_ins_head>
    if(!disp) {
 800b966:	4604      	mov	r4, r0
 800b968:	b900      	cbnz	r0, 800b96c <lv_disp_drv_register+0x10>
 800b96a:	e7fe      	b.n	800b96a <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800b96c:	4628      	mov	r0, r5
 800b96e:	4623      	mov	r3, r4
 800b970:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800b974:	f850 1b04 	ldr.w	r1, [r0], #4
 800b978:	f843 1b04 	str.w	r1, [r3], #4
 800b97c:	4290      	cmp	r0, r2
 800b97e:	d1f9      	bne.n	800b974 <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800b980:	2220      	movs	r2, #32
 800b982:	2100      	movs	r1, #0
 800b984:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800b988:	f002 fcf5 	bl	800e376 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 800b98c:	4d20      	ldr	r5, [pc, #128]	; (800ba10 <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800b98e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b992:	2100      	movs	r1, #0
 800b994:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800b998:	f002 fced 	bl	800e376 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800b99c:	2144      	movs	r1, #68	; 0x44
 800b99e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b9a2:	f000 fb8a 	bl	800c0ba <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b903      	cbnz	r3, 800b9ac <lv_disp_drv_register+0x50>
 800b9aa:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800b9ac:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    lv_disp_t * disp_def_tmp = disp_def;
 800b9b0:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800b9b2:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 800b9b4:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b9b8:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800b9ba:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b9be:	4608      	mov	r0, r1
 800b9c0:	f7fb f92e 	bl	8006c20 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9c4:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800b9c6:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	f7fb f929 	bl	8006c20 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9ce:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9d0:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9d2:	4608      	mov	r0, r1
 800b9d4:	f7fb f924 	bl	8006c20 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800b9d8:	490e      	ldr	r1, [pc, #56]	; (800ba14 <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800b9da:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800b9dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b9de:	f7fb faef 	bl	8006fc0 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800b9e2:	490c      	ldr	r1, [pc, #48]	; (800ba14 <lv_disp_drv_register+0xb8>)
 800b9e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b9e6:	f7fb faeb 	bl	8006fc0 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800b9ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b9ec:	f7fa fe34 	bl	8006658 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	2203      	movs	r2, #3
 800b9f4:	211e      	movs	r1, #30
 800b9f6:	4808      	ldr	r0, [pc, #32]	; (800ba18 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800b9f8:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800b9fa:	f000 feb1 	bl	800c760 <lv_task_create>
 800b9fe:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800ba00:	b900      	cbnz	r0, 800ba04 <lv_disp_drv_register+0xa8>
 800ba02:	e7fe      	b.n	800ba02 <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800ba04:	f000 fec1 	bl	800c78a <lv_task_ready>

    return disp;
}
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	20015bd8 	.word	0x20015bd8
 800ba10:	20010eb4 	.word	0x20010eb4
 800ba14:	200157fc 	.word	0x200157fc
 800ba18:	08007511 	.word	0x08007511

0800ba1c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800ba1c:	4b01      	ldr	r3, [pc, #4]	; (800ba24 <lv_disp_get_default+0x8>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20010eb4 	.word	0x20010eb4

0800ba28 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800ba28:	b910      	cbnz	r0, 800ba30 <lv_disp_get_hor_res+0x8>
    return disp_def;
 800ba2a:	4b07      	ldr	r3, [pc, #28]	; (800ba48 <lv_disp_get_hor_res+0x20>)
 800ba2c:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800ba2e:	b138      	cbz	r0, 800ba40 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800ba30:	7a03      	ldrb	r3, [r0, #8]
 800ba32:	079b      	lsls	r3, r3, #30
 800ba34:	bf54      	ite	pl
 800ba36:	f9b0 0000 	ldrshpl.w	r0, [r0]
 800ba3a:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 800ba3e:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 800ba40:	f44f 7048 	mov.w	r0, #800	; 0x320
}
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	20010eb4 	.word	0x20010eb4

0800ba4c <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800ba4c:	b910      	cbnz	r0, 800ba54 <lv_disp_get_ver_res+0x8>
    return disp_def;
 800ba4e:	4b07      	ldr	r3, [pc, #28]	; (800ba6c <lv_disp_get_ver_res+0x20>)
 800ba50:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800ba52:	b138      	cbz	r0, 800ba64 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800ba54:	7a03      	ldrb	r3, [r0, #8]
 800ba56:	079b      	lsls	r3, r3, #30
 800ba58:	bf54      	ite	pl
 800ba5a:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 800ba5e:	f9b0 0000 	ldrshmi.w	r0, [r0]
 800ba62:	4770      	bx	lr
        return LV_VER_RES_MAX;
 800ba64:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20010eb4 	.word	0x20010eb4

0800ba70 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800ba70:	b910      	cbnz	r0, 800ba78 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 800ba72:	4b03      	ldr	r3, [pc, #12]	; (800ba80 <lv_disp_get_antialiasing+0x10>)
 800ba74:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 800ba76:	b110      	cbz	r0, 800ba7e <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 800ba78:	7a00      	ldrb	r0, [r0, #8]
 800ba7a:	f000 0001 	and.w	r0, r0, #1
#endif
}
 800ba7e:	4770      	bx	lr
 800ba80:	20010eb4 	.word	0x20010eb4

0800ba84 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800ba84:	6842      	ldr	r2, [r0, #4]
 800ba86:	7e13      	ldrb	r3, [r2, #24]
 800ba88:	f36f 0300 	bfc	r3, #0, #1
 800ba8c:	7613      	strb	r3, [r2, #24]
 800ba8e:	4770      	bx	lr

0800ba90 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800ba90:	6840      	ldr	r0, [r0, #4]
 800ba92:	4770      	bx	lr

0800ba94 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
 800ba94:	f8b0 0164 	ldrh.w	r0, [r0, #356]	; 0x164
}
 800ba98:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ba9c:	4770      	bx	lr

0800ba9e <lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
 800ba9e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 800baa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800baa6:	428a      	cmp	r2, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
 800baa8:	bfaa      	itet	ge
 800baaa:	1a52      	subge	r2, r2, r1
        disp->inv_p = 0;
 800baac:	f36f 0309 	bfclt	r3, #0, #10
        disp->inv_p -= num;
 800bab0:	f362 0309 	bfige	r3, r2, #0, #10
 800bab4:	f8a0 3164 	strh.w	r3, [r0, #356]	; 0x164
 800bab8:	4770      	bx	lr

0800baba <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800baba:	6843      	ldr	r3, [r0, #4]
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	b118      	cbz	r0, 800bac8 <lv_disp_is_double_buf+0xe>
 800bac0:	6858      	ldr	r0, [r3, #4]
 800bac2:	3000      	adds	r0, #0
 800bac4:	bf18      	it	ne
 800bac6:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800bac8:	4770      	bx	lr

0800baca <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800baca:	b508      	push	{r3, lr}
 800bacc:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800bace:	f7ff fff4 	bl	800baba <lv_disp_is_double_buf>
 800bad2:	b140      	cbz	r0, 800bae6 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800bad4:	8853      	ldrh	r3, [r2, #2]
 800bad6:	8810      	ldrh	r0, [r2, #0]
 800bad8:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800badc:	6853      	ldr	r3, [r2, #4]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	1ac3      	subs	r3, r0, r3
 800bae2:	4258      	negs	r0, r3
 800bae4:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 800bae6:	bd08      	pop	{r3, pc}

0800bae8 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 800bae8:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_indev_drv_t));
 800baea:	221c      	movs	r2, #28
{
 800baec:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_indev_drv_t));
 800baee:	2100      	movs	r1, #0
 800baf0:	f002 fc41 	bl	800e376 <memset>

    driver->type                = LV_INDEV_TYPE_NONE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	7023      	strb	r3, [r4, #0]
    driver->drag_limit          = LV_INDEV_DEF_DRAG_LIMIT;
 800baf8:	230a      	movs	r3, #10
 800bafa:	7523      	strb	r3, [r4, #20]
    driver->drag_throw          = LV_INDEV_DEF_DRAG_THROW;
 800bafc:	2314      	movs	r3, #20
 800bafe:	7563      	strb	r3, [r4, #21]
    driver->long_press_time     = LV_INDEV_DEF_LONG_PRESS_TIME;
 800bb00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bb04:	82e3      	strh	r3, [r4, #22]
    driver->long_press_rep_time = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 800bb06:	2364      	movs	r3, #100	; 0x64
 800bb08:	8323      	strh	r3, [r4, #24]
 800bb0a:	bd10      	pop	{r4, pc}

0800bb0c <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800bb0c:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800bb0e:	68c3      	ldr	r3, [r0, #12]
{
 800bb10:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800bb12:	b913      	cbnz	r3, 800bb1a <lv_indev_drv_register+0xe>
 800bb14:	f7ff ff82 	bl	800ba1c <lv_disp_get_default>
 800bb18:	60e8      	str	r0, [r5, #12]

    if(driver->disp == NULL) {
 800bb1a:	68ec      	ldr	r4, [r5, #12]
 800bb1c:	b31c      	cbz	r4, 800bb66 <lv_indev_drv_register+0x5a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attache the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 800bb1e:	4813      	ldr	r0, [pc, #76]	; (800bb6c <lv_indev_drv_register+0x60>)
 800bb20:	f000 fad5 	bl	800c0ce <lv_ll_ins_head>
    if(!indev) {
 800bb24:	4604      	mov	r4, r0
 800bb26:	b900      	cbnz	r0, 800bb2a <lv_indev_drv_register+0x1e>
 800bb28:	e7fe      	b.n	800bb28 <lv_indev_drv_register+0x1c>
        lv_mem_assert(indev);
        return NULL;
    }

    memset(indev, 0, sizeof(lv_indev_t));
 800bb2a:	225c      	movs	r2, #92	; 0x5c
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f002 fc22 	bl	800e376 <memset>
    memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 800bb32:	4623      	mov	r3, r4
 800bb34:	f105 021c 	add.w	r2, r5, #28
 800bb38:	f855 1b04 	ldr.w	r1, [r5], #4
 800bb3c:	f843 1b04 	str.w	r1, [r3], #4
 800bb40:	4295      	cmp	r5, r2
 800bb42:	d1f9      	bne.n	800bb38 <lv_indev_drv_register+0x2c>

    indev->proc.reset_query = 1;
 800bb44:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    indev->cursor           = NULL;
    indev->group            = NULL;
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
 800bb48:	4809      	ldr	r0, [pc, #36]	; (800bb70 <lv_indev_drv_register+0x64>)
    indev->proc.reset_query = 1;
 800bb4a:	f043 0302 	orr.w	r3, r3, #2
 800bb4e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    indev->cursor           = NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	6523      	str	r3, [r4, #80]	; 0x50
    indev->group            = NULL;
 800bb56:	6563      	str	r3, [r4, #84]	; 0x54
    indev->btn_points       = NULL;
 800bb58:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
 800bb5a:	2203      	movs	r2, #3
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	211e      	movs	r1, #30
 800bb60:	f000 fdfe 	bl	800c760 <lv_task_create>
 800bb64:	6120      	str	r0, [r4, #16]

    return indev;
}
 800bb66:	4620      	mov	r0, r4
 800bb68:	bd38      	pop	{r3, r4, r5, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20015bc8 	.word	0x20015bc8
 800bb70:	08005ebd 	.word	0x08005ebd

0800bb74 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800bb74:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800bb76:	4803      	ldr	r0, [pc, #12]	; (800bb84 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800bb78:	b909      	cbnz	r1, 800bb7e <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800bb7a:	f000 bae4 	b.w	800c146 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800bb7e:	f000 bae8 	b.w	800c152 <lv_ll_get_next>
 800bb82:	bf00      	nop
 800bb84:	20015bc8 	.word	0x20015bc8

0800bb88 <lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	460d      	mov	r5, r1
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));
 800bb8e:	2210      	movs	r2, #16
 800bb90:	2100      	movs	r1, #0
 800bb92:	4628      	mov	r0, r5
 800bb94:	f002 fbef 	bl	800e376 <memset>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 800bb98:	7823      	ldrb	r3, [r4, #0]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d10a      	bne.n	800bbb4 <lv_indev_read+0x2c>
        data->point.x = indev->proc.types.pointer.act_point.x;
 800bb9e:	8c23      	ldrh	r3, [r4, #32]
 800bba0:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 800bba2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bba4:	806b      	strh	r3, [r5, #2]
    /*Similarly set at least the last key in case of the  the user doesn't set it  on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
        data->key = indev->proc.types.keypad.last_key;
    }

    if(indev->driver.read_cb) {
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	b14b      	cbz	r3, 800bbbe <lv_indev_read+0x36>
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4620      	mov	r0, r4
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 800bbae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
 800bbb2:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 800bbb4:	2b02      	cmp	r3, #2
        data->key = indev->proc.types.keypad.last_key;
 800bbb6:	bf04      	itt	eq
 800bbb8:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 800bbba:	606b      	streq	r3, [r5, #4]
 800bbbc:	e7f3      	b.n	800bba6 <lv_indev_read+0x1e>
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bbc4 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800bbc4:	4b03      	ldr	r3, [pc, #12]	; (800bbd4 <lv_tick_inc+0x10>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800bbca:	4a03      	ldr	r2, [pc, #12]	; (800bbd8 <lv_tick_inc+0x14>)
 800bbcc:	6813      	ldr	r3, [r2, #0]
 800bbce:	4418      	add	r0, r3
 800bbd0:	6010      	str	r0, [r2, #0]
 800bbd2:	4770      	bx	lr
 800bbd4:	20010ebc 	.word	0x20010ebc
 800bbd8:	20010eb8 	.word	0x20010eb8

0800bbdc <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800bbdc:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <lv_tick_get+0x14>)
 800bbde:	f04f 0101 	mov.w	r1, #1
 800bbe2:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800bbe4:	781a      	ldrb	r2, [r3, #0]
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	d0fb      	beq.n	800bbe2 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800bbea:	4b02      	ldr	r3, [pc, #8]	; (800bbf4 <lv_tick_get+0x18>)
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	4770      	bx	lr
 800bbf0:	20010ebc 	.word	0x20010ebc
 800bbf4:	20010eb8 	.word	0x20010eb8

0800bbf8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800bbfc:	f7ff ffee 	bl	800bbdc <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800bc00:	1b00      	subs	r0, r0, r4
 800bc02:	bd10      	pop	{r4, pc}

0800bc04 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bc08:	4846      	ldr	r0, [pc, #280]	; (800bd24 <anim_task+0x120>)
 800bc0a:	4c46      	ldr	r4, [pc, #280]	; (800bd24 <anim_task+0x120>)
{
 800bc0c:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bc0e:	f000 fa9a 	bl	800c146 <lv_ll_get_head>
 800bc12:	b988      	cbnz	r0, 800bc38 <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800bc14:	4d44      	ldr	r5, [pc, #272]	; (800bd28 <anim_task+0x124>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800bc16:	4e45      	ldr	r6, [pc, #276]	; (800bd2c <anim_task+0x128>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800bc18:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800bc1a:	4f42      	ldr	r7, [pc, #264]	; (800bd24 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800bc1c:	f7ff ffec 	bl	800bbf8 <lv_tick_elaps>
 800bc20:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800bc22:	4840      	ldr	r0, [pc, #256]	; (800bd24 <anim_task+0x120>)
 800bc24:	f000 fa8f 	bl	800c146 <lv_ll_get_head>
 800bc28:	4604      	mov	r4, r0
    while(a != NULL) {
 800bc2a:	b984      	cbnz	r4, 800bc4e <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 800bc2c:	f7ff ffd6 	bl	800bbdc <lv_tick_get>
 800bc30:	6028      	str	r0, [r5, #0]
}
 800bc32:	b00a      	add	sp, #40	; 0x28
 800bc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 800bc38:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bc3c:	f36f 03c3 	bfc	r3, #3, #1
 800bc40:	f880 3020 	strb.w	r3, [r0, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bc44:	4601      	mov	r1, r0
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fa83 	bl	800c152 <lv_ll_get_next>
 800bc4c:	e7e1      	b.n	800bc12 <anim_task+0xe>
        anim_list_changed = false;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 800bc52:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bc56:	0718      	lsls	r0, r3, #28
 800bc58:	d45f      	bmi.n	800bd1a <anim_task+0x116>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800bc5a:	f043 0308 	orr.w	r3, r3, #8
 800bc5e:	f884 3020 	strb.w	r3, [r4, #32]
            a->act_time += elaps;
 800bc62:	8b63      	ldrh	r3, [r4, #26]
 800bc64:	4443      	add	r3, r8
 800bc66:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800bc68:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800bc6a:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800bc6c:	db55      	blt.n	800bd1a <anim_task+0x116>
                if(a->act_time > a->time) a->act_time = a->time;
 800bc6e:	8b22      	ldrh	r2, [r4, #24]
 800bc70:	4293      	cmp	r3, r2
 800bc72:	bfc8      	it	gt
 800bc74:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 800bc76:	68a3      	ldr	r3, [r4, #8]
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800bc7c:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800bc7e:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800bc80:	b10b      	cbz	r3, 800bc86 <anim_task+0x82>
 800bc82:	6820      	ldr	r0, [r4, #0]
 800bc84:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800bc86:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800bc8a:	8b23      	ldrh	r3, [r4, #24]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	db24      	blt.n	800bcda <anim_task+0xd6>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800bc90:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bc94:	0799      	lsls	r1, r3, #30
 800bc96:	d003      	beq.n	800bca0 <anim_task+0x9c>
 800bc98:	f003 0207 	and.w	r2, r3, #7
 800bc9c:	2a05      	cmp	r2, #5
 800bc9e:	d123      	bne.n	800bce8 <anim_task+0xe4>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800bca0:	4623      	mov	r3, r4
 800bca2:	aa01      	add	r2, sp, #4
 800bca4:	f104 0c20 	add.w	ip, r4, #32
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	6859      	ldr	r1, [r3, #4]
 800bcac:	4696      	mov	lr, r2
 800bcae:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	4563      	cmp	r3, ip
 800bcb6:	4672      	mov	r2, lr
 800bcb8:	d1f6      	bne.n	800bca8 <anim_task+0xa4>
 800bcba:	6818      	ldr	r0, [r3, #0]
 800bcbc:	f8ce 0000 	str.w	r0, [lr]
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f000 fa7e 	bl	800c1c4 <lv_ll_rem>
        lv_mem_free(a);
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fbb9 	bl	800c440 <lv_mem_free>
        anim_list_changed = true;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	b10b      	cbz	r3, 800bcda <anim_task+0xd6>
 800bcd6:	a801      	add	r0, sp, #4
 800bcd8:	4798      	blx	r3
        if(anim_list_changed)
 800bcda:	7833      	ldrb	r3, [r6, #0]
 800bcdc:	b1eb      	cbz	r3, 800bd1a <anim_task+0x116>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800bcde:	4638      	mov	r0, r7
 800bce0:	f000 fa31 	bl	800c146 <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800bce4:	4604      	mov	r4, r0
 800bce6:	e7a0      	b.n	800bc2a <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800bce8:	8be2      	ldrh	r2, [r4, #30]
 800bcea:	4252      	negs	r2, r2
 800bcec:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800bcee:	07da      	lsls	r2, r3, #31
 800bcf0:	d5f3      	bpl.n	800bcda <anim_task+0xd6>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800bcf2:	f013 0304 	ands.w	r3, r3, #4
 800bcf6:	bf02      	ittt	eq
 800bcf8:	8ba2      	ldrheq	r2, [r4, #28]
 800bcfa:	4252      	negeq	r2, r2
 800bcfc:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800bcfe:	fab3 f383 	clz	r3, r3
 800bd02:	f894 2020 	ldrb.w	r2, [r4, #32]
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	f363 0282 	bfi	r2, r3, #2, #1
 800bd0c:	f884 2020 	strb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800bd10:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800bd12:	6962      	ldr	r2, [r4, #20]
 800bd14:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 800bd16:	6163      	str	r3, [r4, #20]
 800bd18:	e7df      	b.n	800bcda <anim_task+0xd6>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f000 fa18 	bl	800c152 <lv_ll_get_next>
 800bd22:	e7df      	b.n	800bce4 <anim_task+0xe0>
 800bd24:	20015c04 	.word	0x20015c04
 800bd28:	20010ec0 	.word	0x20010ec0
 800bd2c:	20010ebd 	.word	0x20010ebd

0800bd30 <lv_anim_core_init>:
{
 800bd30:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800bd32:	2124      	movs	r1, #36	; 0x24
 800bd34:	4807      	ldr	r0, [pc, #28]	; (800bd54 <lv_anim_core_init+0x24>)
 800bd36:	f000 f9c0 	bl	800c0ba <lv_ll_init>
    last_task_run = lv_tick_get();
 800bd3a:	f7ff ff4f 	bl	800bbdc <lv_tick_get>
 800bd3e:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800bd40:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800bd42:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800bd44:	211e      	movs	r1, #30
 800bd46:	2300      	movs	r3, #0
 800bd48:	4804      	ldr	r0, [pc, #16]	; (800bd5c <lv_anim_core_init+0x2c>)
}
 800bd4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800bd4e:	f000 bd07 	b.w	800c760 <lv_task_create>
 800bd52:	bf00      	nop
 800bd54:	20015c04 	.word	0x20015c04
 800bd58:	20010ec0 	.word	0x20010ec0
 800bd5c:	0800bc05 	.word	0x0800bc05

0800bd60 <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 800bd60:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800bd62:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800bd66:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800bd68:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800bd6a:	80c3      	strh	r3, [r0, #6]
 800bd6c:	4770      	bx	lr

0800bd6e <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 800bd6e:	8843      	ldrh	r3, [r0, #2]
 800bd70:	3901      	subs	r1, #1
 800bd72:	4419      	add	r1, r3
 800bd74:	80c1      	strh	r1, [r0, #6]
 800bd76:	4770      	bx	lr

0800bd78 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800bd78:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bd7c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800bd80:	1ad2      	subs	r2, r2, r3
 800bd82:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800bd86:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800bd8a:	1a18      	subs	r0, r3, r0
 800bd8c:	3001      	adds	r0, #1

    return size;
}
 800bd8e:	fb02 0000 	mla	r0, r2, r0, r0
 800bd92:	4770      	bx	lr

0800bd94 <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800bd94:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800bd98:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800bd9a:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800bd9e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800bda2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800bda6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800bdaa:	429d      	cmp	r5, r3
 800bdac:	bfb8      	it	lt
 800bdae:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800bdb0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800bdb4:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800bdb6:	42a3      	cmp	r3, r4
 800bdb8:	bfb8      	it	lt
 800bdba:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800bdbc:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800bdc0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800bdc4:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800bdc6:	42b4      	cmp	r4, r6
 800bdc8:	bfa8      	it	ge
 800bdca:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800bdcc:	428a      	cmp	r2, r1
 800bdce:	bfa8      	it	ge
 800bdd0:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800bdd2:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800bdd4:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800bdd6:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800bdd8:	dc04      	bgt.n	800bde4 <lv_area_intersect+0x50>
 800bdda:	4293      	cmp	r3, r2
 800bddc:	bfcc      	ite	gt
 800bdde:	2000      	movgt	r0, #0
 800bde0:	2001      	movle	r0, #1
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800bde4:	2000      	movs	r0, #0
    }

    return union_ok;
}
 800bde6:	bd70      	pop	{r4, r5, r6, pc}

0800bde8 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800bde8:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800bdec:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800bdee:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	bfa8      	it	ge
 800bdf6:	4623      	movge	r3, r4
 800bdf8:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800bdfa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800bdfe:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800be02:	42a3      	cmp	r3, r4
 800be04:	bfa8      	it	ge
 800be06:	4623      	movge	r3, r4
 800be08:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800be0a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800be0e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800be12:	42a3      	cmp	r3, r4
 800be14:	bfb8      	it	lt
 800be16:	4623      	movlt	r3, r4
 800be18:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800be1a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800be1e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800be22:	4293      	cmp	r3, r2
 800be24:	bfb8      	it	lt
 800be26:	4613      	movlt	r3, r2
 800be28:	80c3      	strh	r3, [r0, #6]
 800be2a:	bd10      	pop	{r4, pc}

0800be2c <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800be2c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800be30:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be34:	429a      	cmp	r2, r3
 800be36:	dc10      	bgt.n	800be5a <lv_area_is_point_on+0x2e>
 800be38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	db0c      	blt.n	800be5a <lv_area_is_point_on+0x2e>
 800be40:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800be44:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800be48:	429a      	cmp	r2, r3
 800be4a:	dc06      	bgt.n	800be5a <lv_area_is_point_on+0x2e>
 800be4c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800be50:	4298      	cmp	r0, r3
 800be52:	bfb4      	ite	lt
 800be54:	2000      	movlt	r0, #0
 800be56:	2001      	movge	r0, #1
 800be58:	4770      	bx	lr
    bool is_on = false;
 800be5a:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 800be5c:	4770      	bx	lr

0800be5e <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800be5e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be62:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800be66:	429a      	cmp	r2, r3
 800be68:	dc14      	bgt.n	800be94 <lv_area_is_on+0x36>
 800be6a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800be6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800be72:	429a      	cmp	r2, r3
 800be74:	db0e      	blt.n	800be94 <lv_area_is_on+0x36>
 800be76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800be7a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800be7e:	429a      	cmp	r2, r3
 800be80:	dc08      	bgt.n	800be94 <lv_area_is_on+0x36>
 800be82:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800be86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800be8a:	4298      	cmp	r0, r3
 800be8c:	bfb4      	ite	lt
 800be8e:	2000      	movlt	r0, #0
 800be90:	2001      	movge	r0, #1
 800be92:	4770      	bx	lr
        return true;
    } else {
        return false;
 800be94:	2000      	movs	r0, #0
    }
}
 800be96:	4770      	bx	lr

0800be98 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800be98:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be9c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	db14      	blt.n	800bece <lv_area_is_in+0x36>
 800bea4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bea8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800beac:	429a      	cmp	r2, r3
 800beae:	db0e      	blt.n	800bece <lv_area_is_in+0x36>
 800beb0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800beb4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800beb8:	429a      	cmp	r2, r3
 800beba:	dc08      	bgt.n	800bece <lv_area_is_in+0x36>
 800bebc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800bec0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800bec4:	4298      	cmp	r0, r3
 800bec6:	bfcc      	ite	gt
 800bec8:	2000      	movgt	r0, #0
 800beca:	2001      	movle	r0, #1
 800becc:	4770      	bx	lr
    bool is_in = false;
 800bece:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800bed0:	4770      	bx	lr

0800bed2 <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 800bed2:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800bed4:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 800bed6:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 800beda:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800bedc:	800a      	strh	r2, [r1, #0]
 800bede:	4770      	bx	lr

0800bee0 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800bee0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bee4:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800bee8:	4282      	cmp	r2, r0
 800beea:	bfcc      	ite	gt
 800beec:	2000      	movgt	r0, #0
 800beee:	2001      	movle	r0, #1
 800bef0:	4770      	bx	lr

0800bef2 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800bef2:	8842      	ldrh	r2, [r0, #2]
 800bef4:	3201      	adds	r2, #1
{
 800bef6:	b530      	push	{r4, r5, lr}
    c->y++;
 800bef8:	b294      	uxth	r4, r2
 800befa:	b225      	sxth	r5, r4
 800befc:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 800befe:	f9b1 2000 	ldrsh.w	r2, [r1]
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	dc04      	bgt.n	800bf10 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
 800bf06:	3201      	adds	r2, #1
 800bf08:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800bf0c:	800a      	strh	r2, [r1, #0]
 800bf0e:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 800bf10:	8803      	ldrh	r3, [r0, #0]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	b21b      	sxth	r3, r3
 800bf16:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
 800bf18:	1aed      	subs	r5, r5, r3
 800bf1a:	880b      	ldrh	r3, [r1, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800bf22:	800b      	strh	r3, [r1, #0]
 800bf24:	bd30      	pop	{r4, r5, pc}

0800bf26 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800bf26:	1c42      	adds	r2, r0, #1
 800bf28:	4610      	mov	r0, r2

    while(*path != '\0') {
 800bf2a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bf2e:	b12b      	cbz	r3, 800bf3c <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800bf30:	2b3a      	cmp	r3, #58	; 0x3a
 800bf32:	d0f9      	beq.n	800bf28 <lv_fs_get_real_path+0x2>
 800bf34:	2b5c      	cmp	r3, #92	; 0x5c
 800bf36:	d0f7      	beq.n	800bf28 <lv_fs_get_real_path+0x2>
 800bf38:	2b2f      	cmp	r3, #47	; 0x2f
 800bf3a:	d0f5      	beq.n	800bf28 <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800bf3c:	4770      	bx	lr
	...

0800bf40 <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800bf40:	2144      	movs	r1, #68	; 0x44
 800bf42:	4801      	ldr	r0, [pc, #4]	; (800bf48 <lv_fs_init+0x8>)
 800bf44:	f000 b8b9 	b.w	800c0ba <lv_ll_init>
 800bf48:	20015bf0 	.word	0x20015bf0

0800bf4c <lv_fs_close>:
{
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800bf50:	6840      	ldr	r0, [r0, #4]
 800bf52:	b160      	cbz	r0, 800bf6e <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800bf54:	6903      	ldr	r3, [r0, #16]
 800bf56:	b163      	cbz	r3, 800bf72 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800bf58:	6821      	ldr	r1, [r4, #0]
 800bf5a:	4798      	blx	r3
 800bf5c:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	f000 fa6e 	bl	800c440 <lv_mem_free>
    file_p->file_d = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800bf68:	6063      	str	r3, [r4, #4]
}
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800bf6e:	250b      	movs	r5, #11
 800bf70:	e7fb      	b.n	800bf6a <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800bf72:	2509      	movs	r5, #9
 800bf74:	e7f9      	b.n	800bf6a <lv_fs_close+0x1e>

0800bf76 <lv_fs_read>:
{
 800bf76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf78:	4606      	mov	r6, r0
 800bf7a:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	b10b      	cbz	r3, 800bf84 <lv_fs_read+0xe>
 800bf80:	2300      	movs	r3, #0
 800bf82:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800bf84:	6870      	ldr	r0, [r6, #4]
 800bf86:	b178      	cbz	r0, 800bfa8 <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800bf88:	6985      	ldr	r5, [r0, #24]
 800bf8a:	b17d      	cbz	r5, 800bfac <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800bf8c:	ab04      	add	r3, sp, #16
 800bf8e:	2700      	movs	r7, #0
 800bf90:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	4613      	mov	r3, r2
 800bf98:	460a      	mov	r2, r1
 800bf9a:	6831      	ldr	r1, [r6, #0]
 800bf9c:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800bf9e:	b10c      	cbz	r4, 800bfa4 <lv_fs_read+0x2e>
 800bfa0:	9b03      	ldr	r3, [sp, #12]
 800bfa2:	6023      	str	r3, [r4, #0]
}
 800bfa4:	b005      	add	sp, #20
 800bfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800bfa8:	200b      	movs	r0, #11
 800bfaa:	e7fb      	b.n	800bfa4 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800bfac:	2009      	movs	r0, #9
 800bfae:	e7f9      	b.n	800bfa4 <lv_fs_read+0x2e>

0800bfb0 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800bfb0:	6843      	ldr	r3, [r0, #4]
{
 800bfb2:	b410      	push	{r4}
 800bfb4:	460a      	mov	r2, r1
    if(file_p->drv == NULL) {
 800bfb6:	b13b      	cbz	r3, 800bfc8 <lv_fs_seek+0x18>
    if(file_p->drv->seek_cb == NULL) {
 800bfb8:	6a1c      	ldr	r4, [r3, #32]
 800bfba:	b14c      	cbz	r4, 800bfd0 <lv_fs_seek+0x20>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800bfbc:	6801      	ldr	r1, [r0, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	4623      	mov	r3, r4
}
 800bfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800bfc6:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800bfc8:	200b      	movs	r0, #11
}
 800bfca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfce:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800bfd0:	2009      	movs	r0, #9
 800bfd2:	e7fa      	b.n	800bfca <lv_fs_seek+0x1a>

0800bfd4 <lv_fs_get_drv>:
{
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4604      	mov	r4, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800bfd8:	4806      	ldr	r0, [pc, #24]	; (800bff4 <lv_fs_get_drv+0x20>)
 800bfda:	4d06      	ldr	r5, [pc, #24]	; (800bff4 <lv_fs_get_drv+0x20>)
 800bfdc:	f000 f8b3 	bl	800c146 <lv_ll_get_head>
 800bfe0:	b900      	cbnz	r0, 800bfe4 <lv_fs_get_drv+0x10>
}
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800bfe4:	7803      	ldrb	r3, [r0, #0]
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	d0fb      	beq.n	800bfe2 <lv_fs_get_drv+0xe>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800bfea:	4601      	mov	r1, r0
 800bfec:	4628      	mov	r0, r5
 800bfee:	f000 f8b0 	bl	800c152 <lv_ll_get_next>
 800bff2:	e7f5      	b.n	800bfe0 <lv_fs_get_drv+0xc>
 800bff4:	20015bf0 	.word	0x20015bf0

0800bff8 <lv_fs_open>:
    file_p->drv    = NULL;
 800bff8:	2300      	movs	r3, #0
{
 800bffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffe:	4604      	mov	r4, r0
 800c000:	4690      	mov	r8, r2
    file_p->drv    = NULL;
 800c002:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800c004:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c006:	460d      	mov	r5, r1
 800c008:	b369      	cbz	r1, 800c066 <lv_fs_open+0x6e>
    file_p->drv = lv_fs_get_drv(letter);
 800c00a:	7808      	ldrb	r0, [r1, #0]
 800c00c:	f7ff ffe2 	bl	800bfd4 <lv_fs_get_drv>
 800c010:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800c012:	b920      	cbnz	r0, 800c01e <lv_fs_open+0x26>
        file_p->file_d = NULL;
 800c014:	6020      	str	r0, [r4, #0]
        return LV_FS_RES_NOT_EX;
 800c016:	2503      	movs	r5, #3
}
 800c018:	4628      	mov	r0, r5
 800c01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 800c01e:	6883      	ldr	r3, [r0, #8]
 800c020:	b12b      	cbz	r3, 800c02e <lv_fs_open+0x36>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800c022:	4798      	blx	r3
 800c024:	b918      	cbnz	r0, 800c02e <lv_fs_open+0x36>
            file_p->drv    = NULL;
 800c026:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800c028:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800c02a:	2501      	movs	r5, #1
 800c02c:	e7f4      	b.n	800c018 <lv_fs_open+0x20>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800c02e:	6863      	ldr	r3, [r4, #4]
 800c030:	8858      	ldrh	r0, [r3, #2]
 800c032:	f000 f9cf 	bl	800c3d4 <lv_mem_alloc>
 800c036:	4601      	mov	r1, r0
 800c038:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800c03a:	b900      	cbnz	r0, 800c03e <lv_fs_open+0x46>
 800c03c:	e7fe      	b.n	800c03c <lv_fs_open+0x44>
    if(file_p->drv->open_cb == NULL) {
 800c03e:	6867      	ldr	r7, [r4, #4]
 800c040:	68fe      	ldr	r6, [r7, #12]
 800c042:	b196      	cbz	r6, 800c06a <lv_fs_open+0x72>
    const char * real_path = lv_fs_get_real_path(path);
 800c044:	4628      	mov	r0, r5
 800c046:	f7ff ff6e 	bl	800bf26 <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c04a:	4643      	mov	r3, r8
 800c04c:	4602      	mov	r2, r0
 800c04e:	4638      	mov	r0, r7
 800c050:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 800c052:	4605      	mov	r5, r0
 800c054:	2800      	cmp	r0, #0
 800c056:	d0df      	beq.n	800c018 <lv_fs_open+0x20>
        lv_mem_free(file_p->file_d);
 800c058:	6820      	ldr	r0, [r4, #0]
 800c05a:	f000 f9f1 	bl	800c440 <lv_mem_free>
        file_p->file_d = NULL;
 800c05e:	2300      	movs	r3, #0
 800c060:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800c062:	6063      	str	r3, [r4, #4]
 800c064:	e7d8      	b.n	800c018 <lv_fs_open+0x20>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c066:	250b      	movs	r5, #11
 800c068:	e7d6      	b.n	800c018 <lv_fs_open+0x20>
        return LV_FS_RES_NOT_IMP;
 800c06a:	2509      	movs	r5, #9
 800c06c:	e7d4      	b.n	800c018 <lv_fs_open+0x20>
	...

0800c070 <lv_fs_get_ext>:
{
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800c074:	f7f4 f8b6 	bl	80001e4 <strlen>
 800c078:	b280      	uxth	r0, r0
 800c07a:	b908      	cbnz	r0, 800c080 <lv_fs_get_ext+0x10>
            return ""; /*No extension if a '\' or '/' found*/
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <lv_fs_get_ext+0x28>)
}
 800c07e:	bd10      	pop	{r4, pc}
        if(fn[i] == '.') {
 800c080:	5c23      	ldrb	r3, [r4, r0]
 800c082:	2b2e      	cmp	r3, #46	; 0x2e
 800c084:	d102      	bne.n	800c08c <lv_fs_get_ext+0x1c>
            return &fn[i + 1];
 800c086:	3001      	adds	r0, #1
 800c088:	4420      	add	r0, r4
 800c08a:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800c08c:	2b2f      	cmp	r3, #47	; 0x2f
 800c08e:	d0f5      	beq.n	800c07c <lv_fs_get_ext+0xc>
 800c090:	2b5c      	cmp	r3, #92	; 0x5c
 800c092:	d0f3      	beq.n	800c07c <lv_fs_get_ext+0xc>
    for(i = strlen(fn); i > 0; i--) {
 800c094:	3801      	subs	r0, #1
 800c096:	e7ef      	b.n	800c078 <lv_fs_get_ext+0x8>
 800c098:	080e4bc6 	.word	0x080e4bc6

0800c09c <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800c09c:	b131      	cbz	r1, 800c0ac <node_set_next.isra.0+0x10>
 800c09e:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800c0a0:	b112      	cbz	r2, 800c0a8 <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800c0a2:	4419      	add	r1, r3
 800c0a4:	604a      	str	r2, [r1, #4]
 800c0a6:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	50ca      	str	r2, [r1, r3]
 800c0ac:	4770      	bx	lr

0800c0ae <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800c0ae:	b119      	cbz	r1, 800c0b8 <node_set_prev.isra.2+0xa>
 800c0b0:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800c0b2:	50ca      	str	r2, [r1, r3]
    if(prev)
 800c0b4:	b102      	cbz	r2, 800c0b8 <node_set_prev.isra.2+0xa>
 800c0b6:	4770      	bx	lr
 800c0b8:	4770      	bx	lr

0800c0ba <lv_ll_init>:
    ll_p->head = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800c0be:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800c0c0:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 800c0c2:	bf1c      	itt	ne
 800c0c4:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 800c0c8:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 800c0ca:	6001      	str	r1, [r0, #0]
 800c0cc:	4770      	bx	lr

0800c0ce <lv_ll_ins_head>:
{
 800c0ce:	b538      	push	{r3, r4, r5, lr}
 800c0d0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	3008      	adds	r0, #8
 800c0d6:	f000 f97d 	bl	800c3d4 <lv_mem_alloc>
    if(n_new != NULL) {
 800c0da:	4605      	mov	r5, r0
 800c0dc:	b198      	cbz	r0, 800c106 <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800c0de:	4601      	mov	r1, r0
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7ff ffe3 	bl	800c0ae <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	6862      	ldr	r2, [r4, #4]
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f7ff ffd5 	bl	800c09c <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c0f2:	6861      	ldr	r1, [r4, #4]
 800c0f4:	b119      	cbz	r1, 800c0fe <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7ff ffd8 	bl	800c0ae <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c0fe:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800c100:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c102:	b903      	cbnz	r3, 800c106 <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 800c104:	60a5      	str	r5, [r4, #8]
}
 800c106:	4628      	mov	r0, r5
 800c108:	bd38      	pop	{r3, r4, r5, pc}

0800c10a <lv_ll_ins_tail>:
{
 800c10a:	b538      	push	{r3, r4, r5, lr}
 800c10c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c10e:	6800      	ldr	r0, [r0, #0]
 800c110:	3008      	adds	r0, #8
 800c112:	f000 f95f 	bl	800c3d4 <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800c116:	4605      	mov	r5, r0
 800c118:	b198      	cbz	r0, 800c142 <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800c11a:	4601      	mov	r1, r0
 800c11c:	2200      	movs	r2, #0
 800c11e:	4620      	mov	r0, r4
 800c120:	f7ff ffbc 	bl	800c09c <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800c124:	4629      	mov	r1, r5
 800c126:	68a2      	ldr	r2, [r4, #8]
 800c128:	4620      	mov	r0, r4
 800c12a:	f7ff ffc0 	bl	800c0ae <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800c12e:	68a1      	ldr	r1, [r4, #8]
 800c130:	b119      	cbz	r1, 800c13a <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800c132:	462a      	mov	r2, r5
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff ffb1 	bl	800c09c <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c13a:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800c13c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c13e:	b903      	cbnz	r3, 800c142 <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 800c140:	6065      	str	r5, [r4, #4]
}
 800c142:	4628      	mov	r0, r5
 800c144:	bd38      	pop	{r3, r4, r5, pc}

0800c146 <lv_ll_get_head>:
    if(ll_p != NULL) {
 800c146:	b100      	cbz	r0, 800c14a <lv_ll_get_head+0x4>
        head = ll_p->head;
 800c148:	6840      	ldr	r0, [r0, #4]
}
 800c14a:	4770      	bx	lr

0800c14c <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800c14c:	b100      	cbz	r0, 800c150 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800c14e:	6880      	ldr	r0, [r0, #8]
}
 800c150:	4770      	bx	lr

0800c152 <lv_ll_get_next>:
    if(ll_p != NULL) {
 800c152:	b110      	cbz	r0, 800c15a <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800c154:	6803      	ldr	r3, [r0, #0]
 800c156:	4419      	add	r1, r3
 800c158:	6848      	ldr	r0, [r1, #4]
}
 800c15a:	4770      	bx	lr

0800c15c <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800c15c:	b108      	cbz	r0, 800c162 <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800c15e:	6803      	ldr	r3, [r0, #0]
 800c160:	58c8      	ldr	r0, [r1, r3]
}
 800c162:	4770      	bx	lr

0800c164 <lv_ll_ins_prev>:
{
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c168:	4605      	mov	r5, r0
 800c16a:	b340      	cbz	r0, 800c1be <lv_ll_ins_prev+0x5a>
 800c16c:	b341      	cbz	r1, 800c1c0 <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 800c16e:	6843      	ldr	r3, [r0, #4]
 800c170:	4299      	cmp	r1, r3
 800c172:	d103      	bne.n	800c17c <lv_ll_ins_prev+0x18>
}
 800c174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 800c178:	f7ff bfa9 	b.w	800c0ce <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c17c:	6800      	ldr	r0, [r0, #0]
 800c17e:	3008      	adds	r0, #8
 800c180:	f000 f928 	bl	800c3d4 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800c184:	4606      	mov	r6, r0
 800c186:	b1c0      	cbz	r0, 800c1ba <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800c188:	4621      	mov	r1, r4
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7ff ffe6 	bl	800c15c <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 800c190:	4632      	mov	r2, r6
 800c192:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800c194:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800c196:	4628      	mov	r0, r5
 800c198:	f7ff ff80 	bl	800c09c <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800c19c:	463a      	mov	r2, r7
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f7ff ff84 	bl	800c0ae <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7ff ff7f 	bl	800c0ae <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f7ff ff71 	bl	800c09c <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800c1ba:	4634      	mov	r4, r6
 800c1bc:	e000      	b.n	800c1c0 <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c1be:	4604      	mov	r4, r0
}
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1c4 <lv_ll_rem>:
{
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	b308      	cbz	r0, 800c210 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c1cc:	6843      	ldr	r3, [r0, #4]
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	d10e      	bne.n	800c1f0 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff ffbc 	bl	800c152 <lv_ll_get_next>
 800c1da:	4601      	mov	r1, r0
 800c1dc:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800c1de:	b908      	cbnz	r0, 800c1e4 <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 800c1e0:	60a0      	str	r0, [r4, #8]
 800c1e2:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800c1e4:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800c1e6:	4620      	mov	r0, r4
}
 800c1e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800c1ec:	f7ff bf5f 	b.w	800c0ae <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800c1f0:	6883      	ldr	r3, [r0, #8]
 800c1f2:	4299      	cmp	r1, r3
 800c1f4:	d10e      	bne.n	800c214 <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800c1f6:	f7ff ffb1 	bl	800c15c <lv_ll_get_prev>
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800c1fe:	b908      	cbnz	r0, 800c204 <lv_ll_rem+0x40>
            ll_p->head = NULL;
 800c200:	6060      	str	r0, [r4, #4]
 800c202:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 800c204:	4620      	mov	r0, r4
 800c206:	2200      	movs	r2, #0
}
 800c208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800c20c:	f7ff bf46 	b.w	800c09c <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c210:	2900      	cmp	r1, #0
 800c212:	d0de      	beq.n	800c1d2 <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800c214:	4611      	mov	r1, r2
 800c216:	4620      	mov	r0, r4
 800c218:	f7ff ffa0 	bl	800c15c <lv_ll_get_prev>
 800c21c:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c21e:	4611      	mov	r1, r2
 800c220:	4620      	mov	r0, r4
 800c222:	f7ff ff96 	bl	800c152 <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 800c226:	4631      	mov	r1, r6
 800c228:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c22a:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7ff ff35 	bl	800c09c <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800c232:	4632      	mov	r2, r6
 800c234:	4629      	mov	r1, r5
 800c236:	e7d6      	b.n	800c1e6 <lv_ll_rem+0x22>

0800c238 <lv_ll_chg_list>:
{
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	460c      	mov	r4, r1
 800c23c:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 800c23e:	4611      	mov	r1, r2
{
 800c240:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800c242:	f7ff ffbf 	bl	800c1c4 <lv_ll_rem>
    if(head) {
 800c246:	b1a6      	cbz	r6, 800c272 <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 800c248:	2200      	movs	r2, #0
 800c24a:	4629      	mov	r1, r5
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7ff ff2e 	bl	800c0ae <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800c252:	4629      	mov	r1, r5
 800c254:	6862      	ldr	r2, [r4, #4]
 800c256:	4620      	mov	r0, r4
 800c258:	f7ff ff20 	bl	800c09c <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c25c:	6861      	ldr	r1, [r4, #4]
 800c25e:	b119      	cbz	r1, 800c268 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800c260:	462a      	mov	r2, r5
 800c262:	4620      	mov	r0, r4
 800c264:	f7ff ff23 	bl	800c0ae <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c268:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800c26a:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c26c:	b9ab      	cbnz	r3, 800c29a <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 800c26e:	60a5      	str	r5, [r4, #8]
 800c270:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800c272:	68a2      	ldr	r2, [r4, #8]
 800c274:	4629      	mov	r1, r5
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff ff19 	bl	800c0ae <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800c27c:	4629      	mov	r1, r5
 800c27e:	4632      	mov	r2, r6
 800c280:	4620      	mov	r0, r4
 800c282:	f7ff ff0b 	bl	800c09c <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800c286:	68a1      	ldr	r1, [r4, #8]
 800c288:	b119      	cbz	r1, 800c292 <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800c28a:	462a      	mov	r2, r5
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7ff ff05 	bl	800c09c <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c292:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800c294:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c296:	b903      	cbnz	r3, 800c29a <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 800c298:	6065      	str	r5, [r4, #4]
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 800c29c:	4291      	cmp	r1, r2
{
 800c29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800c2a6:	d042      	beq.n	800c32e <lv_ll_move_before+0x92>
    if(n_after != NULL)
 800c2a8:	b132      	cbz	r2, 800c2b8 <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	f7ff ff56 	bl	800c15c <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c2b0:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 800c2b2:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c2b4:	d121      	bne.n	800c2fa <lv_ll_move_before+0x5e>
 800c2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800c2b8:	b100      	cbz	r0, 800c2bc <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 800c2ba:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c2bc:	42b4      	cmp	r4, r6
 800c2be:	d100      	bne.n	800c2c2 <lv_ll_move_before+0x26>
 800c2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f7ff ff7d 	bl	800c1c4 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	4631      	mov	r1, r6
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f7ff fee4 	bl	800c09c <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c2d4:	4632      	mov	r2, r6
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f7ff fee8 	bl	800c0ae <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c2de:	4622      	mov	r2, r4
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f7ff fee3 	bl	800c0ae <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f7ff fed5 	bl	800c09c <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800c2f2:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800c2f4:	b9de      	cbnz	r6, 800c32e <lv_ll_move_before+0x92>
 800c2f6:	606c      	str	r4, [r5, #4]
 800c2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f7ff ff61 	bl	800c1c4 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c302:	4622      	mov	r2, r4
 800c304:	4639      	mov	r1, r7
 800c306:	4628      	mov	r0, r5
 800c308:	f7ff fec8 	bl	800c09c <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c30c:	463a      	mov	r2, r7
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f7ff fecc 	bl	800c0ae <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c316:	4631      	mov	r1, r6
 800c318:	4622      	mov	r2, r4
 800c31a:	4628      	mov	r0, r5
 800c31c:	f7ff fec7 	bl	800c0ae <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c320:	4632      	mov	r2, r6
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f7ff feb9 	bl	800c09c <node_set_next.isra.0>
 800c32a:	463e      	mov	r6, r7
 800c32c:	e7e2      	b.n	800c2f4 <lv_ll_move_before+0x58>
 800c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c330 <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 800c330:	b130      	cbz	r0, 800c340 <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800c332:	6843      	ldr	r3, [r0, #4]
 800c334:	b933      	cbnz	r3, 800c344 <lv_ll_is_empty+0x14>
 800c336:	6880      	ldr	r0, [r0, #8]
 800c338:	fab0 f080 	clz	r0, r0
 800c33c:	0940      	lsrs	r0, r0, #5
 800c33e:	4770      	bx	lr
    if(ll_p == NULL) return true;
 800c340:	2001      	movs	r0, #1
 800c342:	4770      	bx	lr
    return false;
 800c344:	2000      	movs	r0, #0
}
 800c346:	4770      	bx	lr

0800c348 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800c348:	4a07      	ldr	r2, [pc, #28]	; (800c368 <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800c34a:	b908      	cbnz	r0, 800c350 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 800c34c:	6810      	ldr	r0, [r2, #0]
 800c34e:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800c350:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800c352:	6800      	ldr	r0, [r0, #0]
 800c354:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800c358:	6813      	ldr	r3, [r2, #0]
 800c35a:	1d01      	adds	r1, r0, #4
 800c35c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c360:	4299      	cmp	r1, r3
 800c362:	bf28      	it	cs
 800c364:	2000      	movcs	r0, #0
    }

    return next_e;
}
 800c366:	4770      	bx	lr
 800c368:	20010ec4 	.word	0x20010ec4

0800c36c <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800c36c:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 800c36e:	bf18      	it	ne
 800c370:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c374:	6803      	ldr	r3, [r0, #0]
        size += 4;
 800c376:	bf18      	it	ne
 800c378:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c37a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800c37e:	1d0a      	adds	r2, r1, #4
 800c380:	4293      	cmp	r3, r2
{
 800c382:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c384:	d011      	beq.n	800c3aa <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800c386:	4299      	cmp	r1, r3
 800c388:	d00a      	beq.n	800c3a0 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 800c38a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c38c:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 800c38e:	5c54      	ldrb	r4, [r2, r1]
 800c390:	f36f 0400 	bfc	r4, #0, #1
 800c394:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c396:	5854      	ldr	r4, [r2, r1]
 800c398:	1a5b      	subs	r3, r3, r1
 800c39a:	f363 045f 	bfi	r4, r3, #1, #31
 800c39e:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800c3a0:	6803      	ldr	r3, [r0, #0]
 800c3a2:	f361 035f 	bfi	r3, r1, #1, #31
 800c3a6:	6003      	str	r3, [r0, #0]
 800c3a8:	bd10      	pop	{r4, pc}
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	e7f8      	b.n	800c3a0 <ent_trunc+0x34>
	...

0800c3b0 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800c3b0:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <lv_mem_init+0x1c>)
 800c3b2:	4a07      	ldr	r2, [pc, #28]	; (800c3d0 <lv_mem_init+0x20>)
 800c3b4:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	f36f 0200 	bfc	r2, #0, #1
 800c3bc:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 800c3c4:	f361 025f 	bfi	r2, r1, #1, #31
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	4770      	bx	lr
 800c3cc:	20010ec8 	.word	0x20010ec8
 800c3d0:	20010ec4 	.word	0x20010ec4

0800c3d4 <lv_mem_alloc>:
{
 800c3d4:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	b300      	cbz	r0, 800c41c <lv_mem_alloc+0x48>
    if(size & 0x3) {
 800c3da:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 800c3dc:	bf1c      	itt	ne
 800c3de:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 800c3e2:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 800c3e4:	2400      	movs	r4, #0
        e = ent_get_next(e);
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f7ff ffae 	bl	800c348 <ent_get_next>
        if(e != NULL) {
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	b198      	cbz	r0, 800c418 <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800c3f0:	7803      	ldrb	r3, [r0, #0]
 800c3f2:	07db      	lsls	r3, r3, #31
 800c3f4:	d4f7      	bmi.n	800c3e6 <lv_mem_alloc+0x12>
 800c3f6:	6803      	ldr	r3, [r0, #0]
 800c3f8:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800c3fc:	d8f3      	bhi.n	800c3e6 <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7ff ffb4 	bl	800c36c <ent_trunc>
            e->header.s.used = 1;
 800c404:	7803      	ldrb	r3, [r0, #0]
 800c406:	f043 0301 	orr.w	r3, r3, #1
 800c40a:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800c40e:	462a      	mov	r2, r5
 800c410:	21aa      	movs	r1, #170	; 0xaa
 800c412:	4620      	mov	r0, r4
 800c414:	f001 ffaf 	bl	800e376 <memset>
}
 800c418:	4620      	mov	r0, r4
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800c41c:	4c00      	ldr	r4, [pc, #0]	; (800c420 <lv_mem_alloc+0x4c>)
 800c41e:	e7fb      	b.n	800c418 <lv_mem_alloc+0x44>
 800c420:	20014ec8 	.word	0x20014ec8

0800c424 <lv_mem_get_size>:
    if(data == NULL) return 0;
 800c424:	b140      	cbz	r0, 800c438 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800c426:	4b05      	ldr	r3, [pc, #20]	; (800c43c <lv_mem_get_size+0x18>)
 800c428:	4298      	cmp	r0, r3
 800c42a:	d004      	beq.n	800c436 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800c42c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800c430:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800c434:	4770      	bx	lr
    if(data == NULL) return 0;
 800c436:	2000      	movs	r0, #0
}
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	20014ec8 	.word	0x20014ec8

0800c440 <lv_mem_free>:
    if(data == &zero_mem) return;
 800c440:	4b13      	ldr	r3, [pc, #76]	; (800c490 <lv_mem_free+0x50>)
 800c442:	4298      	cmp	r0, r3
{
 800c444:	b510      	push	{r4, lr}
 800c446:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800c448:	d011      	beq.n	800c46e <lv_mem_free+0x2e>
    if(data == NULL) return;
 800c44a:	b180      	cbz	r0, 800c46e <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800c44c:	f7ff ffea 	bl	800c424 <lv_mem_get_size>
 800c450:	21bb      	movs	r1, #187	; 0xbb
 800c452:	4602      	mov	r2, r0
 800c454:	4620      	mov	r0, r4
 800c456:	f001 ff8e 	bl	800e376 <memset>
    e->header.s.used = 0;
 800c45a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800c45e:	4620      	mov	r0, r4
 800c460:	f36f 0300 	bfc	r3, #0, #1
 800c464:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800c468:	f7ff ff6e 	bl	800c348 <ent_get_next>
    while(e_next != NULL) {
 800c46c:	b900      	cbnz	r0, 800c470 <lv_mem_free+0x30>
 800c46e:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 800c470:	7803      	ldrb	r3, [r0, #0]
 800c472:	07db      	lsls	r3, r3, #31
 800c474:	d4fb      	bmi.n	800c46e <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800c476:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c47a:	6801      	ldr	r1, [r0, #0]
 800c47c:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800c480:	3204      	adds	r2, #4
 800c482:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800c486:	f362 035f 	bfi	r3, r2, #1, #31
 800c48a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c48e:	e7eb      	b.n	800c468 <lv_mem_free+0x28>
 800c490:	20014ec8 	.word	0x20014ec8

0800c494 <lv_mem_realloc>:
{
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800c498:	4604      	mov	r4, r0
 800c49a:	b128      	cbz	r0, 800c4a8 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800c49c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800c4a0:	f013 0f01 	tst.w	r3, #1
 800c4a4:	bf08      	it	eq
 800c4a6:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f7ff ffbb 	bl	800c424 <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800c4ae:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 800c4b0:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800c4b2:	d004      	beq.n	800c4be <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 800c4b4:	d905      	bls.n	800c4c2 <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	1f20      	subs	r0, r4, #4
 800c4ba:	f7ff ff57 	bl	800c36c <ent_trunc>
 800c4be:	4626      	mov	r6, r4
 800c4c0:	e010      	b.n	800c4e4 <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f7ff ff86 	bl	800c3d4 <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	b158      	cbz	r0, 800c4e4 <lv_mem_realloc+0x50>
 800c4cc:	b154      	cbz	r4, 800c4e4 <lv_mem_realloc+0x50>
        if(old_size != 0) {
 800c4ce:	b14f      	cbz	r7, 800c4e4 <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800c4d0:	42af      	cmp	r7, r5
 800c4d2:	463a      	mov	r2, r7
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	bf28      	it	cs
 800c4d8:	462a      	movcs	r2, r5
 800c4da:	f001 ff41 	bl	800e360 <memcpy>
            lv_mem_free(data_p);
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7ff ffae 	bl	800c440 <lv_mem_free>
}
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4e8 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800c4e8:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800c4ea:	2114      	movs	r1, #20
 800c4ec:	4803      	ldr	r0, [pc, #12]	; (800c4fc <lv_task_core_init+0x14>)
 800c4ee:	f7ff fde4 	bl	800c0ba <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800c4f2:	4b03      	ldr	r3, [pc, #12]	; (800c500 <lv_task_core_init+0x18>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	bd08      	pop	{r3, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20015bbc 	.word	0x20015bbc
 800c500:	20014edc 	.word	0x20014edc

0800c504 <lv_task_create_basic>:
{
 800c504:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c506:	481c      	ldr	r0, [pc, #112]	; (800c578 <lv_task_create_basic+0x74>)
 800c508:	f7ff fe1d 	bl	800c146 <lv_ll_get_head>
    if(NULL == tmp) {
 800c50c:	4601      	mov	r1, r0
 800c50e:	b928      	cbnz	r0, 800c51c <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800c510:	4819      	ldr	r0, [pc, #100]	; (800c578 <lv_task_create_basic+0x74>)
 800c512:	f7ff fddc 	bl	800c0ce <lv_ll_ins_head>
        lv_mem_assert(new_task);
 800c516:	4604      	mov	r4, r0
 800c518:	b9b8      	cbnz	r0, 800c54a <lv_task_create_basic+0x46>
 800c51a:	e7fe      	b.n	800c51a <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c51c:	4c16      	ldr	r4, [pc, #88]	; (800c578 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 800c51e:	7c0b      	ldrb	r3, [r1, #16]
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	2b03      	cmp	r3, #3
 800c526:	dc05      	bgt.n	800c534 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c528:	4813      	ldr	r0, [pc, #76]	; (800c578 <lv_task_create_basic+0x74>)
 800c52a:	f7ff fe1b 	bl	800c164 <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 800c52e:	4604      	mov	r4, r0
 800c530:	b958      	cbnz	r0, 800c54a <lv_task_create_basic+0x46>
 800c532:	e7fe      	b.n	800c532 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c534:	4620      	mov	r0, r4
 800c536:	f7ff fe0c 	bl	800c152 <lv_ll_get_next>
        } while(tmp != NULL);
 800c53a:	4601      	mov	r1, r0
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d1ee      	bne.n	800c51e <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800c540:	480d      	ldr	r0, [pc, #52]	; (800c578 <lv_task_create_basic+0x74>)
 800c542:	f7ff fde2 	bl	800c10a <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 800c546:	4604      	mov	r4, r0
 800c548:	b1a0      	cbz	r0, 800c574 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800c54a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c54e:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800c550:	7c23      	ldrb	r3, [r4, #16]
 800c552:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 800c554:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800c556:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 800c55a:	f365 03c3 	bfi	r3, r5, #3, #1
 800c55e:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800c560:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 800c562:	f7ff fb3b 	bl	800bbdc <lv_tick_get>
    task_created = true;
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800c568:	6060      	str	r0, [r4, #4]
    task_created = true;
 800c56a:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 800c56c:	60e5      	str	r5, [r4, #12]
    task_created = true;
 800c56e:	701a      	strb	r2, [r3, #0]
}
 800c570:	4620      	mov	r0, r4
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	e7fe      	b.n	800c574 <lv_task_create_basic+0x70>
 800c576:	bf00      	nop
 800c578:	20015bbc 	.word	0x20015bbc
 800c57c:	20014edd 	.word	0x20014edd

0800c580 <lv_task_del>:
{
 800c580:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800c582:	4601      	mov	r1, r0
{
 800c584:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800c586:	4807      	ldr	r0, [pc, #28]	; (800c5a4 <lv_task_del+0x24>)
 800c588:	f7ff fe1c 	bl	800c1c4 <lv_ll_rem>
    lv_mem_free(task);
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff ff57 	bl	800c440 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <lv_task_del+0x28>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429c      	cmp	r4, r3
 800c598:	bf02      	ittt	eq
 800c59a:	4b04      	ldreq	r3, [pc, #16]	; (800c5ac <lv_task_del+0x2c>)
 800c59c:	2201      	moveq	r2, #1
 800c59e:	701a      	strbeq	r2, [r3, #0]
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20015bbc 	.word	0x20015bbc
 800c5a8:	20015bfc 	.word	0x20015bfc
 800c5ac:	20014ede 	.word	0x20014ede

0800c5b0 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800c5b4:	6840      	ldr	r0, [r0, #4]
 800c5b6:	f7ff fb1f 	bl	800bbf8 <lv_tick_elaps>
    if(elp >= task->period) {
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	4298      	cmp	r0, r3
 800c5be:	d315      	bcc.n	800c5ec <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 800c5c0:	f7ff fb0c 	bl	800bbdc <lv_tick_get>
        task_deleted   = false;
 800c5c4:	4d0a      	ldr	r5, [pc, #40]	; (800c5f0 <lv_task_exec+0x40>)
        task_created   = false;
 800c5c6:	490b      	ldr	r1, [pc, #44]	; (800c5f4 <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 800c5c8:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 800c5ce:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 800c5d0:	68a2      	ldr	r2, [r4, #8]
 800c5d2:	b10a      	cbz	r2, 800c5d8 <lv_task_exec+0x28>
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800c5d8:	7828      	ldrb	r0, [r5, #0]
 800c5da:	b930      	cbnz	r0, 800c5ea <lv_task_exec+0x3a>
            if(task->once != 0) {
 800c5dc:	7c23      	ldrb	r3, [r4, #16]
 800c5de:	071b      	lsls	r3, r3, #28
 800c5e0:	d502      	bpl.n	800c5e8 <lv_task_exec+0x38>
                lv_task_del(task);
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f7ff ffcc 	bl	800c580 <lv_task_del>
            }
        }
        exec = true;
 800c5e8:	2001      	movs	r0, #1
    }

    return exec;
}
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	20014ede 	.word	0x20014ede
 800c5f4:	20014edd 	.word	0x20014edd

0800c5f8 <lv_task_handler>:
{
 800c5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 800c5fc:	4d3a      	ldr	r5, [pc, #232]	; (800c6e8 <lv_task_handler+0xf0>)
 800c5fe:	782c      	ldrb	r4, [r5, #0]
 800c600:	b934      	cbnz	r4, 800c610 <lv_task_handler+0x18>
    task_handler_mutex = true;
 800c602:	2301      	movs	r3, #1
 800c604:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 800c606:	4b39      	ldr	r3, [pc, #228]	; (800c6ec <lv_task_handler+0xf4>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	b923      	cbnz	r3, 800c616 <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 800c60c:	2300      	movs	r3, #0
 800c60e:	702b      	strb	r3, [r5, #0]
}
 800c610:	b003      	add	sp, #12
 800c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 800c616:	f7ff fae1 	bl	800bbdc <lv_tick_get>
 800c61a:	4b35      	ldr	r3, [pc, #212]	; (800c6f0 <lv_task_handler+0xf8>)
        task_deleted             = false;
 800c61c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800c70c <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 800c620:	6018      	str	r0, [r3, #0]
 800c622:	469b      	mov	fp, r3
        task_deleted             = false;
 800c624:	46a1      	mov	r9, r4
        task_created             = false;
 800c626:	4e33      	ldr	r6, [pc, #204]	; (800c6f4 <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c628:	4833      	ldr	r0, [pc, #204]	; (800c6f8 <lv_task_handler+0x100>)
        task_created             = false;
 800c62a:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 800c62e:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c632:	f7ff fd88 	bl	800c146 <lv_ll_get_head>
 800c636:	4f31      	ldr	r7, [pc, #196]	; (800c6fc <lv_task_handler+0x104>)
 800c638:	9601      	str	r6, [sp, #4]
 800c63a:	6038      	str	r0, [r7, #0]
 800c63c:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 800c63e:	6831      	ldr	r1, [r6, #0]
 800c640:	bb29      	cbnz	r1, 800c68e <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 800c642:	4c2f      	ldr	r4, [pc, #188]	; (800c700 <lv_task_handler+0x108>)
 800c644:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c648:	4e2e      	ldr	r6, [pc, #184]	; (800c704 <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 800c64a:	f7ff fad5 	bl	800bbf8 <lv_tick_elaps>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	4418      	add	r0, r3
 800c652:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800c654:	6830      	ldr	r0, [r6, #0]
 800c656:	f7ff facf 	bl	800bbf8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800c65a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800c65e:	d3d5      	bcc.n	800c60c <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800c660:	6822      	ldr	r2, [r4, #0]
 800c662:	2364      	movs	r3, #100	; 0x64
 800c664:	4353      	muls	r3, r2
 800c666:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c66a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c66e:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800c670:	2b64      	cmp	r3, #100	; 0x64
 800c672:	bf98      	it	ls
 800c674:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 800c678:	4a23      	ldr	r2, [pc, #140]	; (800c708 <lv_task_handler+0x110>)
 800c67a:	bf94      	ite	ls
 800c67c:	b2db      	uxtbls	r3, r3
 800c67e:	2300      	movhi	r3, #0
 800c680:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800c686:	f7ff faa9 	bl	800bbdc <lv_tick_get>
 800c68a:	6030      	str	r0, [r6, #0]
 800c68c:	e7be      	b.n	800c60c <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800c68e:	481a      	ldr	r0, [pc, #104]	; (800c6f8 <lv_task_handler+0x100>)
 800c690:	f7ff fd5f 	bl	800c152 <lv_ll_get_next>
 800c694:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800c696:	6830      	ldr	r0, [r6, #0]
 800c698:	7c03      	ldrb	r3, [r0, #16]
 800c69a:	f013 0207 	ands.w	r2, r3, #7
 800c69e:	d0d0      	beq.n	800c642 <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800c6a0:	4284      	cmp	r4, r0
 800c6a2:	d103      	bne.n	800c6ac <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 800c6a4:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800c6a8:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800c6aa:	e7c8      	b.n	800c63e <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800c6ac:	2a05      	cmp	r2, #5
 800c6ae:	d10c      	bne.n	800c6ca <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800c6b0:	f7ff ff7e 	bl	800c5b0 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800c6b4:	f898 3000 	ldrb.w	r3, [r8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1c2      	bne.n	800c642 <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800c6bc:	9b01      	ldr	r3, [sp, #4]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1be      	bne.n	800c642 <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800c6c4:	f8c6 a000 	str.w	sl, [r6]
 800c6c8:	e7b9      	b.n	800c63e <lv_task_handler+0x46>
            else if(task_interrupter) {
 800c6ca:	b134      	cbz	r4, 800c6da <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800c6cc:	7c22      	ldrb	r2, [r4, #16]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	f002 0207 	and.w	r2, r2, #7
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	ddec      	ble.n	800c6b4 <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800c6da:	f7ff ff69 	bl	800c5b0 <lv_task_exec>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d0e8      	beq.n	800c6b4 <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800c6e2:	683c      	ldr	r4, [r7, #0]
                    break;
 800c6e4:	e79f      	b.n	800c626 <lv_task_handler+0x2e>
 800c6e6:	bf00      	nop
 800c6e8:	20014edf 	.word	0x20014edf
 800c6ec:	20014edc 	.word	0x20014edc
 800c6f0:	20014ed0 	.word	0x20014ed0
 800c6f4:	20014edd 	.word	0x20014edd
 800c6f8:	20015bbc 	.word	0x20015bbc
 800c6fc:	20015bfc 	.word	0x20015bfc
 800c700:	20014ecc 	.word	0x20014ecc
 800c704:	20014ed8 	.word	0x20014ed8
 800c708:	20014ed4 	.word	0x20014ed4
 800c70c:	20014ede 	.word	0x20014ede

0800c710 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800c710:	7c03      	ldrb	r3, [r0, #16]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	428b      	cmp	r3, r1
{
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	4604      	mov	r4, r0
 800c71c:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 800c71e:	d01b      	beq.n	800c758 <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800c720:	480e      	ldr	r0, [pc, #56]	; (800c75c <lv_task_set_prio+0x4c>)
 800c722:	4e0e      	ldr	r6, [pc, #56]	; (800c75c <lv_task_set_prio+0x4c>)
 800c724:	f7ff fd0f 	bl	800c146 <lv_ll_get_head>
 800c728:	4602      	mov	r2, r0
 800c72a:	b132      	cbz	r2, 800c73a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800c72c:	7c13      	ldrb	r3, [r2, #16]
 800c72e:	f003 0307 	and.w	r3, r3, #7
 800c732:	429d      	cmp	r5, r3
 800c734:	db0a      	blt.n	800c74c <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800c736:	42a2      	cmp	r2, r4
 800c738:	d003      	beq.n	800c742 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800c73a:	4621      	mov	r1, r4
 800c73c:	4807      	ldr	r0, [pc, #28]	; (800c75c <lv_task_set_prio+0x4c>)
 800c73e:	f7ff fdad 	bl	800c29c <lv_ll_move_before>
    task->prio = prio;
 800c742:	7c23      	ldrb	r3, [r4, #16]
 800c744:	f365 0302 	bfi	r3, r5, #0, #3
 800c748:	7423      	strb	r3, [r4, #16]
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800c74c:	4611      	mov	r1, r2
 800c74e:	4630      	mov	r0, r6
 800c750:	f7ff fcff 	bl	800c152 <lv_ll_get_next>
 800c754:	4602      	mov	r2, r0
 800c756:	e7e8      	b.n	800c72a <lv_task_set_prio+0x1a>
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	bf00      	nop
 800c75c:	20015bbc 	.word	0x20015bbc

0800c760 <lv_task_create>:
{
 800c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	4680      	mov	r8, r0
 800c766:	460f      	mov	r7, r1
 800c768:	4616      	mov	r6, r2
 800c76a:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 800c76c:	f7ff feca 	bl	800c504 <lv_task_create_basic>
    lv_mem_assert(new_task);
 800c770:	4604      	mov	r4, r0
 800c772:	b900      	cbnz	r0, 800c776 <lv_task_create+0x16>
 800c774:	e7fe      	b.n	800c774 <lv_task_create+0x14>
    task->task_cb = task_cb;
 800c776:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 800c77a:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800c77c:	4631      	mov	r1, r6
 800c77e:	f7ff ffc7 	bl	800c710 <lv_task_set_prio>
    new_task->user_data = user_data;
 800c782:	60e5      	str	r5, [r4, #12]
}
 800c784:	4620      	mov	r0, r4
 800c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c78a <lv_task_ready>:
{
 800c78a:	b510      	push	{r4, lr}
 800c78c:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800c78e:	f7ff fa25 	bl	800bbdc <lv_tick_get>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	43db      	mvns	r3, r3
 800c796:	4403      	add	r3, r0
 800c798:	6063      	str	r3, [r4, #4]
 800c79a:	bd10      	pop	{r4, pc}

0800c79c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800c79c:	7803      	ldrb	r3, [r0, #0]
 800c79e:	061a      	lsls	r2, r3, #24
 800c7a0:	d50e      	bpl.n	800c7c0 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 800c7a2:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800c7a6:	2ac0      	cmp	r2, #192	; 0xc0
 800c7a8:	d00c      	beq.n	800c7c4 <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 800c7aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c7ae:	2ae0      	cmp	r2, #224	; 0xe0
 800c7b0:	d00a      	beq.n	800c7c8 <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 800c7b2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800c7b6:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 800c7b8:	bf14      	ite	ne
 800c7ba:	2001      	movne	r0, #1
 800c7bc:	2004      	moveq	r0, #4
 800c7be:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	4770      	bx	lr
        return 2;
 800c7c4:	2002      	movs	r0, #2
 800c7c6:	4770      	bx	lr
        return 3;
 800c7c8:	2003      	movs	r0, #3
}
 800c7ca:	4770      	bx	lr

0800c7cc <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 800c7cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800c7d2:	b901      	cbnz	r1, 800c7d6 <lv_txt_utf8_next+0xa>
 800c7d4:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800c7d6:	680a      	ldr	r2, [r1, #0]
 800c7d8:	5c83      	ldrb	r3, [r0, r2]
 800c7da:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7de:	f102 0401 	add.w	r4, r2, #1
 800c7e2:	d103      	bne.n	800c7ec <lv_txt_utf8_next+0x20>
        result = txt[*i];
 800c7e4:	4618      	mov	r0, r3
        (*i)++;
 800c7e6:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800c7e8:	b002      	add	sp, #8
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800c7ec:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 800c7f0:	2dc0      	cmp	r5, #192	; 0xc0
 800c7f2:	d110      	bne.n	800c816 <lv_txt_utf8_next+0x4a>
            (*i)++;
 800c7f4:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c7f6:	5d00      	ldrb	r0, [r0, r4]
 800c7f8:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 800c7fc:	2c80      	cmp	r4, #128	; 0x80
 800c7fe:	d001      	beq.n	800c804 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 800c800:	2000      	movs	r0, #0
 800c802:	e7f1      	b.n	800c7e8 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800c804:	019b      	lsls	r3, r3, #6
 800c806:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 800c80a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c80e:	4418      	add	r0, r3
            (*i)++;
 800c810:	3202      	adds	r2, #2
            (*i)++;
 800c812:	600a      	str	r2, [r1, #0]
 800c814:	e7e8      	b.n	800c7e8 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800c816:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800c81a:	2de0      	cmp	r5, #224	; 0xe0
 800c81c:	d117      	bne.n	800c84e <lv_txt_utf8_next+0x82>
            (*i)++;
 800c81e:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c820:	5d04      	ldrb	r4, [r0, r4]
 800c822:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800c826:	2d80      	cmp	r5, #128	; 0x80
 800c828:	d1ea      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            (*i)++;
 800c82a:	1c95      	adds	r5, r2, #2
 800c82c:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c82e:	5d45      	ldrb	r5, [r0, r5]
 800c830:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 800c834:	2880      	cmp	r0, #128	; 0x80
 800c836:	d1e3      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800c838:	0318      	lsls	r0, r3, #12
 800c83a:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 800c83c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800c840:	01a3      	lsls	r3, r4, #6
 800c842:	4428      	add	r0, r5
 800c844:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 800c848:	4418      	add	r0, r3
            (*i)++;
 800c84a:	3203      	adds	r2, #3
 800c84c:	e7e1      	b.n	800c812 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800c84e:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 800c852:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 800c854:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800c856:	d1d3      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c858:	5d04      	ldrb	r4, [r0, r4]
 800c85a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800c85e:	2d80      	cmp	r5, #128	; 0x80
 800c860:	d1ce      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            (*i)++;
 800c862:	1c95      	adds	r5, r2, #2
 800c864:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c866:	5d45      	ldrb	r5, [r0, r5]
 800c868:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 800c86c:	2e80      	cmp	r6, #128	; 0x80
 800c86e:	d1c7      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            (*i)++;
 800c870:	1cd6      	adds	r6, r2, #3
 800c872:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800c874:	5d86      	ldrb	r6, [r0, r6]
 800c876:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 800c87a:	2880      	cmp	r0, #128	; 0x80
 800c87c:	d1c0      	bne.n	800c800 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800c87e:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800c880:	0320      	lsls	r0, r4, #12
 800c882:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800c886:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800c88a:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800c88c:	01a8      	lsls	r0, r5, #6
 800c88e:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 800c892:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800c896:	4430      	add	r0, r6
 800c898:	4418      	add	r0, r3
            (*i)++;
 800c89a:	3204      	adds	r2, #4
 800c89c:	e7b9      	b.n	800c812 <lv_txt_utf8_next+0x46>
	...

0800c8a0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800c8a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 800c8a4:	ad02      	add	r5, sp, #8
 800c8a6:	2400      	movs	r4, #0
 800c8a8:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800c8ac:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800c8d0 <lv_txt_utf8_get_char_id+0x30>
{
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460e      	mov	r6, r1
    while(i < byte_id) {
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	42b3      	cmp	r3, r6
 800c8b8:	d303      	bcc.n	800c8c2 <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	b002      	add	sp, #8
 800c8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ca:	4798      	blx	r3
        char_cnt++;
 800c8cc:	3401      	adds	r4, #1
 800c8ce:	e7f1      	b.n	800c8b4 <lv_txt_utf8_get_char_id+0x14>
 800c8d0:	200000d4 	.word	0x200000d4

0800c8d4 <lv_txt_utf8_prev>:
    (*i)--;
 800c8d4:	680b      	ldr	r3, [r1, #0]
{
 800c8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 800c8d8:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 800c8da:	4f0e      	ldr	r7, [pc, #56]	; (800c914 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 800c8dc:	600b      	str	r3, [r1, #0]
{
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460d      	mov	r5, r1
    (*i)--;
 800c8e2:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 800c8e4:	6828      	ldr	r0, [r5, #0]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	4430      	add	r0, r6
 800c8ea:	4798      	blx	r3
 800c8ec:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800c8ee:	b948      	cbnz	r0, 800c904 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 800c8f0:	b12b      	cbz	r3, 800c8fe <lv_txt_utf8_prev+0x2a>
 800c8f2:	3c01      	subs	r4, #1
                (*i)--;
 800c8f4:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800c8f6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 800c8fa:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800c8fc:	d1f2      	bne.n	800c8e4 <lv_txt_utf8_prev+0x10>
 800c8fe:	2000      	movs	r0, #0
}
 800c900:	b003      	add	sp, #12
 800c902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 800c904:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800c906:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 800c908:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800c90c:	4b02      	ldr	r3, [pc, #8]	; (800c918 <lv_txt_utf8_prev+0x44>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4798      	blx	r3
 800c912:	e7f5      	b.n	800c900 <lv_txt_utf8_prev+0x2c>
 800c914:	200000dc 	.word	0x200000dc
 800c918:	200000d4 	.word	0x200000d4

0800c91c <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c91c:	2923      	cmp	r1, #35	; 0x23
{
 800c91e:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c920:	d117      	bne.n	800c952 <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800c922:	7803      	ldrb	r3, [r0, #0]
 800c924:	b91b      	cbnz	r3, 800c92e <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 800c926:	2301      	movs	r3, #1
 800c928:	7003      	strb	r3, [r0, #0]
            ret    = true;
 800c92a:	2001      	movs	r0, #1
 800c92c:	e004      	b.n	800c938 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800c92e:	2b01      	cmp	r3, #1
 800c930:	f04f 0000 	mov.w	r0, #0
 800c934:	d109      	bne.n	800c94a <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 800c936:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800c938:	7813      	ldrb	r3, [r2, #0]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d104      	bne.n	800c948 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 800c93e:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800c940:	bf04      	itt	eq
 800c942:	2102      	moveq	r1, #2
 800c944:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 800c946:	4618      	mov	r0, r3
}
 800c948:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d1f4      	bne.n	800c938 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 800c94e:	7010      	strb	r0, [r2, #0]
 800c950:	e7eb      	b.n	800c92a <lv_txt_is_cmd+0xe>
    bool ret = false;
 800c952:	2000      	movs	r0, #0
 800c954:	e7f0      	b.n	800c938 <lv_txt_is_cmd+0x1c>
	...

0800c958 <lv_txt_get_next_line>:
{
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	b087      	sub	sp, #28
 800c95e:	460c      	mov	r4, r1
 800c960:	9200      	str	r2, [sp, #0]
 800c962:	469a      	mov	sl, r3
 800c964:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 800c968:	4607      	mov	r7, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d072      	beq.n	800ca54 <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 800c96e:	2900      	cmp	r1, #0
 800c970:	d071      	beq.n	800ca56 <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800c972:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800ca64 <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 800c976:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800c978:	f01b 0f02 	tst.w	fp, #2
 800c97c:	f647 4218 	movw	r2, #31768	; 0x7c18
 800c980:	bf18      	it	ne
 800c982:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 800c984:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 800c986:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800c988:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800c98c:	f8d8 2000 	ldr.w	r2, [r8]
 800c990:	a905      	add	r1, sp, #20
 800c992:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c994:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800c998:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800c99a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c99e:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 800c9a0:	9804      	ldr	r0, [sp, #16]
 800c9a2:	5c3b      	ldrb	r3, [r7, r0]
 800c9a4:	b90b      	cbnz	r3, 800c9aa <lv_txt_get_next_line+0x52>
    return i;
 800c9a6:	b280      	uxth	r0, r0
 800c9a8:	e01e      	b.n	800c9e8 <lv_txt_get_next_line+0x90>
        i           = i_next;
 800c9aa:	9b05      	ldr	r3, [sp, #20]
 800c9ac:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800c9ae:	a905      	add	r1, sp, #20
 800c9b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c9b8:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800c9ba:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800c9bc:	b923      	cbnz	r3, 800c9c8 <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 800c9be:	2e0a      	cmp	r6, #10
 800c9c0:	d10b      	bne.n	800c9da <lv_txt_get_next_line+0x82>
                return i;
 800c9c2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800c9c6:	e00f      	b.n	800c9e8 <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	f10d 000f 	add.w	r0, sp, #15
 800c9ce:	f7ff ffa5 	bl	800c91c <lv_txt_is_cmd>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0f3      	beq.n	800c9be <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800c9d6:	465e      	mov	r6, fp
 800c9d8:	e7e2      	b.n	800c9a0 <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 800c9da:	2e0d      	cmp	r6, #13
 800c9dc:	d107      	bne.n	800c9ee <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 800c9de:	f1bb 0f0a 	cmp.w	fp, #10
 800c9e2:	d1ee      	bne.n	800c9c2 <lv_txt_get_next_line+0x6a>
                return i_next;
 800c9e4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 800c9e8:	b007      	add	sp, #28
 800c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c9ee:	465a      	mov	r2, fp
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f7fe fe6e 	bl	800b6d4 <lv_font_get_glyph_width>
            cur_w += letter_w;
 800c9f8:	4405      	add	r5, r0
 800c9fa:	b2aa      	uxth	r2, r5
 800c9fc:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 800c9fe:	45aa      	cmp	sl, r5
 800ca00:	da1a      	bge.n	800ca38 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 800ca02:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800ca06:	d00a      	beq.n	800ca1e <lv_txt_get_next_line+0xc6>
                    i = last_break;
 800ca08:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800ca0c:	9b04      	ldr	r3, [sp, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1d7      	bne.n	800c9c2 <lv_txt_get_next_line+0x6a>
 800ca12:	f8d8 3000 	ldr.w	r3, [r8]
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	4638      	mov	r0, r7
 800ca1a:	4798      	blx	r3
 800ca1c:	e7d1      	b.n	800c9c2 <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 800ca1e:	4b0f      	ldr	r3, [pc, #60]	; (800ca5c <lv_txt_get_next_line+0x104>)
 800ca20:	a904      	add	r1, sp, #16
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4638      	mov	r0, r7
 800ca26:	4798      	blx	r3
 800ca28:	e7f0      	b.n	800ca0c <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800ca2a:	429e      	cmp	r6, r3
 800ca2c:	f101 0101 	add.w	r1, r1, #1
 800ca30:	d103      	bne.n	800ca3a <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 800ca32:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ca36:	e007      	b.n	800ca48 <lv_txt_get_next_line+0xf0>
 800ca38:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800ca3a:	fa5f fe81 	uxtb.w	lr, r1
 800ca3e:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <lv_txt_get_next_line+0x108>)
 800ca40:	f813 300e 	ldrb.w	r3, [r3, lr]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1f0      	bne.n	800ca2a <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0c4      	beq.n	800c9d6 <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 800ca4c:	9b00      	ldr	r3, [sp, #0]
 800ca4e:	18d5      	adds	r5, r2, r3
 800ca50:	b22d      	sxth	r5, r5
 800ca52:	e7c0      	b.n	800c9d6 <lv_txt_get_next_line+0x7e>
 800ca54:	e7c8      	b.n	800c9e8 <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 800ca56:	4608      	mov	r0, r1
 800ca58:	e7c6      	b.n	800c9e8 <lv_txt_get_next_line+0x90>
 800ca5a:	bf00      	nop
 800ca5c:	200000d8 	.word	0x200000d8
 800ca60:	080e77d0 	.word	0x080e77d0
 800ca64:	200000d4 	.word	0x200000d4

0800ca68 <lv_txt_get_width>:
{
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	4688      	mov	r8, r1
 800ca6e:	b085      	sub	sp, #20
 800ca70:	4691      	mov	r9, r2
 800ca72:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 800ca74:	4606      	mov	r6, r0
 800ca76:	b920      	cbnz	r0, 800ca82 <lv_txt_get_width+0x1a>
 800ca78:	2400      	movs	r4, #0
}
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	b005      	add	sp, #20
 800ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	d0f8      	beq.n	800ca78 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 800ca86:	2400      	movs	r4, #0
 800ca88:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800ca8a:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 800ca8e:	2900      	cmp	r1, #0
 800ca90:	d0f2      	beq.n	800ca78 <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ca92:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 800ca96:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800caf4 <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ca9a:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	4598      	cmp	r8, r3
 800caa2:	d804      	bhi.n	800caae <lv_txt_get_width+0x46>
        if(width > 0) {
 800caa4:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800caa6:	bfc4      	itt	gt
 800caa8:	1b64      	subgt	r4, r4, r5
 800caaa:	b224      	sxthgt	r4, r4
 800caac:	e7e5      	b.n	800ca7a <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 800caae:	f8da 3000 	ldr.w	r3, [sl]
 800cab2:	a903      	add	r1, sp, #12
 800cab4:	4630      	mov	r0, r6
 800cab6:	4798      	blx	r3
 800cab8:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800caba:	9803      	ldr	r0, [sp, #12]
 800cabc:	f8da 3000 	ldr.w	r3, [sl]
 800cac0:	2100      	movs	r1, #0
 800cac2:	4430      	add	r0, r6
 800cac4:	4798      	blx	r3
 800cac6:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cac8:	b957      	cbnz	r7, 800cae0 <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800caca:	4659      	mov	r1, fp
 800cacc:	4648      	mov	r0, r9
 800cace:	f7fe fe01 	bl	800b6d4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 800cad2:	b203      	sxth	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dde2      	ble.n	800ca9e <lv_txt_get_width+0x36>
                width += letter_space;
 800cad8:	442c      	add	r4, r5
 800cada:	4404      	add	r4, r0
 800cadc:	b224      	sxth	r4, r4
 800cade:	e7de      	b.n	800ca9e <lv_txt_get_width+0x36>
 800cae0:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800cae2:	4659      	mov	r1, fp
 800cae4:	f10d 000b 	add.w	r0, sp, #11
 800cae8:	f7ff ff18 	bl	800c91c <lv_txt_is_cmd>
 800caec:	2800      	cmp	r0, #0
 800caee:	d1d6      	bne.n	800ca9e <lv_txt_get_width+0x36>
 800caf0:	9a01      	ldr	r2, [sp, #4]
 800caf2:	e7ea      	b.n	800caca <lv_txt_get_width+0x62>
 800caf4:	200000d4 	.word	0x200000d4

0800caf8 <lv_txt_get_size>:
{
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	b087      	sub	sp, #28
    size_res->x = 0;
 800cafe:	2500      	movs	r5, #0
{
 800cb00:	9304      	str	r3, [sp, #16]
 800cb02:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800cb06:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800cb0a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 800cb0e:	9303      	str	r3, [sp, #12]
 800cb10:	4604      	mov	r4, r0
 800cb12:	4616      	mov	r6, r2
    size_res->x = 0;
 800cb14:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 800cb16:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 800cb18:	4689      	mov	r9, r1
 800cb1a:	b1f9      	cbz	r1, 800cb5c <lv_txt_get_size+0x64>
    if(font == NULL) return;
 800cb1c:	b1f2      	cbz	r2, 800cb5c <lv_txt_get_size+0x64>
 800cb1e:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800cb20:	f013 0f02 	tst.w	r3, #2
 800cb24:	f647 4318 	movw	r3, #31768	; 0x7c18
 800cb28:	bf18      	it	ne
 800cb2a:	469a      	movne	sl, r3
        size_res->y += line_space;
 800cb2c:	eb07 030b 	add.w	r3, r7, fp
 800cb30:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800cb32:	f819 3005 	ldrb.w	r3, [r9, r5]
 800cb36:	eb09 0805 	add.w	r8, r9, r5
 800cb3a:	b993      	cbnz	r3, 800cb62 <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800cb3c:	b155      	cbz	r5, 800cb54 <lv_txt_get_size+0x5c>
 800cb3e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cb42:	2b0a      	cmp	r3, #10
 800cb44:	d001      	beq.n	800cb4a <lv_txt_get_size+0x52>
 800cb46:	2b0d      	cmp	r3, #13
 800cb48:	d104      	bne.n	800cb54 <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 800cb4a:	8862      	ldrh	r2, [r4, #2]
 800cb4c:	eb07 030b 	add.w	r3, r7, fp
 800cb50:	4413      	add	r3, r2
 800cb52:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800cb54:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cb58:	b9fb      	cbnz	r3, 800cb9a <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 800cb5a:	8067      	strh	r7, [r4, #2]
}
 800cb5c:	b007      	add	sp, #28
 800cb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	9a04      	ldr	r2, [sp, #16]
 800cb68:	4653      	mov	r3, sl
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	f7ff fef3 	bl	800c958 <lv_txt_get_next_line>
        size_res->y += line_space;
 800cb72:	8863      	ldrh	r3, [r4, #2]
 800cb74:	9a05      	ldr	r2, [sp, #20]
 800cb76:	4413      	add	r3, r2
 800cb78:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800cb7e:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800cb80:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800cb82:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800cb84:	4632      	mov	r2, r6
 800cb86:	4640      	mov	r0, r8
 800cb88:	f7ff ff6e 	bl	800ca68 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800cb8c:	f9b4 3000 	ldrsh.w	r3, [r4]
 800cb90:	4298      	cmp	r0, r3
 800cb92:	bfb8      	it	lt
 800cb94:	4618      	movlt	r0, r3
 800cb96:	8020      	strh	r0, [r4, #0]
 800cb98:	e7cb      	b.n	800cb32 <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 800cb9a:	eba3 030b 	sub.w	r3, r3, fp
 800cb9e:	8063      	strh	r3, [r4, #2]
 800cba0:	e7dc      	b.n	800cb5c <lv_txt_get_size+0x64>

0800cba2 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800cba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba6:	9d08      	ldr	r5, [sp, #32]
 800cba8:	4681      	mov	r9, r0
 800cbaa:	4688      	mov	r8, r1
 800cbac:	4614      	mov	r4, r2
 800cbae:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800cbb0:	b914      	cbnz	r4, 800cbb8 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 800cbb8:	0867      	lsrs	r7, r4, #1
 800cbba:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800cbbe:	4631      	mov	r1, r6
 800cbc0:	4648      	mov	r0, r9
 800cbc2:	47a8      	blx	r5
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	dd07      	ble.n	800cbd8 <lv_utils_bsearch+0x36>
 800cbc8:	43e1      	mvns	r1, r4
 800cbca:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 800cbce:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 800cbd0:	eb06 080a 	add.w	r8, r6, sl
 800cbd4:	463c      	mov	r4, r7
 800cbd6:	e7eb      	b.n	800cbb0 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 800cbd8:	d1fc      	bne.n	800cbd4 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 800cbda:	4630      	mov	r0, r6
}
 800cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cbe0 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 800cbe0:	2a02      	cmp	r2, #2
{
 800cbe2:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800cbe4:	d008      	beq.n	800cbf8 <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800cbe6:	b91a      	cbnz	r2, 800cbf0 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 800cbe8:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <lv_btn_design+0x1c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4798      	blx	r3
 800cbee:	e001      	b.n	800cbf4 <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800cbf0:	2a01      	cmp	r2, #1
 800cbf2:	d0f9      	beq.n	800cbe8 <lv_btn_design+0x8>
    }

    return true;
 800cbf4:	2001      	movs	r0, #1
}
 800cbf6:	bd10      	pop	{r4, pc}
        return false;
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	bd10      	pop	{r4, pc}
 800cbfc:	20014ee0 	.word	0x20014ee0

0800cc00 <lv_btn_set_toggle>:
{
 800cc00:	b510      	push	{r4, lr}
 800cc02:	460c      	mov	r4, r1
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cc04:	f7fa faf0 	bl	80071e8 <lv_obj_get_ext_attr>
    ext->toggle = tgl != false ? 1 : 0;
 800cc08:	7e03      	ldrb	r3, [r0, #24]
 800cc0a:	f364 03c3 	bfi	r3, r4, #3, #1
 800cc0e:	7603      	strb	r3, [r0, #24]
 800cc10:	bd10      	pop	{r4, pc}

0800cc12 <lv_btn_set_state>:
{
 800cc12:	b538      	push	{r3, r4, r5, lr}
 800cc14:	460c      	mov	r4, r1
 800cc16:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cc18:	f7fa fae6 	bl	80071e8 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 800cc1c:	7e03      	ldrb	r3, [r0, #24]
 800cc1e:	f003 0207 	and.w	r2, r3, #7
 800cc22:	42a2      	cmp	r2, r4
 800cc24:	d00a      	beq.n	800cc3c <lv_btn_set_state+0x2a>
        ext->state = state;
 800cc26:	f364 0302 	bfi	r3, r4, #0, #3
 800cc2a:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 800cc2c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800cc30:	6841      	ldr	r1, [r0, #4]
 800cc32:	4628      	mov	r0, r5
}
 800cc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 800cc38:	f7fa b9c2 	b.w	8006fc0 <lv_obj_set_style>
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}

0800cc3e <lv_btn_set_style>:
{
 800cc3e:	b570      	push	{r4, r5, r6, lr}
 800cc40:	460d      	mov	r5, r1
 800cc42:	4606      	mov	r6, r0
 800cc44:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cc46:	f7fa facf 	bl	80071e8 <lv_obj_get_ext_attr>
    switch(type) {
 800cc4a:	2d04      	cmp	r5, #4
 800cc4c:	d805      	bhi.n	800cc5a <lv_btn_set_style+0x1c>
 800cc4e:	e8df f005 	tbb	[pc, r5]
 800cc52:	0f03      	.short	0x0f03
 800cc54:	1311      	.short	0x1311
 800cc56:	15          	.byte	0x15
 800cc57:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 800cc58:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800cc5a:	7e03      	ldrb	r3, [r0, #24]
 800cc5c:	f003 0307 	and.w	r3, r3, #7
 800cc60:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cc64:	6841      	ldr	r1, [r0, #4]
 800cc66:	4630      	mov	r0, r6
}
 800cc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800cc6c:	f7fa b9a8 	b.w	8006fc0 <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 800cc70:	6084      	str	r4, [r0, #8]
 800cc72:	e7f2      	b.n	800cc5a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 800cc74:	60c4      	str	r4, [r0, #12]
 800cc76:	e7f0      	b.n	800cc5a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 800cc78:	6104      	str	r4, [r0, #16]
 800cc7a:	e7ee      	b.n	800cc5a <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 800cc7c:	6144      	str	r4, [r0, #20]
 800cc7e:	e7ec      	b.n	800cc5a <lv_btn_set_style+0x1c>

0800cc80 <lv_btn_create>:
{
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	4607      	mov	r7, r0
 800cc84:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 800cc86:	f000 fac9 	bl	800d21c <lv_cont_create>
    lv_mem_assert(new_btn);
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	b900      	cbnz	r0, 800cc90 <lv_btn_create+0x10>
 800cc8e:	e7fe      	b.n	800cc8e <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 800cc90:	4c3a      	ldr	r4, [pc, #232]	; (800cd7c <lv_btn_create+0xfc>)
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	b913      	cbnz	r3, 800cc9c <lv_btn_create+0x1c>
 800cc96:	f7fa faa3 	bl	80071e0 <lv_obj_get_signal_cb>
 800cc9a:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 800cc9c:	4c38      	ldr	r4, [pc, #224]	; (800cd80 <lv_btn_create+0x100>)
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	b91b      	cbnz	r3, 800ccaa <lv_btn_create+0x2a>
 800cca2:	4628      	mov	r0, r5
 800cca4:	f7fa fa9e 	bl	80071e4 <lv_obj_get_design_cb>
 800cca8:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 800ccaa:	211c      	movs	r1, #28
 800ccac:	4628      	mov	r0, r5
 800ccae:	f7f9 fca6 	bl	80065fe <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	b900      	cbnz	r0, 800ccb8 <lv_btn_create+0x38>
 800ccb6:	e7fe      	b.n	800ccb6 <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 800ccb8:	4a32      	ldr	r2, [pc, #200]	; (800cd84 <lv_btn_create+0x104>)
    ext->state = LV_BTN_STATE_REL;
 800ccba:	7e03      	ldrb	r3, [r0, #24]
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 800ccbc:	6042      	str	r2, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 800ccbe:	4a32      	ldr	r2, [pc, #200]	; (800cd88 <lv_btn_create+0x108>)
 800ccc0:	6082      	str	r2, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 800ccc2:	4a32      	ldr	r2, [pc, #200]	; (800cd8c <lv_btn_create+0x10c>)
 800ccc4:	60c2      	str	r2, [r0, #12]
    ext->toggle = 0;
 800ccc6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 800ccca:	4a31      	ldr	r2, [pc, #196]	; (800cd90 <lv_btn_create+0x110>)
 800cccc:	6102      	str	r2, [r0, #16]
    ext->toggle = 0;
 800ccce:	f36f 03c3 	bfc	r3, #3, #1
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 800ccd2:	4a30      	ldr	r2, [pc, #192]	; (800cd94 <lv_btn_create+0x114>)
 800ccd4:	6142      	str	r2, [r0, #20]
    ext->toggle = 0;
 800ccd6:	7603      	strb	r3, [r0, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 800ccd8:	492f      	ldr	r1, [pc, #188]	; (800cd98 <lv_btn_create+0x118>)
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f7f9 fc8b 	bl	80065f6 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 800cce0:	492e      	ldr	r1, [pc, #184]	; (800cd9c <lv_btn_create+0x11c>)
 800cce2:	4628      	mov	r0, r5
 800cce4:	f7f9 fc89 	bl	80065fa <lv_obj_set_design_cb>
    if(copy == NULL) {
 800cce8:	bb66      	cbnz	r6, 800cd44 <lv_btn_create+0xc4>
        if(par != NULL) {
 800ccea:	b11f      	cbz	r7, 800ccf4 <lv_btn_create+0x74>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 800ccec:	2101      	movs	r1, #1
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f000 faf6 	bl	800d2e0 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f7f9 fc1a 	bl	8006530 <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 800ccfc:	f001 f8b8 	bl	800de70 <lv_theme_get_current>
        if(th) {
 800cd00:	4606      	mov	r6, r0
 800cd02:	b1d0      	cbz	r0, 800cd3a <lv_btn_create+0xba>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 800cd04:	6902      	ldr	r2, [r0, #16]
 800cd06:	2100      	movs	r1, #0
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7ff ff98 	bl	800cc3e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 800cd0e:	6972      	ldr	r2, [r6, #20]
 800cd10:	2101      	movs	r1, #1
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7ff ff93 	bl	800cc3e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 800cd18:	69b2      	ldr	r2, [r6, #24]
 800cd1a:	2102      	movs	r1, #2
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f7ff ff8e 	bl	800cc3e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 800cd22:	69f2      	ldr	r2, [r6, #28]
 800cd24:	2103      	movs	r1, #3
 800cd26:	4628      	mov	r0, r5
 800cd28:	f7ff ff89 	bl	800cc3e <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 800cd2c:	6a32      	ldr	r2, [r6, #32]
 800cd2e:	2104      	movs	r1, #4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f7ff ff84 	bl	800cc3e <lv_btn_set_style>
}
 800cd36:	4628      	mov	r0, r5
 800cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 800cd3a:	6861      	ldr	r1, [r4, #4]
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f7fa f93f 	bl	8006fc0 <lv_obj_set_style>
 800cd42:	e7f8      	b.n	800cd36 <lv_btn_create+0xb6>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7fa fa4f 	bl	80071e8 <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 800cd4a:	7e23      	ldrb	r3, [r4, #24]
 800cd4c:	7e02      	ldrb	r2, [r0, #24]
 800cd4e:	f362 0302 	bfi	r3, r2, #0, #3
 800cd52:	7623      	strb	r3, [r4, #24]
        ext->toggle             = copy_ext->toggle;
 800cd54:	7e03      	ldrb	r3, [r0, #24]
 800cd56:	7e22      	ldrb	r2, [r4, #24]
 800cd58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cd5c:	f363 02c3 	bfi	r2, r3, #3, #1
 800cd60:	7622      	strb	r2, [r4, #24]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 800cd62:	1d03      	adds	r3, r0, #4
 800cd64:	3404      	adds	r4, #4
 800cd66:	3018      	adds	r0, #24
 800cd68:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6c:	f844 2b04 	str.w	r2, [r4], #4
 800cd70:	4283      	cmp	r3, r0
 800cd72:	d1f9      	bne.n	800cd68 <lv_btn_create+0xe8>
        lv_obj_refresh_style(new_btn);
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7fa f8e5 	bl	8006f44 <lv_obj_refresh_style>
 800cd7a:	e7dc      	b.n	800cd36 <lv_btn_create+0xb6>
 800cd7c:	20014ee4 	.word	0x20014ee4
 800cd80:	20014ee0 	.word	0x20014ee0
 800cd84:	2001584c 	.word	0x2001584c
 800cd88:	2001589c 	.word	0x2001589c
 800cd8c:	20015a7c 	.word	0x20015a7c
 800cd90:	20015b1c 	.word	0x20015b1c
 800cd94:	2001598c 	.word	0x2001598c
 800cd98:	0800cdbd 	.word	0x0800cdbd
 800cd9c:	0800cbe1 	.word	0x0800cbe1

0800cda0 <lv_btn_get_state>:
{
 800cda0:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cda2:	f7fa fa21 	bl	80071e8 <lv_obj_get_ext_attr>
    return ext->state;
 800cda6:	7e00      	ldrb	r0, [r0, #24]
}
 800cda8:	f000 0007 	and.w	r0, r0, #7
 800cdac:	bd08      	pop	{r3, pc}

0800cdae <lv_btn_get_toggle>:
{
 800cdae:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cdb0:	f7fa fa1a 	bl	80071e8 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 800cdb4:	7e00      	ldrb	r0, [r0, #24]
}
 800cdb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800cdba:	bd08      	pop	{r3, pc}

0800cdbc <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 800cdbc:	4b52      	ldr	r3, [pc, #328]	; (800cf08 <lv_btn_signal+0x14c>)
{
 800cdbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 800cdc2:	681b      	ldr	r3, [r3, #0]
{
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460e      	mov	r6, r1
 800cdc8:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 800cdca:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800cdcc:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 800cdce:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800cdd0:	d112      	bne.n	800cdf8 <lv_btn_signal+0x3c>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7fa fa08 	bl	80071e8 <lv_obj_get_ext_attr>
 800cdd8:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7ff ffe7 	bl	800cdae <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 800cde0:	2e07      	cmp	r6, #7
    bool tgl           = lv_btn_get_toggle(btn);
 800cde2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
 800cde4:	d110      	bne.n	800ce08 <lv_btn_signal+0x4c>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 800cde6:	f899 3018 	ldrb.w	r3, [r9, #24]
 800cdea:	f013 0307 	ands.w	r3, r3, #7
 800cdee:	d107      	bne.n	800ce00 <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 800cdf0:	4629      	mov	r1, r5
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7ff ff0d 	bl	800cc12 <lv_btn_set_state>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	b003      	add	sp, #12
 800cdfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d1f9      	bne.n	800cdf8 <lv_btn_signal+0x3c>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 800ce04:	2103      	movs	r1, #3
 800ce06:	e7f4      	b.n	800cdf2 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 800ce08:	2e09      	cmp	r6, #9
 800ce0a:	d10b      	bne.n	800ce24 <lv_btn_signal+0x68>
        if(ext->state == LV_BTN_STATE_PR)
 800ce0c:	f899 3018 	ldrb.w	r3, [r9, #24]
 800ce10:	f003 0307 	and.w	r3, r3, #7
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d101      	bne.n	800ce1c <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800ce18:	2100      	movs	r1, #0
 800ce1a:	e7ea      	b.n	800cdf2 <lv_btn_signal+0x36>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d1eb      	bne.n	800cdf8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800ce20:	2102      	movs	r1, #2
 800ce22:	e7e6      	b.n	800cdf2 <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESSING) {
 800ce24:	2e08      	cmp	r6, #8
 800ce26:	d105      	bne.n	800ce34 <lv_btn_signal+0x78>
        if(lv_indev_is_dragging(param) != false) {
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f7f9 fb21 	bl	8006470 <lv_indev_is_dragging>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d1ec      	bne.n	800ce0c <lv_btn_signal+0x50>
 800ce32:	e7e1      	b.n	800cdf8 <lv_btn_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 800ce34:	2e0a      	cmp	r6, #10
 800ce36:	d12c      	bne.n	800ce92 <lv_btn_signal+0xd6>
        if(lv_indev_is_dragging(param) == false) {
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7f9 fb19 	bl	8006470 <lv_indev_is_dragging>
 800ce3e:	f899 3018 	ldrb.w	r3, [r9, #24]
 800ce42:	4606      	mov	r6, r0
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d1e3      	bne.n	800ce10 <lv_btn_signal+0x54>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
 800ce4e:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 800ce50:	d110      	bne.n	800ce74 <lv_btn_signal+0xb8>
 800ce52:	f1b8 0f00 	cmp.w	r8, #0
 800ce56:	d0df      	beq.n	800ce18 <lv_btn_signal+0x5c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800ce58:	2102      	movs	r1, #2
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f7ff fed9 	bl	800cc12 <lv_btn_set_state>
                toggled = 1;
 800ce60:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 800ce62:	aa01      	add	r2, sp, #4
 800ce64:	210e      	movs	r1, #14
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7f9 fbbc 	bl	80065e4 <lv_event_send>
                if(res != LV_RES_OK) return res;
 800ce6c:	2801      	cmp	r0, #1
 800ce6e:	bf18      	it	ne
 800ce70:	4605      	movne	r5, r0
 800ce72:	e7c1      	b.n	800cdf8 <lv_btn_signal+0x3c>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d108      	bne.n	800ce8a <lv_btn_signal+0xce>
 800ce78:	f1b8 0f00 	cmp.w	r8, #0
 800ce7c:	d0d0      	beq.n	800ce20 <lv_btn_signal+0x64>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800ce7e:	4601      	mov	r1, r0
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7ff fec6 	bl	800cc12 <lv_btn_set_state>
                toggled = 0;
 800ce86:	9601      	str	r6, [sp, #4]
 800ce88:	e7eb      	b.n	800ce62 <lv_btn_signal+0xa6>
            if(tgl) {
 800ce8a:	f1b8 0f00 	cmp.w	r8, #0
 800ce8e:	d0b3      	beq.n	800cdf8 <lv_btn_signal+0x3c>
 800ce90:	e7e7      	b.n	800ce62 <lv_btn_signal+0xa6>
    } else if(sign == LV_SIGNAL_CONTROL) {
 800ce92:	2e11      	cmp	r6, #17
 800ce94:	d128      	bne.n	800cee8 <lv_btn_signal+0x12c>
        char c = *((char *)param);
 800ce96:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 800ce98:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800ce9c:	2a11      	cmp	r2, #17
 800ce9e:	d111      	bne.n	800cec4 <lv_btn_signal+0x108>
            if(lv_btn_get_toggle(btn)) {
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7ff ff84 	bl	800cdae <lv_btn_get_toggle>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0a6      	beq.n	800cdf8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800ceaa:	2102      	movs	r1, #2
 800ceac:	4620      	mov	r0, r4
 800ceae:	f7ff feb0 	bl	800cc12 <lv_btn_set_state>
                uint32_t state = 1;
 800ceb2:	aa02      	add	r2, sp, #8
 800ceb4:	f842 5d04 	str.w	r5, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 800ceb8:	210e      	movs	r1, #14
 800ceba:	4620      	mov	r0, r4
 800cebc:	f7f9 fb92 	bl	80065e4 <lv_event_send>
 800cec0:	4605      	mov	r5, r0
 800cec2:	e799      	b.n	800cdf8 <lv_btn_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800cec4:	2b14      	cmp	r3, #20
 800cec6:	d001      	beq.n	800cecc <lv_btn_signal+0x110>
 800cec8:	2b12      	cmp	r3, #18
 800ceca:	d195      	bne.n	800cdf8 <lv_btn_signal+0x3c>
            if(lv_btn_get_toggle(btn)) {
 800cecc:	4620      	mov	r0, r4
 800cece:	f7ff ff6e 	bl	800cdae <lv_btn_get_toggle>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d090      	beq.n	800cdf8 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800ced6:	2100      	movs	r1, #0
 800ced8:	4620      	mov	r0, r4
 800ceda:	f7ff fe9a 	bl	800cc12 <lv_btn_set_state>
                uint32_t state = 0;
 800cede:	aa02      	add	r2, sp, #8
 800cee0:	2300      	movs	r3, #0
 800cee2:	f842 3d04 	str.w	r3, [r2, #-4]!
 800cee6:	e7e7      	b.n	800ceb8 <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800cee8:	2e06      	cmp	r6, #6
 800ceea:	d185      	bne.n	800cdf8 <lv_btn_signal+0x3c>
 800ceec:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800ceee:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	b119      	cbz	r1, 800cefe <lv_btn_signal+0x142>
 800cef6:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800cef8:	2b07      	cmp	r3, #7
 800cefa:	d1f8      	bne.n	800ceee <lv_btn_signal+0x132>
 800cefc:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 800cefe:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <lv_btn_signal+0x150>)
 800cf00:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 800cf04:	e778      	b.n	800cdf8 <lv_btn_signal+0x3c>
 800cf06:	bf00      	nop
 800cf08:	20014ee4 	.word	0x20014ee4
 800cf0c:	080e77d8 	.word	0x080e77d8

0800cf10 <lv_btn_get_style>:
{
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4606      	mov	r6, r0
 800cf14:	460d      	mov	r5, r1
    lv_btn_ext_t * ext       = lv_obj_get_ext_attr(btn);
 800cf16:	f7fa f967 	bl	80071e8 <lv_obj_get_ext_attr>
 800cf1a:	4604      	mov	r4, r0
    lv_btn_state_t state     = lv_btn_get_state(btn);
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7ff ff3f 	bl	800cda0 <lv_btn_get_state>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 800cf22:	b92d      	cbnz	r5, 800cf30 <lv_btn_get_style+0x20>
 800cf24:	b9e0      	cbnz	r0, 800cf60 <lv_btn_get_style+0x50>
        style = lv_obj_get_style(btn);
 800cf26:	4630      	mov	r0, r6
}
 800cf28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        style = lv_obj_get_style(btn);
 800cf2c:	f7fa b876 	b.w	800701c <lv_obj_get_style>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 800cf30:	2d01      	cmp	r5, #1
 800cf32:	d103      	bne.n	800cf3c <lv_btn_get_style+0x2c>
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 800cf34:	2801      	cmp	r0, #1
 800cf36:	d0f6      	beq.n	800cf26 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_PR: style = ext->styles[LV_BTN_STATE_PR]; break;
 800cf38:	68a0      	ldr	r0, [r4, #8]
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 800cf3c:	2d02      	cmp	r5, #2
 800cf3e:	d103      	bne.n	800cf48 <lv_btn_get_style+0x38>
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 800cf40:	2802      	cmp	r0, #2
 800cf42:	d0f0      	beq.n	800cf26 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_REL: style = ext->styles[LV_BTN_STATE_TGL_REL]; break;
 800cf44:	68e0      	ldr	r0, [r4, #12]
 800cf46:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 800cf48:	2d03      	cmp	r5, #3
 800cf4a:	d103      	bne.n	800cf54 <lv_btn_get_style+0x44>
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 800cf4c:	2803      	cmp	r0, #3
 800cf4e:	d0ea      	beq.n	800cf26 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_PR: style = ext->styles[LV_BTN_STATE_TGL_PR]; break;
 800cf50:	6920      	ldr	r0, [r4, #16]
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 800cf54:	2d04      	cmp	r5, #4
 800cf56:	d105      	bne.n	800cf64 <lv_btn_get_style+0x54>
       (type == LV_BTN_STYLE_INA && state == LV_BTN_STATE_INA)) {
 800cf58:	2804      	cmp	r0, #4
 800cf5a:	d0e4      	beq.n	800cf26 <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_INA: style = ext->styles[LV_BTN_STATE_INA]; break;
 800cf5c:	6960      	ldr	r0, [r4, #20]
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
            case LV_BTN_STYLE_REL: style = ext->styles[LV_BTN_STATE_REL]; break;
 800cf60:	6860      	ldr	r0, [r4, #4]
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
            default: style = NULL; break;
 800cf64:	2000      	movs	r0, #0
}
 800cf66:	bd70      	pop	{r4, r5, r6, pc}

0800cf68 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	b08d      	sub	sp, #52	; 0x34
 800cf6e:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800cf70:	f7fa f93a 	bl	80071e8 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 800cf74:	7803      	ldrb	r3, [r0, #0]
 800cf76:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800cf7a:	4682      	mov	sl, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 800cf7c:	d103      	bne.n	800cf86 <lv_cont_refr_autofit+0x1e>
 800cf7e:	7843      	ldrb	r3, [r0, #1]
 800cf80:	071b      	lsls	r3, r3, #28
 800cf82:	f000 80e8 	beq.w	800d156 <lv_cont_refr_autofit+0x1ee>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7fa f848 	bl	800701c <lv_obj_get_style>
 800cf8c:	4683      	mov	fp, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7f9 fff2 	bl	8006f78 <lv_obj_get_parent>
 800cf94:	9002      	str	r0, [sp, #8]
    const lv_style_t * par_style = lv_obj_get_style(par);
 800cf96:	f7fa f841 	bl	800701c <lv_obj_get_style>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800cf9a:	9902      	ldr	r1, [sp, #8]
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800cfa2:	6849      	ldr	r1, [r1, #4]
 800cfa4:	aa08      	add	r2, sp, #32
 800cfa6:	c203      	stmia	r2!, {r0, r1}
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
 800cfa8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800cfaa:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 800cfae:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 800cfb2:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 800cfb6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
    flood_area.x1 += par_style->body.padding.left;
 800cfba:	4490      	add	r8, r2
    flood_area.x2 -= par_style->body.padding.right;
 800cfbc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cfbe:	1abf      	subs	r7, r7, r2
    flood_area.y1 += par_style->body.padding.top;
 800cfc0:	8c1a      	ldrh	r2, [r3, #32]
    flood_area.y2 -= par_style->body.padding.bottom;
 800cfc2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    flood_area.y1 += par_style->body.padding.top;
 800cfc4:	4416      	add	r6, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 800cfc6:	1aed      	subs	r5, r5, r3

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 800cfc8:	a906      	add	r1, sp, #24
 800cfca:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 800cfcc:	fa0f f888 	sxth.w	r8, r8
    flood_area.x2 -= par_style->body.padding.right;
 800cfd0:	b23f      	sxth	r7, r7
    flood_area.y1 += par_style->body.padding.top;
 800cfd2:	b236      	sxth	r6, r6
    flood_area.y2 -= par_style->body.padding.bottom;
 800cfd4:	b22d      	sxth	r5, r5
    flood_area.x1 += par_style->body.padding.left;
 800cfd6:	f8ad 8020 	strh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 800cfda:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 800cfde:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 800cfe2:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 800cfe6:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &ori);
 800cfea:	f7f9 fff3 	bl	8006fd4 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	4620      	mov	r0, r4
 800cff2:	f7f9 ffef 	bl	8006fd4 <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 800cff6:	4648      	mov	r0, r9
 800cff8:	f7ff f99a 	bl	800c330 <lv_ll_is_empty>
 800cffc:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 800d000:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	d02e      	beq.n	800d066 <lv_cont_refr_autofit+0xfe>
        tight_area.x1 = LV_COORD_MAX;
 800d008:	f647 4318 	movw	r3, #31768	; 0x7c18
 800d00c:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.y1 = LV_COORD_MAX;
 800d010:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 800d014:	4648      	mov	r0, r9
        tight_area.x2 = LV_COORD_MIN;
 800d016:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800d01a:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y2 = LV_COORD_MIN;
 800d01e:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 800d022:	f7ff f890 	bl	800c146 <lv_ll_get_head>
 800d026:	4601      	mov	r1, r0
 800d028:	2800      	cmp	r0, #0
 800d02a:	f040 8097 	bne.w	800d15c <lv_cont_refr_autofit+0x1f4>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 800d02e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800d032:	f8bb 2024 	ldrh.w	r2, [fp, #36]	; 0x24
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.x2 += style->body.padding.right;
 800d03c:	f8bb 2026 	ldrh.w	r2, [fp, #38]	; 0x26
 800d040:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d044:	4413      	add	r3, r2
 800d046:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y1 -= style->body.padding.top;
 800d04a:	f8bb 2020 	ldrh.w	r2, [fp, #32]
 800d04e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.y2 += style->body.padding.bottom;
 800d058:	f8bb 2022 	ldrh.w	r2, [fp, #34]	; 0x22
 800d05c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d060:	4413      	add	r3, r2
 800d062:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d066:	ab06      	add	r3, sp, #24
 800d068:	e893 0003 	ldmia.w	r3, {r0, r1}
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 800d06c:	f89a 3000 	ldrb.w	r3, [sl]
 800d070:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800d074:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800d078:	2a02      	cmp	r2, #2
 800d07a:	e88b 0003 	stmia.w	fp, {r0, r1}
 800d07e:	f000 80a2 	beq.w	800d1c6 <lv_cont_refr_autofit+0x25e>
 800d082:	f200 8099 	bhi.w	800d1b8 <lv_cont_refr_autofit+0x250>
 800d086:	2a01      	cmp	r2, #1
 800d088:	d103      	bne.n	800d092 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 800d08a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800d08e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
    }

    switch(ext->fit_right) {
 800d092:	099b      	lsrs	r3, r3, #6
 800d094:	2b02      	cmp	r3, #2
 800d096:	f000 80a0 	beq.w	800d1da <lv_cont_refr_autofit+0x272>
 800d09a:	f200 8097 	bhi.w	800d1cc <lv_cont_refr_autofit+0x264>
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d103      	bne.n	800d0aa <lv_cont_refr_autofit+0x142>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 800d0a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d0a6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
    }

    switch(ext->fit_top) {
 800d0aa:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800d0ae:	f003 0203 	and.w	r2, r3, #3
 800d0b2:	2a02      	cmp	r2, #2
 800d0b4:	f000 809b 	beq.w	800d1ee <lv_cont_refr_autofit+0x286>
 800d0b8:	f200 8092 	bhi.w	800d1e0 <lv_cont_refr_autofit+0x278>
 800d0bc:	2a01      	cmp	r2, #1
 800d0be:	d103      	bne.n	800d0c8 <lv_cont_refr_autofit+0x160>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 800d0c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d0c4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
    }

    switch(ext->fit_bottom) {
 800d0c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	f000 8098 	beq.w	800d202 <lv_cont_refr_autofit+0x29a>
 800d0d2:	f200 808f 	bhi.w	800d1f4 <lv_cont_refr_autofit+0x28c>
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d103      	bne.n	800d0e2 <lv_cont_refr_autofit+0x17a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 800d0da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d0de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 800d0e2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800d0e6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d111      	bne.n	800d112 <lv_cont_refr_autofit+0x1aa>
 800d0ee:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800d0f2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d10b      	bne.n	800d112 <lv_cont_refr_autofit+0x1aa>
 800d0fa:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800d0fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800d102:	429a      	cmp	r2, r3
 800d104:	d105      	bne.n	800d112 <lv_cont_refr_autofit+0x1aa>
 800d106:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800d10a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800d10e:	429a      	cmp	r2, r3
 800d110:	d021      	beq.n	800d156 <lv_cont_refr_autofit+0x1ee>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 800d112:	4620      	mov	r0, r4
 800d114:	f7f9 faa0 	bl	8006658 <lv_obj_invalidate>
 800d118:	465b      	mov	r3, fp
 800d11a:	cb03      	ldmia	r3!, {r0, r1}
 800d11c:	6120      	str	r0, [r4, #16]
 800d11e:	6161      	str	r1, [r4, #20]
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 800d120:	4620      	mov	r0, r4
 800d122:	f7f9 fa99 	bl	8006658 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 800d126:	69e3      	ldr	r3, [r4, #28]
 800d128:	aa06      	add	r2, sp, #24
 800d12a:	2102      	movs	r1, #2
 800d12c:	4620      	mov	r0, r4
 800d12e:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 800d130:	9b02      	ldr	r3, [sp, #8]
 800d132:	9802      	ldr	r0, [sp, #8]
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	4622      	mov	r2, r4
 800d138:	2101      	movs	r1, #1
 800d13a:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7f9 ff67 	bl	8007010 <lv_obj_get_auto_realign>
 800d142:	b110      	cbz	r0, 800d14a <lv_cont_refr_autofit+0x1e2>
            lv_obj_realign(cont);
 800d144:	4620      	mov	r0, r4
 800d146:	f7f9 fd55 	bl	8006bf4 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 800d14a:	4648      	mov	r0, r9
 800d14c:	f7fe fffb 	bl	800c146 <lv_ll_get_head>
 800d150:	4604      	mov	r4, r0
 800d152:	2800      	cmp	r0, #0
 800d154:	d158      	bne.n	800d208 <lv_cont_refr_autofit+0x2a0>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 800d156:	b00d      	add	sp, #52	; 0x34
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 800d15c:	4608      	mov	r0, r1
 800d15e:	9103      	str	r1, [sp, #12]
 800d160:	f7f9 ffbc 	bl	80070dc <lv_obj_get_hidden>
 800d164:	9903      	ldr	r1, [sp, #12]
 800d166:	bb18      	cbnz	r0, 800d1b0 <lv_cont_refr_autofit+0x248>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 800d168:	f9b1 3010 	ldrsh.w	r3, [r1, #16]
 800d16c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d170:	4293      	cmp	r3, r2
 800d172:	bfa8      	it	ge
 800d174:	4613      	movge	r3, r2
 800d176:	f8ad 3010 	strh.w	r3, [sp, #16]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 800d17a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800d17e:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800d182:	4293      	cmp	r3, r2
 800d184:	bfa8      	it	ge
 800d186:	4613      	movge	r3, r2
 800d188:	f8ad 3012 	strh.w	r3, [sp, #18]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 800d18c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800d190:	f9b1 3014 	ldrsh.w	r3, [r1, #20]
 800d194:	4293      	cmp	r3, r2
 800d196:	bfb8      	it	lt
 800d198:	4613      	movlt	r3, r2
 800d19a:	f8ad 3014 	strh.w	r3, [sp, #20]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 800d19e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800d1a2:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	bfb8      	it	lt
 800d1aa:	4613      	movlt	r3, r2
 800d1ac:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 800d1b0:	4648      	mov	r0, r9
 800d1b2:	f7fe ffce 	bl	800c152 <lv_ll_get_next>
 800d1b6:	e736      	b.n	800d026 <lv_cont_refr_autofit+0xbe>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 800d1b8:	9a01      	ldr	r2, [sp, #4]
 800d1ba:	b122      	cbz	r2, 800d1c6 <lv_cont_refr_autofit+0x25e>
 800d1bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d1c0:	4590      	cmp	r8, r2
 800d1c2:	bfa8      	it	ge
 800d1c4:	4690      	movge	r8, r2
 800d1c6:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800d1ca:	e762      	b.n	800d092 <lv_cont_refr_autofit+0x12a>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 800d1cc:	9b01      	ldr	r3, [sp, #4]
 800d1ce:	b123      	cbz	r3, 800d1da <lv_cont_refr_autofit+0x272>
 800d1d0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800d1d4:	429f      	cmp	r7, r3
 800d1d6:	bfb8      	it	lt
 800d1d8:	461f      	movlt	r7, r3
 800d1da:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800d1de:	e764      	b.n	800d0aa <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 800d1e0:	9a01      	ldr	r2, [sp, #4]
 800d1e2:	b122      	cbz	r2, 800d1ee <lv_cont_refr_autofit+0x286>
 800d1e4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800d1e8:	4296      	cmp	r6, r2
 800d1ea:	bfa8      	it	ge
 800d1ec:	4616      	movge	r6, r2
 800d1ee:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 800d1f2:	e769      	b.n	800d0c8 <lv_cont_refr_autofit+0x160>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	b123      	cbz	r3, 800d202 <lv_cont_refr_autofit+0x29a>
 800d1f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d1fc:	429d      	cmp	r5, r3
 800d1fe:	bfb8      	it	lt
 800d200:	461d      	movlt	r5, r3
 800d202:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800d206:	e76c      	b.n	800d0e2 <lv_cont_refr_autofit+0x17a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800d208:	69e3      	ldr	r3, [r4, #28]
 800d20a:	2200      	movs	r2, #0
 800d20c:	2103      	movs	r1, #3
 800d20e:	4620      	mov	r0, r4
 800d210:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 800d212:	4621      	mov	r1, r4
 800d214:	4648      	mov	r0, r9
 800d216:	f7fe ff9c 	bl	800c152 <lv_ll_get_next>
 800d21a:	e799      	b.n	800d150 <lv_cont_refr_autofit+0x1e8>

0800d21c <lv_cont_create>:
{
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	4607      	mov	r7, r0
 800d220:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 800d222:	f7f9 fcfd 	bl	8006c20 <lv_obj_create>
    lv_mem_assert(new_cont);
 800d226:	4605      	mov	r5, r0
 800d228:	b900      	cbnz	r0, 800d22c <lv_cont_create+0x10>
 800d22a:	e7fe      	b.n	800d22a <lv_cont_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 800d22c:	4c29      	ldr	r4, [pc, #164]	; (800d2d4 <lv_cont_create+0xb8>)
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	b913      	cbnz	r3, 800d238 <lv_cont_create+0x1c>
 800d232:	f7f9 ffd5 	bl	80071e0 <lv_obj_get_signal_cb>
 800d236:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 800d238:	2102      	movs	r1, #2
 800d23a:	4628      	mov	r0, r5
 800d23c:	f7f9 f9df 	bl	80065fe <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 800d240:	4628      	mov	r0, r5
 800d242:	f7f9 ffd1 	bl	80071e8 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 800d246:	4604      	mov	r4, r0
 800d248:	2800      	cmp	r0, #0
 800d24a:	d041      	beq.n	800d2d0 <lv_cont_create+0xb4>
    ext->fit_left   = LV_FIT_NONE;
 800d24c:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 800d24e:	7842      	ldrb	r2, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 800d250:	4921      	ldr	r1, [pc, #132]	; (800d2d8 <lv_cont_create+0xbc>)
    ext->fit_bottom = LV_FIT_NONE;
 800d252:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 800d256:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 800d25a:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 800d25e:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 800d262:	7042      	strb	r2, [r0, #1]
    ext->layout     = LV_LAYOUT_OFF;
 800d264:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 800d266:	4628      	mov	r0, r5
 800d268:	f7f9 f9c5 	bl	80065f6 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800d26c:	b95e      	cbnz	r6, 800d286 <lv_cont_create+0x6a>
        if(par != NULL) {
 800d26e:	b137      	cbz	r7, 800d27e <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 800d270:	f000 fdfe 	bl	800de70 <lv_theme_get_current>
            if(th) {
 800d274:	b128      	cbz	r0, 800d282 <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 800d276:	68c1      	ldr	r1, [r0, #12]
 800d278:	4628      	mov	r0, r5
 800d27a:	f7f9 fea1 	bl	8006fc0 <lv_obj_set_style>
}
 800d27e:	4628      	mov	r0, r5
 800d280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d282:	4916      	ldr	r1, [pc, #88]	; (800d2dc <lv_cont_create+0xc0>)
 800d284:	e7f8      	b.n	800d278 <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800d286:	4630      	mov	r0, r6
 800d288:	f7f9 ffae 	bl	80071e8 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 800d28c:	7803      	ldrb	r3, [r0, #0]
 800d28e:	7822      	ldrb	r2, [r4, #0]
 800d290:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d294:	f363 1205 	bfi	r2, r3, #4, #2
 800d298:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 800d29a:	7803      	ldrb	r3, [r0, #0]
 800d29c:	b2d2      	uxtb	r2, r2
 800d29e:	099b      	lsrs	r3, r3, #6
 800d2a0:	f363 1287 	bfi	r2, r3, #6, #2
 800d2a4:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 800d2a6:	7842      	ldrb	r2, [r0, #1]
 800d2a8:	7863      	ldrb	r3, [r4, #1]
 800d2aa:	f362 0301 	bfi	r3, r2, #0, #2
 800d2ae:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 800d2b0:	7843      	ldrb	r3, [r0, #1]
 800d2b2:	7862      	ldrb	r2, [r4, #1]
 800d2b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d2b8:	f363 0283 	bfi	r2, r3, #2, #2
 800d2bc:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 800d2be:	7802      	ldrb	r2, [r0, #0]
 800d2c0:	7823      	ldrb	r3, [r4, #0]
 800d2c2:	f362 0303 	bfi	r3, r2, #0, #4
 800d2c6:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f7f9 fe3b 	bl	8006f44 <lv_obj_refresh_style>
 800d2ce:	e7d6      	b.n	800d27e <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	e7d4      	b.n	800d27e <lv_cont_create+0x62>
 800d2d4:	20014ee8 	.word	0x20014ee8
 800d2d8:	0800d861 	.word	0x0800d861
 800d2dc:	200158ec 	.word	0x200158ec

0800d2e0 <lv_cont_set_layout>:
{
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800d2e6:	f7f9 ff7f 	bl	80071e8 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 800d2ea:	7803      	ldrb	r3, [r0, #0]
 800d2ec:	f003 020f 	and.w	r2, r3, #15
 800d2f0:	42aa      	cmp	r2, r5
 800d2f2:	d009      	beq.n	800d308 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 800d2f4:	f365 0303 	bfi	r3, r5, #0, #4
 800d2f8:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	69e3      	ldr	r3, [r4, #28]
 800d2fe:	4620      	mov	r0, r4
 800d300:	2101      	movs	r1, #1
}
 800d302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 800d306:	4718      	bx	r3
 800d308:	bd70      	pop	{r4, r5, r6, pc}

0800d30a <lv_cont_get_layout>:
{
 800d30a:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800d30c:	f7f9 ff6c 	bl	80071e8 <lv_obj_get_ext_attr>
    return ext->layout;
 800d310:	7800      	ldrb	r0, [r0, #0]
}
 800d312:	f000 000f 	and.w	r0, r0, #15
 800d316:	bd08      	pop	{r3, pc}

0800d318 <lv_cont_refr_layout>:
{
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	b087      	sub	sp, #28
 800d31e:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
 800d320:	f7ff fff3 	bl	800d30a <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 800d324:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 800d326:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 800d328:	4620      	mov	r0, r4
 800d32a:	f7f9 fe27 	bl	8006f7c <lv_obj_get_child>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f000 8293 	beq.w	800d85a <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_OFF) return;
 800d334:	2d00      	cmp	r5, #0
 800d336:	f000 8290 	beq.w	800d85a <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_CENTER) {
 800d33a:	2d01      	cmp	r5, #1
 800d33c:	d16a      	bne.n	800d414 <lv_cont_refr_layout+0xfc>
    const lv_style_t * style = lv_obj_get_style(cont);
 800d33e:	4620      	mov	r0, r4
 800d340:	f7f9 fe6c 	bl	800701c <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
 800d344:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 800d346:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 800d348:	4630      	mov	r0, r6
 800d34a:	f7fe fefc 	bl	800c146 <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
 800d34e:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
 800d350:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
 800d352:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 800d354:	f1b8 0f00 	cmp.w	r8, #0
 800d358:	d11d      	bne.n	800d396 <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 800d35a:	f1b9 0f00 	cmp.w	r9, #0
 800d35e:	f000 827c 	beq.w	800d85a <lv_cont_refr_layout+0x542>
    h_tot -= style->body.padding.inner;
 800d362:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800d364:	1a2d      	subs	r5, r5, r0
 800d366:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d368:	4620      	mov	r0, r4
 800d36a:	2101      	movs	r1, #1
 800d36c:	f7f9 f8e7 	bl	800653e <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 800d370:	b22d      	sxth	r5, r5
 800d372:	f04f 0902 	mov.w	r9, #2
    LV_LL_READ_BACK(cont->child_ll, child)
 800d376:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
 800d378:	fb95 f5f9 	sdiv	r5, r5, r9
 800d37c:	426d      	negs	r5, r5
 800d37e:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800d380:	f7fe fee4 	bl	800c14c <lv_ll_get_tail>
 800d384:	4680      	mov	r8, r0
 800d386:	b9f8      	cbnz	r0, 800d3c8 <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 800d388:	2101      	movs	r1, #1
 800d38a:	4620      	mov	r0, r4
}
 800d38c:	b007      	add	sp, #28
 800d38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 800d392:	f7f9 b8da 	b.w	800654a <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800d396:	4640      	mov	r0, r8
 800d398:	f7f9 fea0 	bl	80070dc <lv_obj_get_hidden>
 800d39c:	b970      	cbnz	r0, 800d3bc <lv_cont_refr_layout+0xa4>
 800d39e:	2104      	movs	r1, #4
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	f7f9 ff16 	bl	80071d2 <lv_obj_is_protected>
 800d3a6:	b948      	cbnz	r0, 800d3bc <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	f7f9 fe2b 	bl	8007004 <lv_obj_get_height>
 800d3ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d3b2:	4418      	add	r0, r3
 800d3b4:	4405      	add	r5, r0
 800d3b6:	b22d      	sxth	r5, r5
        obj_num++;
 800d3b8:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
 800d3bc:	4641      	mov	r1, r8
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7fe fec7 	bl	800c152 <lv_ll_get_next>
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	e7c5      	b.n	800d354 <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	f7f9 fe87 	bl	80070dc <lv_obj_get_hidden>
 800d3ce:	b9e0      	cbnz	r0, 800d40a <lv_cont_refr_layout+0xf2>
 800d3d0:	2104      	movs	r1, #4
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	f7f9 fefd 	bl	80071d2 <lv_obj_is_protected>
 800d3d8:	4682      	mov	sl, r0
 800d3da:	b9b0      	cbnz	r0, 800d40a <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 800d3dc:	4640      	mov	r0, r8
 800d3de:	f7f9 fe11 	bl	8007004 <lv_obj_get_height>
 800d3e2:	b2ad      	uxth	r5, r5
 800d3e4:	fb90 f0f9 	sdiv	r0, r0, r9
 800d3e8:	4428      	add	r0, r5
 800d3ea:	b200      	sxth	r0, r0
 800d3ec:	4653      	mov	r3, sl
 800d3ee:	9000      	str	r0, [sp, #0]
 800d3f0:	4652      	mov	r2, sl
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	4640      	mov	r0, r8
 800d3f6:	f7f9 f9f1 	bl	80067dc <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	f7f9 fe02 	bl	8007004 <lv_obj_get_height>
 800d400:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d404:	4418      	add	r0, r3
 800d406:	4405      	add	r5, r0
 800d408:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800d40a:	4641      	mov	r1, r8
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7fe fea5 	bl	800c15c <lv_ll_get_prev>
 800d412:	e7b7      	b.n	800d384 <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 800d414:	1eab      	subs	r3, r5, #2
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d84a      	bhi.n	800d4b2 <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7ff ff74 	bl	800d30a <lv_cont_get_layout>
 800d422:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 800d424:	4620      	mov	r0, r4
 800d426:	f7f9 fdf9 	bl	800701c <lv_obj_get_style>
    switch(type) {
 800d42a:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 800d42c:	4607      	mov	r7, r0
    switch(type) {
 800d42e:	d008      	beq.n	800d442 <lv_cont_refr_layout+0x12a>
 800d430:	2d04      	cmp	r5, #4
 800d432:	d036      	beq.n	800d4a2 <lv_cont_refr_layout+0x18a>
 800d434:	2d02      	cmp	r5, #2
 800d436:	d13a      	bne.n	800d4ae <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.left;
 800d438:	f9b0 5024 	ldrsh.w	r5, [r0, #36]	; 0x24
            align     = LV_ALIGN_IN_TOP_LEFT;
 800d43c:	f04f 0801 	mov.w	r8, #1
 800d440:	e002      	b.n	800d448 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 800d442:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 800d444:	f04f 0802 	mov.w	r8, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d448:	4620      	mov	r0, r4
 800d44a:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 800d44c:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d450:	f7f9 f875 	bl	800653e <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800d454:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
 800d456:	f9b7 a020 	ldrsh.w	sl, [r7, #32]
    LV_LL_READ_BACK(cont->child_ll, child)
 800d45a:	f7fe fe77 	bl	800c14c <lv_ll_get_tail>
 800d45e:	4606      	mov	r6, r0
 800d460:	2800      	cmp	r0, #0
 800d462:	d091      	beq.n	800d388 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800d464:	4630      	mov	r0, r6
 800d466:	f7f9 fe39 	bl	80070dc <lv_obj_get_hidden>
 800d46a:	b9a8      	cbnz	r0, 800d498 <lv_cont_refr_layout+0x180>
 800d46c:	2104      	movs	r1, #4
 800d46e:	4630      	mov	r0, r6
 800d470:	f7f9 feaf 	bl	80071d2 <lv_obj_is_protected>
 800d474:	b980      	cbnz	r0, 800d498 <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 800d476:	462b      	mov	r3, r5
 800d478:	f8cd a000 	str.w	sl, [sp]
 800d47c:	4642      	mov	r2, r8
 800d47e:	4621      	mov	r1, r4
 800d480:	4630      	mov	r0, r6
 800d482:	f7f9 f9ab 	bl	80067dc <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 800d486:	4630      	mov	r0, r6
 800d488:	f7f9 fdbc 	bl	8007004 <lv_obj_get_height>
 800d48c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d490:	4418      	add	r0, r3
 800d492:	4450      	add	r0, sl
 800d494:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
 800d498:	4631      	mov	r1, r6
 800d49a:	4648      	mov	r0, r9
 800d49c:	f7fe fe5e 	bl	800c15c <lv_ll_get_prev>
 800d4a0:	e7dd      	b.n	800d45e <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.right;
 800d4a2:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
 800d4a4:	426d      	negs	r5, r5
 800d4a6:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_TOP_RIGHT;
 800d4a8:	f04f 0803 	mov.w	r8, #3
 800d4ac:	e7cc      	b.n	800d448 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 800d4ae:	2500      	movs	r5, #0
 800d4b0:	e7c4      	b.n	800d43c <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 800d4b2:	1f6b      	subs	r3, r5, #5
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d84a      	bhi.n	800d550 <lv_cont_refr_layout+0x238>
    lv_layout_t type = lv_cont_get_layout(cont);
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f7ff ff25 	bl	800d30a <lv_cont_get_layout>
 800d4c0:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f7f9 fdaa 	bl	800701c <lv_obj_get_style>
    switch(type) {
 800d4c8:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 800d4ca:	4607      	mov	r7, r0
    switch(type) {
 800d4cc:	d008      	beq.n	800d4e0 <lv_cont_refr_layout+0x1c8>
 800d4ce:	2d07      	cmp	r5, #7
 800d4d0:	d036      	beq.n	800d540 <lv_cont_refr_layout+0x228>
 800d4d2:	2d05      	cmp	r5, #5
 800d4d4:	d13a      	bne.n	800d54c <lv_cont_refr_layout+0x234>
            vpad_corr = style->body.padding.top;
 800d4d6:	f9b0 5020 	ldrsh.w	r5, [r0, #32]
            align     = LV_ALIGN_IN_TOP_LEFT;
 800d4da:	f04f 0801 	mov.w	r8, #1
 800d4de:	e002      	b.n	800d4e6 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 800d4e0:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 800d4e2:	f04f 0807 	mov.w	r8, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 800d4ea:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d4ee:	f7f9 f826 	bl	800653e <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800d4f2:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.left;
 800d4f4:	f9b7 a024 	ldrsh.w	sl, [r7, #36]	; 0x24
    LV_LL_READ_BACK(cont->child_ll, child)
 800d4f8:	f7fe fe28 	bl	800c14c <lv_ll_get_tail>
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f43f af42 	beq.w	800d388 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800d504:	4630      	mov	r0, r6
 800d506:	f7f9 fde9 	bl	80070dc <lv_obj_get_hidden>
 800d50a:	b9a0      	cbnz	r0, 800d536 <lv_cont_refr_layout+0x21e>
 800d50c:	2104      	movs	r1, #4
 800d50e:	4630      	mov	r0, r6
 800d510:	f7f9 fe5f 	bl	80071d2 <lv_obj_is_protected>
 800d514:	b978      	cbnz	r0, 800d536 <lv_cont_refr_layout+0x21e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 800d516:	4653      	mov	r3, sl
 800d518:	4642      	mov	r2, r8
 800d51a:	4621      	mov	r1, r4
 800d51c:	4630      	mov	r0, r6
 800d51e:	9500      	str	r5, [sp, #0]
 800d520:	f7f9 f95c 	bl	80067dc <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 800d524:	4630      	mov	r0, r6
 800d526:	f7f9 fd67 	bl	8006ff8 <lv_obj_get_width>
 800d52a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d52e:	4403      	add	r3, r0
 800d530:	4453      	add	r3, sl
 800d532:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
 800d536:	4631      	mov	r1, r6
 800d538:	4648      	mov	r0, r9
 800d53a:	f7fe fe0f 	bl	800c15c <lv_ll_get_prev>
 800d53e:	e7dd      	b.n	800d4fc <lv_cont_refr_layout+0x1e4>
            vpad_corr = -style->body.padding.bottom;
 800d540:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 800d542:	426d      	negs	r5, r5
 800d544:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 800d546:	f04f 0804 	mov.w	r8, #4
 800d54a:	e7cc      	b.n	800d4e6 <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 800d54c:	2500      	movs	r5, #0
 800d54e:	e7c4      	b.n	800d4da <lv_cont_refr_layout+0x1c2>
    } else if(type == LV_LAYOUT_PRETTY) {
 800d550:	2d08      	cmp	r5, #8
 800d552:	f040 80e7 	bne.w	800d724 <lv_cont_refr_layout+0x40c>
    const lv_style_t * style = lv_obj_get_style(cont);
 800d556:	4620      	mov	r0, r4
 800d558:	f7f9 fd60 	bl	800701c <lv_obj_get_style>
 800d55c:	4680      	mov	r8, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 800d55e:	4620      	mov	r0, r4
 800d560:	f7f9 fd4a 	bl	8006ff8 <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800d564:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 800d566:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800d568:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 800d56a:	f9b8 a020 	ldrsh.w	sl, [r8, #32]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800d56e:	9302      	str	r3, [sp, #8]
 800d570:	f7fe fdec 	bl	800c14c <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 800d574:	4605      	mov	r5, r0
 800d576:	2800      	cmp	r0, #0
 800d578:	f000 816f 	beq.w	800d85a <lv_cont_refr_layout+0x542>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d57c:	2101      	movs	r1, #1
 800d57e:	4620      	mov	r0, r4
 800d580:	f7f8 ffdd 	bl	800653e <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 800d584:	f8b8 b024 	ldrh.w	fp, [r8, #36]	; 0x24
 800d588:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
        uint32_t obj_num = 0;
 800d58c:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 800d58e:	4483      	add	fp, r0
        lv_coord_t w_row =
 800d590:	fa0f fb8b 	sxth.w	fp, fp
 800d594:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 800d596:	46b9      	mov	r9, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 800d598:	4628      	mov	r0, r5
 800d59a:	f7f9 fd9f 	bl	80070dc <lv_obj_get_hidden>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d13b      	bne.n	800d61a <lv_cont_refr_layout+0x302>
 800d5a2:	2104      	movs	r1, #4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f7f9 fe14 	bl	80071d2 <lv_obj_is_protected>
 800d5aa:	bbb0      	cbnz	r0, 800d61a <lv_cont_refr_layout+0x302>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f7f9 fd23 	bl	8006ff8 <lv_obj_get_width>
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	4458      	add	r0, fp
 800d5b6:	4298      	cmp	r0, r3
 800d5b8:	dd15      	ble.n	800d5e6 <lv_cont_refr_layout+0x2ce>
                    if(child_rc != NULL && obj_num != 0) {
 800d5ba:	2f00      	cmp	r7, #0
 800d5bc:	f000 812c 	beq.w	800d818 <lv_cont_refr_layout+0x500>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	9802      	ldr	r0, [sp, #8]
 800d5c4:	f7fe fdc5 	bl	800c152 <lv_ll_get_next>
 800d5c8:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 800d5ca:	2f01      	cmp	r7, #1
 800d5cc:	d130      	bne.n	800d630 <lv_cont_refr_layout+0x318>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 800d5ce:	f8cd a000 	str.w	sl, [sp]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 800d5da:	f7f9 f8ff 	bl	80067dc <lv_obj_align>
        if(child_rc == NULL) break;
 800d5de:	2d00      	cmp	r5, #0
 800d5e0:	f040 8126 	bne.w	800d830 <lv_cont_refr_layout+0x518>
 800d5e4:	e6d0      	b.n	800d388 <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f7f9 fd06 	bl	8006ff8 <lv_obj_get_width>
 800d5ec:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 800d5f0:	4418      	add	r0, r3
 800d5f2:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7f9 fd05 	bl	8007004 <lv_obj_get_height>
 800d5fa:	4548      	cmp	r0, r9
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 800d5fc:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 800d600:	db03      	blt.n	800d60a <lv_cont_refr_layout+0x2f2>
 800d602:	4628      	mov	r0, r5
 800d604:	f7f9 fcfe 	bl	8007004 <lv_obj_get_height>
 800d608:	4681      	mov	r9, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 800d60a:	2108      	movs	r1, #8
 800d60c:	4628      	mov	r0, r5
                obj_num++;
 800d60e:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 800d610:	f7f9 fddf 	bl	80071d2 <lv_obj_is_protected>
 800d614:	2800      	cmp	r0, #0
 800d616:	f040 80fc 	bne.w	800d812 <lv_cont_refr_layout+0x4fa>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 800d61a:	4629      	mov	r1, r5
 800d61c:	9802      	ldr	r0, [sp, #8]
 800d61e:	f7fe fd9d 	bl	800c15c <lv_ll_get_prev>
 800d622:	4605      	mov	r5, r0
            if(obj_num == 0)
 800d624:	2f00      	cmp	r7, #0
 800d626:	f000 8113 	beq.w	800d850 <lv_cont_refr_layout+0x538>
        } while(child_rc != NULL);
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d1b4      	bne.n	800d598 <lv_cont_refr_layout+0x280>
 800d62e:	e7cc      	b.n	800d5ca <lv_cont_refr_layout+0x2b2>
        else if(obj_num == 2) {
 800d630:	2f02      	cmp	r7, #2
 800d632:	d13a      	bne.n	800d6aa <lv_cont_refr_layout+0x392>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 800d634:	4631      	mov	r1, r6
 800d636:	9802      	ldr	r0, [sp, #8]
 800d638:	f7fe fd90 	bl	800c15c <lv_ll_get_prev>
 800d63c:	4683      	mov	fp, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 800d63e:	4630      	mov	r0, r6
 800d640:	f7f9 fcda 	bl	8006ff8 <lv_obj_get_width>
 800d644:	9004      	str	r0, [sp, #16]
 800d646:	4658      	mov	r0, fp
 800d648:	f7f9 fcd6 	bl	8006ff8 <lv_obj_get_width>
 800d64c:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800d64e:	9a03      	ldr	r2, [sp, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 800d650:	4403      	add	r3, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800d652:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 800d654:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	2203      	movs	r2, #3
 800d65a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d65e:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 800d660:	f7f9 fcd0 	bl	8007004 <lv_obj_get_height>
 800d664:	fa1f f38a 	uxth.w	r3, sl
 800d668:	eba9 0000 	sub.w	r0, r9, r0
 800d66c:	fb90 f0f7 	sdiv	r0, r0, r7
 800d670:	4418      	add	r0, r3
 800d672:	b200      	sxth	r0, r0
 800d674:	2201      	movs	r2, #1
 800d676:	4621      	mov	r1, r4
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	9000      	str	r0, [sp, #0]
 800d67c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800d680:	4630      	mov	r0, r6
 800d682:	f7f9 f8ab 	bl	80067dc <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 800d686:	4658      	mov	r0, fp
 800d688:	f7f9 fcbc 	bl	8007004 <lv_obj_get_height>
 800d68c:	9a05      	ldr	r2, [sp, #20]
 800d68e:	9b04      	ldr	r3, [sp, #16]
 800d690:	eba9 0000 	sub.w	r0, r9, r0
 800d694:	fb90 f7f7 	sdiv	r7, r0, r7
 800d698:	4417      	add	r7, r2
 800d69a:	425b      	negs	r3, r3
 800d69c:	b23f      	sxth	r7, r7
 800d69e:	9700      	str	r7, [sp, #0]
 800d6a0:	b21b      	sxth	r3, r3
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4658      	mov	r0, fp
 800d6a8:	e797      	b.n	800d5da <lv_cont_refr_layout+0x2c2>
            w_row -= style->body.padding.inner * obj_num;
 800d6aa:	f9b8 0028 	ldrsh.w	r0, [r8, #40]	; 0x28
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800d6ae:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 800d6b0:	fb10 f007 	smulbb	r0, r0, r7
 800d6b4:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800d6b8:	fa0f fb8b 	sxth.w	fp, fp
 800d6bc:	eba3 0b0b 	sub.w	fp, r3, fp
 800d6c0:	3f01      	subs	r7, #1
 800d6c2:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 800d6c6:	f9b8 b024 	ldrsh.w	fp, [r8, #36]	; 0x24
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800d6ca:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7f9 fd05 	bl	80070dc <lv_obj_get_hidden>
 800d6d2:	b9e0      	cbnz	r0, 800d70e <lv_cont_refr_layout+0x3f6>
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7f9 fd7b 	bl	80071d2 <lv_obj_is_protected>
 800d6dc:	b9b8      	cbnz	r0, 800d70e <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7f9 fc90 	bl	8007004 <lv_obj_get_height>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	eba9 0000 	sub.w	r0, r9, r0
 800d6ea:	fb90 f0f3 	sdiv	r0, r0, r3
 800d6ee:	4450      	add	r0, sl
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 800d6f0:	b200      	sxth	r0, r0
 800d6f2:	465b      	mov	r3, fp
 800d6f4:	9000      	str	r0, [sp, #0]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7f9 f86e 	bl	80067dc <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 800d700:	4630      	mov	r0, r6
 800d702:	f7f9 fc79 	bl	8006ff8 <lv_obj_get_width>
 800d706:	4438      	add	r0, r7
 800d708:	4483      	add	fp, r0
 800d70a:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 800d70e:	42ae      	cmp	r6, r5
 800d710:	f000 808f 	beq.w	800d832 <lv_cont_refr_layout+0x51a>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 800d714:	4631      	mov	r1, r6
 800d716:	9802      	ldr	r0, [sp, #8]
 800d718:	f7fe fd20 	bl	800c15c <lv_ll_get_prev>
            while(child_tmp != NULL) {
 800d71c:	4606      	mov	r6, r0
 800d71e:	2800      	cmp	r0, #0
 800d720:	d1d4      	bne.n	800d6cc <lv_cont_refr_layout+0x3b4>
 800d722:	e75c      	b.n	800d5de <lv_cont_refr_layout+0x2c6>
    } else if(type == LV_LAYOUT_GRID) {
 800d724:	2d09      	cmp	r5, #9
 800d726:	f040 8098 	bne.w	800d85a <lv_cont_refr_layout+0x542>
    const lv_style_t * style = lv_obj_get_style(cont);
 800d72a:	4620      	mov	r0, r4
 800d72c:	f7f9 fc76 	bl	800701c <lv_obj_get_style>
 800d730:	4681      	mov	r9, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 800d732:	4620      	mov	r0, r4
 800d734:	f7f9 fc60 	bl	8006ff8 <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 800d738:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 800d73a:	4607      	mov	r7, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 800d73c:	4620      	mov	r0, r4
 800d73e:	f7f9 fc1d 	bl	8006f7c <lv_obj_get_child>
 800d742:	f7f9 fc59 	bl	8006ff8 <lv_obj_get_width>
 800d746:	4605      	mov	r5, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 800d748:	4620      	mov	r0, r4
 800d74a:	f7f9 fcb9 	bl	80070c0 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 800d74e:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 800d750:	4606      	mov	r6, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 800d752:	4620      	mov	r0, r4
 800d754:	f7f9 fc12 	bl	8006f7c <lv_obj_get_child>
 800d758:	f7f9 fc54 	bl	8007004 <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 800d75c:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 800d760:	1953      	adds	r3, r2, r5
 800d762:	fb96 f3f3 	sdiv	r3, r6, r3
 800d766:	fa1f fa83 	uxth.w	sl, r3
    if(obj_row > 1) {
 800d76a:	f1ba 0f01 	cmp.w	sl, #1
 800d76e:	d944      	bls.n	800d7fa <lv_cont_refr_layout+0x4e2>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
 800d770:	fb0a 6615 	mls	r6, sl, r5, r6
 800d774:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d778:	fb96 f3f3 	sdiv	r3, r6, r3
 800d77c:	441d      	add	r5, r3
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 800d77e:	4410      	add	r0, r2
 800d780:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d782:	2101      	movs	r1, #1
 800d784:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 800d786:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800d788:	f7f8 fed9 	bl	800653e <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800d78c:	1d23      	adds	r3, r4, #4
 800d78e:	4618      	mov	r0, r3
    lv_coord_t act_x = style->body.padding.left;
 800d790:	f9b9 6024 	ldrsh.w	r6, [r9, #36]	; 0x24
    lv_coord_t act_y = style->body.padding.top;
 800d794:	f9b9 7020 	ldrsh.w	r7, [r9, #32]
    LV_LL_READ_BACK(cont->child_ll, child)
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	f7fe fcd7 	bl	800c14c <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
 800d79e:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800d7a0:	4683      	mov	fp, r0
    uint16_t obj_cnt = 0;
 800d7a2:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 800d7a6:	f1bb 0f00 	cmp.w	fp, #0
 800d7aa:	f43f aded 	beq.w	800d388 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f7f9 fc94 	bl	80070dc <lv_obj_get_hidden>
 800d7b4:	b9d8      	cbnz	r0, 800d7ee <lv_cont_refr_layout+0x4d6>
 800d7b6:	2104      	movs	r1, #4
 800d7b8:	4658      	mov	r0, fp
 800d7ba:	f7f9 fd0a 	bl	80071d2 <lv_obj_is_protected>
 800d7be:	b9b0      	cbnz	r0, 800d7ee <lv_cont_refr_layout+0x4d6>
        if(obj_row > 1) {
 800d7c0:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 800d7c4:	463a      	mov	r2, r7
        if(obj_row > 1) {
 800d7c6:	d91f      	bls.n	800d808 <lv_cont_refr_layout+0x4f0>
            lv_obj_set_pos(child, act_x, act_y);
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4658      	mov	r0, fp
 800d7cc:	f7f8 ffb1 	bl	8006732 <lv_obj_set_pos>
            act_x += x_ofs;
 800d7d0:	442e      	add	r6, r5
 800d7d2:	b236      	sxth	r6, r6
        obj_cnt++;
 800d7d4:	f108 0801 	add.w	r8, r8, #1
 800d7d8:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 800d7dc:	45c2      	cmp	sl, r8
 800d7de:	d806      	bhi.n	800d7ee <lv_cont_refr_layout+0x4d6>
            act_y += y_ofs;
 800d7e0:	9b02      	ldr	r3, [sp, #8]
            act_x   = style->body.padding.left;
 800d7e2:	f9b9 6024 	ldrsh.w	r6, [r9, #36]	; 0x24
            act_y += y_ofs;
 800d7e6:	441f      	add	r7, r3
 800d7e8:	b23f      	sxth	r7, r7
            obj_cnt = 0;
 800d7ea:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 800d7ee:	4659      	mov	r1, fp
 800d7f0:	9803      	ldr	r0, [sp, #12]
 800d7f2:	f7fe fcb3 	bl	800c15c <lv_ll_get_prev>
 800d7f6:	4683      	mov	fp, r0
 800d7f8:	e7d5      	b.n	800d7a6 <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	fb97 f7f3 	sdiv	r7, r7, r3
 800d800:	fb95 f5f3 	sdiv	r5, r5, r3
 800d804:	1b7d      	subs	r5, r7, r5
 800d806:	e7ba      	b.n	800d77e <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 800d808:	4629      	mov	r1, r5
 800d80a:	4658      	mov	r0, fp
 800d80c:	f7f8 ff91 	bl	8006732 <lv_obj_set_pos>
 800d810:	e7e0      	b.n	800d7d4 <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 800d812:	2f00      	cmp	r7, #0
 800d814:	f47f aed9 	bne.w	800d5ca <lv_cont_refr_layout+0x2b2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 800d818:	2300      	movs	r3, #0
 800d81a:	2202      	movs	r2, #2
 800d81c:	4621      	mov	r1, r4
 800d81e:	4628      	mov	r0, r5
 800d820:	f8cd a000 	str.w	sl, [sp]
 800d824:	f7f8 ffda 	bl	80067dc <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 800d828:	4628      	mov	r0, r5
 800d82a:	f7f9 fbeb 	bl	8007004 <lv_obj_get_height>
 800d82e:	4681      	mov	r9, r0
        if(child_rc == NULL) break;
 800d830:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800d832:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 800d836:	9802      	ldr	r0, [sp, #8]
 800d838:	4631      	mov	r1, r6
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800d83a:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 800d83c:	f7fe fc8e 	bl	800c15c <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800d840:	44d1      	add	r9, sl
 800d842:	fa0f fa89 	sxth.w	sl, r9
    while(child_rs != NULL) {
 800d846:	4605      	mov	r5, r0
 800d848:	2800      	cmp	r0, #0
 800d84a:	f47f ae9b 	bne.w	800d584 <lv_cont_refr_layout+0x26c>
 800d84e:	e59b      	b.n	800d388 <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 800d850:	2800      	cmp	r0, #0
 800d852:	f43f ad99 	beq.w	800d388 <lv_cont_refr_layout+0x70>
 800d856:	462e      	mov	r6, r5
 800d858:	e69e      	b.n	800d598 <lv_cont_refr_layout+0x280>
}
 800d85a:	b007      	add	sp, #28
 800d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d860 <lv_cont_signal>:
{
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 800d862:	4b1e      	ldr	r3, [pc, #120]	; (800d8dc <lv_cont_signal+0x7c>)
 800d864:	681b      	ldr	r3, [r3, #0]
{
 800d866:	4604      	mov	r4, r0
 800d868:	460f      	mov	r7, r1
 800d86a:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 800d86c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800d86e:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 800d870:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800d872:	d120      	bne.n	800d8b6 <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 800d874:	2f04      	cmp	r7, #4
 800d876:	d106      	bne.n	800d886 <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 800d878:	4620      	mov	r0, r4
 800d87a:	f7ff fd4d 	bl	800d318 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 800d87e:	4620      	mov	r0, r4
 800d880:	f7ff fb72 	bl	800cf68 <lv_cont_refr_autofit>
 800d884:	e017      	b.n	800d8b6 <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 800d886:	2f01      	cmp	r7, #1
 800d888:	d0f6      	beq.n	800d878 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800d88a:	2f02      	cmp	r7, #2
 800d88c:	d115      	bne.n	800d8ba <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 800d88e:	4620      	mov	r0, r4
 800d890:	f7f9 fbb2 	bl	8006ff8 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800d894:	88b3      	ldrh	r3, [r6, #4]
 800d896:	8832      	ldrh	r2, [r6, #0]
 800d898:	3301      	adds	r3, #1
 800d89a:	1a9b      	subs	r3, r3, r2
 800d89c:	b21b      	sxth	r3, r3
 800d89e:	4298      	cmp	r0, r3
 800d8a0:	d1ea      	bne.n	800d878 <lv_cont_signal+0x18>
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f7f9 fbae 	bl	8007004 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800d8a8:	88f3      	ldrh	r3, [r6, #6]
 800d8aa:	8872      	ldrh	r2, [r6, #2]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	1a9b      	subs	r3, r3, r2
 800d8b0:	b21b      	sxth	r3, r3
 800d8b2:	4298      	cmp	r0, r3
 800d8b4:	d1e0      	bne.n	800d878 <lv_cont_signal+0x18>
}
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 800d8ba:	2f03      	cmp	r7, #3
 800d8bc:	d0df      	beq.n	800d87e <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800d8be:	2f06      	cmp	r7, #6
 800d8c0:	d1f9      	bne.n	800d8b6 <lv_cont_signal+0x56>
 800d8c2:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800d8c4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	b119      	cbz	r1, 800d8d4 <lv_cont_signal+0x74>
 800d8cc:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800d8ce:	2b07      	cmp	r3, #7
 800d8d0:	d1f8      	bne.n	800d8c4 <lv_cont_signal+0x64>
 800d8d2:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 800d8d4:	4b02      	ldr	r3, [pc, #8]	; (800d8e0 <lv_cont_signal+0x80>)
 800d8d6:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800d8da:	e7ec      	b.n	800d8b6 <lv_cont_signal+0x56>
 800d8dc:	20014ee8 	.word	0x20014ee8
 800d8e0:	080e77df 	.word	0x080e77df

0800d8e4 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 800d8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e8:	b09d      	sub	sp, #116	; 0x74
 800d8ea:	4690      	mov	r8, r2
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 800d8f0:	f7f9 fb94 	bl	800701c <lv_obj_get_style>
 800d8f4:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 800d8f6:	4648      	mov	r0, r9
 800d8f8:	f7f9 fc76 	bl	80071e8 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 800d8fc:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 800d900:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 800d902:	d115      	bne.n	800d930 <lv_img_design+0x4c>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800d904:	7b03      	ldrb	r3, [r0, #12]
 800d906:	f003 0203 	and.w	r2, r3, #3
 800d90a:	3a02      	subs	r2, #2
 800d90c:	2a01      	cmp	r2, #1
 800d90e:	f240 808e 	bls.w	800da2e <lv_img_design+0x14a>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 800d912:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800d916:	2b20      	cmp	r3, #32
 800d918:	d002      	beq.n	800d920 <lv_img_design+0x3c>
 800d91a:	2b08      	cmp	r3, #8
 800d91c:	f040 8087 	bne.w	800da2e <lv_img_design+0x14a>
 800d920:	f109 0110 	add.w	r1, r9, #16
 800d924:	4628      	mov	r0, r5
 800d926:	f7fe fab7 	bl	800be98 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 800d92a:	b01d      	add	sp, #116	; 0x74
 800d92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800d930:	f1b8 0f00 	cmp.w	r8, #0
 800d934:	d105      	bne.n	800d942 <lv_img_design+0x5e>
        if(ext->h == 0 || ext->w == 0) return true;
 800d936:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d93a:	b113      	cbz	r3, 800d942 <lv_img_design+0x5e>
 800d93c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800d940:	b90b      	cbnz	r3, 800d946 <lv_img_design+0x62>
    return true;
 800d942:	2001      	movs	r0, #1
 800d944:	e7f1      	b.n	800d92a <lv_img_design+0x46>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800d946:	4648      	mov	r0, r9
 800d948:	f7f9 fbe6 	bl	8007118 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 800d94c:	a906      	add	r1, sp, #24
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800d94e:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 800d950:	4648      	mov	r0, r9
 800d952:	f7f9 fb3f 	bl	8006fd4 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 800d956:	7b23      	ldrb	r3, [r4, #12]
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d842      	bhi.n	800d9e6 <lv_img_design+0x102>
            coords.x1 -= ext->offset.x;
 800d960:	88a2      	ldrh	r2, [r4, #4]
 800d962:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800d966:	1a9b      	subs	r3, r3, r2
 800d968:	f8ad 3018 	strh.w	r3, [sp, #24]
            coords.y1 -= ext->offset.y;
 800d96c:	88e2      	ldrh	r2, [r4, #6]
 800d96e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d972:	1a9b      	subs	r3, r3, r2
 800d974:	b29b      	uxth	r3, r3
 800d976:	b21a      	sxth	r2, r3
 800d978:	f8ad 201a 	strh.w	r2, [sp, #26]
            cords_tmp.y1 = coords.y1;
 800d97c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 800d980:	8962      	ldrh	r2, [r4, #10]
 800d982:	3a01      	subs	r2, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800d984:	4413      	add	r3, r2
 800d986:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d98a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800d98e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d992:	429a      	cmp	r2, r3
 800d994:	dad5      	bge.n	800d942 <lv_img_design+0x5e>
                cords_tmp.x1 = coords.x1;
 800d996:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 800d99a:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 800d99c:	f8ad 3020 	strh.w	r3, [sp, #32]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 800d9a0:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d9a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d9ac:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	db08      	blt.n	800d9c6 <lv_img_design+0xe2>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800d9b4:	8963      	ldrh	r3, [r4, #10]
 800d9b6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800d9ba:	441a      	add	r2, r3
 800d9bc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800d9c0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800d9c4:	e7de      	b.n	800d984 <lv_img_design+0xa0>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 800d9c6:	9700      	str	r7, [sp, #0]
 800d9c8:	4633      	mov	r3, r6
 800d9ca:	6822      	ldr	r2, [r4, #0]
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	a808      	add	r0, sp, #32
 800d9d0:	f7fa ff50 	bl	8008874 <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800d9d4:	8923      	ldrh	r3, [r4, #8]
 800d9d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d9da:	441a      	add	r2, r3
 800d9dc:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d9e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800d9e4:	e7dd      	b.n	800d9a2 <lv_img_design+0xbe>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d118      	bne.n	800da1c <lv_img_design+0x138>
            lv_style_copy(&style_mod, style);
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	a808      	add	r0, sp, #32
 800d9ee:	f7f9 ff45 	bl	800787c <lv_style_copy>
            style_mod.text.color = style->image.color;
 800d9f2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d9f4:	9313      	str	r3, [sp, #76]	; 0x4c
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d9f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9fa:	f8cd 8014 	str.w	r8, [sp, #20]
 800d9fe:	9304      	str	r3, [sp, #16]
 800da00:	9303      	str	r3, [sp, #12]
 800da02:	f8cd 8008 	str.w	r8, [sp, #8]
 800da06:	f8cd 8004 	str.w	r8, [sp, #4]
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	aa08      	add	r2, sp, #32
 800da10:	463b      	mov	r3, r7
 800da12:	4629      	mov	r1, r5
 800da14:	a806      	add	r0, sp, #24
 800da16:	f7fb f82b 	bl	8008a70 <lv_draw_label>
 800da1a:	e792      	b.n	800d942 <lv_img_design+0x5e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 800da1c:	9700      	str	r7, [sp, #0]
 800da1e:	4633      	mov	r3, r6
 800da20:	4642      	mov	r2, r8
 800da22:	4629      	mov	r1, r5
 800da24:	f109 0010 	add.w	r0, r9, #16
 800da28:	f7fa ff24 	bl	8008874 <lv_draw_img>
 800da2c:	e789      	b.n	800d942 <lv_img_design+0x5e>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800da2e:	2000      	movs	r0, #0
 800da30:	e77b      	b.n	800d92a <lv_img_design+0x46>

0800da32 <lv_img_set_auto_size>:
{
 800da32:	b510      	push	{r4, lr}
 800da34:	460c      	mov	r4, r1
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800da36:	f7f9 fbd7 	bl	80071e8 <lv_obj_get_ext_attr>
    ext->auto_size = (en == false ? 0 : 1);
 800da3a:	7b03      	ldrb	r3, [r0, #12]
 800da3c:	f364 0382 	bfi	r3, r4, #2, #1
 800da40:	7303      	strb	r3, [r0, #12]
 800da42:	bd10      	pop	{r4, pc}

0800da44 <lv_img_get_auto_size>:
{
 800da44:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800da46:	f7f9 fbcf 	bl	80071e8 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 800da4a:	7b00      	ldrb	r0, [r0, #12]
}
 800da4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800da50:	bd08      	pop	{r3, pc}

0800da52 <lv_img_set_src>:
{
 800da52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	4606      	mov	r6, r0
 800da58:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800da5a:	4608      	mov	r0, r1
{
 800da5c:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800da5e:	f7fa ffe1 	bl	8008a24 <lv_img_src_get_type>
 800da62:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800da64:	4630      	mov	r0, r6
 800da66:	f7f9 fbbf 	bl	80071e8 <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 800da6a:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800da6c:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 800da6e:	d111      	bne.n	800da94 <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 800da70:	7b03      	ldrb	r3, [r0, #12]
 800da72:	f003 0303 	and.w	r3, r3, #3
 800da76:	3b01      	subs	r3, #1
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d802      	bhi.n	800da82 <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 800da7c:	6800      	ldr	r0, [r0, #0]
 800da7e:	f7fe fcdf 	bl	800c440 <lv_mem_free>
        ext->src      = NULL;
 800da82:	2300      	movs	r3, #0
 800da84:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 800da86:	7b23      	ldrb	r3, [r4, #12]
 800da88:	f043 0303 	orr.w	r3, r3, #3
 800da8c:	7323      	strb	r3, [r4, #12]
}
 800da8e:	b006      	add	sp, #24
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 800da94:	a904      	add	r1, sp, #16
 800da96:	4628      	mov	r0, r5
 800da98:	f7fd fd6e 	bl	800b578 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800da9c:	bb4f      	cbnz	r7, 800daf2 <lv_img_set_src+0xa0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800da9e:	7b23      	ldrb	r3, [r4, #12]
 800daa0:	f003 0303 	and.w	r3, r3, #3
 800daa4:	3b01      	subs	r3, #1
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d802      	bhi.n	800dab0 <lv_img_set_src+0x5e>
            lv_mem_free(ext->src);
 800daaa:	6820      	ldr	r0, [r4, #0]
 800daac:	f7fe fcc8 	bl	800c440 <lv_mem_free>
        ext->src = src_img;
 800dab0:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 800dab2:	9a04      	ldr	r2, [sp, #16]
    ext->src_type = src_type;
 800dab4:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 800dab6:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800daba:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 800dabc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dac0:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800dac4:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 800dac6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ext->src_type = src_type;
 800daca:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf       = header.cf;
 800dace:	f362 03c7 	bfi	r3, r2, #3, #5
 800dad2:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ffb5 	bl	800da44 <lv_img_get_auto_size>
 800dada:	b130      	cbz	r0, 800daea <lv_img_set_src+0x98>
        lv_obj_set_size(img, ext->w, ext->h);
 800dadc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800dae0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7f9 f9e3 	bl	8006eb0 <lv_obj_set_size>
    lv_obj_invalidate(img);
 800daea:	4630      	mov	r0, r6
 800daec:	f7f8 fdb4 	bl	8006658 <lv_obj_invalidate>
 800daf0:	e7cd      	b.n	800da8e <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 800daf2:	1e7b      	subs	r3, r7, #1
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d8db      	bhi.n	800dab2 <lv_img_set_src+0x60>
        if(ext->src != src_img) {
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	4285      	cmp	r5, r0
 800dafe:	d015      	beq.n	800db2c <lv_img_set_src+0xda>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800db00:	7b23      	ldrb	r3, [r4, #12]
 800db02:	f003 0303 	and.w	r3, r3, #3
 800db06:	3b01      	subs	r3, #1
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d801      	bhi.n	800db10 <lv_img_set_src+0xbe>
                lv_mem_free(ext->src);
 800db0c:	f7fe fc98 	bl	800c440 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 800db10:	4628      	mov	r0, r5
 800db12:	f7f2 fb67 	bl	80001e4 <strlen>
 800db16:	3001      	adds	r0, #1
 800db18:	f7fe fc5c 	bl	800c3d4 <lv_mem_alloc>
            lv_mem_assert(new_str);
 800db1c:	4680      	mov	r8, r0
 800db1e:	b900      	cbnz	r0, 800db22 <lv_img_set_src+0xd0>
 800db20:	e7fe      	b.n	800db20 <lv_img_set_src+0xce>
            strcpy(new_str, src_img);
 800db22:	4629      	mov	r1, r5
 800db24:	f000 fc64 	bl	800e3f0 <strcpy>
            ext->src = new_str;
 800db28:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800db2c:	2f02      	cmp	r7, #2
 800db2e:	d1c0      	bne.n	800dab2 <lv_img_set_src+0x60>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 800db30:	4630      	mov	r0, r6
 800db32:	f7f9 fa73 	bl	800701c <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 800db36:	2200      	movs	r2, #0
 800db38:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800db3c:	9202      	str	r2, [sp, #8]
 800db3e:	f647 4218 	movw	r2, #31768	; 0x7c18
 800db42:	9201      	str	r2, [sp, #4]
 800db44:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 800db48:	9200      	str	r2, [sp, #0]
 800db4a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800db4c:	4629      	mov	r1, r5
 800db4e:	a805      	add	r0, sp, #20
 800db50:	f7fe ffd2 	bl	800caf8 <lv_txt_get_size>
        header.w = size.x;
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800db5a:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 800db5e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 800db62:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 800db64:	0c1b      	lsrs	r3, r3, #16
 800db66:	f362 134f 	bfi	r3, r2, #5, #11
 800db6a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800db6e:	e7a0      	b.n	800dab2 <lv_img_set_src+0x60>

0800db70 <lv_img_create>:
{
 800db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db74:	4680      	mov	r8, r0
 800db76:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 800db78:	f7f9 f852 	bl	8006c20 <lv_obj_create>
    lv_mem_assert(new_img);
 800db7c:	4605      	mov	r5, r0
 800db7e:	b900      	cbnz	r0, 800db82 <lv_img_create+0x12>
 800db80:	e7fe      	b.n	800db80 <lv_img_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 800db82:	4c2a      	ldr	r4, [pc, #168]	; (800dc2c <lv_img_create+0xbc>)
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	b913      	cbnz	r3, 800db8e <lv_img_create+0x1e>
 800db88:	f7f9 fb2a 	bl	80071e0 <lv_obj_get_signal_cb>
 800db8c:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 800db8e:	2110      	movs	r1, #16
 800db90:	4628      	mov	r0, r5
 800db92:	f7f8 fd34 	bl	80065fe <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800db96:	4604      	mov	r4, r0
 800db98:	b900      	cbnz	r0, 800db9c <lv_img_create+0x2c>
 800db9a:	e7fe      	b.n	800db9a <lv_img_create+0x2a>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 800db9c:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 800db9e:	2700      	movs	r7, #0
    ext->cf        = LV_IMG_CF_UNKNOWN;
 800dba0:	f043 0303 	orr.w	r3, r3, #3
 800dba4:	f367 03c7 	bfi	r3, r7, #3, #5
 800dba8:	7303      	strb	r3, [r0, #12]
    ext->src       = NULL;
 800dbaa:	6007      	str	r7, [r0, #0]
    ext->w         = lv_obj_get_width(new_img);
 800dbac:	4628      	mov	r0, r5
 800dbae:	f7f9 fa23 	bl	8006ff8 <lv_obj_get_width>
 800dbb2:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	f7f9 fa25 	bl	8007004 <lv_obj_get_height>
    ext->auto_size = 1;
 800dbba:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 800dbbc:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 800dbbe:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800dbc2:	491b      	ldr	r1, [pc, #108]	; (800dc30 <lv_img_create+0xc0>)
    ext->auto_size = 1;
 800dbc4:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800dbc6:	4628      	mov	r0, r5
    ext->offset.x  = 0;
 800dbc8:	80a7      	strh	r7, [r4, #4]
    ext->offset.y  = 0;
 800dbca:	80e7      	strh	r7, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800dbcc:	f7f8 fd13 	bl	80065f6 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 800dbd0:	4918      	ldr	r1, [pc, #96]	; (800dc34 <lv_img_create+0xc4>)
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f7f8 fd11 	bl	80065fa <lv_obj_set_design_cb>
    if(copy == NULL) {
 800dbd8:	b9b6      	cbnz	r6, 800dc08 <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 800dbda:	4631      	mov	r1, r6
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f7f8 fca7 	bl	8006530 <lv_obj_set_click>
 800dbe2:	7b23      	ldrb	r3, [r4, #12]
        if(par != NULL) {
 800dbe4:	f1b8 0f00 	cmp.w	r8, #0
 800dbe8:	d009      	beq.n	800dbfe <lv_img_create+0x8e>
            ext->auto_size = 1;
 800dbea:	f043 0304 	orr.w	r3, r3, #4
 800dbee:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 800dbf0:	4631      	mov	r1, r6
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7f9 f9e4 	bl	8006fc0 <lv_obj_set_style>
}
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 800dbfe:	f368 0382 	bfi	r3, r8, #2, #1
 800dc02:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800dc04:	490c      	ldr	r1, [pc, #48]	; (800dc38 <lv_img_create+0xc8>)
 800dc06:	e7f4      	b.n	800dbf2 <lv_img_create+0x82>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7f9 faed 	bl	80071e8 <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 800dc0e:	7b03      	ldrb	r3, [r0, #12]
 800dc10:	7b22      	ldrb	r2, [r4, #12]
 800dc12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dc16:	f363 0282 	bfi	r2, r3, #2, #1
 800dc1a:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 800dc1c:	6801      	ldr	r1, [r0, #0]
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f7ff ff17 	bl	800da52 <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 800dc24:	4628      	mov	r0, r5
 800dc26:	f7f9 f98d 	bl	8006f44 <lv_obj_refresh_style>
 800dc2a:	e7e5      	b.n	800dbf8 <lv_img_create+0x88>
 800dc2c:	20014eec 	.word	0x20014eec
 800dc30:	0800dc3d 	.word	0x0800dc3d
 800dc34:	0800d8e5 	.word	0x0800d8e5
 800dc38:	20015a2c 	.word	0x20015a2c

0800dc3c <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 800dc3c:	4b1d      	ldr	r3, [pc, #116]	; (800dcb4 <lv_img_signal+0x78>)
{
 800dc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 800dc42:	681b      	ldr	r3, [r3, #0]
{
 800dc44:	4680      	mov	r8, r0
 800dc46:	460d      	mov	r5, r1
 800dc48:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 800dc4a:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800dc4c:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 800dc4e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 800dc50:	d112      	bne.n	800dc78 <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800dc52:	4640      	mov	r0, r8
 800dc54:	f7f9 fac8 	bl	80071e8 <lv_obj_get_ext_attr>
 800dc58:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800dc5a:	b985      	cbnz	r5, 800dc7e <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800dc5c:	7b03      	ldrb	r3, [r0, #12]
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	3b01      	subs	r3, #1
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d807      	bhi.n	800dc78 <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 800dc68:	6800      	ldr	r0, [r0, #0]
 800dc6a:	f7fe fbe9 	bl	800c440 <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800dc6e:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 800dc70:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800dc72:	f043 0303 	orr.w	r3, r3, #3
 800dc76:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 800dc78:	4630      	mov	r0, r6
 800dc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800dc7e:	2d04      	cmp	r5, #4
 800dc80:	d109      	bne.n	800dc96 <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800dc82:	7b03      	ldrb	r3, [r0, #12]
 800dc84:	f003 0303 	and.w	r3, r3, #3
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d1f5      	bne.n	800dc78 <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 800dc8c:	6801      	ldr	r1, [r0, #0]
 800dc8e:	4640      	mov	r0, r8
 800dc90:	f7ff fedf 	bl	800da52 <lv_img_set_src>
 800dc94:	e7f0      	b.n	800dc78 <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800dc96:	2d06      	cmp	r5, #6
 800dc98:	d1ee      	bne.n	800dc78 <lv_img_signal+0x3c>
 800dc9a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800dc9c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	b119      	cbz	r1, 800dcac <lv_img_signal+0x70>
 800dca4:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800dca6:	2b07      	cmp	r3, #7
 800dca8:	d1f8      	bne.n	800dc9c <lv_img_signal+0x60>
 800dcaa:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 800dcac:	4b02      	ldr	r3, [pc, #8]	; (800dcb8 <lv_img_signal+0x7c>)
 800dcae:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 800dcb2:	e7e1      	b.n	800dc78 <lv_img_signal+0x3c>
 800dcb4:	20014eec 	.word	0x20014eec
 800dcb8:	080e77e7 	.word	0x080e77e7

0800dcbc <refr_img>:

    return res;
}

static void refr_img(lv_obj_t * imgbtn)
{
 800dcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcbe:	4604      	mov	r4, r0
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800dcc0:	f7f9 fa92 	bl	80071e8 <lv_obj_get_ext_attr>
 800dcc4:	4605      	mov	r5, r0
 * @param imgbtn pointer to a image button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f7ff f86a 	bl	800cda0 <lv_btn_get_state>
    lv_btn_state_t state  = lv_imgbtn_get_state(imgbtn);
    lv_img_header_t header;

#if LV_IMGBTN_TILED == 0
    const void * src = ext->img_src[state];
 800dccc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
#else
    const void * src = ext->img_src_mid[state];
#endif

    lv_res_t info_res;
    info_res = lv_img_decoder_get_info(src, &header);
 800dcd0:	a901      	add	r1, sp, #4
 800dcd2:	69c0      	ldr	r0, [r0, #28]
 800dcd4:	f7fd fc50 	bl	800b578 <lv_img_decoder_get_info>
    if(info_res == LV_RES_OK) {
 800dcd8:	2801      	cmp	r0, #1
 800dcda:	d114      	bne.n	800dd06 <refr_img+0x4a>
        ext->act_cf = header.cf;
 800dcdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
#if LV_IMGBTN_TILED == 0
        lv_obj_set_size(imgbtn, header.w, header.h);
 800dce0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dce4:	9901      	ldr	r1, [sp, #4]
        ext->act_cf = header.cf;
 800dce6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800dcea:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        lv_obj_set_size(imgbtn, header.w, header.h);
 800dcee:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800dcf2:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f7f9 f8da 	bl	8006eb0 <lv_obj_set_size>
#endif
    } else {
        ext->act_cf = LV_IMG_CF_UNKNOWN;
    }

    lv_obj_invalidate(imgbtn);
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7f8 fcab 	bl	8006658 <lv_obj_invalidate>
}
 800dd02:	b003      	add	sp, #12
 800dd04:	bd30      	pop	{r4, r5, pc}
        ext->act_cf = LV_IMG_CF_UNKNOWN;
 800dd06:	2300      	movs	r3, #0
 800dd08:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800dd0c:	e7f6      	b.n	800dcfc <refr_img+0x40>
	...

0800dd10 <lv_imgbtn_signal>:
{
 800dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(imgbtn, sign, param);
 800dd12:	4b0f      	ldr	r3, [pc, #60]	; (800dd50 <lv_imgbtn_signal+0x40>)
 800dd14:	681b      	ldr	r3, [r3, #0]
{
 800dd16:	4607      	mov	r7, r0
 800dd18:	460e      	mov	r6, r1
 800dd1a:	4615      	mov	r5, r2
    res = ancestor_signal(imgbtn, sign, param);
 800dd1c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800dd1e:	2801      	cmp	r0, #1
    res = ancestor_signal(imgbtn, sign, param);
 800dd20:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 800dd22:	d104      	bne.n	800dd2e <lv_imgbtn_signal+0x1e>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 800dd24:	2e04      	cmp	r6, #4
 800dd26:	d104      	bne.n	800dd32 <lv_imgbtn_signal+0x22>
        refr_img(imgbtn);
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f7ff ffc7 	bl	800dcbc <refr_img>
}
 800dd2e:	4620      	mov	r0, r4
 800dd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800dd32:	2e06      	cmp	r6, #6
 800dd34:	d1fb      	bne.n	800dd2e <lv_imgbtn_signal+0x1e>
 800dd36:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800dd38:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	b119      	cbz	r1, 800dd48 <lv_imgbtn_signal+0x38>
 800dd40:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800dd42:	2b07      	cmp	r3, #7
 800dd44:	d1f8      	bne.n	800dd38 <lv_imgbtn_signal+0x28>
 800dd46:	461a      	mov	r2, r3
        buf->type[i] = "lv_imgbtn";
 800dd48:	4b02      	ldr	r3, [pc, #8]	; (800dd54 <lv_imgbtn_signal+0x44>)
 800dd4a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800dd4e:	e7ee      	b.n	800dd2e <lv_imgbtn_signal+0x1e>
 800dd50:	20014ef4 	.word	0x20014ef4
 800dd54:	080e77ee 	.word	0x080e77ee

0800dd58 <lv_imgbtn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800dd58:	2a02      	cmp	r2, #2
{
 800dd5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800dd62:	d10f      	bne.n	800dd84 <lv_imgbtn_design+0x2c>
        lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800dd64:	f7f9 fa40 	bl	80071e8 <lv_obj_get_ext_attr>
        if(ext->act_cf == LV_IMG_CF_TRUE_COLOR || ext->act_cf == LV_IMG_CF_RAW) {
 800dd68:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800dd6c:	2b04      	cmp	r3, #4
 800dd6e:	d001      	beq.n	800dd74 <lv_imgbtn_design+0x1c>
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d123      	bne.n	800ddbc <lv_imgbtn_design+0x64>
            cover = lv_area_is_in(mask, &imgbtn->coords);
 800dd74:	f104 0110 	add.w	r1, r4, #16
 800dd78:	4630      	mov	r0, r6
}
 800dd7a:	b002      	add	sp, #8
 800dd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            cover = lv_area_is_in(mask, &imgbtn->coords);
 800dd80:	f7fe b88a 	b.w	800be98 <lv_area_is_in>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800dd84:	b9c2      	cbnz	r2, 800ddb8 <lv_imgbtn_design+0x60>
        lv_imgbtn_ext_t * ext    = lv_obj_get_ext_attr(imgbtn);
 800dd86:	f7f9 fa2f 	bl	80071e8 <lv_obj_get_ext_attr>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f7ff f807 	bl	800cda0 <lv_btn_get_state>
    return lv_btn_get_style(imgbtn, type);
 800dd92:	4601      	mov	r1, r0
 800dd94:	4607      	mov	r7, r0
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7ff f8ba 	bl	800cf10 <lv_btn_get_style>
 800dd9c:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(imgbtn);
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7f9 f9ba 	bl	8007118 <lv_obj_get_opa_scale>
        const void * src = ext->img_src[state];
 800dda4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
        lv_draw_img(&imgbtn->coords, mask, src, style, opa_scale);
 800dda8:	9000      	str	r0, [sp, #0]
 800ddaa:	4643      	mov	r3, r8
 800ddac:	69ea      	ldr	r2, [r5, #28]
 800ddae:	4631      	mov	r1, r6
 800ddb0:	f104 0010 	add.w	r0, r4, #16
 800ddb4:	f7fa fd5e 	bl	8008874 <lv_draw_img>
    return true;
 800ddb8:	2001      	movs	r0, #1
 800ddba:	e000      	b.n	800ddbe <lv_imgbtn_design+0x66>
        bool cover            = false;
 800ddbc:	2000      	movs	r0, #0
}
 800ddbe:	b002      	add	sp, #8
 800ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddc4 <lv_imgbtn_create>:
{
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	460f      	mov	r7, r1
    lv_obj_t * new_imgbtn = lv_btn_create(par, copy);
 800ddc8:	f7fe ff5a 	bl	800cc80 <lv_btn_create>
    lv_mem_assert(new_imgbtn);
 800ddcc:	4604      	mov	r4, r0
 800ddce:	b900      	cbnz	r0, 800ddd2 <lv_imgbtn_create+0xe>
 800ddd0:	e7fe      	b.n	800ddd0 <lv_imgbtn_create+0xc>
    lv_imgbtn_ext_t * ext = lv_obj_allocate_ext_attr(new_imgbtn, sizeof(lv_imgbtn_ext_t));
 800ddd2:	2134      	movs	r1, #52	; 0x34
 800ddd4:	f7f8 fc13 	bl	80065fe <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800ddd8:	4606      	mov	r6, r0
 800ddda:	b900      	cbnz	r0, 800ddde <lv_imgbtn_create+0x1a>
 800dddc:	e7fe      	b.n	800dddc <lv_imgbtn_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_imgbtn);
 800ddde:	4d19      	ldr	r5, [pc, #100]	; (800de44 <lv_imgbtn_create+0x80>)
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b91b      	cbnz	r3, 800ddec <lv_imgbtn_create+0x28>
 800dde4:	4620      	mov	r0, r4
 800dde6:	f7f9 f9fb 	bl	80071e0 <lv_obj_get_signal_cb>
 800ddea:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_imgbtn);
 800ddec:	4d16      	ldr	r5, [pc, #88]	; (800de48 <lv_imgbtn_create+0x84>)
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	b91b      	cbnz	r3, 800ddfa <lv_imgbtn_create+0x36>
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7f9 f9f6 	bl	80071e4 <lv_obj_get_design_cb>
 800ddf8:	6028      	str	r0, [r5, #0]
    memset(ext->img_src, 0, sizeof(ext->img_src));
 800ddfa:	f106 051c 	add.w	r5, r6, #28
 800ddfe:	2214      	movs	r2, #20
 800de00:	2100      	movs	r1, #0
 800de02:	4628      	mov	r0, r5
 800de04:	f000 fab7 	bl	800e376 <memset>
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 800de08:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 800de0a:	4910      	ldr	r1, [pc, #64]	; (800de4c <lv_imgbtn_create+0x88>)
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 800de0c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 800de10:	4620      	mov	r0, r4
 800de12:	f7f8 fbf0 	bl	80065f6 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_imgbtn, lv_imgbtn_design);
 800de16:	490e      	ldr	r1, [pc, #56]	; (800de50 <lv_imgbtn_create+0x8c>)
 800de18:	4620      	mov	r0, r4
 800de1a:	f7f8 fbee 	bl	80065fa <lv_obj_set_design_cb>
    if(copy == NULL) {
 800de1e:	b177      	cbz	r7, 800de3e <lv_imgbtn_create+0x7a>
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800de20:	4638      	mov	r0, r7
 800de22:	f7f9 f9e1 	bl	80071e8 <lv_obj_get_ext_attr>
        memcpy(ext->img_src, copy_ext->img_src, sizeof(ext->img_src));
 800de26:	f100 031c 	add.w	r3, r0, #28
 800de2a:	3030      	adds	r0, #48	; 0x30
 800de2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de30:	f845 2b04 	str.w	r2, [r5], #4
 800de34:	4283      	cmp	r3, r0
 800de36:	d1f9      	bne.n	800de2c <lv_imgbtn_create+0x68>
        lv_obj_refresh_style(new_imgbtn);
 800de38:	4620      	mov	r0, r4
 800de3a:	f7f9 f883 	bl	8006f44 <lv_obj_refresh_style>
}
 800de3e:	4620      	mov	r0, r4
 800de40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de42:	bf00      	nop
 800de44:	20014ef4 	.word	0x20014ef4
 800de48:	20014ef0 	.word	0x20014ef0
 800de4c:	0800dd11 	.word	0x0800dd11
 800de50:	0800dd59 	.word	0x0800dd59

0800de54 <lv_imgbtn_set_src>:
{
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	4605      	mov	r5, r0
 800de58:	460c      	mov	r4, r1
 800de5a:	4616      	mov	r6, r2
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800de5c:	f7f9 f9c4 	bl	80071e8 <lv_obj_get_ext_attr>
    ext->img_src[state] = src;
 800de60:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800de64:	61c6      	str	r6, [r0, #28]
    refr_img(imgbtn);
 800de66:	4628      	mov	r0, r5
}
 800de68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_img(imgbtn);
 800de6c:	f7ff bf26 	b.w	800dcbc <refr_img>

0800de70 <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800de70:	4b01      	ldr	r3, [pc, #4]	; (800de78 <lv_theme_get_current+0x8>)
 800de72:	6818      	ldr	r0, [r3, #0]
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	20014ef8 	.word	0x20014ef8

0800de7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800de7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800deb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800de80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800de82:	e003      	b.n	800de8c <LoopCopyDataInit>

0800de84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800de84:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800de86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800de88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800de8a:	3104      	adds	r1, #4

0800de8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800de8c:	480b      	ldr	r0, [pc, #44]	; (800debc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800de8e:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800de90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800de92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800de94:	d3f6      	bcc.n	800de84 <CopyDataInit>
  ldr  r2, =_sbss
 800de96:	4a0b      	ldr	r2, [pc, #44]	; (800dec4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800de98:	e002      	b.n	800dea0 <LoopFillZerobss>

0800de9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800de9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800de9c:	f842 3b04 	str.w	r3, [r2], #4

0800dea0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dea0:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dea2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dea4:	d3f9      	bcc.n	800de9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800dea6:	f7f3 fbd7 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800deaa:	f000 f817 	bl	800dedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800deae:	f7f3 f869 	bl	8000f84 <main>
  bx  lr    
 800deb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800deb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800deb8:	080e7ad8 	.word	0x080e7ad8
  ldr  r0, =_sdata
 800debc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dec0:	20000750 	.word	0x20000750
  ldr  r2, =_sbss
 800dec4:	20000750 	.word	0x20000750
  ldr  r3, = _ebss
 800dec8:	20015c38 	.word	0x20015c38

0800decc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800decc:	e7fe      	b.n	800decc <ADC_IRQHandler>
	...

0800ded0 <__errno>:
 800ded0:	4b01      	ldr	r3, [pc, #4]	; (800ded8 <__errno+0x8>)
 800ded2:	6818      	ldr	r0, [r3, #0]
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	200000e0 	.word	0x200000e0

0800dedc <__libc_init_array>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	4e0d      	ldr	r6, [pc, #52]	; (800df14 <__libc_init_array+0x38>)
 800dee0:	4c0d      	ldr	r4, [pc, #52]	; (800df18 <__libc_init_array+0x3c>)
 800dee2:	1ba4      	subs	r4, r4, r6
 800dee4:	10a4      	asrs	r4, r4, #2
 800dee6:	2500      	movs	r5, #0
 800dee8:	42a5      	cmp	r5, r4
 800deea:	d109      	bne.n	800df00 <__libc_init_array+0x24>
 800deec:	4e0b      	ldr	r6, [pc, #44]	; (800df1c <__libc_init_array+0x40>)
 800deee:	4c0c      	ldr	r4, [pc, #48]	; (800df20 <__libc_init_array+0x44>)
 800def0:	f003 fd70 	bl	80119d4 <_init>
 800def4:	1ba4      	subs	r4, r4, r6
 800def6:	10a4      	asrs	r4, r4, #2
 800def8:	2500      	movs	r5, #0
 800defa:	42a5      	cmp	r5, r4
 800defc:	d105      	bne.n	800df0a <__libc_init_array+0x2e>
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800df04:	4798      	blx	r3
 800df06:	3501      	adds	r5, #1
 800df08:	e7ee      	b.n	800dee8 <__libc_init_array+0xc>
 800df0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800df0e:	4798      	blx	r3
 800df10:	3501      	adds	r5, #1
 800df12:	e7f2      	b.n	800defa <__libc_init_array+0x1e>
 800df14:	080e7ad0 	.word	0x080e7ad0
 800df18:	080e7ad0 	.word	0x080e7ad0
 800df1c:	080e7ad0 	.word	0x080e7ad0
 800df20:	080e7ad4 	.word	0x080e7ad4

0800df24 <malloc>:
 800df24:	4b02      	ldr	r3, [pc, #8]	; (800df30 <malloc+0xc>)
 800df26:	4601      	mov	r1, r0
 800df28:	6818      	ldr	r0, [r3, #0]
 800df2a:	f000 b80b 	b.w	800df44 <_malloc_r>
 800df2e:	bf00      	nop
 800df30:	200000e0 	.word	0x200000e0

0800df34 <free>:
 800df34:	4b02      	ldr	r3, [pc, #8]	; (800df40 <free+0xc>)
 800df36:	4601      	mov	r1, r0
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	f002 bba3 	b.w	8010684 <_free_r>
 800df3e:	bf00      	nop
 800df40:	200000e0 	.word	0x200000e0

0800df44 <_malloc_r>:
 800df44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	f101 040b 	add.w	r4, r1, #11
 800df4c:	2c16      	cmp	r4, #22
 800df4e:	4681      	mov	r9, r0
 800df50:	d907      	bls.n	800df62 <_malloc_r+0x1e>
 800df52:	f034 0407 	bics.w	r4, r4, #7
 800df56:	d505      	bpl.n	800df64 <_malloc_r+0x20>
 800df58:	230c      	movs	r3, #12
 800df5a:	f8c9 3000 	str.w	r3, [r9]
 800df5e:	2600      	movs	r6, #0
 800df60:	e131      	b.n	800e1c6 <_malloc_r+0x282>
 800df62:	2410      	movs	r4, #16
 800df64:	428c      	cmp	r4, r1
 800df66:	d3f7      	bcc.n	800df58 <_malloc_r+0x14>
 800df68:	4648      	mov	r0, r9
 800df6a:	f000 fa0d 	bl	800e388 <__malloc_lock>
 800df6e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800df72:	4d9c      	ldr	r5, [pc, #624]	; (800e1e4 <_malloc_r+0x2a0>)
 800df74:	d236      	bcs.n	800dfe4 <_malloc_r+0xa0>
 800df76:	f104 0208 	add.w	r2, r4, #8
 800df7a:	442a      	add	r2, r5
 800df7c:	f1a2 0108 	sub.w	r1, r2, #8
 800df80:	6856      	ldr	r6, [r2, #4]
 800df82:	428e      	cmp	r6, r1
 800df84:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800df88:	d102      	bne.n	800df90 <_malloc_r+0x4c>
 800df8a:	68d6      	ldr	r6, [r2, #12]
 800df8c:	42b2      	cmp	r2, r6
 800df8e:	d010      	beq.n	800dfb2 <_malloc_r+0x6e>
 800df90:	6873      	ldr	r3, [r6, #4]
 800df92:	68f2      	ldr	r2, [r6, #12]
 800df94:	68b1      	ldr	r1, [r6, #8]
 800df96:	f023 0303 	bic.w	r3, r3, #3
 800df9a:	60ca      	str	r2, [r1, #12]
 800df9c:	4433      	add	r3, r6
 800df9e:	6091      	str	r1, [r2, #8]
 800dfa0:	685a      	ldr	r2, [r3, #4]
 800dfa2:	f042 0201 	orr.w	r2, r2, #1
 800dfa6:	605a      	str	r2, [r3, #4]
 800dfa8:	4648      	mov	r0, r9
 800dfaa:	f000 f9f3 	bl	800e394 <__malloc_unlock>
 800dfae:	3608      	adds	r6, #8
 800dfb0:	e109      	b.n	800e1c6 <_malloc_r+0x282>
 800dfb2:	3302      	adds	r3, #2
 800dfb4:	4a8c      	ldr	r2, [pc, #560]	; (800e1e8 <_malloc_r+0x2a4>)
 800dfb6:	692e      	ldr	r6, [r5, #16]
 800dfb8:	4296      	cmp	r6, r2
 800dfba:	4611      	mov	r1, r2
 800dfbc:	d06d      	beq.n	800e09a <_malloc_r+0x156>
 800dfbe:	6870      	ldr	r0, [r6, #4]
 800dfc0:	f020 0003 	bic.w	r0, r0, #3
 800dfc4:	1b07      	subs	r7, r0, r4
 800dfc6:	2f0f      	cmp	r7, #15
 800dfc8:	dd47      	ble.n	800e05a <_malloc_r+0x116>
 800dfca:	1933      	adds	r3, r6, r4
 800dfcc:	f044 0401 	orr.w	r4, r4, #1
 800dfd0:	6074      	str	r4, [r6, #4]
 800dfd2:	616b      	str	r3, [r5, #20]
 800dfd4:	612b      	str	r3, [r5, #16]
 800dfd6:	60da      	str	r2, [r3, #12]
 800dfd8:	609a      	str	r2, [r3, #8]
 800dfda:	f047 0201 	orr.w	r2, r7, #1
 800dfde:	605a      	str	r2, [r3, #4]
 800dfe0:	5037      	str	r7, [r6, r0]
 800dfe2:	e7e1      	b.n	800dfa8 <_malloc_r+0x64>
 800dfe4:	0a63      	lsrs	r3, r4, #9
 800dfe6:	d02a      	beq.n	800e03e <_malloc_r+0xfa>
 800dfe8:	2b04      	cmp	r3, #4
 800dfea:	d812      	bhi.n	800e012 <_malloc_r+0xce>
 800dfec:	09a3      	lsrs	r3, r4, #6
 800dfee:	3338      	adds	r3, #56	; 0x38
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800dff6:	f1a2 0008 	sub.w	r0, r2, #8
 800dffa:	6856      	ldr	r6, [r2, #4]
 800dffc:	4286      	cmp	r6, r0
 800dffe:	d006      	beq.n	800e00e <_malloc_r+0xca>
 800e000:	6872      	ldr	r2, [r6, #4]
 800e002:	f022 0203 	bic.w	r2, r2, #3
 800e006:	1b11      	subs	r1, r2, r4
 800e008:	290f      	cmp	r1, #15
 800e00a:	dd1c      	ble.n	800e046 <_malloc_r+0x102>
 800e00c:	3b01      	subs	r3, #1
 800e00e:	3301      	adds	r3, #1
 800e010:	e7d0      	b.n	800dfb4 <_malloc_r+0x70>
 800e012:	2b14      	cmp	r3, #20
 800e014:	d801      	bhi.n	800e01a <_malloc_r+0xd6>
 800e016:	335b      	adds	r3, #91	; 0x5b
 800e018:	e7ea      	b.n	800dff0 <_malloc_r+0xac>
 800e01a:	2b54      	cmp	r3, #84	; 0x54
 800e01c:	d802      	bhi.n	800e024 <_malloc_r+0xe0>
 800e01e:	0b23      	lsrs	r3, r4, #12
 800e020:	336e      	adds	r3, #110	; 0x6e
 800e022:	e7e5      	b.n	800dff0 <_malloc_r+0xac>
 800e024:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800e028:	d802      	bhi.n	800e030 <_malloc_r+0xec>
 800e02a:	0be3      	lsrs	r3, r4, #15
 800e02c:	3377      	adds	r3, #119	; 0x77
 800e02e:	e7df      	b.n	800dff0 <_malloc_r+0xac>
 800e030:	f240 5254 	movw	r2, #1364	; 0x554
 800e034:	4293      	cmp	r3, r2
 800e036:	d804      	bhi.n	800e042 <_malloc_r+0xfe>
 800e038:	0ca3      	lsrs	r3, r4, #18
 800e03a:	337c      	adds	r3, #124	; 0x7c
 800e03c:	e7d8      	b.n	800dff0 <_malloc_r+0xac>
 800e03e:	233f      	movs	r3, #63	; 0x3f
 800e040:	e7d6      	b.n	800dff0 <_malloc_r+0xac>
 800e042:	237e      	movs	r3, #126	; 0x7e
 800e044:	e7d4      	b.n	800dff0 <_malloc_r+0xac>
 800e046:	2900      	cmp	r1, #0
 800e048:	68f1      	ldr	r1, [r6, #12]
 800e04a:	db04      	blt.n	800e056 <_malloc_r+0x112>
 800e04c:	68b3      	ldr	r3, [r6, #8]
 800e04e:	60d9      	str	r1, [r3, #12]
 800e050:	608b      	str	r3, [r1, #8]
 800e052:	18b3      	adds	r3, r6, r2
 800e054:	e7a4      	b.n	800dfa0 <_malloc_r+0x5c>
 800e056:	460e      	mov	r6, r1
 800e058:	e7d0      	b.n	800dffc <_malloc_r+0xb8>
 800e05a:	2f00      	cmp	r7, #0
 800e05c:	616a      	str	r2, [r5, #20]
 800e05e:	612a      	str	r2, [r5, #16]
 800e060:	db05      	blt.n	800e06e <_malloc_r+0x12a>
 800e062:	4430      	add	r0, r6
 800e064:	6843      	ldr	r3, [r0, #4]
 800e066:	f043 0301 	orr.w	r3, r3, #1
 800e06a:	6043      	str	r3, [r0, #4]
 800e06c:	e79c      	b.n	800dfa8 <_malloc_r+0x64>
 800e06e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e072:	d244      	bcs.n	800e0fe <_malloc_r+0x1ba>
 800e074:	08c0      	lsrs	r0, r0, #3
 800e076:	1087      	asrs	r7, r0, #2
 800e078:	2201      	movs	r2, #1
 800e07a:	fa02 f707 	lsl.w	r7, r2, r7
 800e07e:	686a      	ldr	r2, [r5, #4]
 800e080:	3001      	adds	r0, #1
 800e082:	433a      	orrs	r2, r7
 800e084:	606a      	str	r2, [r5, #4]
 800e086:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800e08a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800e08e:	60b7      	str	r7, [r6, #8]
 800e090:	3a08      	subs	r2, #8
 800e092:	60f2      	str	r2, [r6, #12]
 800e094:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800e098:	60fe      	str	r6, [r7, #12]
 800e09a:	2001      	movs	r0, #1
 800e09c:	109a      	asrs	r2, r3, #2
 800e09e:	fa00 f202 	lsl.w	r2, r0, r2
 800e0a2:	6868      	ldr	r0, [r5, #4]
 800e0a4:	4282      	cmp	r2, r0
 800e0a6:	f200 80a1 	bhi.w	800e1ec <_malloc_r+0x2a8>
 800e0aa:	4202      	tst	r2, r0
 800e0ac:	d106      	bne.n	800e0bc <_malloc_r+0x178>
 800e0ae:	f023 0303 	bic.w	r3, r3, #3
 800e0b2:	0052      	lsls	r2, r2, #1
 800e0b4:	4202      	tst	r2, r0
 800e0b6:	f103 0304 	add.w	r3, r3, #4
 800e0ba:	d0fa      	beq.n	800e0b2 <_malloc_r+0x16e>
 800e0bc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800e0c0:	46e0      	mov	r8, ip
 800e0c2:	469e      	mov	lr, r3
 800e0c4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e0c8:	4546      	cmp	r6, r8
 800e0ca:	d153      	bne.n	800e174 <_malloc_r+0x230>
 800e0cc:	f10e 0e01 	add.w	lr, lr, #1
 800e0d0:	f01e 0f03 	tst.w	lr, #3
 800e0d4:	f108 0808 	add.w	r8, r8, #8
 800e0d8:	d1f4      	bne.n	800e0c4 <_malloc_r+0x180>
 800e0da:	0798      	lsls	r0, r3, #30
 800e0dc:	d179      	bne.n	800e1d2 <_malloc_r+0x28e>
 800e0de:	686b      	ldr	r3, [r5, #4]
 800e0e0:	ea23 0302 	bic.w	r3, r3, r2
 800e0e4:	606b      	str	r3, [r5, #4]
 800e0e6:	6868      	ldr	r0, [r5, #4]
 800e0e8:	0052      	lsls	r2, r2, #1
 800e0ea:	4282      	cmp	r2, r0
 800e0ec:	d87e      	bhi.n	800e1ec <_malloc_r+0x2a8>
 800e0ee:	2a00      	cmp	r2, #0
 800e0f0:	d07c      	beq.n	800e1ec <_malloc_r+0x2a8>
 800e0f2:	4673      	mov	r3, lr
 800e0f4:	4202      	tst	r2, r0
 800e0f6:	d1e1      	bne.n	800e0bc <_malloc_r+0x178>
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	0052      	lsls	r2, r2, #1
 800e0fc:	e7fa      	b.n	800e0f4 <_malloc_r+0x1b0>
 800e0fe:	0a42      	lsrs	r2, r0, #9
 800e100:	2a04      	cmp	r2, #4
 800e102:	d815      	bhi.n	800e130 <_malloc_r+0x1ec>
 800e104:	0982      	lsrs	r2, r0, #6
 800e106:	3238      	adds	r2, #56	; 0x38
 800e108:	1c57      	adds	r7, r2, #1
 800e10a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800e10e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800e112:	45be      	cmp	lr, r7
 800e114:	d126      	bne.n	800e164 <_malloc_r+0x220>
 800e116:	2001      	movs	r0, #1
 800e118:	1092      	asrs	r2, r2, #2
 800e11a:	fa00 f202 	lsl.w	r2, r0, r2
 800e11e:	6868      	ldr	r0, [r5, #4]
 800e120:	4310      	orrs	r0, r2
 800e122:	6068      	str	r0, [r5, #4]
 800e124:	f8c6 e00c 	str.w	lr, [r6, #12]
 800e128:	60b7      	str	r7, [r6, #8]
 800e12a:	f8ce 6008 	str.w	r6, [lr, #8]
 800e12e:	e7b3      	b.n	800e098 <_malloc_r+0x154>
 800e130:	2a14      	cmp	r2, #20
 800e132:	d801      	bhi.n	800e138 <_malloc_r+0x1f4>
 800e134:	325b      	adds	r2, #91	; 0x5b
 800e136:	e7e7      	b.n	800e108 <_malloc_r+0x1c4>
 800e138:	2a54      	cmp	r2, #84	; 0x54
 800e13a:	d802      	bhi.n	800e142 <_malloc_r+0x1fe>
 800e13c:	0b02      	lsrs	r2, r0, #12
 800e13e:	326e      	adds	r2, #110	; 0x6e
 800e140:	e7e2      	b.n	800e108 <_malloc_r+0x1c4>
 800e142:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800e146:	d802      	bhi.n	800e14e <_malloc_r+0x20a>
 800e148:	0bc2      	lsrs	r2, r0, #15
 800e14a:	3277      	adds	r2, #119	; 0x77
 800e14c:	e7dc      	b.n	800e108 <_malloc_r+0x1c4>
 800e14e:	f240 5754 	movw	r7, #1364	; 0x554
 800e152:	42ba      	cmp	r2, r7
 800e154:	bf9a      	itte	ls
 800e156:	0c82      	lsrls	r2, r0, #18
 800e158:	327c      	addls	r2, #124	; 0x7c
 800e15a:	227e      	movhi	r2, #126	; 0x7e
 800e15c:	e7d4      	b.n	800e108 <_malloc_r+0x1c4>
 800e15e:	68bf      	ldr	r7, [r7, #8]
 800e160:	45be      	cmp	lr, r7
 800e162:	d004      	beq.n	800e16e <_malloc_r+0x22a>
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	f022 0203 	bic.w	r2, r2, #3
 800e16a:	4290      	cmp	r0, r2
 800e16c:	d3f7      	bcc.n	800e15e <_malloc_r+0x21a>
 800e16e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800e172:	e7d7      	b.n	800e124 <_malloc_r+0x1e0>
 800e174:	6870      	ldr	r0, [r6, #4]
 800e176:	68f7      	ldr	r7, [r6, #12]
 800e178:	f020 0003 	bic.w	r0, r0, #3
 800e17c:	eba0 0a04 	sub.w	sl, r0, r4
 800e180:	f1ba 0f0f 	cmp.w	sl, #15
 800e184:	dd10      	ble.n	800e1a8 <_malloc_r+0x264>
 800e186:	68b2      	ldr	r2, [r6, #8]
 800e188:	1933      	adds	r3, r6, r4
 800e18a:	f044 0401 	orr.w	r4, r4, #1
 800e18e:	6074      	str	r4, [r6, #4]
 800e190:	60d7      	str	r7, [r2, #12]
 800e192:	60ba      	str	r2, [r7, #8]
 800e194:	f04a 0201 	orr.w	r2, sl, #1
 800e198:	616b      	str	r3, [r5, #20]
 800e19a:	612b      	str	r3, [r5, #16]
 800e19c:	60d9      	str	r1, [r3, #12]
 800e19e:	6099      	str	r1, [r3, #8]
 800e1a0:	605a      	str	r2, [r3, #4]
 800e1a2:	f846 a000 	str.w	sl, [r6, r0]
 800e1a6:	e6ff      	b.n	800dfa8 <_malloc_r+0x64>
 800e1a8:	f1ba 0f00 	cmp.w	sl, #0
 800e1ac:	db0f      	blt.n	800e1ce <_malloc_r+0x28a>
 800e1ae:	4430      	add	r0, r6
 800e1b0:	6843      	ldr	r3, [r0, #4]
 800e1b2:	f043 0301 	orr.w	r3, r3, #1
 800e1b6:	6043      	str	r3, [r0, #4]
 800e1b8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800e1bc:	4648      	mov	r0, r9
 800e1be:	60df      	str	r7, [r3, #12]
 800e1c0:	60bb      	str	r3, [r7, #8]
 800e1c2:	f000 f8e7 	bl	800e394 <__malloc_unlock>
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	b003      	add	sp, #12
 800e1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ce:	463e      	mov	r6, r7
 800e1d0:	e77a      	b.n	800e0c8 <_malloc_r+0x184>
 800e1d2:	f85c 0908 	ldr.w	r0, [ip], #-8
 800e1d6:	4584      	cmp	ip, r0
 800e1d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e1dc:	f43f af7d 	beq.w	800e0da <_malloc_r+0x196>
 800e1e0:	e781      	b.n	800e0e6 <_malloc_r+0x1a2>
 800e1e2:	bf00      	nop
 800e1e4:	200001d4 	.word	0x200001d4
 800e1e8:	200001dc 	.word	0x200001dc
 800e1ec:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800e1f0:	f8db 6004 	ldr.w	r6, [fp, #4]
 800e1f4:	f026 0603 	bic.w	r6, r6, #3
 800e1f8:	42b4      	cmp	r4, r6
 800e1fa:	d803      	bhi.n	800e204 <_malloc_r+0x2c0>
 800e1fc:	1b33      	subs	r3, r6, r4
 800e1fe:	2b0f      	cmp	r3, #15
 800e200:	f300 8096 	bgt.w	800e330 <_malloc_r+0x3ec>
 800e204:	4a4f      	ldr	r2, [pc, #316]	; (800e344 <_malloc_r+0x400>)
 800e206:	6817      	ldr	r7, [r2, #0]
 800e208:	4a4f      	ldr	r2, [pc, #316]	; (800e348 <_malloc_r+0x404>)
 800e20a:	6811      	ldr	r1, [r2, #0]
 800e20c:	3710      	adds	r7, #16
 800e20e:	3101      	adds	r1, #1
 800e210:	eb0b 0306 	add.w	r3, fp, r6
 800e214:	4427      	add	r7, r4
 800e216:	d005      	beq.n	800e224 <_malloc_r+0x2e0>
 800e218:	494c      	ldr	r1, [pc, #304]	; (800e34c <_malloc_r+0x408>)
 800e21a:	3901      	subs	r1, #1
 800e21c:	440f      	add	r7, r1
 800e21e:	3101      	adds	r1, #1
 800e220:	4249      	negs	r1, r1
 800e222:	400f      	ands	r7, r1
 800e224:	4639      	mov	r1, r7
 800e226:	4648      	mov	r0, r9
 800e228:	9201      	str	r2, [sp, #4]
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	f000 f8d0 	bl	800e3d0 <_sbrk_r>
 800e230:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e234:	4680      	mov	r8, r0
 800e236:	d056      	beq.n	800e2e6 <_malloc_r+0x3a2>
 800e238:	9b00      	ldr	r3, [sp, #0]
 800e23a:	9a01      	ldr	r2, [sp, #4]
 800e23c:	4283      	cmp	r3, r0
 800e23e:	d901      	bls.n	800e244 <_malloc_r+0x300>
 800e240:	45ab      	cmp	fp, r5
 800e242:	d150      	bne.n	800e2e6 <_malloc_r+0x3a2>
 800e244:	4842      	ldr	r0, [pc, #264]	; (800e350 <_malloc_r+0x40c>)
 800e246:	6801      	ldr	r1, [r0, #0]
 800e248:	4543      	cmp	r3, r8
 800e24a:	eb07 0e01 	add.w	lr, r7, r1
 800e24e:	f8c0 e000 	str.w	lr, [r0]
 800e252:	4940      	ldr	r1, [pc, #256]	; (800e354 <_malloc_r+0x410>)
 800e254:	4682      	mov	sl, r0
 800e256:	d113      	bne.n	800e280 <_malloc_r+0x33c>
 800e258:	420b      	tst	r3, r1
 800e25a:	d111      	bne.n	800e280 <_malloc_r+0x33c>
 800e25c:	68ab      	ldr	r3, [r5, #8]
 800e25e:	443e      	add	r6, r7
 800e260:	f046 0601 	orr.w	r6, r6, #1
 800e264:	605e      	str	r6, [r3, #4]
 800e266:	4a3c      	ldr	r2, [pc, #240]	; (800e358 <_malloc_r+0x414>)
 800e268:	f8da 3000 	ldr.w	r3, [sl]
 800e26c:	6811      	ldr	r1, [r2, #0]
 800e26e:	428b      	cmp	r3, r1
 800e270:	bf88      	it	hi
 800e272:	6013      	strhi	r3, [r2, #0]
 800e274:	4a39      	ldr	r2, [pc, #228]	; (800e35c <_malloc_r+0x418>)
 800e276:	6811      	ldr	r1, [r2, #0]
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf88      	it	hi
 800e27c:	6013      	strhi	r3, [r2, #0]
 800e27e:	e032      	b.n	800e2e6 <_malloc_r+0x3a2>
 800e280:	6810      	ldr	r0, [r2, #0]
 800e282:	3001      	adds	r0, #1
 800e284:	bf1b      	ittet	ne
 800e286:	eba8 0303 	subne.w	r3, r8, r3
 800e28a:	4473      	addne	r3, lr
 800e28c:	f8c2 8000 	streq.w	r8, [r2]
 800e290:	f8ca 3000 	strne.w	r3, [sl]
 800e294:	f018 0007 	ands.w	r0, r8, #7
 800e298:	bf1c      	itt	ne
 800e29a:	f1c0 0008 	rsbne	r0, r0, #8
 800e29e:	4480      	addne	r8, r0
 800e2a0:	4b2a      	ldr	r3, [pc, #168]	; (800e34c <_malloc_r+0x408>)
 800e2a2:	4447      	add	r7, r8
 800e2a4:	4418      	add	r0, r3
 800e2a6:	400f      	ands	r7, r1
 800e2a8:	1bc7      	subs	r7, r0, r7
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	4648      	mov	r0, r9
 800e2ae:	f000 f88f 	bl	800e3d0 <_sbrk_r>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	bf08      	it	eq
 800e2b6:	4640      	moveq	r0, r8
 800e2b8:	f8da 3000 	ldr.w	r3, [sl]
 800e2bc:	f8c5 8008 	str.w	r8, [r5, #8]
 800e2c0:	bf08      	it	eq
 800e2c2:	2700      	moveq	r7, #0
 800e2c4:	eba0 0008 	sub.w	r0, r0, r8
 800e2c8:	443b      	add	r3, r7
 800e2ca:	4407      	add	r7, r0
 800e2cc:	f047 0701 	orr.w	r7, r7, #1
 800e2d0:	45ab      	cmp	fp, r5
 800e2d2:	f8ca 3000 	str.w	r3, [sl]
 800e2d6:	f8c8 7004 	str.w	r7, [r8, #4]
 800e2da:	d0c4      	beq.n	800e266 <_malloc_r+0x322>
 800e2dc:	2e0f      	cmp	r6, #15
 800e2de:	d810      	bhi.n	800e302 <_malloc_r+0x3be>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f8c8 3004 	str.w	r3, [r8, #4]
 800e2e6:	68ab      	ldr	r3, [r5, #8]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	f022 0203 	bic.w	r2, r2, #3
 800e2ee:	4294      	cmp	r4, r2
 800e2f0:	eba2 0304 	sub.w	r3, r2, r4
 800e2f4:	d801      	bhi.n	800e2fa <_malloc_r+0x3b6>
 800e2f6:	2b0f      	cmp	r3, #15
 800e2f8:	dc1a      	bgt.n	800e330 <_malloc_r+0x3ec>
 800e2fa:	4648      	mov	r0, r9
 800e2fc:	f000 f84a 	bl	800e394 <__malloc_unlock>
 800e300:	e62d      	b.n	800df5e <_malloc_r+0x1a>
 800e302:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e306:	3e0c      	subs	r6, #12
 800e308:	f026 0607 	bic.w	r6, r6, #7
 800e30c:	f003 0301 	and.w	r3, r3, #1
 800e310:	4333      	orrs	r3, r6
 800e312:	f8cb 3004 	str.w	r3, [fp, #4]
 800e316:	eb0b 0306 	add.w	r3, fp, r6
 800e31a:	2205      	movs	r2, #5
 800e31c:	2e0f      	cmp	r6, #15
 800e31e:	605a      	str	r2, [r3, #4]
 800e320:	609a      	str	r2, [r3, #8]
 800e322:	d9a0      	bls.n	800e266 <_malloc_r+0x322>
 800e324:	f10b 0108 	add.w	r1, fp, #8
 800e328:	4648      	mov	r0, r9
 800e32a:	f002 f9ab 	bl	8010684 <_free_r>
 800e32e:	e79a      	b.n	800e266 <_malloc_r+0x322>
 800e330:	68ae      	ldr	r6, [r5, #8]
 800e332:	f044 0201 	orr.w	r2, r4, #1
 800e336:	4434      	add	r4, r6
 800e338:	f043 0301 	orr.w	r3, r3, #1
 800e33c:	6072      	str	r2, [r6, #4]
 800e33e:	60ac      	str	r4, [r5, #8]
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	e631      	b.n	800dfa8 <_malloc_r+0x64>
 800e344:	20014f2c 	.word	0x20014f2c
 800e348:	200005dc 	.word	0x200005dc
 800e34c:	00000080 	.word	0x00000080
 800e350:	20014efc 	.word	0x20014efc
 800e354:	0000007f 	.word	0x0000007f
 800e358:	20014f24 	.word	0x20014f24
 800e35c:	20014f28 	.word	0x20014f28

0800e360 <memcpy>:
 800e360:	b510      	push	{r4, lr}
 800e362:	1e43      	subs	r3, r0, #1
 800e364:	440a      	add	r2, r1
 800e366:	4291      	cmp	r1, r2
 800e368:	d100      	bne.n	800e36c <memcpy+0xc>
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e374:	e7f7      	b.n	800e366 <memcpy+0x6>

0800e376 <memset>:
 800e376:	4402      	add	r2, r0
 800e378:	4603      	mov	r3, r0
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d100      	bne.n	800e380 <memset+0xa>
 800e37e:	4770      	bx	lr
 800e380:	f803 1b01 	strb.w	r1, [r3], #1
 800e384:	e7f9      	b.n	800e37a <memset+0x4>
	...

0800e388 <__malloc_lock>:
 800e388:	4801      	ldr	r0, [pc, #4]	; (800e390 <__malloc_lock+0x8>)
 800e38a:	f002 ba65 	b.w	8010858 <__retarget_lock_acquire_recursive>
 800e38e:	bf00      	nop
 800e390:	20015c2c 	.word	0x20015c2c

0800e394 <__malloc_unlock>:
 800e394:	4801      	ldr	r0, [pc, #4]	; (800e39c <__malloc_unlock+0x8>)
 800e396:	f002 ba60 	b.w	801085a <__retarget_lock_release_recursive>
 800e39a:	bf00      	nop
 800e39c:	20015c2c 	.word	0x20015c2c

0800e3a0 <printf>:
 800e3a0:	b40f      	push	{r0, r1, r2, r3}
 800e3a2:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <printf+0x2c>)
 800e3a4:	b513      	push	{r0, r1, r4, lr}
 800e3a6:	681c      	ldr	r4, [r3, #0]
 800e3a8:	b124      	cbz	r4, 800e3b4 <printf+0x14>
 800e3aa:	69a3      	ldr	r3, [r4, #24]
 800e3ac:	b913      	cbnz	r3, 800e3b4 <printf+0x14>
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f002 f892 	bl	80104d8 <__sinit>
 800e3b4:	ab05      	add	r3, sp, #20
 800e3b6:	9a04      	ldr	r2, [sp, #16]
 800e3b8:	68a1      	ldr	r1, [r4, #8]
 800e3ba:	9301      	str	r3, [sp, #4]
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 f81f 	bl	800e400 <_vfprintf_r>
 800e3c2:	b002      	add	sp, #8
 800e3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c8:	b004      	add	sp, #16
 800e3ca:	4770      	bx	lr
 800e3cc:	200000e0 	.word	0x200000e0

0800e3d0 <_sbrk_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4c06      	ldr	r4, [pc, #24]	; (800e3ec <_sbrk_r+0x1c>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	6023      	str	r3, [r4, #0]
 800e3dc:	f7f3 f916 	bl	800160c <_sbrk>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_sbrk_r+0x1a>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_sbrk_r+0x1a>
 800e3e8:	602b      	str	r3, [r5, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20015c34 	.word	0x20015c34

0800e3f0 <strcpy>:
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3f6:	f803 2b01 	strb.w	r2, [r3], #1
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d1f9      	bne.n	800e3f2 <strcpy+0x2>
 800e3fe:	4770      	bx	lr

0800e400 <_vfprintf_r>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	b0bd      	sub	sp, #244	; 0xf4
 800e406:	4688      	mov	r8, r1
 800e408:	4615      	mov	r5, r2
 800e40a:	461c      	mov	r4, r3
 800e40c:	461f      	mov	r7, r3
 800e40e:	4683      	mov	fp, r0
 800e410:	f002 fa12 	bl	8010838 <_localeconv_r>
 800e414:	6803      	ldr	r3, [r0, #0]
 800e416:	930d      	str	r3, [sp, #52]	; 0x34
 800e418:	4618      	mov	r0, r3
 800e41a:	f7f1 fee3 	bl	80001e4 <strlen>
 800e41e:	9009      	str	r0, [sp, #36]	; 0x24
 800e420:	f1bb 0f00 	cmp.w	fp, #0
 800e424:	d005      	beq.n	800e432 <_vfprintf_r+0x32>
 800e426:	f8db 3018 	ldr.w	r3, [fp, #24]
 800e42a:	b913      	cbnz	r3, 800e432 <_vfprintf_r+0x32>
 800e42c:	4658      	mov	r0, fp
 800e42e:	f002 f853 	bl	80104d8 <__sinit>
 800e432:	4b99      	ldr	r3, [pc, #612]	; (800e698 <_vfprintf_r+0x298>)
 800e434:	4598      	cmp	r8, r3
 800e436:	d137      	bne.n	800e4a8 <_vfprintf_r+0xa8>
 800e438:	f8db 8004 	ldr.w	r8, [fp, #4]
 800e43c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800e440:	07d8      	lsls	r0, r3, #31
 800e442:	d407      	bmi.n	800e454 <_vfprintf_r+0x54>
 800e444:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e448:	0599      	lsls	r1, r3, #22
 800e44a:	d403      	bmi.n	800e454 <_vfprintf_r+0x54>
 800e44c:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800e450:	f002 fa02 	bl	8010858 <__retarget_lock_acquire_recursive>
 800e454:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800e458:	049a      	lsls	r2, r3, #18
 800e45a:	d409      	bmi.n	800e470 <_vfprintf_r+0x70>
 800e45c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e460:	f8a8 300c 	strh.w	r3, [r8, #12]
 800e464:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800e468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e46c:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 800e470:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e474:	071e      	lsls	r6, r3, #28
 800e476:	d502      	bpl.n	800e47e <_vfprintf_r+0x7e>
 800e478:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e47c:	bb03      	cbnz	r3, 800e4c0 <_vfprintf_r+0xc0>
 800e47e:	4641      	mov	r1, r8
 800e480:	4658      	mov	r0, fp
 800e482:	f001 f839 	bl	800f4f8 <__swsetup_r>
 800e486:	b1d8      	cbz	r0, 800e4c0 <_vfprintf_r+0xc0>
 800e488:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800e48c:	07dd      	lsls	r5, r3, #31
 800e48e:	d407      	bmi.n	800e4a0 <_vfprintf_r+0xa0>
 800e490:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e494:	059c      	lsls	r4, r3, #22
 800e496:	d403      	bmi.n	800e4a0 <_vfprintf_r+0xa0>
 800e498:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800e49c:	f002 f9dd 	bl	801085a <__retarget_lock_release_recursive>
 800e4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4a4:	930a      	str	r3, [sp, #40]	; 0x28
 800e4a6:	e026      	b.n	800e4f6 <_vfprintf_r+0xf6>
 800e4a8:	4b7c      	ldr	r3, [pc, #496]	; (800e69c <_vfprintf_r+0x29c>)
 800e4aa:	4598      	cmp	r8, r3
 800e4ac:	d102      	bne.n	800e4b4 <_vfprintf_r+0xb4>
 800e4ae:	f8db 8008 	ldr.w	r8, [fp, #8]
 800e4b2:	e7c3      	b.n	800e43c <_vfprintf_r+0x3c>
 800e4b4:	4b7a      	ldr	r3, [pc, #488]	; (800e6a0 <_vfprintf_r+0x2a0>)
 800e4b6:	4598      	cmp	r8, r3
 800e4b8:	bf08      	it	eq
 800e4ba:	f8db 800c 	ldreq.w	r8, [fp, #12]
 800e4be:	e7bd      	b.n	800e43c <_vfprintf_r+0x3c>
 800e4c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e4c4:	f003 021a 	and.w	r2, r3, #26
 800e4c8:	2a0a      	cmp	r2, #10
 800e4ca:	d118      	bne.n	800e4fe <_vfprintf_r+0xfe>
 800e4cc:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	db14      	blt.n	800e4fe <_vfprintf_r+0xfe>
 800e4d4:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800e4d8:	07d0      	lsls	r0, r2, #31
 800e4da:	d405      	bmi.n	800e4e8 <_vfprintf_r+0xe8>
 800e4dc:	0599      	lsls	r1, r3, #22
 800e4de:	d403      	bmi.n	800e4e8 <_vfprintf_r+0xe8>
 800e4e0:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800e4e4:	f002 f9b9 	bl	801085a <__retarget_lock_release_recursive>
 800e4e8:	4623      	mov	r3, r4
 800e4ea:	462a      	mov	r2, r5
 800e4ec:	4641      	mov	r1, r8
 800e4ee:	4658      	mov	r0, fp
 800e4f0:	f000 ffc2 	bl	800f478 <__sbprintf>
 800e4f4:	900a      	str	r0, [sp, #40]	; 0x28
 800e4f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4f8:	b03d      	add	sp, #244	; 0xf4
 800e4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fe:	ed9f 7b64 	vldr	d7, [pc, #400]	; 800e690 <_vfprintf_r+0x290>
 800e502:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e506:	2300      	movs	r3, #0
 800e508:	ac2c      	add	r4, sp, #176	; 0xb0
 800e50a:	941f      	str	r4, [sp, #124]	; 0x7c
 800e50c:	9321      	str	r3, [sp, #132]	; 0x84
 800e50e:	9320      	str	r3, [sp, #128]	; 0x80
 800e510:	9505      	str	r5, [sp, #20]
 800e512:	9303      	str	r3, [sp, #12]
 800e514:	9311      	str	r3, [sp, #68]	; 0x44
 800e516:	9310      	str	r3, [sp, #64]	; 0x40
 800e518:	930a      	str	r3, [sp, #40]	; 0x28
 800e51a:	9d05      	ldr	r5, [sp, #20]
 800e51c:	462b      	mov	r3, r5
 800e51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e522:	b112      	cbz	r2, 800e52a <_vfprintf_r+0x12a>
 800e524:	2a25      	cmp	r2, #37	; 0x25
 800e526:	f040 8083 	bne.w	800e630 <_vfprintf_r+0x230>
 800e52a:	9b05      	ldr	r3, [sp, #20]
 800e52c:	1aee      	subs	r6, r5, r3
 800e52e:	d00d      	beq.n	800e54c <_vfprintf_r+0x14c>
 800e530:	e884 0048 	stmia.w	r4, {r3, r6}
 800e534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e536:	4433      	add	r3, r6
 800e538:	9321      	str	r3, [sp, #132]	; 0x84
 800e53a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e53c:	3301      	adds	r3, #1
 800e53e:	2b07      	cmp	r3, #7
 800e540:	9320      	str	r3, [sp, #128]	; 0x80
 800e542:	dc77      	bgt.n	800e634 <_vfprintf_r+0x234>
 800e544:	3408      	adds	r4, #8
 800e546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e548:	4433      	add	r3, r6
 800e54a:	930a      	str	r3, [sp, #40]	; 0x28
 800e54c:	782b      	ldrb	r3, [r5, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8739 	beq.w	800f3c6 <_vfprintf_r+0xfc6>
 800e554:	2300      	movs	r3, #0
 800e556:	1c69      	adds	r1, r5, #1
 800e558:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e55c:	461a      	mov	r2, r3
 800e55e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e562:	930b      	str	r3, [sp, #44]	; 0x2c
 800e564:	461d      	mov	r5, r3
 800e566:	200a      	movs	r0, #10
 800e568:	1c4e      	adds	r6, r1, #1
 800e56a:	7809      	ldrb	r1, [r1, #0]
 800e56c:	9605      	str	r6, [sp, #20]
 800e56e:	9102      	str	r1, [sp, #8]
 800e570:	9902      	ldr	r1, [sp, #8]
 800e572:	3920      	subs	r1, #32
 800e574:	2958      	cmp	r1, #88	; 0x58
 800e576:	f200 841d 	bhi.w	800edb4 <_vfprintf_r+0x9b4>
 800e57a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e57e:	00b3      	.short	0x00b3
 800e580:	041b041b 	.word	0x041b041b
 800e584:	041b00b8 	.word	0x041b00b8
 800e588:	041b041b 	.word	0x041b041b
 800e58c:	041b041b 	.word	0x041b041b
 800e590:	00bb041b 	.word	0x00bb041b
 800e594:	041b0065 	.word	0x041b0065
 800e598:	00c700c4 	.word	0x00c700c4
 800e59c:	00e4041b 	.word	0x00e4041b
 800e5a0:	00e700e7 	.word	0x00e700e7
 800e5a4:	00e700e7 	.word	0x00e700e7
 800e5a8:	00e700e7 	.word	0x00e700e7
 800e5ac:	00e700e7 	.word	0x00e700e7
 800e5b0:	041b00e7 	.word	0x041b00e7
 800e5b4:	041b041b 	.word	0x041b041b
 800e5b8:	041b041b 	.word	0x041b041b
 800e5bc:	041b041b 	.word	0x041b041b
 800e5c0:	041b041b 	.word	0x041b041b
 800e5c4:	011b041b 	.word	0x011b041b
 800e5c8:	041b0131 	.word	0x041b0131
 800e5cc:	041b0131 	.word	0x041b0131
 800e5d0:	041b041b 	.word	0x041b041b
 800e5d4:	00fa041b 	.word	0x00fa041b
 800e5d8:	041b041b 	.word	0x041b041b
 800e5dc:	041b0346 	.word	0x041b0346
 800e5e0:	041b041b 	.word	0x041b041b
 800e5e4:	041b041b 	.word	0x041b041b
 800e5e8:	041b03ad 	.word	0x041b03ad
 800e5ec:	0093041b 	.word	0x0093041b
 800e5f0:	041b041b 	.word	0x041b041b
 800e5f4:	041b041b 	.word	0x041b041b
 800e5f8:	041b041b 	.word	0x041b041b
 800e5fc:	041b041b 	.word	0x041b041b
 800e600:	041b041b 	.word	0x041b041b
 800e604:	006b010d 	.word	0x006b010d
 800e608:	01310131 	.word	0x01310131
 800e60c:	00fd0131 	.word	0x00fd0131
 800e610:	041b006b 	.word	0x041b006b
 800e614:	0100041b 	.word	0x0100041b
 800e618:	0328041b 	.word	0x0328041b
 800e61c:	037c0348 	.word	0x037c0348
 800e620:	041b0107 	.word	0x041b0107
 800e624:	041b038d 	.word	0x041b038d
 800e628:	041b03af 	.word	0x041b03af
 800e62c:	03c7041b 	.word	0x03c7041b
 800e630:	461d      	mov	r5, r3
 800e632:	e773      	b.n	800e51c <_vfprintf_r+0x11c>
 800e634:	aa1f      	add	r2, sp, #124	; 0x7c
 800e636:	4641      	mov	r1, r8
 800e638:	4658      	mov	r0, fp
 800e63a:	f002 fc8e 	bl	8010f5a <__sprint_r>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f040 8699 	bne.w	800f376 <_vfprintf_r+0xf76>
 800e644:	ac2c      	add	r4, sp, #176	; 0xb0
 800e646:	e77e      	b.n	800e546 <_vfprintf_r+0x146>
 800e648:	2301      	movs	r3, #1
 800e64a:	222b      	movs	r2, #43	; 0x2b
 800e64c:	9905      	ldr	r1, [sp, #20]
 800e64e:	e78b      	b.n	800e568 <_vfprintf_r+0x168>
 800e650:	460f      	mov	r7, r1
 800e652:	e7fb      	b.n	800e64c <_vfprintf_r+0x24c>
 800e654:	b10b      	cbz	r3, 800e65a <_vfprintf_r+0x25a>
 800e656:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e65a:	06aa      	lsls	r2, r5, #26
 800e65c:	f140 80b0 	bpl.w	800e7c0 <_vfprintf_r+0x3c0>
 800e660:	3707      	adds	r7, #7
 800e662:	f027 0707 	bic.w	r7, r7, #7
 800e666:	f107 0308 	add.w	r3, r7, #8
 800e66a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e66e:	9304      	str	r3, [sp, #16]
 800e670:	2e00      	cmp	r6, #0
 800e672:	f177 0300 	sbcs.w	r3, r7, #0
 800e676:	da06      	bge.n	800e686 <_vfprintf_r+0x286>
 800e678:	4276      	negs	r6, r6
 800e67a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800e67e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e682:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e686:	2301      	movs	r3, #1
 800e688:	e2d0      	b.n	800ec2c <_vfprintf_r+0x82c>
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w
	...
 800e698:	080e7880 	.word	0x080e7880
 800e69c:	080e78a0 	.word	0x080e78a0
 800e6a0:	080e7860 	.word	0x080e7860
 800e6a4:	b10b      	cbz	r3, 800e6aa <_vfprintf_r+0x2aa>
 800e6a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e6aa:	4ba2      	ldr	r3, [pc, #648]	; (800e934 <_vfprintf_r+0x534>)
 800e6ac:	9311      	str	r3, [sp, #68]	; 0x44
 800e6ae:	06a9      	lsls	r1, r5, #26
 800e6b0:	f140 8331 	bpl.w	800ed16 <_vfprintf_r+0x916>
 800e6b4:	3707      	adds	r7, #7
 800e6b6:	f027 0707 	bic.w	r7, r7, #7
 800e6ba:	f107 0308 	add.w	r3, r7, #8
 800e6be:	e9d7 6700 	ldrd	r6, r7, [r7]
 800e6c2:	9304      	str	r3, [sp, #16]
 800e6c4:	07eb      	lsls	r3, r5, #31
 800e6c6:	d50b      	bpl.n	800e6e0 <_vfprintf_r+0x2e0>
 800e6c8:	ea56 0307 	orrs.w	r3, r6, r7
 800e6cc:	d008      	beq.n	800e6e0 <_vfprintf_r+0x2e0>
 800e6ce:	2330      	movs	r3, #48	; 0x30
 800e6d0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800e6d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e6d8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800e6dc:	f045 0502 	orr.w	r5, r5, #2
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	e2a0      	b.n	800ec26 <_vfprintf_r+0x826>
 800e6e4:	2a00      	cmp	r2, #0
 800e6e6:	d1b1      	bne.n	800e64c <_vfprintf_r+0x24c>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	2220      	movs	r2, #32
 800e6ec:	e7ae      	b.n	800e64c <_vfprintf_r+0x24c>
 800e6ee:	f045 0501 	orr.w	r5, r5, #1
 800e6f2:	e7ab      	b.n	800e64c <_vfprintf_r+0x24c>
 800e6f4:	683e      	ldr	r6, [r7, #0]
 800e6f6:	960b      	str	r6, [sp, #44]	; 0x2c
 800e6f8:	2e00      	cmp	r6, #0
 800e6fa:	f107 0104 	add.w	r1, r7, #4
 800e6fe:	daa7      	bge.n	800e650 <_vfprintf_r+0x250>
 800e700:	4276      	negs	r6, r6
 800e702:	960b      	str	r6, [sp, #44]	; 0x2c
 800e704:	460f      	mov	r7, r1
 800e706:	f045 0504 	orr.w	r5, r5, #4
 800e70a:	e79f      	b.n	800e64c <_vfprintf_r+0x24c>
 800e70c:	9905      	ldr	r1, [sp, #20]
 800e70e:	1c4e      	adds	r6, r1, #1
 800e710:	7809      	ldrb	r1, [r1, #0]
 800e712:	9102      	str	r1, [sp, #8]
 800e714:	292a      	cmp	r1, #42	; 0x2a
 800e716:	d010      	beq.n	800e73a <_vfprintf_r+0x33a>
 800e718:	f04f 0a00 	mov.w	sl, #0
 800e71c:	9605      	str	r6, [sp, #20]
 800e71e:	9902      	ldr	r1, [sp, #8]
 800e720:	3930      	subs	r1, #48	; 0x30
 800e722:	2909      	cmp	r1, #9
 800e724:	f63f af24 	bhi.w	800e570 <_vfprintf_r+0x170>
 800e728:	fb00 1a0a 	mla	sl, r0, sl, r1
 800e72c:	9905      	ldr	r1, [sp, #20]
 800e72e:	460e      	mov	r6, r1
 800e730:	f816 1b01 	ldrb.w	r1, [r6], #1
 800e734:	9102      	str	r1, [sp, #8]
 800e736:	9605      	str	r6, [sp, #20]
 800e738:	e7f1      	b.n	800e71e <_vfprintf_r+0x31e>
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	9605      	str	r6, [sp, #20]
 800e73e:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 800e742:	3704      	adds	r7, #4
 800e744:	e782      	b.n	800e64c <_vfprintf_r+0x24c>
 800e746:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800e74a:	e77f      	b.n	800e64c <_vfprintf_r+0x24c>
 800e74c:	2100      	movs	r1, #0
 800e74e:	910b      	str	r1, [sp, #44]	; 0x2c
 800e750:	9902      	ldr	r1, [sp, #8]
 800e752:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e754:	3930      	subs	r1, #48	; 0x30
 800e756:	fb00 1106 	mla	r1, r0, r6, r1
 800e75a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e75c:	9905      	ldr	r1, [sp, #20]
 800e75e:	460e      	mov	r6, r1
 800e760:	f816 1b01 	ldrb.w	r1, [r6], #1
 800e764:	9102      	str	r1, [sp, #8]
 800e766:	9902      	ldr	r1, [sp, #8]
 800e768:	9605      	str	r6, [sp, #20]
 800e76a:	3930      	subs	r1, #48	; 0x30
 800e76c:	2909      	cmp	r1, #9
 800e76e:	d9ef      	bls.n	800e750 <_vfprintf_r+0x350>
 800e770:	e6fe      	b.n	800e570 <_vfprintf_r+0x170>
 800e772:	f045 0508 	orr.w	r5, r5, #8
 800e776:	e769      	b.n	800e64c <_vfprintf_r+0x24c>
 800e778:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800e77c:	e766      	b.n	800e64c <_vfprintf_r+0x24c>
 800e77e:	9905      	ldr	r1, [sp, #20]
 800e780:	7809      	ldrb	r1, [r1, #0]
 800e782:	296c      	cmp	r1, #108	; 0x6c
 800e784:	d105      	bne.n	800e792 <_vfprintf_r+0x392>
 800e786:	9905      	ldr	r1, [sp, #20]
 800e788:	3101      	adds	r1, #1
 800e78a:	9105      	str	r1, [sp, #20]
 800e78c:	f045 0520 	orr.w	r5, r5, #32
 800e790:	e75c      	b.n	800e64c <_vfprintf_r+0x24c>
 800e792:	f045 0510 	orr.w	r5, r5, #16
 800e796:	e759      	b.n	800e64c <_vfprintf_r+0x24c>
 800e798:	1d3b      	adds	r3, r7, #4
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	2600      	movs	r6, #0
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800e7a4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800e7a8:	f04f 0a01 	mov.w	sl, #1
 800e7ac:	9608      	str	r6, [sp, #32]
 800e7ae:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 800e7b2:	e11e      	b.n	800e9f2 <_vfprintf_r+0x5f2>
 800e7b4:	b10b      	cbz	r3, 800e7ba <_vfprintf_r+0x3ba>
 800e7b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e7ba:	f045 0510 	orr.w	r5, r5, #16
 800e7be:	e74c      	b.n	800e65a <_vfprintf_r+0x25a>
 800e7c0:	f015 0f10 	tst.w	r5, #16
 800e7c4:	f107 0304 	add.w	r3, r7, #4
 800e7c8:	d003      	beq.n	800e7d2 <_vfprintf_r+0x3d2>
 800e7ca:	683e      	ldr	r6, [r7, #0]
 800e7cc:	9304      	str	r3, [sp, #16]
 800e7ce:	17f7      	asrs	r7, r6, #31
 800e7d0:	e74e      	b.n	800e670 <_vfprintf_r+0x270>
 800e7d2:	683e      	ldr	r6, [r7, #0]
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e7da:	bf18      	it	ne
 800e7dc:	b236      	sxthne	r6, r6
 800e7de:	e7f6      	b.n	800e7ce <_vfprintf_r+0x3ce>
 800e7e0:	b10b      	cbz	r3, 800e7e6 <_vfprintf_r+0x3e6>
 800e7e2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800e7e6:	3707      	adds	r7, #7
 800e7e8:	f027 0707 	bic.w	r7, r7, #7
 800e7ec:	f107 0308 	add.w	r3, r7, #8
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	ed97 7b00 	vldr	d7, [r7]
 800e7f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e7fa:	9b06      	ldr	r3, [sp, #24]
 800e7fc:	9312      	str	r3, [sp, #72]	; 0x48
 800e7fe:	9b07      	ldr	r3, [sp, #28]
 800e800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e804:	9313      	str	r3, [sp, #76]	; 0x4c
 800e806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e80a:	4b4b      	ldr	r3, [pc, #300]	; (800e938 <_vfprintf_r+0x538>)
 800e80c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800e810:	f7f2 f998 	bl	8000b44 <__aeabi_dcmpun>
 800e814:	2800      	cmp	r0, #0
 800e816:	f040 85e3 	bne.w	800f3e0 <_vfprintf_r+0xfe0>
 800e81a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e81e:	4b46      	ldr	r3, [pc, #280]	; (800e938 <_vfprintf_r+0x538>)
 800e820:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800e824:	f7f2 f970 	bl	8000b08 <__aeabi_dcmple>
 800e828:	2800      	cmp	r0, #0
 800e82a:	f040 85d9 	bne.w	800f3e0 <_vfprintf_r+0xfe0>
 800e82e:	2200      	movs	r2, #0
 800e830:	2300      	movs	r3, #0
 800e832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e836:	f7f2 f95d 	bl	8000af4 <__aeabi_dcmplt>
 800e83a:	b110      	cbz	r0, 800e842 <_vfprintf_r+0x442>
 800e83c:	232d      	movs	r3, #45	; 0x2d
 800e83e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e842:	4b3e      	ldr	r3, [pc, #248]	; (800e93c <_vfprintf_r+0x53c>)
 800e844:	4a3e      	ldr	r2, [pc, #248]	; (800e940 <_vfprintf_r+0x540>)
 800e846:	9902      	ldr	r1, [sp, #8]
 800e848:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800e84c:	2947      	cmp	r1, #71	; 0x47
 800e84e:	bfcc      	ite	gt
 800e850:	4691      	movgt	r9, r2
 800e852:	4699      	movle	r9, r3
 800e854:	f04f 0a03 	mov.w	sl, #3
 800e858:	2600      	movs	r6, #0
 800e85a:	9608      	str	r6, [sp, #32]
 800e85c:	e0c9      	b.n	800e9f2 <_vfprintf_r+0x5f2>
 800e85e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800e862:	d022      	beq.n	800e8aa <_vfprintf_r+0x4aa>
 800e864:	9b02      	ldr	r3, [sp, #8]
 800e866:	f023 0320 	bic.w	r3, r3, #32
 800e86a:	2b47      	cmp	r3, #71	; 0x47
 800e86c:	d104      	bne.n	800e878 <_vfprintf_r+0x478>
 800e86e:	f1ba 0f00 	cmp.w	sl, #0
 800e872:	bf08      	it	eq
 800e874:	f04f 0a01 	moveq.w	sl, #1
 800e878:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800e87c:	9314      	str	r3, [sp, #80]	; 0x50
 800e87e:	9b07      	ldr	r3, [sp, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	da15      	bge.n	800e8b0 <_vfprintf_r+0x4b0>
 800e884:	9b06      	ldr	r3, [sp, #24]
 800e886:	930e      	str	r3, [sp, #56]	; 0x38
 800e888:	9b07      	ldr	r3, [sp, #28]
 800e88a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e88e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e890:	232d      	movs	r3, #45	; 0x2d
 800e892:	930c      	str	r3, [sp, #48]	; 0x30
 800e894:	9b02      	ldr	r3, [sp, #8]
 800e896:	f023 0720 	bic.w	r7, r3, #32
 800e89a:	2f46      	cmp	r7, #70	; 0x46
 800e89c:	d00e      	beq.n	800e8bc <_vfprintf_r+0x4bc>
 800e89e:	2f45      	cmp	r7, #69	; 0x45
 800e8a0:	d146      	bne.n	800e930 <_vfprintf_r+0x530>
 800e8a2:	f10a 0601 	add.w	r6, sl, #1
 800e8a6:	2102      	movs	r1, #2
 800e8a8:	e00a      	b.n	800e8c0 <_vfprintf_r+0x4c0>
 800e8aa:	f04f 0a06 	mov.w	sl, #6
 800e8ae:	e7e3      	b.n	800e878 <_vfprintf_r+0x478>
 800e8b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e8ba:	e7ea      	b.n	800e892 <_vfprintf_r+0x492>
 800e8bc:	4656      	mov	r6, sl
 800e8be:	2103      	movs	r1, #3
 800e8c0:	ab1d      	add	r3, sp, #116	; 0x74
 800e8c2:	9301      	str	r3, [sp, #4]
 800e8c4:	ab1a      	add	r3, sp, #104	; 0x68
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	4632      	mov	r2, r6
 800e8ca:	ab19      	add	r3, sp, #100	; 0x64
 800e8cc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800e8d0:	4658      	mov	r0, fp
 800e8d2:	f000 ff0d 	bl	800f6f0 <_dtoa_r>
 800e8d6:	2f47      	cmp	r7, #71	; 0x47
 800e8d8:	4681      	mov	r9, r0
 800e8da:	d102      	bne.n	800e8e2 <_vfprintf_r+0x4e2>
 800e8dc:	07eb      	lsls	r3, r5, #31
 800e8de:	f140 858c 	bpl.w	800f3fa <_vfprintf_r+0xffa>
 800e8e2:	eb09 0306 	add.w	r3, r9, r6
 800e8e6:	2f46      	cmp	r7, #70	; 0x46
 800e8e8:	9303      	str	r3, [sp, #12]
 800e8ea:	d111      	bne.n	800e910 <_vfprintf_r+0x510>
 800e8ec:	f899 3000 	ldrb.w	r3, [r9]
 800e8f0:	2b30      	cmp	r3, #48	; 0x30
 800e8f2:	d109      	bne.n	800e908 <_vfprintf_r+0x508>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e8fc:	f7f2 f8f0 	bl	8000ae0 <__aeabi_dcmpeq>
 800e900:	b910      	cbnz	r0, 800e908 <_vfprintf_r+0x508>
 800e902:	f1c6 0601 	rsb	r6, r6, #1
 800e906:	9619      	str	r6, [sp, #100]	; 0x64
 800e908:	9a03      	ldr	r2, [sp, #12]
 800e90a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e90c:	441a      	add	r2, r3
 800e90e:	9203      	str	r2, [sp, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e918:	f7f2 f8e2 	bl	8000ae0 <__aeabi_dcmpeq>
 800e91c:	b990      	cbnz	r0, 800e944 <_vfprintf_r+0x544>
 800e91e:	2230      	movs	r2, #48	; 0x30
 800e920:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e922:	9903      	ldr	r1, [sp, #12]
 800e924:	4299      	cmp	r1, r3
 800e926:	d90f      	bls.n	800e948 <_vfprintf_r+0x548>
 800e928:	1c59      	adds	r1, r3, #1
 800e92a:	911d      	str	r1, [sp, #116]	; 0x74
 800e92c:	701a      	strb	r2, [r3, #0]
 800e92e:	e7f7      	b.n	800e920 <_vfprintf_r+0x520>
 800e930:	4656      	mov	r6, sl
 800e932:	e7b8      	b.n	800e8a6 <_vfprintf_r+0x4a6>
 800e934:	080e780c 	.word	0x080e780c
 800e938:	7fefffff 	.word	0x7fefffff
 800e93c:	080e77fc 	.word	0x080e77fc
 800e940:	080e7800 	.word	0x080e7800
 800e944:	9b03      	ldr	r3, [sp, #12]
 800e946:	931d      	str	r3, [sp, #116]	; 0x74
 800e948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e94a:	2f47      	cmp	r7, #71	; 0x47
 800e94c:	eba3 0309 	sub.w	r3, r3, r9
 800e950:	9303      	str	r3, [sp, #12]
 800e952:	f040 80f8 	bne.w	800eb46 <_vfprintf_r+0x746>
 800e956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e958:	1cdf      	adds	r7, r3, #3
 800e95a:	db02      	blt.n	800e962 <_vfprintf_r+0x562>
 800e95c:	459a      	cmp	sl, r3
 800e95e:	f280 811f 	bge.w	800eba0 <_vfprintf_r+0x7a0>
 800e962:	9b02      	ldr	r3, [sp, #8]
 800e964:	3b02      	subs	r3, #2
 800e966:	9302      	str	r3, [sp, #8]
 800e968:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e96a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800e96e:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800e972:	1e53      	subs	r3, r2, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	9319      	str	r3, [sp, #100]	; 0x64
 800e978:	bfb6      	itet	lt
 800e97a:	f1c2 0301 	rsblt	r3, r2, #1
 800e97e:	222b      	movge	r2, #43	; 0x2b
 800e980:	222d      	movlt	r2, #45	; 0x2d
 800e982:	2b09      	cmp	r3, #9
 800e984:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800e988:	f340 80fa 	ble.w	800eb80 <_vfprintf_r+0x780>
 800e98c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800e990:	260a      	movs	r6, #10
 800e992:	fb93 f0f6 	sdiv	r0, r3, r6
 800e996:	fb06 3310 	mls	r3, r6, r0, r3
 800e99a:	3330      	adds	r3, #48	; 0x30
 800e99c:	2809      	cmp	r0, #9
 800e99e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e9a2:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f300 80e3 	bgt.w	800eb72 <_vfprintf_r+0x772>
 800e9ac:	3330      	adds	r3, #48	; 0x30
 800e9ae:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e9b2:	3a02      	subs	r2, #2
 800e9b4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800e9b8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800e9bc:	4282      	cmp	r2, r0
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f0c0 80d9 	bcc.w	800eb76 <_vfprintf_r+0x776>
 800e9c4:	9a03      	ldr	r2, [sp, #12]
 800e9c6:	ab1b      	add	r3, sp, #108	; 0x6c
 800e9c8:	1acb      	subs	r3, r1, r3
 800e9ca:	2a01      	cmp	r2, #1
 800e9cc:	9310      	str	r3, [sp, #64]	; 0x40
 800e9ce:	eb03 0a02 	add.w	sl, r3, r2
 800e9d2:	dc03      	bgt.n	800e9dc <_vfprintf_r+0x5dc>
 800e9d4:	f015 0301 	ands.w	r3, r5, #1
 800e9d8:	9308      	str	r3, [sp, #32]
 800e9da:	d003      	beq.n	800e9e4 <_vfprintf_r+0x5e4>
 800e9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9de:	449a      	add	sl, r3
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9e6:	b113      	cbz	r3, 800e9ee <_vfprintf_r+0x5ee>
 800e9e8:	232d      	movs	r3, #45	; 0x2d
 800e9ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800e9ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e9f0:	2600      	movs	r6, #0
 800e9f2:	4556      	cmp	r6, sl
 800e9f4:	4633      	mov	r3, r6
 800e9f6:	bfb8      	it	lt
 800e9f8:	4653      	movlt	r3, sl
 800e9fa:	930c      	str	r3, [sp, #48]	; 0x30
 800e9fc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800ea00:	b113      	cbz	r3, 800ea08 <_vfprintf_r+0x608>
 800ea02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea04:	3301      	adds	r3, #1
 800ea06:	930c      	str	r3, [sp, #48]	; 0x30
 800ea08:	f015 0302 	ands.w	r3, r5, #2
 800ea0c:	9314      	str	r3, [sp, #80]	; 0x50
 800ea0e:	bf1e      	ittt	ne
 800ea10:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 800ea12:	3302      	addne	r3, #2
 800ea14:	930c      	strne	r3, [sp, #48]	; 0x30
 800ea16:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800ea1a:	9315      	str	r3, [sp, #84]	; 0x54
 800ea1c:	d114      	bne.n	800ea48 <_vfprintf_r+0x648>
 800ea1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea22:	1a9f      	subs	r7, r3, r2
 800ea24:	2f00      	cmp	r7, #0
 800ea26:	dd0f      	ble.n	800ea48 <_vfprintf_r+0x648>
 800ea28:	4ba8      	ldr	r3, [pc, #672]	; (800eccc <_vfprintf_r+0x8cc>)
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	2f10      	cmp	r7, #16
 800ea2e:	f300 81d3 	bgt.w	800edd8 <_vfprintf_r+0x9d8>
 800ea32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea34:	6067      	str	r7, [r4, #4]
 800ea36:	441f      	add	r7, r3
 800ea38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea3a:	9721      	str	r7, [sp, #132]	; 0x84
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	9320      	str	r3, [sp, #128]	; 0x80
 800ea42:	f300 81e0 	bgt.w	800ee06 <_vfprintf_r+0xa06>
 800ea46:	3408      	adds	r4, #8
 800ea48:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800ea4c:	b173      	cbz	r3, 800ea6c <_vfprintf_r+0x66c>
 800ea4e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800ea52:	6023      	str	r3, [r4, #0]
 800ea54:	2301      	movs	r3, #1
 800ea56:	6063      	str	r3, [r4, #4]
 800ea58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	9321      	str	r3, [sp, #132]	; 0x84
 800ea5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea60:	3301      	adds	r3, #1
 800ea62:	2b07      	cmp	r3, #7
 800ea64:	9320      	str	r3, [sp, #128]	; 0x80
 800ea66:	f300 81d8 	bgt.w	800ee1a <_vfprintf_r+0xa1a>
 800ea6a:	3408      	adds	r4, #8
 800ea6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea6e:	b16b      	cbz	r3, 800ea8c <_vfprintf_r+0x68c>
 800ea70:	ab18      	add	r3, sp, #96	; 0x60
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	2302      	movs	r3, #2
 800ea76:	6063      	str	r3, [r4, #4]
 800ea78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea7a:	3302      	adds	r3, #2
 800ea7c:	9321      	str	r3, [sp, #132]	; 0x84
 800ea7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea80:	3301      	adds	r3, #1
 800ea82:	2b07      	cmp	r3, #7
 800ea84:	9320      	str	r3, [sp, #128]	; 0x80
 800ea86:	f300 81d2 	bgt.w	800ee2e <_vfprintf_r+0xa2e>
 800ea8a:	3408      	adds	r4, #8
 800ea8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea8e:	2b80      	cmp	r3, #128	; 0x80
 800ea90:	d114      	bne.n	800eabc <_vfprintf_r+0x6bc>
 800ea92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea96:	1a9f      	subs	r7, r3, r2
 800ea98:	2f00      	cmp	r7, #0
 800ea9a:	dd0f      	ble.n	800eabc <_vfprintf_r+0x6bc>
 800ea9c:	4b8c      	ldr	r3, [pc, #560]	; (800ecd0 <_vfprintf_r+0x8d0>)
 800ea9e:	6023      	str	r3, [r4, #0]
 800eaa0:	2f10      	cmp	r7, #16
 800eaa2:	f300 81ce 	bgt.w	800ee42 <_vfprintf_r+0xa42>
 800eaa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eaa8:	6067      	str	r7, [r4, #4]
 800eaaa:	441f      	add	r7, r3
 800eaac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eaae:	9721      	str	r7, [sp, #132]	; 0x84
 800eab0:	3301      	adds	r3, #1
 800eab2:	2b07      	cmp	r3, #7
 800eab4:	9320      	str	r3, [sp, #128]	; 0x80
 800eab6:	f300 81dd 	bgt.w	800ee74 <_vfprintf_r+0xa74>
 800eaba:	3408      	adds	r4, #8
 800eabc:	eba6 060a 	sub.w	r6, r6, sl
 800eac0:	2e00      	cmp	r6, #0
 800eac2:	dd0f      	ble.n	800eae4 <_vfprintf_r+0x6e4>
 800eac4:	4f82      	ldr	r7, [pc, #520]	; (800ecd0 <_vfprintf_r+0x8d0>)
 800eac6:	6027      	str	r7, [r4, #0]
 800eac8:	2e10      	cmp	r6, #16
 800eaca:	f300 81dd 	bgt.w	800ee88 <_vfprintf_r+0xa88>
 800eace:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ead0:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ead2:	6066      	str	r6, [r4, #4]
 800ead4:	3301      	adds	r3, #1
 800ead6:	4406      	add	r6, r0
 800ead8:	2b07      	cmp	r3, #7
 800eada:	9621      	str	r6, [sp, #132]	; 0x84
 800eadc:	9320      	str	r3, [sp, #128]	; 0x80
 800eade:	f300 81ea 	bgt.w	800eeb6 <_vfprintf_r+0xab6>
 800eae2:	3408      	adds	r4, #8
 800eae4:	05e9      	lsls	r1, r5, #23
 800eae6:	f100 81f0 	bmi.w	800eeca <_vfprintf_r+0xaca>
 800eaea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eaec:	e884 0600 	stmia.w	r4, {r9, sl}
 800eaf0:	4453      	add	r3, sl
 800eaf2:	9321      	str	r3, [sp, #132]	; 0x84
 800eaf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	2b07      	cmp	r3, #7
 800eafa:	9320      	str	r3, [sp, #128]	; 0x80
 800eafc:	f340 841b 	ble.w	800f336 <_vfprintf_r+0xf36>
 800eb00:	aa1f      	add	r2, sp, #124	; 0x7c
 800eb02:	4641      	mov	r1, r8
 800eb04:	4658      	mov	r0, fp
 800eb06:	f002 fa28 	bl	8010f5a <__sprint_r>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f040 8433 	bne.w	800f376 <_vfprintf_r+0xf76>
 800eb10:	ac2c      	add	r4, sp, #176	; 0xb0
 800eb12:	0768      	lsls	r0, r5, #29
 800eb14:	f100 8412 	bmi.w	800f33c <_vfprintf_r+0xf3c>
 800eb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb1e:	428a      	cmp	r2, r1
 800eb20:	bfac      	ite	ge
 800eb22:	189b      	addge	r3, r3, r2
 800eb24:	185b      	addlt	r3, r3, r1
 800eb26:	930a      	str	r3, [sp, #40]	; 0x28
 800eb28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb2a:	b13b      	cbz	r3, 800eb3c <_vfprintf_r+0x73c>
 800eb2c:	aa1f      	add	r2, sp, #124	; 0x7c
 800eb2e:	4641      	mov	r1, r8
 800eb30:	4658      	mov	r0, fp
 800eb32:	f002 fa12 	bl	8010f5a <__sprint_r>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	f040 841d 	bne.w	800f376 <_vfprintf_r+0xf76>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	9320      	str	r3, [sp, #128]	; 0x80
 800eb40:	9f04      	ldr	r7, [sp, #16]
 800eb42:	ac2c      	add	r4, sp, #176	; 0xb0
 800eb44:	e4e9      	b.n	800e51a <_vfprintf_r+0x11a>
 800eb46:	9b02      	ldr	r3, [sp, #8]
 800eb48:	2b65      	cmp	r3, #101	; 0x65
 800eb4a:	f77f af0d 	ble.w	800e968 <_vfprintf_r+0x568>
 800eb4e:	9b02      	ldr	r3, [sp, #8]
 800eb50:	2b66      	cmp	r3, #102	; 0x66
 800eb52:	d125      	bne.n	800eba0 <_vfprintf_r+0x7a0>
 800eb54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dd1a      	ble.n	800eb90 <_vfprintf_r+0x790>
 800eb5a:	f1ba 0f00 	cmp.w	sl, #0
 800eb5e:	d101      	bne.n	800eb64 <_vfprintf_r+0x764>
 800eb60:	07ee      	lsls	r6, r5, #31
 800eb62:	d502      	bpl.n	800eb6a <_vfprintf_r+0x76a>
 800eb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb66:	4413      	add	r3, r2
 800eb68:	4453      	add	r3, sl
 800eb6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb6c:	9208      	str	r2, [sp, #32]
 800eb6e:	469a      	mov	sl, r3
 800eb70:	e738      	b.n	800e9e4 <_vfprintf_r+0x5e4>
 800eb72:	460a      	mov	r2, r1
 800eb74:	e70d      	b.n	800e992 <_vfprintf_r+0x592>
 800eb76:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eb7a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb7e:	e71d      	b.n	800e9bc <_vfprintf_r+0x5bc>
 800eb80:	2230      	movs	r2, #48	; 0x30
 800eb82:	4413      	add	r3, r2
 800eb84:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800eb88:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800eb8c:	a91c      	add	r1, sp, #112	; 0x70
 800eb8e:	e719      	b.n	800e9c4 <_vfprintf_r+0x5c4>
 800eb90:	f1ba 0f00 	cmp.w	sl, #0
 800eb94:	d101      	bne.n	800eb9a <_vfprintf_r+0x79a>
 800eb96:	07ed      	lsls	r5, r5, #31
 800eb98:	d515      	bpl.n	800ebc6 <_vfprintf_r+0x7c6>
 800eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	e7e3      	b.n	800eb68 <_vfprintf_r+0x768>
 800eba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eba2:	9b03      	ldr	r3, [sp, #12]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	db06      	blt.n	800ebb6 <_vfprintf_r+0x7b6>
 800eba8:	07e8      	lsls	r0, r5, #31
 800ebaa:	d50e      	bpl.n	800ebca <_vfprintf_r+0x7ca>
 800ebac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebae:	4413      	add	r3, r2
 800ebb0:	2267      	movs	r2, #103	; 0x67
 800ebb2:	9202      	str	r2, [sp, #8]
 800ebb4:	e7d9      	b.n	800eb6a <_vfprintf_r+0x76a>
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebba:	2a00      	cmp	r2, #0
 800ebbc:	440b      	add	r3, r1
 800ebbe:	dcf7      	bgt.n	800ebb0 <_vfprintf_r+0x7b0>
 800ebc0:	f1c2 0201 	rsb	r2, r2, #1
 800ebc4:	e7f3      	b.n	800ebae <_vfprintf_r+0x7ae>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e7cf      	b.n	800eb6a <_vfprintf_r+0x76a>
 800ebca:	4613      	mov	r3, r2
 800ebcc:	e7f0      	b.n	800ebb0 <_vfprintf_r+0x7b0>
 800ebce:	b10b      	cbz	r3, 800ebd4 <_vfprintf_r+0x7d4>
 800ebd0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800ebd4:	f015 0f20 	tst.w	r5, #32
 800ebd8:	f107 0304 	add.w	r3, r7, #4
 800ebdc:	d008      	beq.n	800ebf0 <_vfprintf_r+0x7f0>
 800ebde:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	17ce      	asrs	r6, r1, #31
 800ebe4:	4608      	mov	r0, r1
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	e9c2 0100 	strd	r0, r1, [r2]
 800ebec:	461f      	mov	r7, r3
 800ebee:	e494      	b.n	800e51a <_vfprintf_r+0x11a>
 800ebf0:	06e9      	lsls	r1, r5, #27
 800ebf2:	d503      	bpl.n	800ebfc <_vfprintf_r+0x7fc>
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ebf8:	6011      	str	r1, [r2, #0]
 800ebfa:	e7f7      	b.n	800ebec <_vfprintf_r+0x7ec>
 800ebfc:	066a      	lsls	r2, r5, #25
 800ebfe:	d5f9      	bpl.n	800ebf4 <_vfprintf_r+0x7f4>
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800ec06:	8011      	strh	r1, [r2, #0]
 800ec08:	e7f0      	b.n	800ebec <_vfprintf_r+0x7ec>
 800ec0a:	f045 0510 	orr.w	r5, r5, #16
 800ec0e:	f015 0320 	ands.w	r3, r5, #32
 800ec12:	d022      	beq.n	800ec5a <_vfprintf_r+0x85a>
 800ec14:	3707      	adds	r7, #7
 800ec16:	f027 0707 	bic.w	r7, r7, #7
 800ec1a:	f107 0308 	add.w	r3, r7, #8
 800ec1e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	2300      	movs	r3, #0
 800ec26:	2200      	movs	r2, #0
 800ec28:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800ec2c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ec30:	f000 83e8 	beq.w	800f404 <_vfprintf_r+0x1004>
 800ec34:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800ec38:	9208      	str	r2, [sp, #32]
 800ec3a:	ea56 0207 	orrs.w	r2, r6, r7
 800ec3e:	f040 83e6 	bne.w	800f40e <_vfprintf_r+0x100e>
 800ec42:	f1ba 0f00 	cmp.w	sl, #0
 800ec46:	f000 80a9 	beq.w	800ed9c <_vfprintf_r+0x99c>
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d075      	beq.n	800ed3a <_vfprintf_r+0x93a>
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	f000 8090 	beq.w	800ed74 <_vfprintf_r+0x974>
 800ec54:	2600      	movs	r6, #0
 800ec56:	2700      	movs	r7, #0
 800ec58:	e3df      	b.n	800f41a <_vfprintf_r+0x101a>
 800ec5a:	1d3a      	adds	r2, r7, #4
 800ec5c:	f015 0110 	ands.w	r1, r5, #16
 800ec60:	9204      	str	r2, [sp, #16]
 800ec62:	d002      	beq.n	800ec6a <_vfprintf_r+0x86a>
 800ec64:	683e      	ldr	r6, [r7, #0]
 800ec66:	2700      	movs	r7, #0
 800ec68:	e7dd      	b.n	800ec26 <_vfprintf_r+0x826>
 800ec6a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800ec6e:	d0f9      	beq.n	800ec64 <_vfprintf_r+0x864>
 800ec70:	883e      	ldrh	r6, [r7, #0]
 800ec72:	2700      	movs	r7, #0
 800ec74:	e7d6      	b.n	800ec24 <_vfprintf_r+0x824>
 800ec76:	1d3b      	adds	r3, r7, #4
 800ec78:	9304      	str	r3, [sp, #16]
 800ec7a:	2330      	movs	r3, #48	; 0x30
 800ec7c:	2278      	movs	r2, #120	; 0x78
 800ec7e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ec82:	4b14      	ldr	r3, [pc, #80]	; (800ecd4 <_vfprintf_r+0x8d4>)
 800ec84:	683e      	ldr	r6, [r7, #0]
 800ec86:	9311      	str	r3, [sp, #68]	; 0x44
 800ec88:	2700      	movs	r7, #0
 800ec8a:	f045 0502 	orr.w	r5, r5, #2
 800ec8e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800ec92:	2302      	movs	r3, #2
 800ec94:	9202      	str	r2, [sp, #8]
 800ec96:	e7c6      	b.n	800ec26 <_vfprintf_r+0x826>
 800ec98:	1d3b      	adds	r3, r7, #4
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	f8d7 9000 	ldr.w	r9, [r7]
 800eca6:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800ecaa:	d00a      	beq.n	800ecc2 <_vfprintf_r+0x8c2>
 800ecac:	4652      	mov	r2, sl
 800ecae:	4631      	mov	r1, r6
 800ecb0:	4648      	mov	r0, r9
 800ecb2:	f7f1 faa5 	bl	8000200 <memchr>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f000 808c 	beq.w	800edd4 <_vfprintf_r+0x9d4>
 800ecbc:	eba0 0a09 	sub.w	sl, r0, r9
 800ecc0:	e5cb      	b.n	800e85a <_vfprintf_r+0x45a>
 800ecc2:	4648      	mov	r0, r9
 800ecc4:	f7f1 fa8e 	bl	80001e4 <strlen>
 800ecc8:	4682      	mov	sl, r0
 800ecca:	e5c6      	b.n	800e85a <_vfprintf_r+0x45a>
 800eccc:	080e7830 	.word	0x080e7830
 800ecd0:	080e7840 	.word	0x080e7840
 800ecd4:	080e781d 	.word	0x080e781d
 800ecd8:	f045 0510 	orr.w	r5, r5, #16
 800ecdc:	06ae      	lsls	r6, r5, #26
 800ecde:	d509      	bpl.n	800ecf4 <_vfprintf_r+0x8f4>
 800ece0:	3707      	adds	r7, #7
 800ece2:	f027 0707 	bic.w	r7, r7, #7
 800ece6:	f107 0308 	add.w	r3, r7, #8
 800ecea:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e798      	b.n	800ec26 <_vfprintf_r+0x826>
 800ecf4:	1d3b      	adds	r3, r7, #4
 800ecf6:	f015 0f10 	tst.w	r5, #16
 800ecfa:	9304      	str	r3, [sp, #16]
 800ecfc:	d001      	beq.n	800ed02 <_vfprintf_r+0x902>
 800ecfe:	683e      	ldr	r6, [r7, #0]
 800ed00:	e002      	b.n	800ed08 <_vfprintf_r+0x908>
 800ed02:	0668      	lsls	r0, r5, #25
 800ed04:	d5fb      	bpl.n	800ecfe <_vfprintf_r+0x8fe>
 800ed06:	883e      	ldrh	r6, [r7, #0]
 800ed08:	2700      	movs	r7, #0
 800ed0a:	e7f1      	b.n	800ecf0 <_vfprintf_r+0x8f0>
 800ed0c:	b10b      	cbz	r3, 800ed12 <_vfprintf_r+0x912>
 800ed0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800ed12:	4ba2      	ldr	r3, [pc, #648]	; (800ef9c <_vfprintf_r+0xb9c>)
 800ed14:	e4ca      	b.n	800e6ac <_vfprintf_r+0x2ac>
 800ed16:	1d3b      	adds	r3, r7, #4
 800ed18:	f015 0f10 	tst.w	r5, #16
 800ed1c:	9304      	str	r3, [sp, #16]
 800ed1e:	d001      	beq.n	800ed24 <_vfprintf_r+0x924>
 800ed20:	683e      	ldr	r6, [r7, #0]
 800ed22:	e002      	b.n	800ed2a <_vfprintf_r+0x92a>
 800ed24:	066a      	lsls	r2, r5, #25
 800ed26:	d5fb      	bpl.n	800ed20 <_vfprintf_r+0x920>
 800ed28:	883e      	ldrh	r6, [r7, #0]
 800ed2a:	2700      	movs	r7, #0
 800ed2c:	e4ca      	b.n	800e6c4 <_vfprintf_r+0x2c4>
 800ed2e:	464b      	mov	r3, r9
 800ed30:	e374      	b.n	800f41c <_vfprintf_r+0x101c>
 800ed32:	2f00      	cmp	r7, #0
 800ed34:	bf08      	it	eq
 800ed36:	2e0a      	cmpeq	r6, #10
 800ed38:	d205      	bcs.n	800ed46 <_vfprintf_r+0x946>
 800ed3a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800ed3e:	3630      	adds	r6, #48	; 0x30
 800ed40:	f809 6d41 	strb.w	r6, [r9, #-65]!
 800ed44:	e385      	b.n	800f452 <_vfprintf_r+0x1052>
 800ed46:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	220a      	movs	r2, #10
 800ed50:	2300      	movs	r3, #0
 800ed52:	f7f1 ff35 	bl	8000bc0 <__aeabi_uldivmod>
 800ed56:	3230      	adds	r2, #48	; 0x30
 800ed58:	f809 2d01 	strb.w	r2, [r9, #-1]!
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4630      	mov	r0, r6
 800ed60:	4639      	mov	r1, r7
 800ed62:	220a      	movs	r2, #10
 800ed64:	f7f1 ff2c 	bl	8000bc0 <__aeabi_uldivmod>
 800ed68:	4606      	mov	r6, r0
 800ed6a:	460f      	mov	r7, r1
 800ed6c:	ea56 0307 	orrs.w	r3, r6, r7
 800ed70:	d1eb      	bne.n	800ed4a <_vfprintf_r+0x94a>
 800ed72:	e36e      	b.n	800f452 <_vfprintf_r+0x1052>
 800ed74:	2600      	movs	r6, #0
 800ed76:	2700      	movs	r7, #0
 800ed78:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800ed7c:	f006 030f 	and.w	r3, r6, #15
 800ed80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed82:	5cd3      	ldrb	r3, [r2, r3]
 800ed84:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ed88:	0933      	lsrs	r3, r6, #4
 800ed8a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ed8e:	093a      	lsrs	r2, r7, #4
 800ed90:	461e      	mov	r6, r3
 800ed92:	4617      	mov	r7, r2
 800ed94:	ea56 0307 	orrs.w	r3, r6, r7
 800ed98:	d1f0      	bne.n	800ed7c <_vfprintf_r+0x97c>
 800ed9a:	e35a      	b.n	800f452 <_vfprintf_r+0x1052>
 800ed9c:	b93b      	cbnz	r3, 800edae <_vfprintf_r+0x9ae>
 800ed9e:	07e8      	lsls	r0, r5, #31
 800eda0:	d505      	bpl.n	800edae <_vfprintf_r+0x9ae>
 800eda2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800eda6:	2330      	movs	r3, #48	; 0x30
 800eda8:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800edac:	e351      	b.n	800f452 <_vfprintf_r+0x1052>
 800edae:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800edb2:	e34e      	b.n	800f452 <_vfprintf_r+0x1052>
 800edb4:	b10b      	cbz	r3, 800edba <_vfprintf_r+0x9ba>
 800edb6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800edba:	9b02      	ldr	r3, [sp, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 8302 	beq.w	800f3c6 <_vfprintf_r+0xfc6>
 800edc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800edc6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800edca:	2600      	movs	r6, #0
 800edcc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800edd0:	9704      	str	r7, [sp, #16]
 800edd2:	e4e9      	b.n	800e7a8 <_vfprintf_r+0x3a8>
 800edd4:	4606      	mov	r6, r0
 800edd6:	e540      	b.n	800e85a <_vfprintf_r+0x45a>
 800edd8:	2310      	movs	r3, #16
 800edda:	6063      	str	r3, [r4, #4]
 800eddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edde:	3310      	adds	r3, #16
 800ede0:	9321      	str	r3, [sp, #132]	; 0x84
 800ede2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ede4:	3301      	adds	r3, #1
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	9320      	str	r3, [sp, #128]	; 0x80
 800edea:	dc02      	bgt.n	800edf2 <_vfprintf_r+0x9f2>
 800edec:	3408      	adds	r4, #8
 800edee:	3f10      	subs	r7, #16
 800edf0:	e61a      	b.n	800ea28 <_vfprintf_r+0x628>
 800edf2:	aa1f      	add	r2, sp, #124	; 0x7c
 800edf4:	4641      	mov	r1, r8
 800edf6:	4658      	mov	r0, fp
 800edf8:	f002 f8af 	bl	8010f5a <__sprint_r>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	f040 82ba 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee02:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee04:	e7f3      	b.n	800edee <_vfprintf_r+0x9ee>
 800ee06:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee08:	4641      	mov	r1, r8
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f002 f8a5 	bl	8010f5a <__sprint_r>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	f040 82b0 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee16:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee18:	e616      	b.n	800ea48 <_vfprintf_r+0x648>
 800ee1a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee1c:	4641      	mov	r1, r8
 800ee1e:	4658      	mov	r0, fp
 800ee20:	f002 f89b 	bl	8010f5a <__sprint_r>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	f040 82a6 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee2a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee2c:	e61e      	b.n	800ea6c <_vfprintf_r+0x66c>
 800ee2e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee30:	4641      	mov	r1, r8
 800ee32:	4658      	mov	r0, fp
 800ee34:	f002 f891 	bl	8010f5a <__sprint_r>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	f040 829c 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee3e:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee40:	e624      	b.n	800ea8c <_vfprintf_r+0x68c>
 800ee42:	2210      	movs	r2, #16
 800ee44:	6062      	str	r2, [r4, #4]
 800ee46:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee48:	3210      	adds	r2, #16
 800ee4a:	9221      	str	r2, [sp, #132]	; 0x84
 800ee4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee4e:	3201      	adds	r2, #1
 800ee50:	2a07      	cmp	r2, #7
 800ee52:	9220      	str	r2, [sp, #128]	; 0x80
 800ee54:	dc02      	bgt.n	800ee5c <_vfprintf_r+0xa5c>
 800ee56:	3408      	adds	r4, #8
 800ee58:	3f10      	subs	r7, #16
 800ee5a:	e620      	b.n	800ea9e <_vfprintf_r+0x69e>
 800ee5c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee5e:	4641      	mov	r1, r8
 800ee60:	4658      	mov	r0, fp
 800ee62:	9314      	str	r3, [sp, #80]	; 0x50
 800ee64:	f002 f879 	bl	8010f5a <__sprint_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	f040 8284 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee6e:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee72:	e7f1      	b.n	800ee58 <_vfprintf_r+0xa58>
 800ee74:	aa1f      	add	r2, sp, #124	; 0x7c
 800ee76:	4641      	mov	r1, r8
 800ee78:	4658      	mov	r0, fp
 800ee7a:	f002 f86e 	bl	8010f5a <__sprint_r>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f040 8279 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ee84:	ac2c      	add	r4, sp, #176	; 0xb0
 800ee86:	e619      	b.n	800eabc <_vfprintf_r+0x6bc>
 800ee88:	2310      	movs	r3, #16
 800ee8a:	6063      	str	r3, [r4, #4]
 800ee8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee8e:	3310      	adds	r3, #16
 800ee90:	9321      	str	r3, [sp, #132]	; 0x84
 800ee92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ee94:	3301      	adds	r3, #1
 800ee96:	2b07      	cmp	r3, #7
 800ee98:	9320      	str	r3, [sp, #128]	; 0x80
 800ee9a:	dc02      	bgt.n	800eea2 <_vfprintf_r+0xaa2>
 800ee9c:	3408      	adds	r4, #8
 800ee9e:	3e10      	subs	r6, #16
 800eea0:	e611      	b.n	800eac6 <_vfprintf_r+0x6c6>
 800eea2:	aa1f      	add	r2, sp, #124	; 0x7c
 800eea4:	4641      	mov	r1, r8
 800eea6:	4658      	mov	r0, fp
 800eea8:	f002 f857 	bl	8010f5a <__sprint_r>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f040 8262 	bne.w	800f376 <_vfprintf_r+0xf76>
 800eeb2:	ac2c      	add	r4, sp, #176	; 0xb0
 800eeb4:	e7f3      	b.n	800ee9e <_vfprintf_r+0xa9e>
 800eeb6:	aa1f      	add	r2, sp, #124	; 0x7c
 800eeb8:	4641      	mov	r1, r8
 800eeba:	4658      	mov	r0, fp
 800eebc:	f002 f84d 	bl	8010f5a <__sprint_r>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	f040 8258 	bne.w	800f376 <_vfprintf_r+0xf76>
 800eec6:	ac2c      	add	r4, sp, #176	; 0xb0
 800eec8:	e60c      	b.n	800eae4 <_vfprintf_r+0x6e4>
 800eeca:	9b02      	ldr	r3, [sp, #8]
 800eecc:	2b65      	cmp	r3, #101	; 0x65
 800eece:	f340 81ad 	ble.w	800f22c <_vfprintf_r+0xe2c>
 800eed2:	2200      	movs	r2, #0
 800eed4:	2300      	movs	r3, #0
 800eed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeda:	f7f1 fe01 	bl	8000ae0 <__aeabi_dcmpeq>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d062      	beq.n	800efa8 <_vfprintf_r+0xba8>
 800eee2:	4b2f      	ldr	r3, [pc, #188]	; (800efa0 <_vfprintf_r+0xba0>)
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	2301      	movs	r3, #1
 800eee8:	6063      	str	r3, [r4, #4]
 800eeea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeec:	3301      	adds	r3, #1
 800eeee:	9321      	str	r3, [sp, #132]	; 0x84
 800eef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800eef2:	3301      	adds	r3, #1
 800eef4:	2b07      	cmp	r3, #7
 800eef6:	9320      	str	r3, [sp, #128]	; 0x80
 800eef8:	dc25      	bgt.n	800ef46 <_vfprintf_r+0xb46>
 800eefa:	3408      	adds	r4, #8
 800eefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eefe:	9a03      	ldr	r2, [sp, #12]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	db02      	blt.n	800ef0a <_vfprintf_r+0xb0a>
 800ef04:	07ea      	lsls	r2, r5, #31
 800ef06:	f57f ae04 	bpl.w	800eb12 <_vfprintf_r+0x712>
 800ef0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef10:	6063      	str	r3, [r4, #4]
 800ef12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef16:	4413      	add	r3, r2
 800ef18:	9321      	str	r3, [sp, #132]	; 0x84
 800ef1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	2b07      	cmp	r3, #7
 800ef20:	9320      	str	r3, [sp, #128]	; 0x80
 800ef22:	dc1a      	bgt.n	800ef5a <_vfprintf_r+0xb5a>
 800ef24:	3408      	adds	r4, #8
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1e5e      	subs	r6, r3, #1
 800ef2a:	2e00      	cmp	r6, #0
 800ef2c:	f77f adf1 	ble.w	800eb12 <_vfprintf_r+0x712>
 800ef30:	4f1c      	ldr	r7, [pc, #112]	; (800efa4 <_vfprintf_r+0xba4>)
 800ef32:	f04f 0910 	mov.w	r9, #16
 800ef36:	2e10      	cmp	r6, #16
 800ef38:	6027      	str	r7, [r4, #0]
 800ef3a:	dc18      	bgt.n	800ef6e <_vfprintf_r+0xb6e>
 800ef3c:	6066      	str	r6, [r4, #4]
 800ef3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef40:	441e      	add	r6, r3
 800ef42:	9621      	str	r6, [sp, #132]	; 0x84
 800ef44:	e5d6      	b.n	800eaf4 <_vfprintf_r+0x6f4>
 800ef46:	aa1f      	add	r2, sp, #124	; 0x7c
 800ef48:	4641      	mov	r1, r8
 800ef4a:	4658      	mov	r0, fp
 800ef4c:	f002 f805 	bl	8010f5a <__sprint_r>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	f040 8210 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ef56:	ac2c      	add	r4, sp, #176	; 0xb0
 800ef58:	e7d0      	b.n	800eefc <_vfprintf_r+0xafc>
 800ef5a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ef5c:	4641      	mov	r1, r8
 800ef5e:	4658      	mov	r0, fp
 800ef60:	f001 fffb 	bl	8010f5a <__sprint_r>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f040 8206 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ef6a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ef6c:	e7db      	b.n	800ef26 <_vfprintf_r+0xb26>
 800ef6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef70:	f8c4 9004 	str.w	r9, [r4, #4]
 800ef74:	3310      	adds	r3, #16
 800ef76:	9321      	str	r3, [sp, #132]	; 0x84
 800ef78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	2b07      	cmp	r3, #7
 800ef7e:	9320      	str	r3, [sp, #128]	; 0x80
 800ef80:	dc02      	bgt.n	800ef88 <_vfprintf_r+0xb88>
 800ef82:	3408      	adds	r4, #8
 800ef84:	3e10      	subs	r6, #16
 800ef86:	e7d6      	b.n	800ef36 <_vfprintf_r+0xb36>
 800ef88:	aa1f      	add	r2, sp, #124	; 0x7c
 800ef8a:	4641      	mov	r1, r8
 800ef8c:	4658      	mov	r0, fp
 800ef8e:	f001 ffe4 	bl	8010f5a <__sprint_r>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	f040 81ef 	bne.w	800f376 <_vfprintf_r+0xf76>
 800ef98:	ac2c      	add	r4, sp, #176	; 0xb0
 800ef9a:	e7f3      	b.n	800ef84 <_vfprintf_r+0xb84>
 800ef9c:	080e781d 	.word	0x080e781d
 800efa0:	080e782e 	.word	0x080e782e
 800efa4:	080e7840 	.word	0x080e7840
 800efa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efaa:	2b00      	cmp	r3, #0
 800efac:	dc7a      	bgt.n	800f0a4 <_vfprintf_r+0xca4>
 800efae:	4b9d      	ldr	r3, [pc, #628]	; (800f224 <_vfprintf_r+0xe24>)
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	2301      	movs	r3, #1
 800efb4:	6063      	str	r3, [r4, #4]
 800efb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efb8:	3301      	adds	r3, #1
 800efba:	9321      	str	r3, [sp, #132]	; 0x84
 800efbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800efbe:	3301      	adds	r3, #1
 800efc0:	2b07      	cmp	r3, #7
 800efc2:	9320      	str	r3, [sp, #128]	; 0x80
 800efc4:	dc44      	bgt.n	800f050 <_vfprintf_r+0xc50>
 800efc6:	3408      	adds	r4, #8
 800efc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efca:	b923      	cbnz	r3, 800efd6 <_vfprintf_r+0xbd6>
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	b913      	cbnz	r3, 800efd6 <_vfprintf_r+0xbd6>
 800efd0:	07eb      	lsls	r3, r5, #31
 800efd2:	f57f ad9e 	bpl.w	800eb12 <_vfprintf_r+0x712>
 800efd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efd8:	6023      	str	r3, [r4, #0]
 800efda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efdc:	6063      	str	r3, [r4, #4]
 800efde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efe2:	4413      	add	r3, r2
 800efe4:	9321      	str	r3, [sp, #132]	; 0x84
 800efe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800efe8:	3301      	adds	r3, #1
 800efea:	2b07      	cmp	r3, #7
 800efec:	9320      	str	r3, [sp, #128]	; 0x80
 800efee:	dc39      	bgt.n	800f064 <_vfprintf_r+0xc64>
 800eff0:	f104 0308 	add.w	r3, r4, #8
 800eff4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800eff6:	2e00      	cmp	r6, #0
 800eff8:	da19      	bge.n	800f02e <_vfprintf_r+0xc2e>
 800effa:	4f8b      	ldr	r7, [pc, #556]	; (800f228 <_vfprintf_r+0xe28>)
 800effc:	4276      	negs	r6, r6
 800effe:	2410      	movs	r4, #16
 800f000:	2e10      	cmp	r6, #16
 800f002:	601f      	str	r7, [r3, #0]
 800f004:	dc38      	bgt.n	800f078 <_vfprintf_r+0xc78>
 800f006:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f008:	605e      	str	r6, [r3, #4]
 800f00a:	4416      	add	r6, r2
 800f00c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f00e:	9621      	str	r6, [sp, #132]	; 0x84
 800f010:	3201      	adds	r2, #1
 800f012:	2a07      	cmp	r2, #7
 800f014:	f103 0308 	add.w	r3, r3, #8
 800f018:	9220      	str	r2, [sp, #128]	; 0x80
 800f01a:	dd08      	ble.n	800f02e <_vfprintf_r+0xc2e>
 800f01c:	aa1f      	add	r2, sp, #124	; 0x7c
 800f01e:	4641      	mov	r1, r8
 800f020:	4658      	mov	r0, fp
 800f022:	f001 ff9a 	bl	8010f5a <__sprint_r>
 800f026:	2800      	cmp	r0, #0
 800f028:	f040 81a5 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f02c:	ab2c      	add	r3, sp, #176	; 0xb0
 800f02e:	9a03      	ldr	r2, [sp, #12]
 800f030:	605a      	str	r2, [r3, #4]
 800f032:	9903      	ldr	r1, [sp, #12]
 800f034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f036:	f8c3 9000 	str.w	r9, [r3]
 800f03a:	440a      	add	r2, r1
 800f03c:	9221      	str	r2, [sp, #132]	; 0x84
 800f03e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f040:	3201      	adds	r2, #1
 800f042:	2a07      	cmp	r2, #7
 800f044:	9220      	str	r2, [sp, #128]	; 0x80
 800f046:	f73f ad5b 	bgt.w	800eb00 <_vfprintf_r+0x700>
 800f04a:	f103 0408 	add.w	r4, r3, #8
 800f04e:	e560      	b.n	800eb12 <_vfprintf_r+0x712>
 800f050:	aa1f      	add	r2, sp, #124	; 0x7c
 800f052:	4641      	mov	r1, r8
 800f054:	4658      	mov	r0, fp
 800f056:	f001 ff80 	bl	8010f5a <__sprint_r>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f040 818b 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f060:	ac2c      	add	r4, sp, #176	; 0xb0
 800f062:	e7b1      	b.n	800efc8 <_vfprintf_r+0xbc8>
 800f064:	aa1f      	add	r2, sp, #124	; 0x7c
 800f066:	4641      	mov	r1, r8
 800f068:	4658      	mov	r0, fp
 800f06a:	f001 ff76 	bl	8010f5a <__sprint_r>
 800f06e:	2800      	cmp	r0, #0
 800f070:	f040 8181 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f074:	ab2c      	add	r3, sp, #176	; 0xb0
 800f076:	e7bd      	b.n	800eff4 <_vfprintf_r+0xbf4>
 800f078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f07a:	605c      	str	r4, [r3, #4]
 800f07c:	3210      	adds	r2, #16
 800f07e:	9221      	str	r2, [sp, #132]	; 0x84
 800f080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f082:	3201      	adds	r2, #1
 800f084:	2a07      	cmp	r2, #7
 800f086:	9220      	str	r2, [sp, #128]	; 0x80
 800f088:	dc02      	bgt.n	800f090 <_vfprintf_r+0xc90>
 800f08a:	3308      	adds	r3, #8
 800f08c:	3e10      	subs	r6, #16
 800f08e:	e7b7      	b.n	800f000 <_vfprintf_r+0xc00>
 800f090:	aa1f      	add	r2, sp, #124	; 0x7c
 800f092:	4641      	mov	r1, r8
 800f094:	4658      	mov	r0, fp
 800f096:	f001 ff60 	bl	8010f5a <__sprint_r>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f040 816b 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f0a0:	ab2c      	add	r3, sp, #176	; 0xb0
 800f0a2:	e7f3      	b.n	800f08c <_vfprintf_r+0xc8c>
 800f0a4:	9b08      	ldr	r3, [sp, #32]
 800f0a6:	9a03      	ldr	r2, [sp, #12]
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	bfa8      	it	ge
 800f0ac:	4613      	movge	r3, r2
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	461e      	mov	r6, r3
 800f0b2:	dd0b      	ble.n	800f0cc <_vfprintf_r+0xccc>
 800f0b4:	6063      	str	r3, [r4, #4]
 800f0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b8:	f8c4 9000 	str.w	r9, [r4]
 800f0bc:	4433      	add	r3, r6
 800f0be:	9321      	str	r3, [sp, #132]	; 0x84
 800f0c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	2b07      	cmp	r3, #7
 800f0c6:	9320      	str	r3, [sp, #128]	; 0x80
 800f0c8:	dc62      	bgt.n	800f190 <_vfprintf_r+0xd90>
 800f0ca:	3408      	adds	r4, #8
 800f0cc:	9b08      	ldr	r3, [sp, #32]
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	bfa8      	it	ge
 800f0d2:	1b9b      	subge	r3, r3, r6
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	461e      	mov	r6, r3
 800f0d8:	dd0f      	ble.n	800f0fa <_vfprintf_r+0xcfa>
 800f0da:	4f53      	ldr	r7, [pc, #332]	; (800f228 <_vfprintf_r+0xe28>)
 800f0dc:	f04f 0a10 	mov.w	sl, #16
 800f0e0:	2e10      	cmp	r6, #16
 800f0e2:	6027      	str	r7, [r4, #0]
 800f0e4:	dc5e      	bgt.n	800f1a4 <_vfprintf_r+0xda4>
 800f0e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0e8:	6066      	str	r6, [r4, #4]
 800f0ea:	441e      	add	r6, r3
 800f0ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f0ee:	9621      	str	r6, [sp, #132]	; 0x84
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	2b07      	cmp	r3, #7
 800f0f4:	9320      	str	r3, [sp, #128]	; 0x80
 800f0f6:	dc6c      	bgt.n	800f1d2 <_vfprintf_r+0xdd2>
 800f0f8:	3408      	adds	r4, #8
 800f0fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f0fc:	9a03      	ldr	r2, [sp, #12]
 800f0fe:	4293      	cmp	r3, r2
 800f100:	db01      	blt.n	800f106 <_vfprintf_r+0xd06>
 800f102:	07ef      	lsls	r7, r5, #31
 800f104:	d50d      	bpl.n	800f122 <_vfprintf_r+0xd22>
 800f106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f10c:	6063      	str	r3, [r4, #4]
 800f10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f112:	4413      	add	r3, r2
 800f114:	9321      	str	r3, [sp, #132]	; 0x84
 800f116:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f118:	3301      	adds	r3, #1
 800f11a:	2b07      	cmp	r3, #7
 800f11c:	9320      	str	r3, [sp, #128]	; 0x80
 800f11e:	dc62      	bgt.n	800f1e6 <_vfprintf_r+0xde6>
 800f120:	3408      	adds	r4, #8
 800f122:	9b03      	ldr	r3, [sp, #12]
 800f124:	9a08      	ldr	r2, [sp, #32]
 800f126:	1a9e      	subs	r6, r3, r2
 800f128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f12a:	9a03      	ldr	r2, [sp, #12]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	429e      	cmp	r6, r3
 800f130:	bfa8      	it	ge
 800f132:	461e      	movge	r6, r3
 800f134:	2e00      	cmp	r6, #0
 800f136:	dd0c      	ble.n	800f152 <_vfprintf_r+0xd52>
 800f138:	9b08      	ldr	r3, [sp, #32]
 800f13a:	444b      	add	r3, r9
 800f13c:	e884 0048 	stmia.w	r4, {r3, r6}
 800f140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f142:	4433      	add	r3, r6
 800f144:	9321      	str	r3, [sp, #132]	; 0x84
 800f146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f148:	3301      	adds	r3, #1
 800f14a:	2b07      	cmp	r3, #7
 800f14c:	9320      	str	r3, [sp, #128]	; 0x80
 800f14e:	dc54      	bgt.n	800f1fa <_vfprintf_r+0xdfa>
 800f150:	3408      	adds	r4, #8
 800f152:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f154:	9a03      	ldr	r2, [sp, #12]
 800f156:	2e00      	cmp	r6, #0
 800f158:	eba2 0303 	sub.w	r3, r2, r3
 800f15c:	bfac      	ite	ge
 800f15e:	1b9e      	subge	r6, r3, r6
 800f160:	461e      	movlt	r6, r3
 800f162:	2e00      	cmp	r6, #0
 800f164:	f77f acd5 	ble.w	800eb12 <_vfprintf_r+0x712>
 800f168:	4f2f      	ldr	r7, [pc, #188]	; (800f228 <_vfprintf_r+0xe28>)
 800f16a:	f04f 0910 	mov.w	r9, #16
 800f16e:	2e10      	cmp	r6, #16
 800f170:	6027      	str	r7, [r4, #0]
 800f172:	f77f aee3 	ble.w	800ef3c <_vfprintf_r+0xb3c>
 800f176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f178:	f8c4 9004 	str.w	r9, [r4, #4]
 800f17c:	3310      	adds	r3, #16
 800f17e:	9321      	str	r3, [sp, #132]	; 0x84
 800f180:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f182:	3301      	adds	r3, #1
 800f184:	2b07      	cmp	r3, #7
 800f186:	9320      	str	r3, [sp, #128]	; 0x80
 800f188:	dc41      	bgt.n	800f20e <_vfprintf_r+0xe0e>
 800f18a:	3408      	adds	r4, #8
 800f18c:	3e10      	subs	r6, #16
 800f18e:	e7ee      	b.n	800f16e <_vfprintf_r+0xd6e>
 800f190:	aa1f      	add	r2, sp, #124	; 0x7c
 800f192:	4641      	mov	r1, r8
 800f194:	4658      	mov	r0, fp
 800f196:	f001 fee0 	bl	8010f5a <__sprint_r>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	f040 80eb 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f1a0:	ac2c      	add	r4, sp, #176	; 0xb0
 800f1a2:	e793      	b.n	800f0cc <_vfprintf_r+0xccc>
 800f1a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1a6:	f8c4 a004 	str.w	sl, [r4, #4]
 800f1aa:	3310      	adds	r3, #16
 800f1ac:	9321      	str	r3, [sp, #132]	; 0x84
 800f1ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	2b07      	cmp	r3, #7
 800f1b4:	9320      	str	r3, [sp, #128]	; 0x80
 800f1b6:	dc02      	bgt.n	800f1be <_vfprintf_r+0xdbe>
 800f1b8:	3408      	adds	r4, #8
 800f1ba:	3e10      	subs	r6, #16
 800f1bc:	e790      	b.n	800f0e0 <_vfprintf_r+0xce0>
 800f1be:	aa1f      	add	r2, sp, #124	; 0x7c
 800f1c0:	4641      	mov	r1, r8
 800f1c2:	4658      	mov	r0, fp
 800f1c4:	f001 fec9 	bl	8010f5a <__sprint_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f040 80d4 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f1ce:	ac2c      	add	r4, sp, #176	; 0xb0
 800f1d0:	e7f3      	b.n	800f1ba <_vfprintf_r+0xdba>
 800f1d2:	aa1f      	add	r2, sp, #124	; 0x7c
 800f1d4:	4641      	mov	r1, r8
 800f1d6:	4658      	mov	r0, fp
 800f1d8:	f001 febf 	bl	8010f5a <__sprint_r>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	f040 80ca 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f1e2:	ac2c      	add	r4, sp, #176	; 0xb0
 800f1e4:	e789      	b.n	800f0fa <_vfprintf_r+0xcfa>
 800f1e6:	aa1f      	add	r2, sp, #124	; 0x7c
 800f1e8:	4641      	mov	r1, r8
 800f1ea:	4658      	mov	r0, fp
 800f1ec:	f001 feb5 	bl	8010f5a <__sprint_r>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	f040 80c0 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f1f6:	ac2c      	add	r4, sp, #176	; 0xb0
 800f1f8:	e793      	b.n	800f122 <_vfprintf_r+0xd22>
 800f1fa:	aa1f      	add	r2, sp, #124	; 0x7c
 800f1fc:	4641      	mov	r1, r8
 800f1fe:	4658      	mov	r0, fp
 800f200:	f001 feab 	bl	8010f5a <__sprint_r>
 800f204:	2800      	cmp	r0, #0
 800f206:	f040 80b6 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f20a:	ac2c      	add	r4, sp, #176	; 0xb0
 800f20c:	e7a1      	b.n	800f152 <_vfprintf_r+0xd52>
 800f20e:	aa1f      	add	r2, sp, #124	; 0x7c
 800f210:	4641      	mov	r1, r8
 800f212:	4658      	mov	r0, fp
 800f214:	f001 fea1 	bl	8010f5a <__sprint_r>
 800f218:	2800      	cmp	r0, #0
 800f21a:	f040 80ac 	bne.w	800f376 <_vfprintf_r+0xf76>
 800f21e:	ac2c      	add	r4, sp, #176	; 0xb0
 800f220:	e7b4      	b.n	800f18c <_vfprintf_r+0xd8c>
 800f222:	bf00      	nop
 800f224:	080e782e 	.word	0x080e782e
 800f228:	080e7840 	.word	0x080e7840
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	dc01      	bgt.n	800f236 <_vfprintf_r+0xe36>
 800f232:	07ee      	lsls	r6, r5, #31
 800f234:	d576      	bpl.n	800f324 <_vfprintf_r+0xf24>
 800f236:	2301      	movs	r3, #1
 800f238:	6063      	str	r3, [r4, #4]
 800f23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f23c:	f8c4 9000 	str.w	r9, [r4]
 800f240:	3301      	adds	r3, #1
 800f242:	9321      	str	r3, [sp, #132]	; 0x84
 800f244:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f246:	3301      	adds	r3, #1
 800f248:	2b07      	cmp	r3, #7
 800f24a:	9320      	str	r3, [sp, #128]	; 0x80
 800f24c:	dc36      	bgt.n	800f2bc <_vfprintf_r+0xebc>
 800f24e:	3408      	adds	r4, #8
 800f250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f256:	6063      	str	r3, [r4, #4]
 800f258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f25c:	4413      	add	r3, r2
 800f25e:	9321      	str	r3, [sp, #132]	; 0x84
 800f260:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f262:	3301      	adds	r3, #1
 800f264:	2b07      	cmp	r3, #7
 800f266:	9320      	str	r3, [sp, #128]	; 0x80
 800f268:	dc31      	bgt.n	800f2ce <_vfprintf_r+0xece>
 800f26a:	3408      	adds	r4, #8
 800f26c:	2300      	movs	r3, #0
 800f26e:	2200      	movs	r2, #0
 800f270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f274:	f7f1 fc34 	bl	8000ae0 <__aeabi_dcmpeq>
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	1e5e      	subs	r6, r3, #1
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d12f      	bne.n	800f2e0 <_vfprintf_r+0xee0>
 800f280:	f109 0301 	add.w	r3, r9, #1
 800f284:	e884 0048 	stmia.w	r4, {r3, r6}
 800f288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f28a:	9a03      	ldr	r2, [sp, #12]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	4413      	add	r3, r2
 800f290:	9321      	str	r3, [sp, #132]	; 0x84
 800f292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f294:	3301      	adds	r3, #1
 800f296:	2b07      	cmp	r3, #7
 800f298:	9320      	str	r3, [sp, #128]	; 0x80
 800f29a:	dd4a      	ble.n	800f332 <_vfprintf_r+0xf32>
 800f29c:	aa1f      	add	r2, sp, #124	; 0x7c
 800f29e:	4641      	mov	r1, r8
 800f2a0:	4658      	mov	r0, fp
 800f2a2:	f001 fe5a 	bl	8010f5a <__sprint_r>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d165      	bne.n	800f376 <_vfprintf_r+0xf76>
 800f2aa:	ac2c      	add	r4, sp, #176	; 0xb0
 800f2ac:	ab1b      	add	r3, sp, #108	; 0x6c
 800f2ae:	6023      	str	r3, [r4, #0]
 800f2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2b2:	6063      	str	r3, [r4, #4]
 800f2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2b8:	4413      	add	r3, r2
 800f2ba:	e41a      	b.n	800eaf2 <_vfprintf_r+0x6f2>
 800f2bc:	aa1f      	add	r2, sp, #124	; 0x7c
 800f2be:	4641      	mov	r1, r8
 800f2c0:	4658      	mov	r0, fp
 800f2c2:	f001 fe4a 	bl	8010f5a <__sprint_r>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d155      	bne.n	800f376 <_vfprintf_r+0xf76>
 800f2ca:	ac2c      	add	r4, sp, #176	; 0xb0
 800f2cc:	e7c0      	b.n	800f250 <_vfprintf_r+0xe50>
 800f2ce:	aa1f      	add	r2, sp, #124	; 0x7c
 800f2d0:	4641      	mov	r1, r8
 800f2d2:	4658      	mov	r0, fp
 800f2d4:	f001 fe41 	bl	8010f5a <__sprint_r>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d14c      	bne.n	800f376 <_vfprintf_r+0xf76>
 800f2dc:	ac2c      	add	r4, sp, #176	; 0xb0
 800f2de:	e7c5      	b.n	800f26c <_vfprintf_r+0xe6c>
 800f2e0:	2e00      	cmp	r6, #0
 800f2e2:	dde3      	ble.n	800f2ac <_vfprintf_r+0xeac>
 800f2e4:	4f60      	ldr	r7, [pc, #384]	; (800f468 <_vfprintf_r+0x1068>)
 800f2e6:	f04f 0910 	mov.w	r9, #16
 800f2ea:	2e10      	cmp	r6, #16
 800f2ec:	6027      	str	r7, [r4, #0]
 800f2ee:	dc04      	bgt.n	800f2fa <_vfprintf_r+0xefa>
 800f2f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2f2:	6066      	str	r6, [r4, #4]
 800f2f4:	441e      	add	r6, r3
 800f2f6:	9621      	str	r6, [sp, #132]	; 0x84
 800f2f8:	e7cb      	b.n	800f292 <_vfprintf_r+0xe92>
 800f2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2fc:	f8c4 9004 	str.w	r9, [r4, #4]
 800f300:	3310      	adds	r3, #16
 800f302:	9321      	str	r3, [sp, #132]	; 0x84
 800f304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f306:	3301      	adds	r3, #1
 800f308:	2b07      	cmp	r3, #7
 800f30a:	9320      	str	r3, [sp, #128]	; 0x80
 800f30c:	dc02      	bgt.n	800f314 <_vfprintf_r+0xf14>
 800f30e:	3408      	adds	r4, #8
 800f310:	3e10      	subs	r6, #16
 800f312:	e7ea      	b.n	800f2ea <_vfprintf_r+0xeea>
 800f314:	aa1f      	add	r2, sp, #124	; 0x7c
 800f316:	4641      	mov	r1, r8
 800f318:	4658      	mov	r0, fp
 800f31a:	f001 fe1e 	bl	8010f5a <__sprint_r>
 800f31e:	bb50      	cbnz	r0, 800f376 <_vfprintf_r+0xf76>
 800f320:	ac2c      	add	r4, sp, #176	; 0xb0
 800f322:	e7f5      	b.n	800f310 <_vfprintf_r+0xf10>
 800f324:	2301      	movs	r3, #1
 800f326:	6063      	str	r3, [r4, #4]
 800f328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f32a:	f8c4 9000 	str.w	r9, [r4]
 800f32e:	3301      	adds	r3, #1
 800f330:	e7ae      	b.n	800f290 <_vfprintf_r+0xe90>
 800f332:	3408      	adds	r4, #8
 800f334:	e7ba      	b.n	800f2ac <_vfprintf_r+0xeac>
 800f336:	3408      	adds	r4, #8
 800f338:	f7ff bbeb 	b.w	800eb12 <_vfprintf_r+0x712>
 800f33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f340:	1a9d      	subs	r5, r3, r2
 800f342:	2d00      	cmp	r5, #0
 800f344:	f77f abe8 	ble.w	800eb18 <_vfprintf_r+0x718>
 800f348:	2610      	movs	r6, #16
 800f34a:	4b48      	ldr	r3, [pc, #288]	; (800f46c <_vfprintf_r+0x106c>)
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	2d10      	cmp	r5, #16
 800f350:	dc24      	bgt.n	800f39c <_vfprintf_r+0xf9c>
 800f352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f354:	6065      	str	r5, [r4, #4]
 800f356:	441d      	add	r5, r3
 800f358:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f35a:	9521      	str	r5, [sp, #132]	; 0x84
 800f35c:	3301      	adds	r3, #1
 800f35e:	2b07      	cmp	r3, #7
 800f360:	9320      	str	r3, [sp, #128]	; 0x80
 800f362:	f77f abd9 	ble.w	800eb18 <_vfprintf_r+0x718>
 800f366:	aa1f      	add	r2, sp, #124	; 0x7c
 800f368:	4641      	mov	r1, r8
 800f36a:	4658      	mov	r0, fp
 800f36c:	f001 fdf5 	bl	8010f5a <__sprint_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	f43f abd1 	beq.w	800eb18 <_vfprintf_r+0x718>
 800f376:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d407      	bmi.n	800f38e <_vfprintf_r+0xf8e>
 800f37e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800f382:	059a      	lsls	r2, r3, #22
 800f384:	d403      	bmi.n	800f38e <_vfprintf_r+0xf8e>
 800f386:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800f38a:	f001 fa66 	bl	801085a <__retarget_lock_release_recursive>
 800f38e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800f392:	065b      	lsls	r3, r3, #25
 800f394:	f57f a8af 	bpl.w	800e4f6 <_vfprintf_r+0xf6>
 800f398:	f7ff b882 	b.w	800e4a0 <_vfprintf_r+0xa0>
 800f39c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f39e:	6066      	str	r6, [r4, #4]
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	9321      	str	r3, [sp, #132]	; 0x84
 800f3a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	2b07      	cmp	r3, #7
 800f3aa:	9320      	str	r3, [sp, #128]	; 0x80
 800f3ac:	dc02      	bgt.n	800f3b4 <_vfprintf_r+0xfb4>
 800f3ae:	3408      	adds	r4, #8
 800f3b0:	3d10      	subs	r5, #16
 800f3b2:	e7ca      	b.n	800f34a <_vfprintf_r+0xf4a>
 800f3b4:	aa1f      	add	r2, sp, #124	; 0x7c
 800f3b6:	4641      	mov	r1, r8
 800f3b8:	4658      	mov	r0, fp
 800f3ba:	f001 fdce 	bl	8010f5a <__sprint_r>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d1d9      	bne.n	800f376 <_vfprintf_r+0xf76>
 800f3c2:	ac2c      	add	r4, sp, #176	; 0xb0
 800f3c4:	e7f4      	b.n	800f3b0 <_vfprintf_r+0xfb0>
 800f3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3c8:	b913      	cbnz	r3, 800f3d0 <_vfprintf_r+0xfd0>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9320      	str	r3, [sp, #128]	; 0x80
 800f3ce:	e7d2      	b.n	800f376 <_vfprintf_r+0xf76>
 800f3d0:	aa1f      	add	r2, sp, #124	; 0x7c
 800f3d2:	4641      	mov	r1, r8
 800f3d4:	4658      	mov	r0, fp
 800f3d6:	f001 fdc0 	bl	8010f5a <__sprint_r>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d0f5      	beq.n	800f3ca <_vfprintf_r+0xfca>
 800f3de:	e7ca      	b.n	800f376 <_vfprintf_r+0xf76>
 800f3e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	f7f1 fbac 	bl	8000b44 <__aeabi_dcmpun>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	f43f aa36 	beq.w	800e85e <_vfprintf_r+0x45e>
 800f3f2:	4b1f      	ldr	r3, [pc, #124]	; (800f470 <_vfprintf_r+0x1070>)
 800f3f4:	4a1f      	ldr	r2, [pc, #124]	; (800f474 <_vfprintf_r+0x1074>)
 800f3f6:	f7ff ba26 	b.w	800e846 <_vfprintf_r+0x446>
 800f3fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3fc:	1a1b      	subs	r3, r3, r0
 800f3fe:	9303      	str	r3, [sp, #12]
 800f400:	f7ff baa9 	b.w	800e956 <_vfprintf_r+0x556>
 800f404:	ea56 0207 	orrs.w	r2, r6, r7
 800f408:	9508      	str	r5, [sp, #32]
 800f40a:	f43f ac1e 	beq.w	800ec4a <_vfprintf_r+0x84a>
 800f40e:	2b01      	cmp	r3, #1
 800f410:	f43f ac8f 	beq.w	800ed32 <_vfprintf_r+0x932>
 800f414:	2b02      	cmp	r3, #2
 800f416:	f43f acaf 	beq.w	800ed78 <_vfprintf_r+0x978>
 800f41a:	ab2c      	add	r3, sp, #176	; 0xb0
 800f41c:	08f1      	lsrs	r1, r6, #3
 800f41e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800f422:	08f8      	lsrs	r0, r7, #3
 800f424:	f006 0207 	and.w	r2, r6, #7
 800f428:	4607      	mov	r7, r0
 800f42a:	460e      	mov	r6, r1
 800f42c:	3230      	adds	r2, #48	; 0x30
 800f42e:	ea56 0107 	orrs.w	r1, r6, r7
 800f432:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800f436:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f43a:	f47f ac78 	bne.w	800ed2e <_vfprintf_r+0x92e>
 800f43e:	9908      	ldr	r1, [sp, #32]
 800f440:	07cd      	lsls	r5, r1, #31
 800f442:	d506      	bpl.n	800f452 <_vfprintf_r+0x1052>
 800f444:	2a30      	cmp	r2, #48	; 0x30
 800f446:	d004      	beq.n	800f452 <_vfprintf_r+0x1052>
 800f448:	2230      	movs	r2, #48	; 0x30
 800f44a:	f809 2c01 	strb.w	r2, [r9, #-1]
 800f44e:	f1a3 0902 	sub.w	r9, r3, #2
 800f452:	4656      	mov	r6, sl
 800f454:	2300      	movs	r3, #0
 800f456:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 800f45a:	9d08      	ldr	r5, [sp, #32]
 800f45c:	9308      	str	r3, [sp, #32]
 800f45e:	ebaa 0a09 	sub.w	sl, sl, r9
 800f462:	f7ff bac6 	b.w	800e9f2 <_vfprintf_r+0x5f2>
 800f466:	bf00      	nop
 800f468:	080e7840 	.word	0x080e7840
 800f46c:	080e7830 	.word	0x080e7830
 800f470:	080e7804 	.word	0x080e7804
 800f474:	080e7808 	.word	0x080e7808

0800f478 <__sbprintf>:
 800f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47a:	460c      	mov	r4, r1
 800f47c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800f480:	461f      	mov	r7, r3
 800f482:	8989      	ldrh	r1, [r1, #12]
 800f484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f486:	9319      	str	r3, [sp, #100]	; 0x64
 800f488:	89e3      	ldrh	r3, [r4, #14]
 800f48a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f48e:	f021 0102 	bic.w	r1, r1, #2
 800f492:	6a23      	ldr	r3, [r4, #32]
 800f494:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f498:	9308      	str	r3, [sp, #32]
 800f49a:	a91a      	add	r1, sp, #104	; 0x68
 800f49c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f49e:	930a      	str	r3, [sp, #40]	; 0x28
 800f4a0:	4615      	mov	r5, r2
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	9100      	str	r1, [sp, #0]
 800f4a8:	9104      	str	r1, [sp, #16]
 800f4aa:	a816      	add	r0, sp, #88	; 0x58
 800f4ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f4b0:	9102      	str	r1, [sp, #8]
 800f4b2:	9105      	str	r1, [sp, #20]
 800f4b4:	9306      	str	r3, [sp, #24]
 800f4b6:	f001 f9cd 	bl	8010854 <__retarget_lock_init_recursive>
 800f4ba:	462a      	mov	r2, r5
 800f4bc:	463b      	mov	r3, r7
 800f4be:	4669      	mov	r1, sp
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7fe ff9d 	bl	800e400 <_vfprintf_r>
 800f4c6:	1e05      	subs	r5, r0, #0
 800f4c8:	db07      	blt.n	800f4da <__sbprintf+0x62>
 800f4ca:	4669      	mov	r1, sp
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f000 ff6f 	bl	80103b0 <_fflush_r>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	bf18      	it	ne
 800f4d6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800f4da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f4de:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f4e0:	065b      	lsls	r3, r3, #25
 800f4e2:	bf42      	ittt	mi
 800f4e4:	89a3      	ldrhmi	r3, [r4, #12]
 800f4e6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f4ea:	81a3      	strhmi	r3, [r4, #12]
 800f4ec:	f001 f9b3 	bl	8010856 <__retarget_lock_close_recursive>
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800f4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4f8 <__swsetup_r>:
 800f4f8:	4b32      	ldr	r3, [pc, #200]	; (800f5c4 <__swsetup_r+0xcc>)
 800f4fa:	b570      	push	{r4, r5, r6, lr}
 800f4fc:	681d      	ldr	r5, [r3, #0]
 800f4fe:	4606      	mov	r6, r0
 800f500:	460c      	mov	r4, r1
 800f502:	b125      	cbz	r5, 800f50e <__swsetup_r+0x16>
 800f504:	69ab      	ldr	r3, [r5, #24]
 800f506:	b913      	cbnz	r3, 800f50e <__swsetup_r+0x16>
 800f508:	4628      	mov	r0, r5
 800f50a:	f000 ffe5 	bl	80104d8 <__sinit>
 800f50e:	4b2e      	ldr	r3, [pc, #184]	; (800f5c8 <__swsetup_r+0xd0>)
 800f510:	429c      	cmp	r4, r3
 800f512:	d10f      	bne.n	800f534 <__swsetup_r+0x3c>
 800f514:	686c      	ldr	r4, [r5, #4]
 800f516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	0715      	lsls	r5, r2, #28
 800f51e:	d42c      	bmi.n	800f57a <__swsetup_r+0x82>
 800f520:	06d0      	lsls	r0, r2, #27
 800f522:	d411      	bmi.n	800f548 <__swsetup_r+0x50>
 800f524:	2209      	movs	r2, #9
 800f526:	6032      	str	r2, [r6, #0]
 800f528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f52c:	81a3      	strh	r3, [r4, #12]
 800f52e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	4b25      	ldr	r3, [pc, #148]	; (800f5cc <__swsetup_r+0xd4>)
 800f536:	429c      	cmp	r4, r3
 800f538:	d101      	bne.n	800f53e <__swsetup_r+0x46>
 800f53a:	68ac      	ldr	r4, [r5, #8]
 800f53c:	e7eb      	b.n	800f516 <__swsetup_r+0x1e>
 800f53e:	4b24      	ldr	r3, [pc, #144]	; (800f5d0 <__swsetup_r+0xd8>)
 800f540:	429c      	cmp	r4, r3
 800f542:	bf08      	it	eq
 800f544:	68ec      	ldreq	r4, [r5, #12]
 800f546:	e7e6      	b.n	800f516 <__swsetup_r+0x1e>
 800f548:	0751      	lsls	r1, r2, #29
 800f54a:	d512      	bpl.n	800f572 <__swsetup_r+0x7a>
 800f54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f54e:	b141      	cbz	r1, 800f562 <__swsetup_r+0x6a>
 800f550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f554:	4299      	cmp	r1, r3
 800f556:	d002      	beq.n	800f55e <__swsetup_r+0x66>
 800f558:	4630      	mov	r0, r6
 800f55a:	f001 f893 	bl	8010684 <_free_r>
 800f55e:	2300      	movs	r3, #0
 800f560:	6363      	str	r3, [r4, #52]	; 0x34
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f568:	81a3      	strh	r3, [r4, #12]
 800f56a:	2300      	movs	r3, #0
 800f56c:	6063      	str	r3, [r4, #4]
 800f56e:	6923      	ldr	r3, [r4, #16]
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	f043 0308 	orr.w	r3, r3, #8
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	b94b      	cbnz	r3, 800f592 <__swsetup_r+0x9a>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f588:	d003      	beq.n	800f592 <__swsetup_r+0x9a>
 800f58a:	4621      	mov	r1, r4
 800f58c:	4630      	mov	r0, r6
 800f58e:	f001 f991 	bl	80108b4 <__smakebuf_r>
 800f592:	89a2      	ldrh	r2, [r4, #12]
 800f594:	f012 0301 	ands.w	r3, r2, #1
 800f598:	d00c      	beq.n	800f5b4 <__swsetup_r+0xbc>
 800f59a:	2300      	movs	r3, #0
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	6963      	ldr	r3, [r4, #20]
 800f5a0:	425b      	negs	r3, r3
 800f5a2:	61a3      	str	r3, [r4, #24]
 800f5a4:	6923      	ldr	r3, [r4, #16]
 800f5a6:	b953      	cbnz	r3, 800f5be <__swsetup_r+0xc6>
 800f5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f5b0:	d1ba      	bne.n	800f528 <__swsetup_r+0x30>
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}
 800f5b4:	0792      	lsls	r2, r2, #30
 800f5b6:	bf58      	it	pl
 800f5b8:	6963      	ldrpl	r3, [r4, #20]
 800f5ba:	60a3      	str	r3, [r4, #8]
 800f5bc:	e7f2      	b.n	800f5a4 <__swsetup_r+0xac>
 800f5be:	2000      	movs	r0, #0
 800f5c0:	e7f7      	b.n	800f5b2 <__swsetup_r+0xba>
 800f5c2:	bf00      	nop
 800f5c4:	200000e0 	.word	0x200000e0
 800f5c8:	080e7880 	.word	0x080e7880
 800f5cc:	080e78a0 	.word	0x080e78a0
 800f5d0:	080e7860 	.word	0x080e7860

0800f5d4 <quorem>:
 800f5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	6903      	ldr	r3, [r0, #16]
 800f5da:	690c      	ldr	r4, [r1, #16]
 800f5dc:	429c      	cmp	r4, r3
 800f5de:	4680      	mov	r8, r0
 800f5e0:	f300 8082 	bgt.w	800f6e8 <quorem+0x114>
 800f5e4:	3c01      	subs	r4, #1
 800f5e6:	f101 0714 	add.w	r7, r1, #20
 800f5ea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800f5ee:	f100 0614 	add.w	r6, r0, #20
 800f5f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f5f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f5fa:	eb06 030e 	add.w	r3, r6, lr
 800f5fe:	3501      	adds	r5, #1
 800f600:	eb07 090e 	add.w	r9, r7, lr
 800f604:	9301      	str	r3, [sp, #4]
 800f606:	fbb0 f5f5 	udiv	r5, r0, r5
 800f60a:	b395      	cbz	r5, 800f672 <quorem+0x9e>
 800f60c:	f04f 0a00 	mov.w	sl, #0
 800f610:	4638      	mov	r0, r7
 800f612:	46b4      	mov	ip, r6
 800f614:	46d3      	mov	fp, sl
 800f616:	f850 2b04 	ldr.w	r2, [r0], #4
 800f61a:	b293      	uxth	r3, r2
 800f61c:	fb05 a303 	mla	r3, r5, r3, sl
 800f620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f624:	b29b      	uxth	r3, r3
 800f626:	ebab 0303 	sub.w	r3, fp, r3
 800f62a:	0c12      	lsrs	r2, r2, #16
 800f62c:	f8bc b000 	ldrh.w	fp, [ip]
 800f630:	fb05 a202 	mla	r2, r5, r2, sl
 800f634:	fa13 f38b 	uxtah	r3, r3, fp
 800f638:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f63c:	fa1f fb82 	uxth.w	fp, r2
 800f640:	f8dc 2000 	ldr.w	r2, [ip]
 800f644:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f652:	4581      	cmp	r9, r0
 800f654:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f658:	f84c 3b04 	str.w	r3, [ip], #4
 800f65c:	d2db      	bcs.n	800f616 <quorem+0x42>
 800f65e:	f856 300e 	ldr.w	r3, [r6, lr]
 800f662:	b933      	cbnz	r3, 800f672 <quorem+0x9e>
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	3b04      	subs	r3, #4
 800f668:	429e      	cmp	r6, r3
 800f66a:	461a      	mov	r2, r3
 800f66c:	d330      	bcc.n	800f6d0 <quorem+0xfc>
 800f66e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f672:	4640      	mov	r0, r8
 800f674:	f001 fb67 	bl	8010d46 <__mcmp>
 800f678:	2800      	cmp	r0, #0
 800f67a:	db25      	blt.n	800f6c8 <quorem+0xf4>
 800f67c:	3501      	adds	r5, #1
 800f67e:	4630      	mov	r0, r6
 800f680:	f04f 0e00 	mov.w	lr, #0
 800f684:	f857 2b04 	ldr.w	r2, [r7], #4
 800f688:	f8d0 c000 	ldr.w	ip, [r0]
 800f68c:	b293      	uxth	r3, r2
 800f68e:	ebae 0303 	sub.w	r3, lr, r3
 800f692:	0c12      	lsrs	r2, r2, #16
 800f694:	fa13 f38c 	uxtah	r3, r3, ip
 800f698:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a6:	45b9      	cmp	r9, r7
 800f6a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f6ac:	f840 3b04 	str.w	r3, [r0], #4
 800f6b0:	d2e8      	bcs.n	800f684 <quorem+0xb0>
 800f6b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f6b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f6ba:	b92a      	cbnz	r2, 800f6c8 <quorem+0xf4>
 800f6bc:	3b04      	subs	r3, #4
 800f6be:	429e      	cmp	r6, r3
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	d30b      	bcc.n	800f6dc <quorem+0x108>
 800f6c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	b003      	add	sp, #12
 800f6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d0:	6812      	ldr	r2, [r2, #0]
 800f6d2:	3b04      	subs	r3, #4
 800f6d4:	2a00      	cmp	r2, #0
 800f6d6:	d1ca      	bne.n	800f66e <quorem+0x9a>
 800f6d8:	3c01      	subs	r4, #1
 800f6da:	e7c5      	b.n	800f668 <quorem+0x94>
 800f6dc:	6812      	ldr	r2, [r2, #0]
 800f6de:	3b04      	subs	r3, #4
 800f6e0:	2a00      	cmp	r2, #0
 800f6e2:	d1ef      	bne.n	800f6c4 <quorem+0xf0>
 800f6e4:	3c01      	subs	r4, #1
 800f6e6:	e7ea      	b.n	800f6be <quorem+0xea>
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	e7ee      	b.n	800f6ca <quorem+0xf6>
 800f6ec:	0000      	movs	r0, r0
	...

0800f6f0 <_dtoa_r>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	ec57 6b10 	vmov	r6, r7, d0
 800f6f8:	b097      	sub	sp, #92	; 0x5c
 800f6fa:	e9cd 6700 	strd	r6, r7, [sp]
 800f6fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f700:	9107      	str	r1, [sp, #28]
 800f702:	4604      	mov	r4, r0
 800f704:	920a      	str	r2, [sp, #40]	; 0x28
 800f706:	930f      	str	r3, [sp, #60]	; 0x3c
 800f708:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800f70a:	b93e      	cbnz	r6, 800f71c <_dtoa_r+0x2c>
 800f70c:	2010      	movs	r0, #16
 800f70e:	f7fe fc09 	bl	800df24 <malloc>
 800f712:	6260      	str	r0, [r4, #36]	; 0x24
 800f714:	6046      	str	r6, [r0, #4]
 800f716:	6086      	str	r6, [r0, #8]
 800f718:	6006      	str	r6, [r0, #0]
 800f71a:	60c6      	str	r6, [r0, #12]
 800f71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f71e:	6819      	ldr	r1, [r3, #0]
 800f720:	b151      	cbz	r1, 800f738 <_dtoa_r+0x48>
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	604a      	str	r2, [r1, #4]
 800f726:	2301      	movs	r3, #1
 800f728:	4093      	lsls	r3, r2
 800f72a:	608b      	str	r3, [r1, #8]
 800f72c:	4620      	mov	r0, r4
 800f72e:	f001 f935 	bl	801099c <_Bfree>
 800f732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
 800f738:	9b01      	ldr	r3, [sp, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	bfbf      	itttt	lt
 800f73e:	2301      	movlt	r3, #1
 800f740:	602b      	strlt	r3, [r5, #0]
 800f742:	9b01      	ldrlt	r3, [sp, #4]
 800f744:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f748:	bfb2      	itee	lt
 800f74a:	9301      	strlt	r3, [sp, #4]
 800f74c:	2300      	movge	r3, #0
 800f74e:	602b      	strge	r3, [r5, #0]
 800f750:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f754:	4ba8      	ldr	r3, [pc, #672]	; (800f9f8 <_dtoa_r+0x308>)
 800f756:	ea33 0308 	bics.w	r3, r3, r8
 800f75a:	d11b      	bne.n	800f794 <_dtoa_r+0xa4>
 800f75c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f75e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	9b00      	ldr	r3, [sp, #0]
 800f766:	b923      	cbnz	r3, 800f772 <_dtoa_r+0x82>
 800f768:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f76c:	2800      	cmp	r0, #0
 800f76e:	f000 8578 	beq.w	8010262 <_dtoa_r+0xb72>
 800f772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f774:	b953      	cbnz	r3, 800f78c <_dtoa_r+0x9c>
 800f776:	4ba1      	ldr	r3, [pc, #644]	; (800f9fc <_dtoa_r+0x30c>)
 800f778:	e021      	b.n	800f7be <_dtoa_r+0xce>
 800f77a:	4ba1      	ldr	r3, [pc, #644]	; (800fa00 <_dtoa_r+0x310>)
 800f77c:	9302      	str	r3, [sp, #8]
 800f77e:	3308      	adds	r3, #8
 800f780:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	9802      	ldr	r0, [sp, #8]
 800f786:	b017      	add	sp, #92	; 0x5c
 800f788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78c:	4b9b      	ldr	r3, [pc, #620]	; (800f9fc <_dtoa_r+0x30c>)
 800f78e:	9302      	str	r3, [sp, #8]
 800f790:	3303      	adds	r3, #3
 800f792:	e7f5      	b.n	800f780 <_dtoa_r+0x90>
 800f794:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f798:	2200      	movs	r2, #0
 800f79a:	2300      	movs	r3, #0
 800f79c:	4630      	mov	r0, r6
 800f79e:	4639      	mov	r1, r7
 800f7a0:	f7f1 f99e 	bl	8000ae0 <__aeabi_dcmpeq>
 800f7a4:	4681      	mov	r9, r0
 800f7a6:	b160      	cbz	r0, 800f7c2 <_dtoa_r+0xd2>
 800f7a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 8553 	beq.w	801025c <_dtoa_r+0xb6c>
 800f7b6:	4b93      	ldr	r3, [pc, #588]	; (800fa04 <_dtoa_r+0x314>)
 800f7b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7ba:	6013      	str	r3, [r2, #0]
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	9302      	str	r3, [sp, #8]
 800f7c0:	e7e0      	b.n	800f784 <_dtoa_r+0x94>
 800f7c2:	aa14      	add	r2, sp, #80	; 0x50
 800f7c4:	a915      	add	r1, sp, #84	; 0x54
 800f7c6:	ec47 6b10 	vmov	d0, r6, r7
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f001 fb33 	bl	8010e36 <__d2b>
 800f7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f7d4:	4682      	mov	sl, r0
 800f7d6:	2d00      	cmp	r5, #0
 800f7d8:	d07e      	beq.n	800f8d8 <_dtoa_r+0x1e8>
 800f7da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f7e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f7ec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4b85      	ldr	r3, [pc, #532]	; (800fa08 <_dtoa_r+0x318>)
 800f7f4:	f7f0 fd58 	bl	80002a8 <__aeabi_dsub>
 800f7f8:	a379      	add	r3, pc, #484	; (adr r3, 800f9e0 <_dtoa_r+0x2f0>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f7f0 ff07 	bl	8000610 <__aeabi_dmul>
 800f802:	a379      	add	r3, pc, #484	; (adr r3, 800f9e8 <_dtoa_r+0x2f8>)
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	f7f0 fd50 	bl	80002ac <__adddf3>
 800f80c:	4606      	mov	r6, r0
 800f80e:	4628      	mov	r0, r5
 800f810:	460f      	mov	r7, r1
 800f812:	f7f0 fe97 	bl	8000544 <__aeabi_i2d>
 800f816:	a376      	add	r3, pc, #472	; (adr r3, 800f9f0 <_dtoa_r+0x300>)
 800f818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81c:	f7f0 fef8 	bl	8000610 <__aeabi_dmul>
 800f820:	4602      	mov	r2, r0
 800f822:	460b      	mov	r3, r1
 800f824:	4630      	mov	r0, r6
 800f826:	4639      	mov	r1, r7
 800f828:	f7f0 fd40 	bl	80002ac <__adddf3>
 800f82c:	4606      	mov	r6, r0
 800f82e:	460f      	mov	r7, r1
 800f830:	f7f1 f99e 	bl	8000b70 <__aeabi_d2iz>
 800f834:	2200      	movs	r2, #0
 800f836:	4683      	mov	fp, r0
 800f838:	2300      	movs	r3, #0
 800f83a:	4630      	mov	r0, r6
 800f83c:	4639      	mov	r1, r7
 800f83e:	f7f1 f959 	bl	8000af4 <__aeabi_dcmplt>
 800f842:	b158      	cbz	r0, 800f85c <_dtoa_r+0x16c>
 800f844:	4658      	mov	r0, fp
 800f846:	f7f0 fe7d 	bl	8000544 <__aeabi_i2d>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	4630      	mov	r0, r6
 800f850:	4639      	mov	r1, r7
 800f852:	f7f1 f945 	bl	8000ae0 <__aeabi_dcmpeq>
 800f856:	b908      	cbnz	r0, 800f85c <_dtoa_r+0x16c>
 800f858:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f85c:	f1bb 0f16 	cmp.w	fp, #22
 800f860:	d859      	bhi.n	800f916 <_dtoa_r+0x226>
 800f862:	496a      	ldr	r1, [pc, #424]	; (800fa0c <_dtoa_r+0x31c>)
 800f864:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800f868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f870:	f7f1 f95e 	bl	8000b30 <__aeabi_dcmpgt>
 800f874:	2800      	cmp	r0, #0
 800f876:	d050      	beq.n	800f91a <_dtoa_r+0x22a>
 800f878:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f87c:	2300      	movs	r3, #0
 800f87e:	930e      	str	r3, [sp, #56]	; 0x38
 800f880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f882:	1b5d      	subs	r5, r3, r5
 800f884:	1e6b      	subs	r3, r5, #1
 800f886:	9306      	str	r3, [sp, #24]
 800f888:	bf45      	ittet	mi
 800f88a:	f1c5 0301 	rsbmi	r3, r5, #1
 800f88e:	9305      	strmi	r3, [sp, #20]
 800f890:	2300      	movpl	r3, #0
 800f892:	2300      	movmi	r3, #0
 800f894:	bf4c      	ite	mi
 800f896:	9306      	strmi	r3, [sp, #24]
 800f898:	9305      	strpl	r3, [sp, #20]
 800f89a:	f1bb 0f00 	cmp.w	fp, #0
 800f89e:	db3e      	blt.n	800f91e <_dtoa_r+0x22e>
 800f8a0:	9b06      	ldr	r3, [sp, #24]
 800f8a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f8a6:	445b      	add	r3, fp
 800f8a8:	9306      	str	r3, [sp, #24]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	9308      	str	r3, [sp, #32]
 800f8ae:	9b07      	ldr	r3, [sp, #28]
 800f8b0:	2b09      	cmp	r3, #9
 800f8b2:	f200 80af 	bhi.w	800fa14 <_dtoa_r+0x324>
 800f8b6:	2b05      	cmp	r3, #5
 800f8b8:	bfc4      	itt	gt
 800f8ba:	3b04      	subgt	r3, #4
 800f8bc:	9307      	strgt	r3, [sp, #28]
 800f8be:	9b07      	ldr	r3, [sp, #28]
 800f8c0:	f1a3 0302 	sub.w	r3, r3, #2
 800f8c4:	bfcc      	ite	gt
 800f8c6:	2600      	movgt	r6, #0
 800f8c8:	2601      	movle	r6, #1
 800f8ca:	2b03      	cmp	r3, #3
 800f8cc:	f200 80ae 	bhi.w	800fa2c <_dtoa_r+0x33c>
 800f8d0:	e8df f003 	tbb	[pc, r3]
 800f8d4:	772f8482 	.word	0x772f8482
 800f8d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f8dc:	441d      	add	r5, r3
 800f8de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f8e2:	2b20      	cmp	r3, #32
 800f8e4:	dd11      	ble.n	800f90a <_dtoa_r+0x21a>
 800f8e6:	9a00      	ldr	r2, [sp, #0]
 800f8e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f8ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800f8f0:	fa22 f000 	lsr.w	r0, r2, r0
 800f8f4:	fa08 f303 	lsl.w	r3, r8, r3
 800f8f8:	4318      	orrs	r0, r3
 800f8fa:	f7f0 fe13 	bl	8000524 <__aeabi_ui2d>
 800f8fe:	2301      	movs	r3, #1
 800f900:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f904:	3d01      	subs	r5, #1
 800f906:	9312      	str	r3, [sp, #72]	; 0x48
 800f908:	e772      	b.n	800f7f0 <_dtoa_r+0x100>
 800f90a:	f1c3 0020 	rsb	r0, r3, #32
 800f90e:	9b00      	ldr	r3, [sp, #0]
 800f910:	fa03 f000 	lsl.w	r0, r3, r0
 800f914:	e7f1      	b.n	800f8fa <_dtoa_r+0x20a>
 800f916:	2301      	movs	r3, #1
 800f918:	e7b1      	b.n	800f87e <_dtoa_r+0x18e>
 800f91a:	900e      	str	r0, [sp, #56]	; 0x38
 800f91c:	e7b0      	b.n	800f880 <_dtoa_r+0x190>
 800f91e:	9b05      	ldr	r3, [sp, #20]
 800f920:	eba3 030b 	sub.w	r3, r3, fp
 800f924:	9305      	str	r3, [sp, #20]
 800f926:	f1cb 0300 	rsb	r3, fp, #0
 800f92a:	9308      	str	r3, [sp, #32]
 800f92c:	2300      	movs	r3, #0
 800f92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f930:	e7bd      	b.n	800f8ae <_dtoa_r+0x1be>
 800f932:	2301      	movs	r3, #1
 800f934:	9309      	str	r3, [sp, #36]	; 0x24
 800f936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dd7a      	ble.n	800fa32 <_dtoa_r+0x342>
 800f93c:	9304      	str	r3, [sp, #16]
 800f93e:	9303      	str	r3, [sp, #12]
 800f940:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f942:	2200      	movs	r2, #0
 800f944:	606a      	str	r2, [r5, #4]
 800f946:	2104      	movs	r1, #4
 800f948:	f101 0214 	add.w	r2, r1, #20
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d975      	bls.n	800fa3c <_dtoa_r+0x34c>
 800f950:	6869      	ldr	r1, [r5, #4]
 800f952:	4620      	mov	r0, r4
 800f954:	f000 ffee 	bl	8010934 <_Balloc>
 800f958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f95a:	6028      	str	r0, [r5, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	9302      	str	r3, [sp, #8]
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	2b0e      	cmp	r3, #14
 800f964:	f200 80e5 	bhi.w	800fb32 <_dtoa_r+0x442>
 800f968:	2e00      	cmp	r6, #0
 800f96a:	f000 80e2 	beq.w	800fb32 <_dtoa_r+0x442>
 800f96e:	ed9d 7b00 	vldr	d7, [sp]
 800f972:	f1bb 0f00 	cmp.w	fp, #0
 800f976:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f97a:	dd74      	ble.n	800fa66 <_dtoa_r+0x376>
 800f97c:	4a23      	ldr	r2, [pc, #140]	; (800fa0c <_dtoa_r+0x31c>)
 800f97e:	f00b 030f 	and.w	r3, fp, #15
 800f982:	ea4f 162b 	mov.w	r6, fp, asr #4
 800f986:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f98a:	06f0      	lsls	r0, r6, #27
 800f98c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f990:	d559      	bpl.n	800fa46 <_dtoa_r+0x356>
 800f992:	4b1f      	ldr	r3, [pc, #124]	; (800fa10 <_dtoa_r+0x320>)
 800f994:	ec51 0b17 	vmov	r0, r1, d7
 800f998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f99c:	f7f0 ff62 	bl	8000864 <__aeabi_ddiv>
 800f9a0:	e9cd 0100 	strd	r0, r1, [sp]
 800f9a4:	f006 060f 	and.w	r6, r6, #15
 800f9a8:	2503      	movs	r5, #3
 800f9aa:	4f19      	ldr	r7, [pc, #100]	; (800fa10 <_dtoa_r+0x320>)
 800f9ac:	2e00      	cmp	r6, #0
 800f9ae:	d14c      	bne.n	800fa4a <_dtoa_r+0x35a>
 800f9b0:	4642      	mov	r2, r8
 800f9b2:	464b      	mov	r3, r9
 800f9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9b8:	f7f0 ff54 	bl	8000864 <__aeabi_ddiv>
 800f9bc:	e9cd 0100 	strd	r0, r1, [sp]
 800f9c0:	e06a      	b.n	800fa98 <_dtoa_r+0x3a8>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c8:	445b      	add	r3, fp
 800f9ca:	9304      	str	r3, [sp, #16]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	9303      	str	r3, [sp, #12]
 800f9d2:	bfb8      	it	lt
 800f9d4:	2301      	movlt	r3, #1
 800f9d6:	e7b3      	b.n	800f940 <_dtoa_r+0x250>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	e7ab      	b.n	800f934 <_dtoa_r+0x244>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	e7f1      	b.n	800f9c4 <_dtoa_r+0x2d4>
 800f9e0:	636f4361 	.word	0x636f4361
 800f9e4:	3fd287a7 	.word	0x3fd287a7
 800f9e8:	8b60c8b3 	.word	0x8b60c8b3
 800f9ec:	3fc68a28 	.word	0x3fc68a28
 800f9f0:	509f79fb 	.word	0x509f79fb
 800f9f4:	3fd34413 	.word	0x3fd34413
 800f9f8:	7ff00000 	.word	0x7ff00000
 800f9fc:	080e7859 	.word	0x080e7859
 800fa00:	080e7850 	.word	0x080e7850
 800fa04:	080e782f 	.word	0x080e782f
 800fa08:	3ff80000 	.word	0x3ff80000
 800fa0c:	080e78e8 	.word	0x080e78e8
 800fa10:	080e78c0 	.word	0x080e78c0
 800fa14:	2601      	movs	r6, #1
 800fa16:	2300      	movs	r3, #0
 800fa18:	9307      	str	r3, [sp, #28]
 800fa1a:	9609      	str	r6, [sp, #36]	; 0x24
 800fa1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa20:	9304      	str	r3, [sp, #16]
 800fa22:	9303      	str	r3, [sp, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	2312      	movs	r3, #18
 800fa28:	920a      	str	r2, [sp, #40]	; 0x28
 800fa2a:	e789      	b.n	800f940 <_dtoa_r+0x250>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa30:	e7f4      	b.n	800fa1c <_dtoa_r+0x32c>
 800fa32:	2301      	movs	r3, #1
 800fa34:	9304      	str	r3, [sp, #16]
 800fa36:	9303      	str	r3, [sp, #12]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	e7f5      	b.n	800fa28 <_dtoa_r+0x338>
 800fa3c:	686a      	ldr	r2, [r5, #4]
 800fa3e:	3201      	adds	r2, #1
 800fa40:	606a      	str	r2, [r5, #4]
 800fa42:	0049      	lsls	r1, r1, #1
 800fa44:	e780      	b.n	800f948 <_dtoa_r+0x258>
 800fa46:	2502      	movs	r5, #2
 800fa48:	e7af      	b.n	800f9aa <_dtoa_r+0x2ba>
 800fa4a:	07f1      	lsls	r1, r6, #31
 800fa4c:	d508      	bpl.n	800fa60 <_dtoa_r+0x370>
 800fa4e:	4640      	mov	r0, r8
 800fa50:	4649      	mov	r1, r9
 800fa52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa56:	f7f0 fddb 	bl	8000610 <__aeabi_dmul>
 800fa5a:	3501      	adds	r5, #1
 800fa5c:	4680      	mov	r8, r0
 800fa5e:	4689      	mov	r9, r1
 800fa60:	1076      	asrs	r6, r6, #1
 800fa62:	3708      	adds	r7, #8
 800fa64:	e7a2      	b.n	800f9ac <_dtoa_r+0x2bc>
 800fa66:	f000 809d 	beq.w	800fba4 <_dtoa_r+0x4b4>
 800fa6a:	f1cb 0600 	rsb	r6, fp, #0
 800fa6e:	4b9f      	ldr	r3, [pc, #636]	; (800fcec <_dtoa_r+0x5fc>)
 800fa70:	4f9f      	ldr	r7, [pc, #636]	; (800fcf0 <_dtoa_r+0x600>)
 800fa72:	f006 020f 	and.w	r2, r6, #15
 800fa76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa82:	f7f0 fdc5 	bl	8000610 <__aeabi_dmul>
 800fa86:	e9cd 0100 	strd	r0, r1, [sp]
 800fa8a:	1136      	asrs	r6, r6, #4
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2502      	movs	r5, #2
 800fa90:	2e00      	cmp	r6, #0
 800fa92:	d17c      	bne.n	800fb8e <_dtoa_r+0x49e>
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d191      	bne.n	800f9bc <_dtoa_r+0x2cc>
 800fa98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8084 	beq.w	800fba8 <_dtoa_r+0x4b8>
 800faa0:	e9dd 8900 	ldrd	r8, r9, [sp]
 800faa4:	2200      	movs	r2, #0
 800faa6:	4b93      	ldr	r3, [pc, #588]	; (800fcf4 <_dtoa_r+0x604>)
 800faa8:	4640      	mov	r0, r8
 800faaa:	4649      	mov	r1, r9
 800faac:	f7f1 f822 	bl	8000af4 <__aeabi_dcmplt>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d079      	beq.n	800fba8 <_dtoa_r+0x4b8>
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d076      	beq.n	800fba8 <_dtoa_r+0x4b8>
 800faba:	9b04      	ldr	r3, [sp, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	dd34      	ble.n	800fb2a <_dtoa_r+0x43a>
 800fac0:	2200      	movs	r2, #0
 800fac2:	4b8d      	ldr	r3, [pc, #564]	; (800fcf8 <_dtoa_r+0x608>)
 800fac4:	4640      	mov	r0, r8
 800fac6:	4649      	mov	r1, r9
 800fac8:	f7f0 fda2 	bl	8000610 <__aeabi_dmul>
 800facc:	e9cd 0100 	strd	r0, r1, [sp]
 800fad0:	9e04      	ldr	r6, [sp, #16]
 800fad2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800fad6:	3501      	adds	r5, #1
 800fad8:	4628      	mov	r0, r5
 800fada:	f7f0 fd33 	bl	8000544 <__aeabi_i2d>
 800fade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fae2:	f7f0 fd95 	bl	8000610 <__aeabi_dmul>
 800fae6:	2200      	movs	r2, #0
 800fae8:	4b84      	ldr	r3, [pc, #528]	; (800fcfc <_dtoa_r+0x60c>)
 800faea:	f7f0 fbdf 	bl	80002ac <__adddf3>
 800faee:	4680      	mov	r8, r0
 800faf0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800faf4:	2e00      	cmp	r6, #0
 800faf6:	d15a      	bne.n	800fbae <_dtoa_r+0x4be>
 800faf8:	2200      	movs	r2, #0
 800fafa:	4b81      	ldr	r3, [pc, #516]	; (800fd00 <_dtoa_r+0x610>)
 800fafc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb00:	f7f0 fbd2 	bl	80002a8 <__aeabi_dsub>
 800fb04:	4642      	mov	r2, r8
 800fb06:	464b      	mov	r3, r9
 800fb08:	e9cd 0100 	strd	r0, r1, [sp]
 800fb0c:	f7f1 f810 	bl	8000b30 <__aeabi_dcmpgt>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f040 829b 	bne.w	801004c <_dtoa_r+0x95c>
 800fb16:	4642      	mov	r2, r8
 800fb18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fb1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb20:	f7f0 ffe8 	bl	8000af4 <__aeabi_dcmplt>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	f040 828f 	bne.w	8010048 <_dtoa_r+0x958>
 800fb2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb2e:	e9cd 2300 	strd	r2, r3, [sp]
 800fb32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f2c0 8150 	blt.w	800fdda <_dtoa_r+0x6ea>
 800fb3a:	f1bb 0f0e 	cmp.w	fp, #14
 800fb3e:	f300 814c 	bgt.w	800fdda <_dtoa_r+0x6ea>
 800fb42:	4b6a      	ldr	r3, [pc, #424]	; (800fcec <_dtoa_r+0x5fc>)
 800fb44:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f280 80da 	bge.w	800fd08 <_dtoa_r+0x618>
 800fb54:	9b03      	ldr	r3, [sp, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f300 80d6 	bgt.w	800fd08 <_dtoa_r+0x618>
 800fb5c:	f040 8273 	bne.w	8010046 <_dtoa_r+0x956>
 800fb60:	2200      	movs	r2, #0
 800fb62:	4b67      	ldr	r3, [pc, #412]	; (800fd00 <_dtoa_r+0x610>)
 800fb64:	4640      	mov	r0, r8
 800fb66:	4649      	mov	r1, r9
 800fb68:	f7f0 fd52 	bl	8000610 <__aeabi_dmul>
 800fb6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb70:	f7f0 ffd4 	bl	8000b1c <__aeabi_dcmpge>
 800fb74:	9e03      	ldr	r6, [sp, #12]
 800fb76:	4637      	mov	r7, r6
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	f040 824a 	bne.w	8010012 <_dtoa_r+0x922>
 800fb7e:	9b02      	ldr	r3, [sp, #8]
 800fb80:	9a02      	ldr	r2, [sp, #8]
 800fb82:	1c5d      	adds	r5, r3, #1
 800fb84:	2331      	movs	r3, #49	; 0x31
 800fb86:	7013      	strb	r3, [r2, #0]
 800fb88:	f10b 0b01 	add.w	fp, fp, #1
 800fb8c:	e245      	b.n	801001a <_dtoa_r+0x92a>
 800fb8e:	07f2      	lsls	r2, r6, #31
 800fb90:	d505      	bpl.n	800fb9e <_dtoa_r+0x4ae>
 800fb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb96:	f7f0 fd3b 	bl	8000610 <__aeabi_dmul>
 800fb9a:	3501      	adds	r5, #1
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	1076      	asrs	r6, r6, #1
 800fba0:	3708      	adds	r7, #8
 800fba2:	e775      	b.n	800fa90 <_dtoa_r+0x3a0>
 800fba4:	2502      	movs	r5, #2
 800fba6:	e777      	b.n	800fa98 <_dtoa_r+0x3a8>
 800fba8:	465f      	mov	r7, fp
 800fbaa:	9e03      	ldr	r6, [sp, #12]
 800fbac:	e794      	b.n	800fad8 <_dtoa_r+0x3e8>
 800fbae:	9a02      	ldr	r2, [sp, #8]
 800fbb0:	4b4e      	ldr	r3, [pc, #312]	; (800fcec <_dtoa_r+0x5fc>)
 800fbb2:	4432      	add	r2, r6
 800fbb4:	9213      	str	r2, [sp, #76]	; 0x4c
 800fbb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbb8:	1e71      	subs	r1, r6, #1
 800fbba:	2a00      	cmp	r2, #0
 800fbbc:	d048      	beq.n	800fc50 <_dtoa_r+0x560>
 800fbbe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	494e      	ldr	r1, [pc, #312]	; (800fd04 <_dtoa_r+0x614>)
 800fbca:	f7f0 fe4b 	bl	8000864 <__aeabi_ddiv>
 800fbce:	4642      	mov	r2, r8
 800fbd0:	464b      	mov	r3, r9
 800fbd2:	f7f0 fb69 	bl	80002a8 <__aeabi_dsub>
 800fbd6:	9d02      	ldr	r5, [sp, #8]
 800fbd8:	4680      	mov	r8, r0
 800fbda:	4689      	mov	r9, r1
 800fbdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbe0:	f7f0 ffc6 	bl	8000b70 <__aeabi_d2iz>
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	f7f0 fcad 	bl	8000544 <__aeabi_i2d>
 800fbea:	4602      	mov	r2, r0
 800fbec:	460b      	mov	r3, r1
 800fbee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbf2:	f7f0 fb59 	bl	80002a8 <__aeabi_dsub>
 800fbf6:	3630      	adds	r6, #48	; 0x30
 800fbf8:	f805 6b01 	strb.w	r6, [r5], #1
 800fbfc:	4642      	mov	r2, r8
 800fbfe:	464b      	mov	r3, r9
 800fc00:	e9cd 0100 	strd	r0, r1, [sp]
 800fc04:	f7f0 ff76 	bl	8000af4 <__aeabi_dcmplt>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d165      	bne.n	800fcd8 <_dtoa_r+0x5e8>
 800fc0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc10:	2000      	movs	r0, #0
 800fc12:	4938      	ldr	r1, [pc, #224]	; (800fcf4 <_dtoa_r+0x604>)
 800fc14:	f7f0 fb48 	bl	80002a8 <__aeabi_dsub>
 800fc18:	4642      	mov	r2, r8
 800fc1a:	464b      	mov	r3, r9
 800fc1c:	f7f0 ff6a 	bl	8000af4 <__aeabi_dcmplt>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	f040 80ba 	bne.w	800fd9a <_dtoa_r+0x6aa>
 800fc26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc28:	429d      	cmp	r5, r3
 800fc2a:	f43f af7e 	beq.w	800fb2a <_dtoa_r+0x43a>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	4b31      	ldr	r3, [pc, #196]	; (800fcf8 <_dtoa_r+0x608>)
 800fc32:	4640      	mov	r0, r8
 800fc34:	4649      	mov	r1, r9
 800fc36:	f7f0 fceb 	bl	8000610 <__aeabi_dmul>
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	4689      	mov	r9, r1
 800fc40:	4b2d      	ldr	r3, [pc, #180]	; (800fcf8 <_dtoa_r+0x608>)
 800fc42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc46:	f7f0 fce3 	bl	8000610 <__aeabi_dmul>
 800fc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800fc4e:	e7c5      	b.n	800fbdc <_dtoa_r+0x4ec>
 800fc50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fc54:	4642      	mov	r2, r8
 800fc56:	464b      	mov	r3, r9
 800fc58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc5c:	f7f0 fcd8 	bl	8000610 <__aeabi_dmul>
 800fc60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fc64:	9d02      	ldr	r5, [sp, #8]
 800fc66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc6a:	f7f0 ff81 	bl	8000b70 <__aeabi_d2iz>
 800fc6e:	4606      	mov	r6, r0
 800fc70:	f7f0 fc68 	bl	8000544 <__aeabi_i2d>
 800fc74:	3630      	adds	r6, #48	; 0x30
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc7e:	f7f0 fb13 	bl	80002a8 <__aeabi_dsub>
 800fc82:	f805 6b01 	strb.w	r6, [r5], #1
 800fc86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc88:	42ab      	cmp	r3, r5
 800fc8a:	4680      	mov	r8, r0
 800fc8c:	4689      	mov	r9, r1
 800fc8e:	f04f 0200 	mov.w	r2, #0
 800fc92:	d125      	bne.n	800fce0 <_dtoa_r+0x5f0>
 800fc94:	4b1b      	ldr	r3, [pc, #108]	; (800fd04 <_dtoa_r+0x614>)
 800fc96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fc9a:	f7f0 fb07 	bl	80002ac <__adddf3>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 ff43 	bl	8000b30 <__aeabi_dcmpgt>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d175      	bne.n	800fd9a <_dtoa_r+0x6aa>
 800fcae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	4913      	ldr	r1, [pc, #76]	; (800fd04 <_dtoa_r+0x614>)
 800fcb6:	f7f0 faf7 	bl	80002a8 <__aeabi_dsub>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	4649      	mov	r1, r9
 800fcc2:	f7f0 ff17 	bl	8000af4 <__aeabi_dcmplt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f43f af2f 	beq.w	800fb2a <_dtoa_r+0x43a>
 800fccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fcd0:	2b30      	cmp	r3, #48	; 0x30
 800fcd2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fcd6:	d001      	beq.n	800fcdc <_dtoa_r+0x5ec>
 800fcd8:	46bb      	mov	fp, r7
 800fcda:	e04d      	b.n	800fd78 <_dtoa_r+0x688>
 800fcdc:	4615      	mov	r5, r2
 800fcde:	e7f5      	b.n	800fccc <_dtoa_r+0x5dc>
 800fce0:	4b05      	ldr	r3, [pc, #20]	; (800fcf8 <_dtoa_r+0x608>)
 800fce2:	f7f0 fc95 	bl	8000610 <__aeabi_dmul>
 800fce6:	e9cd 0100 	strd	r0, r1, [sp]
 800fcea:	e7bc      	b.n	800fc66 <_dtoa_r+0x576>
 800fcec:	080e78e8 	.word	0x080e78e8
 800fcf0:	080e78c0 	.word	0x080e78c0
 800fcf4:	3ff00000 	.word	0x3ff00000
 800fcf8:	40240000 	.word	0x40240000
 800fcfc:	401c0000 	.word	0x401c0000
 800fd00:	40140000 	.word	0x40140000
 800fd04:	3fe00000 	.word	0x3fe00000
 800fd08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd0c:	9d02      	ldr	r5, [sp, #8]
 800fd0e:	4642      	mov	r2, r8
 800fd10:	464b      	mov	r3, r9
 800fd12:	4630      	mov	r0, r6
 800fd14:	4639      	mov	r1, r7
 800fd16:	f7f0 fda5 	bl	8000864 <__aeabi_ddiv>
 800fd1a:	f7f0 ff29 	bl	8000b70 <__aeabi_d2iz>
 800fd1e:	9000      	str	r0, [sp, #0]
 800fd20:	f7f0 fc10 	bl	8000544 <__aeabi_i2d>
 800fd24:	4642      	mov	r2, r8
 800fd26:	464b      	mov	r3, r9
 800fd28:	f7f0 fc72 	bl	8000610 <__aeabi_dmul>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	460b      	mov	r3, r1
 800fd30:	4630      	mov	r0, r6
 800fd32:	4639      	mov	r1, r7
 800fd34:	f7f0 fab8 	bl	80002a8 <__aeabi_dsub>
 800fd38:	9e00      	ldr	r6, [sp, #0]
 800fd3a:	9f03      	ldr	r7, [sp, #12]
 800fd3c:	3630      	adds	r6, #48	; 0x30
 800fd3e:	f805 6b01 	strb.w	r6, [r5], #1
 800fd42:	9e02      	ldr	r6, [sp, #8]
 800fd44:	1bae      	subs	r6, r5, r6
 800fd46:	42b7      	cmp	r7, r6
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	d138      	bne.n	800fdc0 <_dtoa_r+0x6d0>
 800fd4e:	f7f0 faad 	bl	80002ac <__adddf3>
 800fd52:	4606      	mov	r6, r0
 800fd54:	460f      	mov	r7, r1
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	f7f0 fec9 	bl	8000af4 <__aeabi_dcmplt>
 800fd62:	b9c8      	cbnz	r0, 800fd98 <_dtoa_r+0x6a8>
 800fd64:	4632      	mov	r2, r6
 800fd66:	463b      	mov	r3, r7
 800fd68:	4640      	mov	r0, r8
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	f7f0 feb8 	bl	8000ae0 <__aeabi_dcmpeq>
 800fd70:	b110      	cbz	r0, 800fd78 <_dtoa_r+0x688>
 800fd72:	9b00      	ldr	r3, [sp, #0]
 800fd74:	07db      	lsls	r3, r3, #31
 800fd76:	d40f      	bmi.n	800fd98 <_dtoa_r+0x6a8>
 800fd78:	4651      	mov	r1, sl
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f000 fe0e 	bl	801099c <_Bfree>
 800fd80:	2300      	movs	r3, #0
 800fd82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd84:	702b      	strb	r3, [r5, #0]
 800fd86:	f10b 0301 	add.w	r3, fp, #1
 800fd8a:	6013      	str	r3, [r2, #0]
 800fd8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f43f acf8 	beq.w	800f784 <_dtoa_r+0x94>
 800fd94:	601d      	str	r5, [r3, #0]
 800fd96:	e4f5      	b.n	800f784 <_dtoa_r+0x94>
 800fd98:	465f      	mov	r7, fp
 800fd9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd9e:	2a39      	cmp	r2, #57	; 0x39
 800fda0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fda4:	d106      	bne.n	800fdb4 <_dtoa_r+0x6c4>
 800fda6:	9a02      	ldr	r2, [sp, #8]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d107      	bne.n	800fdbc <_dtoa_r+0x6cc>
 800fdac:	2330      	movs	r3, #48	; 0x30
 800fdae:	7013      	strb	r3, [r2, #0]
 800fdb0:	3701      	adds	r7, #1
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	781a      	ldrb	r2, [r3, #0]
 800fdb6:	3201      	adds	r2, #1
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	e78d      	b.n	800fcd8 <_dtoa_r+0x5e8>
 800fdbc:	461d      	mov	r5, r3
 800fdbe:	e7ec      	b.n	800fd9a <_dtoa_r+0x6aa>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	4ba4      	ldr	r3, [pc, #656]	; (8010054 <_dtoa_r+0x964>)
 800fdc4:	f7f0 fc24 	bl	8000610 <__aeabi_dmul>
 800fdc8:	2200      	movs	r2, #0
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4606      	mov	r6, r0
 800fdce:	460f      	mov	r7, r1
 800fdd0:	f7f0 fe86 	bl	8000ae0 <__aeabi_dcmpeq>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d09a      	beq.n	800fd0e <_dtoa_r+0x61e>
 800fdd8:	e7ce      	b.n	800fd78 <_dtoa_r+0x688>
 800fdda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	f000 80cd 	beq.w	800ff7c <_dtoa_r+0x88c>
 800fde2:	9a07      	ldr	r2, [sp, #28]
 800fde4:	2a01      	cmp	r2, #1
 800fde6:	f300 80af 	bgt.w	800ff48 <_dtoa_r+0x858>
 800fdea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fdec:	2a00      	cmp	r2, #0
 800fdee:	f000 80a7 	beq.w	800ff40 <_dtoa_r+0x850>
 800fdf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fdf6:	9e08      	ldr	r6, [sp, #32]
 800fdf8:	9d05      	ldr	r5, [sp, #20]
 800fdfa:	9a05      	ldr	r2, [sp, #20]
 800fdfc:	441a      	add	r2, r3
 800fdfe:	9205      	str	r2, [sp, #20]
 800fe00:	9a06      	ldr	r2, [sp, #24]
 800fe02:	2101      	movs	r1, #1
 800fe04:	441a      	add	r2, r3
 800fe06:	4620      	mov	r0, r4
 800fe08:	9206      	str	r2, [sp, #24]
 800fe0a:	f000 fe67 	bl	8010adc <__i2b>
 800fe0e:	4607      	mov	r7, r0
 800fe10:	2d00      	cmp	r5, #0
 800fe12:	dd0c      	ble.n	800fe2e <_dtoa_r+0x73e>
 800fe14:	9b06      	ldr	r3, [sp, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	dd09      	ble.n	800fe2e <_dtoa_r+0x73e>
 800fe1a:	42ab      	cmp	r3, r5
 800fe1c:	9a05      	ldr	r2, [sp, #20]
 800fe1e:	bfa8      	it	ge
 800fe20:	462b      	movge	r3, r5
 800fe22:	1ad2      	subs	r2, r2, r3
 800fe24:	9205      	str	r2, [sp, #20]
 800fe26:	9a06      	ldr	r2, [sp, #24]
 800fe28:	1aed      	subs	r5, r5, r3
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	9306      	str	r3, [sp, #24]
 800fe2e:	9b08      	ldr	r3, [sp, #32]
 800fe30:	b1f3      	cbz	r3, 800fe70 <_dtoa_r+0x780>
 800fe32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 80a5 	beq.w	800ff84 <_dtoa_r+0x894>
 800fe3a:	2e00      	cmp	r6, #0
 800fe3c:	dd10      	ble.n	800fe60 <_dtoa_r+0x770>
 800fe3e:	4639      	mov	r1, r7
 800fe40:	4632      	mov	r2, r6
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fee0 	bl	8010c08 <__pow5mult>
 800fe48:	4652      	mov	r2, sl
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 fe4d 	bl	8010aee <__multiply>
 800fe54:	4651      	mov	r1, sl
 800fe56:	4680      	mov	r8, r0
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f000 fd9f 	bl	801099c <_Bfree>
 800fe5e:	46c2      	mov	sl, r8
 800fe60:	9b08      	ldr	r3, [sp, #32]
 800fe62:	1b9a      	subs	r2, r3, r6
 800fe64:	d004      	beq.n	800fe70 <_dtoa_r+0x780>
 800fe66:	4651      	mov	r1, sl
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f000 fecd 	bl	8010c08 <__pow5mult>
 800fe6e:	4682      	mov	sl, r0
 800fe70:	2101      	movs	r1, #1
 800fe72:	4620      	mov	r0, r4
 800fe74:	f000 fe32 	bl	8010adc <__i2b>
 800fe78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	f340 8083 	ble.w	800ff88 <_dtoa_r+0x898>
 800fe82:	461a      	mov	r2, r3
 800fe84:	4601      	mov	r1, r0
 800fe86:	4620      	mov	r0, r4
 800fe88:	f000 febe 	bl	8010c08 <__pow5mult>
 800fe8c:	9b07      	ldr	r3, [sp, #28]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	4606      	mov	r6, r0
 800fe92:	dd7c      	ble.n	800ff8e <_dtoa_r+0x89e>
 800fe94:	f04f 0800 	mov.w	r8, #0
 800fe98:	6933      	ldr	r3, [r6, #16]
 800fe9a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fe9e:	6918      	ldr	r0, [r3, #16]
 800fea0:	f000 fdce 	bl	8010a40 <__hi0bits>
 800fea4:	f1c0 0020 	rsb	r0, r0, #32
 800fea8:	9b06      	ldr	r3, [sp, #24]
 800feaa:	4418      	add	r0, r3
 800feac:	f010 001f 	ands.w	r0, r0, #31
 800feb0:	f000 8096 	beq.w	800ffe0 <_dtoa_r+0x8f0>
 800feb4:	f1c0 0320 	rsb	r3, r0, #32
 800feb8:	2b04      	cmp	r3, #4
 800feba:	f340 8087 	ble.w	800ffcc <_dtoa_r+0x8dc>
 800febe:	9b05      	ldr	r3, [sp, #20]
 800fec0:	f1c0 001c 	rsb	r0, r0, #28
 800fec4:	4403      	add	r3, r0
 800fec6:	9305      	str	r3, [sp, #20]
 800fec8:	9b06      	ldr	r3, [sp, #24]
 800feca:	4405      	add	r5, r0
 800fecc:	4403      	add	r3, r0
 800fece:	9306      	str	r3, [sp, #24]
 800fed0:	9b05      	ldr	r3, [sp, #20]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	dd05      	ble.n	800fee2 <_dtoa_r+0x7f2>
 800fed6:	4651      	mov	r1, sl
 800fed8:	461a      	mov	r2, r3
 800feda:	4620      	mov	r0, r4
 800fedc:	f000 fee2 	bl	8010ca4 <__lshift>
 800fee0:	4682      	mov	sl, r0
 800fee2:	9b06      	ldr	r3, [sp, #24]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dd05      	ble.n	800fef4 <_dtoa_r+0x804>
 800fee8:	4631      	mov	r1, r6
 800feea:	461a      	mov	r2, r3
 800feec:	4620      	mov	r0, r4
 800feee:	f000 fed9 	bl	8010ca4 <__lshift>
 800fef2:	4606      	mov	r6, r0
 800fef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d074      	beq.n	800ffe4 <_dtoa_r+0x8f4>
 800fefa:	4631      	mov	r1, r6
 800fefc:	4650      	mov	r0, sl
 800fefe:	f000 ff22 	bl	8010d46 <__mcmp>
 800ff02:	2800      	cmp	r0, #0
 800ff04:	da6e      	bge.n	800ffe4 <_dtoa_r+0x8f4>
 800ff06:	2300      	movs	r3, #0
 800ff08:	4651      	mov	r1, sl
 800ff0a:	220a      	movs	r2, #10
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f000 fd5c 	bl	80109ca <__multadd>
 800ff12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ff18:	4682      	mov	sl, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	f000 81a8 	beq.w	8010270 <_dtoa_r+0xb80>
 800ff20:	2300      	movs	r3, #0
 800ff22:	4639      	mov	r1, r7
 800ff24:	220a      	movs	r2, #10
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fd4f 	bl	80109ca <__multadd>
 800ff2c:	9b04      	ldr	r3, [sp, #16]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	4607      	mov	r7, r0
 800ff32:	f300 80c8 	bgt.w	80100c6 <_dtoa_r+0x9d6>
 800ff36:	9b07      	ldr	r3, [sp, #28]
 800ff38:	2b02      	cmp	r3, #2
 800ff3a:	f340 80c4 	ble.w	80100c6 <_dtoa_r+0x9d6>
 800ff3e:	e059      	b.n	800fff4 <_dtoa_r+0x904>
 800ff40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff46:	e756      	b.n	800fdf6 <_dtoa_r+0x706>
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	1e5e      	subs	r6, r3, #1
 800ff4c:	9b08      	ldr	r3, [sp, #32]
 800ff4e:	42b3      	cmp	r3, r6
 800ff50:	bfbf      	itttt	lt
 800ff52:	9b08      	ldrlt	r3, [sp, #32]
 800ff54:	9608      	strlt	r6, [sp, #32]
 800ff56:	1af2      	sublt	r2, r6, r3
 800ff58:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ff5a:	bfb6      	itet	lt
 800ff5c:	189b      	addlt	r3, r3, r2
 800ff5e:	1b9e      	subge	r6, r3, r6
 800ff60:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ff62:	9b03      	ldr	r3, [sp, #12]
 800ff64:	bfb8      	it	lt
 800ff66:	2600      	movlt	r6, #0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	bfb9      	ittee	lt
 800ff6c:	9b05      	ldrlt	r3, [sp, #20]
 800ff6e:	9a03      	ldrlt	r2, [sp, #12]
 800ff70:	9d05      	ldrge	r5, [sp, #20]
 800ff72:	9b03      	ldrge	r3, [sp, #12]
 800ff74:	bfbc      	itt	lt
 800ff76:	1a9d      	sublt	r5, r3, r2
 800ff78:	2300      	movlt	r3, #0
 800ff7a:	e73e      	b.n	800fdfa <_dtoa_r+0x70a>
 800ff7c:	9e08      	ldr	r6, [sp, #32]
 800ff7e:	9d05      	ldr	r5, [sp, #20]
 800ff80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff82:	e745      	b.n	800fe10 <_dtoa_r+0x720>
 800ff84:	9a08      	ldr	r2, [sp, #32]
 800ff86:	e76e      	b.n	800fe66 <_dtoa_r+0x776>
 800ff88:	9b07      	ldr	r3, [sp, #28]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	dc19      	bgt.n	800ffc2 <_dtoa_r+0x8d2>
 800ff8e:	9b00      	ldr	r3, [sp, #0]
 800ff90:	b9bb      	cbnz	r3, 800ffc2 <_dtoa_r+0x8d2>
 800ff92:	9b01      	ldr	r3, [sp, #4]
 800ff94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff98:	b99b      	cbnz	r3, 800ffc2 <_dtoa_r+0x8d2>
 800ff9a:	9b01      	ldr	r3, [sp, #4]
 800ff9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffa0:	0d1b      	lsrs	r3, r3, #20
 800ffa2:	051b      	lsls	r3, r3, #20
 800ffa4:	b183      	cbz	r3, 800ffc8 <_dtoa_r+0x8d8>
 800ffa6:	9b05      	ldr	r3, [sp, #20]
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	9305      	str	r3, [sp, #20]
 800ffac:	9b06      	ldr	r3, [sp, #24]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	9306      	str	r3, [sp, #24]
 800ffb2:	f04f 0801 	mov.w	r8, #1
 800ffb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f47f af6d 	bne.w	800fe98 <_dtoa_r+0x7a8>
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	e772      	b.n	800fea8 <_dtoa_r+0x7b8>
 800ffc2:	f04f 0800 	mov.w	r8, #0
 800ffc6:	e7f6      	b.n	800ffb6 <_dtoa_r+0x8c6>
 800ffc8:	4698      	mov	r8, r3
 800ffca:	e7f4      	b.n	800ffb6 <_dtoa_r+0x8c6>
 800ffcc:	d080      	beq.n	800fed0 <_dtoa_r+0x7e0>
 800ffce:	9a05      	ldr	r2, [sp, #20]
 800ffd0:	331c      	adds	r3, #28
 800ffd2:	441a      	add	r2, r3
 800ffd4:	9205      	str	r2, [sp, #20]
 800ffd6:	9a06      	ldr	r2, [sp, #24]
 800ffd8:	441a      	add	r2, r3
 800ffda:	441d      	add	r5, r3
 800ffdc:	4613      	mov	r3, r2
 800ffde:	e776      	b.n	800fece <_dtoa_r+0x7de>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	e7f4      	b.n	800ffce <_dtoa_r+0x8de>
 800ffe4:	9b03      	ldr	r3, [sp, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	dc36      	bgt.n	8010058 <_dtoa_r+0x968>
 800ffea:	9b07      	ldr	r3, [sp, #28]
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	dd33      	ble.n	8010058 <_dtoa_r+0x968>
 800fff0:	9b03      	ldr	r3, [sp, #12]
 800fff2:	9304      	str	r3, [sp, #16]
 800fff4:	9b04      	ldr	r3, [sp, #16]
 800fff6:	b963      	cbnz	r3, 8010012 <_dtoa_r+0x922>
 800fff8:	4631      	mov	r1, r6
 800fffa:	2205      	movs	r2, #5
 800fffc:	4620      	mov	r0, r4
 800fffe:	f000 fce4 	bl	80109ca <__multadd>
 8010002:	4601      	mov	r1, r0
 8010004:	4606      	mov	r6, r0
 8010006:	4650      	mov	r0, sl
 8010008:	f000 fe9d 	bl	8010d46 <__mcmp>
 801000c:	2800      	cmp	r0, #0
 801000e:	f73f adb6 	bgt.w	800fb7e <_dtoa_r+0x48e>
 8010012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010014:	9d02      	ldr	r5, [sp, #8]
 8010016:	ea6f 0b03 	mvn.w	fp, r3
 801001a:	2300      	movs	r3, #0
 801001c:	9303      	str	r3, [sp, #12]
 801001e:	4631      	mov	r1, r6
 8010020:	4620      	mov	r0, r4
 8010022:	f000 fcbb 	bl	801099c <_Bfree>
 8010026:	2f00      	cmp	r7, #0
 8010028:	f43f aea6 	beq.w	800fd78 <_dtoa_r+0x688>
 801002c:	9b03      	ldr	r3, [sp, #12]
 801002e:	b12b      	cbz	r3, 801003c <_dtoa_r+0x94c>
 8010030:	42bb      	cmp	r3, r7
 8010032:	d003      	beq.n	801003c <_dtoa_r+0x94c>
 8010034:	4619      	mov	r1, r3
 8010036:	4620      	mov	r0, r4
 8010038:	f000 fcb0 	bl	801099c <_Bfree>
 801003c:	4639      	mov	r1, r7
 801003e:	4620      	mov	r0, r4
 8010040:	f000 fcac 	bl	801099c <_Bfree>
 8010044:	e698      	b.n	800fd78 <_dtoa_r+0x688>
 8010046:	2600      	movs	r6, #0
 8010048:	4637      	mov	r7, r6
 801004a:	e7e2      	b.n	8010012 <_dtoa_r+0x922>
 801004c:	46bb      	mov	fp, r7
 801004e:	4637      	mov	r7, r6
 8010050:	e595      	b.n	800fb7e <_dtoa_r+0x48e>
 8010052:	bf00      	nop
 8010054:	40240000 	.word	0x40240000
 8010058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005a:	bb93      	cbnz	r3, 80100c2 <_dtoa_r+0x9d2>
 801005c:	9b03      	ldr	r3, [sp, #12]
 801005e:	9304      	str	r3, [sp, #16]
 8010060:	9d02      	ldr	r5, [sp, #8]
 8010062:	4631      	mov	r1, r6
 8010064:	4650      	mov	r0, sl
 8010066:	f7ff fab5 	bl	800f5d4 <quorem>
 801006a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801006e:	f805 9b01 	strb.w	r9, [r5], #1
 8010072:	9b02      	ldr	r3, [sp, #8]
 8010074:	9a04      	ldr	r2, [sp, #16]
 8010076:	1aeb      	subs	r3, r5, r3
 8010078:	429a      	cmp	r2, r3
 801007a:	f300 80dc 	bgt.w	8010236 <_dtoa_r+0xb46>
 801007e:	9b02      	ldr	r3, [sp, #8]
 8010080:	2a01      	cmp	r2, #1
 8010082:	bfac      	ite	ge
 8010084:	189b      	addge	r3, r3, r2
 8010086:	3301      	addlt	r3, #1
 8010088:	4698      	mov	r8, r3
 801008a:	2300      	movs	r3, #0
 801008c:	9303      	str	r3, [sp, #12]
 801008e:	4651      	mov	r1, sl
 8010090:	2201      	movs	r2, #1
 8010092:	4620      	mov	r0, r4
 8010094:	f000 fe06 	bl	8010ca4 <__lshift>
 8010098:	4631      	mov	r1, r6
 801009a:	4682      	mov	sl, r0
 801009c:	f000 fe53 	bl	8010d46 <__mcmp>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	f300 808d 	bgt.w	80101c0 <_dtoa_r+0xad0>
 80100a6:	d103      	bne.n	80100b0 <_dtoa_r+0x9c0>
 80100a8:	f019 0f01 	tst.w	r9, #1
 80100ac:	f040 8088 	bne.w	80101c0 <_dtoa_r+0xad0>
 80100b0:	4645      	mov	r5, r8
 80100b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100b6:	2b30      	cmp	r3, #48	; 0x30
 80100b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80100bc:	d1af      	bne.n	801001e <_dtoa_r+0x92e>
 80100be:	4615      	mov	r5, r2
 80100c0:	e7f7      	b.n	80100b2 <_dtoa_r+0x9c2>
 80100c2:	9b03      	ldr	r3, [sp, #12]
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	2d00      	cmp	r5, #0
 80100c8:	dd05      	ble.n	80100d6 <_dtoa_r+0x9e6>
 80100ca:	4639      	mov	r1, r7
 80100cc:	462a      	mov	r2, r5
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 fde8 	bl	8010ca4 <__lshift>
 80100d4:	4607      	mov	r7, r0
 80100d6:	f1b8 0f00 	cmp.w	r8, #0
 80100da:	d04c      	beq.n	8010176 <_dtoa_r+0xa86>
 80100dc:	6879      	ldr	r1, [r7, #4]
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 fc28 	bl	8010934 <_Balloc>
 80100e4:	693a      	ldr	r2, [r7, #16]
 80100e6:	3202      	adds	r2, #2
 80100e8:	4605      	mov	r5, r0
 80100ea:	0092      	lsls	r2, r2, #2
 80100ec:	f107 010c 	add.w	r1, r7, #12
 80100f0:	300c      	adds	r0, #12
 80100f2:	f7fe f935 	bl	800e360 <memcpy>
 80100f6:	2201      	movs	r2, #1
 80100f8:	4629      	mov	r1, r5
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 fdd2 	bl	8010ca4 <__lshift>
 8010100:	9b00      	ldr	r3, [sp, #0]
 8010102:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010106:	9703      	str	r7, [sp, #12]
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	4607      	mov	r7, r0
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	4631      	mov	r1, r6
 8010112:	4650      	mov	r0, sl
 8010114:	f7ff fa5e 	bl	800f5d4 <quorem>
 8010118:	9903      	ldr	r1, [sp, #12]
 801011a:	4605      	mov	r5, r0
 801011c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010120:	4650      	mov	r0, sl
 8010122:	f000 fe10 	bl	8010d46 <__mcmp>
 8010126:	463a      	mov	r2, r7
 8010128:	9000      	str	r0, [sp, #0]
 801012a:	4631      	mov	r1, r6
 801012c:	4620      	mov	r0, r4
 801012e:	f000 fe24 	bl	8010d7a <__mdiff>
 8010132:	68c3      	ldr	r3, [r0, #12]
 8010134:	4602      	mov	r2, r0
 8010136:	bb03      	cbnz	r3, 801017a <_dtoa_r+0xa8a>
 8010138:	4601      	mov	r1, r0
 801013a:	9006      	str	r0, [sp, #24]
 801013c:	4650      	mov	r0, sl
 801013e:	f000 fe02 	bl	8010d46 <__mcmp>
 8010142:	9a06      	ldr	r2, [sp, #24]
 8010144:	4603      	mov	r3, r0
 8010146:	4611      	mov	r1, r2
 8010148:	4620      	mov	r0, r4
 801014a:	9306      	str	r3, [sp, #24]
 801014c:	f000 fc26 	bl	801099c <_Bfree>
 8010150:	9b06      	ldr	r3, [sp, #24]
 8010152:	b9a3      	cbnz	r3, 801017e <_dtoa_r+0xa8e>
 8010154:	9a07      	ldr	r2, [sp, #28]
 8010156:	b992      	cbnz	r2, 801017e <_dtoa_r+0xa8e>
 8010158:	9a05      	ldr	r2, [sp, #20]
 801015a:	b982      	cbnz	r2, 801017e <_dtoa_r+0xa8e>
 801015c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010160:	d029      	beq.n	80101b6 <_dtoa_r+0xac6>
 8010162:	9b00      	ldr	r3, [sp, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	dd01      	ble.n	801016c <_dtoa_r+0xa7c>
 8010168:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801016c:	f108 0501 	add.w	r5, r8, #1
 8010170:	f888 9000 	strb.w	r9, [r8]
 8010174:	e753      	b.n	801001e <_dtoa_r+0x92e>
 8010176:	4638      	mov	r0, r7
 8010178:	e7c2      	b.n	8010100 <_dtoa_r+0xa10>
 801017a:	2301      	movs	r3, #1
 801017c:	e7e3      	b.n	8010146 <_dtoa_r+0xa56>
 801017e:	9a00      	ldr	r2, [sp, #0]
 8010180:	2a00      	cmp	r2, #0
 8010182:	db04      	blt.n	801018e <_dtoa_r+0xa9e>
 8010184:	d125      	bne.n	80101d2 <_dtoa_r+0xae2>
 8010186:	9a07      	ldr	r2, [sp, #28]
 8010188:	bb1a      	cbnz	r2, 80101d2 <_dtoa_r+0xae2>
 801018a:	9a05      	ldr	r2, [sp, #20]
 801018c:	bb0a      	cbnz	r2, 80101d2 <_dtoa_r+0xae2>
 801018e:	2b00      	cmp	r3, #0
 8010190:	ddec      	ble.n	801016c <_dtoa_r+0xa7c>
 8010192:	4651      	mov	r1, sl
 8010194:	2201      	movs	r2, #1
 8010196:	4620      	mov	r0, r4
 8010198:	f000 fd84 	bl	8010ca4 <__lshift>
 801019c:	4631      	mov	r1, r6
 801019e:	4682      	mov	sl, r0
 80101a0:	f000 fdd1 	bl	8010d46 <__mcmp>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	dc03      	bgt.n	80101b0 <_dtoa_r+0xac0>
 80101a8:	d1e0      	bne.n	801016c <_dtoa_r+0xa7c>
 80101aa:	f019 0f01 	tst.w	r9, #1
 80101ae:	d0dd      	beq.n	801016c <_dtoa_r+0xa7c>
 80101b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101b4:	d1d8      	bne.n	8010168 <_dtoa_r+0xa78>
 80101b6:	2339      	movs	r3, #57	; 0x39
 80101b8:	f888 3000 	strb.w	r3, [r8]
 80101bc:	f108 0801 	add.w	r8, r8, #1
 80101c0:	4645      	mov	r5, r8
 80101c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101c6:	2b39      	cmp	r3, #57	; 0x39
 80101c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80101cc:	d03b      	beq.n	8010246 <_dtoa_r+0xb56>
 80101ce:	3301      	adds	r3, #1
 80101d0:	e040      	b.n	8010254 <_dtoa_r+0xb64>
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f108 0501 	add.w	r5, r8, #1
 80101d8:	dd05      	ble.n	80101e6 <_dtoa_r+0xaf6>
 80101da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101de:	d0ea      	beq.n	80101b6 <_dtoa_r+0xac6>
 80101e0:	f109 0901 	add.w	r9, r9, #1
 80101e4:	e7c4      	b.n	8010170 <_dtoa_r+0xa80>
 80101e6:	9b02      	ldr	r3, [sp, #8]
 80101e8:	9a04      	ldr	r2, [sp, #16]
 80101ea:	f805 9c01 	strb.w	r9, [r5, #-1]
 80101ee:	1aeb      	subs	r3, r5, r3
 80101f0:	4293      	cmp	r3, r2
 80101f2:	46a8      	mov	r8, r5
 80101f4:	f43f af4b 	beq.w	801008e <_dtoa_r+0x99e>
 80101f8:	4651      	mov	r1, sl
 80101fa:	2300      	movs	r3, #0
 80101fc:	220a      	movs	r2, #10
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 fbe3 	bl	80109ca <__multadd>
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	9903      	ldr	r1, [sp, #12]
 8010208:	42bb      	cmp	r3, r7
 801020a:	4682      	mov	sl, r0
 801020c:	f04f 0300 	mov.w	r3, #0
 8010210:	f04f 020a 	mov.w	r2, #10
 8010214:	4620      	mov	r0, r4
 8010216:	d104      	bne.n	8010222 <_dtoa_r+0xb32>
 8010218:	f000 fbd7 	bl	80109ca <__multadd>
 801021c:	9003      	str	r0, [sp, #12]
 801021e:	4607      	mov	r7, r0
 8010220:	e776      	b.n	8010110 <_dtoa_r+0xa20>
 8010222:	f000 fbd2 	bl	80109ca <__multadd>
 8010226:	2300      	movs	r3, #0
 8010228:	9003      	str	r0, [sp, #12]
 801022a:	220a      	movs	r2, #10
 801022c:	4639      	mov	r1, r7
 801022e:	4620      	mov	r0, r4
 8010230:	f000 fbcb 	bl	80109ca <__multadd>
 8010234:	e7f3      	b.n	801021e <_dtoa_r+0xb2e>
 8010236:	4651      	mov	r1, sl
 8010238:	2300      	movs	r3, #0
 801023a:	220a      	movs	r2, #10
 801023c:	4620      	mov	r0, r4
 801023e:	f000 fbc4 	bl	80109ca <__multadd>
 8010242:	4682      	mov	sl, r0
 8010244:	e70d      	b.n	8010062 <_dtoa_r+0x972>
 8010246:	9b02      	ldr	r3, [sp, #8]
 8010248:	4293      	cmp	r3, r2
 801024a:	d105      	bne.n	8010258 <_dtoa_r+0xb68>
 801024c:	9a02      	ldr	r2, [sp, #8]
 801024e:	f10b 0b01 	add.w	fp, fp, #1
 8010252:	2331      	movs	r3, #49	; 0x31
 8010254:	7013      	strb	r3, [r2, #0]
 8010256:	e6e2      	b.n	801001e <_dtoa_r+0x92e>
 8010258:	4615      	mov	r5, r2
 801025a:	e7b2      	b.n	80101c2 <_dtoa_r+0xad2>
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <_dtoa_r+0xb94>)
 801025e:	f7ff baae 	b.w	800f7be <_dtoa_r+0xce>
 8010262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010264:	2b00      	cmp	r3, #0
 8010266:	f47f aa88 	bne.w	800f77a <_dtoa_r+0x8a>
 801026a:	4b07      	ldr	r3, [pc, #28]	; (8010288 <_dtoa_r+0xb98>)
 801026c:	f7ff baa7 	b.w	800f7be <_dtoa_r+0xce>
 8010270:	9b04      	ldr	r3, [sp, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	f73f aef4 	bgt.w	8010060 <_dtoa_r+0x970>
 8010278:	9b07      	ldr	r3, [sp, #28]
 801027a:	2b02      	cmp	r3, #2
 801027c:	f77f aef0 	ble.w	8010060 <_dtoa_r+0x970>
 8010280:	e6b8      	b.n	800fff4 <_dtoa_r+0x904>
 8010282:	bf00      	nop
 8010284:	080e782e 	.word	0x080e782e
 8010288:	080e7850 	.word	0x080e7850

0801028c <__sflush_r>:
 801028c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010290:	b293      	uxth	r3, r2
 8010292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010296:	4605      	mov	r5, r0
 8010298:	0718      	lsls	r0, r3, #28
 801029a:	460c      	mov	r4, r1
 801029c:	d461      	bmi.n	8010362 <__sflush_r+0xd6>
 801029e:	684b      	ldr	r3, [r1, #4]
 80102a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	818a      	strh	r2, [r1, #12]
 80102a8:	dc05      	bgt.n	80102b6 <__sflush_r+0x2a>
 80102aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	dc02      	bgt.n	80102b6 <__sflush_r+0x2a>
 80102b0:	2000      	movs	r0, #0
 80102b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	d0f9      	beq.n	80102b0 <__sflush_r+0x24>
 80102bc:	2300      	movs	r3, #0
 80102be:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102c2:	682f      	ldr	r7, [r5, #0]
 80102c4:	602b      	str	r3, [r5, #0]
 80102c6:	d037      	beq.n	8010338 <__sflush_r+0xac>
 80102c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102ca:	89a3      	ldrh	r3, [r4, #12]
 80102cc:	075a      	lsls	r2, r3, #29
 80102ce:	d505      	bpl.n	80102dc <__sflush_r+0x50>
 80102d0:	6863      	ldr	r3, [r4, #4]
 80102d2:	1ac0      	subs	r0, r0, r3
 80102d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102d6:	b10b      	cbz	r3, 80102dc <__sflush_r+0x50>
 80102d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102da:	1ac0      	subs	r0, r0, r3
 80102dc:	2300      	movs	r3, #0
 80102de:	4602      	mov	r2, r0
 80102e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102e2:	6a21      	ldr	r1, [r4, #32]
 80102e4:	4628      	mov	r0, r5
 80102e6:	47b0      	blx	r6
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	89a3      	ldrh	r3, [r4, #12]
 80102ec:	d106      	bne.n	80102fc <__sflush_r+0x70>
 80102ee:	6829      	ldr	r1, [r5, #0]
 80102f0:	291d      	cmp	r1, #29
 80102f2:	d84f      	bhi.n	8010394 <__sflush_r+0x108>
 80102f4:	4a2d      	ldr	r2, [pc, #180]	; (80103ac <__sflush_r+0x120>)
 80102f6:	40ca      	lsrs	r2, r1
 80102f8:	07d6      	lsls	r6, r2, #31
 80102fa:	d54b      	bpl.n	8010394 <__sflush_r+0x108>
 80102fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010300:	b21b      	sxth	r3, r3
 8010302:	2200      	movs	r2, #0
 8010304:	6062      	str	r2, [r4, #4]
 8010306:	04d9      	lsls	r1, r3, #19
 8010308:	6922      	ldr	r2, [r4, #16]
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	6022      	str	r2, [r4, #0]
 801030e:	d504      	bpl.n	801031a <__sflush_r+0x8e>
 8010310:	1c42      	adds	r2, r0, #1
 8010312:	d101      	bne.n	8010318 <__sflush_r+0x8c>
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	b903      	cbnz	r3, 801031a <__sflush_r+0x8e>
 8010318:	6560      	str	r0, [r4, #84]	; 0x54
 801031a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801031c:	602f      	str	r7, [r5, #0]
 801031e:	2900      	cmp	r1, #0
 8010320:	d0c6      	beq.n	80102b0 <__sflush_r+0x24>
 8010322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010326:	4299      	cmp	r1, r3
 8010328:	d002      	beq.n	8010330 <__sflush_r+0xa4>
 801032a:	4628      	mov	r0, r5
 801032c:	f000 f9aa 	bl	8010684 <_free_r>
 8010330:	2000      	movs	r0, #0
 8010332:	6360      	str	r0, [r4, #52]	; 0x34
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	6a21      	ldr	r1, [r4, #32]
 801033a:	2301      	movs	r3, #1
 801033c:	4628      	mov	r0, r5
 801033e:	47b0      	blx	r6
 8010340:	1c41      	adds	r1, r0, #1
 8010342:	d1c2      	bne.n	80102ca <__sflush_r+0x3e>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d0bf      	beq.n	80102ca <__sflush_r+0x3e>
 801034a:	2b1d      	cmp	r3, #29
 801034c:	d001      	beq.n	8010352 <__sflush_r+0xc6>
 801034e:	2b16      	cmp	r3, #22
 8010350:	d101      	bne.n	8010356 <__sflush_r+0xca>
 8010352:	602f      	str	r7, [r5, #0]
 8010354:	e7ac      	b.n	80102b0 <__sflush_r+0x24>
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801035c:	81a3      	strh	r3, [r4, #12]
 801035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010362:	690f      	ldr	r7, [r1, #16]
 8010364:	2f00      	cmp	r7, #0
 8010366:	d0a3      	beq.n	80102b0 <__sflush_r+0x24>
 8010368:	079b      	lsls	r3, r3, #30
 801036a:	680e      	ldr	r6, [r1, #0]
 801036c:	bf08      	it	eq
 801036e:	694b      	ldreq	r3, [r1, #20]
 8010370:	600f      	str	r7, [r1, #0]
 8010372:	bf18      	it	ne
 8010374:	2300      	movne	r3, #0
 8010376:	eba6 0807 	sub.w	r8, r6, r7
 801037a:	608b      	str	r3, [r1, #8]
 801037c:	f1b8 0f00 	cmp.w	r8, #0
 8010380:	dd96      	ble.n	80102b0 <__sflush_r+0x24>
 8010382:	4643      	mov	r3, r8
 8010384:	463a      	mov	r2, r7
 8010386:	6a21      	ldr	r1, [r4, #32]
 8010388:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801038a:	4628      	mov	r0, r5
 801038c:	47b0      	blx	r6
 801038e:	2800      	cmp	r0, #0
 8010390:	dc07      	bgt.n	80103a2 <__sflush_r+0x116>
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a2:	4407      	add	r7, r0
 80103a4:	eba8 0800 	sub.w	r8, r8, r0
 80103a8:	e7e8      	b.n	801037c <__sflush_r+0xf0>
 80103aa:	bf00      	nop
 80103ac:	20400001 	.word	0x20400001

080103b0 <_fflush_r>:
 80103b0:	b538      	push	{r3, r4, r5, lr}
 80103b2:	690b      	ldr	r3, [r1, #16]
 80103b4:	4605      	mov	r5, r0
 80103b6:	460c      	mov	r4, r1
 80103b8:	b913      	cbnz	r3, 80103c0 <_fflush_r+0x10>
 80103ba:	2500      	movs	r5, #0
 80103bc:	4628      	mov	r0, r5
 80103be:	bd38      	pop	{r3, r4, r5, pc}
 80103c0:	b118      	cbz	r0, 80103ca <_fflush_r+0x1a>
 80103c2:	6983      	ldr	r3, [r0, #24]
 80103c4:	b90b      	cbnz	r3, 80103ca <_fflush_r+0x1a>
 80103c6:	f000 f887 	bl	80104d8 <__sinit>
 80103ca:	4b14      	ldr	r3, [pc, #80]	; (801041c <_fflush_r+0x6c>)
 80103cc:	429c      	cmp	r4, r3
 80103ce:	d11b      	bne.n	8010408 <_fflush_r+0x58>
 80103d0:	686c      	ldr	r4, [r5, #4]
 80103d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d0ef      	beq.n	80103ba <_fflush_r+0xa>
 80103da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103dc:	07d0      	lsls	r0, r2, #31
 80103de:	d404      	bmi.n	80103ea <_fflush_r+0x3a>
 80103e0:	0599      	lsls	r1, r3, #22
 80103e2:	d402      	bmi.n	80103ea <_fflush_r+0x3a>
 80103e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103e6:	f000 fa37 	bl	8010858 <__retarget_lock_acquire_recursive>
 80103ea:	4628      	mov	r0, r5
 80103ec:	4621      	mov	r1, r4
 80103ee:	f7ff ff4d 	bl	801028c <__sflush_r>
 80103f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103f4:	07da      	lsls	r2, r3, #31
 80103f6:	4605      	mov	r5, r0
 80103f8:	d4e0      	bmi.n	80103bc <_fflush_r+0xc>
 80103fa:	89a3      	ldrh	r3, [r4, #12]
 80103fc:	059b      	lsls	r3, r3, #22
 80103fe:	d4dd      	bmi.n	80103bc <_fflush_r+0xc>
 8010400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010402:	f000 fa2a 	bl	801085a <__retarget_lock_release_recursive>
 8010406:	e7d9      	b.n	80103bc <_fflush_r+0xc>
 8010408:	4b05      	ldr	r3, [pc, #20]	; (8010420 <_fflush_r+0x70>)
 801040a:	429c      	cmp	r4, r3
 801040c:	d101      	bne.n	8010412 <_fflush_r+0x62>
 801040e:	68ac      	ldr	r4, [r5, #8]
 8010410:	e7df      	b.n	80103d2 <_fflush_r+0x22>
 8010412:	4b04      	ldr	r3, [pc, #16]	; (8010424 <_fflush_r+0x74>)
 8010414:	429c      	cmp	r4, r3
 8010416:	bf08      	it	eq
 8010418:	68ec      	ldreq	r4, [r5, #12]
 801041a:	e7da      	b.n	80103d2 <_fflush_r+0x22>
 801041c:	080e7880 	.word	0x080e7880
 8010420:	080e78a0 	.word	0x080e78a0
 8010424:	080e7860 	.word	0x080e7860

08010428 <_cleanup_r>:
 8010428:	4901      	ldr	r1, [pc, #4]	; (8010430 <_cleanup_r+0x8>)
 801042a:	f000 b9e7 	b.w	80107fc <_fwalk_reent>
 801042e:	bf00      	nop
 8010430:	08011065 	.word	0x08011065

08010434 <std.isra.0>:
 8010434:	2300      	movs	r3, #0
 8010436:	b510      	push	{r4, lr}
 8010438:	4604      	mov	r4, r0
 801043a:	6003      	str	r3, [r0, #0]
 801043c:	6043      	str	r3, [r0, #4]
 801043e:	6083      	str	r3, [r0, #8]
 8010440:	8181      	strh	r1, [r0, #12]
 8010442:	6643      	str	r3, [r0, #100]	; 0x64
 8010444:	81c2      	strh	r2, [r0, #14]
 8010446:	6103      	str	r3, [r0, #16]
 8010448:	6143      	str	r3, [r0, #20]
 801044a:	6183      	str	r3, [r0, #24]
 801044c:	4619      	mov	r1, r3
 801044e:	2208      	movs	r2, #8
 8010450:	305c      	adds	r0, #92	; 0x5c
 8010452:	f7fd ff90 	bl	800e376 <memset>
 8010456:	4b05      	ldr	r3, [pc, #20]	; (801046c <std.isra.0+0x38>)
 8010458:	6263      	str	r3, [r4, #36]	; 0x24
 801045a:	4b05      	ldr	r3, [pc, #20]	; (8010470 <std.isra.0+0x3c>)
 801045c:	62a3      	str	r3, [r4, #40]	; 0x28
 801045e:	4b05      	ldr	r3, [pc, #20]	; (8010474 <std.isra.0+0x40>)
 8010460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010462:	4b05      	ldr	r3, [pc, #20]	; (8010478 <std.isra.0+0x44>)
 8010464:	6224      	str	r4, [r4, #32]
 8010466:	6323      	str	r3, [r4, #48]	; 0x30
 8010468:	bd10      	pop	{r4, pc}
 801046a:	bf00      	nop
 801046c:	08010ed5 	.word	0x08010ed5
 8010470:	08010ef7 	.word	0x08010ef7
 8010474:	08010f2f 	.word	0x08010f2f
 8010478:	08010f53 	.word	0x08010f53

0801047c <__sfmoreglue>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	1e4a      	subs	r2, r1, #1
 8010480:	2568      	movs	r5, #104	; 0x68
 8010482:	4355      	muls	r5, r2
 8010484:	460e      	mov	r6, r1
 8010486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801048a:	f7fd fd5b 	bl	800df44 <_malloc_r>
 801048e:	4604      	mov	r4, r0
 8010490:	b140      	cbz	r0, 80104a4 <__sfmoreglue+0x28>
 8010492:	2100      	movs	r1, #0
 8010494:	e880 0042 	stmia.w	r0, {r1, r6}
 8010498:	300c      	adds	r0, #12
 801049a:	60a0      	str	r0, [r4, #8]
 801049c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80104a0:	f7fd ff69 	bl	800e376 <memset>
 80104a4:	4620      	mov	r0, r4
 80104a6:	bd70      	pop	{r4, r5, r6, pc}

080104a8 <__sfp_lock_acquire>:
 80104a8:	4801      	ldr	r0, [pc, #4]	; (80104b0 <__sfp_lock_acquire+0x8>)
 80104aa:	f000 b9d5 	b.w	8010858 <__retarget_lock_acquire_recursive>
 80104ae:	bf00      	nop
 80104b0:	20015c30 	.word	0x20015c30

080104b4 <__sfp_lock_release>:
 80104b4:	4801      	ldr	r0, [pc, #4]	; (80104bc <__sfp_lock_release+0x8>)
 80104b6:	f000 b9d0 	b.w	801085a <__retarget_lock_release_recursive>
 80104ba:	bf00      	nop
 80104bc:	20015c30 	.word	0x20015c30

080104c0 <__sinit_lock_acquire>:
 80104c0:	4801      	ldr	r0, [pc, #4]	; (80104c8 <__sinit_lock_acquire+0x8>)
 80104c2:	f000 b9c9 	b.w	8010858 <__retarget_lock_acquire_recursive>
 80104c6:	bf00      	nop
 80104c8:	20015c2b 	.word	0x20015c2b

080104cc <__sinit_lock_release>:
 80104cc:	4801      	ldr	r0, [pc, #4]	; (80104d4 <__sinit_lock_release+0x8>)
 80104ce:	f000 b9c4 	b.w	801085a <__retarget_lock_release_recursive>
 80104d2:	bf00      	nop
 80104d4:	20015c2b 	.word	0x20015c2b

080104d8 <__sinit>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	f7ff fff0 	bl	80104c0 <__sinit_lock_acquire>
 80104e0:	69a3      	ldr	r3, [r4, #24]
 80104e2:	b11b      	cbz	r3, 80104ec <__sinit+0x14>
 80104e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104e8:	f7ff bff0 	b.w	80104cc <__sinit_lock_release>
 80104ec:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80104f0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80104f4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80104f8:	4b12      	ldr	r3, [pc, #72]	; (8010544 <__sinit+0x6c>)
 80104fa:	4a13      	ldr	r2, [pc, #76]	; (8010548 <__sinit+0x70>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	62a2      	str	r2, [r4, #40]	; 0x28
 8010500:	429c      	cmp	r4, r3
 8010502:	bf04      	itt	eq
 8010504:	2301      	moveq	r3, #1
 8010506:	61a3      	streq	r3, [r4, #24]
 8010508:	4620      	mov	r0, r4
 801050a:	f000 f81f 	bl	801054c <__sfp>
 801050e:	6060      	str	r0, [r4, #4]
 8010510:	4620      	mov	r0, r4
 8010512:	f000 f81b 	bl	801054c <__sfp>
 8010516:	60a0      	str	r0, [r4, #8]
 8010518:	4620      	mov	r0, r4
 801051a:	f000 f817 	bl	801054c <__sfp>
 801051e:	2200      	movs	r2, #0
 8010520:	60e0      	str	r0, [r4, #12]
 8010522:	2104      	movs	r1, #4
 8010524:	6860      	ldr	r0, [r4, #4]
 8010526:	f7ff ff85 	bl	8010434 <std.isra.0>
 801052a:	2201      	movs	r2, #1
 801052c:	2109      	movs	r1, #9
 801052e:	68a0      	ldr	r0, [r4, #8]
 8010530:	f7ff ff80 	bl	8010434 <std.isra.0>
 8010534:	2202      	movs	r2, #2
 8010536:	2112      	movs	r1, #18
 8010538:	68e0      	ldr	r0, [r4, #12]
 801053a:	f7ff ff7b 	bl	8010434 <std.isra.0>
 801053e:	2301      	movs	r3, #1
 8010540:	61a3      	str	r3, [r4, #24]
 8010542:	e7cf      	b.n	80104e4 <__sinit+0xc>
 8010544:	080e77f8 	.word	0x080e77f8
 8010548:	08010429 	.word	0x08010429

0801054c <__sfp>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	4607      	mov	r7, r0
 8010550:	f7ff ffaa 	bl	80104a8 <__sfp_lock_acquire>
 8010554:	4b1f      	ldr	r3, [pc, #124]	; (80105d4 <__sfp+0x88>)
 8010556:	681e      	ldr	r6, [r3, #0]
 8010558:	69b3      	ldr	r3, [r6, #24]
 801055a:	b913      	cbnz	r3, 8010562 <__sfp+0x16>
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff ffbb 	bl	80104d8 <__sinit>
 8010562:	36d8      	adds	r6, #216	; 0xd8
 8010564:	68b4      	ldr	r4, [r6, #8]
 8010566:	6873      	ldr	r3, [r6, #4]
 8010568:	3b01      	subs	r3, #1
 801056a:	d503      	bpl.n	8010574 <__sfp+0x28>
 801056c:	6833      	ldr	r3, [r6, #0]
 801056e:	b133      	cbz	r3, 801057e <__sfp+0x32>
 8010570:	6836      	ldr	r6, [r6, #0]
 8010572:	e7f7      	b.n	8010564 <__sfp+0x18>
 8010574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010578:	b17d      	cbz	r5, 801059a <__sfp+0x4e>
 801057a:	3468      	adds	r4, #104	; 0x68
 801057c:	e7f4      	b.n	8010568 <__sfp+0x1c>
 801057e:	2104      	movs	r1, #4
 8010580:	4638      	mov	r0, r7
 8010582:	f7ff ff7b 	bl	801047c <__sfmoreglue>
 8010586:	4604      	mov	r4, r0
 8010588:	6030      	str	r0, [r6, #0]
 801058a:	2800      	cmp	r0, #0
 801058c:	d1f0      	bne.n	8010570 <__sfp+0x24>
 801058e:	f7ff ff91 	bl	80104b4 <__sfp_lock_release>
 8010592:	230c      	movs	r3, #12
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	4620      	mov	r0, r4
 8010598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801059a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801059e:	81e3      	strh	r3, [r4, #14]
 80105a0:	2301      	movs	r3, #1
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105a8:	6665      	str	r5, [r4, #100]	; 0x64
 80105aa:	f000 f953 	bl	8010854 <__retarget_lock_init_recursive>
 80105ae:	f7ff ff81 	bl	80104b4 <__sfp_lock_release>
 80105b2:	6025      	str	r5, [r4, #0]
 80105b4:	60a5      	str	r5, [r4, #8]
 80105b6:	6065      	str	r5, [r4, #4]
 80105b8:	6125      	str	r5, [r4, #16]
 80105ba:	6165      	str	r5, [r4, #20]
 80105bc:	61a5      	str	r5, [r4, #24]
 80105be:	2208      	movs	r2, #8
 80105c0:	4629      	mov	r1, r5
 80105c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80105c6:	f7fd fed6 	bl	800e376 <memset>
 80105ca:	6365      	str	r5, [r4, #52]	; 0x34
 80105cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80105ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80105d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80105d2:	e7e0      	b.n	8010596 <__sfp+0x4a>
 80105d4:	080e77f8 	.word	0x080e77f8

080105d8 <_malloc_trim_r>:
 80105d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105dc:	4f25      	ldr	r7, [pc, #148]	; (8010674 <_malloc_trim_r+0x9c>)
 80105de:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8010680 <_malloc_trim_r+0xa8>
 80105e2:	4689      	mov	r9, r1
 80105e4:	4606      	mov	r6, r0
 80105e6:	f7fd fecf 	bl	800e388 <__malloc_lock>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	685d      	ldr	r5, [r3, #4]
 80105ee:	f1a8 0411 	sub.w	r4, r8, #17
 80105f2:	f025 0503 	bic.w	r5, r5, #3
 80105f6:	eba4 0409 	sub.w	r4, r4, r9
 80105fa:	442c      	add	r4, r5
 80105fc:	fbb4 f4f8 	udiv	r4, r4, r8
 8010600:	3c01      	subs	r4, #1
 8010602:	fb08 f404 	mul.w	r4, r8, r4
 8010606:	4544      	cmp	r4, r8
 8010608:	da05      	bge.n	8010616 <_malloc_trim_r+0x3e>
 801060a:	4630      	mov	r0, r6
 801060c:	f7fd fec2 	bl	800e394 <__malloc_unlock>
 8010610:	2000      	movs	r0, #0
 8010612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010616:	2100      	movs	r1, #0
 8010618:	4630      	mov	r0, r6
 801061a:	f7fd fed9 	bl	800e3d0 <_sbrk_r>
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	442b      	add	r3, r5
 8010622:	4298      	cmp	r0, r3
 8010624:	d1f1      	bne.n	801060a <_malloc_trim_r+0x32>
 8010626:	4261      	negs	r1, r4
 8010628:	4630      	mov	r0, r6
 801062a:	f7fd fed1 	bl	800e3d0 <_sbrk_r>
 801062e:	3001      	adds	r0, #1
 8010630:	d110      	bne.n	8010654 <_malloc_trim_r+0x7c>
 8010632:	2100      	movs	r1, #0
 8010634:	4630      	mov	r0, r6
 8010636:	f7fd fecb 	bl	800e3d0 <_sbrk_r>
 801063a:	68ba      	ldr	r2, [r7, #8]
 801063c:	1a83      	subs	r3, r0, r2
 801063e:	2b0f      	cmp	r3, #15
 8010640:	dde3      	ble.n	801060a <_malloc_trim_r+0x32>
 8010642:	490d      	ldr	r1, [pc, #52]	; (8010678 <_malloc_trim_r+0xa0>)
 8010644:	6809      	ldr	r1, [r1, #0]
 8010646:	1a40      	subs	r0, r0, r1
 8010648:	490c      	ldr	r1, [pc, #48]	; (801067c <_malloc_trim_r+0xa4>)
 801064a:	f043 0301 	orr.w	r3, r3, #1
 801064e:	6008      	str	r0, [r1, #0]
 8010650:	6053      	str	r3, [r2, #4]
 8010652:	e7da      	b.n	801060a <_malloc_trim_r+0x32>
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	4a09      	ldr	r2, [pc, #36]	; (801067c <_malloc_trim_r+0xa4>)
 8010658:	1b2d      	subs	r5, r5, r4
 801065a:	f045 0501 	orr.w	r5, r5, #1
 801065e:	605d      	str	r5, [r3, #4]
 8010660:	6813      	ldr	r3, [r2, #0]
 8010662:	4630      	mov	r0, r6
 8010664:	1b1c      	subs	r4, r3, r4
 8010666:	6014      	str	r4, [r2, #0]
 8010668:	f7fd fe94 	bl	800e394 <__malloc_unlock>
 801066c:	2001      	movs	r0, #1
 801066e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010672:	bf00      	nop
 8010674:	200001d4 	.word	0x200001d4
 8010678:	200005dc 	.word	0x200005dc
 801067c:	20014efc 	.word	0x20014efc
 8010680:	00000080 	.word	0x00000080

08010684 <_free_r>:
 8010684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010688:	4604      	mov	r4, r0
 801068a:	4688      	mov	r8, r1
 801068c:	2900      	cmp	r1, #0
 801068e:	f000 80ab 	beq.w	80107e8 <_free_r+0x164>
 8010692:	f7fd fe79 	bl	800e388 <__malloc_lock>
 8010696:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801069a:	4d54      	ldr	r5, [pc, #336]	; (80107ec <_free_r+0x168>)
 801069c:	f022 0001 	bic.w	r0, r2, #1
 80106a0:	f1a8 0308 	sub.w	r3, r8, #8
 80106a4:	181f      	adds	r7, r3, r0
 80106a6:	68a9      	ldr	r1, [r5, #8]
 80106a8:	687e      	ldr	r6, [r7, #4]
 80106aa:	428f      	cmp	r7, r1
 80106ac:	f026 0603 	bic.w	r6, r6, #3
 80106b0:	f002 0201 	and.w	r2, r2, #1
 80106b4:	d11b      	bne.n	80106ee <_free_r+0x6a>
 80106b6:	4430      	add	r0, r6
 80106b8:	b93a      	cbnz	r2, 80106ca <_free_r+0x46>
 80106ba:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	4410      	add	r0, r2
 80106c2:	6899      	ldr	r1, [r3, #8]
 80106c4:	68da      	ldr	r2, [r3, #12]
 80106c6:	60ca      	str	r2, [r1, #12]
 80106c8:	6091      	str	r1, [r2, #8]
 80106ca:	f040 0201 	orr.w	r2, r0, #1
 80106ce:	605a      	str	r2, [r3, #4]
 80106d0:	60ab      	str	r3, [r5, #8]
 80106d2:	4b47      	ldr	r3, [pc, #284]	; (80107f0 <_free_r+0x16c>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4298      	cmp	r0, r3
 80106d8:	d304      	bcc.n	80106e4 <_free_r+0x60>
 80106da:	4b46      	ldr	r3, [pc, #280]	; (80107f4 <_free_r+0x170>)
 80106dc:	4620      	mov	r0, r4
 80106de:	6819      	ldr	r1, [r3, #0]
 80106e0:	f7ff ff7a 	bl	80105d8 <_malloc_trim_r>
 80106e4:	4620      	mov	r0, r4
 80106e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ea:	f7fd be53 	b.w	800e394 <__malloc_unlock>
 80106ee:	607e      	str	r6, [r7, #4]
 80106f0:	2a00      	cmp	r2, #0
 80106f2:	d139      	bne.n	8010768 <_free_r+0xe4>
 80106f4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80106f8:	1a5b      	subs	r3, r3, r1
 80106fa:	4408      	add	r0, r1
 80106fc:	6899      	ldr	r1, [r3, #8]
 80106fe:	f105 0e08 	add.w	lr, r5, #8
 8010702:	4571      	cmp	r1, lr
 8010704:	d032      	beq.n	801076c <_free_r+0xe8>
 8010706:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801070a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801070e:	f8ce 1008 	str.w	r1, [lr, #8]
 8010712:	19b9      	adds	r1, r7, r6
 8010714:	6849      	ldr	r1, [r1, #4]
 8010716:	07c9      	lsls	r1, r1, #31
 8010718:	d40a      	bmi.n	8010730 <_free_r+0xac>
 801071a:	4430      	add	r0, r6
 801071c:	68b9      	ldr	r1, [r7, #8]
 801071e:	bb3a      	cbnz	r2, 8010770 <_free_r+0xec>
 8010720:	4e35      	ldr	r6, [pc, #212]	; (80107f8 <_free_r+0x174>)
 8010722:	42b1      	cmp	r1, r6
 8010724:	d124      	bne.n	8010770 <_free_r+0xec>
 8010726:	616b      	str	r3, [r5, #20]
 8010728:	612b      	str	r3, [r5, #16]
 801072a:	2201      	movs	r2, #1
 801072c:	60d9      	str	r1, [r3, #12]
 801072e:	6099      	str	r1, [r3, #8]
 8010730:	f040 0101 	orr.w	r1, r0, #1
 8010734:	6059      	str	r1, [r3, #4]
 8010736:	5018      	str	r0, [r3, r0]
 8010738:	2a00      	cmp	r2, #0
 801073a:	d1d3      	bne.n	80106e4 <_free_r+0x60>
 801073c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8010740:	d21a      	bcs.n	8010778 <_free_r+0xf4>
 8010742:	08c0      	lsrs	r0, r0, #3
 8010744:	1081      	asrs	r1, r0, #2
 8010746:	2201      	movs	r2, #1
 8010748:	408a      	lsls	r2, r1
 801074a:	6869      	ldr	r1, [r5, #4]
 801074c:	3001      	adds	r0, #1
 801074e:	430a      	orrs	r2, r1
 8010750:	606a      	str	r2, [r5, #4]
 8010752:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8010756:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801075a:	6099      	str	r1, [r3, #8]
 801075c:	3a08      	subs	r2, #8
 801075e:	60da      	str	r2, [r3, #12]
 8010760:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8010764:	60cb      	str	r3, [r1, #12]
 8010766:	e7bd      	b.n	80106e4 <_free_r+0x60>
 8010768:	2200      	movs	r2, #0
 801076a:	e7d2      	b.n	8010712 <_free_r+0x8e>
 801076c:	2201      	movs	r2, #1
 801076e:	e7d0      	b.n	8010712 <_free_r+0x8e>
 8010770:	68fe      	ldr	r6, [r7, #12]
 8010772:	60ce      	str	r6, [r1, #12]
 8010774:	60b1      	str	r1, [r6, #8]
 8010776:	e7db      	b.n	8010730 <_free_r+0xac>
 8010778:	0a42      	lsrs	r2, r0, #9
 801077a:	2a04      	cmp	r2, #4
 801077c:	d813      	bhi.n	80107a6 <_free_r+0x122>
 801077e:	0982      	lsrs	r2, r0, #6
 8010780:	3238      	adds	r2, #56	; 0x38
 8010782:	1c51      	adds	r1, r2, #1
 8010784:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8010788:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801078c:	428e      	cmp	r6, r1
 801078e:	d124      	bne.n	80107da <_free_r+0x156>
 8010790:	2001      	movs	r0, #1
 8010792:	1092      	asrs	r2, r2, #2
 8010794:	fa00 f202 	lsl.w	r2, r0, r2
 8010798:	6868      	ldr	r0, [r5, #4]
 801079a:	4302      	orrs	r2, r0
 801079c:	606a      	str	r2, [r5, #4]
 801079e:	60de      	str	r6, [r3, #12]
 80107a0:	6099      	str	r1, [r3, #8]
 80107a2:	60b3      	str	r3, [r6, #8]
 80107a4:	e7de      	b.n	8010764 <_free_r+0xe0>
 80107a6:	2a14      	cmp	r2, #20
 80107a8:	d801      	bhi.n	80107ae <_free_r+0x12a>
 80107aa:	325b      	adds	r2, #91	; 0x5b
 80107ac:	e7e9      	b.n	8010782 <_free_r+0xfe>
 80107ae:	2a54      	cmp	r2, #84	; 0x54
 80107b0:	d802      	bhi.n	80107b8 <_free_r+0x134>
 80107b2:	0b02      	lsrs	r2, r0, #12
 80107b4:	326e      	adds	r2, #110	; 0x6e
 80107b6:	e7e4      	b.n	8010782 <_free_r+0xfe>
 80107b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80107bc:	d802      	bhi.n	80107c4 <_free_r+0x140>
 80107be:	0bc2      	lsrs	r2, r0, #15
 80107c0:	3277      	adds	r2, #119	; 0x77
 80107c2:	e7de      	b.n	8010782 <_free_r+0xfe>
 80107c4:	f240 5154 	movw	r1, #1364	; 0x554
 80107c8:	428a      	cmp	r2, r1
 80107ca:	bf9a      	itte	ls
 80107cc:	0c82      	lsrls	r2, r0, #18
 80107ce:	327c      	addls	r2, #124	; 0x7c
 80107d0:	227e      	movhi	r2, #126	; 0x7e
 80107d2:	e7d6      	b.n	8010782 <_free_r+0xfe>
 80107d4:	6889      	ldr	r1, [r1, #8]
 80107d6:	428e      	cmp	r6, r1
 80107d8:	d004      	beq.n	80107e4 <_free_r+0x160>
 80107da:	684a      	ldr	r2, [r1, #4]
 80107dc:	f022 0203 	bic.w	r2, r2, #3
 80107e0:	4290      	cmp	r0, r2
 80107e2:	d3f7      	bcc.n	80107d4 <_free_r+0x150>
 80107e4:	68ce      	ldr	r6, [r1, #12]
 80107e6:	e7da      	b.n	801079e <_free_r+0x11a>
 80107e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ec:	200001d4 	.word	0x200001d4
 80107f0:	200005e0 	.word	0x200005e0
 80107f4:	20014f2c 	.word	0x20014f2c
 80107f8:	200001dc 	.word	0x200001dc

080107fc <_fwalk_reent>:
 80107fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010800:	4680      	mov	r8, r0
 8010802:	4689      	mov	r9, r1
 8010804:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8010808:	2600      	movs	r6, #0
 801080a:	b914      	cbnz	r4, 8010812 <_fwalk_reent+0x16>
 801080c:	4630      	mov	r0, r6
 801080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010812:	68a5      	ldr	r5, [r4, #8]
 8010814:	6867      	ldr	r7, [r4, #4]
 8010816:	3f01      	subs	r7, #1
 8010818:	d501      	bpl.n	801081e <_fwalk_reent+0x22>
 801081a:	6824      	ldr	r4, [r4, #0]
 801081c:	e7f5      	b.n	801080a <_fwalk_reent+0xe>
 801081e:	89ab      	ldrh	r3, [r5, #12]
 8010820:	2b01      	cmp	r3, #1
 8010822:	d907      	bls.n	8010834 <_fwalk_reent+0x38>
 8010824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010828:	3301      	adds	r3, #1
 801082a:	d003      	beq.n	8010834 <_fwalk_reent+0x38>
 801082c:	4629      	mov	r1, r5
 801082e:	4640      	mov	r0, r8
 8010830:	47c8      	blx	r9
 8010832:	4306      	orrs	r6, r0
 8010834:	3568      	adds	r5, #104	; 0x68
 8010836:	e7ee      	b.n	8010816 <_fwalk_reent+0x1a>

08010838 <_localeconv_r>:
 8010838:	4b04      	ldr	r3, [pc, #16]	; (801084c <_localeconv_r+0x14>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	6a18      	ldr	r0, [r3, #32]
 801083e:	4b04      	ldr	r3, [pc, #16]	; (8010850 <_localeconv_r+0x18>)
 8010840:	2800      	cmp	r0, #0
 8010842:	bf08      	it	eq
 8010844:	4618      	moveq	r0, r3
 8010846:	30f0      	adds	r0, #240	; 0xf0
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	200000e0 	.word	0x200000e0
 8010850:	200005e4 	.word	0x200005e4

08010854 <__retarget_lock_init_recursive>:
 8010854:	4770      	bx	lr

08010856 <__retarget_lock_close_recursive>:
 8010856:	4770      	bx	lr

08010858 <__retarget_lock_acquire_recursive>:
 8010858:	4770      	bx	lr

0801085a <__retarget_lock_release_recursive>:
 801085a:	4770      	bx	lr

0801085c <__swhatbuf_r>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	460e      	mov	r6, r1
 8010860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010864:	2900      	cmp	r1, #0
 8010866:	b090      	sub	sp, #64	; 0x40
 8010868:	4614      	mov	r4, r2
 801086a:	461d      	mov	r5, r3
 801086c:	da09      	bge.n	8010882 <__swhatbuf_r+0x26>
 801086e:	89b3      	ldrh	r3, [r6, #12]
 8010870:	2200      	movs	r2, #0
 8010872:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010876:	602a      	str	r2, [r5, #0]
 8010878:	d116      	bne.n	80108a8 <__swhatbuf_r+0x4c>
 801087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801087e:	6023      	str	r3, [r4, #0]
 8010880:	e015      	b.n	80108ae <__swhatbuf_r+0x52>
 8010882:	aa01      	add	r2, sp, #4
 8010884:	f000 fcc4 	bl	8011210 <_fstat_r>
 8010888:	2800      	cmp	r0, #0
 801088a:	dbf0      	blt.n	801086e <__swhatbuf_r+0x12>
 801088c:	9a02      	ldr	r2, [sp, #8]
 801088e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010896:	425a      	negs	r2, r3
 8010898:	415a      	adcs	r2, r3
 801089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089e:	602a      	str	r2, [r5, #0]
 80108a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80108a4:	6023      	str	r3, [r4, #0]
 80108a6:	e002      	b.n	80108ae <__swhatbuf_r+0x52>
 80108a8:	2340      	movs	r3, #64	; 0x40
 80108aa:	6023      	str	r3, [r4, #0]
 80108ac:	4610      	mov	r0, r2
 80108ae:	b010      	add	sp, #64	; 0x40
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080108b4 <__smakebuf_r>:
 80108b4:	898b      	ldrh	r3, [r1, #12]
 80108b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108b8:	079d      	lsls	r5, r3, #30
 80108ba:	4606      	mov	r6, r0
 80108bc:	460c      	mov	r4, r1
 80108be:	d507      	bpl.n	80108d0 <__smakebuf_r+0x1c>
 80108c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	6123      	str	r3, [r4, #16]
 80108c8:	2301      	movs	r3, #1
 80108ca:	6163      	str	r3, [r4, #20]
 80108cc:	b002      	add	sp, #8
 80108ce:	bd70      	pop	{r4, r5, r6, pc}
 80108d0:	ab01      	add	r3, sp, #4
 80108d2:	466a      	mov	r2, sp
 80108d4:	f7ff ffc2 	bl	801085c <__swhatbuf_r>
 80108d8:	9900      	ldr	r1, [sp, #0]
 80108da:	4605      	mov	r5, r0
 80108dc:	4630      	mov	r0, r6
 80108de:	f7fd fb31 	bl	800df44 <_malloc_r>
 80108e2:	b948      	cbnz	r0, 80108f8 <__smakebuf_r+0x44>
 80108e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108e8:	059a      	lsls	r2, r3, #22
 80108ea:	d4ef      	bmi.n	80108cc <__smakebuf_r+0x18>
 80108ec:	f023 0303 	bic.w	r3, r3, #3
 80108f0:	f043 0302 	orr.w	r3, r3, #2
 80108f4:	81a3      	strh	r3, [r4, #12]
 80108f6:	e7e3      	b.n	80108c0 <__smakebuf_r+0xc>
 80108f8:	4b0d      	ldr	r3, [pc, #52]	; (8010930 <__smakebuf_r+0x7c>)
 80108fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	6020      	str	r0, [r4, #0]
 8010900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010904:	81a3      	strh	r3, [r4, #12]
 8010906:	9b00      	ldr	r3, [sp, #0]
 8010908:	6163      	str	r3, [r4, #20]
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	6120      	str	r0, [r4, #16]
 801090e:	b15b      	cbz	r3, 8010928 <__smakebuf_r+0x74>
 8010910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010914:	4630      	mov	r0, r6
 8010916:	f000 fddb 	bl	80114d0 <_isatty_r>
 801091a:	b128      	cbz	r0, 8010928 <__smakebuf_r+0x74>
 801091c:	89a3      	ldrh	r3, [r4, #12]
 801091e:	f023 0303 	bic.w	r3, r3, #3
 8010922:	f043 0301 	orr.w	r3, r3, #1
 8010926:	81a3      	strh	r3, [r4, #12]
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	431d      	orrs	r5, r3
 801092c:	81a5      	strh	r5, [r4, #12]
 801092e:	e7cd      	b.n	80108cc <__smakebuf_r+0x18>
 8010930:	08010429 	.word	0x08010429

08010934 <_Balloc>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010938:	4604      	mov	r4, r0
 801093a:	460e      	mov	r6, r1
 801093c:	b93d      	cbnz	r5, 801094e <_Balloc+0x1a>
 801093e:	2010      	movs	r0, #16
 8010940:	f7fd faf0 	bl	800df24 <malloc>
 8010944:	6260      	str	r0, [r4, #36]	; 0x24
 8010946:	6045      	str	r5, [r0, #4]
 8010948:	6085      	str	r5, [r0, #8]
 801094a:	6005      	str	r5, [r0, #0]
 801094c:	60c5      	str	r5, [r0, #12]
 801094e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010950:	68eb      	ldr	r3, [r5, #12]
 8010952:	b183      	cbz	r3, 8010976 <_Balloc+0x42>
 8010954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801095c:	b9b8      	cbnz	r0, 801098e <_Balloc+0x5a>
 801095e:	2101      	movs	r1, #1
 8010960:	fa01 f506 	lsl.w	r5, r1, r6
 8010964:	1d6a      	adds	r2, r5, #5
 8010966:	0092      	lsls	r2, r2, #2
 8010968:	4620      	mov	r0, r4
 801096a:	f000 fb3d 	bl	8010fe8 <_calloc_r>
 801096e:	b160      	cbz	r0, 801098a <_Balloc+0x56>
 8010970:	6046      	str	r6, [r0, #4]
 8010972:	6085      	str	r5, [r0, #8]
 8010974:	e00e      	b.n	8010994 <_Balloc+0x60>
 8010976:	2221      	movs	r2, #33	; 0x21
 8010978:	2104      	movs	r1, #4
 801097a:	4620      	mov	r0, r4
 801097c:	f000 fb34 	bl	8010fe8 <_calloc_r>
 8010980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010982:	60e8      	str	r0, [r5, #12]
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d1e4      	bne.n	8010954 <_Balloc+0x20>
 801098a:	2000      	movs	r0, #0
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	6802      	ldr	r2, [r0, #0]
 8010990:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010994:	2300      	movs	r3, #0
 8010996:	6103      	str	r3, [r0, #16]
 8010998:	60c3      	str	r3, [r0, #12]
 801099a:	bd70      	pop	{r4, r5, r6, pc}

0801099c <_Bfree>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80109a0:	4606      	mov	r6, r0
 80109a2:	460d      	mov	r5, r1
 80109a4:	b93c      	cbnz	r4, 80109b6 <_Bfree+0x1a>
 80109a6:	2010      	movs	r0, #16
 80109a8:	f7fd fabc 	bl	800df24 <malloc>
 80109ac:	6270      	str	r0, [r6, #36]	; 0x24
 80109ae:	6044      	str	r4, [r0, #4]
 80109b0:	6084      	str	r4, [r0, #8]
 80109b2:	6004      	str	r4, [r0, #0]
 80109b4:	60c4      	str	r4, [r0, #12]
 80109b6:	b13d      	cbz	r5, 80109c8 <_Bfree+0x2c>
 80109b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109ba:	686a      	ldr	r2, [r5, #4]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109c2:	6029      	str	r1, [r5, #0]
 80109c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80109c8:	bd70      	pop	{r4, r5, r6, pc}

080109ca <__multadd>:
 80109ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ce:	690d      	ldr	r5, [r1, #16]
 80109d0:	461f      	mov	r7, r3
 80109d2:	4606      	mov	r6, r0
 80109d4:	460c      	mov	r4, r1
 80109d6:	f101 0e14 	add.w	lr, r1, #20
 80109da:	2300      	movs	r3, #0
 80109dc:	f8de 0000 	ldr.w	r0, [lr]
 80109e0:	b281      	uxth	r1, r0
 80109e2:	fb02 7101 	mla	r1, r2, r1, r7
 80109e6:	0c0f      	lsrs	r7, r1, #16
 80109e8:	0c00      	lsrs	r0, r0, #16
 80109ea:	fb02 7000 	mla	r0, r2, r0, r7
 80109ee:	b289      	uxth	r1, r1
 80109f0:	3301      	adds	r3, #1
 80109f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80109f6:	429d      	cmp	r5, r3
 80109f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80109fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010a00:	dcec      	bgt.n	80109dc <__multadd+0x12>
 8010a02:	b1d7      	cbz	r7, 8010a3a <__multadd+0x70>
 8010a04:	68a3      	ldr	r3, [r4, #8]
 8010a06:	429d      	cmp	r5, r3
 8010a08:	db12      	blt.n	8010a30 <__multadd+0x66>
 8010a0a:	6861      	ldr	r1, [r4, #4]
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	3101      	adds	r1, #1
 8010a10:	f7ff ff90 	bl	8010934 <_Balloc>
 8010a14:	6922      	ldr	r2, [r4, #16]
 8010a16:	3202      	adds	r2, #2
 8010a18:	f104 010c 	add.w	r1, r4, #12
 8010a1c:	4680      	mov	r8, r0
 8010a1e:	0092      	lsls	r2, r2, #2
 8010a20:	300c      	adds	r0, #12
 8010a22:	f7fd fc9d 	bl	800e360 <memcpy>
 8010a26:	4621      	mov	r1, r4
 8010a28:	4630      	mov	r0, r6
 8010a2a:	f7ff ffb7 	bl	801099c <_Bfree>
 8010a2e:	4644      	mov	r4, r8
 8010a30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a34:	3501      	adds	r5, #1
 8010a36:	615f      	str	r7, [r3, #20]
 8010a38:	6125      	str	r5, [r4, #16]
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a40 <__hi0bits>:
 8010a40:	0c02      	lsrs	r2, r0, #16
 8010a42:	0412      	lsls	r2, r2, #16
 8010a44:	4603      	mov	r3, r0
 8010a46:	b9b2      	cbnz	r2, 8010a76 <__hi0bits+0x36>
 8010a48:	0403      	lsls	r3, r0, #16
 8010a4a:	2010      	movs	r0, #16
 8010a4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010a50:	bf04      	itt	eq
 8010a52:	021b      	lsleq	r3, r3, #8
 8010a54:	3008      	addeq	r0, #8
 8010a56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010a5a:	bf04      	itt	eq
 8010a5c:	011b      	lsleq	r3, r3, #4
 8010a5e:	3004      	addeq	r0, #4
 8010a60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010a64:	bf04      	itt	eq
 8010a66:	009b      	lsleq	r3, r3, #2
 8010a68:	3002      	addeq	r0, #2
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	db06      	blt.n	8010a7c <__hi0bits+0x3c>
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	d503      	bpl.n	8010a7a <__hi0bits+0x3a>
 8010a72:	3001      	adds	r0, #1
 8010a74:	4770      	bx	lr
 8010a76:	2000      	movs	r0, #0
 8010a78:	e7e8      	b.n	8010a4c <__hi0bits+0xc>
 8010a7a:	2020      	movs	r0, #32
 8010a7c:	4770      	bx	lr

08010a7e <__lo0bits>:
 8010a7e:	6803      	ldr	r3, [r0, #0]
 8010a80:	f013 0207 	ands.w	r2, r3, #7
 8010a84:	4601      	mov	r1, r0
 8010a86:	d00b      	beq.n	8010aa0 <__lo0bits+0x22>
 8010a88:	07da      	lsls	r2, r3, #31
 8010a8a:	d423      	bmi.n	8010ad4 <__lo0bits+0x56>
 8010a8c:	0798      	lsls	r0, r3, #30
 8010a8e:	bf49      	itett	mi
 8010a90:	085b      	lsrmi	r3, r3, #1
 8010a92:	089b      	lsrpl	r3, r3, #2
 8010a94:	2001      	movmi	r0, #1
 8010a96:	600b      	strmi	r3, [r1, #0]
 8010a98:	bf5c      	itt	pl
 8010a9a:	600b      	strpl	r3, [r1, #0]
 8010a9c:	2002      	movpl	r0, #2
 8010a9e:	4770      	bx	lr
 8010aa0:	b298      	uxth	r0, r3
 8010aa2:	b9a8      	cbnz	r0, 8010ad0 <__lo0bits+0x52>
 8010aa4:	0c1b      	lsrs	r3, r3, #16
 8010aa6:	2010      	movs	r0, #16
 8010aa8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010aac:	bf04      	itt	eq
 8010aae:	0a1b      	lsreq	r3, r3, #8
 8010ab0:	3008      	addeq	r0, #8
 8010ab2:	071a      	lsls	r2, r3, #28
 8010ab4:	bf04      	itt	eq
 8010ab6:	091b      	lsreq	r3, r3, #4
 8010ab8:	3004      	addeq	r0, #4
 8010aba:	079a      	lsls	r2, r3, #30
 8010abc:	bf04      	itt	eq
 8010abe:	089b      	lsreq	r3, r3, #2
 8010ac0:	3002      	addeq	r0, #2
 8010ac2:	07da      	lsls	r2, r3, #31
 8010ac4:	d402      	bmi.n	8010acc <__lo0bits+0x4e>
 8010ac6:	085b      	lsrs	r3, r3, #1
 8010ac8:	d006      	beq.n	8010ad8 <__lo0bits+0x5a>
 8010aca:	3001      	adds	r0, #1
 8010acc:	600b      	str	r3, [r1, #0]
 8010ace:	4770      	bx	lr
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	e7e9      	b.n	8010aa8 <__lo0bits+0x2a>
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	4770      	bx	lr
 8010ad8:	2020      	movs	r0, #32
 8010ada:	4770      	bx	lr

08010adc <__i2b>:
 8010adc:	b510      	push	{r4, lr}
 8010ade:	460c      	mov	r4, r1
 8010ae0:	2101      	movs	r1, #1
 8010ae2:	f7ff ff27 	bl	8010934 <_Balloc>
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	6144      	str	r4, [r0, #20]
 8010aea:	6102      	str	r2, [r0, #16]
 8010aec:	bd10      	pop	{r4, pc}

08010aee <__multiply>:
 8010aee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af2:	4614      	mov	r4, r2
 8010af4:	690a      	ldr	r2, [r1, #16]
 8010af6:	6923      	ldr	r3, [r4, #16]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	bfb8      	it	lt
 8010afc:	460b      	movlt	r3, r1
 8010afe:	4689      	mov	r9, r1
 8010b00:	bfbc      	itt	lt
 8010b02:	46a1      	movlt	r9, r4
 8010b04:	461c      	movlt	r4, r3
 8010b06:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b0a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010b0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010b12:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b16:	eb07 060a 	add.w	r6, r7, sl
 8010b1a:	429e      	cmp	r6, r3
 8010b1c:	bfc8      	it	gt
 8010b1e:	3101      	addgt	r1, #1
 8010b20:	f7ff ff08 	bl	8010934 <_Balloc>
 8010b24:	f100 0514 	add.w	r5, r0, #20
 8010b28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b2c:	462b      	mov	r3, r5
 8010b2e:	2200      	movs	r2, #0
 8010b30:	4543      	cmp	r3, r8
 8010b32:	d316      	bcc.n	8010b62 <__multiply+0x74>
 8010b34:	f104 0214 	add.w	r2, r4, #20
 8010b38:	f109 0114 	add.w	r1, r9, #20
 8010b3c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8010b40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	9c01      	ldr	r4, [sp, #4]
 8010b48:	4294      	cmp	r4, r2
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	d80c      	bhi.n	8010b68 <__multiply+0x7a>
 8010b4e:	2e00      	cmp	r6, #0
 8010b50:	dd03      	ble.n	8010b5a <__multiply+0x6c>
 8010b52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d054      	beq.n	8010c04 <__multiply+0x116>
 8010b5a:	6106      	str	r6, [r0, #16]
 8010b5c:	b003      	add	sp, #12
 8010b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b62:	f843 2b04 	str.w	r2, [r3], #4
 8010b66:	e7e3      	b.n	8010b30 <__multiply+0x42>
 8010b68:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b6c:	3204      	adds	r2, #4
 8010b6e:	f1ba 0f00 	cmp.w	sl, #0
 8010b72:	d020      	beq.n	8010bb6 <__multiply+0xc8>
 8010b74:	46ae      	mov	lr, r5
 8010b76:	4689      	mov	r9, r1
 8010b78:	f04f 0c00 	mov.w	ip, #0
 8010b7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b80:	f8be b000 	ldrh.w	fp, [lr]
 8010b84:	b2a3      	uxth	r3, r4
 8010b86:	fb0a b303 	mla	r3, sl, r3, fp
 8010b8a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8010b8e:	f8de 4000 	ldr.w	r4, [lr]
 8010b92:	4463      	add	r3, ip
 8010b94:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8010b98:	fb0a c40b 	mla	r4, sl, fp, ip
 8010b9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010ba6:	454f      	cmp	r7, r9
 8010ba8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8010bac:	f84e 3b04 	str.w	r3, [lr], #4
 8010bb0:	d8e4      	bhi.n	8010b7c <__multiply+0x8e>
 8010bb2:	f8ce c000 	str.w	ip, [lr]
 8010bb6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8010bba:	f1b9 0f00 	cmp.w	r9, #0
 8010bbe:	d01f      	beq.n	8010c00 <__multiply+0x112>
 8010bc0:	682b      	ldr	r3, [r5, #0]
 8010bc2:	46ae      	mov	lr, r5
 8010bc4:	468c      	mov	ip, r1
 8010bc6:	f04f 0a00 	mov.w	sl, #0
 8010bca:	f8bc 4000 	ldrh.w	r4, [ip]
 8010bce:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010bd2:	fb09 b404 	mla	r4, r9, r4, fp
 8010bd6:	44a2      	add	sl, r4
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8010bde:	f84e 3b04 	str.w	r3, [lr], #4
 8010be2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010be6:	f8be 4000 	ldrh.w	r4, [lr]
 8010bea:	0c1b      	lsrs	r3, r3, #16
 8010bec:	fb09 4303 	mla	r3, r9, r3, r4
 8010bf0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8010bf4:	4567      	cmp	r7, ip
 8010bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bfa:	d8e6      	bhi.n	8010bca <__multiply+0xdc>
 8010bfc:	f8ce 3000 	str.w	r3, [lr]
 8010c00:	3504      	adds	r5, #4
 8010c02:	e7a0      	b.n	8010b46 <__multiply+0x58>
 8010c04:	3e01      	subs	r6, #1
 8010c06:	e7a2      	b.n	8010b4e <__multiply+0x60>

08010c08 <__pow5mult>:
 8010c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c0c:	4615      	mov	r5, r2
 8010c0e:	f012 0203 	ands.w	r2, r2, #3
 8010c12:	4606      	mov	r6, r0
 8010c14:	460f      	mov	r7, r1
 8010c16:	d007      	beq.n	8010c28 <__pow5mult+0x20>
 8010c18:	3a01      	subs	r2, #1
 8010c1a:	4c21      	ldr	r4, [pc, #132]	; (8010ca0 <__pow5mult+0x98>)
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c22:	f7ff fed2 	bl	80109ca <__multadd>
 8010c26:	4607      	mov	r7, r0
 8010c28:	10ad      	asrs	r5, r5, #2
 8010c2a:	d035      	beq.n	8010c98 <__pow5mult+0x90>
 8010c2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010c2e:	b93c      	cbnz	r4, 8010c40 <__pow5mult+0x38>
 8010c30:	2010      	movs	r0, #16
 8010c32:	f7fd f977 	bl	800df24 <malloc>
 8010c36:	6270      	str	r0, [r6, #36]	; 0x24
 8010c38:	6044      	str	r4, [r0, #4]
 8010c3a:	6084      	str	r4, [r0, #8]
 8010c3c:	6004      	str	r4, [r0, #0]
 8010c3e:	60c4      	str	r4, [r0, #12]
 8010c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c48:	b94c      	cbnz	r4, 8010c5e <__pow5mult+0x56>
 8010c4a:	f240 2171 	movw	r1, #625	; 0x271
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f7ff ff44 	bl	8010adc <__i2b>
 8010c54:	2300      	movs	r3, #0
 8010c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	f04f 0800 	mov.w	r8, #0
 8010c62:	07eb      	lsls	r3, r5, #31
 8010c64:	d50a      	bpl.n	8010c7c <__pow5mult+0x74>
 8010c66:	4639      	mov	r1, r7
 8010c68:	4622      	mov	r2, r4
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ff ff3f 	bl	8010aee <__multiply>
 8010c70:	4639      	mov	r1, r7
 8010c72:	4681      	mov	r9, r0
 8010c74:	4630      	mov	r0, r6
 8010c76:	f7ff fe91 	bl	801099c <_Bfree>
 8010c7a:	464f      	mov	r7, r9
 8010c7c:	106d      	asrs	r5, r5, #1
 8010c7e:	d00b      	beq.n	8010c98 <__pow5mult+0x90>
 8010c80:	6820      	ldr	r0, [r4, #0]
 8010c82:	b938      	cbnz	r0, 8010c94 <__pow5mult+0x8c>
 8010c84:	4622      	mov	r2, r4
 8010c86:	4621      	mov	r1, r4
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f7ff ff30 	bl	8010aee <__multiply>
 8010c8e:	6020      	str	r0, [r4, #0]
 8010c90:	f8c0 8000 	str.w	r8, [r0]
 8010c94:	4604      	mov	r4, r0
 8010c96:	e7e4      	b.n	8010c62 <__pow5mult+0x5a>
 8010c98:	4638      	mov	r0, r7
 8010c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9e:	bf00      	nop
 8010ca0:	080e79b0 	.word	0x080e79b0

08010ca4 <__lshift>:
 8010ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca8:	460c      	mov	r4, r1
 8010caa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	6849      	ldr	r1, [r1, #4]
 8010cb2:	eb0a 0903 	add.w	r9, sl, r3
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	4607      	mov	r7, r0
 8010cba:	4616      	mov	r6, r2
 8010cbc:	f109 0501 	add.w	r5, r9, #1
 8010cc0:	42ab      	cmp	r3, r5
 8010cc2:	db31      	blt.n	8010d28 <__lshift+0x84>
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	f7ff fe35 	bl	8010934 <_Balloc>
 8010cca:	2200      	movs	r2, #0
 8010ccc:	4680      	mov	r8, r0
 8010cce:	f100 0314 	add.w	r3, r0, #20
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	4552      	cmp	r2, sl
 8010cd6:	db2a      	blt.n	8010d2e <__lshift+0x8a>
 8010cd8:	6920      	ldr	r0, [r4, #16]
 8010cda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cde:	f104 0114 	add.w	r1, r4, #20
 8010ce2:	f016 021f 	ands.w	r2, r6, #31
 8010ce6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010cea:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8010cee:	d022      	beq.n	8010d36 <__lshift+0x92>
 8010cf0:	f1c2 0c20 	rsb	ip, r2, #32
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	680e      	ldr	r6, [r1, #0]
 8010cf8:	4096      	lsls	r6, r2
 8010cfa:	4330      	orrs	r0, r6
 8010cfc:	f843 0b04 	str.w	r0, [r3], #4
 8010d00:	f851 0b04 	ldr.w	r0, [r1], #4
 8010d04:	458e      	cmp	lr, r1
 8010d06:	fa20 f00c 	lsr.w	r0, r0, ip
 8010d0a:	d8f4      	bhi.n	8010cf6 <__lshift+0x52>
 8010d0c:	6018      	str	r0, [r3, #0]
 8010d0e:	b108      	cbz	r0, 8010d14 <__lshift+0x70>
 8010d10:	f109 0502 	add.w	r5, r9, #2
 8010d14:	3d01      	subs	r5, #1
 8010d16:	4638      	mov	r0, r7
 8010d18:	f8c8 5010 	str.w	r5, [r8, #16]
 8010d1c:	4621      	mov	r1, r4
 8010d1e:	f7ff fe3d 	bl	801099c <_Bfree>
 8010d22:	4640      	mov	r0, r8
 8010d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d28:	3101      	adds	r1, #1
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	e7c8      	b.n	8010cc0 <__lshift+0x1c>
 8010d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010d32:	3201      	adds	r2, #1
 8010d34:	e7ce      	b.n	8010cd4 <__lshift+0x30>
 8010d36:	3b04      	subs	r3, #4
 8010d38:	f851 2b04 	ldr.w	r2, [r1], #4
 8010d3c:	f843 2f04 	str.w	r2, [r3, #4]!
 8010d40:	458e      	cmp	lr, r1
 8010d42:	d8f9      	bhi.n	8010d38 <__lshift+0x94>
 8010d44:	e7e6      	b.n	8010d14 <__lshift+0x70>

08010d46 <__mcmp>:
 8010d46:	6903      	ldr	r3, [r0, #16]
 8010d48:	690a      	ldr	r2, [r1, #16]
 8010d4a:	1a9b      	subs	r3, r3, r2
 8010d4c:	b530      	push	{r4, r5, lr}
 8010d4e:	d10c      	bne.n	8010d6a <__mcmp+0x24>
 8010d50:	0092      	lsls	r2, r2, #2
 8010d52:	3014      	adds	r0, #20
 8010d54:	3114      	adds	r1, #20
 8010d56:	1884      	adds	r4, r0, r2
 8010d58:	4411      	add	r1, r2
 8010d5a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d5e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d62:	4295      	cmp	r5, r2
 8010d64:	d003      	beq.n	8010d6e <__mcmp+0x28>
 8010d66:	d305      	bcc.n	8010d74 <__mcmp+0x2e>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	bd30      	pop	{r4, r5, pc}
 8010d6e:	42a0      	cmp	r0, r4
 8010d70:	d3f3      	bcc.n	8010d5a <__mcmp+0x14>
 8010d72:	e7fa      	b.n	8010d6a <__mcmp+0x24>
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d78:	e7f7      	b.n	8010d6a <__mcmp+0x24>

08010d7a <__mdiff>:
 8010d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d7e:	460d      	mov	r5, r1
 8010d80:	4607      	mov	r7, r0
 8010d82:	4611      	mov	r1, r2
 8010d84:	4628      	mov	r0, r5
 8010d86:	4614      	mov	r4, r2
 8010d88:	f7ff ffdd 	bl	8010d46 <__mcmp>
 8010d8c:	1e06      	subs	r6, r0, #0
 8010d8e:	d108      	bne.n	8010da2 <__mdiff+0x28>
 8010d90:	4631      	mov	r1, r6
 8010d92:	4638      	mov	r0, r7
 8010d94:	f7ff fdce 	bl	8010934 <_Balloc>
 8010d98:	2301      	movs	r3, #1
 8010d9a:	6103      	str	r3, [r0, #16]
 8010d9c:	6146      	str	r6, [r0, #20]
 8010d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da2:	bfa4      	itt	ge
 8010da4:	4623      	movge	r3, r4
 8010da6:	462c      	movge	r4, r5
 8010da8:	4638      	mov	r0, r7
 8010daa:	6861      	ldr	r1, [r4, #4]
 8010dac:	bfa6      	itte	ge
 8010dae:	461d      	movge	r5, r3
 8010db0:	2600      	movge	r6, #0
 8010db2:	2601      	movlt	r6, #1
 8010db4:	f7ff fdbe 	bl	8010934 <_Balloc>
 8010db8:	692b      	ldr	r3, [r5, #16]
 8010dba:	60c6      	str	r6, [r0, #12]
 8010dbc:	6926      	ldr	r6, [r4, #16]
 8010dbe:	f105 0914 	add.w	r9, r5, #20
 8010dc2:	f104 0214 	add.w	r2, r4, #20
 8010dc6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010dca:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010dce:	f100 0514 	add.w	r5, r0, #20
 8010dd2:	f04f 0c00 	mov.w	ip, #0
 8010dd6:	f852 ab04 	ldr.w	sl, [r2], #4
 8010dda:	f859 4b04 	ldr.w	r4, [r9], #4
 8010dde:	fa1c f18a 	uxtah	r1, ip, sl
 8010de2:	b2a3      	uxth	r3, r4
 8010de4:	1ac9      	subs	r1, r1, r3
 8010de6:	0c23      	lsrs	r3, r4, #16
 8010de8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010dec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010df0:	b289      	uxth	r1, r1
 8010df2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8010df6:	45c8      	cmp	r8, r9
 8010df8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010dfc:	4696      	mov	lr, r2
 8010dfe:	f845 3b04 	str.w	r3, [r5], #4
 8010e02:	d8e8      	bhi.n	8010dd6 <__mdiff+0x5c>
 8010e04:	45be      	cmp	lr, r7
 8010e06:	d305      	bcc.n	8010e14 <__mdiff+0x9a>
 8010e08:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010e0c:	b18b      	cbz	r3, 8010e32 <__mdiff+0xb8>
 8010e0e:	6106      	str	r6, [r0, #16]
 8010e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e14:	f85e 1b04 	ldr.w	r1, [lr], #4
 8010e18:	fa1c f381 	uxtah	r3, ip, r1
 8010e1c:	141a      	asrs	r2, r3, #16
 8010e1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010e2c:	f845 3b04 	str.w	r3, [r5], #4
 8010e30:	e7e8      	b.n	8010e04 <__mdiff+0x8a>
 8010e32:	3e01      	subs	r6, #1
 8010e34:	e7e8      	b.n	8010e08 <__mdiff+0x8e>

08010e36 <__d2b>:
 8010e36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e3a:	460e      	mov	r6, r1
 8010e3c:	2101      	movs	r1, #1
 8010e3e:	ec59 8b10 	vmov	r8, r9, d0
 8010e42:	4615      	mov	r5, r2
 8010e44:	f7ff fd76 	bl	8010934 <_Balloc>
 8010e48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010e4c:	4607      	mov	r7, r0
 8010e4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e52:	bb34      	cbnz	r4, 8010ea2 <__d2b+0x6c>
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	f1b8 0f00 	cmp.w	r8, #0
 8010e5a:	d027      	beq.n	8010eac <__d2b+0x76>
 8010e5c:	a802      	add	r0, sp, #8
 8010e5e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8010e62:	f7ff fe0c 	bl	8010a7e <__lo0bits>
 8010e66:	9900      	ldr	r1, [sp, #0]
 8010e68:	b1f0      	cbz	r0, 8010ea8 <__d2b+0x72>
 8010e6a:	9a01      	ldr	r2, [sp, #4]
 8010e6c:	f1c0 0320 	rsb	r3, r0, #32
 8010e70:	fa02 f303 	lsl.w	r3, r2, r3
 8010e74:	430b      	orrs	r3, r1
 8010e76:	40c2      	lsrs	r2, r0
 8010e78:	617b      	str	r3, [r7, #20]
 8010e7a:	9201      	str	r2, [sp, #4]
 8010e7c:	9b01      	ldr	r3, [sp, #4]
 8010e7e:	61bb      	str	r3, [r7, #24]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	bf14      	ite	ne
 8010e84:	2102      	movne	r1, #2
 8010e86:	2101      	moveq	r1, #1
 8010e88:	6139      	str	r1, [r7, #16]
 8010e8a:	b1c4      	cbz	r4, 8010ebe <__d2b+0x88>
 8010e8c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010e90:	4404      	add	r4, r0
 8010e92:	6034      	str	r4, [r6, #0]
 8010e94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e98:	6028      	str	r0, [r5, #0]
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	b003      	add	sp, #12
 8010e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ea6:	e7d5      	b.n	8010e54 <__d2b+0x1e>
 8010ea8:	6179      	str	r1, [r7, #20]
 8010eaa:	e7e7      	b.n	8010e7c <__d2b+0x46>
 8010eac:	a801      	add	r0, sp, #4
 8010eae:	f7ff fde6 	bl	8010a7e <__lo0bits>
 8010eb2:	9b01      	ldr	r3, [sp, #4]
 8010eb4:	617b      	str	r3, [r7, #20]
 8010eb6:	2101      	movs	r1, #1
 8010eb8:	6139      	str	r1, [r7, #16]
 8010eba:	3020      	adds	r0, #32
 8010ebc:	e7e5      	b.n	8010e8a <__d2b+0x54>
 8010ebe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010ec2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ec6:	6030      	str	r0, [r6, #0]
 8010ec8:	6918      	ldr	r0, [r3, #16]
 8010eca:	f7ff fdb9 	bl	8010a40 <__hi0bits>
 8010ece:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010ed2:	e7e1      	b.n	8010e98 <__d2b+0x62>

08010ed4 <__sread>:
 8010ed4:	b510      	push	{r4, lr}
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010edc:	f000 fb54 	bl	8011588 <_read_r>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	bfab      	itete	ge
 8010ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ee8:	181b      	addge	r3, r3, r0
 8010eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010eee:	bfac      	ite	ge
 8010ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ef2:	81a3      	strhlt	r3, [r4, #12]
 8010ef4:	bd10      	pop	{r4, pc}

08010ef6 <__swrite>:
 8010ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010efa:	461f      	mov	r7, r3
 8010efc:	898b      	ldrh	r3, [r1, #12]
 8010efe:	05db      	lsls	r3, r3, #23
 8010f00:	4605      	mov	r5, r0
 8010f02:	460c      	mov	r4, r1
 8010f04:	4616      	mov	r6, r2
 8010f06:	d505      	bpl.n	8010f14 <__swrite+0x1e>
 8010f08:	2302      	movs	r3, #2
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f10:	f000 fafc 	bl	801150c <_lseek_r>
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f1e:	81a3      	strh	r3, [r4, #12]
 8010f20:	4632      	mov	r2, r6
 8010f22:	463b      	mov	r3, r7
 8010f24:	4628      	mov	r0, r5
 8010f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f2a:	f000 b84b 	b.w	8010fc4 <_write_r>

08010f2e <__sseek>:
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	460c      	mov	r4, r1
 8010f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f36:	f000 fae9 	bl	801150c <_lseek_r>
 8010f3a:	1c43      	adds	r3, r0, #1
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	bf15      	itete	ne
 8010f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f4a:	81a3      	strheq	r3, [r4, #12]
 8010f4c:	bf18      	it	ne
 8010f4e:	81a3      	strhne	r3, [r4, #12]
 8010f50:	bd10      	pop	{r4, pc}

08010f52 <__sclose>:
 8010f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f56:	f000 b875 	b.w	8011044 <_close_r>

08010f5a <__sprint_r>:
 8010f5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5e:	6893      	ldr	r3, [r2, #8]
 8010f60:	4680      	mov	r8, r0
 8010f62:	460f      	mov	r7, r1
 8010f64:	4614      	mov	r4, r2
 8010f66:	b91b      	cbnz	r3, 8010f70 <__sprint_r+0x16>
 8010f68:	6053      	str	r3, [r2, #4]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010f72:	049d      	lsls	r5, r3, #18
 8010f74:	d523      	bpl.n	8010fbe <__sprint_r+0x64>
 8010f76:	6815      	ldr	r5, [r2, #0]
 8010f78:	68a0      	ldr	r0, [r4, #8]
 8010f7a:	3508      	adds	r5, #8
 8010f7c:	b920      	cbnz	r0, 8010f88 <__sprint_r+0x2e>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	60a3      	str	r3, [r4, #8]
 8010f82:	6063      	str	r3, [r4, #4]
 8010f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f88:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8010f8c:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8010f90:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8010f94:	f04f 0900 	mov.w	r9, #0
 8010f98:	45ca      	cmp	sl, r9
 8010f9a:	dc05      	bgt.n	8010fa8 <__sprint_r+0x4e>
 8010f9c:	68a3      	ldr	r3, [r4, #8]
 8010f9e:	f026 0603 	bic.w	r6, r6, #3
 8010fa2:	1b9e      	subs	r6, r3, r6
 8010fa4:	60a6      	str	r6, [r4, #8]
 8010fa6:	e7e7      	b.n	8010f78 <__sprint_r+0x1e>
 8010fa8:	463a      	mov	r2, r7
 8010faa:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8010fae:	4640      	mov	r0, r8
 8010fb0:	f000 f905 	bl	80111be <_fputwc_r>
 8010fb4:	1c43      	adds	r3, r0, #1
 8010fb6:	d0e2      	beq.n	8010f7e <__sprint_r+0x24>
 8010fb8:	f109 0901 	add.w	r9, r9, #1
 8010fbc:	e7ec      	b.n	8010f98 <__sprint_r+0x3e>
 8010fbe:	f000 f939 	bl	8011234 <__sfvwrite_r>
 8010fc2:	e7dc      	b.n	8010f7e <__sprint_r+0x24>

08010fc4 <_write_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4c07      	ldr	r4, [pc, #28]	; (8010fe4 <_write_r+0x20>)
 8010fc8:	4605      	mov	r5, r0
 8010fca:	4608      	mov	r0, r1
 8010fcc:	4611      	mov	r1, r2
 8010fce:	2200      	movs	r2, #0
 8010fd0:	6022      	str	r2, [r4, #0]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	f7f0 fb0c 	bl	80015f0 <_write>
 8010fd8:	1c43      	adds	r3, r0, #1
 8010fda:	d102      	bne.n	8010fe2 <_write_r+0x1e>
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	b103      	cbz	r3, 8010fe2 <_write_r+0x1e>
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}
 8010fe4:	20015c34 	.word	0x20015c34

08010fe8 <_calloc_r>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	4351      	muls	r1, r2
 8010fec:	f7fc ffaa 	bl	800df44 <_malloc_r>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	b198      	cbz	r0, 801101c <_calloc_r+0x34>
 8010ff4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010ff8:	f022 0203 	bic.w	r2, r2, #3
 8010ffc:	3a04      	subs	r2, #4
 8010ffe:	2a24      	cmp	r2, #36	; 0x24
 8011000:	d81b      	bhi.n	801103a <_calloc_r+0x52>
 8011002:	2a13      	cmp	r2, #19
 8011004:	d917      	bls.n	8011036 <_calloc_r+0x4e>
 8011006:	2100      	movs	r1, #0
 8011008:	2a1b      	cmp	r2, #27
 801100a:	6001      	str	r1, [r0, #0]
 801100c:	6041      	str	r1, [r0, #4]
 801100e:	d807      	bhi.n	8011020 <_calloc_r+0x38>
 8011010:	f100 0308 	add.w	r3, r0, #8
 8011014:	2200      	movs	r2, #0
 8011016:	601a      	str	r2, [r3, #0]
 8011018:	605a      	str	r2, [r3, #4]
 801101a:	609a      	str	r2, [r3, #8]
 801101c:	4620      	mov	r0, r4
 801101e:	bd10      	pop	{r4, pc}
 8011020:	2a24      	cmp	r2, #36	; 0x24
 8011022:	6081      	str	r1, [r0, #8]
 8011024:	60c1      	str	r1, [r0, #12]
 8011026:	bf11      	iteee	ne
 8011028:	f100 0310 	addne.w	r3, r0, #16
 801102c:	6101      	streq	r1, [r0, #16]
 801102e:	f100 0318 	addeq.w	r3, r0, #24
 8011032:	6141      	streq	r1, [r0, #20]
 8011034:	e7ee      	b.n	8011014 <_calloc_r+0x2c>
 8011036:	4603      	mov	r3, r0
 8011038:	e7ec      	b.n	8011014 <_calloc_r+0x2c>
 801103a:	2100      	movs	r1, #0
 801103c:	f7fd f99b 	bl	800e376 <memset>
 8011040:	e7ec      	b.n	801101c <_calloc_r+0x34>
	...

08011044 <_close_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4c06      	ldr	r4, [pc, #24]	; (8011060 <_close_r+0x1c>)
 8011048:	2300      	movs	r3, #0
 801104a:	4605      	mov	r5, r0
 801104c:	4608      	mov	r0, r1
 801104e:	6023      	str	r3, [r4, #0]
 8011050:	f7f0 faf6 	bl	8001640 <_close>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_close_r+0x1a>
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	b103      	cbz	r3, 801105e <_close_r+0x1a>
 801105c:	602b      	str	r3, [r5, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	20015c34 	.word	0x20015c34

08011064 <_fclose_r>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	4605      	mov	r5, r0
 8011068:	460c      	mov	r4, r1
 801106a:	b911      	cbnz	r1, 8011072 <_fclose_r+0xe>
 801106c:	2600      	movs	r6, #0
 801106e:	4630      	mov	r0, r6
 8011070:	bd70      	pop	{r4, r5, r6, pc}
 8011072:	b118      	cbz	r0, 801107c <_fclose_r+0x18>
 8011074:	6983      	ldr	r3, [r0, #24]
 8011076:	b90b      	cbnz	r3, 801107c <_fclose_r+0x18>
 8011078:	f7ff fa2e 	bl	80104d8 <__sinit>
 801107c:	4b2c      	ldr	r3, [pc, #176]	; (8011130 <_fclose_r+0xcc>)
 801107e:	429c      	cmp	r4, r3
 8011080:	d114      	bne.n	80110ac <_fclose_r+0x48>
 8011082:	686c      	ldr	r4, [r5, #4]
 8011084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011086:	07d8      	lsls	r0, r3, #31
 8011088:	d405      	bmi.n	8011096 <_fclose_r+0x32>
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	0599      	lsls	r1, r3, #22
 801108e:	d402      	bmi.n	8011096 <_fclose_r+0x32>
 8011090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011092:	f7ff fbe1 	bl	8010858 <__retarget_lock_acquire_recursive>
 8011096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801109a:	b98b      	cbnz	r3, 80110c0 <_fclose_r+0x5c>
 801109c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801109e:	f016 0601 	ands.w	r6, r6, #1
 80110a2:	d1e3      	bne.n	801106c <_fclose_r+0x8>
 80110a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110a6:	f7ff fbd8 	bl	801085a <__retarget_lock_release_recursive>
 80110aa:	e7e0      	b.n	801106e <_fclose_r+0xa>
 80110ac:	4b21      	ldr	r3, [pc, #132]	; (8011134 <_fclose_r+0xd0>)
 80110ae:	429c      	cmp	r4, r3
 80110b0:	d101      	bne.n	80110b6 <_fclose_r+0x52>
 80110b2:	68ac      	ldr	r4, [r5, #8]
 80110b4:	e7e6      	b.n	8011084 <_fclose_r+0x20>
 80110b6:	4b20      	ldr	r3, [pc, #128]	; (8011138 <_fclose_r+0xd4>)
 80110b8:	429c      	cmp	r4, r3
 80110ba:	bf08      	it	eq
 80110bc:	68ec      	ldreq	r4, [r5, #12]
 80110be:	e7e1      	b.n	8011084 <_fclose_r+0x20>
 80110c0:	4621      	mov	r1, r4
 80110c2:	4628      	mov	r0, r5
 80110c4:	f7ff f8e2 	bl	801028c <__sflush_r>
 80110c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80110ca:	4606      	mov	r6, r0
 80110cc:	b133      	cbz	r3, 80110dc <_fclose_r+0x78>
 80110ce:	6a21      	ldr	r1, [r4, #32]
 80110d0:	4628      	mov	r0, r5
 80110d2:	4798      	blx	r3
 80110d4:	2800      	cmp	r0, #0
 80110d6:	bfb8      	it	lt
 80110d8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	061a      	lsls	r2, r3, #24
 80110e0:	d503      	bpl.n	80110ea <_fclose_r+0x86>
 80110e2:	6921      	ldr	r1, [r4, #16]
 80110e4:	4628      	mov	r0, r5
 80110e6:	f7ff facd 	bl	8010684 <_free_r>
 80110ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ec:	b141      	cbz	r1, 8011100 <_fclose_r+0x9c>
 80110ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110f2:	4299      	cmp	r1, r3
 80110f4:	d002      	beq.n	80110fc <_fclose_r+0x98>
 80110f6:	4628      	mov	r0, r5
 80110f8:	f7ff fac4 	bl	8010684 <_free_r>
 80110fc:	2300      	movs	r3, #0
 80110fe:	6363      	str	r3, [r4, #52]	; 0x34
 8011100:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011102:	b121      	cbz	r1, 801110e <_fclose_r+0xaa>
 8011104:	4628      	mov	r0, r5
 8011106:	f7ff fabd 	bl	8010684 <_free_r>
 801110a:	2300      	movs	r3, #0
 801110c:	64a3      	str	r3, [r4, #72]	; 0x48
 801110e:	f7ff f9cb 	bl	80104a8 <__sfp_lock_acquire>
 8011112:	2300      	movs	r3, #0
 8011114:	81a3      	strh	r3, [r4, #12]
 8011116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011118:	07db      	lsls	r3, r3, #31
 801111a:	d402      	bmi.n	8011122 <_fclose_r+0xbe>
 801111c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801111e:	f7ff fb9c 	bl	801085a <__retarget_lock_release_recursive>
 8011122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011124:	f7ff fb97 	bl	8010856 <__retarget_lock_close_recursive>
 8011128:	f7ff f9c4 	bl	80104b4 <__sfp_lock_release>
 801112c:	e79f      	b.n	801106e <_fclose_r+0xa>
 801112e:	bf00      	nop
 8011130:	080e7880 	.word	0x080e7880
 8011134:	080e78a0 	.word	0x080e78a0
 8011138:	080e7860 	.word	0x080e7860

0801113c <__fputwc>:
 801113c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011140:	4680      	mov	r8, r0
 8011142:	460e      	mov	r6, r1
 8011144:	4614      	mov	r4, r2
 8011146:	f000 f9d3 	bl	80114f0 <__locale_mb_cur_max>
 801114a:	2801      	cmp	r0, #1
 801114c:	d11c      	bne.n	8011188 <__fputwc+0x4c>
 801114e:	1e73      	subs	r3, r6, #1
 8011150:	2bfe      	cmp	r3, #254	; 0xfe
 8011152:	d819      	bhi.n	8011188 <__fputwc+0x4c>
 8011154:	f88d 6004 	strb.w	r6, [sp, #4]
 8011158:	4605      	mov	r5, r0
 801115a:	2700      	movs	r7, #0
 801115c:	f10d 0904 	add.w	r9, sp, #4
 8011160:	42af      	cmp	r7, r5
 8011162:	d020      	beq.n	80111a6 <__fputwc+0x6a>
 8011164:	68a3      	ldr	r3, [r4, #8]
 8011166:	f817 1009 	ldrb.w	r1, [r7, r9]
 801116a:	3b01      	subs	r3, #1
 801116c:	2b00      	cmp	r3, #0
 801116e:	60a3      	str	r3, [r4, #8]
 8011170:	da04      	bge.n	801117c <__fputwc+0x40>
 8011172:	69a2      	ldr	r2, [r4, #24]
 8011174:	4293      	cmp	r3, r2
 8011176:	db1a      	blt.n	80111ae <__fputwc+0x72>
 8011178:	290a      	cmp	r1, #10
 801117a:	d018      	beq.n	80111ae <__fputwc+0x72>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	6022      	str	r2, [r4, #0]
 8011182:	7019      	strb	r1, [r3, #0]
 8011184:	3701      	adds	r7, #1
 8011186:	e7eb      	b.n	8011160 <__fputwc+0x24>
 8011188:	4632      	mov	r2, r6
 801118a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801118e:	a901      	add	r1, sp, #4
 8011190:	4640      	mov	r0, r8
 8011192:	f000 fbe9 	bl	8011968 <_wcrtomb_r>
 8011196:	1c42      	adds	r2, r0, #1
 8011198:	4605      	mov	r5, r0
 801119a:	d1de      	bne.n	801115a <__fputwc+0x1e>
 801119c:	89a3      	ldrh	r3, [r4, #12]
 801119e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111a2:	81a3      	strh	r3, [r4, #12]
 80111a4:	4606      	mov	r6, r0
 80111a6:	4630      	mov	r0, r6
 80111a8:	b003      	add	sp, #12
 80111aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ae:	4622      	mov	r2, r4
 80111b0:	4640      	mov	r0, r8
 80111b2:	f000 fb7b 	bl	80118ac <__swbuf_r>
 80111b6:	1c43      	adds	r3, r0, #1
 80111b8:	d1e4      	bne.n	8011184 <__fputwc+0x48>
 80111ba:	4606      	mov	r6, r0
 80111bc:	e7f3      	b.n	80111a6 <__fputwc+0x6a>

080111be <_fputwc_r>:
 80111be:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80111c0:	07db      	lsls	r3, r3, #31
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	4605      	mov	r5, r0
 80111c6:	460e      	mov	r6, r1
 80111c8:	4614      	mov	r4, r2
 80111ca:	d405      	bmi.n	80111d8 <_fputwc_r+0x1a>
 80111cc:	8993      	ldrh	r3, [r2, #12]
 80111ce:	0598      	lsls	r0, r3, #22
 80111d0:	d402      	bmi.n	80111d8 <_fputwc_r+0x1a>
 80111d2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80111d4:	f7ff fb40 	bl	8010858 <__retarget_lock_acquire_recursive>
 80111d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111dc:	0499      	lsls	r1, r3, #18
 80111de:	d406      	bmi.n	80111ee <_fputwc_r+0x30>
 80111e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80111e4:	81a3      	strh	r3, [r4, #12]
 80111e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80111ec:	6663      	str	r3, [r4, #100]	; 0x64
 80111ee:	4622      	mov	r2, r4
 80111f0:	4628      	mov	r0, r5
 80111f2:	4631      	mov	r1, r6
 80111f4:	f7ff ffa2 	bl	801113c <__fputwc>
 80111f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111fa:	07da      	lsls	r2, r3, #31
 80111fc:	4605      	mov	r5, r0
 80111fe:	d405      	bmi.n	801120c <_fputwc_r+0x4e>
 8011200:	89a3      	ldrh	r3, [r4, #12]
 8011202:	059b      	lsls	r3, r3, #22
 8011204:	d402      	bmi.n	801120c <_fputwc_r+0x4e>
 8011206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011208:	f7ff fb27 	bl	801085a <__retarget_lock_release_recursive>
 801120c:	4628      	mov	r0, r5
 801120e:	bd70      	pop	{r4, r5, r6, pc}

08011210 <_fstat_r>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	4c07      	ldr	r4, [pc, #28]	; (8011230 <_fstat_r+0x20>)
 8011214:	2300      	movs	r3, #0
 8011216:	4605      	mov	r5, r0
 8011218:	4608      	mov	r0, r1
 801121a:	4611      	mov	r1, r2
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	f7f0 fa12 	bl	8001646 <_fstat>
 8011222:	1c43      	adds	r3, r0, #1
 8011224:	d102      	bne.n	801122c <_fstat_r+0x1c>
 8011226:	6823      	ldr	r3, [r4, #0]
 8011228:	b103      	cbz	r3, 801122c <_fstat_r+0x1c>
 801122a:	602b      	str	r3, [r5, #0]
 801122c:	bd38      	pop	{r3, r4, r5, pc}
 801122e:	bf00      	nop
 8011230:	20015c34 	.word	0x20015c34

08011234 <__sfvwrite_r>:
 8011234:	6893      	ldr	r3, [r2, #8]
 8011236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123a:	4607      	mov	r7, r0
 801123c:	460c      	mov	r4, r1
 801123e:	4690      	mov	r8, r2
 8011240:	b91b      	cbnz	r3, 801124a <__sfvwrite_r+0x16>
 8011242:	2000      	movs	r0, #0
 8011244:	b003      	add	sp, #12
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	898b      	ldrh	r3, [r1, #12]
 801124c:	0718      	lsls	r0, r3, #28
 801124e:	d526      	bpl.n	801129e <__sfvwrite_r+0x6a>
 8011250:	690b      	ldr	r3, [r1, #16]
 8011252:	b323      	cbz	r3, 801129e <__sfvwrite_r+0x6a>
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	f8d8 6000 	ldr.w	r6, [r8]
 801125a:	f013 0902 	ands.w	r9, r3, #2
 801125e:	d02d      	beq.n	80112bc <__sfvwrite_r+0x88>
 8011260:	f04f 0a00 	mov.w	sl, #0
 8011264:	f8df b264 	ldr.w	fp, [pc, #612]	; 80114cc <__sfvwrite_r+0x298>
 8011268:	46d1      	mov	r9, sl
 801126a:	f1b9 0f00 	cmp.w	r9, #0
 801126e:	d01f      	beq.n	80112b0 <__sfvwrite_r+0x7c>
 8011270:	45d9      	cmp	r9, fp
 8011272:	464b      	mov	r3, r9
 8011274:	4652      	mov	r2, sl
 8011276:	bf28      	it	cs
 8011278:	465b      	movcs	r3, fp
 801127a:	6a21      	ldr	r1, [r4, #32]
 801127c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801127e:	4638      	mov	r0, r7
 8011280:	47a8      	blx	r5
 8011282:	2800      	cmp	r0, #0
 8011284:	f340 8089 	ble.w	801139a <__sfvwrite_r+0x166>
 8011288:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801128c:	4482      	add	sl, r0
 801128e:	eba9 0900 	sub.w	r9, r9, r0
 8011292:	1a18      	subs	r0, r3, r0
 8011294:	f8c8 0008 	str.w	r0, [r8, #8]
 8011298:	2800      	cmp	r0, #0
 801129a:	d1e6      	bne.n	801126a <__sfvwrite_r+0x36>
 801129c:	e7d1      	b.n	8011242 <__sfvwrite_r+0xe>
 801129e:	4621      	mov	r1, r4
 80112a0:	4638      	mov	r0, r7
 80112a2:	f7fe f929 	bl	800f4f8 <__swsetup_r>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d0d4      	beq.n	8011254 <__sfvwrite_r+0x20>
 80112aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112ae:	e7c9      	b.n	8011244 <__sfvwrite_r+0x10>
 80112b0:	f8d6 a000 	ldr.w	sl, [r6]
 80112b4:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80112b8:	3608      	adds	r6, #8
 80112ba:	e7d6      	b.n	801126a <__sfvwrite_r+0x36>
 80112bc:	f013 0301 	ands.w	r3, r3, #1
 80112c0:	d043      	beq.n	801134a <__sfvwrite_r+0x116>
 80112c2:	4648      	mov	r0, r9
 80112c4:	46ca      	mov	sl, r9
 80112c6:	46cb      	mov	fp, r9
 80112c8:	f1bb 0f00 	cmp.w	fp, #0
 80112cc:	f000 80d9 	beq.w	8011482 <__sfvwrite_r+0x24e>
 80112d0:	b950      	cbnz	r0, 80112e8 <__sfvwrite_r+0xb4>
 80112d2:	465a      	mov	r2, fp
 80112d4:	210a      	movs	r1, #10
 80112d6:	4650      	mov	r0, sl
 80112d8:	f7ee ff92 	bl	8000200 <memchr>
 80112dc:	2800      	cmp	r0, #0
 80112de:	f000 80d5 	beq.w	801148c <__sfvwrite_r+0x258>
 80112e2:	3001      	adds	r0, #1
 80112e4:	eba0 090a 	sub.w	r9, r0, sl
 80112e8:	6820      	ldr	r0, [r4, #0]
 80112ea:	6921      	ldr	r1, [r4, #16]
 80112ec:	6962      	ldr	r2, [r4, #20]
 80112ee:	45d9      	cmp	r9, fp
 80112f0:	464b      	mov	r3, r9
 80112f2:	bf28      	it	cs
 80112f4:	465b      	movcs	r3, fp
 80112f6:	4288      	cmp	r0, r1
 80112f8:	f240 80cb 	bls.w	8011492 <__sfvwrite_r+0x25e>
 80112fc:	68a5      	ldr	r5, [r4, #8]
 80112fe:	4415      	add	r5, r2
 8011300:	42ab      	cmp	r3, r5
 8011302:	f340 80c6 	ble.w	8011492 <__sfvwrite_r+0x25e>
 8011306:	4651      	mov	r1, sl
 8011308:	462a      	mov	r2, r5
 801130a:	f000 f923 	bl	8011554 <memmove>
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	442b      	add	r3, r5
 8011312:	6023      	str	r3, [r4, #0]
 8011314:	4621      	mov	r1, r4
 8011316:	4638      	mov	r0, r7
 8011318:	f7ff f84a 	bl	80103b0 <_fflush_r>
 801131c:	2800      	cmp	r0, #0
 801131e:	d13c      	bne.n	801139a <__sfvwrite_r+0x166>
 8011320:	ebb9 0905 	subs.w	r9, r9, r5
 8011324:	f040 80cf 	bne.w	80114c6 <__sfvwrite_r+0x292>
 8011328:	4621      	mov	r1, r4
 801132a:	4638      	mov	r0, r7
 801132c:	f7ff f840 	bl	80103b0 <_fflush_r>
 8011330:	2800      	cmp	r0, #0
 8011332:	d132      	bne.n	801139a <__sfvwrite_r+0x166>
 8011334:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011338:	44aa      	add	sl, r5
 801133a:	ebab 0b05 	sub.w	fp, fp, r5
 801133e:	1b5d      	subs	r5, r3, r5
 8011340:	f8c8 5008 	str.w	r5, [r8, #8]
 8011344:	2d00      	cmp	r5, #0
 8011346:	d1bf      	bne.n	80112c8 <__sfvwrite_r+0x94>
 8011348:	e77b      	b.n	8011242 <__sfvwrite_r+0xe>
 801134a:	4699      	mov	r9, r3
 801134c:	469a      	mov	sl, r3
 801134e:	f1ba 0f00 	cmp.w	sl, #0
 8011352:	d027      	beq.n	80113a4 <__sfvwrite_r+0x170>
 8011354:	89a2      	ldrh	r2, [r4, #12]
 8011356:	68a5      	ldr	r5, [r4, #8]
 8011358:	0591      	lsls	r1, r2, #22
 801135a:	d565      	bpl.n	8011428 <__sfvwrite_r+0x1f4>
 801135c:	45aa      	cmp	sl, r5
 801135e:	d33b      	bcc.n	80113d8 <__sfvwrite_r+0x1a4>
 8011360:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011364:	d036      	beq.n	80113d4 <__sfvwrite_r+0x1a0>
 8011366:	6921      	ldr	r1, [r4, #16]
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	1a5b      	subs	r3, r3, r1
 801136c:	9301      	str	r3, [sp, #4]
 801136e:	6963      	ldr	r3, [r4, #20]
 8011370:	2002      	movs	r0, #2
 8011372:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011376:	fb93 fbf0 	sdiv	fp, r3, r0
 801137a:	9b01      	ldr	r3, [sp, #4]
 801137c:	1c58      	adds	r0, r3, #1
 801137e:	4450      	add	r0, sl
 8011380:	4583      	cmp	fp, r0
 8011382:	bf38      	it	cc
 8011384:	4683      	movcc	fp, r0
 8011386:	0553      	lsls	r3, r2, #21
 8011388:	d53e      	bpl.n	8011408 <__sfvwrite_r+0x1d4>
 801138a:	4659      	mov	r1, fp
 801138c:	4638      	mov	r0, r7
 801138e:	f7fc fdd9 	bl	800df44 <_malloc_r>
 8011392:	4605      	mov	r5, r0
 8011394:	b950      	cbnz	r0, 80113ac <__sfvwrite_r+0x178>
 8011396:	230c      	movs	r3, #12
 8011398:	603b      	str	r3, [r7, #0]
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113a0:	81a3      	strh	r3, [r4, #12]
 80113a2:	e782      	b.n	80112aa <__sfvwrite_r+0x76>
 80113a4:	e896 0600 	ldmia.w	r6, {r9, sl}
 80113a8:	3608      	adds	r6, #8
 80113aa:	e7d0      	b.n	801134e <__sfvwrite_r+0x11a>
 80113ac:	9a01      	ldr	r2, [sp, #4]
 80113ae:	6921      	ldr	r1, [r4, #16]
 80113b0:	f7fc ffd6 	bl	800e360 <memcpy>
 80113b4:	89a2      	ldrh	r2, [r4, #12]
 80113b6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80113ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80113be:	81a2      	strh	r2, [r4, #12]
 80113c0:	9b01      	ldr	r3, [sp, #4]
 80113c2:	6125      	str	r5, [r4, #16]
 80113c4:	441d      	add	r5, r3
 80113c6:	ebab 0303 	sub.w	r3, fp, r3
 80113ca:	6025      	str	r5, [r4, #0]
 80113cc:	f8c4 b014 	str.w	fp, [r4, #20]
 80113d0:	4655      	mov	r5, sl
 80113d2:	60a3      	str	r3, [r4, #8]
 80113d4:	45aa      	cmp	sl, r5
 80113d6:	d200      	bcs.n	80113da <__sfvwrite_r+0x1a6>
 80113d8:	4655      	mov	r5, sl
 80113da:	462a      	mov	r2, r5
 80113dc:	4649      	mov	r1, r9
 80113de:	6820      	ldr	r0, [r4, #0]
 80113e0:	f000 f8b8 	bl	8011554 <memmove>
 80113e4:	68a3      	ldr	r3, [r4, #8]
 80113e6:	1b5b      	subs	r3, r3, r5
 80113e8:	60a3      	str	r3, [r4, #8]
 80113ea:	6823      	ldr	r3, [r4, #0]
 80113ec:	441d      	add	r5, r3
 80113ee:	6025      	str	r5, [r4, #0]
 80113f0:	4655      	mov	r5, sl
 80113f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113f6:	44a9      	add	r9, r5
 80113f8:	ebaa 0a05 	sub.w	sl, sl, r5
 80113fc:	1b5d      	subs	r5, r3, r5
 80113fe:	f8c8 5008 	str.w	r5, [r8, #8]
 8011402:	2d00      	cmp	r5, #0
 8011404:	d1a3      	bne.n	801134e <__sfvwrite_r+0x11a>
 8011406:	e71c      	b.n	8011242 <__sfvwrite_r+0xe>
 8011408:	465a      	mov	r2, fp
 801140a:	4638      	mov	r0, r7
 801140c:	f000 f8ce 	bl	80115ac <_realloc_r>
 8011410:	4605      	mov	r5, r0
 8011412:	2800      	cmp	r0, #0
 8011414:	d1d4      	bne.n	80113c0 <__sfvwrite_r+0x18c>
 8011416:	6921      	ldr	r1, [r4, #16]
 8011418:	4638      	mov	r0, r7
 801141a:	f7ff f933 	bl	8010684 <_free_r>
 801141e:	89a3      	ldrh	r3, [r4, #12]
 8011420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	e7b6      	b.n	8011396 <__sfvwrite_r+0x162>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	6923      	ldr	r3, [r4, #16]
 801142c:	4298      	cmp	r0, r3
 801142e:	d802      	bhi.n	8011436 <__sfvwrite_r+0x202>
 8011430:	6962      	ldr	r2, [r4, #20]
 8011432:	4592      	cmp	sl, r2
 8011434:	d215      	bcs.n	8011462 <__sfvwrite_r+0x22e>
 8011436:	4555      	cmp	r5, sl
 8011438:	bf28      	it	cs
 801143a:	4655      	movcs	r5, sl
 801143c:	462a      	mov	r2, r5
 801143e:	4649      	mov	r1, r9
 8011440:	f000 f888 	bl	8011554 <memmove>
 8011444:	68a3      	ldr	r3, [r4, #8]
 8011446:	6822      	ldr	r2, [r4, #0]
 8011448:	1b5b      	subs	r3, r3, r5
 801144a:	442a      	add	r2, r5
 801144c:	60a3      	str	r3, [r4, #8]
 801144e:	6022      	str	r2, [r4, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d1ce      	bne.n	80113f2 <__sfvwrite_r+0x1be>
 8011454:	4621      	mov	r1, r4
 8011456:	4638      	mov	r0, r7
 8011458:	f7fe ffaa 	bl	80103b0 <_fflush_r>
 801145c:	2800      	cmp	r0, #0
 801145e:	d0c8      	beq.n	80113f2 <__sfvwrite_r+0x1be>
 8011460:	e79b      	b.n	801139a <__sfvwrite_r+0x166>
 8011462:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011466:	4553      	cmp	r3, sl
 8011468:	bf28      	it	cs
 801146a:	4653      	movcs	r3, sl
 801146c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801146e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011472:	6a21      	ldr	r1, [r4, #32]
 8011474:	4353      	muls	r3, r2
 8011476:	4638      	mov	r0, r7
 8011478:	464a      	mov	r2, r9
 801147a:	47a8      	blx	r5
 801147c:	1e05      	subs	r5, r0, #0
 801147e:	dcb8      	bgt.n	80113f2 <__sfvwrite_r+0x1be>
 8011480:	e78b      	b.n	801139a <__sfvwrite_r+0x166>
 8011482:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8011486:	2000      	movs	r0, #0
 8011488:	3608      	adds	r6, #8
 801148a:	e71d      	b.n	80112c8 <__sfvwrite_r+0x94>
 801148c:	f10b 0901 	add.w	r9, fp, #1
 8011490:	e72a      	b.n	80112e8 <__sfvwrite_r+0xb4>
 8011492:	4293      	cmp	r3, r2
 8011494:	db09      	blt.n	80114aa <__sfvwrite_r+0x276>
 8011496:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011498:	6a21      	ldr	r1, [r4, #32]
 801149a:	4613      	mov	r3, r2
 801149c:	4638      	mov	r0, r7
 801149e:	4652      	mov	r2, sl
 80114a0:	47a8      	blx	r5
 80114a2:	1e05      	subs	r5, r0, #0
 80114a4:	f73f af3c 	bgt.w	8011320 <__sfvwrite_r+0xec>
 80114a8:	e777      	b.n	801139a <__sfvwrite_r+0x166>
 80114aa:	461a      	mov	r2, r3
 80114ac:	4651      	mov	r1, sl
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	f000 f850 	bl	8011554 <memmove>
 80114b4:	9b01      	ldr	r3, [sp, #4]
 80114b6:	68a2      	ldr	r2, [r4, #8]
 80114b8:	1ad2      	subs	r2, r2, r3
 80114ba:	60a2      	str	r2, [r4, #8]
 80114bc:	6822      	ldr	r2, [r4, #0]
 80114be:	441a      	add	r2, r3
 80114c0:	6022      	str	r2, [r4, #0]
 80114c2:	461d      	mov	r5, r3
 80114c4:	e72c      	b.n	8011320 <__sfvwrite_r+0xec>
 80114c6:	2001      	movs	r0, #1
 80114c8:	e734      	b.n	8011334 <__sfvwrite_r+0x100>
 80114ca:	bf00      	nop
 80114cc:	7ffffc00 	.word	0x7ffffc00

080114d0 <_isatty_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4c06      	ldr	r4, [pc, #24]	; (80114ec <_isatty_r+0x1c>)
 80114d4:	2300      	movs	r3, #0
 80114d6:	4605      	mov	r5, r0
 80114d8:	4608      	mov	r0, r1
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	f7f0 f8b8 	bl	8001650 <_isatty>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d102      	bne.n	80114ea <_isatty_r+0x1a>
 80114e4:	6823      	ldr	r3, [r4, #0]
 80114e6:	b103      	cbz	r3, 80114ea <_isatty_r+0x1a>
 80114e8:	602b      	str	r3, [r5, #0]
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	20015c34 	.word	0x20015c34

080114f0 <__locale_mb_cur_max>:
 80114f0:	4b04      	ldr	r3, [pc, #16]	; (8011504 <__locale_mb_cur_max+0x14>)
 80114f2:	4a05      	ldr	r2, [pc, #20]	; (8011508 <__locale_mb_cur_max+0x18>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6a1b      	ldr	r3, [r3, #32]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bf08      	it	eq
 80114fc:	4613      	moveq	r3, r2
 80114fe:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8011502:	4770      	bx	lr
 8011504:	200000e0 	.word	0x200000e0
 8011508:	200005e4 	.word	0x200005e4

0801150c <_lseek_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4c07      	ldr	r4, [pc, #28]	; (801152c <_lseek_r+0x20>)
 8011510:	4605      	mov	r5, r0
 8011512:	4608      	mov	r0, r1
 8011514:	4611      	mov	r1, r2
 8011516:	2200      	movs	r2, #0
 8011518:	6022      	str	r2, [r4, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	f7f0 f89a 	bl	8001654 <_lseek>
 8011520:	1c43      	adds	r3, r0, #1
 8011522:	d102      	bne.n	801152a <_lseek_r+0x1e>
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	b103      	cbz	r3, 801152a <_lseek_r+0x1e>
 8011528:	602b      	str	r3, [r5, #0]
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	20015c34 	.word	0x20015c34

08011530 <__ascii_mbtowc>:
 8011530:	b082      	sub	sp, #8
 8011532:	b901      	cbnz	r1, 8011536 <__ascii_mbtowc+0x6>
 8011534:	a901      	add	r1, sp, #4
 8011536:	b142      	cbz	r2, 801154a <__ascii_mbtowc+0x1a>
 8011538:	b14b      	cbz	r3, 801154e <__ascii_mbtowc+0x1e>
 801153a:	7813      	ldrb	r3, [r2, #0]
 801153c:	600b      	str	r3, [r1, #0]
 801153e:	7812      	ldrb	r2, [r2, #0]
 8011540:	1c10      	adds	r0, r2, #0
 8011542:	bf18      	it	ne
 8011544:	2001      	movne	r0, #1
 8011546:	b002      	add	sp, #8
 8011548:	4770      	bx	lr
 801154a:	4610      	mov	r0, r2
 801154c:	e7fb      	b.n	8011546 <__ascii_mbtowc+0x16>
 801154e:	f06f 0001 	mvn.w	r0, #1
 8011552:	e7f8      	b.n	8011546 <__ascii_mbtowc+0x16>

08011554 <memmove>:
 8011554:	4288      	cmp	r0, r1
 8011556:	b510      	push	{r4, lr}
 8011558:	eb01 0302 	add.w	r3, r1, r2
 801155c:	d803      	bhi.n	8011566 <memmove+0x12>
 801155e:	1e42      	subs	r2, r0, #1
 8011560:	4299      	cmp	r1, r3
 8011562:	d10c      	bne.n	801157e <memmove+0x2a>
 8011564:	bd10      	pop	{r4, pc}
 8011566:	4298      	cmp	r0, r3
 8011568:	d2f9      	bcs.n	801155e <memmove+0xa>
 801156a:	1881      	adds	r1, r0, r2
 801156c:	1ad2      	subs	r2, r2, r3
 801156e:	42d3      	cmn	r3, r2
 8011570:	d100      	bne.n	8011574 <memmove+0x20>
 8011572:	bd10      	pop	{r4, pc}
 8011574:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011578:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801157c:	e7f7      	b.n	801156e <memmove+0x1a>
 801157e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011582:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011586:	e7eb      	b.n	8011560 <memmove+0xc>

08011588 <_read_r>:
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	4c07      	ldr	r4, [pc, #28]	; (80115a8 <_read_r+0x20>)
 801158c:	4605      	mov	r5, r0
 801158e:	4608      	mov	r0, r1
 8011590:	4611      	mov	r1, r2
 8011592:	2200      	movs	r2, #0
 8011594:	6022      	str	r2, [r4, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	f7f0 f81c 	bl	80015d4 <_read>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_read_r+0x1e>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_read_r+0x1e>
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	20015c34 	.word	0x20015c34

080115ac <_realloc_r>:
 80115ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b0:	4682      	mov	sl, r0
 80115b2:	460c      	mov	r4, r1
 80115b4:	b929      	cbnz	r1, 80115c2 <_realloc_r+0x16>
 80115b6:	4611      	mov	r1, r2
 80115b8:	b003      	add	sp, #12
 80115ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115be:	f7fc bcc1 	b.w	800df44 <_malloc_r>
 80115c2:	9201      	str	r2, [sp, #4]
 80115c4:	f7fc fee0 	bl	800e388 <__malloc_lock>
 80115c8:	9a01      	ldr	r2, [sp, #4]
 80115ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80115ce:	f102 080b 	add.w	r8, r2, #11
 80115d2:	f1b8 0f16 	cmp.w	r8, #22
 80115d6:	f1a4 0908 	sub.w	r9, r4, #8
 80115da:	f025 0603 	bic.w	r6, r5, #3
 80115de:	d90a      	bls.n	80115f6 <_realloc_r+0x4a>
 80115e0:	f038 0807 	bics.w	r8, r8, #7
 80115e4:	d509      	bpl.n	80115fa <_realloc_r+0x4e>
 80115e6:	230c      	movs	r3, #12
 80115e8:	f8ca 3000 	str.w	r3, [sl]
 80115ec:	2700      	movs	r7, #0
 80115ee:	4638      	mov	r0, r7
 80115f0:	b003      	add	sp, #12
 80115f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f6:	f04f 0810 	mov.w	r8, #16
 80115fa:	4590      	cmp	r8, r2
 80115fc:	d3f3      	bcc.n	80115e6 <_realloc_r+0x3a>
 80115fe:	45b0      	cmp	r8, r6
 8011600:	f340 8145 	ble.w	801188e <_realloc_r+0x2e2>
 8011604:	4ba8      	ldr	r3, [pc, #672]	; (80118a8 <_realloc_r+0x2fc>)
 8011606:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801160a:	eb09 0106 	add.w	r1, r9, r6
 801160e:	4571      	cmp	r1, lr
 8011610:	469b      	mov	fp, r3
 8011612:	684b      	ldr	r3, [r1, #4]
 8011614:	d005      	beq.n	8011622 <_realloc_r+0x76>
 8011616:	f023 0001 	bic.w	r0, r3, #1
 801161a:	4408      	add	r0, r1
 801161c:	6840      	ldr	r0, [r0, #4]
 801161e:	07c7      	lsls	r7, r0, #31
 8011620:	d447      	bmi.n	80116b2 <_realloc_r+0x106>
 8011622:	f023 0303 	bic.w	r3, r3, #3
 8011626:	4571      	cmp	r1, lr
 8011628:	eb06 0703 	add.w	r7, r6, r3
 801162c:	d119      	bne.n	8011662 <_realloc_r+0xb6>
 801162e:	f108 0010 	add.w	r0, r8, #16
 8011632:	4287      	cmp	r7, r0
 8011634:	db3f      	blt.n	80116b6 <_realloc_r+0x10a>
 8011636:	eb09 0308 	add.w	r3, r9, r8
 801163a:	eba7 0708 	sub.w	r7, r7, r8
 801163e:	f047 0701 	orr.w	r7, r7, #1
 8011642:	f8cb 3008 	str.w	r3, [fp, #8]
 8011646:	605f      	str	r7, [r3, #4]
 8011648:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	ea43 0308 	orr.w	r3, r3, r8
 8011654:	f844 3c04 	str.w	r3, [r4, #-4]
 8011658:	4650      	mov	r0, sl
 801165a:	f7fc fe9b 	bl	800e394 <__malloc_unlock>
 801165e:	4627      	mov	r7, r4
 8011660:	e7c5      	b.n	80115ee <_realloc_r+0x42>
 8011662:	45b8      	cmp	r8, r7
 8011664:	dc27      	bgt.n	80116b6 <_realloc_r+0x10a>
 8011666:	68cb      	ldr	r3, [r1, #12]
 8011668:	688a      	ldr	r2, [r1, #8]
 801166a:	60d3      	str	r3, [r2, #12]
 801166c:	609a      	str	r2, [r3, #8]
 801166e:	eba7 0008 	sub.w	r0, r7, r8
 8011672:	280f      	cmp	r0, #15
 8011674:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011678:	eb09 0207 	add.w	r2, r9, r7
 801167c:	f240 8109 	bls.w	8011892 <_realloc_r+0x2e6>
 8011680:	eb09 0108 	add.w	r1, r9, r8
 8011684:	f003 0301 	and.w	r3, r3, #1
 8011688:	ea43 0308 	orr.w	r3, r3, r8
 801168c:	f040 0001 	orr.w	r0, r0, #1
 8011690:	f8c9 3004 	str.w	r3, [r9, #4]
 8011694:	6048      	str	r0, [r1, #4]
 8011696:	6853      	ldr	r3, [r2, #4]
 8011698:	f043 0301 	orr.w	r3, r3, #1
 801169c:	6053      	str	r3, [r2, #4]
 801169e:	3108      	adds	r1, #8
 80116a0:	4650      	mov	r0, sl
 80116a2:	f7fe ffef 	bl	8010684 <_free_r>
 80116a6:	4650      	mov	r0, sl
 80116a8:	f7fc fe74 	bl	800e394 <__malloc_unlock>
 80116ac:	f109 0708 	add.w	r7, r9, #8
 80116b0:	e79d      	b.n	80115ee <_realloc_r+0x42>
 80116b2:	2300      	movs	r3, #0
 80116b4:	4619      	mov	r1, r3
 80116b6:	07e8      	lsls	r0, r5, #31
 80116b8:	f100 8084 	bmi.w	80117c4 <_realloc_r+0x218>
 80116bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80116c0:	eba9 0505 	sub.w	r5, r9, r5
 80116c4:	6868      	ldr	r0, [r5, #4]
 80116c6:	f020 0003 	bic.w	r0, r0, #3
 80116ca:	4430      	add	r0, r6
 80116cc:	2900      	cmp	r1, #0
 80116ce:	d076      	beq.n	80117be <_realloc_r+0x212>
 80116d0:	4571      	cmp	r1, lr
 80116d2:	d150      	bne.n	8011776 <_realloc_r+0x1ca>
 80116d4:	4403      	add	r3, r0
 80116d6:	f108 0110 	add.w	r1, r8, #16
 80116da:	428b      	cmp	r3, r1
 80116dc:	db6f      	blt.n	80117be <_realloc_r+0x212>
 80116de:	462f      	mov	r7, r5
 80116e0:	68ea      	ldr	r2, [r5, #12]
 80116e2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80116e6:	60ca      	str	r2, [r1, #12]
 80116e8:	6091      	str	r1, [r2, #8]
 80116ea:	1f32      	subs	r2, r6, #4
 80116ec:	2a24      	cmp	r2, #36	; 0x24
 80116ee:	d83b      	bhi.n	8011768 <_realloc_r+0x1bc>
 80116f0:	2a13      	cmp	r2, #19
 80116f2:	d936      	bls.n	8011762 <_realloc_r+0x1b6>
 80116f4:	6821      	ldr	r1, [r4, #0]
 80116f6:	60a9      	str	r1, [r5, #8]
 80116f8:	6861      	ldr	r1, [r4, #4]
 80116fa:	60e9      	str	r1, [r5, #12]
 80116fc:	2a1b      	cmp	r2, #27
 80116fe:	d81c      	bhi.n	801173a <_realloc_r+0x18e>
 8011700:	f105 0210 	add.w	r2, r5, #16
 8011704:	f104 0108 	add.w	r1, r4, #8
 8011708:	6808      	ldr	r0, [r1, #0]
 801170a:	6010      	str	r0, [r2, #0]
 801170c:	6848      	ldr	r0, [r1, #4]
 801170e:	6050      	str	r0, [r2, #4]
 8011710:	6889      	ldr	r1, [r1, #8]
 8011712:	6091      	str	r1, [r2, #8]
 8011714:	eb05 0208 	add.w	r2, r5, r8
 8011718:	eba3 0308 	sub.w	r3, r3, r8
 801171c:	f043 0301 	orr.w	r3, r3, #1
 8011720:	f8cb 2008 	str.w	r2, [fp, #8]
 8011724:	6053      	str	r3, [r2, #4]
 8011726:	686b      	ldr	r3, [r5, #4]
 8011728:	f003 0301 	and.w	r3, r3, #1
 801172c:	ea43 0308 	orr.w	r3, r3, r8
 8011730:	606b      	str	r3, [r5, #4]
 8011732:	4650      	mov	r0, sl
 8011734:	f7fc fe2e 	bl	800e394 <__malloc_unlock>
 8011738:	e759      	b.n	80115ee <_realloc_r+0x42>
 801173a:	68a1      	ldr	r1, [r4, #8]
 801173c:	6129      	str	r1, [r5, #16]
 801173e:	68e1      	ldr	r1, [r4, #12]
 8011740:	6169      	str	r1, [r5, #20]
 8011742:	2a24      	cmp	r2, #36	; 0x24
 8011744:	bf01      	itttt	eq
 8011746:	6922      	ldreq	r2, [r4, #16]
 8011748:	61aa      	streq	r2, [r5, #24]
 801174a:	6960      	ldreq	r0, [r4, #20]
 801174c:	61e8      	streq	r0, [r5, #28]
 801174e:	bf19      	ittee	ne
 8011750:	f105 0218 	addne.w	r2, r5, #24
 8011754:	f104 0110 	addne.w	r1, r4, #16
 8011758:	f105 0220 	addeq.w	r2, r5, #32
 801175c:	f104 0118 	addeq.w	r1, r4, #24
 8011760:	e7d2      	b.n	8011708 <_realloc_r+0x15c>
 8011762:	463a      	mov	r2, r7
 8011764:	4621      	mov	r1, r4
 8011766:	e7cf      	b.n	8011708 <_realloc_r+0x15c>
 8011768:	4621      	mov	r1, r4
 801176a:	4638      	mov	r0, r7
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	f7ff fef1 	bl	8011554 <memmove>
 8011772:	9b01      	ldr	r3, [sp, #4]
 8011774:	e7ce      	b.n	8011714 <_realloc_r+0x168>
 8011776:	18c7      	adds	r7, r0, r3
 8011778:	45b8      	cmp	r8, r7
 801177a:	dc20      	bgt.n	80117be <_realloc_r+0x212>
 801177c:	68cb      	ldr	r3, [r1, #12]
 801177e:	688a      	ldr	r2, [r1, #8]
 8011780:	60d3      	str	r3, [r2, #12]
 8011782:	609a      	str	r2, [r3, #8]
 8011784:	4628      	mov	r0, r5
 8011786:	68eb      	ldr	r3, [r5, #12]
 8011788:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801178c:	60d3      	str	r3, [r2, #12]
 801178e:	609a      	str	r2, [r3, #8]
 8011790:	1f32      	subs	r2, r6, #4
 8011792:	2a24      	cmp	r2, #36	; 0x24
 8011794:	d842      	bhi.n	801181c <_realloc_r+0x270>
 8011796:	2a13      	cmp	r2, #19
 8011798:	d93e      	bls.n	8011818 <_realloc_r+0x26c>
 801179a:	6823      	ldr	r3, [r4, #0]
 801179c:	60ab      	str	r3, [r5, #8]
 801179e:	6863      	ldr	r3, [r4, #4]
 80117a0:	60eb      	str	r3, [r5, #12]
 80117a2:	2a1b      	cmp	r2, #27
 80117a4:	d824      	bhi.n	80117f0 <_realloc_r+0x244>
 80117a6:	f105 0010 	add.w	r0, r5, #16
 80117aa:	f104 0308 	add.w	r3, r4, #8
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	6002      	str	r2, [r0, #0]
 80117b2:	685a      	ldr	r2, [r3, #4]
 80117b4:	6042      	str	r2, [r0, #4]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	6083      	str	r3, [r0, #8]
 80117ba:	46a9      	mov	r9, r5
 80117bc:	e757      	b.n	801166e <_realloc_r+0xc2>
 80117be:	4580      	cmp	r8, r0
 80117c0:	4607      	mov	r7, r0
 80117c2:	dddf      	ble.n	8011784 <_realloc_r+0x1d8>
 80117c4:	4611      	mov	r1, r2
 80117c6:	4650      	mov	r0, sl
 80117c8:	f7fc fbbc 	bl	800df44 <_malloc_r>
 80117cc:	4607      	mov	r7, r0
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0af      	beq.n	8011732 <_realloc_r+0x186>
 80117d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80117d6:	f023 0301 	bic.w	r3, r3, #1
 80117da:	f1a0 0208 	sub.w	r2, r0, #8
 80117de:	444b      	add	r3, r9
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d11f      	bne.n	8011824 <_realloc_r+0x278>
 80117e4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80117e8:	f027 0703 	bic.w	r7, r7, #3
 80117ec:	4437      	add	r7, r6
 80117ee:	e73e      	b.n	801166e <_realloc_r+0xc2>
 80117f0:	68a3      	ldr	r3, [r4, #8]
 80117f2:	612b      	str	r3, [r5, #16]
 80117f4:	68e3      	ldr	r3, [r4, #12]
 80117f6:	616b      	str	r3, [r5, #20]
 80117f8:	2a24      	cmp	r2, #36	; 0x24
 80117fa:	bf01      	itttt	eq
 80117fc:	6923      	ldreq	r3, [r4, #16]
 80117fe:	61ab      	streq	r3, [r5, #24]
 8011800:	6962      	ldreq	r2, [r4, #20]
 8011802:	61ea      	streq	r2, [r5, #28]
 8011804:	bf19      	ittee	ne
 8011806:	f105 0018 	addne.w	r0, r5, #24
 801180a:	f104 0310 	addne.w	r3, r4, #16
 801180e:	f105 0020 	addeq.w	r0, r5, #32
 8011812:	f104 0318 	addeq.w	r3, r4, #24
 8011816:	e7ca      	b.n	80117ae <_realloc_r+0x202>
 8011818:	4623      	mov	r3, r4
 801181a:	e7c8      	b.n	80117ae <_realloc_r+0x202>
 801181c:	4621      	mov	r1, r4
 801181e:	f7ff fe99 	bl	8011554 <memmove>
 8011822:	e7ca      	b.n	80117ba <_realloc_r+0x20e>
 8011824:	1f32      	subs	r2, r6, #4
 8011826:	2a24      	cmp	r2, #36	; 0x24
 8011828:	d82d      	bhi.n	8011886 <_realloc_r+0x2da>
 801182a:	2a13      	cmp	r2, #19
 801182c:	d928      	bls.n	8011880 <_realloc_r+0x2d4>
 801182e:	6823      	ldr	r3, [r4, #0]
 8011830:	6003      	str	r3, [r0, #0]
 8011832:	6863      	ldr	r3, [r4, #4]
 8011834:	6043      	str	r3, [r0, #4]
 8011836:	2a1b      	cmp	r2, #27
 8011838:	d80e      	bhi.n	8011858 <_realloc_r+0x2ac>
 801183a:	f100 0308 	add.w	r3, r0, #8
 801183e:	f104 0208 	add.w	r2, r4, #8
 8011842:	6811      	ldr	r1, [r2, #0]
 8011844:	6019      	str	r1, [r3, #0]
 8011846:	6851      	ldr	r1, [r2, #4]
 8011848:	6059      	str	r1, [r3, #4]
 801184a:	6892      	ldr	r2, [r2, #8]
 801184c:	609a      	str	r2, [r3, #8]
 801184e:	4621      	mov	r1, r4
 8011850:	4650      	mov	r0, sl
 8011852:	f7fe ff17 	bl	8010684 <_free_r>
 8011856:	e76c      	b.n	8011732 <_realloc_r+0x186>
 8011858:	68a3      	ldr	r3, [r4, #8]
 801185a:	6083      	str	r3, [r0, #8]
 801185c:	68e3      	ldr	r3, [r4, #12]
 801185e:	60c3      	str	r3, [r0, #12]
 8011860:	2a24      	cmp	r2, #36	; 0x24
 8011862:	bf01      	itttt	eq
 8011864:	6923      	ldreq	r3, [r4, #16]
 8011866:	6103      	streq	r3, [r0, #16]
 8011868:	6961      	ldreq	r1, [r4, #20]
 801186a:	6141      	streq	r1, [r0, #20]
 801186c:	bf19      	ittee	ne
 801186e:	f100 0310 	addne.w	r3, r0, #16
 8011872:	f104 0210 	addne.w	r2, r4, #16
 8011876:	f100 0318 	addeq.w	r3, r0, #24
 801187a:	f104 0218 	addeq.w	r2, r4, #24
 801187e:	e7e0      	b.n	8011842 <_realloc_r+0x296>
 8011880:	4603      	mov	r3, r0
 8011882:	4622      	mov	r2, r4
 8011884:	e7dd      	b.n	8011842 <_realloc_r+0x296>
 8011886:	4621      	mov	r1, r4
 8011888:	f7ff fe64 	bl	8011554 <memmove>
 801188c:	e7df      	b.n	801184e <_realloc_r+0x2a2>
 801188e:	4637      	mov	r7, r6
 8011890:	e6ed      	b.n	801166e <_realloc_r+0xc2>
 8011892:	f003 0301 	and.w	r3, r3, #1
 8011896:	431f      	orrs	r7, r3
 8011898:	f8c9 7004 	str.w	r7, [r9, #4]
 801189c:	6853      	ldr	r3, [r2, #4]
 801189e:	f043 0301 	orr.w	r3, r3, #1
 80118a2:	6053      	str	r3, [r2, #4]
 80118a4:	e6ff      	b.n	80116a6 <_realloc_r+0xfa>
 80118a6:	bf00      	nop
 80118a8:	200001d4 	.word	0x200001d4

080118ac <__swbuf_r>:
 80118ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ae:	460e      	mov	r6, r1
 80118b0:	4614      	mov	r4, r2
 80118b2:	4605      	mov	r5, r0
 80118b4:	b118      	cbz	r0, 80118be <__swbuf_r+0x12>
 80118b6:	6983      	ldr	r3, [r0, #24]
 80118b8:	b90b      	cbnz	r3, 80118be <__swbuf_r+0x12>
 80118ba:	f7fe fe0d 	bl	80104d8 <__sinit>
 80118be:	4b27      	ldr	r3, [pc, #156]	; (801195c <__swbuf_r+0xb0>)
 80118c0:	429c      	cmp	r4, r3
 80118c2:	d12f      	bne.n	8011924 <__swbuf_r+0x78>
 80118c4:	686c      	ldr	r4, [r5, #4]
 80118c6:	69a3      	ldr	r3, [r4, #24]
 80118c8:	60a3      	str	r3, [r4, #8]
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	0719      	lsls	r1, r3, #28
 80118ce:	d533      	bpl.n	8011938 <__swbuf_r+0x8c>
 80118d0:	6923      	ldr	r3, [r4, #16]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d030      	beq.n	8011938 <__swbuf_r+0x8c>
 80118d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118da:	b2f6      	uxtb	r6, r6
 80118dc:	049a      	lsls	r2, r3, #18
 80118de:	4637      	mov	r7, r6
 80118e0:	d534      	bpl.n	801194c <__swbuf_r+0xa0>
 80118e2:	6923      	ldr	r3, [r4, #16]
 80118e4:	6820      	ldr	r0, [r4, #0]
 80118e6:	1ac0      	subs	r0, r0, r3
 80118e8:	6963      	ldr	r3, [r4, #20]
 80118ea:	4298      	cmp	r0, r3
 80118ec:	db04      	blt.n	80118f8 <__swbuf_r+0x4c>
 80118ee:	4621      	mov	r1, r4
 80118f0:	4628      	mov	r0, r5
 80118f2:	f7fe fd5d 	bl	80103b0 <_fflush_r>
 80118f6:	bb28      	cbnz	r0, 8011944 <__swbuf_r+0x98>
 80118f8:	68a3      	ldr	r3, [r4, #8]
 80118fa:	3b01      	subs	r3, #1
 80118fc:	60a3      	str	r3, [r4, #8]
 80118fe:	6823      	ldr	r3, [r4, #0]
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	6022      	str	r2, [r4, #0]
 8011904:	701e      	strb	r6, [r3, #0]
 8011906:	6963      	ldr	r3, [r4, #20]
 8011908:	3001      	adds	r0, #1
 801190a:	4298      	cmp	r0, r3
 801190c:	d004      	beq.n	8011918 <__swbuf_r+0x6c>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	07db      	lsls	r3, r3, #31
 8011912:	d519      	bpl.n	8011948 <__swbuf_r+0x9c>
 8011914:	2e0a      	cmp	r6, #10
 8011916:	d117      	bne.n	8011948 <__swbuf_r+0x9c>
 8011918:	4621      	mov	r1, r4
 801191a:	4628      	mov	r0, r5
 801191c:	f7fe fd48 	bl	80103b0 <_fflush_r>
 8011920:	b190      	cbz	r0, 8011948 <__swbuf_r+0x9c>
 8011922:	e00f      	b.n	8011944 <__swbuf_r+0x98>
 8011924:	4b0e      	ldr	r3, [pc, #56]	; (8011960 <__swbuf_r+0xb4>)
 8011926:	429c      	cmp	r4, r3
 8011928:	d101      	bne.n	801192e <__swbuf_r+0x82>
 801192a:	68ac      	ldr	r4, [r5, #8]
 801192c:	e7cb      	b.n	80118c6 <__swbuf_r+0x1a>
 801192e:	4b0d      	ldr	r3, [pc, #52]	; (8011964 <__swbuf_r+0xb8>)
 8011930:	429c      	cmp	r4, r3
 8011932:	bf08      	it	eq
 8011934:	68ec      	ldreq	r4, [r5, #12]
 8011936:	e7c6      	b.n	80118c6 <__swbuf_r+0x1a>
 8011938:	4621      	mov	r1, r4
 801193a:	4628      	mov	r0, r5
 801193c:	f7fd fddc 	bl	800f4f8 <__swsetup_r>
 8011940:	2800      	cmp	r0, #0
 8011942:	d0c8      	beq.n	80118d6 <__swbuf_r+0x2a>
 8011944:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011948:	4638      	mov	r0, r7
 801194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801194c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011950:	81a3      	strh	r3, [r4, #12]
 8011952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011958:	6663      	str	r3, [r4, #100]	; 0x64
 801195a:	e7c2      	b.n	80118e2 <__swbuf_r+0x36>
 801195c:	080e7880 	.word	0x080e7880
 8011960:	080e78a0 	.word	0x080e78a0
 8011964:	080e7860 	.word	0x080e7860

08011968 <_wcrtomb_r>:
 8011968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801196a:	4605      	mov	r5, r0
 801196c:	b085      	sub	sp, #20
 801196e:	461e      	mov	r6, r3
 8011970:	460f      	mov	r7, r1
 8011972:	4c0f      	ldr	r4, [pc, #60]	; (80119b0 <_wcrtomb_r+0x48>)
 8011974:	b991      	cbnz	r1, 801199c <_wcrtomb_r+0x34>
 8011976:	6822      	ldr	r2, [r4, #0]
 8011978:	490e      	ldr	r1, [pc, #56]	; (80119b4 <_wcrtomb_r+0x4c>)
 801197a:	6a12      	ldr	r2, [r2, #32]
 801197c:	2a00      	cmp	r2, #0
 801197e:	bf08      	it	eq
 8011980:	460a      	moveq	r2, r1
 8011982:	a901      	add	r1, sp, #4
 8011984:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8011988:	463a      	mov	r2, r7
 801198a:	47a0      	blx	r4
 801198c:	1c43      	adds	r3, r0, #1
 801198e:	bf01      	itttt	eq
 8011990:	2300      	moveq	r3, #0
 8011992:	6033      	streq	r3, [r6, #0]
 8011994:	238a      	moveq	r3, #138	; 0x8a
 8011996:	602b      	streq	r3, [r5, #0]
 8011998:	b005      	add	sp, #20
 801199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199c:	6824      	ldr	r4, [r4, #0]
 801199e:	4f05      	ldr	r7, [pc, #20]	; (80119b4 <_wcrtomb_r+0x4c>)
 80119a0:	6a24      	ldr	r4, [r4, #32]
 80119a2:	2c00      	cmp	r4, #0
 80119a4:	bf08      	it	eq
 80119a6:	463c      	moveq	r4, r7
 80119a8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80119ac:	e7ed      	b.n	801198a <_wcrtomb_r+0x22>
 80119ae:	bf00      	nop
 80119b0:	200000e0 	.word	0x200000e0
 80119b4:	200005e4 	.word	0x200005e4

080119b8 <__ascii_wctomb>:
 80119b8:	b149      	cbz	r1, 80119ce <__ascii_wctomb+0x16>
 80119ba:	2aff      	cmp	r2, #255	; 0xff
 80119bc:	bf85      	ittet	hi
 80119be:	238a      	movhi	r3, #138	; 0x8a
 80119c0:	6003      	strhi	r3, [r0, #0]
 80119c2:	700a      	strbls	r2, [r1, #0]
 80119c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80119c8:	bf98      	it	ls
 80119ca:	2001      	movls	r0, #1
 80119cc:	4770      	bx	lr
 80119ce:	4608      	mov	r0, r1
 80119d0:	4770      	bx	lr
	...

080119d4 <_init>:
 80119d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d6:	bf00      	nop
 80119d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119da:	bc08      	pop	{r3}
 80119dc:	469e      	mov	lr, r3
 80119de:	4770      	bx	lr

080119e0 <_fini>:
 80119e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e2:	bf00      	nop
 80119e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119e6:	bc08      	pop	{r3}
 80119e8:	469e      	mov	lr, r3
 80119ea:	4770      	bx	lr
