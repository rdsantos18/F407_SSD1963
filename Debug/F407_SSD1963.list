
F407_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014dc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e629c  08014f50  08014f50  00024f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080fb1ec  080fb1ec  0010b1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080fb1f4  080fb1f4  0010b1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080fb1f8  080fb1f8  0010b1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007a8  20000000  080fb1fc  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  001107a8  2**0
                  CONTENTS
  8 .bss          00015724  200007a8  200007a8  001107a8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20015ecc  20015ecc  001107a8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  001107a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0007f6e3  00000000  00000000  001107d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000eecb  00000000  00000000  0018febb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00029acc  00000000  00000000  0019ed86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027b0  00000000  00000000  001c8858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000041a8  00000000  00000000  001cb008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001b841  00000000  00000000  001cf1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000daeb  00000000  00000000  001ea9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001f84dc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008234  00000000  00000000  001f8558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007a8 	.word	0x200007a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014f38 	.word	0x08014f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007ac 	.word	0x200007ac
 80001cc:	08014f38 	.word	0x08014f38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	2230      	movs	r2, #48	; 0x30
{
 8000ed4:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	eb0d 0002 	add.w	r0, sp, r2
 8000eda:	2100      	movs	r1, #0
 8000edc:	f00f fc89 	bl	80107f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	a807      	add	r0, sp, #28
 8000ee6:	f00f fc84 	bl	80107f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eea:	2100      	movs	r1, #0
 8000eec:	2210      	movs	r2, #16
 8000eee:	a803      	add	r0, sp, #12
 8000ef0:	f00f fc7f 	bl	80107f2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <SystemClock_Config+0xac>)
 8000ef8:	9501      	str	r5, [sp, #4]
 8000efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <SystemClock_Config+0xb0>)
 8000f0e:	9502      	str	r5, [sp, #8]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f32:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f42:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f001 fc76 	bl	8002838 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f54:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5c:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f64:	f001 fe18 	bl	8002b98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f68:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f6c:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f6e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f70:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f72:	f001 fee9 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000f76:	b018      	add	sp, #96	; 0x60
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <main>:
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8000f88:	f000 fbac 	bl	80016e4 <HAL_Init>
  SystemClock_Config();
 8000f8c:	f7ff ffa0 	bl	8000ed0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2214      	movs	r2, #20
 8000f92:	2100      	movs	r1, #0
 8000f94:	a808      	add	r0, sp, #32

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f96:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f00f fc2b 	bl	80107f2 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9c:	4ba7      	ldr	r3, [pc, #668]	; (800123c <main+0x2b8>)
 8000f9e:	9402      	str	r4, [sp, #8]
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000fa2:	48a7      	ldr	r0, [pc, #668]	; (8001240 <main+0x2bc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fa4:	4fa7      	ldr	r7, [pc, #668]	; (8001244 <main+0x2c0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	f042 0210 	orr.w	r2, r2, #16
 8000faa:	631a      	str	r2, [r3, #48]	; 0x30
 8000fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fae:	f002 0210 	and.w	r2, r2, #16
 8000fb2:	9202      	str	r2, [sp, #8]
 8000fb4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	9403      	str	r4, [sp, #12]
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f042 0204 	orr.w	r2, r2, #4
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc2:	f002 0204 	and.w	r2, r2, #4
 8000fc6:	9203      	str	r2, [sp, #12]
 8000fc8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	9404      	str	r4, [sp, #16]
 8000fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fda:	9204      	str	r2, [sp, #16]
 8000fdc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	9405      	str	r4, [sp, #20]
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0201 	and.w	r2, r2, #1
 8000fee:	9205      	str	r2, [sp, #20]
 8000ff0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	9406      	str	r4, [sp, #24]
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff6:	f042 0202 	orr.w	r2, r2, #2
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffe:	f002 0202 	and.w	r2, r2, #2
 8001002:	9206      	str	r2, [sp, #24]
 8001004:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	9407      	str	r4, [sp, #28]
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f042 0208 	orr.w	r2, r2, #8
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 800101e:	f000 fcd5 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|T_CS_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2111      	movs	r1, #17
 8001026:	4888      	ldr	r0, [pc, #544]	; (8001248 <main+0x2c4>)
 8001028:	f000 fcd0 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001032:	4886      	ldr	r0, [pc, #536]	; (800124c <main+0x2c8>)
 8001034:	f000 fcca 	bl	80019cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001038:	4622      	mov	r2, r4
 800103a:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 800103e:	4884      	ldr	r0, [pc, #528]	; (8001250 <main+0x2cc>)
 8001040:	f000 fcc4 	bl	80019cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001046:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001048:	a908      	add	r1, sp, #32
 800104a:	487d      	ldr	r0, [pc, #500]	; (8001240 <main+0x2bc>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800104c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001054:	f000 fbda 	bl	800180c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 8001058:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	a908      	add	r1, sp, #32
 800105c:	487a      	ldr	r0, [pc, #488]	; (8001248 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|T_CS_Pin;
 800105e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001060:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f000 fbcf 	bl	800180c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800106e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001070:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001074:	4874      	ldr	r0, [pc, #464]	; (8001248 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001080:	f000 fbc4 	bl	800180c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	a908      	add	r1, sp, #32
 8001086:	4873      	ldr	r0, [pc, #460]	; (8001254 <main+0x2d0>)
  GPIO_InitStruct.Pin = B1_Pin;
 8001088:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800108a:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f000 fbbd 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001092:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001094:	eb0d 0103 	add.w	r1, sp, r3
 8001098:	486b      	ldr	r0, [pc, #428]	; (8001248 <main+0x2c4>)
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800109a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f000 fbb4 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010a4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010a6:	a908      	add	r1, sp, #32
 80010a8:	4868      	ldr	r0, [pc, #416]	; (800124c <main+0x2c8>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010aa:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f000 fbac 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010b8:	a908      	add	r1, sp, #32
 80010ba:	4864      	ldr	r0, [pc, #400]	; (800124c <main+0x2c8>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010bc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f000 fba0 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_WR_Pin TFT_DC_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80010cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	a908      	add	r1, sp, #32
 80010d2:	485e      	ldr	r0, [pc, #376]	; (800124c <main+0x2c8>)
  GPIO_InitStruct.Pin = TFT_WR_Pin|TFT_DC_Pin|TFT_RST_Pin;
 80010d4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f000 fb96 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           TFT_D0_Pin TFT_D1_Pin TFT_D2_Pin TFT_D4_Pin 
                           TFT_D5_Pin TFT_D5D5_Pin TFT_D6_Pin TFT_D7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80010e0:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
                          |TFT_D0_Pin|TFT_D1_Pin|TFT_D2_Pin|TFT_D4_Pin 
                          |TFT_D5_Pin|TFT_D5D5_Pin|TFT_D6_Pin|TFT_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	a908      	add	r1, sp, #32
 80010e6:	485a      	ldr	r0, [pc, #360]	; (8001250 <main+0x2cc>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80010e8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f000 fb8c 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010f4:	a908      	add	r1, sp, #32
 80010f6:	4852      	ldr	r0, [pc, #328]	; (8001240 <main+0x2bc>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010f8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010fa:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f000 fb85 	bl	800180c <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4a55      	ldr	r2, [pc, #340]	; (8001258 <main+0x2d4>)
  hi2c1.Instance = I2C1;
 8001104:	4855      	ldr	r0, [pc, #340]	; (800125c <main+0x2d8>)
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b56      	ldr	r3, [pc, #344]	; (8001260 <main+0x2dc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	6084      	str	r4, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	6204      	str	r4, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	f8c0 8010 	str.w	r8, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	f001 f8ae 	bl	8002280 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8001124:	484f      	ldr	r0, [pc, #316]	; (8001264 <main+0x2e0>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <main+0x2e4>)
  hspi1.Instance = SPI1;
 8001128:	4d50      	ldr	r5, [pc, #320]	; (800126c <main+0x2e8>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800112a:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800112c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001130:	e880 0088 	stmia.w	r0, {r3, r7}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001134:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <main+0x2ec>)
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001136:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001138:	6107      	str	r7, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800113a:	6143      	str	r3, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800113c:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800113e:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001140:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001142:	f001 f941 	bl	80023c8 <HAL_I2S_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	494b      	ldr	r1, [pc, #300]	; (8001274 <main+0x2f0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001148:	60ac      	str	r4, [r5, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800114e:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001152:	4628      	mov	r0, r5
  hspi1.Init.CRCPolynomial = 10;
 8001154:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001156:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001158:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115a:	616c      	str	r4, [r5, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115c:	61af      	str	r7, [r5, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800115e:	61ec      	str	r4, [r5, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001160:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001166:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001168:	f001 ff1e 	bl	8002fa8 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800116c:	4842      	ldr	r0, [pc, #264]	; (8001278 <main+0x2f4>)
  huart2.Init.BaudRate = 115200;
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <main+0x2f8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001170:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001172:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8001176:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117a:	270c      	movs	r7, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001180:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001182:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001186:	f002 fb37 	bl	80037f8 <HAL_UART_Init>
  huart3.Instance = USART3;
 800118a:	483d      	ldr	r0, [pc, #244]	; (8001280 <main+0x2fc>)
  huart3.Init.BaudRate = 9600;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <main+0x300>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 9600;
 8001190:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001194:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001196:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001198:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800119a:	61c4      	str	r4, [r0, #28]
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 800119c:	4c3a      	ldr	r4, [pc, #232]	; (8001288 <main+0x304>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 800119e:	6147      	str	r7, [r0, #20]
  huart3.Init.BaudRate = 9600;
 80011a0:	e880 4008 	stmia.w	r0, {r3, lr}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a4:	f002 fb28 	bl	80037f8 <HAL_UART_Init>
  MX_USB_HOST_Init();
 80011a8:	f004 fa40 	bl	800562c <MX_USB_HOST_Init>
    HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80011ac:	4641      	mov	r1, r8
 80011ae:	4828      	ldr	r0, [pc, #160]	; (8001250 <main+0x2cc>)
 80011b0:	f000 fc11 	bl	80019d6 <HAL_GPIO_TogglePin>
    ssd1963_init();
 80011b4:	f004 fb9c 	bl	80058f0 <ssd1963_init>
  lv_disp_buf_init(&disp_buf, buf, buf2, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 80011b8:	4a34      	ldr	r2, [pc, #208]	; (800128c <main+0x308>)
 80011ba:	4935      	ldr	r1, [pc, #212]	; (8001290 <main+0x30c>)
 80011bc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80011c0:	4620      	mov	r0, r4
 80011c2:	f00b f870 	bl	800c2a6 <lv_disp_buf_init>
  lv_init();
 80011c6:	f005 fe2d 	bl	8006e24 <lv_init>
  lv_disp_drv_init(&disp_drv);          //Basic initialization
 80011ca:	a808      	add	r0, sp, #32
 80011cc:	f00b f852 	bl	800c274 <lv_disp_drv_init>
  disp_drv.hor_res = 800;               //Set the horizontal resolution
 80011d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80011d4:	f8ad 3020 	strh.w	r3, [sp, #32]
  disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 80011d8:	9409      	str	r4, [sp, #36]	; 0x24
  disp_drv.ver_res = 480;               //Set the vertical resolution
 80011da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  lv_indev_drv_init(&indev_drv);
 80011de:	4c2d      	ldr	r4, [pc, #180]	; (8001294 <main+0x310>)
  disp_drv.ver_res = 480;               //Set the vertical resolution
 80011e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  lv_disp_drv_register(&disp_drv);      //Finally register the drive
 80011e4:	a808      	add	r0, sp, #32
  disp_drv.flush_cb = ssd1963_flush;	//Set your driver function
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <main+0x314>)
 80011e8:	930b      	str	r3, [sp, #44]	; 0x2c
  lv_disp_drv_register(&disp_drv);      //Finally register the drive
 80011ea:	f00b f86b 	bl	800c2c4 <lv_disp_drv_register>
  lv_indev_drv_init(&indev_drv);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f00b f92e 	bl	800c450 <lv_indev_drv_init>
  indev_drv.read_cb = xpt2046_read;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <main+0x318>)
  indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011f6:	7026      	strb	r6, [r4, #0]
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 80011f8:	4620      	mov	r0, r4
  indev_drv.read_cb = xpt2046_read;
 80011fa:	6063      	str	r3, [r4, #4]
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 80011fc:	f00b f93a 	bl	800c474 <lv_indev_drv_register>
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <main+0x31c>)
  	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001202:	4c13      	ldr	r4, [pc, #76]	; (8001250 <main+0x2cc>)
  indev_touchpad = lv_indev_drv_register(&indev_drv);
 8001204:	6018      	str	r0, [r3, #0]
  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <main+0x2cc>)
 800120c:	f000 fbe3 	bl	80019d6 <HAL_GPIO_TogglePin>
  simulacare();
 8001210:	f003 fdc2 	bl	8004d98 <simulacare>
  	  uint8_t spi_data = 0x55;
 8001214:	2655      	movs	r6, #85	; 0x55
    MX_USB_HOST_Process();
 8001216:	f004 fa29 	bl	800566c <MX_USB_HOST_Process>
  	  lv_task_handler();
 800121a:	f00b ff21 	bl	800d060 <lv_task_handler>
  	  uint8_t spi_data = 0x55;
 800121e:	a912      	add	r1, sp, #72	; 0x48
  	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_data, 1, HAL_MAX_DELAY);
 8001220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  	  uint8_t spi_data = 0x55;
 8001224:	f801 6d41 	strb.w	r6, [r1, #-65]!
  	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_data, 1, HAL_MAX_DELAY);
 8001228:	2201      	movs	r2, #1
 800122a:	4628      	mov	r0, r5
 800122c:	f001 fef9 	bl	8003022 <HAL_SPI_Transmit>
  	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8001230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001234:	4620      	mov	r0, r4
 8001236:	f000 fbce 	bl	80019d6 <HAL_GPIO_TogglePin>
 800123a:	e7ec      	b.n	8001216 <main+0x292>
 800123c:	40023800 	.word	0x40023800
 8001240:	40021000 	.word	0x40021000
 8001244:	10120000 	.word	0x10120000
 8001248:	40020800 	.word	0x40020800
 800124c:	40020400 	.word	0x40020400
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40020000 	.word	0x40020000
 8001258:	40005400 	.word	0x40005400
 800125c:	20015218 	.word	0x20015218
 8001260:	000186a0 	.word	0x000186a0
 8001264:	20015308 	.word	0x20015308
 8001268:	40003c00 	.word	0x40003c00
 800126c:	20015270 	.word	0x20015270
 8001270:	00017700 	.word	0x00017700
 8001274:	40013000 	.word	0x40013000
 8001278:	200152c8 	.word	0x200152c8
 800127c:	40004400 	.word	0x40004400
 8001280:	200151d8 	.word	0x200151d8
 8001284:	40004800 	.word	0x40004800
 8001288:	200101c4 	.word	0x200101c4
 800128c:	200084c4 	.word	0x200084c4
 8001290:	200007c4 	.word	0x200007c4
 8001294:	200151bc 	.word	0x200151bc
 8001298:	08005a4d 	.word	0x08005a4d
 800129c:	08005b25 	.word	0x08005b25
 80012a0:	2001526c 	.word	0x2001526c

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012a6:	6802      	ldr	r2, [r0, #0]
 80012a8:	4c07      	ldr	r4, [pc, #28]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012aa:	42a2      	cmp	r2, r4
{
 80012ac:	4605      	mov	r5, r0
  if (htim->Instance == TIM6) {
 80012ae:	d101      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 80012b0:	f000 fa32 	bl	8001718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	42a3      	cmp	r3, r4
 80012b8:	d104      	bne.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>
	  lv_tick_inc(1);
 80012ba:	2001      	movs	r0, #1
  }
  /* USER CODE END Callback 1 */
}
 80012bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  lv_tick_inc(1);
 80012c0:	f00b b934 	b.w	800c52c <lv_tick_inc>
 80012c4:	bd38      	pop	{r3, r4, r5, pc}
 80012c6:	bf00      	nop
 80012c8:	40001000 	.word	0x40001000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	4770      	bx	lr
	...

080012d0 <xpt2046>:
#include "misc.h"

extern SPI_HandleTypeDef hspi1;

uint8_t xpt2046(uint8_t data)
{
 80012d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&hspi1, &data, &ret, 1, 10);
 80012d2:	230a      	movs	r3, #10
{
 80012d4:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi1, &data, &ret, 1, 10);
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f10d 0217 	add.w	r2, sp, #23
 80012de:	2301      	movs	r3, #1
 80012e0:	f10d 010f 	add.w	r1, sp, #15
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <xpt2046+0x24>)
 80012e6:	f001 ff44 	bl	8003172 <HAL_SPI_TransmitReceive>
	return ret;
}
 80012ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80012ee:	b007      	add	sp, #28
 80012f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f4:	20015270 	.word	0x20015270

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_MspInit+0x3c>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	9100      	str	r1, [sp, #0]
 8001300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
 8001308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800130a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	9101      	str	r1, [sp, #4]
 8001314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001324:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001328:	f000 fa1c 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	b003      	add	sp, #12
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001338:	b530      	push	{r4, r5, lr}
 800133a:	4604      	mov	r4, r0
 800133c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	2214      	movs	r2, #20
 8001340:	2100      	movs	r1, #0
 8001342:	a803      	add	r0, sp, #12
 8001344:	f00f fa55 	bl	80107f2 <memset>
  if(hi2c->Instance==I2C1)
 8001348:	6822      	ldr	r2, [r4, #0]
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_I2C_MspInit+0x64>)
 800134c:	429a      	cmp	r2, r3
 800134e:	d122      	bne.n	8001396 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4c13      	ldr	r4, [pc, #76]	; (80013a0 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	2500      	movs	r5, #0
 8001356:	9501      	str	r5, [sp, #4]
 8001358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6323      	str	r3, [r4, #48]	; 0x30
 8001360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800136a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800136e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001374:	2301      	movs	r3, #1
 8001376:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137a:	2304      	movs	r3, #4
 800137c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f000 fa45 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001382:	9502      	str	r5, [sp, #8]
 8001384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138a:	6423      	str	r3, [r4, #64]	; 0x40
 800138c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	bd30      	pop	{r4, r5, pc}
 800139a:	bf00      	nop
 800139c:	40005400 	.word	0x40005400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	2214      	movs	r2, #20
 80013b0:	2100      	movs	r1, #0
 80013b2:	a803      	add	r0, sp, #12
 80013b4:	f00f fa1d 	bl	80107f2 <memset>
  if(hi2s->Instance==SPI3)
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_I2S_MspInit+0x88>)
 80013bc:	429a      	cmp	r2, r3
 80013be:	d135      	bne.n	800142c <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013c0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80013c4:	2400      	movs	r4, #0
 80013c6:	9400      	str	r4, [sp, #0]
 80013c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013ca:	481a      	ldr	r0, [pc, #104]	; (8001434 <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
 80013d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	9401      	str	r4, [sp, #4]
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
 80013e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e8:	f002 0201 	and.w	r2, r2, #1
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	9402      	str	r4, [sp, #8]
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f042 0204 	orr.w	r2, r2, #4
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001406:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001408:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800140a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800140c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001410:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001412:	f000 f9fb 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001416:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	a903      	add	r1, sp, #12
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800141e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001426:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f000 f9f0 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800142c:	b008      	add	sp, #32
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	40003c00 	.word	0x40003c00
 8001434:	40020000 	.word	0x40020000
 8001438:	40020800 	.word	0x40020800

0800143c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800143c:	b510      	push	{r4, lr}
 800143e:	4604      	mov	r4, r0
 8001440:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	2214      	movs	r2, #20
 8001444:	2100      	movs	r1, #0
 8001446:	a803      	add	r0, sp, #12
 8001448:	f00f f9d3 	bl	80107f2 <memset>
  if(hspi->Instance==SPI1)
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_SPI_MspInit+0x60>)
 8001450:	429a      	cmp	r2, r3
 8001452:	d120      	bne.n	8001496 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001454:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001458:	2100      	movs	r1, #0
 800145a:	9101      	str	r1, [sp, #4]
 800145c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
 8001466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001468:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001484:	23e0      	movs	r3, #224	; 0xe0
 8001486:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800148e:	2305      	movs	r3, #5
 8001490:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f000 f9bb 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001496:	b008      	add	sp, #32
 8001498:	bd10      	pop	{r4, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	2214      	movs	r2, #20
{
 80014a8:	b08a      	sub	sp, #40	; 0x28
 80014aa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	2100      	movs	r1, #0
 80014ae:	eb0d 0002 	add.w	r0, sp, r2
 80014b2:	f00f f99e 	bl	80107f2 <memset>
  if(huart->Instance==USART2)
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_UART_MspInit+0xb4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d125      	bne.n	800150a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	4827      	ldr	r0, [pc, #156]	; (8001560 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c2:	2100      	movs	r1, #0
 80014c4:	9101      	str	r1, [sp, #4]
 80014c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
 80014ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014d4:	9201      	str	r2, [sp, #4]
 80014d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	9102      	str	r1, [sp, #8]
 80014da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ec:	230c      	movs	r3, #12
 80014ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fc:	2307      	movs	r3, #7
 80014fe:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001502:	f000 f983 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001506:	b00a      	add	sp, #40	; 0x28
 8001508:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800150a:	4a16      	ldr	r2, [pc, #88]	; (8001564 <HAL_UART_MspInit+0xc0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d1fa      	bne.n	8001506 <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001514:	2100      	movs	r1, #0
 8001516:	9103      	str	r1, [sp, #12]
 8001518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
 8001520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001522:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	9104      	str	r1, [sp, #16]
 800152c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	9304      	str	r3, [sp, #16]
 800153c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001542:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001550:	2307      	movs	r3, #7
 8001552:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	a905      	add	r1, sp, #20
 8001556:	e7d4      	b.n	8001502 <HAL_UART_MspInit+0x5e>
 8001558:	40004400 	.word	0x40004400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	40004800 	.word	0x40004800
 8001568:	40020c00 	.word	0x40020c00

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800156e:	4601      	mov	r1, r0
{
 8001570:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001572:	2200      	movs	r2, #0
 8001574:	2036      	movs	r0, #54	; 0x36
 8001576:	f000 f907 	bl	8001788 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800157a:	2036      	movs	r0, #54	; 0x36
 800157c:	f000 f938 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001580:	2500      	movs	r5, #0
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_InitTick+0x6c>)
 8001584:	9502      	str	r5, [sp, #8]
 8001586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001588:	4c14      	ldr	r4, [pc, #80]	; (80015dc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800158a:	f042 0210 	orr.w	r2, r2, #16
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001598:	a901      	add	r1, sp, #4
 800159a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800159c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159e:	f001 fbb5 	bl	8002d0c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015a2:	f001 fb93 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_InitTick+0x74>)
 80015a8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80015aa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015ae:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015b0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_InitTick+0x78>)
 80015b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b8:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ba:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015bc:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015be:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015c2:	f001 ffe3 	bl	800358c <HAL_TIM_Base_Init>
 80015c6:	b920      	cbnz	r0, 80015d2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015c8:	4620      	mov	r0, r4
 80015ca:	f001 fec3 	bl	8003354 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80015ce:	b009      	add	sp, #36	; 0x24
 80015d0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80015d2:	2001      	movs	r0, #1
 80015d4:	e7fb      	b.n	80015ce <HAL_InitTick+0x62>
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	20015350 	.word	0x20015350
 80015e0:	40001000 	.word	0x40001000
 80015e4:	000f4240 	.word	0x000f4240

080015e8 <NMI_Handler>:
 80015e8:	4770      	bx	lr

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler>

080015f2 <SVC_Handler>:
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	4770      	bx	lr
	...

080015fc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015fc:	4801      	ldr	r0, [pc, #4]	; (8001604 <TIM6_DAC_IRQHandler+0x8>)
 80015fe:	f001 bebd 	b.w	800337c <HAL_TIM_IRQHandler>
 8001602:	bf00      	nop
 8001604:	20015350 	.word	0x20015350

08001608 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001608:	4801      	ldr	r0, [pc, #4]	; (8001610 <OTG_FS_IRQHandler+0x8>)
 800160a:	f000 bae1 	b.w	8001bd0 <HAL_HCD_IRQHandler>
 800160e:	bf00      	nop
 8001610:	20015768 	.word	0x20015768

08001614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	460e      	mov	r6, r1
 8001618:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	460c      	mov	r4, r1
 800161c:	1ba3      	subs	r3, r4, r6
 800161e:	429d      	cmp	r5, r3
 8001620:	dc01      	bgt.n	8001626 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001622:	4628      	mov	r0, r5
 8001624:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001626:	f3af 8000 	nop.w
 800162a:	f804 0b01 	strb.w	r0, [r4], #1
 800162e:	e7f5      	b.n	800161c <_read+0x8>

08001630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	460e      	mov	r6, r1
 8001634:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	460c      	mov	r4, r1
 8001638:	1ba3      	subs	r3, r4, r6
 800163a:	429d      	cmp	r5, r3
 800163c:	dc01      	bgt.n	8001642 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800163e:	4628      	mov	r0, r5
 8001640:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001642:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001646:	f3af 8000 	nop.w
 800164a:	e7f5      	b.n	8001638 <_write+0x8>

0800164c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800164c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <_sbrk+0x2c>)
 8001650:	6819      	ldr	r1, [r3, #0]
{
 8001652:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001654:	b909      	cbnz	r1, 800165a <_sbrk+0xe>
		heap_end = &end;
 8001656:	4909      	ldr	r1, [pc, #36]	; (800167c <_sbrk+0x30>)
 8001658:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800165a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800165c:	4669      	mov	r1, sp
 800165e:	4402      	add	r2, r0
 8001660:	428a      	cmp	r2, r1
 8001662:	d906      	bls.n	8001672 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001664:	f00e fe72 	bl	801034c <__errno>
 8001668:	230c      	movs	r3, #12
 800166a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001670:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001672:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001674:	bd08      	pop	{r3, pc}
 8001676:	bf00      	nop
 8001678:	200101e0 	.word	0x200101e0
 800167c:	20015ecc 	.word	0x20015ecc

08001680 <_close>:

int _close(int file)
{
	return -1;
}
 8001680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800168c:	2000      	movs	r0, #0
 800168e:	4770      	bx	lr

08001690 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001690:	2001      	movs	r0, #1
 8001692:	4770      	bx	lr

08001694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001694:	2000      	movs	r0, #0
 8001696:	4770      	bx	lr

08001698 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	490f      	ldr	r1, [pc, #60]	; (80016d8 <SystemInit+0x40>)
 800169a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800169e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <SystemInit+0x44>)
 80016a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016aa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80016b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <SystemInit+0x48>)
 80016c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016ca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016cc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	24003010 	.word	0x24003010

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_Init+0x30>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ee:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016f6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f82f 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff ff30 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fdf4 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001710:	2000      	movs	r0, #0
 8001712:	bd08      	pop	{r3, pc}
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001718:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_IncTick+0x10>)
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_IncTick+0x14>)
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	440b      	add	r3, r1
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20015390 	.word	0x20015390
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001730:	4b01      	ldr	r3, [pc, #4]	; (8001738 <HAL_GetTick+0x8>)
 8001732:	6818      	ldr	r0, [r3, #0]
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20015390 	.word	0x20015390

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b538      	push	{r3, r4, r5, lr}
 800173e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fff6 	bl	8001730 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001744:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	bf1c      	itt	ne
 8001748:	4b05      	ldrne	r3, [pc, #20]	; (8001760 <HAL_Delay+0x24>)
 800174a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800174c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800174e:	bf18      	it	ne
 8001750:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	f7ff ffed 	bl	8001730 <HAL_GetTick>
 8001756:	1b40      	subs	r0, r0, r5
 8001758:	4284      	cmp	r4, r0
 800175a:	d8fa      	bhi.n	8001752 <HAL_Delay+0x16>
  {
  }
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001766:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001768:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	0200      	lsls	r0, r0, #8
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800177e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001780:	60d3      	str	r3, [r2, #12]
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b530      	push	{r4, r5, lr}
 800178c:	68dc      	ldr	r4, [r3, #12]
 800178e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001792:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	2b04      	cmp	r3, #4
 800179a:	bf28      	it	cs
 800179c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 0501 	mov.w	r5, #1
 80017a4:	fa05 f303 	lsl.w	r3, r5, r3
 80017a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ac:	bf8c      	ite	hi
 80017ae:	3c03      	subhi	r4, #3
 80017b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b2:	4019      	ands	r1, r3
 80017b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b6:	fa05 f404 	lsl.w	r4, r5, r4
 80017ba:	3c01      	subs	r4, #1
 80017bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80017be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	ea42 0201 	orr.w	r2, r2, r1
 80017c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	bfad      	iteet	ge
 80017ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	f000 000f 	andlt.w	r0, r0, #15
 80017d2:	4b06      	ldrlt	r3, [pc, #24]	; (80017ec <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	bfb5      	itete	lt
 80017da:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80017e4:	bd30      	pop	{r4, r5, pc}
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	e000ed14 	.word	0xe000ed14

080017f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	db08      	blt.n	8001806 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f4:	0942      	lsrs	r2, r0, #5
 80017f6:	2301      	movs	r3, #1
 80017f8:	f000 001f 	and.w	r0, r0, #31
 80017fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <HAL_NVIC_EnableIRQ+0x18>)
 8001802:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001810:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80019c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001818:	4a68      	ldr	r2, [pc, #416]	; (80019bc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80019c8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001820:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001822:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001828:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001830:	45b6      	cmp	lr, r6
 8001832:	f040 80ae 	bne.w	8001992 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001836:	684c      	ldr	r4, [r1, #4]
 8001838:	f024 0710 	bic.w	r7, r4, #16
 800183c:	2f02      	cmp	r7, #2
 800183e:	d116      	bne.n	800186e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001840:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001844:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001848:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800184c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001850:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001854:	f04f 0c0f 	mov.w	ip, #15
 8001858:	fa0c fc0b 	lsl.w	ip, ip, fp
 800185c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	690d      	ldr	r5, [r1, #16]
 8001862:	fa05 f50b 	lsl.w	r5, r5, fp
 8001866:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	f8ca 5020 	str.w	r5, [sl, #32]
 800186e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001874:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001878:	fa05 f50a 	lsl.w	r5, r5, sl
 800187c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001882:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001886:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800188a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001890:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001892:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001896:	d811      	bhi.n	80018bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001898:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	68cf      	ldr	r7, [r1, #12]
 80018a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80018a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80018a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80018aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80018b4:	409f      	lsls	r7, r3
 80018b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80018ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80018bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	688f      	ldr	r7, [r1, #8]
 80018c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80018c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80018c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ca:	00e5      	lsls	r5, r4, #3
 80018cc:	d561      	bpl.n	8001992 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	f04f 0b00 	mov.w	fp, #0
 80018d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80018d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	4d39      	ldr	r5, [pc, #228]	; (80019c0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018ec:	9703      	str	r7, [sp, #12]
 80018ee:	9f03      	ldr	r7, [sp, #12]
 80018f0:	f023 0703 	bic.w	r7, r3, #3
 80018f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001900:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001904:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001908:	f04f 0e0f 	mov.w	lr, #15
 800190c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001910:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001912:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	d043      	beq.n	80019a0 <HAL_GPIO_Init+0x194>
 8001918:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800191c:	42a8      	cmp	r0, r5
 800191e:	d041      	beq.n	80019a4 <HAL_GPIO_Init+0x198>
 8001920:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001924:	42a8      	cmp	r0, r5
 8001926:	d03f      	beq.n	80019a8 <HAL_GPIO_Init+0x19c>
 8001928:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800192c:	42a8      	cmp	r0, r5
 800192e:	d03d      	beq.n	80019ac <HAL_GPIO_Init+0x1a0>
 8001930:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001934:	42a8      	cmp	r0, r5
 8001936:	d03b      	beq.n	80019b0 <HAL_GPIO_Init+0x1a4>
 8001938:	4548      	cmp	r0, r9
 800193a:	d03b      	beq.n	80019b4 <HAL_GPIO_Init+0x1a8>
 800193c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001940:	42a8      	cmp	r0, r5
 8001942:	d039      	beq.n	80019b8 <HAL_GPIO_Init+0x1ac>
 8001944:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001948:	42a8      	cmp	r0, r5
 800194a:	bf14      	ite	ne
 800194c:	2508      	movne	r5, #8
 800194e:	2507      	moveq	r5, #7
 8001950:	fa05 f50c 	lsl.w	r5, r5, ip
 8001954:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800195a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800195c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001962:	bf0c      	ite	eq
 8001964:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001966:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001968:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800196a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001970:	bf0c      	ite	eq
 8001972:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001974:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001976:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001978:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800197a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800197e:	bf0c      	ite	eq
 8001980:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001982:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001984:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001986:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800198a:	bf54      	ite	pl
 800198c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800198e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001990:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	3301      	adds	r3, #1
 8001994:	2b10      	cmp	r3, #16
 8001996:	f47f af44 	bne.w	8001822 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800199a:	b005      	add	sp, #20
 800199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a0:	465d      	mov	r5, fp
 80019a2:	e7d5      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019a4:	2501      	movs	r5, #1
 80019a6:	e7d3      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019a8:	2502      	movs	r5, #2
 80019aa:	e7d1      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019ac:	2503      	movs	r5, #3
 80019ae:	e7cf      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019b0:	2504      	movs	r5, #4
 80019b2:	e7cd      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019b4:	2505      	movs	r5, #5
 80019b6:	e7cb      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019b8:	2506      	movs	r5, #6
 80019ba:	e7c9      	b.n	8001950 <HAL_GPIO_Init+0x144>
 80019bc:	40013c00 	.word	0x40013c00
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021400 	.word	0x40021400

080019cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	b10a      	cbz	r2, 80019d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	6181      	str	r1, [r0, #24]
 80019d0:	4770      	bx	lr
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	e7fb      	b.n	80019ce <HAL_GPIO_WritePin+0x2>

080019d6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80019d6:	6943      	ldr	r3, [r0, #20]
 80019d8:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019dc:	bf08      	it	eq
 80019de:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e0:	6181      	str	r1, [r0, #24]
 80019e2:	4770      	bx	lr

080019e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019ea:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 80019ee:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80019f2:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80019f6:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80019fa:	2801      	cmp	r0, #1
 80019fc:	d028      	beq.n	8001a50 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 80019fe:	2028      	movs	r0, #40	; 0x28
 8001a00:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001a04:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001a06:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a08:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001a0c:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a10:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a14:	bf08      	it	eq
 8001a16:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001a18:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a20:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a24:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a28:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a2c:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001a30:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001a34:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001a38:	f8cd c008 	str.w	ip, [sp, #8]
 8001a3c:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001a40:	6820      	ldr	r0, [r4, #0]
 8001a42:	f002 f8a9 	bl	8003b98 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a46:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001a4a:	b004      	add	sp, #16
 8001a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001a50:	2002      	movs	r0, #2
 8001a52:	e7fa      	b.n	8001a4a <HAL_HCD_HC_Init+0x66>

08001a54 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001a54:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001a58:	2b01      	cmp	r3, #1
{
 8001a5a:	b510      	push	{r4, lr}
 8001a5c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001a5e:	d009      	beq.n	8001a74 <HAL_HCD_HC_Halt+0x20>
 8001a60:	2301      	movs	r3, #1
 8001a62:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a66:	6800      	ldr	r0, [r0, #0]
 8001a68:	f002 f920 	bl	8003cac <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001a72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001a74:	2002      	movs	r0, #2
}
 8001a76:	bd10      	pop	{r4, pc}

08001a78 <HAL_HCD_Init>:
{
 8001a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001a7c:	4607      	mov	r7, r0
{
 8001a7e:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d041      	beq.n	8001b08 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a84:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001a88:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a8e:	b91b      	cbnz	r3, 8001a98 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001a90:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001a94:	f003 fdf0 	bl	8005678 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001aa0:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aa2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001aa6:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001aaa:	bf08      	it	eq
 8001aac:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001aae:	f001 ff2f 	bl	8003910 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	466d      	mov	r5, sp
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac4:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ac8:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001aca:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f001 fed8 	bl	8003884 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ad4:	f856 0b10 	ldr.w	r0, [r6], #16
 8001ad8:	2101      	movs	r1, #1
 8001ada:	f001 ff1f 	bl	800391c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ade:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ae0:	466d      	mov	r5, sp
 8001ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f001 ffcf 	bl	8003a98 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
}
 8001b02:	b00a      	add	sp, #40	; 0x28
 8001b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7fa      	b.n	8001b02 <HAL_HCD_Init+0x8a>

08001b0c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001b0e:	2428      	movs	r4, #40	; 0x28
 8001b10:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001b14:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001b18:	9e06      	ldr	r6, [sp, #24]
 8001b1a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b1e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001b26:	b96f      	cbnz	r7, 8001b44 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b28:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b2a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001b30:	d02b      	beq.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x7e>
 8001b32:	42bb      	cmp	r3, r7
 8001b34:	d029      	beq.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x7e>
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d131      	bne.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	fb03 0301 	mla	r3, r3, r1, r0
 8001b40:	2200      	movs	r2, #0
 8001b42:	e02a      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b44:	f04f 0e02 	mov.w	lr, #2
 8001b48:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d826      	bhi.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x92>
 8001b50:	a401      	add	r4, pc, #4	; (adr r4, 8001b58 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001b52:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b3b 	.word	0x08001b3b
 8001b60:	08001b8b 	.word	0x08001b8b
 8001b64:	08001b8b 	.word	0x08001b8b
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b68:	2f01      	cmp	r7, #1
 8001b6a:	d118      	bne.n	8001b9e <HAL_HCD_HC_SubmitRequest+0x92>
 8001b6c:	b9ba      	cbnz	r2, 8001b9e <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001b6e:	b925      	cbnz	r5, 8001b7a <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b70:	2328      	movs	r3, #40	; 0x28
 8001b72:	fb03 0301 	mla	r3, r3, r1, r0
 8001b76:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b7a:	2328      	movs	r3, #40	; 0x28
 8001b7c:	fb03 0301 	mla	r3, r3, r1, r0
 8001b80:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b84:	b14a      	cbz	r2, 8001b9a <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b86:	2202      	movs	r2, #2
 8001b88:	e007      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x8e>
 8001b8a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b8c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001b90:	b9d2      	cbnz	r2, 8001bc8 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b92:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	d1f5      	bne.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b9e:	2428      	movs	r4, #40	; 0x28
 8001ba0:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ba4:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ba6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001baa:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bac:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001bae:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bba:	3138      	adds	r1, #56	; 0x38
 8001bbc:	7c02      	ldrb	r2, [r0, #16]
 8001bbe:	6800      	ldr	r0, [r0, #0]
}
 8001bc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bc4:	f002 b8d6 	b.w	8003d74 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bc8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001bcc:	e7da      	b.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x78>
 8001bce:	bf00      	nop

08001bd0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bd4:	6806      	ldr	r6, [r0, #0]
{
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f001 fefe 	bl	80039dc <USB_GetMode>
 8001be0:	2801      	cmp	r0, #1
 8001be2:	f040 80b4 	bne.w	8001d4e <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	f001 fef4 	bl	80039d4 <USB_ReadInterrupts>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	f000 80ae 	beq.w	8001d4e <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	f001 feee 	bl	80039d4 <USB_ReadInterrupts>
 8001bf8:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bfa:	bf48      	it	mi
 8001bfc:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bfe:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c00:	bf44      	itt	mi
 8001c02:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001c06:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c08:	f001 fee4 	bl	80039d4 <USB_ReadInterrupts>
 8001c0c:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c0e:	bf48      	it	mi
 8001c10:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c12:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c14:	bf44      	itt	mi
 8001c16:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001c1a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c1c:	f001 feda 	bl	80039d4 <USB_ReadInterrupts>
 8001c20:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c22:	bf48      	it	mi
 8001c24:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c26:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c28:	bf44      	itt	mi
 8001c2a:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8001c2e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c30:	f001 fed0 	bl	80039d4 <USB_ReadInterrupts>
 8001c34:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c36:	bf48      	it	mi
 8001c38:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c3a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c3c:	bf44      	itt	mi
 8001c3e:	2202      	movmi	r2, #2
 8001c40:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c42:	f001 fec7 	bl	80039d4 <USB_ReadInterrupts>
 8001c46:	0082      	lsls	r2, r0, #2
 8001c48:	d510      	bpl.n	8001c6c <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c4a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001c4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c52:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001c56:	4620      	mov	r0, r4
 8001c58:	f003 fd5e 	bl	8005718 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	f001 fec0 	bl	80039e4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	f001 feb1 	bl	80039d4 <USB_ReadInterrupts>
 8001c72:	01c3      	lsls	r3, r0, #7
 8001c74:	d542      	bpl.n	8001cfc <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c76:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c78:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001c7c:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001c7e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001c82:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c84:	9b05      	ldr	r3, [sp, #20]
 8001c86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c8a:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c8c:	9b04      	ldr	r3, [sp, #16]
 8001c8e:	079f      	lsls	r7, r3, #30
 8001c90:	d50d      	bpl.n	8001cae <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c92:	9b04      	ldr	r3, [sp, #16]
 8001c94:	07d8      	lsls	r0, r3, #31
 8001c96:	d506      	bpl.n	8001ca6 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001c98:	69ab      	ldr	r3, [r5, #24]
 8001c9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001c9e:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f003 fd35 	bl	8005710 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001ca6:	9b05      	ldr	r3, [sp, #20]
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001cae:	9b04      	ldr	r3, [sp, #16]
 8001cb0:	0719      	lsls	r1, r3, #28
 8001cb2:	d519      	bpl.n	8001ce8 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001cb4:	9b05      	ldr	r3, [sp, #20]
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001cbc:	9b04      	ldr	r3, [sp, #16]
 8001cbe:	075a      	lsls	r2, r3, #29
 8001cc0:	d550      	bpl.n	8001d64 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001cc2:	69a1      	ldr	r1, [r4, #24]
 8001cc4:	2902      	cmp	r1, #2
 8001cc6:	d145      	bne.n	8001d54 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001cc8:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cca:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001ccc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cd4:	bf18      	it	ne
 8001cd6:	2101      	movne	r1, #1
 8001cd8:	f001 fe84 	bl	80039e4 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f003 fd20 	bl	8005722 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f003 fd14 	bl	8005710 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ce8:	9b04      	ldr	r3, [sp, #16]
 8001cea:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001cec:	bf42      	ittt	mi
 8001cee:	9b05      	ldrmi	r3, [sp, #20]
 8001cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8001cf4:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001cf6:	9b05      	ldr	r3, [sp, #20]
 8001cf8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f001 fe69 	bl	80039d4 <USB_ReadInterrupts>
 8001d02:	0707      	lsls	r7, r0, #28
 8001d04:	d505      	bpl.n	8001d12 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8001d06:	4620      	mov	r0, r4
 8001d08:	f003 fcfe 	bl	8005708 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	f001 fe5e 	bl	80039d4 <USB_ReadInterrupts>
 8001d18:	0185      	lsls	r5, r0, #6
 8001d1a:	d512      	bpl.n	8001d42 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d1c:	6820      	ldr	r0, [r4, #0]
 8001d1e:	f001 ffc0 	bl	8003ca2 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d22:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d26:	9001      	str	r0, [sp, #4]
 8001d28:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d2c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001d2e:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d32:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d34:	68a3      	ldr	r3, [r4, #8]
 8001d36:	459a      	cmp	sl, r3
 8001d38:	d323      	bcc.n	8001d82 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d40:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d42:	6820      	ldr	r0, [r4, #0]
 8001d44:	f001 fe46 	bl	80039d4 <USB_ReadInterrupts>
 8001d48:	06c3      	lsls	r3, r0, #27
 8001d4a:	f100 8220 	bmi.w	800218e <HAL_HCD_IRQHandler+0x5be>
}
 8001d4e:	b007      	add	sp, #28
 8001d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001d54:	68e3      	ldr	r3, [r4, #12]
 8001d56:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001d58:	bf04      	itt	eq
 8001d5a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001d5e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001d62:	e7bb      	b.n	8001cdc <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001d64:	4620      	mov	r0, r4
 8001d66:	f003 fce0 	bl	800572a <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d6a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d6e:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d74:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d78:	6993      	ldr	r3, [r2, #24]
 8001d7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	e7b2      	b.n	8001ce8 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d82:	9a01      	ldr	r2, [sp, #4]
 8001d84:	f00a 030f 	and.w	r3, sl, #15
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	07d8      	lsls	r0, r3, #31
 8001d8e:	f140 808a 	bpl.w	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d92:	f8d8 3000 	ldr.w	r3, [r8]
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001d9c:	fa5f f58a 	uxtb.w	r5, sl
 8001da0:	f000 8104 	beq.w	8001fac <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da4:	016a      	lsls	r2, r5, #5
 8001da6:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001daa:	18d6      	adds	r6, r2, r3
 8001dac:	68b1      	ldr	r1, [r6, #8]
 8001dae:	0749      	lsls	r1, r1, #29
 8001db0:	d513      	bpl.n	8001dda <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db2:	2104      	movs	r1, #4
 8001db4:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001db6:	68f1      	ldr	r1, [r6, #12]
 8001db8:	f041 0102 	orr.w	r1, r1, #2
 8001dbc:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dbe:	68b1      	ldr	r1, [r6, #8]
 8001dc0:	0589      	lsls	r1, r1, #22
 8001dc2:	d542      	bpl.n	8001e4a <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc4:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dce:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd0:	f001 ff6c 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd8:	e0c7      	b.n	8001f6a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dda:	68b1      	ldr	r1, [r6, #8]
 8001ddc:	0689      	lsls	r1, r1, #26
 8001dde:	d502      	bpl.n	8001de6 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001de0:	2120      	movs	r1, #32
 8001de2:	60b1      	str	r1, [r6, #8]
 8001de4:	e7eb      	b.n	8001dbe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001de6:	68b1      	ldr	r1, [r6, #8]
 8001de8:	0709      	lsls	r1, r1, #28
 8001dea:	d515      	bpl.n	8001e18 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dec:	68f1      	ldr	r1, [r6, #12]
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	f041 0102 	orr.w	r1, r1, #2
 8001df4:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001df6:	fb07 4105 	mla	r1, r7, r5, r4
 8001dfa:	f04f 0e05 	mov.w	lr, #5
 8001dfe:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e02:	2110      	movs	r1, #16
 8001e04:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e06:	2108      	movs	r1, #8
 8001e08:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	9202      	str	r2, [sp, #8]
 8001e0e:	f001 ff4d 	bl	8003cac <USB_HC_Halt>
 8001e12:	9a02      	ldr	r2, [sp, #8]
 8001e14:	9b03      	ldr	r3, [sp, #12]
 8001e16:	e7d2      	b.n	8001dbe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e18:	68b1      	ldr	r1, [r6, #8]
 8001e1a:	0549      	lsls	r1, r1, #21
 8001e1c:	d5cf      	bpl.n	8001dbe <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e1e:	68f1      	ldr	r1, [r6, #12]
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	f041 0102 	orr.w	r1, r1, #2
 8001e26:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e28:	4629      	mov	r1, r5
 8001e2a:	9202      	str	r2, [sp, #8]
 8001e2c:	f001 ff3e 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e30:	2110      	movs	r1, #16
 8001e32:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e34:	fb07 4105 	mla	r1, r7, r5, r4
 8001e38:	2008      	movs	r0, #8
 8001e3a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e42:	60b1      	str	r1, [r6, #8]
 8001e44:	9b03      	ldr	r3, [sp, #12]
 8001e46:	9a02      	ldr	r2, [sp, #8]
 8001e48:	e7b9      	b.n	8001dbe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e4a:	68b1      	ldr	r1, [r6, #8]
 8001e4c:	07c8      	lsls	r0, r1, #31
 8001e4e:	d53d      	bpl.n	8001ecc <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001e50:	6921      	ldr	r1, [r4, #16]
 8001e52:	b149      	cbz	r1, 8001e68 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e54:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e58:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e5a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e5e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e62:	1a09      	subs	r1, r1, r0
 8001e64:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e68:	fb07 4e05 	mla	lr, r7, r5, r4
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e72:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e76:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e78:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8001e7c:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001e80:	d116      	bne.n	8001eb0 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e82:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e84:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f001 ff0d 	bl	8003cac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e92:	2310      	movs	r3, #16
 8001e94:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e96:	fb07 4505 	mla	r5, r7, r5, r4
 8001e9a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001e9e:	f083 0301 	eor.w	r3, r3, #1
 8001ea2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ea6:	f10a 0a01 	add.w	sl, sl, #1
 8001eaa:	f108 0820 	add.w	r8, r8, #32
 8001eae:	e741      	b.n	8001d34 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001eb0:	2903      	cmp	r1, #3
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eb4:	58d1      	ldr	r1, [r2, r3]
 8001eb6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001eba:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ebc:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f003 fc2b 	bl	8005720 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001eca:	e7e4      	b.n	8001e96 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ecc:	68b1      	ldr	r1, [r6, #8]
 8001ece:	0789      	lsls	r1, r1, #30
 8001ed0:	d536      	bpl.n	8001f40 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ed2:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ed4:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ed8:	f021 0102 	bic.w	r1, r1, #2
 8001edc:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ede:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001ee2:	2901      	cmp	r1, #1
 8001ee4:	d10c      	bne.n	8001f00 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001ee6:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eea:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001eee:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ef2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f003 fc11 	bl	8005720 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001efe:	e7d2      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f00:	2905      	cmp	r1, #5
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f04:	2906      	cmp	r1, #6
 8001f06:	d001      	beq.n	8001f0c <HAL_HCD_IRQHandler+0x33c>
 8001f08:	2908      	cmp	r1, #8
 8001f0a:	d114      	bne.n	8001f36 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8001f0c:	fb07 4105 	mla	r1, r7, r5, r4
 8001f10:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001f12:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001f14:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001f16:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f18:	bf83      	ittte	hi
 8001f1a:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1c:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f20:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f24:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f28:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f2a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f2e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f32:	50d1      	str	r1, [r2, r3]
 8001f34:	e7d9      	b.n	8001eea <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f36:	2903      	cmp	r1, #3
 8001f38:	d1d7      	bne.n	8001eea <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f3a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001f3e:	e7f3      	b.n	8001f28 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f40:	68b1      	ldr	r1, [r6, #8]
 8001f42:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001f46:	d012      	beq.n	8001f6e <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f48:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f52:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8001f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f5a:	3201      	adds	r2, #1
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f5e:	2206      	movs	r2, #6
 8001f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f64:	f001 fea2 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	60b3      	str	r3, [r6, #8]
 8001f6c:	e79b      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f6e:	68b3      	ldr	r3, [r6, #8]
 8001f70:	06da      	lsls	r2, r3, #27
 8001f72:	d598      	bpl.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f74:	fb07 4205 	mla	r2, r7, r5, r4
 8001f78:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d10a      	bne.n	8001f96 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f80:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f82:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f001 fe8d 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f92:	2310      	movs	r3, #16
 8001f94:	e7e9      	b.n	8001f6a <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f96:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001f9a:	d1fa      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8001f9e:	6923      	ldr	r3, [r4, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f6      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8001faa:	e7ea      	b.n	8001f82 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fac:	0169      	lsls	r1, r5, #5
 8001fae:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001fb2:	188e      	adds	r6, r1, r2
 8001fb4:	68b3      	ldr	r3, [r6, #8]
 8001fb6:	f013 0e04 	ands.w	lr, r3, #4
 8001fba:	d006      	beq.n	8001fca <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc0:	68f3      	ldr	r3, [r6, #12]
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	60f3      	str	r3, [r6, #12]
 8001fc8:	e76d      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fca:	68b3      	ldr	r3, [r6, #8]
 8001fcc:	f013 0320 	ands.w	r3, r3, #32
 8001fd0:	d014      	beq.n	8001ffc <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001fd6:	fb07 4305 	mla	r3, r7, r5, r4
 8001fda:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	f47f af61 	bne.w	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fe4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001fe8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fec:	68f3      	ldr	r3, [r6, #12]
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f001 fe59 	bl	8003cac <USB_HC_Halt>
 8001ffa:	e754      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ffc:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8002000:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8002004:	d011      	beq.n	800202a <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8002006:	fb07 4205 	mla	r2, r7, r5, r4
 800200a:	2104      	movs	r1, #4
 800200c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8002010:	2101      	movs	r1, #1
 8002012:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002018:	68f3      	ldr	r3, [r6, #12]
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002020:	4629      	mov	r1, r5
 8002022:	f001 fe43 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002026:	2340      	movs	r3, #64	; 0x40
 8002028:	e79f      	b.n	8001f6a <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800202a:	68b3      	ldr	r3, [r6, #8]
 800202c:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8002030:	d005      	beq.n	800203e <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002032:	68f3      	ldr	r3, [r6, #12]
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203a:	4629      	mov	r1, r5
 800203c:	e6c8      	b.n	8001dd0 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800203e:	68b3      	ldr	r3, [r6, #8]
 8002040:	07db      	lsls	r3, r3, #31
 8002042:	d511      	bpl.n	8002068 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002044:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002046:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204a:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800204e:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002054:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002056:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002058:	f001 fe28 	bl	8003cac <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 800205c:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800205e:	2201      	movs	r2, #1
 8002060:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8002066:	e71e      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002068:	68b3      	ldr	r3, [r6, #8]
 800206a:	071b      	lsls	r3, r3, #28
 800206c:	d50e      	bpl.n	800208c <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800206e:	2308      	movs	r3, #8
 8002070:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002072:	68f3      	ldr	r3, [r6, #12]
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	4629      	mov	r1, r5
 800207c:	f001 fe16 	bl	8003cac <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002080:	fb07 4505 	mla	r5, r7, r5, r4
 8002084:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002086:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800208a:	e70c      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800208c:	68b3      	ldr	r3, [r6, #8]
 800208e:	06db      	lsls	r3, r3, #27
 8002090:	d515      	bpl.n	80020be <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002092:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8002096:	2203      	movs	r2, #3
 8002098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800209c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020a0:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80020a4:	b92a      	cbnz	r2, 80020b2 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80020a6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80020aa:	b912      	cbnz	r2, 80020b2 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b2:	68f3      	ldr	r3, [r6, #12]
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ba:	4629      	mov	r1, r5
 80020bc:	e767      	b.n	8001f8e <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020be:	68b3      	ldr	r3, [r6, #8]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	d50c      	bpl.n	80020de <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c4:	68f3      	ldr	r3, [r6, #12]
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020cc:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020ce:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d2:	f001 fdeb 	bl	8003cac <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020d6:	2306      	movs	r3, #6
 80020d8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80020dc:	e744      	b.n	8001f68 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020de:	68b3      	ldr	r3, [r6, #8]
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	d50f      	bpl.n	8002104 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e4:	68f3      	ldr	r3, [r6, #12]
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ec:	4629      	mov	r1, r5
 80020ee:	f001 fddd 	bl	8003cac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020f2:	2310      	movs	r3, #16
 80020f4:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fa:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020fc:	fb07 4505 	mla	r5, r7, r5, r4
 8002100:	2308      	movs	r3, #8
 8002102:	e7c0      	b.n	8002086 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002104:	68b3      	ldr	r3, [r6, #8]
 8002106:	0798      	lsls	r0, r3, #30
 8002108:	f57f aecd 	bpl.w	8001ea6 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800210c:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800210e:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002112:	f023 0302 	bic.w	r3, r3, #2
 8002116:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002118:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10e      	bne.n	800213e <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002120:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002124:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8002128:	3b02      	subs	r3, #2
 800212a:	2b01      	cmp	r3, #1
 800212c:	f63f aedd 	bhi.w	8001eea <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002130:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800213c:	e6d5      	b.n	8001eea <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800213e:	2b03      	cmp	r3, #3
 8002140:	d102      	bne.n	8002148 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002142:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8002146:	e6d0      	b.n	8001eea <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002148:	2b04      	cmp	r3, #4
 800214a:	d0fa      	beq.n	8002142 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800214c:	2b05      	cmp	r3, #5
 800214e:	d102      	bne.n	8002156 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002150:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8002154:	e6c9      	b.n	8001eea <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002156:	2b06      	cmp	r3, #6
 8002158:	d002      	beq.n	8002160 <HAL_HCD_IRQHandler+0x590>
 800215a:	2b08      	cmp	r3, #8
 800215c:	f47f aec5 	bne.w	8001eea <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8002160:	fb07 4005 	mla	r0, r7, r5, r4
 8002164:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002166:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002168:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800216a:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800216c:	bf84      	itt	hi
 800216e:	2304      	movhi	r3, #4
 8002170:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002174:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	bf88      	it	hi
 8002178:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800217c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002184:	bf98      	it	ls
 8002186:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800218a:	508b      	str	r3, [r1, r2]
 800218c:	e6ad      	b.n	8001eea <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800218e:	6826      	ldr	r6, [r4, #0]
 8002190:	69b3      	ldr	r3, [r6, #24]
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8002198:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800219a:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800219e:	2a02      	cmp	r2, #2
 80021a0:	d129      	bne.n	80021f6 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a2:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80021a6:	f1b8 0f00 	cmp.w	r8, #0
 80021aa:	d024      	beq.n	80021f6 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80021ac:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80021b0:	2728      	movs	r7, #40	; 0x28
 80021b2:	fb07 4705 	mla	r7, r7, r5, r4
 80021b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021b8:	b1e9      	cbz	r1, 80021f6 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80021ba:	4642      	mov	r2, r8
 80021bc:	4630      	mov	r0, r6
 80021be:	f001 fbfb 	bl	80039b8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	4443      	add	r3, r8
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80021c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ca:	4443      	add	r3, r8
 80021cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80021ce:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 80021d2:	016b      	lsls	r3, r5, #5
 80021d4:	199a      	adds	r2, r3, r6
 80021d6:	6911      	ldr	r1, [r2, #16]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_HCD_IRQHandler+0x634>)
 80021da:	400a      	ands	r2, r1
 80021dc:	b15a      	cbz	r2, 80021f6 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021de:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021e0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021e8:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	6993      	ldr	r3, [r2, #24]
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	e5a5      	b.n	8001d4e <HAL_HCD_IRQHandler+0x17e>
 8002202:	bf00      	nop
 8002204:	1ff80000 	.word	0x1ff80000

08002208 <HAL_HCD_Start>:
{
 8002208:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800220a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800220e:	2b01      	cmp	r3, #1
{
 8002210:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002212:	d00d      	beq.n	8002230 <HAL_HCD_Start+0x28>
 8002214:	2501      	movs	r5, #1
 8002216:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	f001 fb72 	bl	8003904 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002220:	4629      	mov	r1, r5
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	f001 fc18 	bl	8003a58 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002228:	2000      	movs	r0, #0
 800222a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800222e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002230:	2002      	movs	r0, #2
}
 8002232:	bd38      	pop	{r3, r4, r5, pc}

08002234 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002234:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002238:	2b01      	cmp	r3, #1
{
 800223a:	b510      	push	{r4, lr}
 800223c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800223e:	d009      	beq.n	8002254 <HAL_HCD_Stop+0x20>
 8002240:	2301      	movs	r3, #1
 8002242:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002246:	6800      	ldr	r0, [r0, #0]
 8002248:	f001 fe46 	bl	8003ed8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800224c:	2000      	movs	r0, #0
 800224e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002252:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002254:	2002      	movs	r0, #2
}
 8002256:	bd10      	pop	{r4, pc}

08002258 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002258:	6800      	ldr	r0, [r0, #0]
 800225a:	f001 bbdf 	b.w	8003a1c <USB_ResetPort>

0800225e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800225e:	2328      	movs	r3, #40	; 0x28
 8002260:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002264:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002268:	4770      	bx	lr

0800226a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800226a:	2328      	movs	r3, #40	; 0x28
 800226c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002270:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002272:	4770      	bx	lr

08002274 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002274:	6800      	ldr	r0, [r0, #0]
 8002276:	f001 bc8a 	b.w	8003b8e <USB_GetCurrentFrame>

0800227a <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800227a:	6800      	ldr	r0, [r0, #0]
 800227c:	f001 bc7c 	b.w	8003b78 <USB_GetHostSpeed>

08002280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002280:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002282:	4604      	mov	r4, r0
 8002284:	b908      	cbnz	r0, 800228a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800228e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002292:	b91b      	cbnz	r3, 800229c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002294:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002298:	f7ff f84e 	bl	8001338 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800229e:	2324      	movs	r3, #36	; 0x24
 80022a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ac:	f000 fd0e 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022b0:	6865      	ldr	r5, [r4, #4]
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_I2C_Init+0x138>)
 80022b4:	429d      	cmp	r5, r3
 80022b6:	d84d      	bhi.n	8002354 <HAL_I2C_Init+0xd4>
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_I2C_Init+0x13c>)
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d9e3      	bls.n	8002286 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022be:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80022c0:	493f      	ldr	r1, [pc, #252]	; (80023c0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80022c4:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d0:	6a13      	ldr	r3, [r2, #32]
 80022d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d6:	3101      	adds	r1, #1
 80022d8:	4319      	orrs	r1, r3
 80022da:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022dc:	69d1      	ldr	r1, [r2, #28]
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_I2C_Init+0x138>)
 80022e0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80022e4:	429d      	cmp	r5, r3
 80022e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80022ea:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80022ee:	d848      	bhi.n	8002382 <HAL_I2C_Init+0x102>
 80022f0:	006d      	lsls	r5, r5, #1
 80022f2:	fbb0 f0f5 	udiv	r0, r0, r5
 80022f6:	3001      	adds	r0, #1
 80022f8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	bf38      	it	cc
 8002300:	2304      	movcc	r3, #4
 8002302:	430b      	orrs	r3, r1
 8002304:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002306:	6811      	ldr	r1, [r2, #0]
 8002308:	6a20      	ldr	r0, [r4, #32]
 800230a:	69e3      	ldr	r3, [r4, #28]
 800230c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002310:	4303      	orrs	r3, r0
 8002312:	430b      	orrs	r3, r1
 8002314:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002316:	6891      	ldr	r1, [r2, #8]
 8002318:	68e0      	ldr	r0, [r4, #12]
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002320:	4303      	orrs	r3, r0
 8002322:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002326:	430b      	orrs	r3, r1
 8002328:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232a:	68d1      	ldr	r1, [r2, #12]
 800232c:	69a0      	ldr	r0, [r4, #24]
 800232e:	6963      	ldr	r3, [r4, #20]
 8002330:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002334:	4303      	orrs	r3, r0
 8002336:	430b      	orrs	r3, r1
 8002338:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002342:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002344:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002346:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002348:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8002352:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_I2C_Init+0x144>)
 8002356:	4298      	cmp	r0, r3
 8002358:	d995      	bls.n	8002286 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800235c:	4e18      	ldr	r6, [pc, #96]	; (80023c0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002360:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002368:	4333      	orrs	r3, r6
 800236a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236c:	6a13      	ldr	r3, [r2, #32]
 800236e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002372:	4371      	muls	r1, r6
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800237c:	fbb1 f1f6 	udiv	r1, r1, r6
 8002380:	e7a9      	b.n	80022d6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002382:	68a3      	ldr	r3, [r4, #8]
 8002384:	b953      	cbnz	r3, 800239c <HAL_I2C_Init+0x11c>
 8002386:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800238a:	fbb0 f0f3 	udiv	r0, r0, r3
 800238e:	1c43      	adds	r3, r0, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	b16b      	cbz	r3, 80023b2 <HAL_I2C_Init+0x132>
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	e7b2      	b.n	8002302 <HAL_I2C_Init+0x82>
 800239c:	2319      	movs	r3, #25
 800239e:	436b      	muls	r3, r5
 80023a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	b113      	cbz	r3, 80023b2 <HAL_I2C_Init+0x132>
 80023ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b0:	e7a7      	b.n	8002302 <HAL_I2C_Init+0x82>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e7a5      	b.n	8002302 <HAL_I2C_Init+0x82>
 80023b6:	bf00      	nop
 80023b8:	000186a0 	.word	0x000186a0
 80023bc:	001e847f 	.word	0x001e847f
 80023c0:	000f4240 	.word	0x000f4240
 80023c4:	003d08ff 	.word	0x003d08ff

080023c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023ca:	4604      	mov	r4, r0
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d041      	beq.n	8002454 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023d8:	b92b      	cbnz	r3, 80023e6 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023da:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 80023dc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023e0:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023e2:	f7fe ffe1 	bl	80013a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023e6:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023e8:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80023ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023ee:	69d3      	ldr	r3, [r2, #28]
 80023f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023f4:	f023 030f 	bic.w	r3, r3, #15
 80023f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023fa:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80023fc:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023fe:	428b      	cmp	r3, r1
 8002400:	d031      	beq.n	8002466 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002402:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002404:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002406:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8002408:	bf0c      	ite	eq
 800240a:	2510      	moveq	r5, #16
 800240c:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800240e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002410:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002412:	bf98      	it	ls
 8002414:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002416:	f000 fd2f 	bl	8002e78 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800241a:	6923      	ldr	r3, [r4, #16]
 800241c:	6961      	ldr	r1, [r4, #20]
 800241e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002422:	d11b      	bne.n	800245c <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	220a      	movs	r2, #10
 8002428:	b1b3      	cbz	r3, 8002458 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800242a:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800242c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002430:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002432:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002434:	fbb3 f3f1 	udiv	r3, r3, r1
 8002438:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800243a:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800243e:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002442:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002444:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002446:	1e99      	subs	r1, r3, #2
 8002448:	29fd      	cmp	r1, #253	; 0xfd
 800244a:	d90e      	bls.n	800246a <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800244c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002454:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002458:	00eb      	lsls	r3, r5, #3
 800245a:	e7e7      	b.n	800242c <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800245c:	230a      	movs	r3, #10
 800245e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002462:	4343      	muls	r3, r0
 8002464:	e7e5      	b.n	8002432 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8002466:	2200      	movs	r2, #0
 8002468:	e7ed      	b.n	8002446 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800246a:	4313      	orrs	r3, r2
 800246c:	6922      	ldr	r2, [r4, #16]
 800246e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002470:	6866      	ldr	r6, [r4, #4]
 8002472:	68e5      	ldr	r5, [r4, #12]
 8002474:	69a0      	ldr	r0, [r4, #24]
 8002476:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80024f4 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800247a:	4313      	orrs	r3, r2
 800247c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	69cf      	ldr	r7, [r1, #28]
 8002482:	ea46 0203 	orr.w	r2, r6, r3
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	432a      	orrs	r2, r5
 800248c:	4302      	orrs	r2, r0
 800248e:	ea07 070e 	and.w	r7, r7, lr
 8002492:	433a      	orrs	r2, r7
 8002494:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002496:	6a22      	ldr	r2, [r4, #32]
 8002498:	2a01      	cmp	r2, #1
 800249a:	d11d      	bne.n	80024d8 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_I2S_Init+0x120>)
 800249e:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024a0:	4f12      	ldr	r7, [pc, #72]	; (80024ec <HAL_I2S_Init+0x124>)
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <HAL_I2S_Init+0x128>)
 80024a4:	42b9      	cmp	r1, r7
 80024a6:	bf18      	it	ne
 80024a8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80024ac:	432b      	orrs	r3, r5
 80024ae:	69d1      	ldr	r1, [r2, #28]
 80024b0:	ea01 010e 	and.w	r1, r1, lr
 80024b4:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80024b6:	2102      	movs	r1, #2
 80024b8:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80024ba:	69d7      	ldr	r7, [r2, #28]
 80024bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024c0:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 80024c2:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 80024c6:	ea43 0307 	orr.w	r3, r3, r7
 80024ca:	bf0c      	ite	eq
 80024cc:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80024d0:	2100      	movne	r1, #0
 80024d2:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80024d4:	430b      	orrs	r3, r1
 80024d6:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024d8:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80024da:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80024de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80024e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024e4:	080024ff 	.word	0x080024ff
 80024e8:	080025fd 	.word	0x080025fd
 80024ec:	40003800 	.word	0x40003800
 80024f0:	40003400 	.word	0x40003400
 80024f4:	fffff040 	.word	0xfffff040

080024f8 <HAL_I2S_TxCpltCallback>:
 80024f8:	4770      	bx	lr

080024fa <HAL_I2S_RxCpltCallback>:
 80024fa:	4770      	bx	lr

080024fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80024fc:	4770      	bx	lr

080024fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002506:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800250a:	2a04      	cmp	r2, #4
{
 800250c:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800250e:	d136      	bne.n	800257e <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002510:	9a01      	ldr	r2, [sp, #4]
 8002512:	07d1      	lsls	r1, r2, #31
 8002514:	d517      	bpl.n	8002546 <I2S_IRQHandler+0x48>
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	0652      	lsls	r2, r2, #25
 800251a:	d514      	bpl.n	8002546 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800251c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800251e:	68d9      	ldr	r1, [r3, #12]
 8002520:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8002524:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002526:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002528:	3a01      	subs	r2, #1
 800252a:	b292      	uxth	r2, r2
 800252c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800252e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002530:	b292      	uxth	r2, r2
 8002532:	b942      	cbnz	r2, 8002546 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800253a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800253c:	2301      	movs	r3, #1
 800253e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002542:	f7ff ffda 	bl	80024fa <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002546:	9b01      	ldr	r3, [sp, #4]
 8002548:	0659      	lsls	r1, r3, #25
 800254a:	d518      	bpl.n	800257e <I2S_IRQHandler+0x80>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	0692      	lsls	r2, r2, #26
 8002552:	d514      	bpl.n	800257e <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800255a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800255c:	2200      	movs	r2, #0
 800255e:	9202      	str	r2, [sp, #8]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	9202      	str	r2, [sp, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800256a:	2301      	movs	r3, #1
 800256c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ffbf 	bl	80024fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800257e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002582:	2b03      	cmp	r3, #3
 8002584:	d136      	bne.n	80025f4 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	079b      	lsls	r3, r3, #30
 800258a:	d519      	bpl.n	80025c0 <I2S_IRQHandler+0xc2>
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	6853      	ldr	r3, [r2, #4]
 8002590:	0618      	lsls	r0, r3, #24
 8002592:	d515      	bpl.n	80025c0 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002596:	f833 1b02 	ldrh.w	r1, [r3], #2
 800259a:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 800259c:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800259e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80025a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b94b      	cbnz	r3, 80025c0 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ac:	6853      	ldr	r3, [r2, #4]
 80025ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025b2:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff ff9c 	bl	80024f8 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025c0:	9b01      	ldr	r3, [sp, #4]
 80025c2:	0719      	lsls	r1, r3, #28
 80025c4:	d516      	bpl.n	80025f4 <I2S_IRQHandler+0xf6>
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	0692      	lsls	r2, r2, #26
 80025cc:	d512      	bpl.n	80025f4 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025d6:	2200      	movs	r2, #0
 80025d8:	9203      	str	r2, [sp, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff ff84 	bl	80024fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	b004      	add	sp, #16
 80025f6:	bd10      	pop	{r4, pc}

080025f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80025fc:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025fe:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002600:	498b      	ldr	r1, [pc, #556]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002602:	6893      	ldr	r3, [r2, #8]
{
 8002604:	b086      	sub	sp, #24
 8002606:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002608:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800260a:	4b8a      	ldr	r3, [pc, #552]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800260c:	428a      	cmp	r2, r1
 800260e:	bf18      	it	ne
 8002610:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002618:	6851      	ldr	r1, [r2, #4]
 800261a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002620:	6841      	ldr	r1, [r0, #4]
 8002622:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8002626:	f040 8090 	bne.w	800274a <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800262a:	9b00      	ldr	r3, [sp, #0]
 800262c:	0799      	lsls	r1, r3, #30
 800262e:	d51a      	bpl.n	8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8002630:	9b02      	ldr	r3, [sp, #8]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	d517      	bpl.n	8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002636:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002638:	1c99      	adds	r1, r3, #2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	6241      	str	r1, [r0, #36]	; 0x24
 800263e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002640:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002642:	3b01      	subs	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002648:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	b95b      	cbnz	r3, 8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800264e:	6853      	ldr	r3, [r2, #4]
 8002650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002654:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002656:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002658:	b29b      	uxth	r3, r3
 800265a:	b923      	cbnz	r3, 8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800265c:	2301      	movs	r3, #1
 800265e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002662:	f7ff ffc9 	bl	80025f8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	07d8      	lsls	r0, r3, #31
 800266a:	d522      	bpl.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	0659      	lsls	r1, r3, #25
 8002670:	d51f      	bpl.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	496e      	ldr	r1, [pc, #440]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8002678:	1c93      	adds	r3, r2, #2
 800267a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800267c:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800267e:	4288      	cmp	r0, r1
 8002680:	bf18      	it	ne
 8002682:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002686:	68d9      	ldr	r1, [r3, #12]
 8002688:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 800268a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800268c:	3a01      	subs	r2, #1
 800268e:	b292      	uxth	r2, r2
 8002690:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002692:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002694:	b292      	uxth	r2, r2
 8002696:	b962      	cbnz	r2, 80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800269e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	b92b      	cbnz	r3, 80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ffa3 	bl	80025f8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026b2:	9b01      	ldr	r3, [sp, #4]
 80026b4:	065a      	lsls	r2, r3, #25
 80026b6:	d522      	bpl.n	80026fe <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80026b8:	9b03      	ldr	r3, [sp, #12]
 80026ba:	069b      	lsls	r3, r3, #26
 80026bc:	d51f      	bpl.n	80026fe <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	495b      	ldr	r1, [pc, #364]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80026c2:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	bf18      	it	ne
 80026c8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80026cc:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ce:	6851      	ldr	r1, [r2, #4]
 80026d0:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80026d4:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026dc:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026de:	2200      	movs	r2, #0
 80026e0:	9204      	str	r2, [sp, #16]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	9204      	str	r2, [sp, #16]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	9304      	str	r3, [sp, #16]
 80026ea:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80026fa:	f7ff feff 	bl	80024fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026fe:	9b00      	ldr	r3, [sp, #0]
 8002700:	0718      	lsls	r0, r3, #28
 8002702:	d520      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8002704:	9b02      	ldr	r3, [sp, #8]
 8002706:	0699      	lsls	r1, r3, #26
 8002708:	d51d      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800270a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800270c:	4948      	ldr	r1, [pc, #288]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002714:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002716:	4a47      	ldr	r2, [pc, #284]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8002718:	428b      	cmp	r3, r1
 800271a:	bf18      	it	ne
 800271c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002720:	6851      	ldr	r1, [r2, #4]
 8002722:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002726:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002728:	2200      	movs	r2, #0
 800272a:	9205      	str	r2, [sp, #20]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	9305      	str	r3, [sp, #20]
 8002730:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8002732:	2301      	movs	r3, #1
 8002734:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002738:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fedb 	bl	80024fc <HAL_I2S_ErrorCallback>
}
 8002746:	b006      	add	sp, #24
 8002748:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800274a:	9a01      	ldr	r2, [sp, #4]
 800274c:	0792      	lsls	r2, r2, #30
 800274e:	d51a      	bpl.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8002750:	9a03      	ldr	r2, [sp, #12]
 8002752:	0611      	lsls	r1, r2, #24
 8002754:	d517      	bpl.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002756:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002758:	1c91      	adds	r1, r2, #2
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	6241      	str	r1, [r0, #36]	; 0x24
 800275e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002760:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002762:	3a01      	subs	r2, #1
 8002764:	b292      	uxth	r2, r2
 8002766:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002768:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800276a:	b292      	uxth	r2, r2
 800276c:	b95a      	cbnz	r2, 8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002774:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002776:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002778:	b29b      	uxth	r3, r3
 800277a:	b923      	cbnz	r3, 8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002782:	f7ff ff39 	bl	80025f8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002786:	9b00      	ldr	r3, [sp, #0]
 8002788:	07da      	lsls	r2, r3, #31
 800278a:	d51c      	bpl.n	80027c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800278c:	9b02      	ldr	r3, [sp, #8]
 800278e:	065b      	lsls	r3, r3, #25
 8002790:	d519      	bpl.n	80027c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002794:	1c9a      	adds	r2, r3, #2
 8002796:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	68d1      	ldr	r1, [r2, #12]
 800279c:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800279e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80027a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b963      	cbnz	r3, 80027c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027ac:	6853      	ldr	r3, [r2, #4]
 80027ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027b2:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80027b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b92b      	cbnz	r3, 80027c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff ff19 	bl	80025f8 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027c6:	9b00      	ldr	r3, [sp, #0]
 80027c8:	0658      	lsls	r0, r3, #25
 80027ca:	d51b      	bpl.n	8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80027cc:	9b02      	ldr	r3, [sp, #8]
 80027ce:	0699      	lsls	r1, r3, #26
 80027d0:	d518      	bpl.n	8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d2:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d6:	6853      	ldr	r3, [r2, #4]
 80027d8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027dc:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80027e0:	428a      	cmp	r2, r1
 80027e2:	bf18      	it	ne
 80027e4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80027e8:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027f0:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002800:	f7ff fe7c 	bl	80024fc <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	071a      	lsls	r2, r3, #28
 8002808:	d59d      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 800280a:	9b03      	ldr	r3, [sp, #12]
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	d59a      	bpl.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002810:	6822      	ldr	r2, [r4, #0]
 8002812:	4907      	ldr	r1, [pc, #28]	; (8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8002816:	428a      	cmp	r2, r1
 8002818:	bf18      	it	ne
 800281a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002824:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002826:	6853      	ldr	r3, [r2, #4]
 8002828:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800282c:	6053      	str	r3, [r2, #4]
 800282e:	e780      	b.n	8002732 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8002830:	40003800 	.word	0x40003800
 8002834:	40003400 	.word	0x40003400

08002838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800283c:	4604      	mov	r4, r0
 800283e:	b918      	cbnz	r0, 8002848 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002842:	b002      	add	sp, #8
 8002844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002848:	6803      	ldr	r3, [r0, #0]
 800284a:	07dd      	lsls	r5, r3, #31
 800284c:	d410      	bmi.n	8002870 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	0798      	lsls	r0, r3, #30
 8002852:	d458      	bmi.n	8002906 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	071a      	lsls	r2, r3, #28
 8002858:	f100 809a 	bmi.w	8002990 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	075b      	lsls	r3, r3, #29
 8002860:	f100 80b8 	bmi.w	80029d4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002864:	69a2      	ldr	r2, [r4, #24]
 8002866:	2a00      	cmp	r2, #0
 8002868:	f040 8119 	bne.w	8002a9e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800286c:	2000      	movs	r0, #0
 800286e:	e7e8      	b.n	8002842 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002870:	4ba6      	ldr	r3, [pc, #664]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f002 020c 	and.w	r2, r2, #12
 8002878:	2a04      	cmp	r2, #4
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002882:	2a08      	cmp	r2, #8
 8002884:	d10a      	bne.n	800289c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0259      	lsls	r1, r3, #9
 800288a:	d507      	bpl.n	800289c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b9f      	ldr	r3, [pc, #636]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	039a      	lsls	r2, r3, #14
 8002892:	d5dc      	bpl.n	800284e <HAL_RCC_OscConfig+0x16>
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1d9      	bne.n	800284e <HAL_RCC_OscConfig+0x16>
 800289a:	e7d1      	b.n	8002840 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	4d9b      	ldr	r5, [pc, #620]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a4:	d111      	bne.n	80028ca <HAL_RCC_OscConfig+0x92>
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028ae:	f7fe ff3f 	bl	8001730 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4d96      	ldr	r5, [pc, #600]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80028b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	039b      	lsls	r3, r3, #14
 80028ba:	d4c8      	bmi.n	800284e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe ff38 	bl	8001730 <HAL_GetTick>
 80028c0:	1b80      	subs	r0, r0, r6
 80028c2:	2864      	cmp	r0, #100	; 0x64
 80028c4:	d9f7      	bls.n	80028b6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80028c6:	2003      	movs	r0, #3
 80028c8:	e7bb      	b.n	8002842 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ce:	d104      	bne.n	80028da <HAL_RCC_OscConfig+0xa2>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d6:	602b      	str	r3, [r5, #0]
 80028d8:	e7e5      	b.n	80028a6 <HAL_RCC_OscConfig+0x6e>
 80028da:	682a      	ldr	r2, [r5, #0]
 80028dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028e0:	602a      	str	r2, [r5, #0]
 80028e2:	682a      	ldr	r2, [r5, #0]
 80028e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1df      	bne.n	80028ae <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80028ee:	f7fe ff1f 	bl	8001730 <HAL_GetTick>
 80028f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	039f      	lsls	r7, r3, #14
 80028f8:	d5a9      	bpl.n	800284e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fa:	f7fe ff19 	bl	8001730 <HAL_GetTick>
 80028fe:	1b80      	subs	r0, r0, r6
 8002900:	2864      	cmp	r0, #100	; 0x64
 8002902:	d9f7      	bls.n	80028f4 <HAL_RCC_OscConfig+0xbc>
 8002904:	e7df      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	f012 0f0c 	tst.w	r2, #12
 800290e:	d007      	beq.n	8002920 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2a08      	cmp	r2, #8
 8002918:	d111      	bne.n	800293e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	025e      	lsls	r6, r3, #9
 800291e:	d40e      	bmi.n	800293e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002920:	4b7a      	ldr	r3, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	0795      	lsls	r5, r2, #30
 8002926:	d502      	bpl.n	800292e <HAL_RCC_OscConfig+0xf6>
 8002928:	68e2      	ldr	r2, [r4, #12]
 800292a:	2a01      	cmp	r2, #1
 800292c:	d188      	bne.n	8002840 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	6921      	ldr	r1, [r4, #16]
 8002932:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002936:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800293a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293c:	e78a      	b.n	8002854 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800293e:	68e2      	ldr	r2, [r4, #12]
 8002940:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <HAL_RCC_OscConfig+0x2d8>)
 8002942:	b1b2      	cbz	r2, 8002972 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002948:	f7fe fef2 	bl	8001730 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4d6f      	ldr	r5, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800294e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	0798      	lsls	r0, r3, #30
 8002954:	d507      	bpl.n	8002966 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	682b      	ldr	r3, [r5, #0]
 8002958:	6922      	ldr	r2, [r4, #16]
 800295a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800295e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	e776      	b.n	8002854 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe fee3 	bl	8001730 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	2802      	cmp	r0, #2
 800296e:	d9ef      	bls.n	8002950 <HAL_RCC_OscConfig+0x118>
 8002970:	e7a9      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002972:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002974:	f7fe fedc 	bl	8001730 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002978:	4d64      	ldr	r5, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800297a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	0799      	lsls	r1, r3, #30
 8002980:	f57f af68 	bpl.w	8002854 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fed4 	bl	8001730 <HAL_GetTick>
 8002988:	1b80      	subs	r0, r0, r6
 800298a:	2802      	cmp	r0, #2
 800298c:	d9f6      	bls.n	800297c <HAL_RCC_OscConfig+0x144>
 800298e:	e79a      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002990:	6962      	ldr	r2, [r4, #20]
 8002992:	4b60      	ldr	r3, [pc, #384]	; (8002b14 <HAL_RCC_OscConfig+0x2dc>)
 8002994:	b17a      	cbz	r2, 80029b6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800299a:	f7fe fec9 	bl	8001730 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4d5b      	ldr	r5, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80029a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80029a4:	079f      	lsls	r7, r3, #30
 80029a6:	f53f af59 	bmi.w	800285c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fec1 	bl	8001730 <HAL_GetTick>
 80029ae:	1b80      	subs	r0, r0, r6
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d9f6      	bls.n	80029a2 <HAL_RCC_OscConfig+0x16a>
 80029b4:	e787      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80029b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80029b8:	f7fe feba 	bl	8001730 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4d53      	ldr	r5, [pc, #332]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80029be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80029c2:	0798      	lsls	r0, r3, #30
 80029c4:	f57f af4a 	bpl.w	800285c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe feb2 	bl	8001730 <HAL_GetTick>
 80029cc:	1b80      	subs	r0, r0, r6
 80029ce:	2802      	cmp	r0, #2
 80029d0:	d9f6      	bls.n	80029c0 <HAL_RCC_OscConfig+0x188>
 80029d2:	e778      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 80029d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80029dc:	d128      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	9201      	str	r2, [sp, #4]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029f2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4d48      	ldr	r5, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x2e0>)
 80029f6:	682b      	ldr	r3, [r5, #0]
 80029f8:	05d9      	lsls	r1, r3, #23
 80029fa:	d51b      	bpl.n	8002a34 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	68a3      	ldr	r3, [r4, #8]
 80029fe:	4d43      	ldr	r5, [pc, #268]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d127      	bne.n	8002a54 <HAL_RCC_OscConfig+0x21c>
 8002a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fe90 	bl	8001730 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4d3e      	ldr	r5, [pc, #248]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002a12:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a1a:	079b      	lsls	r3, r3, #30
 8002a1c:	d539      	bpl.n	8002a92 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002a1e:	2e00      	cmp	r6, #0
 8002a20:	f43f af20 	beq.w	8002864 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4a39      	ldr	r2, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002a26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	e719      	b.n	8002864 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	2600      	movs	r6, #0
 8002a32:	e7df      	b.n	80029f4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fe78 	bl	8001730 <HAL_GetTick>
 8002a40:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	05da      	lsls	r2, r3, #23
 8002a46:	d4d9      	bmi.n	80029fc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fe72 	bl	8001730 <HAL_GetTick>
 8002a4c:	1bc0      	subs	r0, r0, r7
 8002a4e:	2802      	cmp	r0, #2
 8002a50:	d9f7      	bls.n	8002a42 <HAL_RCC_OscConfig+0x20a>
 8002a52:	e738      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d104      	bne.n	8002a62 <HAL_RCC_OscConfig+0x22a>
 8002a58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	672b      	str	r3, [r5, #112]	; 0x70
 8002a60:	e7d0      	b.n	8002a04 <HAL_RCC_OscConfig+0x1cc>
 8002a62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	672a      	str	r2, [r5, #112]	; 0x70
 8002a6a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002a6c:	f022 0204 	bic.w	r2, r2, #4
 8002a70:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ca      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002a76:	f7fe fe5b 	bl	8001730 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a7e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002a82:	0798      	lsls	r0, r3, #30
 8002a84:	d5cb      	bpl.n	8002a1e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fe53 	bl	8001730 <HAL_GetTick>
 8002a8a:	1bc0      	subs	r0, r0, r7
 8002a8c:	4540      	cmp	r0, r8
 8002a8e:	d9f7      	bls.n	8002a80 <HAL_RCC_OscConfig+0x248>
 8002a90:	e719      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fe4d 	bl	8001730 <HAL_GetTick>
 8002a96:	1bc0      	subs	r0, r0, r7
 8002a98:	4540      	cmp	r0, r8
 8002a9a:	d9bd      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1e0>
 8002a9c:	e713      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4d1b      	ldr	r5, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
 8002aa0:	68ab      	ldr	r3, [r5, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	f43f aeca 	beq.w	8002840 <HAL_RCC_OscConfig+0x8>
 8002aac:	4e1b      	ldr	r6, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x2e4>)
 8002aae:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	d134      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fe3b 	bl	8001730 <HAL_GetTick>
 8002aba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	0199      	lsls	r1, r3, #6
 8002ac0:	d41e      	bmi.n	8002b00 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac2:	6a22      	ldr	r2, [r4, #32]
 8002ac4:	69e3      	ldr	r3, [r4, #28]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002aca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ad0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ad4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad8:	0852      	lsrs	r2, r2, #1
 8002ada:	3a01      	subs	r2, #1
 8002adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ae0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fe23 	bl	8001730 <HAL_GetTick>
 8002aea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	019a      	lsls	r2, r3, #6
 8002af0:	f53f aebc 	bmi.w	800286c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fe1c 	bl	8001730 <HAL_GetTick>
 8002af8:	1b40      	subs	r0, r0, r5
 8002afa:	2802      	cmp	r0, #2
 8002afc:	d9f6      	bls.n	8002aec <HAL_RCC_OscConfig+0x2b4>
 8002afe:	e6e2      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fe16 	bl	8001730 <HAL_GetTick>
 8002b04:	1bc0      	subs	r0, r0, r7
 8002b06:	2802      	cmp	r0, #2
 8002b08:	d9d8      	bls.n	8002abc <HAL_RCC_OscConfig+0x284>
 8002b0a:	e6dc      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	42470000 	.word	0x42470000
 8002b14:	42470e80 	.word	0x42470e80
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe06 	bl	8001730 <HAL_GetTick>
 8002b24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	f57f ae9f 	bpl.w	800286c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fdff 	bl	8001730 <HAL_GetTick>
 8002b32:	1b00      	subs	r0, r0, r4
 8002b34:	2802      	cmp	r0, #2
 8002b36:	d9f6      	bls.n	8002b26 <HAL_RCC_OscConfig+0x2ee>
 8002b38:	e6c5      	b.n	80028c6 <HAL_RCC_OscConfig+0x8e>
 8002b3a:	bf00      	nop

08002b3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4913      	ldr	r1, [pc, #76]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002b3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b40:	688b      	ldr	r3, [r1, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x16>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4e:	4810      	ldr	r0, [pc, #64]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b50:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002b52:	4810      	ldr	r0, [pc, #64]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x58>)
 8002b54:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b56:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b58:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b60:	bf14      	ite	ne
 8002b62:	480c      	ldrne	r0, [pc, #48]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b64:	480a      	ldreq	r0, [pc, #40]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002b6a:	bf18      	it	ne
 8002b6c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b72:	fba1 0100 	umull	r0, r1, r1, r0
 8002b76:	f7fe f823 	bl	8000bc0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x50>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002b86:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b8a:	bd08      	pop	{r3, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <HAL_RCC_ClockConfig>:
{
 8002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	b910      	cbnz	r0, 8002ba8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_RCC_ClockConfig+0x124>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	f002 020f 	and.w	r2, r2, #15
 8002bb0:	428a      	cmp	r2, r1
 8002bb2:	d328      	bcc.n	8002c06 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	078f      	lsls	r7, r1, #30
 8002bb8:	d42d      	bmi.n	8002c16 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	07c8      	lsls	r0, r1, #31
 8002bbc:	d440      	bmi.n	8002c40 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x124>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f002 020f 	and.w	r2, r2, #15
 8002bc6:	4295      	cmp	r5, r2
 8002bc8:	d366      	bcc.n	8002c98 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bca:	6822      	ldr	r2, [r4, #0]
 8002bcc:	0751      	lsls	r1, r2, #29
 8002bce:	d46c      	bmi.n	8002caa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	0713      	lsls	r3, r2, #28
 8002bd2:	d507      	bpl.n	8002be4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
 8002bd6:	6921      	ldr	r1, [r4, #16]
 8002bd8:	6893      	ldr	r3, [r2, #8]
 8002bda:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002be2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be4:	f7ff ffaa 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002be8:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
 8002bea:	4a36      	ldr	r2, [pc, #216]	; (8002cc4 <HAL_RCC_ClockConfig+0x12c>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	40d8      	lsrs	r0, r3
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x130>)
 8002bf8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fcb6 	bl	800156c <HAL_InitTick>
  return HAL_OK;
 8002c00:	2000      	movs	r0, #0
 8002c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	b2ca      	uxtb	r2, r1
 8002c08:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4299      	cmp	r1, r3
 8002c12:	d1c6      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xa>
 8002c14:	e7ce      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x1c>
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	bf1e      	ittt	ne
 8002c1e:	689a      	ldrne	r2, [r3, #8]
 8002c20:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002c24:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	bf42      	ittt	mi
 8002c2a:	689a      	ldrmi	r2, [r3, #8]
 8002c2c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002c30:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68a0      	ldr	r0, [r4, #8]
 8002c36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	e7bc      	b.n	8002bba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	6862      	ldr	r2, [r4, #4]
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
 8002c44:	2a01      	cmp	r2, #1
 8002c46:	d11d      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	d0a8      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c50:	4e1b      	ldr	r6, [pc, #108]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
 8002c52:	68b3      	ldr	r3, [r6, #8]
 8002c54:	f023 0303 	bic.w	r3, r3, #3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fd68 	bl	8001730 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002c64:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	68b3      	ldr	r3, [r6, #8]
 8002c68:	6862      	ldr	r2, [r4, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c72:	d0a4      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fd5c 	bl	8001730 <HAL_GetTick>
 8002c78:	1bc0      	subs	r0, r0, r7
 8002c7a:	4540      	cmp	r0, r8
 8002c7c:	d9f3      	bls.n	8002c66 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002c7e:	2003      	movs	r0, #3
}
 8002c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c84:	1e91      	subs	r1, r2, #2
 8002c86:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	d802      	bhi.n	8002c92 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c90:	e7dd      	b.n	8002c4e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	f013 0f02 	tst.w	r3, #2
 8002c96:	e7da      	b.n	8002c4e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c98:	b2ea      	uxtb	r2, r5
 8002c9a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	429d      	cmp	r5, r3
 8002ca4:	f47f af7d 	bne.w	8002ba2 <HAL_RCC_ClockConfig+0xa>
 8002ca8:	e78f      	b.n	8002bca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002caa:	4905      	ldr	r1, [pc, #20]	; (8002cc0 <HAL_RCC_ClockConfig+0x128>)
 8002cac:	68e0      	ldr	r0, [r4, #12]
 8002cae:	688b      	ldr	r3, [r1, #8]
 8002cb0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002cb4:	4303      	orrs	r3, r0
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e78a      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x38>
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08014f70 	.word	0x08014f70
 8002cc8:	20000000 	.word	0x20000000

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002cda:	6810      	ldr	r0, [r2, #0]
}
 8002cdc:	40d8      	lsrs	r0, r3
 8002cde:	4770      	bx	lr
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08014f80 	.word	0x08014f80
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002cfa:	6810      	ldr	r0, [r2, #0]
}
 8002cfc:	40d8      	lsrs	r0, r3
 8002cfe:	4770      	bx	lr
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08014f80 	.word	0x08014f80
 8002d08:	20000000 	.word	0x20000000

08002d0c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_GetClockConfig+0x34>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d20:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002d28:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002d32:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_GetClockConfig+0x38>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	600b      	str	r3, [r1, #0]
 8002d3e:	4770      	bx	lr
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40023c00 	.word	0x40023c00

08002d48 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d48:	6803      	ldr	r3, [r0, #0]
 8002d4a:	f013 0f05 	tst.w	r3, #5
{
 8002d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d50:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d52:	d105      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d54:	6828      	ldr	r0, [r5, #0]
 8002d56:	f010 0002 	ands.w	r0, r0, #2
 8002d5a:	d128      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002d5c:	b003      	add	sp, #12
 8002d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002d60:	4c41      	ldr	r4, [pc, #260]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d62:	4e42      	ldr	r6, [pc, #264]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d68:	f7fe fce2 	bl	8001730 <HAL_GetTick>
 8002d6c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6e:	6833      	ldr	r3, [r6, #0]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	d415      	bmi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d74:	68ab      	ldr	r3, [r5, #8]
 8002d76:	686a      	ldr	r2, [r5, #4]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d7e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002d82:	2301      	movs	r3, #1
 8002d84:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d86:	f7fe fcd3 	bl	8001730 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d8a:	4c38      	ldr	r4, [pc, #224]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002d8c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	0118      	lsls	r0, r3, #4
 8002d92:	d4df      	bmi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d94:	f7fe fccc 	bl	8001730 <HAL_GetTick>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9f7      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002d9e:	e004      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002da0:	f7fe fcc6 	bl	8001730 <HAL_GetTick>
 8002da4:	1bc0      	subs	r0, r0, r7
 8002da6:	2802      	cmp	r0, #2
 8002da8:	d9e1      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e7d6      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002db4:	4c2e      	ldr	r4, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002dd0:	f7fe fcae 	bl	8001730 <HAL_GetTick>
 8002dd4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	05d9      	lsls	r1, r3, #23
 8002dda:	d51b      	bpl.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ddc:	4c23      	ldr	r4, [pc, #140]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002dde:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	68eb      	ldr	r3, [r5, #12]
 8002de8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002dec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002df2:	d134      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002df4:	6891      	ldr	r1, [r2, #8]
 8002df6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002dfa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002dfe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002e02:	4301      	orrs	r1, r0
 8002e04:	6091      	str	r1, [r2, #8]
 8002e06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8002e10:	2000      	movs	r0, #0
 8002e12:	e7a3      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe fc8c 	bl	8001730 <HAL_GetTick>
 8002e18:	1b80      	subs	r0, r0, r6
 8002e1a:	2802      	cmp	r0, #2
 8002e1c:	d9db      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002e1e:	e7c4      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e20:	68ea      	ldr	r2, [r5, #12]
 8002e22:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d0dd      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e36:	2100      	movs	r1, #0
 8002e38:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002e3a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e3e:	07da      	lsls	r2, r3, #31
 8002e40:	d5d1      	bpl.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002e42:	f7fe fc75 	bl	8001730 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002e4e:	079b      	lsls	r3, r3, #30
 8002e50:	d4c9      	bmi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fc6d 	bl	8001730 <HAL_GetTick>
 8002e56:	1b80      	subs	r0, r0, r6
 8002e58:	42b8      	cmp	r0, r7
 8002e5a:	d9f7      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002e5c:	e7a5      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5e:	6891      	ldr	r1, [r2, #8]
 8002e60:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002e64:	e7ce      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002e66:	bf00      	nop
 8002e68:	42470068 	.word	0x42470068
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40007000 	.word	0x40007000
 8002e74:	42470e40 	.word	0x42470e40

08002e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002e78:	2801      	cmp	r0, #1
 8002e7a:	d120      	bne.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002e80:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002e84:	d004      	beq.n	8002e90 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002e86:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e88:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002e8a:	bf18      	it	ne
 8002e8c:	2000      	movne	r0, #0
 8002e8e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e90:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e92:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e94:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e96:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e98:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e9c:	bf4c      	ite	mi
 8002e9e:	4b0b      	ldrmi	r3, [pc, #44]	; (8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ea0:	4b0b      	ldrpl	r3, [pc, #44]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ea2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ea6:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002eaa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002eae:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002eb2:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002eb4:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002eb8:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8002ebc:	4770      	bx	lr
  uint32_t frequency = 0U;
 8002ebe:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00bb8000 	.word	0x00bb8000
 8002ecc:	007a1200 	.word	0x007a1200
 8002ed0:	00f42400 	.word	0x00f42400

08002ed4 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	460e      	mov	r6, r1
 8002eda:	4615      	mov	r5, r2
 8002edc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ede:	6821      	ldr	r1, [r4, #0]
 8002ee0:	688a      	ldr	r2, [r1, #8]
 8002ee2:	ea36 0302 	bics.w	r3, r6, r2
 8002ee6:	d001      	beq.n	8002eec <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002ee8:	2000      	movs	r0, #0
}
 8002eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002eec:	1c6b      	adds	r3, r5, #1
 8002eee:	d0f7      	beq.n	8002ee0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fc1e 	bl	8001730 <HAL_GetTick>
 8002ef4:	1bc0      	subs	r0, r0, r7
 8002ef6:	4285      	cmp	r5, r0
 8002ef8:	d8f1      	bhi.n	8002ede <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f02:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f04:	6862      	ldr	r2, [r4, #4]
 8002f06:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f0a:	d10a      	bne.n	8002f22 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8002f0c:	68a2      	ldr	r2, [r4, #8]
 8002f0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f12:	d002      	beq.n	8002f1a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f18:	d103      	bne.n	8002f22 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f20:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f28:	d107      	bne.n	8002f3a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f38:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002f40:	2300      	movs	r3, #0
 8002f42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002f46:	2003      	movs	r0, #3
 8002f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f4e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <SPI_EndRxTxTransaction+0x54>)
 8002f52:	4e14      	ldr	r6, [pc, #80]	; (8002fa4 <SPI_EndRxTxTransaction+0x58>)
 8002f54:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f58:	fbb5 f6f6 	udiv	r6, r5, r6
 8002f5c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002f60:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f62:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002f66:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f68:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f6a:	d10d      	bne.n	8002f88 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	f7ff ffb0 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002f74:	b910      	cbnz	r0, 8002f7c <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8002f76:	2000      	movs	r0, #0
}
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f84:	2003      	movs	r0, #3
 8002f86:	e7f7      	b.n	8002f78 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f3      	beq.n	8002f76 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	d4f5      	bmi.n	8002f88 <SPI_EndRxTxTransaction+0x3c>
 8002f9c:	e7eb      	b.n	8002f76 <SPI_EndRxTxTransaction+0x2a>
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	016e3600 	.word	0x016e3600

08002fa8 <HAL_SPI_Init>:
{
 8002fa8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002faa:	4604      	mov	r4, r0
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d036      	beq.n	800301e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002fb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fbc:	b91b      	cbnz	r3, 8002fc6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002fbe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002fc2:	f7fe fa3b 	bl	800143c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002fc6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fc8:	68a0      	ldr	r0, [r4, #8]
 8002fca:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002fd2:	680b      	ldr	r3, [r1, #0]
 8002fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002fda:	6863      	ldr	r3, [r4, #4]
 8002fdc:	4303      	orrs	r3, r0
 8002fde:	68e0      	ldr	r0, [r4, #12]
 8002fe0:	4303      	orrs	r3, r0
 8002fe2:	6920      	ldr	r0, [r4, #16]
 8002fe4:	4303      	orrs	r3, r0
 8002fe6:	6960      	ldr	r0, [r4, #20]
 8002fe8:	4303      	orrs	r3, r0
 8002fea:	69e0      	ldr	r0, [r4, #28]
 8002fec:	4303      	orrs	r3, r0
 8002fee:	6a20      	ldr	r0, [r4, #32]
 8002ff0:	4303      	orrs	r3, r0
 8002ff2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ff4:	4303      	orrs	r3, r0
 8002ff6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002ffa:	4303      	orrs	r3, r0
 8002ffc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ffe:	0c12      	lsrs	r2, r2, #16
 8003000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003002:	f002 0204 	and.w	r2, r2, #4
 8003006:	431a      	orrs	r2, r3
 8003008:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800300a:	69cb      	ldr	r3, [r1, #28]
 800300c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003010:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003012:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003014:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003016:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003018:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800301c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
}
 8003020:	bd10      	pop	{r4, pc}

08003022 <HAL_SPI_Transmit>:
{
 8003022:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003026:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003028:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800302c:	2b01      	cmp	r3, #1
{
 800302e:	4604      	mov	r4, r0
 8003030:	460d      	mov	r5, r1
 8003032:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8003034:	f000 809b 	beq.w	800316e <HAL_SPI_Transmit+0x14c>
 8003038:	2301      	movs	r3, #1
 800303a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800303e:	f7fe fb77 	bl	8001730 <HAL_GetTick>
 8003042:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003044:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003048:	b2c0      	uxtb	r0, r0
 800304a:	2801      	cmp	r0, #1
 800304c:	f040 808d 	bne.w	800316a <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8003050:	2d00      	cmp	r5, #0
 8003052:	d05d      	beq.n	8003110 <HAL_SPI_Transmit+0xee>
 8003054:	f1b8 0f00 	cmp.w	r8, #0
 8003058:	d05a      	beq.n	8003110 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800305a:	2303      	movs	r3, #3
 800305c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003060:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003062:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003064:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003066:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003068:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800306c:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800306e:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003070:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003072:	6420      	str	r0, [r4, #64]	; 0x40
 8003074:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003076:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800307c:	bf08      	it	eq
 800307e:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8003080:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8003084:	bf04      	itt	eq
 8003086:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800308a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308c:	6803      	ldr	r3, [r0, #0]
 800308e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003090:	bf5e      	ittt	pl
 8003092:	6803      	ldrpl	r3, [r0, #0]
 8003094:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003098:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800309a:	68e3      	ldr	r3, [r4, #12]
 800309c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a0:	6863      	ldr	r3, [r4, #4]
 80030a2:	d13e      	bne.n	8003122 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a4:	b113      	cbz	r3, 80030ac <HAL_SPI_Transmit+0x8a>
 80030a6:	f1b8 0f01 	cmp.w	r8, #1
 80030aa:	d107      	bne.n	80030bc <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	f835 3b02 	ldrh.w	r3, [r5], #2
 80030b0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80030b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80030bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	b9a3      	cbnz	r3, 80030ec <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c2:	463a      	mov	r2, r7
 80030c4:	4631      	mov	r1, r6
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff ff40 	bl	8002f4c <SPI_EndRxTxTransaction>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d149      	bne.n	8003164 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d0:	68a3      	ldr	r3, [r4, #8]
 80030d2:	b933      	cbnz	r3, 80030e2 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80030e4:	3000      	adds	r0, #0
 80030e6:	bf18      	it	ne
 80030e8:	2001      	movne	r0, #1
 80030ea:	e011      	b.n	8003110 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	6893      	ldr	r3, [r2, #8]
 80030f0:	0798      	lsls	r0, r3, #30
 80030f2:	d505      	bpl.n	8003100 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030f6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80030fa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	6323      	str	r3, [r4, #48]	; 0x30
 80030fe:	e7d9      	b.n	80030b4 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003100:	f7fe fb16 	bl	8001730 <HAL_GetTick>
 8003104:	1bc0      	subs	r0, r0, r7
 8003106:	42b0      	cmp	r0, r6
 8003108:	d3d8      	bcc.n	80030bc <HAL_SPI_Transmit+0x9a>
 800310a:	1c71      	adds	r1, r6, #1
 800310c:	d0d6      	beq.n	80030bc <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800310e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003110:	2301      	movs	r3, #1
 8003112:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003116:	2300      	movs	r3, #0
 8003118:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800311c:	b002      	add	sp, #8
 800311e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003122:	b113      	cbz	r3, 800312a <HAL_SPI_Transmit+0x108>
 8003124:	f1b8 0f01 	cmp.w	r8, #1
 8003128:	d108      	bne.n	800313c <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312a:	782b      	ldrb	r3, [r5, #0]
 800312c:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800312e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003130:	3301      	adds	r3, #1
 8003132:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003134:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003136:	3b01      	subs	r3, #1
 8003138:	b29b      	uxth	r3, r3
 800313a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800313c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0be      	beq.n	80030c2 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	0792      	lsls	r2, r2, #30
 800314a:	d503      	bpl.n	8003154 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800314c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	731a      	strb	r2, [r3, #12]
 8003152:	e7ec      	b.n	800312e <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003154:	f7fe faec 	bl	8001730 <HAL_GetTick>
 8003158:	1bc0      	subs	r0, r0, r7
 800315a:	4286      	cmp	r6, r0
 800315c:	d8ee      	bhi.n	800313c <HAL_SPI_Transmit+0x11a>
 800315e:	1c73      	adds	r3, r6, #1
 8003160:	d0ec      	beq.n	800313c <HAL_SPI_Transmit+0x11a>
 8003162:	e7d4      	b.n	800310e <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003164:	2320      	movs	r3, #32
 8003166:	6563      	str	r3, [r4, #84]	; 0x54
 8003168:	e7b2      	b.n	80030d0 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 800316a:	2002      	movs	r0, #2
 800316c:	e7d0      	b.n	8003110 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800316e:	2002      	movs	r0, #2
 8003170:	e7d4      	b.n	800311c <HAL_SPI_Transmit+0xfa>

08003172 <HAL_SPI_TransmitReceive>:
{
 8003172:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003176:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003178:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800317c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800317e:	2b01      	cmp	r3, #1
{
 8003180:	4604      	mov	r4, r0
 8003182:	460d      	mov	r5, r1
 8003184:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003186:	f000 80e2 	beq.w	800334e <HAL_SPI_TransmitReceive+0x1dc>
 800318a:	2301      	movs	r3, #1
 800318c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003190:	f7fe face 	bl	8001730 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003194:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8003198:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800319a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800319c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800319e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031a0:	d00a      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x46>
 80031a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80031a6:	f040 80d0 	bne.w	800334a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031aa:	68a0      	ldr	r0, [r4, #8]
 80031ac:	2800      	cmp	r0, #0
 80031ae:	f040 80cc 	bne.w	800334a <HAL_SPI_TransmitReceive+0x1d8>
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	f040 80c9 	bne.w	800334a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	f000 80c4 	beq.w	8003346 <HAL_SPI_TransmitReceive+0x1d4>
 80031be:	f1b9 0f00 	cmp.w	r9, #0
 80031c2:	f000 80c0 	beq.w	8003346 <HAL_SPI_TransmitReceive+0x1d4>
 80031c6:	2e00      	cmp	r6, #0
 80031c8:	f000 80bd 	beq.w	8003346 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031cc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031d6:	bf1c      	itt	ne
 80031d8:	2305      	movne	r3, #5
 80031da:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031de:	2300      	movs	r3, #0
 80031e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80031e2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031e4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80031e8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80031ea:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ec:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80031ee:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80031f2:	bf58      	it	pl
 80031f4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031f6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80031f8:	bf58      	it	pl
 80031fa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80031fe:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003200:	bf58      	it	pl
 8003202:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003204:	68e2      	ldr	r2, [r4, #12]
 8003206:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800320a:	d158      	bne.n	80032be <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320c:	b109      	cbz	r1, 8003212 <HAL_SPI_TransmitReceive+0xa0>
 800320e:	2e01      	cmp	r6, #1
 8003210:	d107      	bne.n	8003222 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003212:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003216:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800321c:	3b01      	subs	r3, #1
 800321e:	b29b      	uxth	r3, r3
 8003220:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003222:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003224:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003226:	b29b      	uxth	r3, r3
 8003228:	b9ab      	cbnz	r3, 8003256 <HAL_SPI_TransmitReceive+0xe4>
 800322a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	b993      	cbnz	r3, 8003256 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003230:	4642      	mov	r2, r8
 8003232:	4639      	mov	r1, r7
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fe89 	bl	8002f4c <SPI_EndRxTxTransaction>
 800323a:	2800      	cmp	r0, #0
 800323c:	f040 8081 	bne.w	8003342 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003240:	68a3      	ldr	r3, [r4, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d132      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	9001      	str	r0, [sp, #4]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	9201      	str	r2, [sp, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	9b01      	ldr	r3, [sp, #4]
 8003254:	e02a      	b.n	80032ac <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	6893      	ldr	r3, [r2, #8]
 800325a:	0799      	lsls	r1, r3, #30
 800325c:	d50d      	bpl.n	800327a <HAL_SPI_TransmitReceive+0x108>
 800325e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	b153      	cbz	r3, 800327a <HAL_SPI_TransmitReceive+0x108>
 8003264:	b14d      	cbz	r5, 800327a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003268:	f833 1b02 	ldrh.w	r1, [r3], #2
 800326c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800326e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003270:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003278:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327a:	6893      	ldr	r3, [r2, #8]
 800327c:	07db      	lsls	r3, r3, #31
 800327e:	d50c      	bpl.n	800329a <HAL_SPI_TransmitReceive+0x128>
 8003280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	b14b      	cbz	r3, 800329a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800328e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003292:	3b01      	subs	r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003298:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800329a:	f7fe fa49 	bl	8001730 <HAL_GetTick>
 800329e:	eba0 0008 	sub.w	r0, r0, r8
 80032a2:	4287      	cmp	r7, r0
 80032a4:	d8be      	bhi.n	8003224 <HAL_SPI_TransmitReceive+0xb2>
 80032a6:	1c7e      	adds	r6, r7, #1
 80032a8:	d0bc      	beq.n	8003224 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80032aa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80032ac:	2301      	movs	r3, #1
 80032ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032b2:	2300      	movs	r3, #0
 80032b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032b8:	b003      	add	sp, #12
 80032ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	b109      	cbz	r1, 80032c4 <HAL_SPI_TransmitReceive+0x152>
 80032c0:	2e01      	cmp	r6, #1
 80032c2:	d108      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c4:	782a      	ldrb	r2, [r5, #0]
 80032c6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032ca:	3301      	adds	r3, #1
 80032cc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80032ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80032d6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b91b      	cbnz	r3, 80032e6 <HAL_SPI_TransmitReceive+0x174>
 80032de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0a4      	beq.n	8003230 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e6:	6822      	ldr	r2, [r4, #0]
 80032e8:	6893      	ldr	r3, [r2, #8]
 80032ea:	0798      	lsls	r0, r3, #30
 80032ec:	d50e      	bpl.n	800330c <HAL_SPI_TransmitReceive+0x19a>
 80032ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b15b      	cbz	r3, 800330c <HAL_SPI_TransmitReceive+0x19a>
 80032f4:	b155      	cbz	r5, 800330c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80032fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032fe:	3301      	adds	r3, #1
 8003300:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003302:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003304:	3b01      	subs	r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800330a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	6893      	ldr	r3, [r2, #8]
 8003310:	07d9      	lsls	r1, r3, #31
 8003312:	d50d      	bpl.n	8003330 <HAL_SPI_TransmitReceive+0x1be>
 8003314:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	b153      	cbz	r3, 8003330 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800331a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003322:	3301      	adds	r3, #1
 8003324:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003326:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003328:	3b01      	subs	r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800332e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003330:	f7fe f9fe 	bl	8001730 <HAL_GetTick>
 8003334:	eba0 0008 	sub.w	r0, r0, r8
 8003338:	4287      	cmp	r7, r0
 800333a:	d8cd      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x166>
 800333c:	1c7b      	adds	r3, r7, #1
 800333e:	d0cb      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x166>
 8003340:	e7b3      	b.n	80032aa <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003342:	2320      	movs	r3, #32
 8003344:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003346:	2001      	movs	r0, #1
 8003348:	e7b0      	b.n	80032ac <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800334a:	2002      	movs	r0, #2
 800334c:	e7ae      	b.n	80032ac <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800334e:	2002      	movs	r0, #2
 8003350:	e7b2      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x146>

08003352 <HAL_TIM_Base_MspInit>:
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003354:	6803      	ldr	r3, [r0, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8003366:	bf1e      	ittt	ne
 8003368:	681a      	ldrne	r2, [r3, #0]
 800336a:	f042 0201 	orrne.w	r2, r2, #1
 800336e:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003370:	2000      	movs	r0, #0
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_OC_DelayElapsedCallback>:
 8003374:	4770      	bx	lr

08003376 <HAL_TIM_IC_CaptureCallback>:
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_TriggerCallback>:
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	0791      	lsls	r1, r2, #30
{
 8003382:	b510      	push	{r4, lr}
 8003384:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003386:	d50e      	bpl.n	80033a6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	0792      	lsls	r2, r2, #30
 800338c:	d50b      	bpl.n	80033a6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800338e:	f06f 0202 	mvn.w	r2, #2
 8003392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003396:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003398:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339c:	d077      	beq.n	800348e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	f7ff ffea 	bl	8003376 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	2300      	movs	r3, #0
 80033a4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	0750      	lsls	r0, r2, #29
 80033ac:	d510      	bpl.n	80033d0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	0751      	lsls	r1, r2, #29
 80033b2:	d50d      	bpl.n	80033d0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b4:	f06f 0204 	mvn.w	r2, #4
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ba:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033bc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033be:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c6:	d068      	beq.n	800349a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80033c8:	f7ff ffd5 	bl	8003376 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033cc:	2300      	movs	r3, #0
 80033ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	0712      	lsls	r2, r2, #28
 80033d6:	d50f      	bpl.n	80033f8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	0710      	lsls	r0, r2, #28
 80033dc:	d50c      	bpl.n	80033f8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033de:	f06f 0208 	mvn.w	r2, #8
 80033e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e8:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ea:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ee:	d05a      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80033f0:	f7ff ffc1 	bl	8003376 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f4:	2300      	movs	r3, #0
 80033f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	06d2      	lsls	r2, r2, #27
 80033fe:	d510      	bpl.n	8003422 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	06d0      	lsls	r0, r2, #27
 8003404:	d50d      	bpl.n	8003422 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003406:	f06f 0210 	mvn.w	r2, #16
 800340a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800340c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003414:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003418:	d04b      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	f7ff ffac 	bl	8003376 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	2300      	movs	r3, #0
 8003420:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	07d1      	lsls	r1, r2, #31
 8003428:	d508      	bpl.n	800343c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	07d2      	lsls	r2, r2, #31
 800342e:	d505      	bpl.n	800343c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	f06f 0201 	mvn.w	r2, #1
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003436:	4620      	mov	r0, r4
 8003438:	f7fd ff34 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	0610      	lsls	r0, r2, #24
 8003442:	d508      	bpl.n	8003456 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	0611      	lsls	r1, r2, #24
 8003448:	d505      	bpl.n	8003456 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800344a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003450:	4620      	mov	r0, r4
 8003452:	f000 f8b6 	bl	80035c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	0652      	lsls	r2, r2, #25
 800345c:	d508      	bpl.n	8003470 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	0650      	lsls	r0, r2, #25
 8003462:	d505      	bpl.n	8003470 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff ff85 	bl	800337a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	0691      	lsls	r1, r2, #26
 8003476:	d522      	bpl.n	80034be <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	0692      	lsls	r2, r2, #26
 800347c:	d51f      	bpl.n	80034be <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800347e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003482:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003484:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800348a:	f000 b899 	b.w	80035c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	f7ff ff71 	bl	8003374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003492:	4620      	mov	r0, r4
 8003494:	f7ff ff70 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
 8003498:	e783      	b.n	80033a2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	f7ff ff6b 	bl	8003374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff ff6a 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
 80034a4:	e792      	b.n	80033cc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	f7ff ff65 	bl	8003374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff64 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
 80034b0:	e7a0      	b.n	80033f4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	f7ff ff5f 	bl	8003374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff ff5e 	bl	8003378 <HAL_TIM_PWM_PulseFinishedCallback>
 80034bc:	e7af      	b.n	800341e <HAL_TIM_IRQHandler+0xa2>
 80034be:	bd10      	pop	{r4, pc}

080034c0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	4a30      	ldr	r2, [pc, #192]	; (8003584 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80034c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d012      	beq.n	80034ee <TIM_Base_SetConfig+0x2e>
 80034c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0x2e>
 80034ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80034d2:	4290      	cmp	r0, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x2e>
 80034d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034da:	4290      	cmp	r0, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x2e>
 80034de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e2:	4290      	cmp	r0, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x2e>
 80034e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80034ea:	4290      	cmp	r0, r2
 80034ec:	d119      	bne.n	8003522 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80034ee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034f4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	4a23      	ldr	r2, [pc, #140]	; (8003584 <TIM_Base_SetConfig+0xc4>)
 80034f8:	4290      	cmp	r0, r2
 80034fa:	d029      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 80034fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003500:	d026      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003502:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003506:	4290      	cmp	r0, r2
 8003508:	d022      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 800350a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800350e:	4290      	cmp	r0, r2
 8003510:	d01e      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003516:	4290      	cmp	r0, r2
 8003518:	d01a      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 800351a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800351e:	4290      	cmp	r0, r2
 8003520:	d016      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <TIM_Base_SetConfig+0xc8>)
 8003524:	4290      	cmp	r0, r2
 8003526:	d013      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800352c:	4290      	cmp	r0, r2
 800352e:	d00f      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003534:	4290      	cmp	r0, r2
 8003536:	d00b      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003538:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800353c:	4290      	cmp	r0, r2
 800353e:	d007      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003544:	4290      	cmp	r0, r2
 8003546:	d003      	beq.n	8003550 <TIM_Base_SetConfig+0x90>
 8003548:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800354c:	4290      	cmp	r0, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003550:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003556:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	694a      	ldr	r2, [r1, #20]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003560:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003562:	688b      	ldr	r3, [r1, #8]
 8003564:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003566:	680b      	ldr	r3, [r1, #0]
 8003568:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <TIM_Base_SetConfig+0xc4>)
 800356c:	4298      	cmp	r0, r3
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0xb8>
 8003570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003574:	4298      	cmp	r0, r3
 8003576:	d101      	bne.n	800357c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	690b      	ldr	r3, [r1, #16]
 800357a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357c:	2301      	movs	r3, #1
 800357e:	6143      	str	r3, [r0, #20]
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40014000 	.word	0x40014000

0800358c <HAL_TIM_Base_Init>:
{
 800358c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800358e:	4604      	mov	r4, r0
 8003590:	b1a0      	cbz	r0, 80035bc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003596:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800359a:	b91b      	cbnz	r3, 80035a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800359c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035a0:	f7ff fed7 	bl	8003352 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	1d21      	adds	r1, r4, #4
 80035ae:	f7ff ff87 	bl	80034c0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
}
 80035be:	bd10      	pop	{r4, pc}

080035c0 <HAL_TIMEx_CommutCallback>:
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	4770      	bx	lr

080035c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c8:	6806      	ldr	r6, [r0, #0]
 80035ca:	68c2      	ldr	r2, [r0, #12]
 80035cc:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ce:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d4:	4313      	orrs	r3, r2
 80035d6:	6133      	str	r3, [r6, #16]
{
 80035d8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035da:	6883      	ldr	r3, [r0, #8]
 80035dc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80035de:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035e0:	4303      	orrs	r3, r0
 80035e2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80035e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80035ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f4:	6973      	ldr	r3, [r6, #20]
 80035f6:	69a2      	ldr	r2, [r4, #24]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003602:	6173      	str	r3, [r6, #20]
 8003604:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003606:	d17c      	bne.n	8003702 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003608:	429e      	cmp	r6, r3
 800360a:	d003      	beq.n	8003614 <UART_SetConfig+0x50>
 800360c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003610:	429e      	cmp	r6, r3
 8003612:	d144      	bne.n	800369e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003614:	f7ff fb6a 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003618:	2519      	movs	r5, #25
 800361a:	fb05 f300 	mul.w	r3, r5, r0
 800361e:	6860      	ldr	r0, [r4, #4]
 8003620:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003624:	0040      	lsls	r0, r0, #1
 8003626:	fbb3 f3f0 	udiv	r3, r3, r0
 800362a:	fbb3 f3f9 	udiv	r3, r3, r9
 800362e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003632:	f7ff fb5b 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003636:	6863      	ldr	r3, [r4, #4]
 8003638:	4368      	muls	r0, r5
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fbb0 f7f3 	udiv	r7, r0, r3
 8003640:	f7ff fb54 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003644:	6863      	ldr	r3, [r4, #4]
 8003646:	4368      	muls	r0, r5
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003652:	fb09 7313 	mls	r3, r9, r3, r7
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	fbb3 f3f9 	udiv	r3, r3, r9
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003664:	f7ff fb42 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003668:	6862      	ldr	r2, [r4, #4]
 800366a:	4368      	muls	r0, r5
 800366c:	0052      	lsls	r2, r2, #1
 800366e:	fbb0 faf2 	udiv	sl, r0, r2
 8003672:	f7ff fb3b 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	4368      	muls	r0, r5
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003680:	fbb3 f3f9 	udiv	r3, r3, r9
 8003684:	fb09 a313 	mls	r3, r9, r3, sl
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003696:	443b      	add	r3, r7
 8003698:	60b3      	str	r3, [r6, #8]
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800369e:	f7ff fb15 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80036a2:	2519      	movs	r5, #25
 80036a4:	fb05 f300 	mul.w	r3, r5, r0
 80036a8:	6860      	ldr	r0, [r4, #4]
 80036aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80036ae:	0040      	lsls	r0, r0, #1
 80036b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80036b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80036b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036bc:	f7ff fb06 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	4368      	muls	r0, r5
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80036ca:	f7ff faff 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80036ce:	6863      	ldr	r3, [r4, #4]
 80036d0:	4368      	muls	r0, r5
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80036dc:	fb09 7313 	mls	r3, r9, r3, r7
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	3332      	adds	r3, #50	; 0x32
 80036e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80036ee:	f7ff faed 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80036f2:	6862      	ldr	r2, [r4, #4]
 80036f4:	4368      	muls	r0, r5
 80036f6:	0052      	lsls	r2, r2, #1
 80036f8:	fbb0 faf2 	udiv	sl, r0, r2
 80036fc:	f7ff fae6 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003700:	e7b9      	b.n	8003676 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003702:	429e      	cmp	r6, r3
 8003704:	d002      	beq.n	800370c <UART_SetConfig+0x148>
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <UART_SetConfig+0x230>)
 8003708:	429e      	cmp	r6, r3
 800370a:	d140      	bne.n	800378e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800370c:	f7ff faee 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003710:	6867      	ldr	r7, [r4, #4]
 8003712:	2519      	movs	r5, #25
 8003714:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003718:	fb05 f300 	mul.w	r3, r5, r0
 800371c:	00bf      	lsls	r7, r7, #2
 800371e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003722:	fbb3 f3f9 	udiv	r3, r3, r9
 8003726:	011f      	lsls	r7, r3, #4
 8003728:	f7ff fae0 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	4368      	muls	r0, r5
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	fbb0 f8f3 	udiv	r8, r0, r3
 8003736:	f7ff fad9 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	4368      	muls	r0, r5
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb0 f3f3 	udiv	r3, r0, r3
 8003744:	fbb3 f3f9 	udiv	r3, r3, r9
 8003748:	fb09 8313 	mls	r3, r9, r3, r8
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	fbb3 f3f9 	udiv	r3, r3, r9
 8003754:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003758:	f7ff fac8 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	4368      	muls	r0, r5
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	fbb0 faf2 	udiv	sl, r0, r2
 8003766:	f7ff fac1 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800376a:	6863      	ldr	r3, [r4, #4]
 800376c:	4368      	muls	r0, r5
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fbb0 f3f3 	udiv	r3, r0, r3
 8003774:	fbb3 f3f9 	udiv	r3, r3, r9
 8003778:	fb09 a313 	mls	r3, r9, r3, sl
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	; 0x32
 8003780:	fbb3 f3f9 	udiv	r3, r3, r9
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	ea43 0308 	orr.w	r3, r3, r8
 800378c:	e783      	b.n	8003696 <UART_SetConfig+0xd2>
 800378e:	f7ff fa9d 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003792:	6867      	ldr	r7, [r4, #4]
 8003794:	2519      	movs	r5, #25
 8003796:	f04f 0964 	mov.w	r9, #100	; 0x64
 800379a:	fb05 f300 	mul.w	r3, r5, r0
 800379e:	00bf      	lsls	r7, r7, #2
 80037a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80037a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80037a8:	011f      	lsls	r7, r3, #4
 80037aa:	f7ff fa8f 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	4368      	muls	r0, r5
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb0 f8f3 	udiv	r8, r0, r3
 80037b8:	f7ff fa88 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	4368      	muls	r0, r5
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80037ca:	fb09 8313 	mls	r3, r9, r3, r8
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80037d6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80037da:	f7ff fa77 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80037de:	6862      	ldr	r2, [r4, #4]
 80037e0:	4368      	muls	r0, r5
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	fbb0 faf2 	udiv	sl, r0, r2
 80037e8:	f7ff fa70 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80037ec:	e7bd      	b.n	800376a <UART_SetConfig+0x1a6>
 80037ee:	bf00      	nop
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40011400 	.word	0x40011400

080037f8 <HAL_UART_Init>:
{
 80037f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037fa:	4604      	mov	r4, r0
 80037fc:	b340      	cbz	r0, 8003850 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80037fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003802:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003806:	b91b      	cbnz	r3, 8003810 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003808:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800380c:	f7fd fe4a 	bl	80014a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003810:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003812:	2324      	movs	r3, #36	; 0x24
 8003814:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003818:	68d3      	ldr	r3, [r2, #12]
 800381a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003820:	4620      	mov	r0, r4
 8003822:	f7ff fecf 	bl	80035c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003836:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003842:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003846:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800384e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
}
 8003852:	bd10      	pop	{r4, pc}

08003854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003856:	3b01      	subs	r3, #1
 8003858:	d101      	bne.n	800385e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800385a:	2003      	movs	r0, #3
 800385c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800385e:	6902      	ldr	r2, [r0, #16]
 8003860:	2a00      	cmp	r2, #0
 8003862:	daf8      	bge.n	8003856 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003864:	6903      	ldr	r3, [r0, #16]
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <USB_CoreReset+0x2c>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800386e:	3a01      	subs	r2, #1
 8003870:	d0f3      	beq.n	800385a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003872:	6903      	ldr	r3, [r0, #16]
 8003874:	f013 0301 	ands.w	r3, r3, #1
 8003878:	d1f9      	bne.n	800386e <USB_CoreReset+0x1a>

  return HAL_OK;
 800387a:	4618      	mov	r0, r3
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	00030d41 	.word	0x00030d41

08003884 <USB_CoreInit>:
{
 8003884:	b084      	sub	sp, #16
 8003886:	b538      	push	{r3, r4, r5, lr}
 8003888:	ad05      	add	r5, sp, #20
 800388a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800388e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003890:	2b01      	cmp	r3, #1
{
 8003892:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003894:	d125      	bne.n	80038e2 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003896:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800389e:	68c3      	ldr	r3, [r0, #12]
 80038a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038aa:	68c3      	ldr	r3, [r0, #12]
 80038ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038b0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80038b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038b4:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038b6:	bf02      	ittt	eq
 80038b8:	68c3      	ldreq	r3, [r0, #12]
 80038ba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80038be:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80038c0:	f7ff ffc8 	bl	8003854 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80038c4:	9b08      	ldr	r3, [sp, #32]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038ca:	68a3      	ldr	r3, [r4, #8]
 80038cc:	f043 0306 	orr.w	r3, r3, #6
 80038d0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038d2:	68a3      	ldr	r3, [r4, #8]
 80038d4:	f043 0320 	orr.w	r3, r3, #32
 80038d8:	60a3      	str	r3, [r4, #8]
}
 80038da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038de:	b004      	add	sp, #16
 80038e0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038e2:	68c3      	ldr	r3, [r0, #12]
 80038e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80038ea:	f7ff ffb3 	bl	8003854 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80038ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038f0:	b923      	cbnz	r3, 80038fc <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80038fa:	e7e3      	b.n	80038c4 <USB_CoreInit+0x40>
 80038fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003902:	e7f9      	b.n	80038f8 <USB_CoreInit+0x74>

08003904 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003904:	6883      	ldr	r3, [r0, #8]
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6083      	str	r3, [r0, #8]
}
 800390c:	2000      	movs	r0, #0
 800390e:	4770      	bx	lr

08003910 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003910:	6883      	ldr	r3, [r0, #8]
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	6083      	str	r3, [r0, #8]
}
 8003918:	2000      	movs	r0, #0
 800391a:	4770      	bx	lr

0800391c <USB_SetCurrentMode>:
{
 800391c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800391e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003920:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003922:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003926:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003928:	d108      	bne.n	800393c <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800392a:	68c3      	ldr	r3, [r0, #12]
 800392c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003930:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003932:	2032      	movs	r0, #50	; 0x32
 8003934:	f7fd ff02 	bl	800173c <HAL_Delay>
  return HAL_OK;
 8003938:	2000      	movs	r0, #0
 800393a:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800393c:	b919      	cbnz	r1, 8003946 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800393e:	68c3      	ldr	r3, [r0, #12]
 8003940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003944:	e7f4      	b.n	8003930 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003946:	2001      	movs	r0, #1
}
 8003948:	bd08      	pop	{r3, pc}
	...

0800394c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800394c:	0189      	lsls	r1, r1, #6
 800394e:	f041 0120 	orr.w	r1, r1, #32
 8003952:	4a06      	ldr	r2, [pc, #24]	; (800396c <USB_FlushTxFifo+0x20>)
 8003954:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003956:	3a01      	subs	r2, #1
 8003958:	d005      	beq.n	8003966 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800395a:	6903      	ldr	r3, [r0, #16]
 800395c:	f013 0320 	ands.w	r3, r3, #32
 8003960:	d1f9      	bne.n	8003956 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003962:	4618      	mov	r0, r3
 8003964:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003966:	2003      	movs	r0, #3
}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	00030d41 	.word	0x00030d41

08003970 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003970:	2310      	movs	r3, #16
 8003972:	4a06      	ldr	r2, [pc, #24]	; (800398c <USB_FlushRxFifo+0x1c>)
 8003974:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003976:	3a01      	subs	r2, #1
 8003978:	d005      	beq.n	8003986 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800397a:	6903      	ldr	r3, [r0, #16]
 800397c:	f013 0310 	ands.w	r3, r3, #16
 8003980:	d1f9      	bne.n	8003976 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003982:	4618      	mov	r0, r3
 8003984:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003986:	2003      	movs	r0, #3
}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	00030d41 	.word	0x00030d41

08003990 <USB_WritePacket>:
{
 8003990:	b510      	push	{r4, lr}
 8003992:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003996:	b94c      	cbnz	r4, 80039ac <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003998:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800399a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80039a6:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 80039a8:	4299      	cmp	r1, r3
 80039aa:	d101      	bne.n	80039b0 <USB_WritePacket+0x20>
}
 80039ac:	2000      	movs	r0, #0
 80039ae:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80039b0:	f851 2b04 	ldr.w	r2, [r1], #4
 80039b4:	6002      	str	r2, [r0, #0]
 80039b6:	e7f7      	b.n	80039a8 <USB_WritePacket+0x18>

080039b8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80039b8:	3203      	adds	r2, #3
 80039ba:	f022 0203 	bic.w	r2, r2, #3
 80039be:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80039c0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80039c4:	4291      	cmp	r1, r2
 80039c6:	d101      	bne.n	80039cc <USB_ReadPacket+0x14>
}
 80039c8:	4608      	mov	r0, r1
 80039ca:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80039cc:	6803      	ldr	r3, [r0, #0]
 80039ce:	f841 3b04 	str.w	r3, [r1], #4
 80039d2:	e7f7      	b.n	80039c4 <USB_ReadPacket+0xc>

080039d4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80039d4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80039d6:	6980      	ldr	r0, [r0, #24]
}
 80039d8:	4010      	ands	r0, r2
 80039da:	4770      	bx	lr

080039dc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80039dc:	6940      	ldr	r0, [r0, #20]
}
 80039de:	f000 0001 	and.w	r0, r0, #1
 80039e2:	4770      	bx	lr

080039e4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80039e4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80039e8:	f023 0303 	bic.w	r3, r3, #3
{
 80039ec:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80039ee:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80039f2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80039f6:	f001 0303 	and.w	r3, r1, #3
 80039fa:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80039fc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80039fe:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003a02:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8003a06:	d104      	bne.n	8003a12 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8003a08:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8003a0c:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8003a0e:	2000      	movs	r0, #0
 8003a10:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8003a12:	2902      	cmp	r1, #2
 8003a14:	d1fb      	bne.n	8003a0e <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8003a16:	f241 7370 	movw	r3, #6000	; 0x1770
 8003a1a:	e7f7      	b.n	8003a0c <USB_InitFSLSPClkSel+0x28>

08003a1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003a1e:	2500      	movs	r5, #0
 8003a20:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003a22:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003a26:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a2e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003a30:	9b01      	ldr	r3, [sp, #4]
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003a36:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003a38:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003a3c:	2064      	movs	r0, #100	; 0x64
 8003a3e:	f7fd fe7d 	bl	800173c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003a42:	9b01      	ldr	r3, [sp, #4]
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f7fd fe75 	bl	800173c <HAL_Delay>

  return HAL_OK;
}
 8003a52:	4628      	mov	r0, r5
 8003a54:	b003      	add	sp, #12
 8003a56:	bd30      	pop	{r4, r5, pc}

08003a58 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003a58:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003a5e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003a62:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003a64:	9b01      	ldr	r3, [sp, #4]
 8003a66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a6a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003a6c:	9b01      	ldr	r3, [sp, #4]
 8003a6e:	04da      	lsls	r2, r3, #19
 8003a70:	d406      	bmi.n	8003a80 <USB_DriveVbus+0x28>
 8003a72:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003a74:	bf02      	ittt	eq
 8003a76:	9b01      	ldreq	r3, [sp, #4]
 8003a78:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003a7c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	04db      	lsls	r3, r3, #19
 8003a84:	d505      	bpl.n	8003a92 <USB_DriveVbus+0x3a>
 8003a86:	b921      	cbnz	r1, 8003a92 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003a88:	9b01      	ldr	r3, [sp, #4]
 8003a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a8e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003a92:	2000      	movs	r0, #0
 8003a94:	b002      	add	sp, #8
 8003a96:	4770      	bx	lr

08003a98 <USB_HostInit>:
{
 8003a98:	b084      	sub	sp, #16
 8003a9a:	b538      	push	{r3, r4, r5, lr}
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	a805      	add	r0, sp, #20
 8003aa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ab0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ab8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac0:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ac4:	05da      	lsls	r2, r3, #23
 8003ac6:	d53f      	bpl.n	8003b48 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003ac8:	9b07      	ldr	r3, [sp, #28]
 8003aca:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003acc:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003ad0:	d13c      	bne.n	8003b4c <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003ad6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003ada:	2110      	movs	r1, #16
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7ff ff35 	bl	800394c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff ff44 	bl	8003970 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9906      	ldr	r1, [sp, #24]
 8003aec:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8003af4:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003af6:	428b      	cmp	r3, r1
 8003af8:	d12b      	bne.n	8003b52 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8003afa:	2101      	movs	r1, #1
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ffab 	bl	8003a58 <USB_DriveVbus>
  HAL_Delay(200U);
 8003b02:	20c8      	movs	r0, #200	; 0xc8
 8003b04:	f7fd fe1a 	bl	800173c <HAL_Delay>
  USBx->GINTMSK = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b10:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b14:	05db      	lsls	r3, r3, #23
 8003b16:	d521      	bpl.n	8003b5c <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8003b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003b1e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003b22:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003b26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8003b2a:	9b08      	ldr	r3, [sp, #32]
 8003b2c:	b91b      	cbnz	r3, 8003b36 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b2e:	69a3      	ldr	r3, [r4, #24]
 8003b30:	f043 0310 	orr.w	r3, r3, #16
 8003b34:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003b36:	69a2      	ldr	r2, [r4, #24]
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <USB_HostInit+0xd8>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61a3      	str	r3, [r4, #24]
}
 8003b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b42:	2000      	movs	r0, #0
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003b48:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	e7c1      	b.n	8003ad6 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003b52:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003b54:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003b56:	60d5      	str	r5, [r2, #12]
 8003b58:	3220      	adds	r2, #32
 8003b5a:	e7cc      	b.n	8003af6 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003b60:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003b64:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003b66:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <USB_HostInit+0xdc>)
 8003b68:	e7dd      	b.n	8003b26 <USB_HostInit+0x8e>
 8003b6a:	bf00      	nop
 8003b6c:	00e00300 	.word	0x00e00300
 8003b70:	a3200008 	.word	0xa3200008
 8003b74:	004000e0 	.word	0x004000e0

08003b78 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b78:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003b7e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003b82:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003b84:	9801      	ldr	r0, [sp, #4]
}
 8003b86:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003b8a:	b002      	add	sp, #8
 8003b8c:	4770      	bx	lr

08003b8e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003b8e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003b92:	6880      	ldr	r0, [r0, #8]
}
 8003b94:	b280      	uxth	r0, r0
 8003b96:	4770      	bx	lr

08003b98 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003b9c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003ba0:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8003ba4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003ba8:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bae:	60a0      	str	r0, [r4, #8]
 8003bb0:	fa4f f882 	sxtb.w	r8, r2
 8003bb4:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8003bb8:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003bbc:	2e03      	cmp	r6, #3
 8003bbe:	d86c      	bhi.n	8003c9a <USB_HC_Init+0x102>
 8003bc0:	e8df f006 	tbb	[pc, r6]
 8003bc4:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003bc8:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003bcc:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003bd0:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003bd2:	da03      	bge.n	8003bdc <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003bd4:	68e1      	ldr	r1, [r4, #12]
 8003bd6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003bda:	e005      	b.n	8003be8 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003bdc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003bde:	05c9      	lsls	r1, r1, #23
 8003be0:	d542      	bpl.n	8003c68 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003be2:	68e1      	ldr	r1, [r4, #12]
 8003be4:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8003be8:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bea:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003bec:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f10e 	lsl.w	r1, r1, lr
 8003bf6:	4321      	orrs	r1, r4
 8003bf8:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003bfc:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003bfe:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003c02:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003c06:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003c08:	bfb4      	ite	lt
 8003c0a:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8003c0e:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c10:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8003c14:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c18:	059b      	lsls	r3, r3, #22
 8003c1a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c1e:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003c22:	02d2      	lsls	r2, r2, #11
 8003c24:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003c28:	432b      	orrs	r3, r5
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	04b2      	lsls	r2, r6, #18
 8003c2e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8003c32:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003c34:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8003c38:	bf0c      	ite	eq
 8003c3a:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8003c3e:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003c40:	4323      	orrs	r3, r4
 8003c42:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8003c44:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003c46:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8003c4a:	d128      	bne.n	8003c9e <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003c4c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003c50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c54:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c5c:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8003c60:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c64:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003c66:	dbb5      	blt.n	8003bd4 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003c68:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f10e 	lsl.w	r1, r1, lr
 8003c72:	4301      	orrs	r1, r0
 8003c74:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003c78:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c7a:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003c7c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003c80:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003c82:	4604      	mov	r4, r0
 8003c84:	e7c4      	b.n	8003c10 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c86:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003c8a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c8e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003c90:	daea      	bge.n	8003c68 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003c92:	68e1      	ldr	r1, [r4, #12]
 8003c94:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003c98:	e7a6      	b.n	8003be8 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	e7a6      	b.n	8003bec <USB_HC_Init+0x54>
}
 8003c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ca2 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003ca2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003ca6:	6940      	ldr	r0, [r0, #20]
}
 8003ca8:	b280      	uxth	r0, r0
 8003caa:	4770      	bx	lr

08003cac <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003cac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003cb0:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8003cb4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003cb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003cbc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003cc8:	d11e      	bne.n	8003d08 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003cca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ccc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003cd0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003cd4:	d137      	bne.n	8003d46 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003cde:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ce6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003cea:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cf2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003cf6:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	d002      	beq.n	8003d04 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003cfe:	6811      	ldr	r1, [r2, #0]
 8003d00:	2900      	cmp	r1, #0
 8003d02:	dbfa      	blt.n	8003cfa <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003d08:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003d0c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003d10:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003d14:	d117      	bne.n	8003d46 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003d16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d1e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003d2a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d32:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003d36:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	d0e2      	beq.n	8003d04 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d3e:	6811      	ldr	r1, [r2, #0]
 8003d40:	2900      	cmp	r1, #0
 8003d42:	dbfa      	blt.n	8003d3a <USB_HC_Halt+0x8e>
 8003d44:	e7de      	b.n	8003d04 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d4a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003d4e:	e7d9      	b.n	8003d04 <USB_HC_Halt+0x58>

08003d50 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003d50:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003d54:	4a06      	ldr	r2, [pc, #24]	; (8003d70 <USB_DoPing+0x20>)
 8003d56:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d5a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d66:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	80080000 	.word	0x80080000

08003d74 <USB_HC_StartXfer>:
{
 8003d74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003d78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003d7a:	05db      	lsls	r3, r3, #23
{
 8003d7c:	4616      	mov	r6, r2
 8003d7e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003d80:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003d82:	d517      	bpl.n	8003db4 <USB_HC_StartXfer+0x40>
 8003d84:	790d      	ldrb	r5, [r1, #4]
 8003d86:	b9ad      	cbnz	r5, 8003db4 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003d88:	b94e      	cbnz	r6, 8003d9e <USB_HC_StartXfer+0x2a>
 8003d8a:	794b      	ldrb	r3, [r1, #5]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d111      	bne.n	8003db4 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003d90:	4611      	mov	r1, r2
 8003d92:	f7ff ffdd 	bl	8003d50 <USB_DoPing>
}
 8003d96:	2000      	movs	r0, #0
 8003d98:	b002      	add	sp, #8
 8003d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003d9e:	2e01      	cmp	r6, #1
 8003da0:	d108      	bne.n	8003db4 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003da2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003da6:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003daa:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003dae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8003db2:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8003db4:	6908      	ldr	r0, [r1, #16]
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d066      	beq.n	8003e88 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003dba:	890b      	ldrh	r3, [r1, #8]
 8003dbc:	3801      	subs	r0, #1
 8003dbe:	4418      	add	r0, r3
 8003dc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dc4:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8003dc6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003dca:	d903      	bls.n	8003dd4 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003dd0:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8003dd4:	78cf      	ldrb	r7, [r1, #3]
 8003dd6:	b117      	cbz	r7, 8003dde <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003dd8:	890b      	ldrh	r3, [r1, #8]
 8003dda:	4343      	muls	r3, r0
 8003ddc:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003dde:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003de2:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003de4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003de8:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003dec:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003df0:	ea4e 0e08 	orr.w	lr, lr, r8
 8003df4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003ed4 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003df8:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003dfc:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8003e00:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003e04:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8003e08:	b116      	cbz	r6, 8003e10 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003e0a:	68c8      	ldr	r0, [r1, #12]
 8003e0c:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003e10:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8003e14:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003e18:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003e1c:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8003e20:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003e24:	43c0      	mvns	r0, r0
 8003e26:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003e2a:	0740      	lsls	r0, r0, #29
 8003e2c:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8003e30:	ea40 000c 	orr.w	r0, r0, ip
 8003e34:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e38:	4825      	ldr	r0, [pc, #148]	; (8003ed0 <USB_HC_StartXfer+0x15c>)
 8003e3a:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003e3e:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e42:	f8d0 c000 	ldr.w	ip, [r0]
 8003e46:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8003e4a:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003e4e:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8003e52:	b1df      	cbz	r7, 8003e8c <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003e54:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003e58:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e5c:	f8d0 c000 	ldr.w	ip, [r0]
 8003e60:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8003e64:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e68:	6800      	ldr	r0, [r0, #0]
 8003e6a:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003e6e:	2e00      	cmp	r6, #0
 8003e70:	d191      	bne.n	8003d96 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	d18f      	bne.n	8003d96 <USB_HC_StartXfer+0x22>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d08d      	beq.n	8003d96 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003e7a:	79c8      	ldrb	r0, [r1, #7]
 8003e7c:	2803      	cmp	r0, #3
 8003e7e:	d813      	bhi.n	8003ea8 <USB_HC_StartXfer+0x134>
 8003e80:	e8df f000 	tbb	[pc, r0]
 8003e84:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003e88:	2001      	movs	r0, #1
 8003e8a:	e7a3      	b.n	8003dd4 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003e8c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003e90:	e7e2      	b.n	8003e58 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003e94:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003e96:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003e9a:	b280      	uxth	r0, r0
 8003e9c:	4285      	cmp	r5, r0
 8003e9e:	d903      	bls.n	8003ea8 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003ea0:	69a0      	ldr	r0, [r4, #24]
 8003ea2:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003ea6:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	9000      	str	r0, [sp, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	68c9      	ldr	r1, [r1, #12]
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff fd6d 	bl	8003990 <USB_WritePacket>
 8003eb6:	e76e      	b.n	8003d96 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003eb8:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003ebc:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003ebe:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003ec2:	b280      	uxth	r0, r0
 8003ec4:	4285      	cmp	r5, r0
 8003ec6:	d9ef      	bls.n	8003ea8 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003ec8:	69a0      	ldr	r0, [r4, #24]
 8003eca:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003ece:	e7ea      	b.n	8003ea6 <USB_HC_StartXfer+0x132>
 8003ed0:	200101e4 	.word	0x200101e4
 8003ed4:	1ff80000 	.word	0x1ff80000

08003ed8 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ed8:	6883      	ldr	r3, [r0, #8]
 8003eda:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003ede:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ee0:	2110      	movs	r1, #16
{
 8003ee2:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ee4:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ee6:	f7ff fd31 	bl	800394c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff fd40 	bl	8003970 <USB_FlushRxFifo>
 8003ef0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8003ef4:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8003ef8:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003efa:	6811      	ldr	r1, [r2, #0]
 8003efc:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003f00:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8003f04:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8003f08:	4290      	cmp	r0, r2
 8003f0a:	d1f6      	bne.n	8003efa <USB_StopHost+0x22>
 8003f0c:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003f14:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003f18:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f20:	d802      	bhi.n	8003f28 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	dbf8      	blt.n	8003f1a <USB_StopHost+0x42>
 8003f28:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d1ef      	bne.n	8003f0e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f32:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f36:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f38:	68a3      	ldr	r3, [r4, #8]
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003f40:	2000      	movs	r0, #0
 8003f42:	bd10      	pop	{r4, pc}

08003f44 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr

08003f48 <USBH_CDC_InterfaceDeInit>:
{
 8003f48:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003f4a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003f4e:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003f50:	7821      	ldrb	r1, [r4, #0]
{
 8003f52:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003f54:	b139      	cbz	r1, 8003f66 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003f56:	f000 fe17 	bl	8004b88 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003f5a:	7821      	ldrb	r1, [r4, #0]
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 fe2f 	bl	8004bc0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003f62:	2300      	movs	r3, #0
 8003f64:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003f66:	7b21      	ldrb	r1, [r4, #12]
 8003f68:	b141      	cbz	r1, 8003f7c <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fe0c 	bl	8004b88 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003f70:	7b21      	ldrb	r1, [r4, #12]
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 fe24 	bl	8004bc0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003f7c:	7b61      	ldrb	r1, [r4, #13]
 8003f7e:	b141      	cbz	r1, 8003f92 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 fe01 	bl	8004b88 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003f86:	7b61      	ldrb	r1, [r4, #13]
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 fe19 	bl	8004bc0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003f8e:	2300      	movs	r3, #0
 8003f90:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8003f92:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003f96:	69d8      	ldr	r0, [r3, #28]
 8003f98:	b128      	cbz	r0, 8003fa6 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003f9a:	f00c fa09 	bl	80103b0 <free>
    phost->pActiveClass->pData = 0U;
 8003f9e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]
}
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}

08003faa <USBH_CDC_InterfaceInit>:
{
 8003faa:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003fac:	2202      	movs	r2, #2
{
 8003fae:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4611      	mov	r1, r2
{
 8003fb4:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8003fb6:	f000 f9b2 	bl	800431e <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003fba:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8003fbc:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8003fbe:	d102      	bne.n	8003fc6 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003fc0:	2002      	movs	r0, #2
}
 8003fc2:	b005      	add	sp, #20
 8003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8003fc6:	4601      	mov	r1, r0
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f99f 	bl	800430c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003fce:	2050      	movs	r0, #80	; 0x50
 8003fd0:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8003fd4:	f00c f9e4 	bl	80103a0 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003fd8:	231a      	movs	r3, #26
 8003fda:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003fde:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003fe0:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8003fe4:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003fe6:	bf42      	ittt	mi
 8003fe8:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003fea:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8003fee:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003ff0:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003ff2:	7841      	ldrb	r1, [r0, #1]
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 fdcc 	bl	8004b92 <USBH_AllocPipe>
 8003ffa:	4601      	mov	r1, r0
 8003ffc:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8003ffe:	8960      	ldrh	r0, [r4, #10]
 8004000:	9002      	str	r0, [sp, #8]
 8004002:	2003      	movs	r0, #3
 8004004:	9001      	str	r0, [sp, #4]
 8004006:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800400a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800400e:	7862      	ldrb	r2, [r4, #1]
 8004010:	9000      	str	r0, [sp, #0]
 8004012:	4628      	mov	r0, r5
 8004014:	f000 fda9 	bl	8004b6a <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004018:	2200      	movs	r2, #0
 800401a:	7821      	ldrb	r1, [r4, #0]
 800401c:	4628      	mov	r0, r5
 800401e:	f001 fc3c 	bl	800589a <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8004022:	2300      	movs	r3, #0
 8004024:	461a      	mov	r2, r3
 8004026:	210a      	movs	r1, #10
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f978 	bl	800431e <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800402e:	28ff      	cmp	r0, #255	; 0xff
 8004030:	d0c6      	beq.n	8003fc0 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004032:	231a      	movs	r3, #26
 8004034:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004038:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800403c:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004040:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8004044:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004048:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800404c:	bf0d      	iteet	eq
 800404e:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004050:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004052:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004054:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004056:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800405a:	bf08      	it	eq
 800405c:	73a3      	strbeq	r3, [r4, #14]
 800405e:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004062:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004064:	bf18      	it	ne
 8004066:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004068:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800406a:	bf14      	ite	ne
 800406c:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800406e:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004070:	f000 fd8f 	bl	8004b92 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004074:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004076:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004078:	4628      	mov	r0, r5
 800407a:	f000 fd8a 	bl	8004b92 <USBH_AllocPipe>
 800407e:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8004080:	8b20      	ldrh	r0, [r4, #24]
 8004082:	9002      	str	r0, [sp, #8]
 8004084:	2602      	movs	r6, #2
 8004086:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800408a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800408e:	7ba2      	ldrb	r2, [r4, #14]
 8004090:	7b61      	ldrb	r1, [r4, #13]
 8004092:	9601      	str	r6, [sp, #4]
 8004094:	9000      	str	r0, [sp, #0]
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fd67 	bl	8004b6a <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 800409c:	8b60      	ldrh	r0, [r4, #26]
 800409e:	9002      	str	r0, [sp, #8]
 80040a0:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80040a4:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80040a8:	7be2      	ldrb	r2, [r4, #15]
 80040aa:	7b21      	ldrb	r1, [r4, #12]
 80040ac:	9601      	str	r6, [sp, #4]
 80040ae:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 80040b0:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 fd59 	bl	8004b6a <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80040b8:	4632      	mov	r2, r6
 80040ba:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 80040bc:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80040c0:	4628      	mov	r0, r5
 80040c2:	f001 fbea 	bl	800589a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80040c6:	4632      	mov	r2, r6
 80040c8:	7b21      	ldrb	r1, [r4, #12]
 80040ca:	4628      	mov	r0, r5
 80040cc:	f001 fbe5 	bl	800589a <USBH_LL_SetToggle>
      status = USBH_OK;
 80040d0:	4630      	mov	r0, r6
 80040d2:	e776      	b.n	8003fc2 <USBH_CDC_InterfaceInit+0x18>

080040d4 <USBH_CDC_ClassRequest>:
{
 80040d4:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80040d6:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80040da:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80040dc:	23a1      	movs	r3, #161	; 0xa1
 80040de:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80040e0:	2321      	movs	r3, #33	; 0x21
 80040e2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80040e4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80040ea:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80040ec:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80040ee:	3140      	adds	r1, #64	; 0x40
{
 80040f0:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80040f2:	f000 fac9 	bl	8004688 <USBH_CtlReq>
  if(status == USBH_OK)
 80040f6:	4605      	mov	r5, r0
 80040f8:	b920      	cbnz	r0, 8004104 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80040fa:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80040fe:	2102      	movs	r1, #2
 8004100:	4620      	mov	r0, r4
 8004102:	4798      	blx	r3
}
 8004104:	4628      	mov	r0, r5
 8004106:	bd38      	pop	{r3, r4, r5, pc}

08004108 <USBH_CDC_TransmitCallback>:
 8004108:	4770      	bx	lr

0800410a <USBH_CDC_ReceiveCallback>:
 800410a:	4770      	bx	lr

0800410c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800410c:	4770      	bx	lr

0800410e <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800410e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004112:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004114:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8004116:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 800411a:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800411c:	2b04      	cmp	r3, #4
 800411e:	d83d      	bhi.n	800419c <USBH_CDC_Process+0x8e>
 8004120:	e8df f003 	tbb	[pc, r3]
 8004124:	42170603 	.word	0x42170603
 8004128:	a6          	.byte	0xa6
 8004129:	00          	.byte	0x00
    status = USBH_OK;
 800412a:	2000      	movs	r0, #0
}
 800412c:	b002      	add	sp, #8
 800412e:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004130:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004132:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004134:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004136:	2320      	movs	r3, #32
 8004138:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800413a:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004140:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004142:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004144:	f000 faa0 	bl	8004688 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004148:	bb50      	cbnz	r0, 80041a0 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800414a:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 800414c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004150:	e024      	b.n	800419c <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004152:	23a1      	movs	r3, #161	; 0xa1
 8004154:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004156:	2321      	movs	r3, #33	; 0x21
 8004158:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800415a:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004160:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004162:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004164:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004168:	f000 fa8e 	bl	8004688 <USBH_CtlReq>
    if(req_status == USBH_OK)
 800416c:	b9c0      	cbnz	r0, 80041a0 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800416e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004170:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8004172:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004176:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004180:	4291      	cmp	r1, r2
 8004182:	d10b      	bne.n	800419c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004188:	795a      	ldrb	r2, [r3, #5]
 800418a:	4291      	cmp	r1, r2
 800418c:	d106      	bne.n	800419c <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800418e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d102      	bne.n	800419c <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8004196:	4628      	mov	r0, r5
 8004198:	f7ff ffb8 	bl	800410c <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 800419c:	2001      	movs	r0, #1
 800419e:	e7c5      	b.n	800412c <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 80041a0:	2801      	cmp	r0, #1
 80041a2:	d0fb      	beq.n	800419c <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 80041a4:	2304      	movs	r3, #4
 80041a6:	e7d1      	b.n	800414c <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 80041a8:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80041ac:	2901      	cmp	r1, #1
 80041ae:	d021      	beq.n	80041f4 <USBH_CDC_Process+0xe6>
 80041b0:	2902      	cmp	r1, #2
 80041b2:	d02e      	beq.n	8004212 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80041b4:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80041b8:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 80041ba:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d045      	beq.n	800424e <USBH_CDC_Process+0x140>
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d1ea      	bne.n	800419c <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80041c6:	7b31      	ldrb	r1, [r6, #12]
 80041c8:	4628      	mov	r0, r5
 80041ca:	f001 fb55 	bl	8005878 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80041ce:	2801      	cmp	r0, #1
 80041d0:	d1e4      	bne.n	800419c <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80041d2:	7b31      	ldrb	r1, [r6, #12]
 80041d4:	4628      	mov	r0, r5
 80041d6:	f001 fb0b 	bl	80057f0 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80041da:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80041dc:	4298      	cmp	r0, r3
 80041de:	d040      	beq.n	8004262 <USBH_CDC_Process+0x154>
 80041e0:	8b72      	ldrh	r2, [r6, #26]
 80041e2:	4290      	cmp	r0, r2
 80041e4:	d93d      	bls.n	8004262 <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 80041e6:	1a1b      	subs	r3, r3, r0
 80041e8:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80041ea:	6a33      	ldr	r3, [r6, #32]
 80041ec:	4418      	add	r0, r3
 80041ee:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e033      	b.n	800425c <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80041f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80041f6:	8b22      	ldrh	r2, [r4, #24]
 80041f8:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80041fa:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80041fc:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80041fe:	bf98      	it	ls
 8004200:	b282      	uxthls	r2, r0
 8004202:	69e1      	ldr	r1, [r4, #28]
 8004204:	4628      	mov	r0, r5
 8004206:	f000 fc89 	bl	8004b1c <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800420a:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800420c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8004210:	e7d0      	b.n	80041b4 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004212:	7b61      	ldrb	r1, [r4, #13]
 8004214:	f001 fb30 	bl	8005878 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8004218:	2801      	cmp	r0, #1
 800421a:	d115      	bne.n	8004248 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800421c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800421e:	8b22      	ldrh	r2, [r4, #24]
 8004220:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004222:	bf83      	ittte	hi
 8004224:	1a9b      	subhi	r3, r3, r2
 8004226:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004228:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 800422a:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800422c:	bf8a      	itet	hi
 800422e:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 8004230:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004232:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8004234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004236:	b10b      	cbz	r3, 800423c <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004238:	2301      	movs	r3, #1
 800423a:	e7e7      	b.n	800420c <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800423c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8004240:	4628      	mov	r0, r5
 8004242:	f7ff ff61 	bl	8004108 <USBH_CDC_TransmitCallback>
 8004246:	e7b5      	b.n	80041b4 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8004248:	2802      	cmp	r0, #2
 800424a:	d1b3      	bne.n	80041b4 <USBH_CDC_Process+0xa6>
 800424c:	e7f4      	b.n	8004238 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 800424e:	7b33      	ldrb	r3, [r6, #12]
 8004250:	8b72      	ldrh	r2, [r6, #26]
 8004252:	6a31      	ldr	r1, [r6, #32]
 8004254:	4628      	mov	r0, r5
 8004256:	f000 fc78 	bl	8004b4a <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800425a:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800425c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8004260:	e79c      	b.n	800419c <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004262:	2300      	movs	r3, #0
 8004264:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8004268:	4628      	mov	r0, r5
 800426a:	f7ff ff4e 	bl	800410a <USBH_CDC_ReceiveCallback>
 800426e:	e795      	b.n	800419c <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004270:	2100      	movs	r1, #0
 8004272:	f000 fc0d 	bl	8004a90 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8004276:	2800      	cmp	r0, #0
 8004278:	d190      	bne.n	800419c <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800427a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800427e:	e78d      	b.n	800419c <USBH_CDC_Process+0x8e>

08004280 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004280:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8004284:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8004288:	2100      	movs	r1, #0
 800428a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800428e:	4293      	cmp	r3, r2
 8004290:	d1fb      	bne.n	800428a <DeInitStateMachine+0xa>
 8004292:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004296:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80042a0:	4291      	cmp	r1, r2
 80042a2:	d1fb      	bne.n	800429c <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80042a4:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80042a6:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 80042a8:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80042aa:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80042ac:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80042ae:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 80042b2:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80042b4:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 80042b6:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80042b8:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80042bc:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 80042c0:	2000      	movs	r0, #0
 80042c2:	4770      	bx	lr

080042c4 <USBH_Init>:
{
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	460d      	mov	r5, r1
  if(phost == NULL)
 80042c8:	4604      	mov	r4, r0
 80042ca:	b180      	cbz	r0, 80042ee <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80042cc:	2300      	movs	r3, #0
  phost->id = id;
 80042ce:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80042d2:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80042d6:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 80042da:	f7ff ffd1 	bl	8004280 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80042de:	b10d      	cbz	r5, 80042e4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80042e0:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f001 fa25 	bl	8005734 <USBH_LL_Init>
  return USBH_OK;
 80042ea:	2000      	movs	r0, #0
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 80042ee:	2002      	movs	r0, #2
}
 80042f0:	bd38      	pop	{r3, r4, r5, pc}

080042f2 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 80042f2:	b149      	cbz	r1, 8004308 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80042f4:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80042f8:	b933      	cbnz	r3, 8004308 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80042fa:	2201      	movs	r2, #1
 80042fc:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8004300:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8004304:	4618      	mov	r0, r3
 8004306:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004308:	2002      	movs	r0, #2
  }

  return status;
}
 800430a:	4770      	bx	lr

0800430c <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800430c:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004310:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004312:	bf86      	itte	hi
 8004314:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8004318:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800431a:	2002      	movls	r0, #2
  }
  return status;
}
 800431c:	4770      	bx	lr

0800431e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800431e:	b570      	push	{r4, r5, r6, lr}
 8004320:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004322:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8004326:	428e      	cmp	r6, r1
 8004328:	b2e5      	uxtb	r5, r4
 800432a:	d001      	beq.n	8004330 <USBH_FindInterface+0x12>
 800432c:	29ff      	cmp	r1, #255	; 0xff
 800432e:	d10b      	bne.n	8004348 <USBH_FindInterface+0x2a>
 8004330:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8004334:	4296      	cmp	r6, r2
 8004336:	d001      	beq.n	800433c <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004338:	2aff      	cmp	r2, #255	; 0xff
 800433a:	d105      	bne.n	8004348 <USBH_FindInterface+0x2a>
 800433c:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8004340:	429e      	cmp	r6, r3
 8004342:	d007      	beq.n	8004354 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004344:	2bff      	cmp	r3, #255	; 0xff
 8004346:	d005      	beq.n	8004354 <USBH_FindInterface+0x36>
 8004348:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800434a:	2c02      	cmp	r4, #2
 800434c:	f100 001a 	add.w	r0, r0, #26
 8004350:	d1e7      	bne.n	8004322 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004352:	25ff      	movs	r5, #255	; 0xff
}
 8004354:	4628      	mov	r0, r5
 8004356:	bd70      	pop	{r4, r5, r6, pc}

08004358 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8004358:	b510      	push	{r4, lr}
 800435a:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800435c:	f001 fa10 	bl	8005780 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004360:	2101      	movs	r1, #1
 8004362:	4620      	mov	r0, r4
 8004364:	f001 fa8c 	bl	8005880 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8004368:	2000      	movs	r0, #0
 800436a:	bd10      	pop	{r4, pc}

0800436c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004370:	2302      	movs	r3, #2
 8004372:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8004376:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 800437a:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800437c:	b933      	cbnz	r3, 800438c <USBH_Process+0x20>
 800437e:	7802      	ldrb	r2, [r0, #0]
 8004380:	b122      	cbz	r2, 800438c <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8004382:	7802      	ldrb	r2, [r0, #0]
 8004384:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 8004386:	bf1c      	itt	ne
 8004388:	2203      	movne	r2, #3
 800438a:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 800438c:	7822      	ldrb	r2, [r4, #0]
 800438e:	2a0b      	cmp	r2, #11
 8004390:	d818      	bhi.n	80043c4 <USBH_Process+0x58>
 8004392:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004396:	000c      	.short	0x000c
 8004398:	001f001a 	.word	0x001f001a
 800439c:	00170121 	.word	0x00170121
 80043a0:	0107004f 	.word	0x0107004f
 80043a4:	00d000c6 	.word	0x00d000c6
 80043a8:	00e700da 	.word	0x00e700da
 80043ac:	0118      	.short	0x0118
    if (phost->device.is_connected)
 80043ae:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80043b2:	b13b      	cbz	r3, 80043c4 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80043b4:	2301      	movs	r3, #1
      USBH_Delay(200U);
 80043b6:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80043b8:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 80043ba:	f001 fa7d 	bl	80058b8 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80043be:	4620      	mov	r0, r4
 80043c0:	f001 fa08 	bl	80057d4 <USBH_LL_ResetPort>
}
 80043c4:	2000      	movs	r0, #0
 80043c6:	b007      	add	sp, #28
 80043c8:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d1fa      	bne.n	80043c4 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 80043ce:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 80043d0:	7023      	strb	r3, [r4, #0]
 80043d2:	e7f7      	b.n	80043c4 <USBH_Process+0x58>
    USBH_Delay(100U);
 80043d4:	2064      	movs	r0, #100	; 0x64
 80043d6:	f001 fa6f 	bl	80058b8 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80043da:	4620      	mov	r0, r4
 80043dc:	f001 f9ec 	bl	80057b8 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80043e0:	2305      	movs	r3, #5
 80043e2:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80043e4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80043e8:	2100      	movs	r1, #0
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 fbd1 	bl	8004b92 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80043f0:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80043f2:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80043f4:	4620      	mov	r0, r4
 80043f6:	f000 fbcc 	bl	8004b92 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80043fa:	79a2      	ldrb	r2, [r4, #6]
 80043fc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004400:	7120      	strb	r0, [r4, #4]
 8004402:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8004404:	9202      	str	r2, [sp, #8]
 8004406:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8004408:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800440c:	9200      	str	r2, [sp, #0]
 800440e:	9501      	str	r5, [sp, #4]
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	4620      	mov	r0, r4
 8004414:	f000 fba9 	bl	8004b6a <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8004418:	79a2      	ldrb	r2, [r4, #6]
 800441a:	9202      	str	r2, [sp, #8]
 800441c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004426:	7961      	ldrb	r1, [r4, #5]
 8004428:	9501      	str	r5, [sp, #4]
 800442a:	462a      	mov	r2, r5
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fb9c 	bl	8004b6a <USBH_OpenPipe>
 8004432:	e7c7      	b.n	80043c4 <USBH_Process+0x58>
  switch (phost->EnumState)
 8004434:	7863      	ldrb	r3, [r4, #1]
 8004436:	2b07      	cmp	r3, #7
 8004438:	d8c4      	bhi.n	80043c4 <USBH_Process+0x58>
 800443a:	e8df f003 	tbb	[pc, r3]
 800443e:	1504      	.short	0x1504
 8004440:	4138301e 	.word	0x4138301e
 8004444:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8004446:	2108      	movs	r1, #8
 8004448:	4620      	mov	r0, r4
 800444a:	f000 f9fa 	bl	8004842 <USBH_Get_DevDesc>
 800444e:	4605      	mov	r5, r0
 8004450:	2800      	cmp	r0, #0
 8004452:	d1b7      	bne.n	80043c4 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004454:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004456:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800445a:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800445c:	7921      	ldrb	r1, [r4, #4]
 800445e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004462:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8004464:	9202      	str	r2, [sp, #8]
 8004466:	e7cf      	b.n	8004408 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8004468:	2112      	movs	r1, #18
 800446a:	4620      	mov	r0, r4
 800446c:	f000 f9e9 	bl	8004842 <USBH_Get_DevDesc>
 8004470:	2800      	cmp	r0, #0
 8004472:	d1a7      	bne.n	80043c4 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8004474:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004476:	7063      	strb	r3, [r4, #1]
 8004478:	e7a4      	b.n	80043c4 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800447a:	2101      	movs	r1, #1
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fadd 	bl	8004a3c <USBH_SetAddress>
 8004482:	4605      	mov	r5, r0
 8004484:	2800      	cmp	r0, #0
 8004486:	d19d      	bne.n	80043c4 <USBH_Process+0x58>
      USBH_Delay(2U);
 8004488:	2002      	movs	r0, #2
 800448a:	f001 fa15 	bl	80058b8 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800448e:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004490:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004492:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004494:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8004498:	7921      	ldrb	r1, [r4, #4]
 800449a:	79a2      	ldrb	r2, [r4, #6]
 800449c:	e7e2      	b.n	8004464 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 800449e:	2109      	movs	r1, #9
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 fa16 	bl	80048d2 <USBH_Get_CfgDesc>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d18c      	bne.n	80043c4 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80044aa:	2304      	movs	r3, #4
 80044ac:	e7e3      	b.n	8004476 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 80044ae:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 fa0d 	bl	80048d2 <USBH_Get_CfgDesc>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d183      	bne.n	80043c4 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80044bc:	2305      	movs	r3, #5
 80044be:	e7da      	b.n	8004476 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 80044c0:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80044c4:	b141      	cbz	r1, 80044d8 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 80044c6:	23ff      	movs	r3, #255	; 0xff
 80044c8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fa8e 	bl	80049ee <USBH_Get_StringDesc>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f47f af76 	bne.w	80043c4 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80044d8:	2306      	movs	r3, #6
 80044da:	e7cc      	b.n	8004476 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 80044dc:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 80044e0:	b141      	cbz	r1, 80044f4 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 80044e2:	23ff      	movs	r3, #255	; 0xff
 80044e4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fa80 	bl	80049ee <USBH_Get_StringDesc>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	f47f af68 	bne.w	80043c4 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80044f4:	2307      	movs	r3, #7
 80044f6:	e7be      	b.n	8004476 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80044f8:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80044fc:	b141      	cbz	r1, 8004510 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80044fe:	23ff      	movs	r3, #255	; 0xff
 8004500:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004504:	4620      	mov	r0, r4
 8004506:	f000 fa72 	bl	80049ee <USBH_Get_StringDesc>
 800450a:	2800      	cmp	r0, #0
 800450c:	f47f af5a 	bne.w	80043c4 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004516:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800451a:	2b01      	cmp	r3, #1
 800451c:	d009      	beq.n	8004532 <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 800451e:	2307      	movs	r3, #7
 8004520:	e756      	b.n	80043d0 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8004522:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004526:	2b00      	cmp	r3, #0
 8004528:	f43f af4c 	beq.w	80043c4 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800452c:	2101      	movs	r1, #1
 800452e:	4620      	mov	r0, r4
 8004530:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 8004532:	2308      	movs	r3, #8
 8004534:	e74c      	b.n	80043d0 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004536:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fa8c 	bl	8004a58 <USBH_SetCfg>
 8004540:	2800      	cmp	r0, #0
 8004542:	f47f af3f 	bne.w	80043c4 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8004546:	2309      	movs	r3, #9
 8004548:	e742      	b.n	80043d0 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800454a:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800454e:	069b      	lsls	r3, r3, #26
 8004550:	d506      	bpl.n	8004560 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004552:	2101      	movs	r1, #1
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fa8d 	bl	8004a74 <USBH_SetFeature>
 800455a:	2800      	cmp	r0, #0
 800455c:	f47f af32 	bne.w	80043c4 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8004560:	230a      	movs	r3, #10
 8004562:	e735      	b.n	80043d0 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8004564:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004568:	2b00      	cmp	r3, #0
 800456a:	f43f af2b 	beq.w	80043c4 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004574:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8004578:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 800457c:	7919      	ldrb	r1, [r3, #4]
 800457e:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8004580:	bf08      	it	eq
 8004582:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8004586:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800458a:	b1d3      	cbz	r3, 80045c2 <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4620      	mov	r0, r4
 8004590:	4798      	blx	r3
 8004592:	b9b0      	cbnz	r0, 80045c2 <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8004594:	2306      	movs	r3, #6
 8004596:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004598:	2103      	movs	r1, #3
 800459a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800459e:	4620      	mov	r0, r4
 80045a0:	4798      	blx	r3
 80045a2:	e70f      	b.n	80043c4 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 80045a4:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80045a8:	b15b      	cbz	r3, 80045c2 <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4620      	mov	r0, r4
 80045ae:	4798      	blx	r3
 80045b0:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80045b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f af03 	bne.w	80043c4 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 80045be:	230b      	movs	r3, #11
 80045c0:	e706      	b.n	80043d0 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 80045c2:	230d      	movs	r3, #13
 80045c4:	e704      	b.n	80043d0 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 80045c6:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f43f aefa 	beq.w	80043c4 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4620      	mov	r0, r4
 80045d4:	4798      	blx	r3
 80045d6:	e6f5      	b.n	80043c4 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff fe51 	bl	8004280 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80045de:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f43f aeee 	beq.w	80043c4 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4620      	mov	r0, r4
 80045ec:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80045f4:	e6e6      	b.n	80043c4 <USBH_Process+0x58>

080045f6 <USBH_LL_SetTimer>:
  phost->Timer = time;
 80045f6:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80045fa:	4770      	bx	lr

080045fc <USBH_LL_IncTimer>:
  phost->Timer ++;
 80045fc:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8004600:	3201      	adds	r2, #1
 8004602:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004606:	7802      	ldrb	r2, [r0, #0]
 8004608:	2a0b      	cmp	r2, #11
 800460a:	d104      	bne.n	8004616 <USBH_LL_IncTimer+0x1a>
 800460c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004610:	b10b      	cbz	r3, 8004616 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	4718      	bx	r3
 8004616:	4770      	bx	lr

08004618 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8004618:	2301      	movs	r3, #1
 800461a:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800461e:	4770      	bx	lr

08004620 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8004626:	4770      	bx	lr

08004628 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8004628:	7802      	ldrb	r2, [r0, #0]
{
 800462a:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 800462c:	b94a      	cbnz	r2, 8004642 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 800462e:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8004632:	2201      	movs	r2, #1
 8004634:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8004638:	b10b      	cbz	r3, 800463e <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800463a:	2104      	movs	r1, #4
 800463c:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800463e:	2000      	movs	r0, #0
 8004640:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8004642:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8004646:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8004648:	bf04      	itt	eq
 800464a:	2202      	moveq	r2, #2
 800464c:	7002      	strbeq	r2, [r0, #0]
 800464e:	e7f6      	b.n	800463e <USBH_LL_Connect+0x16>

08004650 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004650:	b510      	push	{r4, lr}
 8004652:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8004654:	f001 f8a2 	bl	800579c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004658:	7921      	ldrb	r1, [r4, #4]
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fab0 	bl	8004bc0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8004660:	7961      	ldrb	r1, [r4, #5]
 8004662:	4620      	mov	r0, r4
 8004664:	f000 faac 	bl	8004bc0 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 800466e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004672:	b113      	cbz	r3, 800467a <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004674:	2105      	movs	r1, #5
 8004676:	4620      	mov	r0, r4
 8004678:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800467a:	4620      	mov	r0, r4
 800467c:	f001 f880 	bl	8005780 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8004680:	2303      	movs	r3, #3
 8004682:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004684:	2000      	movs	r0, #0
 8004686:	bd10      	pop	{r4, pc}

08004688 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8004688:	b513      	push	{r0, r1, r4, lr}
 800468a:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800468c:	7880      	ldrb	r0, [r0, #2]
 800468e:	2801      	cmp	r0, #1
 8004690:	d003      	beq.n	800469a <USBH_CtlReq+0x12>
 8004692:	2802      	cmp	r0, #2
 8004694:	d008      	beq.n	80046a8 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8004696:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8004698:	e004      	b.n	80046a4 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800469a:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800469c:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800469e:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 80046a0:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 80046a2:	70a3      	strb	r3, [r4, #2]
}
 80046a4:	b002      	add	sp, #8
 80046a6:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80046a8:	7e23      	ldrb	r3, [r4, #24]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	2101      	movs	r1, #1
 80046ae:	2b0a      	cmp	r3, #10
 80046b0:	d8f1      	bhi.n	8004696 <USBH_CtlReq+0xe>
 80046b2:	e8df f003 	tbb	[pc, r3]
 80046b6:	0f06      	.short	0x0f06
 80046b8:	4c40362b 	.word	0x4c40362b
 80046bc:	8c806f64 	.word	0x8c806f64
 80046c0:	95          	.byte	0x95
 80046c1:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80046c2:	7962      	ldrb	r2, [r4, #5]
 80046c4:	f104 0110 	add.w	r1, r4, #16
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 f9ef 	bl	8004aac <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80046ce:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80046d0:	7623      	strb	r3, [r4, #24]
 80046d2:	e7e0      	b.n	8004696 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80046d4:	7961      	ldrb	r1, [r4, #5]
 80046d6:	4620      	mov	r0, r4
 80046d8:	f001 f8ce 	bl	8005878 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80046dc:	2801      	cmp	r0, #1
 80046de:	d10f      	bne.n	8004700 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 80046e0:	8ae2      	ldrh	r2, [r4, #22]
 80046e2:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80046e6:	b12a      	cbz	r2, 80046f4 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da01      	bge.n	80046f0 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e7ef      	b.n	80046d0 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80046f0:	2305      	movs	r3, #5
 80046f2:	e7ed      	b.n	80046d0 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da01      	bge.n	80046fc <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80046f8:	2309      	movs	r3, #9
 80046fa:	e7e9      	b.n	80046d0 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80046fc:	2307      	movs	r3, #7
 80046fe:	e7e7      	b.n	80046d0 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004700:	2804      	cmp	r0, #4
 8004702:	d001      	beq.n	8004708 <USBH_CtlReq+0x80>
 8004704:	2802      	cmp	r0, #2
 8004706:	d1c6      	bne.n	8004696 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8004708:	230b      	movs	r3, #11
 800470a:	e7e1      	b.n	80046d0 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 800470c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004710:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004712:	89a2      	ldrh	r2, [r4, #12]
 8004714:	7923      	ldrb	r3, [r4, #4]
 8004716:	68a1      	ldr	r1, [r4, #8]
 8004718:	4620      	mov	r0, r4
 800471a:	f000 f9ef 	bl	8004afc <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800471e:	2304      	movs	r3, #4
 8004720:	e7d6      	b.n	80046d0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004722:	7921      	ldrb	r1, [r4, #4]
 8004724:	4620      	mov	r0, r4
 8004726:	f001 f8a7 	bl	8005878 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800472a:	2801      	cmp	r0, #1
 800472c:	d0e4      	beq.n	80046f8 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800472e:	2805      	cmp	r0, #5
 8004730:	d015      	beq.n	800475e <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8004732:	2804      	cmp	r0, #4
 8004734:	e7e7      	b.n	8004706 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8004736:	7963      	ldrb	r3, [r4, #5]
 8004738:	9100      	str	r1, [sp, #0]
 800473a:	89a2      	ldrh	r2, [r4, #12]
 800473c:	68a1      	ldr	r1, [r4, #8]
 800473e:	4620      	mov	r0, r4
 8004740:	f000 f9c5 	bl	8004ace <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004744:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004748:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800474a:	2306      	movs	r3, #6
 800474c:	e7c0      	b.n	80046d0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800474e:	7961      	ldrb	r1, [r4, #5]
 8004750:	4620      	mov	r0, r4
 8004752:	f001 f891 	bl	8005878 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004756:	2801      	cmp	r0, #1
 8004758:	d0d0      	beq.n	80046fc <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 800475a:	2805      	cmp	r0, #5
 800475c:	d105      	bne.n	800476a <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 800475e:	2301      	movs	r3, #1
 8004760:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8004762:	2300      	movs	r3, #0
 8004764:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8004766:	2003      	movs	r0, #3
 8004768:	e79c      	b.n	80046a4 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800476a:	2802      	cmp	r0, #2
 800476c:	d0c0      	beq.n	80046f0 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 800476e:	2804      	cmp	r0, #4
 8004770:	d191      	bne.n	8004696 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8004772:	230b      	movs	r3, #11
 8004774:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8004776:	2301      	movs	r3, #1
 8004778:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 800477a:	2002      	movs	r0, #2
 800477c:	e792      	b.n	80046a4 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 800477e:	2200      	movs	r2, #0
 8004780:	7923      	ldrb	r3, [r4, #4]
 8004782:	4611      	mov	r1, r2
 8004784:	4620      	mov	r0, r4
 8004786:	f000 f9b9 	bl	8004afc <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800478a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800478e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004790:	2308      	movs	r3, #8
 8004792:	e79d      	b.n	80046d0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004794:	7921      	ldrb	r1, [r4, #4]
 8004796:	4620      	mov	r0, r4
 8004798:	f001 f86e 	bl	8005878 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800479c:	2801      	cmp	r0, #1
 800479e:	d104      	bne.n	80047aa <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 80047a0:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 80047a2:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80047a4:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 80047a6:	7620      	strb	r0, [r4, #24]
 80047a8:	e77c      	b.n	80046a4 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 80047aa:	2804      	cmp	r0, #4
 80047ac:	d0ac      	beq.n	8004708 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 80047ae:	2805      	cmp	r0, #5
 80047b0:	f47f af71 	bne.w	8004696 <USBH_CtlReq+0xe>
 80047b4:	e7d3      	b.n	800475e <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 80047b6:	2200      	movs	r2, #0
 80047b8:	7963      	ldrb	r3, [r4, #5]
 80047ba:	9100      	str	r1, [sp, #0]
 80047bc:	4620      	mov	r0, r4
 80047be:	4611      	mov	r1, r2
 80047c0:	f000 f985 	bl	8004ace <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80047c4:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80047c8:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80047ca:	230a      	movs	r3, #10
 80047cc:	e780      	b.n	80046d0 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80047ce:	7961      	ldrb	r1, [r4, #5]
 80047d0:	4620      	mov	r0, r4
 80047d2:	f001 f851 	bl	8005878 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80047d6:	2801      	cmp	r0, #1
 80047d8:	d0e2      	beq.n	80047a0 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80047da:	2802      	cmp	r0, #2
 80047dc:	d1a9      	bne.n	8004732 <USBH_CtlReq+0xaa>
 80047de:	e78b      	b.n	80046f8 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80047e0:	7e63      	ldrb	r3, [r4, #25]
 80047e2:	3301      	adds	r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	7663      	strb	r3, [r4, #25]
 80047ea:	d806      	bhi.n	80047fa <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80047ec:	4620      	mov	r0, r4
 80047ee:	f000 ffd5 	bl	800579c <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80047f2:	2301      	movs	r3, #1
 80047f4:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80047f6:	70a3      	strb	r3, [r4, #2]
 80047f8:	e74d      	b.n	8004696 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80047fa:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80047fe:	2106      	movs	r1, #6
 8004800:	4620      	mov	r0, r4
 8004802:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	7663      	strb	r3, [r4, #25]
 8004808:	e7b5      	b.n	8004776 <USBH_CtlReq+0xee>

0800480a <USBH_GetDescriptor>:
{
 800480a:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800480c:	7884      	ldrb	r4, [r0, #2]
{
 800480e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8004812:	2c01      	cmp	r4, #1
 8004814:	d110      	bne.n	8004838 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004816:	f061 047f 	orn	r4, r1, #127	; 0x7f
 800481a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800481c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004820:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8004824:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004826:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800482a:	bf0c      	ite	eq
 800482c:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8004830:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004832:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8004834:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8004836:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8004838:	462a      	mov	r2, r5
 800483a:	4619      	mov	r1, r3
}
 800483c:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800483e:	f7ff bf23 	b.w	8004688 <USBH_CtlReq>

08004842 <USBH_Get_DevDesc>:
{
 8004842:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8004844:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8004848:	460d      	mov	r5, r1
 800484a:	9100      	str	r1, [sp, #0]
 800484c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004850:	2100      	movs	r1, #0
{
 8004852:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004854:	f7ff ffd9 	bl	800480a <USBH_GetDescriptor>
 8004858:	bbc8      	cbnz	r0, 80048ce <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800485a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800485e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004862:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8004866:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800486a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800486e:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8004872:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8004876:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800487a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800487e:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004882:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8004886:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 800488a:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800488c:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8004890:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8004894:	d91b      	bls.n	80048ce <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004896:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800489a:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800489e:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 80048a2:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80048a6:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80048aa:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80048ae:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80048b2:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80048b6:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 80048ba:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80048be:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80048c2:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80048c6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80048ca:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 80048ce:	b003      	add	sp, #12
 80048d0:	bd30      	pop	{r4, r5, pc}

080048d2 <USBH_Get_CfgDesc>:
{
 80048d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80048d6:	f100 051c 	add.w	r5, r0, #28
{
 80048da:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80048dc:	9100      	str	r1, [sp, #0]
 80048de:	462b      	mov	r3, r5
 80048e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e4:	2100      	movs	r1, #0
{
 80048e6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80048e8:	f7ff ff8f 	bl	800480a <USBH_GetDescriptor>
 80048ec:	bb48      	cbnz	r0, 8004942 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80048ee:	7f23      	ldrb	r3, [r4, #28]
 80048f0:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80048f4:	7f63      	ldrb	r3, [r4, #29]
 80048f6:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80048fa:	f894 3020 	ldrb.w	r3, [r4, #32]
 80048fe:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004902:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004906:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800490a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800490e:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004912:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004916:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800491a:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800491e:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004920:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004924:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004928:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800492c:	d909      	bls.n	8004942 <USBH_Get_CfgDesc+0x70>
 800492e:	4627      	mov	r7, r4
 8004930:	462b      	mov	r3, r5
 8004932:	4606      	mov	r6, r0
 8004934:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004936:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800493a:	2e02      	cmp	r6, #2
 800493c:	d001      	beq.n	8004942 <USBH_Get_CfgDesc+0x70>
 800493e:	4596      	cmp	lr, r2
 8004940:	d802      	bhi.n	8004948 <USBH_Get_CfgDesc+0x76>
}
 8004942:	b003      	add	sp, #12
 8004944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004948:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800494a:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800494c:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800494e:	7859      	ldrb	r1, [r3, #1]
 8004950:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004952:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004954:	d1f1      	bne.n	800493a <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004956:	7819      	ldrb	r1, [r3, #0]
 8004958:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800495c:	7859      	ldrb	r1, [r3, #1]
 800495e:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004962:	7899      	ldrb	r1, [r3, #2]
 8004964:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004968:	78d9      	ldrb	r1, [r3, #3]
 800496a:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800496e:	7919      	ldrb	r1, [r3, #4]
 8004970:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004974:	7959      	ldrb	r1, [r3, #5]
 8004976:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800497a:	7999      	ldrb	r1, [r3, #6]
 800497c:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004980:	79d9      	ldrb	r1, [r3, #7]
 8004982:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004986:	7a19      	ldrb	r1, [r3, #8]
 8004988:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800498c:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8004990:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004992:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8004996:	428d      	cmp	r5, r1
 8004998:	d802      	bhi.n	80049a0 <USBH_Get_CfgDesc+0xce>
 800499a:	3601      	adds	r6, #1
 800499c:	371a      	adds	r7, #26
 800499e:	e7cc      	b.n	800493a <USBH_Get_CfgDesc+0x68>
 80049a0:	4596      	cmp	lr, r2
 80049a2:	d9fa      	bls.n	800499a <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049a4:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80049a6:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049a8:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80049aa:	785d      	ldrb	r5, [r3, #1]
 80049ac:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049ae:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80049b0:	d1ef      	bne.n	8004992 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80049b2:	1c4d      	adds	r5, r1, #1
 80049b4:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 80049b8:	4421      	add	r1, r4
 80049ba:	f893 9000 	ldrb.w	r9, [r3]
 80049be:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80049c2:	f893 9001 	ldrb.w	r9, [r3, #1]
 80049c6:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80049ca:	f893 9002 	ldrb.w	r9, [r3, #2]
 80049ce:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80049d2:	f893 9003 	ldrb.w	r9, [r3, #3]
 80049d6:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80049da:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80049de:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80049e2:	f893 9006 	ldrb.w	r9, [r3, #6]
 80049e6:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 80049ea:	b2e9      	uxtb	r1, r5
 80049ec:	e7d1      	b.n	8004992 <USBH_Get_CfgDesc+0xc0>

080049ee <USBH_Get_StringDesc>:
{
 80049ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80049f0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80049f4:	4614      	mov	r4, r2
 80049f6:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80049fe:	462b      	mov	r3, r5
 8004a00:	2100      	movs	r1, #0
{
 8004a02:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004a04:	f7ff ff01 	bl	800480a <USBH_GetDescriptor>
 8004a08:	b978      	cbnz	r0, 8004a2a <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004a0a:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d10b      	bne.n	8004a2a <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004a12:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004a16:	3b02      	subs	r3, #2
 8004a18:	42bb      	cmp	r3, r7
 8004a1a:	bf28      	it	cs
 8004a1c:	463b      	movcs	r3, r7
 8004a1e:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8004a20:	4602      	mov	r2, r0
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d803      	bhi.n	8004a2e <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8004a26:	2300      	movs	r3, #0
 8004a28:	7023      	strb	r3, [r4, #0]
}
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004a2e:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004a30:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004a32:	7889      	ldrb	r1, [r1, #2]
 8004a34:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	e7f2      	b.n	8004a22 <USBH_Get_StringDesc+0x34>

08004a3c <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004a3c:	7883      	ldrb	r3, [r0, #2]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d106      	bne.n	8004a50 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004a42:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004a44:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004a46:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004a48:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004a4a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a4c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a4e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004a50:	2200      	movs	r2, #0
 8004a52:	4611      	mov	r1, r2
 8004a54:	f7ff be18 	b.w	8004688 <USBH_CtlReq>

08004a58 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004a58:	7883      	ldrb	r3, [r0, #2]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d106      	bne.n	8004a6c <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a5e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004a60:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a62:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004a64:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004a66:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a68:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a6a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4611      	mov	r1, r2
 8004a70:	f7ff be0a 	b.w	8004688 <USBH_CtlReq>

08004a74 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004a74:	7883      	ldrb	r3, [r0, #2]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d106      	bne.n	8004a88 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a7a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004a7c:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a7e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004a80:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004a82:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a84:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a86:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	f7ff bdfc 	b.w	8004688 <USBH_CtlReq>

08004a90 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004a90:	7883      	ldrb	r3, [r0, #2]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d106      	bne.n	8004aa4 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004a96:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004a98:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004a9a:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004a9c:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004a9e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004aa0:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004aa2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	f7ff bdee 	b.w	8004688 <USBH_CtlReq>

08004aac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004aac:	b530      	push	{r4, r5, lr}
 8004aae:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ab0:	2400      	movs	r4, #0
{
 8004ab2:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	9302      	str	r3, [sp, #8]
 8004ab8:	9101      	str	r1, [sp, #4]
 8004aba:	9403      	str	r4, [sp, #12]
 8004abc:	9400      	str	r4, [sp, #0]
 8004abe:	4623      	mov	r3, r4
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f000 febe 	bl	8005844 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004ac8:	4620      	mov	r0, r4
 8004aca:	b005      	add	sp, #20
 8004acc:	bd30      	pop	{r4, r5, pc}

08004ace <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004ace:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ad0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004ad4:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ad6:	2d00      	cmp	r5, #0
{
 8004ad8:	461c      	mov	r4, r3
 8004ada:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ade:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004ae0:	bf18      	it	ne
 8004ae2:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ae4:	9303      	str	r3, [sp, #12]
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9101      	str	r1, [sp, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	4621      	mov	r1, r4
 8004af2:	f000 fea7 	bl	8005844 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004af6:	2000      	movs	r0, #0
 8004af8:	b005      	add	sp, #20
 8004afa:	bd30      	pop	{r4, r5, pc}

08004afc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004afc:	b530      	push	{r4, r5, lr}
 8004afe:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b00:	2400      	movs	r4, #0
{
 8004b02:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b04:	9202      	str	r2, [sp, #8]
 8004b06:	2201      	movs	r2, #1
 8004b08:	9101      	str	r1, [sp, #4]
 8004b0a:	9403      	str	r4, [sp, #12]
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	4623      	mov	r3, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f000 fe97 	bl	8005844 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004b16:	4620      	mov	r0, r4
 8004b18:	b005      	add	sp, #20
 8004b1a:	bd30      	pop	{r4, r5, pc}

08004b1c <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8004b1c:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b1e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004b22:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b24:	2d00      	cmp	r5, #0
{
 8004b26:	461c      	mov	r4, r3
 8004b28:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b2c:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004b2e:	bf18      	it	ne
 8004b30:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	2301      	movs	r3, #1
 8004b36:	9101      	str	r1, [sp, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	4621      	mov	r1, r4
 8004b40:	f000 fe80 	bl	8005844 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004b44:	2000      	movs	r0, #0
 8004b46:	b005      	add	sp, #20
 8004b48:	bd30      	pop	{r4, r5, pc}

08004b4a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004b4a:	b530      	push	{r4, r5, lr}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b50:	2400      	movs	r4, #0
 8004b52:	9202      	str	r2, [sp, #8]
 8004b54:	2201      	movs	r2, #1
 8004b56:	9101      	str	r1, [sp, #4]
 8004b58:	9403      	str	r4, [sp, #12]
 8004b5a:	9200      	str	r2, [sp, #0]
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f000 fe70 	bl	8005844 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004b64:	4620      	mov	r0, r4
 8004b66:	b005      	add	sp, #20
 8004b68:	bd30      	pop	{r4, r5, pc}

08004b6a <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004b6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004b6c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b70:	9402      	str	r4, [sp, #8]
 8004b72:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b76:	9401      	str	r4, [sp, #4]
 8004b78:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b7c:	9400      	str	r4, [sp, #0]
 8004b7e:	f000 fe3b 	bl	80057f8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004b82:	2000      	movs	r0, #0
 8004b84:	b004      	add	sp, #16
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004b88:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004b8a:	f000 fe4d 	bl	8005828 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004b8e:	2000      	movs	r0, #0
 8004b90:	bd08      	pop	{r3, pc}

08004b92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004b92:	b530      	push	{r4, r5, lr}
 8004b94:	2300      	movs	r3, #0
 8004b96:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004b9a:	f854 5b04 	ldr.w	r5, [r4], #4
 8004b9e:	042d      	lsls	r5, r5, #16
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	d407      	bmi.n	8004bb4 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004ba4:	33e0      	adds	r3, #224	; 0xe0
 8004ba6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004baa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8004bae:	b292      	uxth	r2, r2
}
 8004bb0:	b2d0      	uxtb	r0, r2
 8004bb2:	bd30      	pop	{r4, r5, pc}
 8004bb4:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004bb6:	2b0b      	cmp	r3, #11
 8004bb8:	d1ef      	bne.n	8004b9a <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bbe:	e7f7      	b.n	8004bb0 <USBH_AllocPipe+0x1e>

08004bc0 <USBH_FreePipe>:
   if(idx < 11U)
 8004bc0:	290a      	cmp	r1, #10
 8004bc2:	bf9f      	itttt	ls
 8004bc4:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004bc8:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004bcc:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004bd0:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	4770      	bx	lr

08004bd8 <event_handler_duracao>:
    }
}

static void event_handler_duracao(lv_obj_t * slider, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
 8004bd8:	290e      	cmp	r1, #14
{
 8004bda:	b508      	push	{r3, lr}
    if(event == LV_EVENT_VALUE_CHANGED) {
 8004bdc:	d10d      	bne.n	8004bfa <event_handler_duracao+0x22>
    	sprintf(buf, "%u Min.", lv_slider_get_value(slider));
 8004bde:	f00a ffe3 	bl	800fba8 <lv_slider_get_value>
 8004be2:	4906      	ldr	r1, [pc, #24]	; (8004bfc <event_handler_duracao+0x24>)
 8004be4:	4602      	mov	r2, r0
 8004be6:	4806      	ldr	r0, [pc, #24]	; (8004c00 <event_handler_duracao+0x28>)
 8004be8:	f00b fe40 	bl	801086c <sprintf>
        lv_label_set_text(txt_tempo, buf);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <event_handler_duracao+0x2c>)
 8004bee:	4904      	ldr	r1, [pc, #16]	; (8004c00 <event_handler_duracao+0x28>)
 8004bf0:	6818      	ldr	r0, [r3, #0]
    }
}
 8004bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_label_set_text(txt_tempo, buf);
 8004bf6:	f00a bdf3 	b.w	800f7e0 <lv_label_set_text>
 8004bfa:	bd08      	pop	{r3, pc}
 8004bfc:	080f35dc 	.word	0x080f35dc
 8004c00:	20010200 	.word	0x20010200
 8004c04:	20010480 	.word	0x20010480

08004c08 <event_handler_bpm>:
    if(event == LV_EVENT_VALUE_CHANGED) {
 8004c08:	290e      	cmp	r1, #14
{
 8004c0a:	b508      	push	{r3, lr}
    if(event == LV_EVENT_VALUE_CHANGED) {
 8004c0c:	d10d      	bne.n	8004c2a <event_handler_bpm+0x22>
    	sprintf(buf, "%u bpm", lv_slider_get_value(slider));
 8004c0e:	f00a ffcb 	bl	800fba8 <lv_slider_get_value>
 8004c12:	4906      	ldr	r1, [pc, #24]	; (8004c2c <event_handler_bpm+0x24>)
 8004c14:	4602      	mov	r2, r0
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <event_handler_bpm+0x28>)
 8004c18:	f00b fe28 	bl	801086c <sprintf>
        lv_label_set_text(txt_bpm, buf);
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <event_handler_bpm+0x2c>)
 8004c1e:	4904      	ldr	r1, [pc, #16]	; (8004c30 <event_handler_bpm+0x28>)
 8004c20:	6818      	ldr	r0, [r3, #0]
}
 8004c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_label_set_text(txt_bpm, buf);
 8004c26:	f00a bddb 	b.w	800f7e0 <lv_label_set_text>
 8004c2a:	bd08      	pop	{r3, pc}
 8004c2c:	080f35d5 	.word	0x080f35d5
 8004c30:	20010200 	.word	0x20010200
 8004c34:	20010470 	.word	0x20010470

08004c38 <btn_event_btn5>:
	if(event == LV_EVENT_RELEASED) {
 8004c38:	2907      	cmp	r1, #7
{
 8004c3a:	b510      	push	{r4, lr}
	if(event == LV_EVENT_RELEASED) {
 8004c3c:	d11e      	bne.n	8004c7c <btn_event_btn5+0x44>
		printf("debug: ON-OFF: %d\n", lv_btn_get_state(btn));
 8004c3e:	f009 f8d3 	bl	800dde8 <lv_btn_get_state>
 8004c42:	4601      	mov	r1, r0
 8004c44:	480e      	ldr	r0, [pc, #56]	; (8004c80 <btn_event_btn5+0x48>)
 8004c46:	4c0f      	ldr	r4, [pc, #60]	; (8004c84 <btn_event_btn5+0x4c>)
 8004c48:	f00b fde8 	bl	801081c <printf>
		if(btn5) {
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <btn_event_btn5+0x50>)
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <btn_event_btn5+0x54>)
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	b159      	cbz	r1, 8004c6c <btn_event_btn5+0x34>
			btn5 = 0;
 8004c54:	2100      	movs	r1, #0
 8004c56:	6019      	str	r1, [r3, #0]
			lv_label_set_text(txt_on_off, "OFF");
 8004c58:	6810      	ldr	r0, [r2, #0]
 8004c5a:	490d      	ldr	r1, [pc, #52]	; (8004c90 <btn_event_btn5+0x58>)
 8004c5c:	f00a fdc0 	bl	800f7e0 <lv_label_set_text>
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_PR);
 8004c60:	2103      	movs	r1, #3
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 8004c62:	6820      	ldr	r0, [r4, #0]
}
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 8004c68:	f008 bff7 	b.w	800dc5a <lv_btn_set_state>
			btn5 = 1;
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	6019      	str	r1, [r3, #0]
			lv_label_set_text(txt_on_off, "ON");
 8004c70:	6810      	ldr	r0, [r2, #0]
 8004c72:	4908      	ldr	r1, [pc, #32]	; (8004c94 <btn_event_btn5+0x5c>)
 8004c74:	f00a fdb4 	bl	800f7e0 <lv_label_set_text>
			lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_REL);
 8004c78:	2102      	movs	r1, #2
 8004c7a:	e7f2      	b.n	8004c62 <btn_event_btn5+0x2a>
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	bf00      	nop
 8004c80:	080f3585 	.word	0x080f3585
 8004c84:	2001028c 	.word	0x2001028c
 8004c88:	200101f0 	.word	0x200101f0
 8004c8c:	2001047c 	.word	0x2001047c
 8004c90:	080f3598 	.word	0x080f3598
 8004c94:	080f359c 	.word	0x080f359c

08004c98 <btn_event_btn4>:
	if(event == LV_EVENT_RELEASED) {
 8004c98:	2907      	cmp	r1, #7
{
 8004c9a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8004c9c:	d115      	bne.n	8004cca <btn_event_btn4+0x32>
		printf("debug: Distorcia %d\n", lv_btn_get_state(btn));
 8004c9e:	f009 f8a3 	bl	800dde8 <lv_btn_get_state>
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4809      	ldr	r0, [pc, #36]	; (8004ccc <btn_event_btn4+0x34>)
 8004ca6:	f00b fdb9 	bl	801081c <printf>
		if(btn4) {
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <btn_event_btn4+0x38>)
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <btn_event_btn4+0x3c>)
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	b139      	cbz	r1, 8004cc2 <btn_event_btn4+0x2a>
			btn4 = 0;
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_PR);
 8004cb6:	2103      	movs	r1, #3
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 8004cb8:	6810      	ldr	r0, [r2, #0]
}
 8004cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 8004cbe:	f008 bfcc 	b.w	800dc5a <lv_btn_set_state>
			btn4 = 1;
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_REL);
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	e7f6      	b.n	8004cb8 <btn_event_btn4+0x20>
 8004cca:	bd08      	pop	{r3, pc}
 8004ccc:	080f3570 	.word	0x080f3570
 8004cd0:	200101ec 	.word	0x200101ec
 8004cd4:	20010288 	.word	0x20010288

08004cd8 <btn_event_pausa>:
	if(event == LV_EVENT_RELEASED) {
 8004cd8:	2907      	cmp	r1, #7
{
 8004cda:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8004cdc:	d115      	bne.n	8004d0a <btn_event_pausa+0x32>
		printf("debug: Pausa: %d\n", lv_btn_get_state(btn));
 8004cde:	f009 f883 	bl	800dde8 <lv_btn_get_state>
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	4809      	ldr	r0, [pc, #36]	; (8004d0c <btn_event_pausa+0x34>)
 8004ce6:	f00b fd99 	bl	801081c <printf>
		if(btn_pausa) {
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <btn_event_pausa+0x38>)
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <btn_event_pausa+0x3c>)
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	b139      	cbz	r1, 8004d02 <btn_event_pausa+0x2a>
			btn_pausa = 0;
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn3, LV_BTN_STATE_TGL_PR);
 8004cf6:	2103      	movs	r1, #3
			lv_btn_set_state(imgbtn3, LV_BTN_STATE_TGL_REL);
 8004cf8:	6810      	ldr	r0, [r2, #0]
}
 8004cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn3, LV_BTN_STATE_TGL_REL);
 8004cfe:	f008 bfac 	b.w	800dc5a <lv_btn_set_state>
			btn_pausa = 1;
 8004d02:	2101      	movs	r1, #1
 8004d04:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn3, LV_BTN_STATE_TGL_REL);
 8004d06:	2102      	movs	r1, #2
 8004d08:	e7f6      	b.n	8004cf8 <btn_event_pausa+0x20>
 8004d0a:	bd08      	pop	{r3, pc}
 8004d0c:	080f35c3 	.word	0x080f35c3
 8004d10:	200101fc 	.word	0x200101fc
 8004d14:	20010284 	.word	0x20010284

08004d18 <btn_event_inicio>:
	if(event == LV_EVENT_RELEASED) {
 8004d18:	2907      	cmp	r1, #7
{
 8004d1a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8004d1c:	d115      	bne.n	8004d4a <btn_event_inicio+0x32>
		printf("debug: Inicio: %d\n", lv_btn_get_state(btn));
 8004d1e:	f009 f863 	bl	800dde8 <lv_btn_get_state>
 8004d22:	4601      	mov	r1, r0
 8004d24:	4809      	ldr	r0, [pc, #36]	; (8004d4c <btn_event_inicio+0x34>)
 8004d26:	f00b fd79 	bl	801081c <printf>
		if(btn_inicio) {
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <btn_event_inicio+0x38>)
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <btn_event_inicio+0x3c>)
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	b139      	cbz	r1, 8004d42 <btn_event_inicio+0x2a>
			btn_inicio = 0;
 8004d32:	2100      	movs	r1, #0
 8004d34:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn2, LV_BTN_STATE_TGL_PR);
 8004d36:	2103      	movs	r1, #3
			lv_btn_set_state(imgbtn2, LV_BTN_STATE_TGL_REL);
 8004d38:	6810      	ldr	r0, [r2, #0]
}
 8004d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn2, LV_BTN_STATE_TGL_REL);
 8004d3e:	f008 bf8c 	b.w	800dc5a <lv_btn_set_state>
			btn_inicio = 1;
 8004d42:	2101      	movs	r1, #1
 8004d44:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn2, LV_BTN_STATE_TGL_REL);
 8004d46:	2102      	movs	r1, #2
 8004d48:	e7f6      	b.n	8004d38 <btn_event_inicio+0x20>
 8004d4a:	bd08      	pop	{r3, pc}
 8004d4c:	080f35b0 	.word	0x080f35b0
 8004d50:	200101f8 	.word	0x200101f8
 8004d54:	20010280 	.word	0x20010280

08004d58 <btn_event_home>:
	if(event == LV_EVENT_RELEASED) {
 8004d58:	2907      	cmp	r1, #7
{
 8004d5a:	b508      	push	{r3, lr}
	if(event == LV_EVENT_RELEASED) {
 8004d5c:	d115      	bne.n	8004d8a <btn_event_home+0x32>
		printf("debug: Home: %d\n", lv_btn_get_state(btn));
 8004d5e:	f009 f843 	bl	800dde8 <lv_btn_get_state>
 8004d62:	4601      	mov	r1, r0
 8004d64:	4809      	ldr	r0, [pc, #36]	; (8004d8c <btn_event_home+0x34>)
 8004d66:	f00b fd59 	bl	801081c <printf>
		if(btn_home) {
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <btn_event_home+0x38>)
 8004d6c:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <btn_event_home+0x3c>)
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	b139      	cbz	r1, 8004d82 <btn_event_home+0x2a>
			btn_home = 0;
 8004d72:	2100      	movs	r1, #0
 8004d74:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn1, LV_BTN_STATE_TGL_PR);
 8004d76:	2103      	movs	r1, #3
			lv_btn_set_state(imgbtn1, LV_BTN_STATE_TGL_REL);
 8004d78:	6810      	ldr	r0, [r2, #0]
}
 8004d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			lv_btn_set_state(imgbtn1, LV_BTN_STATE_TGL_REL);
 8004d7e:	f008 bf6c 	b.w	800dc5a <lv_btn_set_state>
			btn_home = 1;
 8004d82:	2101      	movs	r1, #1
 8004d84:	6019      	str	r1, [r3, #0]
			lv_btn_set_state(imgbtn1, LV_BTN_STATE_TGL_REL);
 8004d86:	2102      	movs	r1, #2
 8004d88:	e7f6      	b.n	8004d78 <btn_event_home+0x20>
 8004d8a:	bd08      	pop	{r3, pc}
 8004d8c:	080f359f 	.word	0x080f359f
 8004d90:	200101f4 	.word	0x200101f4
 8004d94:	2001027c 	.word	0x2001027c

08004d98 <simulacare>:
{
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lv_style_copy(&style_txt1, &lv_style_plain);
 8004d9c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800514c <simulacare+0x3b4>
 8004da0:	48d3      	ldr	r0, [pc, #844]	; (80050f0 <simulacare+0x358>)
    lv_style_copy(&style_bg, &lv_style_pretty);
 8004da2:	4fd4      	ldr	r7, [pc, #848]	; (80050f4 <simulacare+0x35c>)
    lv_style_copy(&style_indic, &lv_style_pretty_color);
 8004da4:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 8005150 <simulacare+0x3b8>
{
 8004da8:	b085      	sub	sp, #20
	lv_style_copy(&style_txt1, &lv_style_plain);
 8004daa:	4659      	mov	r1, fp
 8004dac:	f003 fa1a 	bl	80081e4 <lv_style_copy>
	style_txt1.text.font = &lv_font_roboto_22;
 8004db0:	4acf      	ldr	r2, [pc, #828]	; (80050f0 <simulacare+0x358>)
 8004db2:	4bd1      	ldr	r3, [pc, #836]	; (80050f8 <simulacare+0x360>)
 8004db4:	6353      	str	r3, [r2, #52]	; 0x34
    lv_style_copy(&style_bg, &lv_style_pretty);
 8004db6:	4bd1      	ldr	r3, [pc, #836]	; (80050fc <simulacare+0x364>)
 8004db8:	9303      	str	r3, [sp, #12]
	style_txt1.text.letter_space = 0;
 8004dba:	2400      	movs	r4, #0
	style_txt1.text.color = LV_COLOR_GRAY;
 8004dbc:	25ff      	movs	r5, #255	; 0xff
 8004dbe:	f04f 0980 	mov.w	r9, #128	; 0x80
    lv_style_copy(&style_bg, &lv_style_pretty);
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4638      	mov	r0, r7
	style_txt1.text.letter_space = 0;
 8004dc6:	8714      	strh	r4, [r2, #56]	; 0x38
	style_txt1.text.line_space = 0;
 8004dc8:	8754      	strh	r4, [r2, #58]	; 0x3a
	style_txt1.text.color = LV_COLOR_GRAY;
 8004dca:	f882 902c 	strb.w	r9, [r2, #44]	; 0x2c
 8004dce:	f882 902d 	strb.w	r9, [r2, #45]	; 0x2d
 8004dd2:	f882 902e 	strb.w	r9, [r2, #46]	; 0x2e
 8004dd6:	f882 502f 	strb.w	r5, [r2, #47]	; 0x2f
    style_bg.body.radius = LV_RADIUS_CIRCLE;
 8004dda:	f647 4618 	movw	r6, #31768	; 0x7c18
    lv_style_copy(&style_bg, &lv_style_pretty);
 8004dde:	f003 fa01 	bl	80081e4 <lv_style_copy>
    lv_style_copy(&style_indic, &lv_style_pretty_color);
 8004de2:	4640      	mov	r0, r8
 8004de4:	49c6      	ldr	r1, [pc, #792]	; (8005100 <simulacare+0x368>)
    style_bg.body.main_color =  LV_COLOR_BLACK;
 8004de6:	713c      	strb	r4, [r7, #4]
 8004de8:	717c      	strb	r4, [r7, #5]
 8004dea:	71bc      	strb	r4, [r7, #6]
 8004dec:	71fd      	strb	r5, [r7, #7]
    style_bg.body.grad_color =  LV_COLOR_GRAY;
 8004dee:	f887 9008 	strb.w	r9, [r7, #8]
 8004df2:	f887 9009 	strb.w	r9, [r7, #9]
 8004df6:	f887 900a 	strb.w	r9, [r7, #10]
 8004dfa:	72fd      	strb	r5, [r7, #11]
    style_bg.body.radius = LV_RADIUS_CIRCLE;
 8004dfc:	81be      	strh	r6, [r7, #12]
    style_bg.body.border.color = LV_COLOR_WHITE;
 8004dfe:	743d      	strb	r5, [r7, #16]
 8004e00:	747d      	strb	r5, [r7, #17]
 8004e02:	74bd      	strb	r5, [r7, #18]
 8004e04:	74fd      	strb	r5, [r7, #19]
    lv_style_copy(&style_indic, &lv_style_pretty_color);
 8004e06:	f003 f9ed 	bl	80081e4 <lv_style_copy>
    style_indic.body.padding.left = 5;
 8004e0a:	f04f 0305 	mov.w	r3, #5
 8004e0e:	f8a8 3024 	strh.w	r3, [r8, #36]	; 0x24
    style_indic.body.padding.right = 5;
 8004e12:	f8a8 3026 	strh.w	r3, [r8, #38]	; 0x26
    style_indic.body.padding.top = 5;
 8004e16:	f8a8 3020 	strh.w	r3, [r8, #32]
    style_indic.body.padding.bottom = 5;
 8004e1a:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
    lv_style_copy(&style_knob, &lv_style_pretty);
 8004e1e:	9b03      	ldr	r3, [sp, #12]
    style_indic.body.shadow.color = style_indic.body.main_color;
 8004e20:	f8d8 2004 	ldr.w	r2, [r8, #4]
    lv_style_copy(&style_knob, &lv_style_pretty);
 8004e24:	48b7      	ldr	r0, [pc, #732]	; (8005104 <simulacare+0x36c>)
    style_indic.body.shadow.color = style_indic.body.main_color;
 8004e26:	f8c8 2018 	str.w	r2, [r8, #24]
    style_indic.body.shadow.width = 10;
 8004e2a:	f04f 0a0a 	mov.w	sl, #10
    lv_style_copy(&style_knob, &lv_style_pretty);
 8004e2e:	4619      	mov	r1, r3
    style_indic.body.radius = LV_RADIUS_CIRCLE;
 8004e30:	f8a8 600c 	strh.w	r6, [r8, #12]
    style_indic.body.shadow.width = 10;
 8004e34:	f8a8 a01c 	strh.w	sl, [r8, #28]
    lv_style_copy(&style_knob, &lv_style_pretty);
 8004e38:	f003 f9d4 	bl	80081e4 <lv_style_copy>
    style_knob.body.radius = LV_RADIUS_CIRCLE;
 8004e3c:	4bb1      	ldr	r3, [pc, #708]	; (8005104 <simulacare+0x36c>)
 8004e3e:	819e      	strh	r6, [r3, #12]
	lv_style_copy(&style_cont, &lv_style_plain);
 8004e40:	4eb1      	ldr	r6, [pc, #708]	; (8005108 <simulacare+0x370>)
    style_knob.body.opa = 255;
 8004e42:	739d      	strb	r5, [r3, #14]
	lv_style_copy(&style_cont, &lv_style_plain);
 8004e44:	4659      	mov	r1, fp
 8004e46:	4630      	mov	r0, r6
    style_knob.body.padding.top = 10;
 8004e48:	f8a3 a020 	strh.w	sl, [r3, #32]
    style_knob.body.padding.bottom = 10;
 8004e4c:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
	lv_style_copy(&style_cont, &lv_style_plain);
 8004e50:	f003 f9c8 	bl	80081e4 <lv_style_copy>
	style_cont.body.radius = 15;
 8004e54:	230f      	movs	r3, #15
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004e56:	4621      	mov	r1, r4
 8004e58:	4620      	mov	r0, r4
	style_cont.body.radius = 15;
 8004e5a:	81b3      	strh	r3, [r6, #12]
   	style_cont.body.main_color = LV_COLOR_WHITE;
 8004e5c:	7135      	strb	r5, [r6, #4]
 8004e5e:	7175      	strb	r5, [r6, #5]
 8004e60:	71b5      	strb	r5, [r6, #6]
 8004e62:	71f5      	strb	r5, [r6, #7]
	style_cont.body.grad_color = LV_COLOR_WHITE;
 8004e64:	7235      	strb	r5, [r6, #8]
 8004e66:	7275      	strb	r5, [r6, #9]
 8004e68:	72b5      	strb	r5, [r6, #10]
 8004e6a:	72f5      	strb	r5, [r6, #11]
	style_cont.body.shadow.width = 10;
 8004e6c:	f8a6 a01c 	strh.w	sl, [r6, #28]
	style_cont.body.shadow.color = LV_COLOR_GRAY;
 8004e70:	f886 9018 	strb.w	r9, [r6, #24]
 8004e74:	f886 9019 	strb.w	r9, [r6, #25]
 8004e78:	f886 901a 	strb.w	r9, [r6, #26]
 8004e7c:	76f5      	strb	r5, [r6, #27]
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004e7e:	f002 fb75 	bl	800756c <lv_obj_create>
 8004e82:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8005154 <simulacare+0x3bc>
	lv_style_copy(&style_fundo, &lv_style_plain_color);
 8004e86:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8005158 <simulacare+0x3c0>
	Tela_RCP = lv_obj_create(NULL, NULL);
 8004e8a:	f8cb 0000 	str.w	r0, [fp]
	lv_style_copy(&style_fundo, &lv_style_plain_color);
 8004e8e:	499f      	ldr	r1, [pc, #636]	; (800510c <simulacare+0x374>)
 8004e90:	4650      	mov	r0, sl
 8004e92:	f003 f9a7 	bl	80081e4 <lv_style_copy>
	style_fundo.body.main_color = LV_COLOR_MAKE(220, 220, 220);
 8004e96:	f04f 09dc 	mov.w	r9, #220	; 0xdc
	lv_obj_set_style(Tela_RCP, &style_fundo); 					// Configura o estilo criado
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	f8db 0000 	ldr.w	r0, [fp]
	style_fundo.body.main_color = LV_COLOR_MAKE(220, 220, 220);
 8004ea0:	f88a 9004 	strb.w	r9, [sl, #4]
 8004ea4:	f88a 9005 	strb.w	r9, [sl, #5]
 8004ea8:	f88a 9006 	strb.w	r9, [sl, #6]
 8004eac:	f88a 5007 	strb.w	r5, [sl, #7]
	style_fundo.body.grad_color = LV_COLOR_MAKE(220, 220, 220);
 8004eb0:	f88a 9008 	strb.w	r9, [sl, #8]
 8004eb4:	f88a 9009 	strb.w	r9, [sl, #9]
 8004eb8:	f88a 900a 	strb.w	r9, [sl, #10]
 8004ebc:	f88a 500b 	strb.w	r5, [sl, #11]
	lv_obj_set_style(Tela_RCP, &style_fundo); 					// Configura o estilo criado
 8004ec0:	f002 fd33 	bl	800792a <lv_obj_set_style>
	cont1 = lv_cont_create(Tela_RCP, NULL);
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	f8db 0000 	ldr.w	r0, [fp]
 8004eca:	4d91      	ldr	r5, [pc, #580]	; (8005110 <simulacare+0x378>)
 8004ecc:	f009 f9ca 	bl	800e264 <lv_cont_create>
	lv_obj_set_style(cont1, &style_cont);
 8004ed0:	4631      	mov	r1, r6
	cont1 = lv_cont_create(Tela_RCP, NULL);
 8004ed2:	6028      	str	r0, [r5, #0]
	lv_obj_align(cont1, NULL, LV_ALIGN_IN_TOP_LEFT, 40, 30);
 8004ed4:	f04f 0a1e 	mov.w	sl, #30
	lv_obj_set_style(cont1, &style_cont);
 8004ed8:	f002 fd27 	bl	800792a <lv_obj_set_style>
	lv_obj_set_size(cont1, 220, 430);
 8004edc:	4649      	mov	r1, r9
 8004ede:	6828      	ldr	r0, [r5, #0]
    lv_img_set_src(img_frequencia, &Barra);
 8004ee0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800515c <simulacare+0x3c4>
	lv_obj_set_size(cont1, 220, 430);
 8004ee4:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8004ee8:	f002 fc88 	bl	80077fc <lv_obj_set_size>
	lv_obj_align(cont1, NULL, LV_ALIGN_IN_TOP_LEFT, 40, 30);
 8004eec:	f8cd a000 	str.w	sl, [sp]
 8004ef0:	2328      	movs	r3, #40	; 0x28
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	6828      	ldr	r0, [r5, #0]
 8004ef8:	f002 f916 	bl	8007128 <lv_obj_align>
	lv_cont_set_layout(cont1, LV_LAYOUT_COL_M);
 8004efc:	6828      	ldr	r0, [r5, #0]
	cont2 = lv_cont_create(Tela_RCP, NULL);
 8004efe:	4d85      	ldr	r5, [pc, #532]	; (8005114 <simulacare+0x37c>)
	lv_cont_set_layout(cont1, LV_LAYOUT_COL_M);
 8004f00:	2103      	movs	r1, #3
 8004f02:	f009 fa11 	bl	800e328 <lv_cont_set_layout>
	cont2 = lv_cont_create(Tela_RCP, NULL);
 8004f06:	4621      	mov	r1, r4
 8004f08:	f8db 0000 	ldr.w	r0, [fp]
 8004f0c:	f009 f9aa 	bl	800e264 <lv_cont_create>
	lv_obj_set_style(cont2, &style_cont);
 8004f10:	4631      	mov	r1, r6
	cont2 = lv_cont_create(Tela_RCP, NULL);
 8004f12:	6028      	str	r0, [r5, #0]
	lv_obj_set_style(cont2, &style_cont);
 8004f14:	f002 fd09 	bl	800792a <lv_obj_set_style>
	lv_obj_set_size(cont2, 420, 130);
 8004f18:	6828      	ldr	r0, [r5, #0]
    bpm = lv_slider_create(Tela_RCP, NULL);
 8004f1a:	4e7f      	ldr	r6, [pc, #508]	; (8005118 <simulacare+0x380>)
	lv_obj_set_size(cont2, 420, 130);
 8004f1c:	2282      	movs	r2, #130	; 0x82
 8004f1e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004f22:	f002 fc6b 	bl	80077fc <lv_obj_set_size>
	lv_obj_align(cont2, NULL, LV_ALIGN_IN_TOP_RIGHT, -35, 330);
 8004f26:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8004f32:	4621      	mov	r1, r4
 8004f34:	6828      	ldr	r0, [r5, #0]
 8004f36:	f002 f8f7 	bl	8007128 <lv_obj_align>
	lv_cont_set_layout(cont2, LV_LAYOUT_COL_M);
 8004f3a:	6828      	ldr	r0, [r5, #0]
    img_pulmao = lv_img_create(Tela_RCP, NULL);
 8004f3c:	4d77      	ldr	r5, [pc, #476]	; (800511c <simulacare+0x384>)
	lv_cont_set_layout(cont2, LV_LAYOUT_COL_M);
 8004f3e:	2103      	movs	r1, #3
 8004f40:	f009 f9f2 	bl	800e328 <lv_cont_set_layout>
    img_pulmao = lv_img_create(Tela_RCP, NULL);
 8004f44:	4621      	mov	r1, r4
 8004f46:	f8db 0000 	ldr.w	r0, [fp]
 8004f4a:	f009 fe35 	bl	800ebb8 <lv_img_create>
    lv_img_set_src(img_pulmao, &Pulmao);
 8004f4e:	4974      	ldr	r1, [pc, #464]	; (8005120 <simulacare+0x388>)
    img_pulmao = lv_img_create(Tela_RCP, NULL);
 8004f50:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_pulmao, &Pulmao);
 8004f52:	f009 fda2 	bl	800ea9a <lv_img_set_src>
    lv_img_set_auto_size(img_pulmao, true);
 8004f56:	6828      	ldr	r0, [r5, #0]
 8004f58:	2101      	movs	r1, #1
 8004f5a:	f009 fd8e 	bl	800ea7a <lv_img_set_auto_size>
    lv_obj_set_pos(img_pulmao, 60, 250);
 8004f5e:	22fa      	movs	r2, #250	; 0xfa
 8004f60:	6828      	ldr	r0, [r5, #0]
    img_coracao = lv_img_create(Tela_RCP, NULL);
 8004f62:	4d70      	ldr	r5, [pc, #448]	; (8005124 <simulacare+0x38c>)
    lv_obj_set_pos(img_pulmao, 60, 250);
 8004f64:	213c      	movs	r1, #60	; 0x3c
 8004f66:	f002 f88a 	bl	800707e <lv_obj_set_pos>
    img_coracao = lv_img_create(Tela_RCP, NULL);
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	f8db 0000 	ldr.w	r0, [fp]
 8004f70:	f009 fe22 	bl	800ebb8 <lv_img_create>
    lv_img_set_src(img_coracao, &Coracao);
 8004f74:	496c      	ldr	r1, [pc, #432]	; (8005128 <simulacare+0x390>)
    img_coracao = lv_img_create(Tela_RCP, NULL);
 8004f76:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_coracao, &Coracao);
 8004f78:	f009 fd8f 	bl	800ea9a <lv_img_set_src>
    lv_img_set_auto_size(img_coracao, true);
 8004f7c:	6828      	ldr	r0, [r5, #0]
 8004f7e:	2101      	movs	r1, #1
 8004f80:	f009 fd7b 	bl	800ea7a <lv_img_set_auto_size>
    lv_obj_set_pos(img_coracao, 70, 50);
 8004f84:	2232      	movs	r2, #50	; 0x32
 8004f86:	6828      	ldr	r0, [r5, #0]
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 8004f88:	4d68      	ldr	r5, [pc, #416]	; (800512c <simulacare+0x394>)
    lv_obj_set_pos(img_coracao, 70, 50);
 8004f8a:	2146      	movs	r1, #70	; 0x46
 8004f8c:	f002 f877 	bl	800707e <lv_obj_set_pos>
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 8004f90:	4621      	mov	r1, r4
 8004f92:	f8db 0000 	ldr.w	r0, [fp]
 8004f96:	f009 fe0f 	bl	800ebb8 <lv_img_create>
    lv_img_set_src(img_frequencia, &Barra);
 8004f9a:	4649      	mov	r1, r9
    img_frequencia = lv_img_create(Tela_RCP, NULL);
 8004f9c:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_frequencia, &Barra);
 8004f9e:	f009 fd7c 	bl	800ea9a <lv_img_set_src>
    lv_img_set_auto_size(img_frequencia, true);
 8004fa2:	6828      	ldr	r0, [r5, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f009 fd68 	bl	800ea7a <lv_img_set_auto_size>
    lv_obj_set_pos(img_frequencia, 340, 140);
 8004faa:	228c      	movs	r2, #140	; 0x8c
 8004fac:	6828      	ldr	r0, [r5, #0]
	txt_freq = lv_label_create(Tela_RCP, NULL);
 8004fae:	4d60      	ldr	r5, [pc, #384]	; (8005130 <simulacare+0x398>)
    lv_obj_set_pos(img_frequencia, 340, 140);
 8004fb0:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004fb4:	f002 f863 	bl	800707e <lv_obj_set_pos>
	txt_freq = lv_label_create(Tela_RCP, NULL);
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f8db 0000 	ldr.w	r0, [fp]
 8004fbe:	f00a fcb9 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_freq, &style_txt1);
 8004fc2:	494b      	ldr	r1, [pc, #300]	; (80050f0 <simulacare+0x358>)
	txt_freq = lv_label_create(Tela_RCP, NULL);
 8004fc4:	6028      	str	r0, [r5, #0]
    lv_obj_set_style(txt_freq, &style_txt1);
 8004fc6:	f002 fcb0 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_freq, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 8004fca:	4621      	mov	r1, r4
 8004fcc:	6828      	ldr	r0, [r5, #0]
 8004fce:	f00a fc5b 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_freq, true); 						// Ativa recolorizar por comandos no texto
 8004fd2:	6828      	ldr	r0, [r5, #0]
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	f00a fc99 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_freq, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8004fda:	6828      	ldr	r0, [r5, #0]
 8004fdc:	2102      	movs	r1, #2
 8004fde:	f00a f8f7 	bl	800f1d0 <lv_label_set_align>
    lv_label_set_text(txt_freq, "Frequencia");
 8004fe2:	6828      	ldr	r0, [r5, #0]
 8004fe4:	4953      	ldr	r1, [pc, #332]	; (8005134 <simulacare+0x39c>)
 8004fe6:	f00a fbfb 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_freq, 500); 								// Configuura o comprimento
 8004fea:	6828      	ldr	r0, [r5, #0]
 8004fec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ff0:	f002 fc4e 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_freq, NULL, LV_ALIGN_IN_TOP_MID, 20, 148); 	// Alinha ao centro
 8004ff4:	2394      	movs	r3, #148	; 0x94
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	2314      	movs	r3, #20
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	6828      	ldr	r0, [r5, #0]
	txt_bpm = lv_label_create(Tela_RCP, NULL);
 8005000:	4d4d      	ldr	r5, [pc, #308]	; (8005138 <simulacare+0x3a0>)
    lv_obj_align(txt_freq, NULL, LV_ALIGN_IN_TOP_MID, 20, 148); 	// Alinha ao centro
 8005002:	f002 f891 	bl	8007128 <lv_obj_align>
    bpm = lv_slider_create(Tela_RCP, NULL);
 8005006:	4621      	mov	r1, r4
 8005008:	f8db 0000 	ldr.w	r0, [fp]
 800500c:	f00a fd68 	bl	800fae0 <lv_slider_create>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t * slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 8005010:	22c8      	movs	r2, #200	; 0xc8
 8005012:	213c      	movs	r1, #60	; 0x3c
 8005014:	6030      	str	r0, [r6, #0]
 8005016:	f008 fbd7 	bl	800d7c8 <lv_bar_set_range>
    lv_obj_set_width(bpm, 320);
 800501a:	6830      	ldr	r0, [r6, #0]
 800501c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005020:	f002 fc36 	bl	8007890 <lv_obj_set_width>
    lv_obj_set_height(bpm, 25);
 8005024:	6830      	ldr	r0, [r6, #0]
 8005026:	2119      	movs	r1, #25
 8005028:	f002 fc39 	bl	800789e <lv_obj_set_height>
    lv_slider_set_style(bpm, LV_SLIDER_STYLE_BG, &style_bg);
 800502c:	463a      	mov	r2, r7
 800502e:	4621      	mov	r1, r4
 8005030:	6830      	ldr	r0, [r6, #0]
 8005032:	f00a fd39 	bl	800faa8 <lv_slider_set_style>
    lv_slider_set_style(bpm, LV_SLIDER_STYLE_INDIC,&style_indic);
 8005036:	4642      	mov	r2, r8
 8005038:	6830      	ldr	r0, [r6, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	f00a fd34 	bl	800faa8 <lv_slider_set_style>
    lv_slider_set_style(bpm, LV_SLIDER_STYLE_KNOB, &style_knob);
 8005040:	6830      	ldr	r0, [r6, #0]
 8005042:	4a30      	ldr	r2, [pc, #192]	; (8005104 <simulacare+0x36c>)
 8005044:	2102      	movs	r1, #2
 8005046:	f00a fd2f 	bl	800faa8 <lv_slider_set_style>
    lv_obj_align(bpm, NULL, LV_ALIGN_CENTER, 120, -39);
 800504a:	f06f 0326 	mvn.w	r3, #38	; 0x26
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4622      	mov	r2, r4
 8005052:	2378      	movs	r3, #120	; 0x78
 8005054:	4621      	mov	r1, r4
 8005056:	6830      	ldr	r0, [r6, #0]
 8005058:	f002 f866 	bl	8007128 <lv_obj_align>
    lv_obj_set_event_cb(bpm, event_handler_bpm);
 800505c:	6830      	ldr	r0, [r6, #0]
 800505e:	4937      	ldr	r1, [pc, #220]	; (800513c <simulacare+0x3a4>)
 8005060:	f001 ff20 	bl	8006ea4 <lv_obj_set_event_cb>
	txt_bpm = lv_label_create(Tela_RCP, NULL);
 8005064:	4621      	mov	r1, r4
 8005066:	f8db 0000 	ldr.w	r0, [fp]
 800506a:	f00a fc63 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_bpm, &style_txt1);
 800506e:	4920      	ldr	r1, [pc, #128]	; (80050f0 <simulacare+0x358>)
	txt_bpm = lv_label_create(Tela_RCP, NULL);
 8005070:	6028      	str	r0, [r5, #0]
    lv_obj_set_style(txt_bpm, &style_txt1);
 8005072:	f002 fc5a 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_bpm, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 8005076:	4621      	mov	r1, r4
 8005078:	6828      	ldr	r0, [r5, #0]
 800507a:	f00a fc05 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_bpm, true); 						// Ativa recolorizar por comandos no texto
 800507e:	6828      	ldr	r0, [r5, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	f00a fc43 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_bpm, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8005086:	2102      	movs	r1, #2
 8005088:	6828      	ldr	r0, [r5, #0]
 800508a:	f00a f8a1 	bl	800f1d0 <lv_label_set_align>
    sprintf(buf, "%u bpm", lv_slider_get_value(bpm));
 800508e:	6830      	ldr	r0, [r6, #0]
 8005090:	4e2b      	ldr	r6, [pc, #172]	; (8005140 <simulacare+0x3a8>)
 8005092:	f00a fd89 	bl	800fba8 <lv_slider_get_value>
 8005096:	492b      	ldr	r1, [pc, #172]	; (8005144 <simulacare+0x3ac>)
 8005098:	4602      	mov	r2, r0
 800509a:	4630      	mov	r0, r6
 800509c:	f00b fbe6 	bl	801086c <sprintf>
    lv_label_set_text(txt_bpm, buf);
 80050a0:	4631      	mov	r1, r6
 80050a2:	6828      	ldr	r0, [r5, #0]
 80050a4:	f00a fb9c 	bl	800f7e0 <lv_label_set_text>
    lv_label_set_text(txt_bpm, buf);
 80050a8:	4631      	mov	r1, r6
 80050aa:	6828      	ldr	r0, [r5, #0]
 80050ac:	f00a fb98 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_bpm, 500); 								// Configuura o comprimento
 80050b0:	6828      	ldr	r0, [r5, #0]
 80050b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80050b6:	f002 fbeb 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_bpm, NULL, LV_ALIGN_IN_TOP_MID, 340, 188); 	// Alinha ao centro
 80050ba:	23bc      	movs	r3, #188	; 0xbc
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80050c4:	4621      	mov	r1, r4
 80050c6:	6828      	ldr	r0, [r5, #0]
    img_duracao = lv_img_create(Tela_RCP, NULL);
 80050c8:	4d1f      	ldr	r5, [pc, #124]	; (8005148 <simulacare+0x3b0>)
    lv_obj_align(txt_bpm, NULL, LV_ALIGN_IN_TOP_MID, 340, 188); 	// Alinha ao centro
 80050ca:	f002 f82d 	bl	8007128 <lv_obj_align>
    img_duracao = lv_img_create(Tela_RCP, NULL);
 80050ce:	4621      	mov	r1, r4
 80050d0:	f8db 0000 	ldr.w	r0, [fp]
 80050d4:	f009 fd70 	bl	800ebb8 <lv_img_create>
    lv_img_set_src(img_duracao, &Barra);
 80050d8:	4649      	mov	r1, r9
    img_duracao = lv_img_create(Tela_RCP, NULL);
 80050da:	6028      	str	r0, [r5, #0]
    lv_img_set_src(img_duracao, &Barra);
 80050dc:	f009 fcdd 	bl	800ea9a <lv_img_set_src>
    lv_img_set_auto_size(img_duracao, true);
 80050e0:	6828      	ldr	r0, [r5, #0]
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 80050e2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8005160 <simulacare+0x3c8>
    lv_img_set_auto_size(img_duracao, true);
 80050e6:	2101      	movs	r1, #1
 80050e8:	f009 fcc7 	bl	800ea7a <lv_img_set_auto_size>
    lv_obj_set_pos(img_duracao, 340, 50);
 80050ec:	2232      	movs	r2, #50	; 0x32
 80050ee:	e039      	b.n	8005164 <simulacare+0x3cc>
 80050f0:	20010420 	.word	0x20010420
 80050f4:	20010290 	.word	0x20010290
 80050f8:	20000110 	.word	0x20000110
 80050fc:	20015b80 	.word	0x20015b80
 8005100:	20015a40 	.word	0x20015a40
 8005104:	200103d0 	.word	0x200103d0
 8005108:	200102e0 	.word	0x200102e0
 800510c:	20015e00 	.word	0x20015e00
 8005110:	20010264 	.word	0x20010264
 8005114:	20010268 	.word	0x20010268
 8005118:	20015398 	.word	0x20015398
 800511c:	20010278 	.word	0x20010278
 8005120:	200000b8 	.word	0x200000b8
 8005124:	2001026c 	.word	0x2001026c
 8005128:	20000058 	.word	0x20000058
 800512c:	20010274 	.word	0x20010274
 8005130:	20010478 	.word	0x20010478
 8005134:	080f35e4 	.word	0x080f35e4
 8005138:	20010470 	.word	0x20010470
 800513c:	08004c09 	.word	0x08004c09
 8005140:	20010200 	.word	0x20010200
 8005144:	080f35d5 	.word	0x080f35d5
 8005148:	20010270 	.word	0x20010270
 800514c:	20015cc0 	.word	0x20015cc0
 8005150:	20010380 	.word	0x20010380
 8005154:	200101e8 	.word	0x200101e8
 8005158:	20010330 	.word	0x20010330
 800515c:	20000028 	.word	0x20000028
 8005160:	20010280 	.word	0x20010280
 8005164:	6828      	ldr	r0, [r5, #0]
	txt_dur = lv_label_create(Tela_RCP, NULL);
 8005166:	4dd7      	ldr	r5, [pc, #860]	; (80054c4 <simulacare+0x72c>)
    lv_obj_set_pos(img_duracao, 340, 50);
 8005168:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800516c:	f001 ff87 	bl	800707e <lv_obj_set_pos>
	txt_dur = lv_label_create(Tela_RCP, NULL);
 8005170:	4621      	mov	r1, r4
 8005172:	f8db 0000 	ldr.w	r0, [fp]
 8005176:	f00a fbdd 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_dur, &style_txt1);
 800517a:	49d3      	ldr	r1, [pc, #844]	; (80054c8 <simulacare+0x730>)
	txt_dur = lv_label_create(Tela_RCP, NULL);
 800517c:	6028      	str	r0, [r5, #0]
    lv_obj_set_style(txt_dur, &style_txt1);
 800517e:	f002 fbd4 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_dur, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 8005182:	4621      	mov	r1, r4
 8005184:	6828      	ldr	r0, [r5, #0]
 8005186:	f00a fb7f 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_dur, true); 						// Ativa recolorizar por comandos no texto
 800518a:	6828      	ldr	r0, [r5, #0]
 800518c:	2101      	movs	r1, #1
 800518e:	f00a fbbd 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_dur, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8005192:	6828      	ldr	r0, [r5, #0]
 8005194:	2102      	movs	r1, #2
 8005196:	f00a f81b 	bl	800f1d0 <lv_label_set_align>
    lv_label_set_text(txt_dur, "Duracao");
 800519a:	6828      	ldr	r0, [r5, #0]
 800519c:	49cb      	ldr	r1, [pc, #812]	; (80054cc <simulacare+0x734>)
 800519e:	f00a fb1f 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_dur, 500); 							// Configuura o comprimento
 80051a2:	6828      	ldr	r0, [r5, #0]
 80051a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80051a8:	f002 fb72 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_dur, NULL, LV_ALIGN_IN_TOP_MID, 5, 60); 	// Alinha ao centro
 80051ac:	233c      	movs	r3, #60	; 0x3c
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	2202      	movs	r2, #2
 80051b2:	2305      	movs	r3, #5
 80051b4:	4621      	mov	r1, r4
 80051b6:	6828      	ldr	r0, [r5, #0]
    duracao = lv_slider_create(Tela_RCP, NULL);
 80051b8:	4dc5      	ldr	r5, [pc, #788]	; (80054d0 <simulacare+0x738>)
    lv_obj_align(txt_dur, NULL, LV_ALIGN_IN_TOP_MID, 5, 60); 	// Alinha ao centro
 80051ba:	f001 ffb5 	bl	8007128 <lv_obj_align>
    duracao = lv_slider_create(Tela_RCP, NULL);
 80051be:	4621      	mov	r1, r4
 80051c0:	f8db 0000 	ldr.w	r0, [fp]
 80051c4:	f00a fc8c 	bl	800fae0 <lv_slider_create>
 80051c8:	4652      	mov	r2, sl
 80051ca:	2101      	movs	r1, #1
 80051cc:	6028      	str	r0, [r5, #0]
 80051ce:	f008 fafb 	bl	800d7c8 <lv_bar_set_range>
    lv_obj_set_width(duracao, 320);
 80051d2:	6828      	ldr	r0, [r5, #0]
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 80051d4:	f8df a354 	ldr.w	sl, [pc, #852]	; 800552c <simulacare+0x794>
    lv_obj_set_width(duracao, 320);
 80051d8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051dc:	f002 fb58 	bl	8007890 <lv_obj_set_width>
    lv_obj_set_height(duracao, 25);
 80051e0:	6828      	ldr	r0, [r5, #0]
 80051e2:	2119      	movs	r1, #25
 80051e4:	f002 fb5b 	bl	800789e <lv_obj_set_height>
    lv_slider_set_style(duracao, LV_SLIDER_STYLE_BG, &style_bg);
 80051e8:	463a      	mov	r2, r7
 80051ea:	4621      	mov	r1, r4
 80051ec:	6828      	ldr	r0, [r5, #0]
	txt_tempo = lv_label_create(Tela_RCP, NULL);
 80051ee:	4fb9      	ldr	r7, [pc, #740]	; (80054d4 <simulacare+0x73c>)
    lv_slider_set_style(duracao, LV_SLIDER_STYLE_BG, &style_bg);
 80051f0:	f00a fc5a 	bl	800faa8 <lv_slider_set_style>
    lv_slider_set_style(duracao, LV_SLIDER_STYLE_INDIC,&style_indic);
 80051f4:	4642      	mov	r2, r8
 80051f6:	6828      	ldr	r0, [r5, #0]
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 80051f8:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8005530 <simulacare+0x798>
    lv_slider_set_style(duracao, LV_SLIDER_STYLE_INDIC,&style_indic);
 80051fc:	2101      	movs	r1, #1
 80051fe:	f00a fc53 	bl	800faa8 <lv_slider_set_style>
    lv_slider_set_style(duracao, LV_SLIDER_STYLE_KNOB, &style_knob);
 8005202:	6828      	ldr	r0, [r5, #0]
 8005204:	4ab4      	ldr	r2, [pc, #720]	; (80054d8 <simulacare+0x740>)
 8005206:	2102      	movs	r1, #2
 8005208:	f00a fc4e 	bl	800faa8 <lv_slider_set_style>
    lv_obj_align(duracao, NULL, LV_ALIGN_CENTER, 120, -128);
 800520c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4622      	mov	r2, r4
 8005214:	2378      	movs	r3, #120	; 0x78
 8005216:	4621      	mov	r1, r4
 8005218:	6828      	ldr	r0, [r5, #0]
 800521a:	f001 ff85 	bl	8007128 <lv_obj_align>
    lv_obj_set_event_cb(duracao, event_handler_duracao);
 800521e:	6828      	ldr	r0, [r5, #0]
 8005220:	49ae      	ldr	r1, [pc, #696]	; (80054dc <simulacare+0x744>)
 8005222:	f001 fe3f 	bl	8006ea4 <lv_obj_set_event_cb>
	txt_tempo = lv_label_create(Tela_RCP, NULL);
 8005226:	4621      	mov	r1, r4
 8005228:	f8db 0000 	ldr.w	r0, [fp]
 800522c:	f00a fb82 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_tempo, &style_txt1);
 8005230:	49a5      	ldr	r1, [pc, #660]	; (80054c8 <simulacare+0x730>)
	txt_tempo = lv_label_create(Tela_RCP, NULL);
 8005232:	6038      	str	r0, [r7, #0]
    lv_obj_set_style(txt_tempo, &style_txt1);
 8005234:	f002 fb79 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_tempo, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 8005238:	4621      	mov	r1, r4
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f00a fb24 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_tempo, true); 						// Ativa recolorizar por comandos no texto
 8005240:	6838      	ldr	r0, [r7, #0]
 8005242:	2101      	movs	r1, #1
 8005244:	f00a fb62 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_tempo, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8005248:	2102      	movs	r1, #2
 800524a:	6838      	ldr	r0, [r7, #0]
 800524c:	f009 ffc0 	bl	800f1d0 <lv_label_set_align>
    sprintf(buf, "%u Min.", lv_slider_get_value(duracao));
 8005250:	6828      	ldr	r0, [r5, #0]
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 8005252:	4da3      	ldr	r5, [pc, #652]	; (80054e0 <simulacare+0x748>)
    sprintf(buf, "%u Min.", lv_slider_get_value(duracao));
 8005254:	f00a fca8 	bl	800fba8 <lv_slider_get_value>
 8005258:	49a2      	ldr	r1, [pc, #648]	; (80054e4 <simulacare+0x74c>)
 800525a:	4602      	mov	r2, r0
 800525c:	4630      	mov	r0, r6
 800525e:	f00b fb05 	bl	801086c <sprintf>
    lv_label_set_text(txt_tempo, buf);
 8005262:	4631      	mov	r1, r6
 8005264:	6838      	ldr	r0, [r7, #0]
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Home_OFF);
 8005266:	4ea0      	ldr	r6, [pc, #640]	; (80054e8 <simulacare+0x750>)
    lv_label_set_text(txt_tempo, buf);
 8005268:	f00a faba 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_tempo, 500); 								// Configuura o comprimento
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005272:	f002 fb0d 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_tempo, NULL, LV_ALIGN_IN_TOP_MID, 340, 98); 	// Alinha ao centro
 8005276:	2362      	movs	r3, #98	; 0x62
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2202      	movs	r2, #2
 800527c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8005280:	4621      	mov	r1, r4
 8005282:	6838      	ldr	r0, [r7, #0]
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 8005284:	4f99      	ldr	r7, [pc, #612]	; (80054ec <simulacare+0x754>)
    lv_obj_align(txt_tempo, NULL, LV_ALIGN_IN_TOP_MID, 340, 98); 	// Alinha ao centro
 8005286:	f001 ff4f 	bl	8007128 <lv_obj_align>
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 800528a:	4621      	mov	r1, r4
 800528c:	f8db 0000 	ldr.w	r0, [fp]
 8005290:	f009 fdbc 	bl	800ee0c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 8005294:	462a      	mov	r2, r5
 8005296:	4621      	mov	r1, r4
	imgbtn1 = lv_imgbtn_create(Tela_RCP, NULL);
 8005298:	f8ca 0000 	str.w	r0, [sl]
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 800529c:	f009 fdfe 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_REL, &Btn_Home);
 80052a0:	462a      	mov	r2, r5
 80052a2:	f8da 0000 	ldr.w	r0, [sl]
 80052a6:	2102      	movs	r1, #2
 80052a8:	f009 fdf8 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_TGL_PR, &Home_OFF);
 80052ac:	4632      	mov	r2, r6
 80052ae:	f8da 0000 	ldr.w	r0, [sl]
 80052b2:	2103      	movs	r1, #3
 80052b4:	f009 fdf2 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Home_OFF);
 80052b8:	4632      	mov	r2, r6
 80052ba:	f8da 0000 	ldr.w	r0, [sl]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Inicio_OFF);
 80052be:	4e8c      	ldr	r6, [pc, #560]	; (80054f0 <simulacare+0x758>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_PR, &Home_OFF);
 80052c0:	2101      	movs	r1, #1
 80052c2:	f009 fdeb 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_REL, &Btn_Home);
 80052c6:	462a      	mov	r2, r5
 80052c8:	4621      	mov	r1, r4
 80052ca:	f8da 0000 	ldr.w	r0, [sl]
 80052ce:	f009 fde5 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_Home);
 80052d2:	462a      	mov	r2, r5
 80052d4:	f8da 0000 	ldr.w	r0, [sl]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 80052d8:	4d86      	ldr	r5, [pc, #536]	; (80054f4 <simulacare+0x75c>)
	lv_imgbtn_set_src(imgbtn1, LV_BTN_STATE_INA, &Btn_Home);
 80052da:	2104      	movs	r1, #4
 80052dc:	f009 fdde 	bl	800ee9c <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn1, btn_event_home);
 80052e0:	f8da 0000 	ldr.w	r0, [sl]
 80052e4:	4984      	ldr	r1, [pc, #528]	; (80054f8 <simulacare+0x760>)
 80052e6:	f001 fddd 	bl	8006ea4 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn1, 360, 335);
 80052ea:	f240 124f 	movw	r2, #335	; 0x14f
 80052ee:	f8da 0000 	ldr.w	r0, [sl]
 80052f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80052f6:	f001 fec2 	bl	800707e <lv_obj_set_pos>
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 80052fa:	4621      	mov	r1, r4
 80052fc:	f8db 0000 	ldr.w	r0, [fp]
 8005300:	f009 fd84 	bl	800ee0c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 8005304:	462a      	mov	r2, r5
 8005306:	4621      	mov	r1, r4
	imgbtn2 = lv_imgbtn_create(Tela_RCP, NULL);
 8005308:	f8c9 0000 	str.w	r0, [r9]
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 800530c:	f009 fdc6 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_REL, &Btn_Inicio);
 8005310:	462a      	mov	r2, r5
 8005312:	f8d9 0000 	ldr.w	r0, [r9]
 8005316:	2102      	movs	r1, #2
 8005318:	f009 fdc0 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_TGL_PR, &Inicio_OFF);
 800531c:	4632      	mov	r2, r6
 800531e:	f8d9 0000 	ldr.w	r0, [r9]
 8005322:	2103      	movs	r1, #3
 8005324:	f009 fdba 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Inicio_OFF);
 8005328:	4632      	mov	r2, r6
 800532a:	f8d9 0000 	ldr.w	r0, [r9]
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_TGL_PR, &Pausa_OFF);
 800532e:	4e73      	ldr	r6, [pc, #460]	; (80054fc <simulacare+0x764>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_PR, &Inicio_OFF);
 8005330:	2101      	movs	r1, #1
 8005332:	f009 fdb3 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_REL, &Btn_Inicio);
 8005336:	462a      	mov	r2, r5
 8005338:	4621      	mov	r1, r4
 800533a:	f8d9 0000 	ldr.w	r0, [r9]
 800533e:	f009 fdad 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_Inicio);
 8005342:	462a      	mov	r2, r5
 8005344:	f8d9 0000 	ldr.w	r0, [r9]
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8005348:	4d6d      	ldr	r5, [pc, #436]	; (8005500 <simulacare+0x768>)
	lv_imgbtn_set_src(imgbtn2, LV_BTN_STATE_INA, &Btn_Inicio);
 800534a:	2104      	movs	r1, #4
 800534c:	f009 fda6 	bl	800ee9c <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn2, btn_event_inicio);
 8005350:	f8d9 0000 	ldr.w	r0, [r9]
 8005354:	496b      	ldr	r1, [pc, #428]	; (8005504 <simulacare+0x76c>)
 8005356:	f001 fda5 	bl	8006ea4 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn2, 500, 335);
 800535a:	f240 124f 	movw	r2, #335	; 0x14f
 800535e:	f8d9 0000 	ldr.w	r0, [r9]
 8005362:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005366:	f001 fe8a 	bl	800707e <lv_obj_set_pos>
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 800536a:	4621      	mov	r1, r4
 800536c:	f8db 0000 	ldr.w	r0, [fp]
 8005370:	f009 fd4c 	bl	800ee0c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 8005374:	462a      	mov	r2, r5
 8005376:	4621      	mov	r1, r4
	imgbtn3 = lv_imgbtn_create(Tela_RCP, NULL);
 8005378:	f8c8 0000 	str.w	r0, [r8]
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 800537c:	f009 fd8e 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_TGL_REL, &Btn_Pausa);
 8005380:	462a      	mov	r2, r5
 8005382:	f8d8 0000 	ldr.w	r0, [r8]
 8005386:	2102      	movs	r1, #2
 8005388:	f009 fd88 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_TGL_PR, &Pausa_OFF);
 800538c:	4632      	mov	r2, r6
 800538e:	f8d8 0000 	ldr.w	r0, [r8]
 8005392:	2103      	movs	r1, #3
 8005394:	f009 fd82 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_PR, &Pausa_OFF);
 8005398:	4632      	mov	r2, r6
 800539a:	f8d8 0000 	ldr.w	r0, [r8]
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 800539e:	4e5a      	ldr	r6, [pc, #360]	; (8005508 <simulacare+0x770>)
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_PR, &Pausa_OFF);
 80053a0:	2101      	movs	r1, #1
 80053a2:	f009 fd7b 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_REL, &Btn_Pausa);
 80053a6:	462a      	mov	r2, r5
 80053a8:	4621      	mov	r1, r4
 80053aa:	f8d8 0000 	ldr.w	r0, [r8]
 80053ae:	f009 fd75 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_INA, &Btn_Pausa);
 80053b2:	462a      	mov	r2, r5
 80053b4:	f8d8 0000 	ldr.w	r0, [r8]
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Distorcia_ON);
 80053b8:	4d54      	ldr	r5, [pc, #336]	; (800550c <simulacare+0x774>)
	lv_imgbtn_set_src(imgbtn3, LV_BTN_STATE_INA, &Btn_Pausa);
 80053ba:	2104      	movs	r1, #4
 80053bc:	f009 fd6e 	bl	800ee9c <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn3, btn_event_pausa);
 80053c0:	f8d8 0000 	ldr.w	r0, [r8]
 80053c4:	4952      	ldr	r1, [pc, #328]	; (8005510 <simulacare+0x778>)
 80053c6:	f001 fd6d 	bl	8006ea4 <lv_obj_set_event_cb>
	lv_obj_set_pos(imgbtn3, 640, 335);
 80053ca:	f240 124f 	movw	r2, #335	; 0x14f
 80053ce:	f8d8 0000 	ldr.w	r0, [r8]
 80053d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80053d6:	f001 fe52 	bl	800707e <lv_obj_set_pos>
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 80053da:	4621      	mov	r1, r4
 80053dc:	f8db 0000 	ldr.w	r0, [fp]
 80053e0:	f009 fd14 	bl	800ee0c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Distorcia_ON);
 80053e4:	462a      	mov	r2, r5
 80053e6:	4621      	mov	r1, r4
	imgbtn4 = lv_imgbtn_create(Tela_RCP, NULL);
 80053e8:	6038      	str	r0, [r7, #0]
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Distorcia_ON);
 80053ea:	f009 fd57 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_TGL_REL, &Distorcia_ON);
 80053ee:	462a      	mov	r2, r5
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	2102      	movs	r1, #2
 80053f4:	f009 fd52 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_TGL_PR, &Distorcia_OFF);
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	4a46      	ldr	r2, [pc, #280]	; (8005514 <simulacare+0x77c>)
 80053fc:	2103      	movs	r1, #3
 80053fe:	f009 fd4d 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_PR, &Distorcia_ON);
 8005402:	462a      	mov	r2, r5
 8005404:	6838      	ldr	r0, [r7, #0]
 8005406:	2101      	movs	r1, #1
 8005408:	f009 fd48 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_REL, &Distorcia_ON);
 800540c:	462a      	mov	r2, r5
 800540e:	4621      	mov	r1, r4
 8005410:	6838      	ldr	r0, [r7, #0]
 8005412:	f009 fd43 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_INA, &Distorcia_ON);
 8005416:	462a      	mov	r2, r5
 8005418:	6838      	ldr	r0, [r7, #0]
	txt_on_off = lv_label_create(Tela_RCP, NULL);
 800541a:	4d3f      	ldr	r5, [pc, #252]	; (8005518 <simulacare+0x780>)
	lv_imgbtn_set_src(imgbtn4, LV_BTN_STATE_INA, &Distorcia_ON);
 800541c:	2104      	movs	r1, #4
 800541e:	f009 fd3d 	bl	800ee9c <lv_imgbtn_set_src>
	lv_obj_set_event_cb(imgbtn4, btn_event_btn4);
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	493d      	ldr	r1, [pc, #244]	; (800551c <simulacare+0x784>)
 8005426:	f001 fd3d 	bl	8006ea4 <lv_obj_set_event_cb>
	lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_PR);
 800542a:	6838      	ldr	r0, [r7, #0]
 800542c:	2103      	movs	r1, #3
 800542e:	f008 fc14 	bl	800dc5a <lv_btn_set_state>
	lv_obj_set_pos(imgbtn4, 345, 225);
 8005432:	22e1      	movs	r2, #225	; 0xe1
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	f240 1159 	movw	r1, #345	; 0x159
 800543a:	f001 fe20 	bl	800707e <lv_obj_set_pos>
	txt_on_off = lv_label_create(Tela_RCP, NULL);
 800543e:	4621      	mov	r1, r4
 8005440:	f8db 0000 	ldr.w	r0, [fp]
 8005444:	f00a fa76 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_on_off, &style_txt1);
 8005448:	491f      	ldr	r1, [pc, #124]	; (80054c8 <simulacare+0x730>)
	txt_on_off = lv_label_create(Tela_RCP, NULL);
 800544a:	6028      	str	r0, [r5, #0]
    lv_obj_set_style(txt_on_off, &style_txt1);
 800544c:	f002 fa6d 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_on_off, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 8005450:	4621      	mov	r1, r4
 8005452:	6828      	ldr	r0, [r5, #0]
 8005454:	f00a fa18 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_on_off, true); 						// Ativa recolorizar por comandos no texto
 8005458:	6828      	ldr	r0, [r5, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	f00a fa56 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_on_off, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 8005460:	6828      	ldr	r0, [r5, #0]
 8005462:	2102      	movs	r1, #2
 8005464:	f009 feb4 	bl	800f1d0 <lv_label_set_align>
    lv_label_set_text(txt_on_off, "Distocia");
 8005468:	6828      	ldr	r0, [r5, #0]
 800546a:	492d      	ldr	r1, [pc, #180]	; (8005520 <simulacare+0x788>)
 800546c:	f00a f9b8 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_on_off, 500); 								// Configuura o comprimento
 8005470:	6828      	ldr	r0, [r5, #0]
 8005472:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005476:	f002 fa0b 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_on_off, NULL, LV_ALIGN_IN_TOP_MID, 5, 235); 	// Alinha ao centro
 800547a:	23eb      	movs	r3, #235	; 0xeb
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2202      	movs	r2, #2
 8005480:	2305      	movs	r3, #5
 8005482:	4621      	mov	r1, r4
 8005484:	6828      	ldr	r0, [r5, #0]
 8005486:	f001 fe4f 	bl	8007128 <lv_obj_align>
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 800548a:	4621      	mov	r1, r4
 800548c:	f8db 0000 	ldr.w	r0, [fp]
 8005490:	f009 fcbc 	bl	800ee0c <lv_imgbtn_create>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &ON);
 8005494:	4621      	mov	r1, r4
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <simulacare+0x78c>)
	imgbtn5 = lv_imgbtn_create(Tela_RCP, NULL);
 8005498:	6030      	str	r0, [r6, #0]
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &ON);
 800549a:	f009 fcff 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_TGL_REL, &ON);
 800549e:	6830      	ldr	r0, [r6, #0]
 80054a0:	4a20      	ldr	r2, [pc, #128]	; (8005524 <simulacare+0x78c>)
 80054a2:	2102      	movs	r1, #2
 80054a4:	f009 fcfa 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_TGL_PR, &OFF);
 80054a8:	4b1f      	ldr	r3, [pc, #124]	; (8005528 <simulacare+0x790>)
 80054aa:	6830      	ldr	r0, [r6, #0]
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	2103      	movs	r1, #3
 80054b2:	f009 fcf3 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_PR, &OFF);
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	6830      	ldr	r0, [r6, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	2101      	movs	r1, #1
 80054be:	f009 fced 	bl	800ee9c <lv_imgbtn_set_src>
 80054c2:	e037      	b.n	8005534 <simulacare+0x79c>
 80054c4:	20010474 	.word	0x20010474
 80054c8:	20010420 	.word	0x20010420
 80054cc:	080f35ef 	.word	0x080f35ef
 80054d0:	20015394 	.word	0x20015394
 80054d4:	20010480 	.word	0x20010480
 80054d8:	200103d0 	.word	0x200103d0
 80054dc:	08004bd9 	.word	0x08004bd9
 80054e0:	20000034 	.word	0x20000034
 80054e4:	080f35dc 	.word	0x080f35dc
 80054e8:	2000007c 	.word	0x2000007c
 80054ec:	20010288 	.word	0x20010288
 80054f0:	20000088 	.word	0x20000088
 80054f4:	20000040 	.word	0x20000040
 80054f8:	08004d59 	.word	0x08004d59
 80054fc:	200000ac 	.word	0x200000ac
 8005500:	2000004c 	.word	0x2000004c
 8005504:	08004d19 	.word	0x08004d19
 8005508:	2001028c 	.word	0x2001028c
 800550c:	20000070 	.word	0x20000070
 8005510:	08004cd9 	.word	0x08004cd9
 8005514:	20000064 	.word	0x20000064
 8005518:	2001047c 	.word	0x2001047c
 800551c:	08004c99 	.word	0x08004c99
 8005520:	080f35f7 	.word	0x080f35f7
 8005524:	200000a0 	.word	0x200000a0
 8005528:	20000094 	.word	0x20000094
 800552c:	2001027c 	.word	0x2001027c
 8005530:	20010284 	.word	0x20010284
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_REL, &ON);
 8005534:	4621      	mov	r1, r4
 8005536:	6830      	ldr	r0, [r6, #0]
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <simulacare+0x860>)
 800553a:	f009 fcaf 	bl	800ee9c <lv_imgbtn_set_src>
	lv_imgbtn_set_src(imgbtn5, LV_BTN_STATE_INA, &ON);
 800553e:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <simulacare+0x860>)
 8005540:	6830      	ldr	r0, [r6, #0]
 8005542:	2104      	movs	r1, #4
 8005544:	f009 fcaa 	bl	800ee9c <lv_imgbtn_set_src>
 * @param imgbtn pointer to an image button object
 * @param tgl true: enable toggled states, false: disable
 */
static inline void lv_imgbtn_set_toggle(lv_obj_t * imgbtn, bool tgl)
{
    lv_btn_set_toggle(imgbtn, tgl);
 8005548:	6830      	ldr	r0, [r6, #0]
 800554a:	2101      	movs	r1, #1
 800554c:	f008 fb7c 	bl	800dc48 <lv_btn_set_toggle>
	lv_obj_set_event_cb(imgbtn5, btn_event_btn5);
 8005550:	6830      	ldr	r0, [r6, #0]
 8005552:	492a      	ldr	r1, [pc, #168]	; (80055fc <simulacare+0x864>)
 8005554:	f001 fca6 	bl	8006ea4 <lv_obj_set_event_cb>
	lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_PR);
 8005558:	6830      	ldr	r0, [r6, #0]
 800555a:	2103      	movs	r1, #3
 800555c:	f008 fb7d 	bl	800dc5a <lv_btn_set_state>
	lv_obj_set_pos(imgbtn5, 690, 6);
 8005560:	2206      	movs	r2, #6
 8005562:	6830      	ldr	r0, [r6, #0]
 8005564:	f240 21b2 	movw	r1, #690	; 0x2b2
 8005568:	f001 fd89 	bl	800707e <lv_obj_set_pos>
    txt_on_off = lv_label_create(Tela_RCP, NULL);
 800556c:	4621      	mov	r1, r4
 800556e:	f8db 0000 	ldr.w	r0, [fp]
 8005572:	f00a f9df 	bl	800f934 <lv_label_create>
    lv_obj_set_style(txt_on_off, &style_txt1);
 8005576:	4922      	ldr	r1, [pc, #136]	; (8005600 <simulacare+0x868>)
    txt_on_off = lv_label_create(Tela_RCP, NULL);
 8005578:	6028      	str	r0, [r5, #0]
    lv_obj_set_style(txt_on_off, &style_txt1);
 800557a:	f002 f9d6 	bl	800792a <lv_obj_set_style>
    lv_label_set_long_mode(txt_on_off, LV_LABEL_LONG_EXPAND); 		// Quebra as linhas longas
 800557e:	4621      	mov	r1, r4
 8005580:	6828      	ldr	r0, [r5, #0]
 8005582:	f00a f981 	bl	800f888 <lv_label_set_long_mode>
    lv_label_set_recolor(txt_on_off, true); 						// Ativa recolorizar por comandos no texto
 8005586:	6828      	ldr	r0, [r5, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	f00a f9bf 	bl	800f90c <lv_label_set_recolor>
    lv_label_set_align(txt_on_off, LV_ALIGN_IN_TOP_MID); 			// Centraliza linhas alinhadas
 800558e:	6828      	ldr	r0, [r5, #0]
 8005590:	2102      	movs	r1, #2
 8005592:	f009 fe1d 	bl	800f1d0 <lv_label_set_align>
    lv_label_set_text(txt_on_off, "OFF");
 8005596:	6828      	ldr	r0, [r5, #0]
 8005598:	491a      	ldr	r1, [pc, #104]	; (8005604 <simulacare+0x86c>)
 800559a:	f00a f921 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_width(txt_on_off, 300); 								// Configuura o comprimento
 800559e:	6828      	ldr	r0, [r5, #0]
 80055a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80055a4:	f002 f974 	bl	8007890 <lv_obj_set_width>
    lv_obj_align(txt_on_off, NULL, LV_ALIGN_IN_TOP_MID, 340, 52); 	// Alinha ao centro
 80055a8:	2334      	movs	r3, #52	; 0x34
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80055b2:	4621      	mov	r1, r4
 80055b4:	6828      	ldr	r0, [r5, #0]
 80055b6:	f001 fdb7 	bl	8007128 <lv_obj_align>
    lv_btn_set_state(imgbtn1, LV_BTN_STATE_TGL_PR);
 80055ba:	f8da 0000 	ldr.w	r0, [sl]
 80055be:	2103      	movs	r1, #3
 80055c0:	f008 fb4b 	bl	800dc5a <lv_btn_set_state>
    lv_btn_set_state(imgbtn2, LV_BTN_STATE_TGL_PR);
 80055c4:	f8d9 0000 	ldr.w	r0, [r9]
 80055c8:	2103      	movs	r1, #3
 80055ca:	f008 fb46 	bl	800dc5a <lv_btn_set_state>
	lv_btn_set_state(imgbtn3, LV_BTN_STATE_TGL_PR);
 80055ce:	f8d8 0000 	ldr.w	r0, [r8]
 80055d2:	2103      	movs	r1, #3
 80055d4:	f008 fb41 	bl	800dc5a <lv_btn_set_state>
	lv_btn_set_state(imgbtn4, LV_BTN_STATE_TGL_PR);
 80055d8:	6838      	ldr	r0, [r7, #0]
 80055da:	2103      	movs	r1, #3
 80055dc:	f008 fb3d 	bl	800dc5a <lv_btn_set_state>
	lv_btn_set_state(imgbtn5, LV_BTN_STATE_TGL_PR);
 80055e0:	6830      	ldr	r0, [r6, #0]
 80055e2:	2103      	movs	r1, #3
 80055e4:	f008 fb39 	bl	800dc5a <lv_btn_set_state>
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 80055e8:	f8db 0000 	ldr.w	r0, [fp]
}
 80055ec:	b005      	add	sp, #20
 80055ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f2:	f000 bb14 	b.w	8005c1e <lv_disp_load_scr>
 80055f6:	bf00      	nop
 80055f8:	200000a0 	.word	0x200000a0
 80055fc:	08004c39 	.word	0x08004c39
 8005600:	20010420 	.word	0x20010420
 8005604:	080f3598 	.word	0x080f3598

08005608 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005608:	2904      	cmp	r1, #4
 800560a:	d00a      	beq.n	8005622 <USBH_UserProcess+0x1a>
 800560c:	2905      	cmp	r1, #5
 800560e:	d004      	beq.n	800561a <USBH_UserProcess+0x12>
 8005610:	2902      	cmp	r1, #2
 8005612:	d105      	bne.n	8005620 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <USBH_UserProcess+0x20>)
 8005616:	7019      	strb	r1, [r3, #0]
  break;
 8005618:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800561a:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <USBH_UserProcess+0x20>)
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	2201      	movs	r2, #1
 8005624:	e7fa      	b.n	800561c <USBH_UserProcess+0x14>
 8005626:	bf00      	nop
 8005628:	20010484 	.word	0x20010484

0800562c <MX_USB_HOST_Init>:
{
 800562c:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800562e:	2201      	movs	r2, #1
 8005630:	490b      	ldr	r1, [pc, #44]	; (8005660 <MX_USB_HOST_Init+0x34>)
 8005632:	480c      	ldr	r0, [pc, #48]	; (8005664 <MX_USB_HOST_Init+0x38>)
 8005634:	f7fe fe46 	bl	80042c4 <USBH_Init>
 8005638:	b108      	cbz	r0, 800563e <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800563a:	f7fb fe47 	bl	80012cc <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800563e:	490a      	ldr	r1, [pc, #40]	; (8005668 <MX_USB_HOST_Init+0x3c>)
 8005640:	4808      	ldr	r0, [pc, #32]	; (8005664 <MX_USB_HOST_Init+0x38>)
 8005642:	f7fe fe56 	bl	80042f2 <USBH_RegisterClass>
 8005646:	b108      	cbz	r0, 800564c <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8005648:	f7fb fe40 	bl	80012cc <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800564c:	4805      	ldr	r0, [pc, #20]	; (8005664 <MX_USB_HOST_Init+0x38>)
 800564e:	f7fe fe83 	bl	8004358 <USBH_Start>
 8005652:	b118      	cbz	r0, 800565c <MX_USB_HOST_Init+0x30>
}
 8005654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005658:	f7fb be38 	b.w	80012cc <Error_Handler>
 800565c:	bd08      	pop	{r3, pc}
 800565e:	bf00      	nop
 8005660:	08005609 	.word	0x08005609
 8005664:	2001539c 	.word	0x2001539c
 8005668:	20000008 	.word	0x20000008

0800566c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <MX_USB_HOST_Process+0x8>)
 800566e:	f7fe be7d 	b.w	800436c <USBH_Process>
 8005672:	bf00      	nop
 8005674:	2001539c 	.word	0x2001539c

08005678 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005678:	b530      	push	{r4, r5, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567e:	2214      	movs	r2, #20
 8005680:	2100      	movs	r1, #0
 8005682:	a803      	add	r0, sp, #12
 8005684:	f00b f8b5 	bl	80107f2 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800568e:	d135      	bne.n	80056fc <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005690:	4c1b      	ldr	r4, [pc, #108]	; (8005700 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005692:	481c      	ldr	r0, [pc, #112]	; (8005704 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005694:	2500      	movs	r5, #0
 8005696:	9501      	str	r5, [sp, #4]
 8005698:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6323      	str	r3, [r4, #48]	; 0x30
 80056a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80056aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80056ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80056b2:	f7fc f8ab 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80056b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80056ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056bc:	2302      	movs	r3, #2
 80056be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80056c2:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c4:	480f      	ldr	r0, [pc, #60]	; (8005704 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80056c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056cc:	f7fc f89e 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80056d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d6:	6363      	str	r3, [r4, #52]	; 0x34
 80056d8:	9502      	str	r5, [sp, #8]
 80056da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056e0:	6463      	str	r3, [r4, #68]	; 0x44
 80056e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e8:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80056ea:	2043      	movs	r0, #67	; 0x43
 80056ec:	462a      	mov	r2, r5
 80056ee:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80056f0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80056f2:	f7fc f849 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80056f6:	2043      	movs	r0, #67	; 0x43
 80056f8:	f7fc f87a 	bl	80017f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80056fc:	b009      	add	sp, #36	; 0x24
 80056fe:	bd30      	pop	{r4, r5, pc}
 8005700:	40023800 	.word	0x40023800
 8005704:	40020000 	.word	0x40020000

08005708 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005708:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800570c:	f7fe bf76 	b.w	80045fc <USBH_LL_IncTimer>

08005710 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005710:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005714:	f7fe bf88 	b.w	8004628 <USBH_LL_Connect>

08005718 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005718:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800571c:	f7fe bf98 	b.w	8004650 <USBH_LL_Disconnect>

08005720 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005720:	4770      	bx	lr

08005722 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8005722:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005726:	f7fe bf77 	b.w	8004618 <USBH_LL_PortEnabled>

0800572a <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800572a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800572e:	f7fe bf77 	b.w	8004620 <USBH_LL_PortDisabled>
	...

08005734 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005734:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005736:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800573a:	2b01      	cmp	r3, #1
{
 800573c:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800573e:	d11b      	bne.n	8005778 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005740:	480e      	ldr	r0, [pc, #56]	; (800577c <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005742:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005746:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800574a:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800574c:	2208      	movs	r2, #8
 800574e:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005750:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005752:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005754:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005756:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800575a:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800575c:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800575e:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005760:	f7fc f98a 	bl	8001a78 <HAL_HCD_Init>
 8005764:	b108      	cbz	r0, 800576a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8005766:	f7fb fdb1 	bl	80012cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800576a:	4804      	ldr	r0, [pc, #16]	; (800577c <USBH_LL_Init+0x48>)
 800576c:	f7fc fd82 	bl	8002274 <HAL_HCD_GetCurrentFrame>
 8005770:	4601      	mov	r1, r0
 8005772:	4620      	mov	r0, r4
 8005774:	f7fe ff3f 	bl	80045f6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8005778:	2000      	movs	r0, #0
 800577a:	bd10      	pop	{r4, pc}
 800577c:	20015768 	.word	0x20015768

08005780 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005780:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005782:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005786:	f7fc fd3f 	bl	8002208 <HAL_HCD_Start>
 800578a:	2803      	cmp	r0, #3
 800578c:	bf9a      	itte	ls
 800578e:	4b02      	ldrls	r3, [pc, #8]	; (8005798 <USBH_LL_Start+0x18>)
 8005790:	5c18      	ldrbls	r0, [r3, r0]
 8005792:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005794:	bd08      	pop	{r3, pc}
 8005796:	bf00      	nop
 8005798:	080f3603 	.word	0x080f3603

0800579c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800579c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800579e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80057a2:	f7fc fd47 	bl	8002234 <HAL_HCD_Stop>
 80057a6:	2803      	cmp	r0, #3
 80057a8:	bf9a      	itte	ls
 80057aa:	4b02      	ldrls	r3, [pc, #8]	; (80057b4 <USBH_LL_Stop+0x18>)
 80057ac:	5c18      	ldrbls	r0, [r3, r0]
 80057ae:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80057b0:	bd08      	pop	{r3, pc}
 80057b2:	bf00      	nop
 80057b4:	080f3603 	.word	0x080f3603

080057b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80057b8:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80057ba:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80057be:	f7fc fd5c 	bl	800227a <HAL_HCD_GetCurrentSpeed>
 80057c2:	2802      	cmp	r0, #2
 80057c4:	bf9a      	itte	ls
 80057c6:	4b02      	ldrls	r3, [pc, #8]	; (80057d0 <USBH_LL_GetSpeed+0x18>)
 80057c8:	5c18      	ldrbls	r0, [r3, r0]
 80057ca:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80057cc:	bd08      	pop	{r3, pc}
 80057ce:	bf00      	nop
 80057d0:	080f3600 	.word	0x080f3600

080057d4 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80057d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80057d6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80057da:	f7fc fd3d 	bl	8002258 <HAL_HCD_ResetPort>
 80057de:	2803      	cmp	r0, #3
 80057e0:	bf9a      	itte	ls
 80057e2:	4b02      	ldrls	r3, [pc, #8]	; (80057ec <USBH_LL_ResetPort+0x18>)
 80057e4:	5c18      	ldrbls	r0, [r3, r0]
 80057e6:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80057e8:	bd08      	pop	{r3, pc}
 80057ea:	bf00      	nop
 80057ec:	080f3603 	.word	0x080f3603

080057f0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80057f0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80057f4:	f7fc bd39 	b.w	800226a <HAL_HCD_HC_GetXferCount>

080057f8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80057f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80057fa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80057fe:	9402      	str	r4, [sp, #8]
 8005800:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005804:	9401      	str	r4, [sp, #4]
 8005806:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800580a:	9400      	str	r4, [sp, #0]
 800580c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005810:	f7fc f8e8 	bl	80019e4 <HAL_HCD_HC_Init>
 8005814:	2803      	cmp	r0, #3
 8005816:	bf9a      	itte	ls
 8005818:	4b02      	ldrls	r3, [pc, #8]	; (8005824 <USBH_LL_OpenPipe+0x2c>)
 800581a:	5c18      	ldrbls	r0, [r3, r0]
 800581c:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800581e:	b004      	add	sp, #16
 8005820:	bd10      	pop	{r4, pc}
 8005822:	bf00      	nop
 8005824:	080f3603 	.word	0x080f3603

08005828 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005828:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800582a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800582e:	f7fc f911 	bl	8001a54 <HAL_HCD_HC_Halt>
 8005832:	2803      	cmp	r0, #3
 8005834:	bf9a      	itte	ls
 8005836:	4b02      	ldrls	r3, [pc, #8]	; (8005840 <USBH_LL_ClosePipe+0x18>)
 8005838:	5c18      	ldrbls	r0, [r3, r0]
 800583a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800583c:	bd08      	pop	{r3, pc}
 800583e:	bf00      	nop
 8005840:	080f3603 	.word	0x080f3603

08005844 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005846:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800584a:	9403      	str	r4, [sp, #12]
 800584c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005850:	9402      	str	r4, [sp, #8]
 8005852:	9c07      	ldr	r4, [sp, #28]
 8005854:	9401      	str	r4, [sp, #4]
 8005856:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800585a:	9400      	str	r4, [sp, #0]
 800585c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005860:	f7fc f954 	bl	8001b0c <HAL_HCD_HC_SubmitRequest>
 8005864:	2803      	cmp	r0, #3
 8005866:	bf9a      	itte	ls
 8005868:	4b02      	ldrls	r3, [pc, #8]	; (8005874 <USBH_LL_SubmitURB+0x30>)
 800586a:	5c18      	ldrbls	r0, [r3, r0]
 800586c:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800586e:	b004      	add	sp, #16
 8005870:	bd10      	pop	{r4, pc}
 8005872:	bf00      	nop
 8005874:	080f3603 	.word	0x080f3603

08005878 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005878:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800587c:	f7fc bcef 	b.w	800225e <HAL_HCD_HC_GetURBState>

08005880 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005880:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8005882:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800588a:	4608      	mov	r0, r1
 800588c:	f000 f816 	bl	80058bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005890:	20c8      	movs	r0, #200	; 0xc8
 8005892:	f7fb ff53 	bl	800173c <HAL_Delay>
  return USBH_OK;
}
 8005896:	2000      	movs	r0, #0
 8005898:	bd08      	pop	{r3, pc}

0800589a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800589a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800589e:	2328      	movs	r3, #40	; 0x28
 80058a0:	fb03 0101 	mla	r1, r3, r1, r0
 80058a4:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80058a8:	b11b      	cbz	r3, 80058b2 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80058aa:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80058ae:	2000      	movs	r0, #0
 80058b0:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80058b2:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80058b6:	e7fa      	b.n	80058ae <USBH_LL_SetToggle+0x14>

080058b8 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80058b8:	f7fb bf40 	b.w	800173c <HAL_Delay>

080058bc <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80058bc:	fab0 f280 	clz	r2, r0
 80058c0:	0952      	lsrs	r2, r2, #5
 80058c2:	2101      	movs	r1, #1
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <MX_DriverVbusFS+0x10>)
 80058c6:	f7fc b881 	b.w	80019cc <HAL_GPIO_WritePin>
 80058ca:	bf00      	nop
 80058cc:	40020800 	.word	0x40020800

080058d0 <ssd1963_cmd_mode>:
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <ssd1963_cmd_mode+0xc>)
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	b90a      	cbnz	r2, 80058da <ssd1963_cmd_mode+0xa>
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	4770      	bx	lr
 80058dc:	200000c4 	.word	0x200000c4

080058e0 <ssd1963_data_mode>:
/**
 * Data mode
 */
static inline void ssd1963_data_mode(void)
{
    if(cmd_mode != false) {
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <ssd1963_data_mode+0xc>)
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	b10a      	cbz	r2, 80058ea <ssd1963_data_mode+0xa>
        LV_DRV_DISP_CMD_DATA(SSD1963_DATA_MODE);
        cmd_mode = false;
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	4770      	bx	lr
 80058ec:	200000c4 	.word	0x200000c4

080058f0 <ssd1963_init>:
    cmd_mode = true;
 80058f0:	4b55      	ldr	r3, [pc, #340]	; (8005a48 <ssd1963_init+0x158>)
{
 80058f2:	b510      	push	{r4, lr}
    LV_DRV_DELAY_MS(250);
 80058f4:	20fa      	movs	r0, #250	; 0xfa
    cmd_mode = true;
 80058f6:	2401      	movs	r4, #1
 80058f8:	701c      	strb	r4, [r3, #0]
    LV_DRV_DELAY_MS(250);
 80058fa:	f7fb ff1f 	bl	800173c <HAL_Delay>
 */
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
 80058fe:	f7ff ffe7 	bl	80058d0 <ssd1963_cmd_mode>
 */
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
 8005902:	f7ff ffed 	bl	80058e0 <ssd1963_data_mode>
 8005906:	f7ff ffeb 	bl	80058e0 <ssd1963_data_mode>
 800590a:	f7ff ffe9 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 800590e:	f7ff ffdf 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005912:	f7ff ffe5 	bl	80058e0 <ssd1963_data_mode>
    LV_DRV_DELAY_MS(1);
 8005916:	4620      	mov	r0, r4
 8005918:	f7fb ff10 	bl	800173c <HAL_Delay>
    ssd1963_cmd_mode();
 800591c:	f7ff ffd8 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005920:	f7ff ffde 	bl	80058e0 <ssd1963_data_mode>
    LV_DRV_DELAY_MS(1);
 8005924:	4620      	mov	r0, r4
 8005926:	f7fb ff09 	bl	800173c <HAL_Delay>
    ssd1963_cmd_mode();
 800592a:	f7ff ffd1 	bl	80058d0 <ssd1963_cmd_mode>
    LV_DRV_DELAY_MS(1);
 800592e:	4620      	mov	r0, r4
 8005930:	f7fb ff04 	bl	800173c <HAL_Delay>
    ssd1963_cmd_mode();
 8005934:	f7ff ffcc 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005938:	f7ff ffd2 	bl	80058e0 <ssd1963_data_mode>
 800593c:	f7ff ffd0 	bl	80058e0 <ssd1963_data_mode>
 8005940:	f7ff ffce 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 8005944:	f7ff ffc4 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005948:	f7ff ffca 	bl	80058e0 <ssd1963_data_mode>
 800594c:	f7ff ffc8 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_data(((SSD1963_HOR_RES - 1) >> 8) & 0X00FF); //Set HDP
 8005950:	f006 fd18 	bl	800c384 <lv_disp_get_default>
 8005954:	f006 fd1c 	bl	800c390 <lv_disp_get_hor_res>
    ssd1963_data_mode();
 8005958:	f7ff ffc2 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_data((SSD1963_HOR_RES - 1) & 0X00FF);
 800595c:	f006 fd12 	bl	800c384 <lv_disp_get_default>
 8005960:	f006 fd16 	bl	800c390 <lv_disp_get_hor_res>
    ssd1963_data_mode();
 8005964:	f7ff ffbc 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_data(((SSD1963_VER_RES - 1) >> 8) & 0X00FF); //Set VDP
 8005968:	f006 fd0c 	bl	800c384 <lv_disp_get_default>
 800596c:	f006 fd22 	bl	800c3b4 <lv_disp_get_ver_res>
    ssd1963_data_mode();
 8005970:	f7ff ffb6 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_data((SSD1963_VER_RES - 1) & 0X00FF);
 8005974:	f006 fd06 	bl	800c384 <lv_disp_get_default>
 8005978:	f006 fd1c 	bl	800c3b4 <lv_disp_get_ver_res>
    ssd1963_data_mode();
 800597c:	f7ff ffb0 	bl	80058e0 <ssd1963_data_mode>
 8005980:	f7ff ffae 	bl	80058e0 <ssd1963_data_mode>
    LV_DRV_DELAY_MS(1);//Delay10us(5);
 8005984:	4620      	mov	r0, r4
 8005986:	f7fb fed9 	bl	800173c <HAL_Delay>
    ssd1963_cmd_mode();
 800598a:	f7ff ffa1 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 800598e:	f7ff ffa7 	bl	80058e0 <ssd1963_data_mode>
 8005992:	f7ff ffa5 	bl	80058e0 <ssd1963_data_mode>
 8005996:	f7ff ffa3 	bl	80058e0 <ssd1963_data_mode>
 800599a:	f7ff ffa1 	bl	80058e0 <ssd1963_data_mode>
 800599e:	f7ff ff9f 	bl	80058e0 <ssd1963_data_mode>
 80059a2:	f7ff ff9d 	bl	80058e0 <ssd1963_data_mode>
 80059a6:	f7ff ff9b 	bl	80058e0 <ssd1963_data_mode>
 80059aa:	f7ff ff99 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059ae:	f7ff ff8f 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059b2:	f7ff ff95 	bl	80058e0 <ssd1963_data_mode>
 80059b6:	f7ff ff93 	bl	80058e0 <ssd1963_data_mode>
 80059ba:	f7ff ff91 	bl	80058e0 <ssd1963_data_mode>
 80059be:	f7ff ff8f 	bl	80058e0 <ssd1963_data_mode>
 80059c2:	f7ff ff8d 	bl	80058e0 <ssd1963_data_mode>
 80059c6:	f7ff ff8b 	bl	80058e0 <ssd1963_data_mode>
 80059ca:	f7ff ff89 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059ce:	f7ff ff7f 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059d2:	f7ff ff85 	bl	80058e0 <ssd1963_data_mode>
 80059d6:	f7ff ff83 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059da:	f7ff ff79 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059de:	f7ff ff7f 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059e2:	f7ff ff75 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059e6:	f7ff ff7b 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059ea:	f7ff ff71 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059ee:	f7ff ff77 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059f2:	f7ff ff6d 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059f6:	f7ff ff73 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 80059fa:	f7ff ff69 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 80059fe:	f7ff ff6f 	bl	80058e0 <ssd1963_data_mode>
 8005a02:	f7ff ff6d 	bl	80058e0 <ssd1963_data_mode>
 8005a06:	f7ff ff6b 	bl	80058e0 <ssd1963_data_mode>
 8005a0a:	f7ff ff69 	bl	80058e0 <ssd1963_data_mode>
    LV_DRV_DELAY_MS(1);
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7fb fe94 	bl	800173c <HAL_Delay>
    ssd1963_cmd_mode();
 8005a14:	f7ff ff5c 	bl	80058d0 <ssd1963_cmd_mode>
 8005a18:	f7ff ff5a 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005a1c:	f7ff ff60 	bl	80058e0 <ssd1963_data_mode>
 8005a20:	f7ff ff5e 	bl	80058e0 <ssd1963_data_mode>
 8005a24:	f7ff ff5c 	bl	80058e0 <ssd1963_data_mode>
 8005a28:	f7ff ff5a 	bl	80058e0 <ssd1963_data_mode>
 8005a2c:	f7ff ff58 	bl	80058e0 <ssd1963_data_mode>
 8005a30:	f7ff ff56 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 8005a34:	f7ff ff4c 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005a38:	f7ff ff52 	bl	80058e0 <ssd1963_data_mode>
    LV_DRV_DELAY_MS(30);
 8005a3c:	201e      	movs	r0, #30
}
 8005a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LV_DRV_DELAY_MS(30);
 8005a42:	f7fb be7b 	b.w	800173c <HAL_Delay>
 8005a46:	bf00      	nop
 8005a48:	200000c4 	.word	0x200000c4

08005a4c <ssd1963_flush>:
    if(area->x2 < 0) return;
 8005a4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005a50:	2b00      	cmp	r3, #0
{
 8005a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	4607      	mov	r7, r0
 8005a58:	460e      	mov	r6, r1
    if(area->x2 < 0) return;
 8005a5a:	db60      	blt.n	8005b1e <ssd1963_flush+0xd2>
    if(area->y2 < 0) return;
 8005a5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db5c      	blt.n	8005b1e <ssd1963_flush+0xd2>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
 8005a64:	f006 fc8e 	bl	800c384 <lv_disp_get_default>
 8005a68:	f006 fc92 	bl	800c390 <lv_disp_get_hor_res>
 8005a6c:	f9b6 3000 	ldrsh.w	r3, [r6]
 8005a70:	4283      	cmp	r3, r0
 8005a72:	da54      	bge.n	8005b1e <ssd1963_flush+0xd2>
    if(area->y1 > SSD1963_VER_RES - 1) return;
 8005a74:	f006 fc86 	bl	800c384 <lv_disp_get_default>
 8005a78:	f006 fc9c 	bl	800c3b4 <lv_disp_get_ver_res>
 8005a7c:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 8005a80:	42a8      	cmp	r0, r5
 8005a82:	dd4c      	ble.n	8005b1e <ssd1963_flush+0xd2>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 8005a84:	f9b6 4000 	ldrsh.w	r4, [r6]
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 8005a88:	f006 fc7c 	bl	800c384 <lv_disp_get_default>
 8005a8c:	f006 fc80 	bl	800c390 <lv_disp_get_hor_res>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 8005a90:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 8005a94:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
 8005a98:	42a0      	cmp	r0, r4
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
 8005a9a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
 8005a9e:	dc04      	bgt.n	8005aaa <ssd1963_flush+0x5e>
 8005aa0:	f006 fc70 	bl	800c384 <lv_disp_get_default>
 8005aa4:	f006 fc74 	bl	800c390 <lv_disp_get_hor_res>
 8005aa8:	1e44      	subs	r4, r0, #1
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
 8005aaa:	f006 fc6b 	bl	800c384 <lv_disp_get_default>
 8005aae:	f006 fc81 	bl	800c3b4 <lv_disp_get_ver_res>
 8005ab2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	dc26      	bgt.n	8005b08 <ssd1963_flush+0xbc>
 8005aba:	f006 fc63 	bl	800c384 <lv_disp_get_default>
 8005abe:	f006 fc79 	bl	800c3b4 <lv_disp_get_ver_res>
 8005ac2:	3801      	subs	r0, #1
    ssd1963_cmd_mode();
 8005ac4:	f7ff ff04 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005ac8:	f7ff ff0a 	bl	80058e0 <ssd1963_data_mode>
 8005acc:	f7ff ff08 	bl	80058e0 <ssd1963_data_mode>
 8005ad0:	f7ff ff06 	bl	80058e0 <ssd1963_data_mode>
 8005ad4:	f7ff ff04 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 8005ad8:	f7ff fefa 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005adc:	f7ff ff00 	bl	80058e0 <ssd1963_data_mode>
 8005ae0:	f7ff fefe 	bl	80058e0 <ssd1963_data_mode>
 8005ae4:	f7ff fefc 	bl	80058e0 <ssd1963_data_mode>
 8005ae8:	f7ff fefa 	bl	80058e0 <ssd1963_data_mode>
    ssd1963_cmd_mode();
 8005aec:	f7ff fef0 	bl	80058d0 <ssd1963_cmd_mode>
    ssd1963_data_mode();
 8005af0:	f7ff fef6 	bl	80058e0 <ssd1963_data_mode>
        for(j = 0; j <= act_x2 - act_x1 + 1; j++) {
 8005af4:	eba4 0408 	sub.w	r4, r4, r8
 8005af8:	3401      	adds	r4, #1
    for(i = act_y1; i <= act_y2; i++) {
 8005afa:	42a8      	cmp	r0, r5
 8005afc:	da06      	bge.n	8005b0c <ssd1963_flush+0xc0>
    lv_disp_flush_ready(disp_drv);
 8005afe:	4638      	mov	r0, r7
}
 8005b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_disp_flush_ready(disp_drv);
 8005b04:	f006 bc72 	b.w	800c3ec <lv_disp_flush_ready>
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
 8005b08:	4618      	mov	r0, r3
 8005b0a:	e7db      	b.n	8005ac4 <ssd1963_flush+0x78>
 8005b0c:	2300      	movs	r3, #0
        for(j = 0; j <= act_x2 - act_x1 + 1; j++) {
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	42a2      	cmp	r2, r4
 8005b12:	f103 0301 	add.w	r3, r3, #1
 8005b16:	ddfa      	ble.n	8005b0e <ssd1963_flush+0xc2>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	b22d      	sxth	r5, r5
 8005b1c:	e7ed      	b.n	8005afa <ssd1963_flush+0xae>
 8005b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b24 <xpt2046_read>:
 * Get the current position and state of the touchpad
 * @param data store the read data here
 * @return false: because no ore data to be read
 */
bool xpt2046_read(lv_indev_data_t * data)
{
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int16_t y = 0;

    uint8_t irq = LV_DRV_INDEV_IRQ_READ;

    if(irq == 0) {
        LV_DRV_INDEV_SPI_CS(0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2110      	movs	r1, #16
{
 8005b2a:	4605      	mov	r5, r0
        LV_DRV_INDEV_SPI_CS(0);
 8005b2c:	4834      	ldr	r0, [pc, #208]	; (8005c00 <xpt2046_read+0xdc>)
 8005b2e:	f7fb ff4d 	bl	80019cc <HAL_GPIO_WritePin>

        LV_DRV_INDEV_SPI_XCHG_BYTE(CMD_X_READ);         /*Start x read*/
 8005b32:	2090      	movs	r0, #144	; 0x90
 8005b34:	f7fb fbcc 	bl	80012d0 <xpt2046>

        buf = LV_DRV_INDEV_SPI_XCHG_BYTE(0);           /*Read x MSB*/
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f7fb fbc9 	bl	80012d0 <xpt2046>
 8005b3e:	4607      	mov	r7, r0
        x = buf << 8;
        buf = LV_DRV_INDEV_SPI_XCHG_BYTE(CMD_Y_READ);  /*Until x LSB converted y command can be sent*/
 8005b40:	20d0      	movs	r0, #208	; 0xd0
 8005b42:	f7fb fbc5 	bl	80012d0 <xpt2046>
 8005b46:	4604      	mov	r4, r0
        x += buf;

        buf =  LV_DRV_INDEV_SPI_XCHG_BYTE(0);   /*Read y MSB*/
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7fb fbc1 	bl	80012d0 <xpt2046>
 8005b4e:	4606      	mov	r6, r0
        y = buf << 8;

        buf =  LV_DRV_INDEV_SPI_XCHG_BYTE(0);   /*Read y LSB*/
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7fb fbbd 	bl	80012d0 <xpt2046>
static void xpt2046_avg(int16_t * x, int16_t * y)
{
    /*Shift out the oldest data*/
    uint8_t i;
    for(i = XPT2046_AVG - 1; i > 0 ; i--) {
        avg_buf_x[i] = avg_buf_x[i - 1];
 8005b56:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <xpt2046_read+0xe0>)
 8005b58:	8891      	ldrh	r1, [r2, #4]
 8005b5a:	80d1      	strh	r1, [r2, #6]
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005b5c:	492a      	ldr	r1, [pc, #168]	; (8005c08 <xpt2046_read+0xe4>)
        x += buf;
 8005b5e:	eb04 2307 	add.w	r3, r4, r7, lsl #8
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005b62:	888c      	ldrh	r4, [r1, #4]
 8005b64:	80cc      	strh	r4, [r1, #6]
        x = x >> 3;
 8005b66:	f343 03cc 	sbfx	r3, r3, #3, #13
        avg_buf_x[i] = avg_buf_x[i - 1];
 8005b6a:	8854      	ldrh	r4, [r2, #2]
 8005b6c:	8094      	strh	r4, [r2, #4]
    if((*x) > XPT2046_X_MIN)(*x) -= XPT2046_X_MIN;
 8005b6e:	2bc8      	cmp	r3, #200	; 0xc8
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005b70:	884c      	ldrh	r4, [r1, #2]
 8005b72:	808c      	strh	r4, [r1, #4]
        y += buf;
 8005b74:	eb00 2006 	add.w	r0, r0, r6, lsl #8
        y = y >> 3;
 8005b78:	f340 00cc 	sbfx	r0, r0, #3, #13
    if((*x) > XPT2046_X_MIN)(*x) -= XPT2046_X_MIN;
 8005b7c:	bfc8      	it	gt
 8005b7e:	3bc8      	subgt	r3, #200	; 0xc8
        avg_buf_x[i] = avg_buf_x[i - 1];
 8005b80:	8814      	ldrh	r4, [r2, #0]
 8005b82:	8054      	strh	r4, [r2, #2]
    if((*x) > XPT2046_X_MIN)(*x) -= XPT2046_X_MIN;
 8005b84:	bfc8      	it	gt
 8005b86:	b29b      	uxthgt	r3, r3
        avg_buf_y[i] = avg_buf_y[i - 1];
 8005b88:	880c      	ldrh	r4, [r1, #0]
 8005b8a:	804c      	strh	r4, [r1, #2]
    if((*x) > XPT2046_X_MIN)(*x) -= XPT2046_X_MIN;
 8005b8c:	bfd8      	it	le
 8005b8e:	2300      	movle	r3, #0
    if((*y) > XPT2046_Y_MIN)(*y) -= XPT2046_Y_MIN;
 8005b90:	28c8      	cmp	r0, #200	; 0xc8
 8005b92:	bfc8      	it	gt
 8005b94:	38c8      	subgt	r0, #200	; 0xc8
    (*x) = (uint32_t)((uint32_t)(*x) * XPT2046_HOR_RES) /
 8005b96:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    if((*y) > XPT2046_Y_MIN)(*y) -= XPT2046_Y_MIN;
 8005b9a:	bfcc      	ite	gt
 8005b9c:	b280      	uxthgt	r0, r0
 8005b9e:	2000      	movle	r0, #0
    (*x) = (uint32_t)((uint32_t)(*x) * XPT2046_HOR_RES) /
 8005ba0:	4363      	muls	r3, r4
 8005ba2:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8005ba6:	fbb3 f3f4 	udiv	r3, r3, r4
 8005baa:	8013      	strh	r3, [r2, #0]
    (*y) = (uint32_t)((uint32_t)(*y) * XPT2046_VER_RES) /
 8005bac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005bb0:	4358      	muls	r0, r3
 8005bb2:	fbb0 f0f4 	udiv	r0, r0, r4
 8005bb6:	8008      	strh	r0, [r1, #0]
    }

    /*Insert the new point*/
    avg_buf_x[0] = *x;
    avg_buf_y[0] = *y;
    if(avg_last < XPT2046_AVG) avg_last++;
 8005bb8:	4814      	ldr	r0, [pc, #80]	; (8005c0c <xpt2046_read+0xe8>)
 8005bba:	7804      	ldrb	r4, [r0, #0]
 8005bbc:	2c03      	cmp	r4, #3
 8005bbe:	bf9c      	itt	ls
 8005bc0:	3401      	addls	r4, #1
 8005bc2:	7004      	strbls	r4, [r0, #0]
 8005bc4:	460b      	mov	r3, r1

    /*Sum the x and y coordinates*/
    int32_t x_sum = 0;
    int32_t y_sum = 0;
    for(i = 0; i < avg_last ; i++) {
 8005bc6:	7807      	ldrb	r7, [r0, #0]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	460e      	mov	r6, r1
 8005bce:	b2c8      	uxtb	r0, r1
 8005bd0:	4287      	cmp	r7, r0
 8005bd2:	d80d      	bhi.n	8005bf0 <xpt2046_read+0xcc>
        LV_DRV_INDEV_SPI_CS(1);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	4809      	ldr	r0, [pc, #36]	; (8005c00 <xpt2046_read+0xdc>)
 8005bda:	f7fb fef7 	bl	80019cc <HAL_GPIO_WritePin>
        x_sum += avg_buf_x[i];
        y_sum += avg_buf_y[i];
    }

    /*Normalize the sums*/
    (*x) = (int32_t)x_sum / avg_last;
 8005bde:	fb96 f6f7 	sdiv	r6, r6, r7
    (*y) = (int32_t)y_sum / avg_last;
 8005be2:	fb94 f4f7 	sdiv	r4, r4, r7
    data->state = valid == false ? LV_INDEV_STATE_REL : LV_INDEV_STATE_PR;
 8005be6:	2001      	movs	r0, #1
 8005be8:	73a8      	strb	r0, [r5, #14]
    (*x) = (int32_t)x_sum / avg_last;
 8005bea:	802e      	strh	r6, [r5, #0]
    (*y) = (int32_t)y_sum / avg_last;
 8005bec:	806c      	strh	r4, [r5, #2]
}
 8005bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        x_sum += avg_buf_x[i];
 8005bf0:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8005bf4:	4406      	add	r6, r0
        y_sum += avg_buf_y[i];
 8005bf6:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
 8005bfa:	3101      	adds	r1, #1
 8005bfc:	4404      	add	r4, r0
 8005bfe:	e7e6      	b.n	8005bce <xpt2046_read+0xaa>
 8005c00:	40020800 	.word	0x40020800
 8005c04:	20015a2e 	.word	0x20015a2e
 8005c08:	20015a36 	.word	0x20015a36
 8005c0c:	20015a2c 	.word	0x20015a2c

08005c10 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8005c10:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8005c12:	b910      	cbnz	r0, 8005c1a <lv_disp_get_scr_act+0xa>
 8005c14:	f006 fbb6 	bl	800c384 <lv_disp_get_default>
    if(!disp) {
 8005c18:	b100      	cbz	r0, 8005c1c <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
    }

    return disp->act_scr;
 8005c1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8005c1c:	bd08      	pop	{r3, pc}

08005c1e <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 8005c22:	f001 f999 	bl	8006f58 <lv_obj_get_disp>

    d->act_scr = scr;
 8005c26:	6384      	str	r4, [r0, #56]	; 0x38

    lv_obj_invalidate(scr);
 8005c28:	4620      	mov	r0, r4
}
 8005c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 8005c2e:	f001 b9b9 	b.w	8006fa4 <lv_obj_invalidate>

08005c32 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8005c32:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8005c34:	b910      	cbnz	r0, 8005c3c <lv_disp_get_layer_top+0xa>
 8005c36:	f006 fba5 	bl	800c384 <lv_disp_get_default>
    if(!disp) {
 8005c3a:	b100      	cbz	r0, 8005c3e <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8005c3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005c3e:	bd08      	pop	{r3, pc}

08005c40 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8005c40:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8005c42:	b910      	cbnz	r0, 8005c4a <lv_disp_get_layer_sys+0xa>
 8005c44:	f006 fb9e 	bl	800c384 <lv_disp_get_default>
    if(!disp) {
 8005c48:	b100      	cbz	r0, 8005c4c <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
    }

    return disp->sys_layer;
 8005c4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005c4c:	bd08      	pop	{r3, pc}

08005c4e <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 8005c4e:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 8005c50:	2400      	movs	r4, #0
    while(i != NULL) {
 8005c52:	b928      	cbnz	r0, 8005c60 <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8005c54:	b16c      	cbz	r4, 8005c72 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8005c56:	4620      	mov	r0, r4
    }
}
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 8005c5c:	f001 b9f2 	b.w	8007044 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 8005c60:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005c64:	f013 0f20 	tst.w	r3, #32
 8005c68:	bf18      	it	ne
 8005c6a:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 8005c6c:	f001 fe39 	bl	80078e2 <lv_obj_get_parent>
 8005c70:	e7ef      	b.n	8005c52 <obj_to_foreground+0x4>
 8005c72:	bd10      	pop	{r4, pc}

08005c74 <focus_next_core.part.1>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t ** obj_next     = group->obj_focus;
 8005c78:	68c5      	ldr	r5, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4689      	mov	r9, r1
 8005c7e:	4692      	mov	sl, r2
    bool can_begin           = true;
 8005c80:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8005c82:	2600      	movs	r6, #0
        if(obj_next == NULL) {
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d14d      	bne.n	8005d24 <focus_next_core.part.1+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8005c88:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005c8c:	06db      	lsls	r3, r3, #27
 8005c8e:	d403      	bmi.n	8005c98 <focus_next_core.part.1+0x24>
 8005c90:	2e00      	cmp	r6, #0
 8005c92:	d056      	beq.n	8005d42 <focus_next_core.part.1+0xce>
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 8005c98:	2f00      	cmp	r7, #0
 8005c9a:	d054      	beq.n	8005d46 <focus_next_core.part.1+0xd2>
                obj_next  = begin(&group->obj_ll);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	47c8      	blx	r9
 8005ca0:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	d13a      	bne.n	8005d1c <focus_next_core.part.1+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	d04d      	beq.n	8005d46 <focus_next_core.part.1+0xd2>
 8005caa:	462e      	mov	r6, r5
 8005cac:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8005cae:	6828      	ldr	r0, [r5, #0]
 8005cb0:	f001 fec8 	bl	8007a44 <lv_obj_get_hidden>
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d1e4      	bne.n	8005c84 <focus_next_core.part.1+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	42ab      	cmp	r3, r5
 8005cbe:	d042      	beq.n	8005d46 <focus_next_core.part.1+0xd2>
    if(group->obj_focus) {
 8005cc0:	b183      	cbz	r3, 8005ce4 <focus_next_core.part.1+0x70>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	69c3      	ldr	r3, [r0, #28]
 8005cc8:	2110      	movs	r1, #16
 8005cca:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8005ccc:	68e3      	ldr	r3, [r4, #12]
 8005cce:	4642      	mov	r2, r8
 8005cd0:	210d      	movs	r1, #13
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	f001 f92c 	bl	8006f30 <lv_event_send>
        if(res != LV_RES_OK) return;
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d134      	bne.n	8005d46 <focus_next_core.part.1+0xd2>
        lv_obj_invalidate(*group->obj_focus);
 8005cdc:	68e3      	ldr	r3, [r4, #12]
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	f001 f960 	bl	8006fa4 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8005ce4:	6828      	ldr	r0, [r5, #0]
    group->obj_focus = obj_next;
 8005ce6:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8005ce8:	69c3      	ldr	r3, [r0, #28]
 8005cea:	2200      	movs	r2, #0
 8005cec:	210f      	movs	r1, #15
 8005cee:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8005cf0:	68e3      	ldr	r3, [r4, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	210c      	movs	r1, #12
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f001 f91a 	bl	8006f30 <lv_event_send>
    if(res != LV_RES_OK) return;
 8005cfc:	2801      	cmp	r0, #1
 8005cfe:	d122      	bne.n	8005d46 <focus_next_core.part.1+0xd2>
    obj_to_foreground(*group->obj_focus);
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f7ff ffa3 	bl	8005c4e <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8005d08:	68e3      	ldr	r3, [r4, #12]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f001 f94a 	bl	8006fa4 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8005d10:	69a3      	ldr	r3, [r4, #24]
 8005d12:	b1c3      	cbz	r3, 8005d46 <focus_next_core.part.1+0xd2>
 8005d14:	4620      	mov	r0, r4
}
 8005d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8005d1a:	4718      	bx	r3
        if(obj_sentinel == NULL) {
 8005d1c:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	d1c5      	bne.n	8005cae <focus_next_core.part.1+0x3a>
 8005d22:	e7b1      	b.n	8005c88 <focus_next_core.part.1+0x14>
            obj_next = move(&group->obj_ll, obj_next);
 8005d24:	4629      	mov	r1, r5
 8005d26:	4620      	mov	r0, r4
 8005d28:	47d0      	blx	sl
        if(obj_sentinel == NULL) {
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	bf08      	it	eq
 8005d2e:	462e      	moveq	r6, r5
            if(obj_next == obj_sentinel) return;
 8005d30:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8005d32:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 8005d34:	d1f3      	bne.n	8005d1e <focus_next_core.part.1+0xaa>
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                obj_next  = begin(&group->obj_ll);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	47c8      	blx	r9
 8005d3e:	4605      	mov	r5, r0
 8005d40:	e7b1      	b.n	8005ca6 <focus_next_core.part.1+0x32>
                if(!can_begin) return;
 8005d42:	2f00      	cmp	r7, #0
 8005d44:	d1f9      	bne.n	8005d3a <focus_next_core.part.1+0xc6>
 8005d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005d4c <lv_group_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8005d4c:	2170      	movs	r1, #112	; 0x70
 8005d4e:	4801      	ldr	r0, [pc, #4]	; (8005d54 <lv_group_init+0x8>)
 8005d50:	f006 bee7 	b.w	800cb22 <lv_ll_init>
 8005d54:	20015ea4 	.word	0x20015ea4

08005d58 <lv_group_focus_next>:
    if(group->frozen) return;
 8005d58:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d403      	bmi.n	8005d68 <lv_group_focus_next+0x10>
 8005d60:	4a02      	ldr	r2, [pc, #8]	; (8005d6c <lv_group_focus_next+0x14>)
 8005d62:	4903      	ldr	r1, [pc, #12]	; (8005d70 <lv_group_focus_next+0x18>)
 8005d64:	f7ff bf86 	b.w	8005c74 <focus_next_core.part.1>
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	0800cbbb 	.word	0x0800cbbb
 8005d70:	0800cbaf 	.word	0x0800cbaf

08005d74 <lv_group_focus_prev>:
 8005d74:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005d78:	07db      	lsls	r3, r3, #31
 8005d7a:	d403      	bmi.n	8005d84 <lv_group_focus_prev+0x10>
 8005d7c:	4a02      	ldr	r2, [pc, #8]	; (8005d88 <lv_group_focus_prev+0x14>)
 8005d7e:	4903      	ldr	r1, [pc, #12]	; (8005d8c <lv_group_focus_prev+0x18>)
 8005d80:	f7ff bf78 	b.w	8005c74 <focus_next_core.part.1>
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	0800cbc5 	.word	0x0800cbc5
 8005d8c:	0800cbb5 	.word	0x0800cbb5

08005d90 <lv_group_refocus>:
{
 8005d90:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8005d92:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005d96:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 8005d9a:	f043 0310 	orr.w	r3, r3, #16
 8005d9e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8005da2:	071b      	lsls	r3, r3, #28
{
 8005da4:	4604      	mov	r4, r0
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8005da6:	d408      	bmi.n	8005dba <lv_group_refocus+0x2a>
        lv_group_focus_next(g);
 8005da8:	f7ff ffd6 	bl	8005d58 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8005dac:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005db0:	f365 1304 	bfi	r3, r5, #4, #1
 8005db4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8005db8:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8005dba:	f7ff ffdb 	bl	8005d74 <lv_group_focus_prev>
 8005dbe:	e7f5      	b.n	8005dac <lv_group_refocus+0x1c>

08005dc0 <lv_group_add_obj>:
{
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	460c      	mov	r4, r1
    if(group == NULL) return;
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	b328      	cbz	r0, 8005e14 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 8005dc8:	f006 fef1 	bl	800cbae <lv_ll_get_head>
 8005dcc:	b978      	cbnz	r0, 8005dee <lv_group_add_obj+0x2e>
    if(obj->group_p) {
 8005dce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dd0:	b133      	cbz	r3, 8005de0 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f001 fec0 	bl	8007b58 <lv_obj_is_focused>
 8005dd8:	b110      	cbz	r0, 8005de0 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8005dda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ddc:	f7ff ffd8 	bl	8005d90 <lv_group_refocus>
    obj->group_p     = group;
 8005de0:	62e5      	str	r5, [r4, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8005de2:	4628      	mov	r0, r5
 8005de4:	f006 fec5 	bl	800cb72 <lv_ll_ins_tail>
    lv_mem_assert(next);
 8005de8:	4606      	mov	r6, r0
 8005dea:	b940      	cbnz	r0, 8005dfe <lv_group_add_obj+0x3e>
 8005dec:	e7fe      	b.n	8005dec <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 8005dee:	6803      	ldr	r3, [r0, #0]
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d00f      	beq.n	8005e14 <lv_group_add_obj+0x54>
    LV_LL_READ(group->obj_ll, obj_i)
 8005df4:	4601      	mov	r1, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	f006 fedf 	bl	800cbba <lv_ll_get_next>
 8005dfc:	e7e6      	b.n	8005dcc <lv_group_add_obj+0xc>
    *next = obj;
 8005dfe:	6004      	str	r4, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8005e00:	4628      	mov	r0, r5
 8005e02:	f006 fed4 	bl	800cbae <lv_ll_get_head>
 8005e06:	4286      	cmp	r6, r0
 8005e08:	d104      	bne.n	8005e14 <lv_group_add_obj+0x54>
        lv_group_refocus(group);
 8005e0a:	4628      	mov	r0, r5
}
 8005e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8005e10:	f7ff bfbe 	b.w	8005d90 <lv_group_refocus>
 8005e14:	bd70      	pop	{r4, r5, r6, pc}

08005e16 <lv_group_mod_style>:
{
 8005e16:	b538      	push	{r3, r4, r5, lr}
 8005e18:	4604      	mov	r4, r0
    lv_style_copy(&group->style_tmp, style);
 8005e1a:	f100 051c 	add.w	r5, r0, #28
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f002 f9e0 	bl	80081e4 <lv_style_copy>
    if(group->editing) {
 8005e24:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005e28:	079b      	lsls	r3, r3, #30
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8005e2a:	bf4c      	ite	mi
 8005e2c:	6963      	ldrmi	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8005e2e:	6923      	ldrpl	r3, [r4, #16]
 8005e30:	b113      	cbz	r3, 8005e38 <lv_group_mod_style+0x22>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4620      	mov	r0, r4
 8005e36:	4798      	blx	r3
}
 8005e38:	4628      	mov	r0, r5
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}

08005e3c <lv_group_get_focused>:
    if(!group) return NULL;
 8005e3c:	b110      	cbz	r0, 8005e44 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8005e3e:	68c0      	ldr	r0, [r0, #12]
 8005e40:	b100      	cbz	r0, 8005e44 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8005e42:	6800      	ldr	r0, [r0, #0]
}
 8005e44:	4770      	bx	lr

08005e46 <lv_group_send_data>:
{
 8005e46:	b513      	push	{r0, r1, r4, lr}
 8005e48:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8005e4a:	f7ff fff7 	bl	8005e3c <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8005e4e:	4604      	mov	r4, r0
 8005e50:	b160      	cbz	r0, 8005e6c <lv_group_send_data+0x26>
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8005e52:	69c3      	ldr	r3, [r0, #28]
 8005e54:	aa01      	add	r2, sp, #4
 8005e56:	2111      	movs	r1, #17
 8005e58:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8005e5a:	2801      	cmp	r0, #1
 8005e5c:	d104      	bne.n	8005e68 <lv_group_send_data+0x22>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8005e5e:	aa01      	add	r2, sp, #4
 8005e60:	210b      	movs	r1, #11
 8005e62:	4620      	mov	r0, r4
 8005e64:	f001 f864 	bl	8006f30 <lv_event_send>
}
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd10      	pop	{r4, pc}
    if(act == NULL) return LV_RES_OK;
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	e7fb      	b.n	8005e68 <lv_group_send_data+0x22>

08005e70 <lv_group_set_editing>:
{
 8005e70:	b538      	push	{r3, r4, r5, lr}
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8005e72:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8005e76:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8005e7a:	428a      	cmp	r2, r1
{
 8005e7c:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8005e7e:	d018      	beq.n	8005eb2 <lv_group_set_editing+0x42>
    group->editing     = en_val;
 8005e80:	f361 0341 	bfi	r3, r1, #1, #1
 8005e84:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    lv_obj_t * focused = lv_group_get_focused(group);
 8005e88:	f7ff ffd8 	bl	8005e3c <lv_group_get_focused>
    if(focused) {
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	b920      	cbnz	r0, 8005e9a <lv_group_set_editing+0x2a>
    lv_obj_invalidate(focused);
 8005e90:	4628      	mov	r0, r5
}
 8005e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(focused);
 8005e96:	f001 b885 	b.w	8006fa4 <lv_obj_invalidate>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8005e9a:	69c3      	ldr	r3, [r0, #28]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	210f      	movs	r1, #15
 8005ea0:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	210c      	movs	r1, #12
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	f001 f841 	bl	8006f30 <lv_event_send>
        if(res != LV_RES_OK) return;
 8005eae:	2801      	cmp	r0, #1
 8005eb0:	d0ee      	beq.n	8005e90 <lv_group_set_editing+0x20>
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}

08005eb4 <lv_group_focus_obj>:
{
 8005eb4:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	b170      	cbz	r0, 8005ed8 <lv_group_focus_obj+0x24>
    lv_group_t * g = obj->group_p;
 8005eba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    if(g == NULL) return;
 8005ebc:	b164      	cbz	r4, 8005ed8 <lv_group_focus_obj+0x24>
    if(g->frozen != 0) return;
 8005ebe:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 8005ec2:	f011 0101 	ands.w	r1, r1, #1
 8005ec6:	d107      	bne.n	8005ed8 <lv_group_focus_obj+0x24>
    lv_group_set_editing(g, false);
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7ff ffd1 	bl	8005e70 <lv_group_set_editing>
    LV_LL_READ(g->obj_ll, i)
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f006 fe6d 	bl	800cbae <lv_ll_get_head>
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	b900      	cbnz	r0, 8005eda <lv_group_focus_obj+0x26>
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	429e      	cmp	r6, r3
 8005ede:	d12e      	bne.n	8005f3e <lv_group_focus_obj+0x8a>
            if(g->obj_focus != NULL) {
 8005ee0:	68e3      	ldr	r3, [r4, #12]
 8005ee2:	b183      	cbz	r3, 8005f06 <lv_group_focus_obj+0x52>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	69c3      	ldr	r3, [r0, #28]
 8005eea:	2110      	movs	r1, #16
 8005eec:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	210d      	movs	r1, #13
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f001 f81b 	bl	8006f30 <lv_event_send>
                if(res != LV_RES_OK) return;
 8005efa:	2801      	cmp	r0, #1
 8005efc:	d1ec      	bne.n	8005ed8 <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f001 f84f 	bl	8006fa4 <lv_obj_invalidate>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8005f06:	6828      	ldr	r0, [r5, #0]
            g->obj_focus = i;
 8005f08:	60e5      	str	r5, [r4, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8005f0a:	69c3      	ldr	r3, [r0, #28]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	210f      	movs	r1, #15
 8005f10:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 8005f12:	69a3      	ldr	r3, [r4, #24]
 8005f14:	b10b      	cbz	r3, 8005f1a <lv_group_focus_obj+0x66>
 8005f16:	4620      	mov	r0, r4
 8005f18:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	210c      	movs	r1, #12
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f001 f805 	bl	8006f30 <lv_event_send>
                if(res != LV_RES_OK) return;
 8005f26:	2801      	cmp	r0, #1
 8005f28:	d1d6      	bne.n	8005ed8 <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f001 f839 	bl	8006fa4 <lv_obj_invalidate>
                obj_to_foreground(*g->obj_focus);
 8005f32:	68e3      	ldr	r3, [r4, #12]
}
 8005f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                obj_to_foreground(*g->obj_focus);
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f7ff be88 	b.w	8005c4e <obj_to_foreground>
    LV_LL_READ(g->obj_ll, i)
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4620      	mov	r0, r4
 8005f42:	f006 fe3a 	bl	800cbba <lv_ll_get_next>
 8005f46:	e7c5      	b.n	8005ed4 <lv_group_focus_obj+0x20>

08005f48 <lv_group_get_editing>:
    if(!group) return false;
 8005f48:	b118      	cbz	r0, 8005f52 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 8005f4a:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 8005f4e:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8005f52:	4770      	bx	lr

08005f54 <lv_group_get_click_focus>:
    if(!group) return false;
 8005f54:	b118      	cbz	r0, 8005f5e <lv_group_get_click_focus+0xa>
    return group->click_focus ? true : false;
 8005f56:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 8005f5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 8005f5e:	4770      	bx	lr

08005f60 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 8005f60:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8005f64:	f010 0002 	ands.w	r0, r0, #2
        indev_obj_act = NULL;
 8005f68:	bf1e      	ittt	ne
 8005f6a:	4b03      	ldrne	r3, [pc, #12]	; (8005f78 <indev_reset_check+0x18>)
 8005f6c:	2200      	movne	r2, #0
 8005f6e:	601a      	strne	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
 8005f70:	3000      	adds	r0, #0
 8005f72:	bf18      	it	ne
 8005f74:	2001      	movne	r0, #1
 8005f76:	4770      	bx	lr
 8005f78:	2001048c 	.word	0x2001048c

08005f7c <indev_search_obj>:
{
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	460c      	mov	r4, r1
 8005f80:	4607      	mov	r7, r0
    if(lv_area_is_point_on(&obj->coords, &proc->types.pointer.act_point)) {
 8005f82:	1d01      	adds	r1, r0, #4
 8005f84:	f104 0010 	add.w	r0, r4, #16
 8005f88:	f006 fc84 	bl	800c894 <lv_area_is_point_on>
 8005f8c:	b908      	cbnz	r0, 8005f92 <indev_search_obj+0x16>
    lv_obj_t * found_p = NULL;
 8005f8e:	2000      	movs	r0, #0
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_LL_READ(obj->child_ll, i)
 8005f92:	1d26      	adds	r6, r4, #4
 8005f94:	4630      	mov	r0, r6
 8005f96:	f006 fe0a 	bl	800cbae <lv_ll_get_head>
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	b930      	cbnz	r0, 8005fac <indev_search_obj+0x30>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f001 fd55 	bl	8007a4e <lv_obj_get_click>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0f2      	beq.n	8005f8e <indev_search_obj+0x12>
 8005fa8:	4625      	mov	r5, r4
 8005faa:	e012      	b.n	8005fd2 <indev_search_obj+0x56>
            found_p = indev_search_obj(proc, i);
 8005fac:	4629      	mov	r1, r5
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ffe4 	bl	8005f7c <indev_search_obj>
            if(found_p != NULL) {
 8005fb4:	b988      	cbnz	r0, 8005fda <indev_search_obj+0x5e>
        LV_LL_READ(obj->child_ll, i)
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f006 fdfe 	bl	800cbba <lv_ll_get_next>
 8005fbe:	e7ec      	b.n	8005f9a <indev_search_obj+0x1e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f001 fd3f 	bl	8007a44 <lv_obj_get_hidden>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d1e1      	bne.n	8005f8e <indev_search_obj+0x12>
                hidden_i = lv_obj_get_parent(hidden_i);
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f001 fc89 	bl	80078e2 <lv_obj_get_parent>
 8005fd0:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	d1f4      	bne.n	8005fc0 <indev_search_obj+0x44>
            if(hidden_i == NULL) found_p = obj;
 8005fd6:	4620      	mov	r0, r4
    return found_p;
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8005fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fdc <indev_proc_press>:
{
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 8005fe2:	4ea3      	ldr	r6, [pc, #652]	; (8006270 <indev_proc_press+0x294>)
    if(proc->wait_until_release != 0) return;
 8005fe4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
 8005fe8:	6980      	ldr	r0, [r0, #24]
 8005fea:	6030      	str	r0, [r6, #0]
    if(proc->wait_until_release != 0) return;
 8005fec:	071a      	lsls	r2, r3, #28
{
 8005fee:	b085      	sub	sp, #20
    if(proc->wait_until_release != 0) return;
 8005ff0:	f100 8124 	bmi.w	800623c <indev_proc_press+0x260>
    lv_disp_t * disp = indev_act->driver.disp;
 8005ff4:	4f9f      	ldr	r7, [pc, #636]	; (8006274 <indev_proc_press+0x298>)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68dd      	ldr	r5, [r3, #12]
    if(indev_obj_act == NULL) {
 8005ffa:	b9d8      	cbnz	r0, 8006034 <indev_proc_press+0x58>
        indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_sys(disp));
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f7ff fe1f 	bl	8005c40 <lv_disp_get_layer_sys>
 8006002:	4601      	mov	r1, r0
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff ffb9 	bl	8005f7c <indev_search_obj>
 800600a:	6030      	str	r0, [r6, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_top(disp));
 800600c:	b938      	cbnz	r0, 800601e <indev_proc_press+0x42>
 800600e:	4628      	mov	r0, r5
 8006010:	f7ff fe0f 	bl	8005c32 <lv_disp_get_layer_top>
 8006014:	4601      	mov	r1, r0
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff ffb0 	bl	8005f7c <indev_search_obj>
 800601c:	6030      	str	r0, [r6, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_scr_act(disp));
 800601e:	6833      	ldr	r3, [r6, #0]
 8006020:	b98b      	cbnz	r3, 8006046 <indev_proc_press+0x6a>
 8006022:	4628      	mov	r0, r5
 8006024:	f7ff fdf4 	bl	8005c10 <lv_disp_get_scr_act>
 8006028:	4601      	mov	r1, r0
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff ffa6 	bl	8005f7c <indev_search_obj>
 8006030:	6030      	str	r0, [r6, #0]
 8006032:	e008      	b.n	8006046 <indev_proc_press+0x6a>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8006034:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006038:	079b      	lsls	r3, r3, #30
 800603a:	d409      	bmi.n	8006050 <indev_proc_press+0x74>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 800603c:	2110      	movs	r1, #16
 800603e:	f001 fd7c 	bl	8007b3a <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8006042:	2800      	cmp	r0, #0
 8006044:	d0da      	beq.n	8005ffc <indev_proc_press+0x20>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8006046:	69a5      	ldr	r5, [r4, #24]
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	429d      	cmp	r5, r3
 800604c:	f040 80a5 	bne.w	800619a <indev_proc_press+0x1be>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8006050:	8923      	ldrh	r3, [r4, #8]
 8006052:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8006054:	88e1      	ldrh	r1, [r4, #6]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8006056:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800605a:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800605c:	8963      	ldrh	r3, [r4, #10]
 800605e:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8006060:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8006064:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006068:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800606a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800606e:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8006070:	b209      	sxth	r1, r1
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8006072:	10db      	asrs	r3, r3, #3
    if(proc->types.pointer.drag_throw_vect.x < 0)
 8006074:	2a00      	cmp	r2, #0
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8006076:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8006078:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 800607a:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800607c:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
 800607e:	f280 80e9 	bge.w	8006254 <indev_proc_press+0x278>
        proc->types.pointer.drag_throw_vect.x++;
 8006082:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
 8006084:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
 8006086:	2b00      	cmp	r3, #0
 8006088:	f280 80e8 	bge.w	800625c <indev_proc_press+0x280>
        proc->types.pointer.drag_throw_vect.y++;
 800608c:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
 800608e:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8006090:	8aa3      	ldrh	r3, [r4, #20]
 8006092:	eb03 0060 	add.w	r0, r3, r0, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8006096:	8ae3      	ldrh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8006098:	82a0      	strh	r0, [r4, #20]
    if(indev_obj_act != NULL) {
 800609a:	6830      	ldr	r0, [r6, #0]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800609c:	eb03 0161 	add.w	r1, r3, r1, asr #1
 80060a0:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
 80060a2:	2800      	cmp	r0, #0
 80060a4:	f000 80ca 	beq.w	800623c <indev_proc_press+0x260>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	69c3      	ldr	r3, [r0, #28]
 80060ac:	2108      	movs	r1, #8
 80060ae:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7ff ff55 	bl	8005f60 <indev_reset_check>
 80060b6:	4602      	mov	r2, r0
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f040 80bf 	bne.w	800623c <indev_proc_press+0x260>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80060be:	2101      	movs	r1, #1
 80060c0:	6830      	ldr	r0, [r6, #0]
 80060c2:	f000 ff35 	bl	8006f30 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff ff4a 	bl	8005f60 <indev_reset_check>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f040 80b5 	bne.w	800623c <indev_proc_press+0x260>
    lv_obj_t * drag_obj    = state->types.pointer.act_obj;
 80060d2:	69a5      	ldr	r5, [r4, #24]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80060d4:	4628      	mov	r0, r5
 80060d6:	f001 fcce 	bl	8007a76 <lv_obj_get_drag_parent>
 80060da:	4680      	mov	r8, r0
 80060dc:	2800      	cmp	r0, #0
 80060de:	f000 80cb 	beq.w	8006278 <indev_proc_press+0x29c>
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f040 80be 	bne.w	8006264 <indev_proc_press+0x288>
        if(indev_reset_check(proc)) return;
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff ff39 	bl	8005f60 <indev_reset_check>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 80a4 	bne.w	800623c <indev_proc_press+0x260>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 80060f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80060f8:	0798      	lsls	r0, r3, #30
 80060fa:	f100 809f 	bmi.w	800623c <indev_proc_press+0x260>
 80060fe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d427      	bmi.n	8006156 <indev_proc_press+0x17a>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8006106:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006108:	f006 fa2a 	bl	800c560 <lv_tick_elaps>
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	8ad3      	ldrh	r3, [r2, #22]
 8006110:	4298      	cmp	r0, r3
 8006112:	d91c      	bls.n	800614e <indev_proc_press+0x172>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 8006114:	6830      	ldr	r0, [r6, #0]
 8006116:	210b      	movs	r1, #11
 8006118:	69c3      	ldr	r3, [r0, #28]
 800611a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ff1f 	bl	8005f60 <indev_reset_check>
 8006122:	4602      	mov	r2, r0
 8006124:	2800      	cmp	r0, #0
 8006126:	f040 8089 	bne.w	800623c <indev_proc_press+0x260>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800612a:	2104      	movs	r1, #4
 800612c:	6830      	ldr	r0, [r6, #0]
 800612e:	f000 feff 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ff14 	bl	8005f60 <indev_reset_check>
 8006138:	2800      	cmp	r0, #0
 800613a:	d17f      	bne.n	800623c <indev_proc_press+0x260>
                proc->long_pr_sent = 1;
 800613c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                proc->longpr_rep_timestamp = lv_tick_get();
 8006148:	f006 f9fc 	bl	800c544 <lv_tick_get>
 800614c:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 800614e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006152:	079a      	lsls	r2, r3, #30
 8006154:	d472      	bmi.n	800623c <indev_proc_press+0x260>
 8006156:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800615a:	07db      	lsls	r3, r3, #31
 800615c:	d56e      	bpl.n	800623c <indev_proc_press+0x260>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 800615e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006160:	f006 f9fe 	bl	800c560 <lv_tick_elaps>
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	8b13      	ldrh	r3, [r2, #24]
 8006168:	4298      	cmp	r0, r3
 800616a:	d967      	bls.n	800623c <indev_proc_press+0x260>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 800616c:	6830      	ldr	r0, [r6, #0]
 800616e:	210c      	movs	r1, #12
 8006170:	69c3      	ldr	r3, [r0, #28]
 8006172:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fef3 	bl	8005f60 <indev_reset_check>
 800617a:	4602      	mov	r2, r0
 800617c:	2800      	cmp	r0, #0
 800617e:	d15d      	bne.n	800623c <indev_proc_press+0x260>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8006180:	2105      	movs	r1, #5
 8006182:	6830      	ldr	r0, [r6, #0]
 8006184:	f000 fed4 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff fee9 	bl	8005f60 <indev_reset_check>
 800618e:	2800      	cmp	r0, #0
 8006190:	d154      	bne.n	800623c <indev_proc_press+0x260>
                proc->longpr_rep_timestamp = lv_tick_get();
 8006192:	f006 f9d7 	bl	800c544 <lv_tick_get>
 8006196:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006198:	e050      	b.n	800623c <indev_proc_press+0x260>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 800619a:	88a3      	ldrh	r3, [r4, #4]
 800619c:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 800619e:	88e3      	ldrh	r3, [r4, #6]
 80061a0:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	d137      	bne.n	8006216 <indev_proc_press+0x23a>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 80061a6:	6833      	ldr	r3, [r6, #0]
 80061a8:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 80061aa:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f43f af4f 	beq.w	8006050 <indev_proc_press+0x74>
            proc->pr_timestamp                 = lv_tick_get();
 80061b2:	f006 f9c7 	bl	800c544 <lv_tick_get>
            proc->long_pr_sent                 = 0;
 80061b6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
            proc->pr_timestamp                 = lv_tick_get();
 80061ba:	62a0      	str	r0, [r4, #40]	; 0x28
            proc->long_pr_sent                 = 0;
 80061bc:	f36f 0300 	bfc	r3, #0, #1
 80061c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            proc->types.pointer.drag_limit_out = 0;
 80061c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
            lv_obj_t * i        = indev_obj_act;
 80061c8:	6830      	ldr	r0, [r6, #0]
            proc->types.pointer.drag_in_prog   = 0;
 80061ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061ce:	f36f 0341 	bfc	r3, #1, #1
 80061d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            proc->types.pointer.drag_sum.x     = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
 80061da:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.vect.x         = 0;
 80061dc:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
 80061de:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * last_top = NULL;
 80061e0:	461d      	mov	r5, r3
            while(i != NULL) {
 80061e2:	bb70      	cbnz	r0, 8006242 <indev_proc_press+0x266>
            if(last_top != NULL) {
 80061e4:	b115      	cbz	r5, 80061ec <indev_proc_press+0x210>
                lv_obj_move_foreground(last_top);
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 ff2c 	bl	8007044 <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 80061ec:	6830      	ldr	r0, [r6, #0]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	69c3      	ldr	r3, [r0, #28]
 80061f2:	2107      	movs	r1, #7
 80061f4:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff feb2 	bl	8005f60 <indev_reset_check>
 80061fc:	4602      	mov	r2, r0
 80061fe:	b9e8      	cbnz	r0, 800623c <indev_proc_press+0x260>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8006200:	4601      	mov	r1, r0
 8006202:	6830      	ldr	r0, [r6, #0]
 8006204:	f000 fe94 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff fea9 	bl	8005f60 <indev_reset_check>
 800620e:	2800      	cmp	r0, #0
 8006210:	f43f af1e 	beq.w	8006050 <indev_proc_press+0x74>
 8006214:	e012      	b.n	800623c <indev_proc_press+0x260>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	69eb      	ldr	r3, [r5, #28]
 800621a:	2109      	movs	r1, #9
 800621c:	4628      	mov	r0, r5
 800621e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff fe9d 	bl	8005f60 <indev_reset_check>
 8006226:	4602      	mov	r2, r0
 8006228:	b940      	cbnz	r0, 800623c <indev_proc_press+0x260>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 800622a:	2102      	movs	r1, #2
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fe7f 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff fe94 	bl	8005f60 <indev_reset_check>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0b4      	beq.n	80061a6 <indev_proc_press+0x1ca>
}
 800623c:	b005      	add	sp, #20
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
 8006242:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006246:	f013 0f20 	tst.w	r3, #32
 800624a:	bf18      	it	ne
 800624c:	4605      	movne	r5, r0
                i = lv_obj_get_parent(i);
 800624e:	f001 fb48 	bl	80078e2 <lv_obj_get_parent>
 8006252:	e7c6      	b.n	80061e2 <indev_proc_press+0x206>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8006254:	f43f af17 	beq.w	8006086 <indev_proc_press+0xaa>
        proc->types.pointer.drag_throw_vect.x--;
 8006258:	3a01      	subs	r2, #1
 800625a:	e713      	b.n	8006084 <indev_proc_press+0xa8>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 800625c:	f43f af18 	beq.w	8006090 <indev_proc_press+0xb4>
        proc->types.pointer.drag_throw_vect.y--;
 8006260:	3b01      	subs	r3, #1
 8006262:	e714      	b.n	800608e <indev_proc_press+0xb2>
        drag_obj = lv_obj_get_parent(drag_obj);
 8006264:	4628      	mov	r0, r5
 8006266:	f001 fb3c 	bl	80078e2 <lv_obj_get_parent>
 800626a:	4605      	mov	r5, r0
 800626c:	e732      	b.n	80060d4 <indev_proc_press+0xf8>
 800626e:	bf00      	nop
 8006270:	2001048c 	.word	0x2001048c
 8006274:	20010488 	.word	0x20010488
    if(drag_obj == NULL) return;
 8006278:	2d00      	cmp	r5, #0
 800627a:	f43f af35 	beq.w	80060e8 <indev_proc_press+0x10c>
    if(lv_obj_get_drag(drag_obj) == false) return;
 800627e:	4628      	mov	r0, r5
 8006280:	f001 fbea 	bl	8007a58 <lv_obj_get_drag>
 8006284:	4681      	mov	r9, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	f43f af2e 	beq.w	80060e8 <indev_proc_press+0x10c>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 800628c:	4628      	mov	r0, r5
 800628e:	f001 fbe8 	bl	8007a62 <lv_obj_get_drag_dir>
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 8006292:	8a21      	ldrh	r1, [r4, #16]
 8006294:	89a2      	ldrh	r2, [r4, #12]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8006296:	4603      	mov	r3, r0
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 8006298:	4411      	add	r1, r2
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 800629a:	89e0      	ldrh	r0, [r4, #14]
 800629c:	8a62      	ldrh	r2, [r4, #18]
 800629e:	4402      	add	r2, r0
    if(state->types.pointer.drag_limit_out == 0) {
 80062a0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 80062a4:	b209      	sxth	r1, r1
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 80062a6:	b212      	sxth	r2, r2
    if(state->types.pointer.drag_limit_out == 0) {
 80062a8:	07c0      	lsls	r0, r0, #31
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 80062aa:	8221      	strh	r1, [r4, #16]
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 80062ac:	8262      	strh	r2, [r4, #18]
    if(state->types.pointer.drag_limit_out == 0) {
 80062ae:	d418      	bmi.n	80062e2 <indev_proc_press+0x306>
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 80062b0:	07d8      	lsls	r0, r3, #31
 80062b2:	d506      	bpl.n	80062c2 <indev_proc_press+0x2e6>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	2900      	cmp	r1, #0
 80062b8:	7d00      	ldrb	r0, [r0, #20]
 80062ba:	bfb8      	it	lt
 80062bc:	4249      	neglt	r1, r1
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 80062be:	4281      	cmp	r1, r0
 80062c0:	da08      	bge.n	80062d4 <indev_proc_press+0x2f8>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 80062c2:	0798      	lsls	r0, r3, #30
 80062c4:	d50d      	bpl.n	80062e2 <indev_proc_press+0x306>
            LV_MATH_ABS(state->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	7d09      	ldrb	r1, [r1, #20]
 80062cc:	bfb8      	it	lt
 80062ce:	4252      	neglt	r2, r2
           ((allowed_dirs & LV_DRAG_DIR_VER) &&
 80062d0:	428a      	cmp	r2, r1
 80062d2:	db06      	blt.n	80062e2 <indev_proc_press+0x306>
            state->types.pointer.drag_limit_out = 1;
 80062d4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
            drag_just_started                   = true;
 80062e0:	46c8      	mov	r8, r9
    if(state->types.pointer.drag_limit_out != 0) {
 80062e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80062e6:	07d1      	lsls	r1, r2, #31
 80062e8:	f57f aefe 	bpl.w	80060e8 <indev_proc_press+0x10c>
        if(state->types.pointer.vect.x != 0 || state->types.pointer.vect.y != 0) {
 80062ec:	68e2      	ldr	r2, [r4, #12]
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	f43f aefa 	beq.w	80060e8 <indev_proc_press+0x10c>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	9303      	str	r3, [sp, #12]
            uint16_t inv_buf_size =
 80062f8:	68d0      	ldr	r0, [r2, #12]
 80062fa:	f006 f87f 	bl	800c3fc <lv_disp_get_inv_buf_size>
            lv_coord_t prev_x     = drag_obj->coords.x1;
 80062fe:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8006302:	9300      	str	r3, [sp, #0]
            uint16_t inv_buf_size =
 8006304:	4681      	mov	r9, r0
            lv_coord_t prev_y     = drag_obj->coords.y1;
 8006306:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800630a:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800630c:	4628      	mov	r0, r5
 800630e:	f001 fae8 	bl	80078e2 <lv_obj_get_parent>
 8006312:	f001 fb26 	bl	8007962 <lv_obj_get_width>
 8006316:	4683      	mov	fp, r0
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8006318:	4628      	mov	r0, r5
 800631a:	f001 fae2 	bl	80078e2 <lv_obj_get_parent>
 800631e:	f001 fb26 	bl	800796e <lv_obj_get_height>
 8006322:	4682      	mov	sl, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 8006324:	4628      	mov	r0, r5
 8006326:	f001 fb10 	bl	800794a <lv_obj_get_x>
 800632a:	9002      	str	r0, [sp, #8]
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 800632c:	4628      	mov	r0, r5
 800632e:	f001 fb12 	bl	8007956 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_ALL) {
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	9902      	ldr	r1, [sp, #8]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d138      	bne.n	80063ac <indev_proc_press+0x3d0>
                if(drag_just_started) {
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	d005      	beq.n	800634c <indev_proc_press+0x370>
                    act_x += state->types.pointer.drag_sum.x;
 8006340:	8a23      	ldrh	r3, [r4, #16]
                    act_y += state->types.pointer.drag_sum.y;
 8006342:	8a62      	ldrh	r2, [r4, #18]
                    act_x += state->types.pointer.drag_sum.x;
 8006344:	4419      	add	r1, r3
                    act_y += state->types.pointer.drag_sum.y;
 8006346:	4410      	add	r0, r2
                    act_x += state->types.pointer.drag_sum.x;
 8006348:	b209      	sxth	r1, r1
                    act_y += state->types.pointer.drag_sum.y;
 800634a:	b200      	sxth	r0, r0
                lv_obj_set_pos(drag_obj, act_x + state->types.pointer.vect.x, act_y + state->types.pointer.vect.y);
 800634c:	89e2      	ldrh	r2, [r4, #14]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	4402      	add	r2, r0
 8006352:	4419      	add	r1, r3
 8006354:	b212      	sxth	r2, r2
 8006356:	b209      	sxth	r1, r1
 8006358:	4628      	mov	r0, r5
 800635a:	f000 fe90 	bl	800707e <lv_obj_set_pos>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 800635e:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8006362:	9a00      	ldr	r2, [sp, #0]
 8006364:	4293      	cmp	r3, r2
 8006366:	d13f      	bne.n	80063e8 <indev_proc_press+0x40c>
 8006368:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800636c:	9a01      	ldr	r2, [sp, #4]
 800636e:	4293      	cmp	r3, r2
 8006370:	d13a      	bne.n	80063e8 <indev_proc_press+0x40c>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8006372:	4628      	mov	r0, r5
 8006374:	f001 fab5 	bl	80078e2 <lv_obj_get_parent>
 8006378:	f001 faf3 	bl	8007962 <lv_obj_get_width>
 800637c:	4680      	mov	r8, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 800637e:	4628      	mov	r0, r5
 8006380:	f001 faaf 	bl	80078e2 <lv_obj_get_parent>
 8006384:	f001 faf3 	bl	800796e <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8006388:	45c3      	cmp	fp, r8
 800638a:	f47f aead 	bne.w	80060e8 <indev_proc_press+0x10c>
 800638e:	4582      	cmp	sl, r0
 8006390:	f47f aeaa 	bne.w	80060e8 <indev_proc_press+0x10c>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68d8      	ldr	r0, [r3, #12]
 8006398:	f006 f830 	bl	800c3fc <lv_disp_get_inv_buf_size>
                    lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	eba0 0109 	sub.w	r1, r0, r9
 80063a2:	b289      	uxth	r1, r1
 80063a4:	68d8      	ldr	r0, [r3, #12]
 80063a6:	f006 f82e 	bl	800c406 <lv_disp_pop_from_inv_buf>
 80063aa:	e69d      	b.n	80060e8 <indev_proc_press+0x10c>
            } else if(allowed_dirs & LV_DRAG_DIR_HOR) {
 80063ac:	07da      	lsls	r2, r3, #31
 80063ae:	d50c      	bpl.n	80063ca <indev_proc_press+0x3ee>
                if(drag_just_started) {
 80063b0:	f1b8 0f00 	cmp.w	r8, #0
 80063b4:	d002      	beq.n	80063bc <indev_proc_press+0x3e0>
                    act_x += state->types.pointer.drag_sum.x;
 80063b6:	8a23      	ldrh	r3, [r4, #16]
 80063b8:	4419      	add	r1, r3
 80063ba:	b209      	sxth	r1, r1
                lv_obj_set_x(drag_obj, act_x + state->types.pointer.vect.x);
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	4419      	add	r1, r3
 80063c0:	b209      	sxth	r1, r1
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 fe9e 	bl	8007104 <lv_obj_set_x>
 80063c8:	e7c9      	b.n	800635e <indev_proc_press+0x382>
            } else if(allowed_dirs & LV_DRAG_DIR_VER) {
 80063ca:	079b      	lsls	r3, r3, #30
 80063cc:	d5c7      	bpl.n	800635e <indev_proc_press+0x382>
                if(drag_just_started) {
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d002      	beq.n	80063da <indev_proc_press+0x3fe>
                    act_y += state->types.pointer.drag_sum.y;
 80063d4:	8a62      	ldrh	r2, [r4, #18]
 80063d6:	4410      	add	r0, r2
 80063d8:	b200      	sxth	r0, r0
                lv_obj_set_y(drag_obj, act_y + state->types.pointer.vect.y);
 80063da:	89e1      	ldrh	r1, [r4, #14]
 80063dc:	4401      	add	r1, r0
 80063de:	b209      	sxth	r1, r1
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 fe99 	bl	8007118 <lv_obj_set_y>
 80063e6:	e7ba      	b.n	800635e <indev_proc_press+0x382>
                state->types.pointer.drag_in_prog = 1;
 80063e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                if(drag_just_started) {
 80063f4:	f1b8 0f00 	cmp.w	r8, #0
 80063f8:	f43f ae76 	beq.w	80060e8 <indev_proc_press+0x10c>
                    drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	69eb      	ldr	r3, [r5, #28]
 8006400:	210d      	movs	r1, #13
 8006402:	4628      	mov	r0, r5
 8006404:	4798      	blx	r3
                    if(indev_reset_check(state)) return;
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fdaa 	bl	8005f60 <indev_reset_check>
 800640c:	4602      	mov	r2, r0
 800640e:	2800      	cmp	r0, #0
 8006410:	f47f ae6a 	bne.w	80060e8 <indev_proc_press+0x10c>
                    lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8006414:	2108      	movs	r1, #8
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fd8a 	bl	8006f30 <lv_event_send>
                    if(indev_reset_check(state)) return;
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff fd9f 	bl	8005f60 <indev_reset_check>
 8006422:	e661      	b.n	80060e8 <indev_proc_press+0x10c>

08006424 <indev_proc_release>:
{
 8006424:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(proc->wait_until_release != 0) {
 8006428:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800642c:	071f      	lsls	r7, r3, #28
{
 800642e:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8006430:	d508      	bpl.n	8006444 <indev_proc_release+0x20>
        proc->types.pointer.act_obj  = NULL;
 8006432:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 8006434:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.act_obj  = NULL;
 8006438:	6182      	str	r2, [r0, #24]
        proc->types.pointer.last_obj = NULL;
 800643a:	61c2      	str	r2, [r0, #28]
        proc->pr_timestamp           = 0;
 800643c:	6282      	str	r2, [r0, #40]	; 0x28
        proc->longpr_rep_timestamp   = 0;
 800643e:	62c2      	str	r2, [r0, #44]	; 0x2c
        proc->wait_until_release     = 0;
 8006440:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    indev_obj_act = proc->types.pointer.act_obj;
 8006444:	69a0      	ldr	r0, [r4, #24]
 8006446:	4d8a      	ldr	r5, [pc, #552]	; (8006670 <indev_proc_release+0x24c>)
 8006448:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 800644a:	2800      	cmp	r0, #0
 800644c:	d068      	beq.n	8006520 <indev_proc_release+0xfc>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 800644e:	2110      	movs	r1, #16
 8006450:	f001 fb73 	bl	8007b3a <lv_obj_is_protected>
 8006454:	4b87      	ldr	r3, [pc, #540]	; (8006674 <indev_proc_release+0x250>)
 8006456:	2800      	cmp	r0, #0
 8006458:	f000 808c 	beq.w	8006574 <indev_proc_release+0x150>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 800645c:	6828      	ldr	r0, [r5, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	69c6      	ldr	r6, [r0, #28]
 8006462:	210a      	movs	r1, #10
 8006464:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fd7a 	bl	8005f60 <indev_reset_check>
 800646c:	2800      	cmp	r0, #0
 800646e:	d17e      	bne.n	800656e <indev_proc_release+0x14a>
            if(proc->types.pointer.drag_in_prog == 0) {
 8006470:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006474:	079e      	lsls	r6, r3, #30
 8006476:	d561      	bpl.n	800653c <indev_proc_release+0x118>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8006478:	2200      	movs	r2, #0
 800647a:	2107      	movs	r1, #7
 800647c:	6828      	ldr	r0, [r5, #0]
 800647e:	f000 fd57 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff fd6c 	bl	8005f60 <indev_reset_check>
 8006488:	2800      	cmp	r0, #0
 800648a:	d170      	bne.n	800656e <indev_proc_release+0x14a>
        if(indev_reset_check(proc)) return;
 800648c:	4620      	mov	r0, r4
 800648e:	f7ff fd67 	bl	8005f60 <indev_reset_check>
 8006492:	4606      	mov	r6, r0
 8006494:	2800      	cmp	r0, #0
 8006496:	d16a      	bne.n	800656e <indev_proc_release+0x14a>
        lv_group_t * g = lv_obj_get_group(indev_obj_act);
 8006498:	6828      	ldr	r0, [r5, #0]
 800649a:	f001 fb5b 	bl	8007b54 <lv_obj_get_group>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false) {
 800649e:	2120      	movs	r1, #32
        lv_group_t * g = lv_obj_get_group(indev_obj_act);
 80064a0:	4680      	mov	r8, r0
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false) {
 80064a2:	6828      	ldr	r0, [r5, #0]
 80064a4:	f001 fb49 	bl	8007b3a <lv_obj_is_protected>
 80064a8:	b970      	cbnz	r0, 80064c8 <indev_proc_release+0xa4>
            lv_obj_t * parent = indev_obj_act;
 80064aa:	682f      	ldr	r7, [r5, #0]
            while(g == NULL) {
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	f000 8083 	beq.w	80065ba <indev_proc_release+0x196>
            if(g && parent) {
 80064b4:	b147      	cbz	r7, 80064c8 <indev_proc_release+0xa4>
                if(lv_group_get_click_focus(g)) {
 80064b6:	4640      	mov	r0, r8
 80064b8:	f7ff fd4c 	bl	8005f54 <lv_group_get_click_focus>
 80064bc:	4680      	mov	r8, r0
 80064be:	b118      	cbz	r0, 80064c8 <indev_proc_release+0xa4>
                    lv_group_focus_obj(parent);
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff fcf7 	bl	8005eb4 <lv_group_focus_obj>
                    click_focus_sent = true;
 80064c6:	4646      	mov	r6, r8
        if(proc->types.pointer.last_pressed != indev_obj_act && click_focus_sent == false) {
 80064c8:	6a20      	ldr	r0, [r4, #32]
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	4298      	cmp	r0, r3
 80064ce:	d015      	beq.n	80064fc <indev_proc_release+0xd8>
 80064d0:	b9a6      	cbnz	r6, 80064fc <indev_proc_release+0xd8>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80064d2:	4632      	mov	r2, r6
 80064d4:	210d      	movs	r1, #13
 80064d6:	f000 fd2b 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80064da:	4620      	mov	r0, r4
 80064dc:	f7ff fd40 	bl	8005f60 <indev_reset_check>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d144      	bne.n	800656e <indev_proc_release+0x14a>
            lv_event_send(proc->types.pointer.act_obj, LV_EVENT_FOCUSED, NULL);
 80064e4:	4632      	mov	r2, r6
 80064e6:	210c      	movs	r1, #12
 80064e8:	69a0      	ldr	r0, [r4, #24]
 80064ea:	f000 fd21 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff fd36 	bl	8005f60 <indev_reset_check>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d13a      	bne.n	800656e <indev_proc_release+0x14a>
            proc->types.pointer.last_pressed = indev_obj_act;
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	6223      	str	r3, [r4, #32]
        if(indev_reset_check(proc)) return;
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff fd2f 	bl	8005f60 <indev_reset_check>
 8006502:	2800      	cmp	r0, #0
 8006504:	d133      	bne.n	800656e <indev_proc_release+0x14a>
        lv_obj_t * drag_obj = indev_obj_act;
 8006506:	682d      	ldr	r5, [r5, #0]
        while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8006508:	4628      	mov	r0, r5
 800650a:	f001 fab4 	bl	8007a76 <lv_obj_get_drag_parent>
 800650e:	4606      	mov	r6, r0
 8006510:	2800      	cmp	r0, #0
 8006512:	d068      	beq.n	80065e6 <indev_proc_release+0x1c2>
 8006514:	2d00      	cmp	r5, #0
 8006516:	d161      	bne.n	80065dc <indev_proc_release+0x1b8>
        proc->types.pointer.act_obj = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
 800651c:	62a3      	str	r3, [r4, #40]	; 0x28
        proc->longpr_rep_timestamp  = 0;
 800651e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8006520:	69e5      	ldr	r5, [r4, #28]
 8006522:	b325      	cbz	r5, 800656e <indev_proc_release+0x14a>
 8006524:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006528:	079a      	lsls	r2, r3, #30
 800652a:	d420      	bmi.n	800656e <indev_proc_release+0x14a>
    if(proc->types.pointer.drag_in_prog == 0) return;
 800652c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006530:	079b      	lsls	r3, r3, #30
 8006532:	d472      	bmi.n	800661a <indev_proc_release+0x1f6>
        if(indev_reset_check(proc)) return;
 8006534:	4620      	mov	r0, r4
 8006536:	f7ff fd13 	bl	8005f60 <indev_reset_check>
 800653a:	e018      	b.n	800656e <indev_proc_release+0x14a>
                if(proc->long_pr_sent == 0) {
 800653c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006540:	f012 0201 	ands.w	r2, r2, #1
 8006544:	d00a      	beq.n	800655c <indev_proc_release+0x138>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006546:	2200      	movs	r2, #0
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006548:	2106      	movs	r1, #6
 800654a:	6828      	ldr	r0, [r5, #0]
 800654c:	f000 fcf0 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff fd05 	bl	8005f60 <indev_reset_check>
 8006556:	2800      	cmp	r0, #0
 8006558:	d08e      	beq.n	8006478 <indev_proc_release+0x54>
 800655a:	e008      	b.n	800656e <indev_proc_release+0x14a>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800655c:	2103      	movs	r1, #3
 800655e:	6828      	ldr	r0, [r5, #0]
 8006560:	f000 fce6 	bl	8006f30 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff fcfb 	bl	8005f60 <indev_reset_check>
 800656a:	2800      	cmp	r0, #0
 800656c:	d0eb      	beq.n	8006546 <indev_proc_release+0x122>
}
 800656e:	b004      	add	sp, #16
 8006570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8006574:	6828      	ldr	r0, [r5, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	69c6      	ldr	r6, [r0, #28]
 800657a:	210a      	movs	r1, #10
 800657c:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fcee 	bl	8005f60 <indev_reset_check>
 8006584:	2800      	cmp	r0, #0
 8006586:	d1f2      	bne.n	800656e <indev_proc_release+0x14a>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8006588:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800658c:	07d8      	lsls	r0, r3, #31
 800658e:	d505      	bpl.n	800659c <indev_proc_release+0x178>
            if(proc->types.pointer.drag_in_prog == 0) {
 8006590:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006594:	f012 0202 	ands.w	r2, r2, #2
 8006598:	d0d6      	beq.n	8006548 <indev_proc_release+0x124>
 800659a:	e76d      	b.n	8006478 <indev_proc_release+0x54>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 800659c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80065a0:	f012 0202 	ands.w	r2, r2, #2
 80065a4:	d1f4      	bne.n	8006590 <indev_proc_release+0x16c>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80065a6:	2103      	movs	r1, #3
 80065a8:	6828      	ldr	r0, [r5, #0]
 80065aa:	f000 fcc1 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7ff fcd6 	bl	8005f60 <indev_reset_check>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d0eb      	beq.n	8006590 <indev_proc_release+0x16c>
 80065b8:	e7d9      	b.n	800656e <indev_proc_release+0x14a>
                parent = lv_obj_get_parent(parent);
 80065ba:	4638      	mov	r0, r7
 80065bc:	f001 f991 	bl	80078e2 <lv_obj_get_parent>
                if(parent == NULL) break;
 80065c0:	4607      	mov	r7, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d080      	beq.n	80064c8 <indev_proc_release+0xa4>
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {
 80065c6:	2120      	movs	r1, #32
 80065c8:	f001 fab7 	bl	8007b3a <lv_obj_is_protected>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f47f af7b 	bne.w	80064c8 <indev_proc_release+0xa4>
                g = lv_obj_get_group(parent);
 80065d2:	4638      	mov	r0, r7
 80065d4:	f001 fabe 	bl	8007b54 <lv_obj_get_group>
 80065d8:	4680      	mov	r8, r0
 80065da:	e767      	b.n	80064ac <indev_proc_release+0x88>
            drag_obj = lv_obj_get_parent(drag_obj);
 80065dc:	4628      	mov	r0, r5
 80065de:	f001 f980 	bl	80078e2 <lv_obj_get_parent>
 80065e2:	4605      	mov	r5, r0
 80065e4:	e790      	b.n	8006508 <indev_proc_release+0xe4>
        if(drag_obj) {
 80065e6:	2d00      	cmp	r5, #0
 80065e8:	d096      	beq.n	8006518 <indev_proc_release+0xf4>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 80065ea:	4628      	mov	r0, r5
 80065ec:	f001 fa3e 	bl	8007a6c <lv_obj_get_drag_throw>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d091      	beq.n	8006518 <indev_proc_release+0xf4>
 80065f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80065f8:	0799      	lsls	r1, r3, #30
 80065fa:	d58d      	bpl.n	8006518 <indev_proc_release+0xf4>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 80065fc:	4632      	mov	r2, r6
 80065fe:	210a      	movs	r1, #10
 8006600:	4628      	mov	r0, r5
 8006602:	f000 fc95 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff fcaa 	bl	8005f60 <indev_reset_check>
 800660c:	2800      	cmp	r0, #0
 800660e:	d083      	beq.n	8006518 <indev_proc_release+0xf4>
 8006610:	e7ad      	b.n	800656e <indev_proc_release+0x14a>
        drag_obj = lv_obj_get_parent(drag_obj);
 8006612:	4628      	mov	r0, r5
 8006614:	f001 f965 	bl	80078e2 <lv_obj_get_parent>
 8006618:	4605      	mov	r5, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 800661a:	4628      	mov	r0, r5
 800661c:	f001 fa2b 	bl	8007a76 <lv_obj_get_drag_parent>
 8006620:	b110      	cbz	r0, 8006628 <indev_proc_release+0x204>
 8006622:	2d00      	cmp	r5, #0
 8006624:	d1f5      	bne.n	8006612 <indev_proc_release+0x1ee>
 8006626:	e785      	b.n	8006534 <indev_proc_release+0x110>
    if(drag_obj == NULL) {
 8006628:	2d00      	cmp	r5, #0
 800662a:	d083      	beq.n	8006534 <indev_proc_release+0x110>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 800662c:	4628      	mov	r0, r5
 800662e:	f001 fa1d 	bl	8007a6c <lv_obj_get_drag_throw>
 8006632:	4f10      	ldr	r7, [pc, #64]	; (8006674 <indev_proc_release+0x250>)
 8006634:	4606      	mov	r6, r0
 8006636:	b9f8      	cbnz	r0, 8006678 <indev_proc_release+0x254>
        proc->types.pointer.drag_in_prog = 0;
 8006638:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 800663c:	683a      	ldr	r2, [r7, #0]
        proc->types.pointer.drag_in_prog = 0;
 800663e:	f360 0341 	bfi	r3, r0, #1, #1
 8006642:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006646:	69eb      	ldr	r3, [r5, #28]
 8006648:	210e      	movs	r1, #14
 800664a:	4628      	mov	r0, r5
 800664c:	4798      	blx	r3
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 800664e:	4632      	mov	r2, r6
 8006650:	2109      	movs	r1, #9
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fc6c 	bl	8006f30 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fc81 	bl	8005f60 <indev_reset_check>
 800665e:	4602      	mov	r2, r0
 8006660:	2800      	cmp	r0, #0
 8006662:	f47f af67 	bne.w	8006534 <indev_proc_release+0x110>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8006666:	2109      	movs	r1, #9
 8006668:	4628      	mov	r0, r5
 800666a:	f000 fc61 	bl	8006f30 <lv_event_send>
 800666e:	e761      	b.n	8006534 <indev_proc_release+0x110>
 8006670:	2001048c 	.word	0x2001048c
 8006674:	20010488 	.word	0x20010488
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8006678:	4628      	mov	r0, r5
 800667a:	f001 f9f2 	bl	8007a62 <lv_obj_get_drag_dir>
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	7d51      	ldrb	r1, [r2, #21]
 8006682:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
 8006686:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 800668a:	4680      	mov	r8, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 800668c:	4359      	muls	r1, r3
 800668e:	2064      	movs	r0, #100	; 0x64
 8006690:	fb91 f1f0 	sdiv	r1, r1, r0
    proc->types.pointer.drag_throw_vect.x =
 8006694:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8006696:	7d53      	ldrb	r3, [r2, #21]
 8006698:	1ac1      	subs	r1, r0, r3
 800669a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800669e:	434b      	muls	r3, r1
 80066a0:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
 80066a4:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 80066a6:	6961      	ldr	r1, [r4, #20]
 80066a8:	2900      	cmp	r1, #0
 80066aa:	d05f      	beq.n	800676c <indev_proc_release+0x348>
        lv_obj_get_coords(drag_obj, &coords_ori);
 80066ac:	4669      	mov	r1, sp
 80066ae:	4628      	mov	r0, r5
 80066b0:	f001 f945 	bl	800793e <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 80066b4:	4628      	mov	r0, r5
 80066b6:	f001 f948 	bl	800794a <lv_obj_get_x>
 80066ba:	8aa6      	ldrh	r6, [r4, #20]
 80066bc:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 80066be:	4628      	mov	r0, r5
 80066c0:	f001 f949 	bl	8007956 <lv_obj_get_y>
 80066c4:	8ae2      	ldrh	r2, [r4, #22]
        if(allowed_dirs == LV_DRAG_DIR_ALL)
 80066c6:	f1b8 0f03 	cmp.w	r8, #3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 80066ca:	4402      	add	r2, r0
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 80066cc:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 80066ce:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_ALL)
 80066d0:	d13c      	bne.n	800674c <indev_proc_release+0x328>
            lv_obj_set_pos(drag_obj, act_x, act_y);
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 fcd2 	bl	800707e <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
 80066da:	a902      	add	r1, sp, #8
 80066dc:	4628      	mov	r0, r5
 80066de:	f001 f92e 	bl	800793e <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 80066e2:	f9bd 2000 	ldrsh.w	r2, [sp]
 80066e6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d004      	beq.n	80066f8 <indev_proc_release+0x2d4>
 80066ee:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f47f af1e 	bne.w	8006534 <indev_proc_release+0x110>
 80066f8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80066fc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006700:	429a      	cmp	r2, r3
 8006702:	d004      	beq.n	800670e <indev_proc_release+0x2ea>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8006704:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f47f af13 	bne.w	8006534 <indev_proc_release+0x110>
            proc->types.pointer.drag_in_prog      = 0;
 800670e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006712:	683a      	ldr	r2, [r7, #0]
            proc->types.pointer.drag_in_prog      = 0;
 8006714:	f36f 0341 	bfc	r3, #1, #1
 8006718:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            proc->types.pointer.vect.x            = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
 8006720:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8006722:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8006724:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006726:	69eb      	ldr	r3, [r5, #28]
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006728:	210e      	movs	r1, #14
 800672a:	4628      	mov	r0, r5
 800672c:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff fc16 	bl	8005f60 <indev_reset_check>
 8006734:	4602      	mov	r2, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	f47f aefc 	bne.w	8006534 <indev_proc_release+0x110>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 800673c:	2109      	movs	r1, #9
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fbf6 	bl	8006f30 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff fc0b 	bl	8005f60 <indev_reset_check>
 800674a:	e6f3      	b.n	8006534 <indev_proc_release+0x110>
        else if(allowed_dirs & LV_DRAG_DIR_HOR)
 800674c:	f018 0f01 	tst.w	r8, #1
 8006750:	d004      	beq.n	800675c <indev_proc_release+0x338>
            lv_obj_set_x(drag_obj, act_x);
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	f000 fcd5 	bl	8007104 <lv_obj_set_x>
 800675a:	e7be      	b.n	80066da <indev_proc_release+0x2b6>
        else if(allowed_dirs & LV_DRAG_DIR_VER)
 800675c:	f018 0f02 	tst.w	r8, #2
 8006760:	d0bb      	beq.n	80066da <indev_proc_release+0x2b6>
            lv_obj_set_y(drag_obj, act_y);
 8006762:	4611      	mov	r1, r2
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fcd7 	bl	8007118 <lv_obj_set_y>
 800676a:	e7b6      	b.n	80066da <indev_proc_release+0x2b6>
        proc->types.pointer.drag_in_prog = 0;
 800676c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006770:	f361 0341 	bfi	r3, r1, #1, #1
 8006774:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8006778:	69eb      	ldr	r3, [r5, #28]
 800677a:	e7d5      	b.n	8006728 <indev_proc_release+0x304>

0800677c <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 800677c:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8006780:	0793      	lsls	r3, r2, #30
 8006782:	d519      	bpl.n	80067b8 <indev_proc_reset_query_handler+0x3c>
        indev->proc.types.pointer.act_obj           = NULL;
 8006784:	2300      	movs	r3, #0
        indev->proc.types.pointer.drag_limit_out    = 0;
 8006786:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.types.pointer.act_obj           = NULL;
 800678a:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.reset_query                     = 0;
 800678c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006790:	f363 0241 	bfi	r2, r3, #1, #1
        indev->proc.types.pointer.drag_in_prog      = 0;
 8006794:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
        indev->proc.reset_query                     = 0;
 8006798:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
        indev_obj_act                               = NULL;
 800679c:	4a07      	ldr	r2, [pc, #28]	; (80067bc <indev_proc_reset_query_handler+0x40>)
        indev->proc.types.pointer.last_obj          = NULL;
 800679e:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_in_prog      = 0;
 80067a0:	f363 0141 	bfi	r1, r3, #1, #1
        indev->proc.types.pointer.last_pressed      = NULL;
 80067a4:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.types.pointer.drag_in_prog      = 0;
 80067a6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev->proc.pr_timestamp                    = 0;
 80067aa:	6443      	str	r3, [r0, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 80067ac:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.types.pointer.drag_sum.x        = 0;
 80067ae:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
 80067b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 80067b2:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 80067b4:	8643      	strh	r3, [r0, #50]	; 0x32
        indev_obj_act                               = NULL;
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	2001048c 	.word	0x2001048c

080067c0 <lv_indev_reset.part.1>:
void lv_indev_reset(lv_indev_t * indev)
 80067c0:	b508      	push	{r3, lr}
        lv_indev_t * i = lv_indev_get_next(NULL);
 80067c2:	2000      	movs	r0, #0
            i = lv_indev_get_next(i);
 80067c4:	f005 fe8a 	bl	800c4dc <lv_indev_get_next>
        while(i) {
 80067c8:	b900      	cbnz	r0, 80067cc <lv_indev_reset.part.1+0xc>
}
 80067ca:	bd08      	pop	{r3, pc}
            i->proc.reset_query = 1;
 80067cc:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80067d8:	e7f4      	b.n	80067c4 <lv_indev_reset.part.1+0x4>

080067da <lv_indev_init>:
{
 80067da:	f7ff bff1 	b.w	80067c0 <lv_indev_reset.part.1>
	...

080067e0 <lv_indev_read_task>:
{
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    indev_act = task->user_data;
 80067e4:	68c4      	ldr	r4, [r0, #12]
 80067e6:	4bb8      	ldr	r3, [pc, #736]	; (8006ac8 <lv_indev_read_task+0x2e8>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 80067e8:	68e2      	ldr	r2, [r4, #12]
    indev_act = task->user_data;
 80067ea:	601c      	str	r4, [r3, #0]
{
 80067ec:	b087      	sub	sp, #28
 80067ee:	4698      	mov	r8, r3
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 80067f0:	2a00      	cmp	r2, #0
 80067f2:	f000 80ad 	beq.w	8006950 <lv_indev_read_task+0x170>
    indev_proc_reset_query_handler(indev_act);
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff ffc0 	bl	800677c <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 80067fc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006800:	0758      	lsls	r0, r3, #29
 8006802:	f100 80a5 	bmi.w	8006950 <lv_indev_read_task+0x170>
        indev_obj_act = NULL;
 8006806:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8006acc <lv_indev_read_task+0x2ec>
 800680a:	4655      	mov	r5, sl
        more_to_read = lv_indev_read(indev_act, &data);
 800680c:	a902      	add	r1, sp, #8
 800680e:	f8d8 0000 	ldr.w	r0, [r8]
 8006812:	f005 fe6d 	bl	800c4f0 <lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8006816:	f8d8 4000 	ldr.w	r4, [r8]
        more_to_read = lv_indev_read(indev_act, &data);
 800681a:	4681      	mov	r9, r0
        indev_proc_reset_query_handler(indev_act);
 800681c:	4620      	mov	r0, r4
 800681e:	f7ff ffad 	bl	800677c <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	f8ca 3000 	str.w	r3, [sl]
        indev_act->proc.state = data.state;
 8006828:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800682c:	7723      	strb	r3, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <lv_indev_read_task+0x5e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8006832:	68e4      	ldr	r4, [r4, #12]
 8006834:	f005 fe86 	bl	800c544 <lv_tick_get>
 8006838:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
 800683c:	e006      	b.n	800684c <lv_indev_read_task+0x6c>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 800683e:	7823      	ldrb	r3, [r4, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d103      	bne.n	800684c <lv_indev_read_task+0x6c>
 8006844:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f2      	bne.n	8006832 <lv_indev_read_task+0x52>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 800684c:	f8d8 4000 	ldr.w	r4, [r8]
 8006850:	7823      	ldrb	r3, [r4, #0]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d11e      	bne.n	8006894 <lv_indev_read_task+0xb4>
    if(i->cursor != NULL &&
 8006856:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006858:	b148      	cbz	r0, 800686e <lv_indev_read_task+0x8e>
 800685a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800685c:	9b02      	ldr	r3, [sp, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d005      	beq.n	800686e <lv_indev_read_task+0x8e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8006862:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8006866:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800686a:	f000 fc08 	bl	800707e <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 800686e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006872:	8423      	strh	r3, [r4, #32]
    if(i->proc.state == LV_INDEV_STATE_PR) {
 8006874:	4620      	mov	r0, r4
    i->proc.types.pointer.act_point.y = data->point.y;
 8006876:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800687a:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
 800687c:	f810 3f1c 	ldrb.w	r3, [r0, #28]!
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8006880:	2b01      	cmp	r3, #1
 8006882:	f040 827e 	bne.w	8006d82 <lv_indev_read_task+0x5a2>
        indev_proc_press(&i->proc);
 8006886:	f7ff fba9 	bl	8005fdc <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 800688a:	8c23      	ldrh	r3, [r4, #32]
 800688c:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 800688e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006890:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006892:	e051      	b.n	8006938 <lv_indev_read_task+0x158>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8006894:	2b02      	cmp	r3, #2
 8006896:	f040 811b 	bne.w	8006ad0 <lv_indev_read_task+0x2f0>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 800689a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80068a4:	d101      	bne.n	80068aa <lv_indev_read_task+0xca>
 80068a6:	0719      	lsls	r1, r3, #28
 80068a8:	d446      	bmi.n	8006938 <lv_indev_read_task+0x158>
    if(i->proc.wait_until_release) {
 80068aa:	071a      	lsls	r2, r3, #28
 80068ac:	d509      	bpl.n	80068c2 <lv_indev_read_task+0xe2>
        i->proc.pr_timestamp            = 0;
 80068ae:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 80068b0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80068b4:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 80068b8:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 80068ba:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80068be:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
 80068c2:	6d66      	ldr	r6, [r4, #84]	; 0x54
    if(g == NULL) return;
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	d037      	beq.n	8006938 <lv_indev_read_task+0x158>
    indev_obj_act = lv_group_get_focused(g);
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff fab7 	bl	8005e3c <lv_group_get_focused>
 80068ce:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 80068d0:	b390      	cbz	r0, 8006938 <lv_indev_read_task+0x158>
    i->proc.types.keypad.last_key = data->key;
 80068d2:	9a03      	ldr	r2, [sp, #12]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 80068d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
 80068d6:	6262      	str	r2, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 80068d8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 80068dc:	f894 7020 	ldrb.w	r7, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
 80068e0:	f884 2020 	strb.w	r2, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 80068e4:	2a01      	cmp	r2, #1
 80068e6:	f040 80b2 	bne.w	8006a4e <lv_indev_read_task+0x26e>
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	d14d      	bne.n	800698a <lv_indev_read_task+0x1aa>
        i->proc.pr_timestamp = lv_tick_get();
 80068ee:	f005 fe29 	bl	800c544 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80068f2:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 80068f4:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 80068f6:	290a      	cmp	r1, #10
 80068f8:	d10f      	bne.n	800691a <lv_indev_read_task+0x13a>
            lv_group_send_data(g, LV_KEY_ENTER);
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff faa3 	bl	8005e46 <lv_group_send_data>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8006900:	6828      	ldr	r0, [r5, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	69c3      	ldr	r3, [r0, #28]
 8006906:	2107      	movs	r1, #7
            if(indev_reset_check(&i->proc)) return;
 8006908:	341c      	adds	r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800690a:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff fb27 	bl	8005f60 <indev_reset_check>
 8006912:	4602      	mov	r2, r0
 8006914:	b980      	cbnz	r0, 8006938 <lv_indev_read_task+0x158>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8006916:	4601      	mov	r1, r0
 8006918:	e05d      	b.n	80069d6 <lv_indev_read_task+0x1f6>
        } else if(data->key == LV_KEY_ESC) {
 800691a:	291b      	cmp	r1, #27
 800691c:	d11b      	bne.n	8006956 <lv_indev_read_task+0x176>
            lv_group_send_data(g, LV_KEY_ESC);
 800691e:	4630      	mov	r0, r6
 8006920:	f7ff fa91 	bl	8005e46 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8006924:	463a      	mov	r2, r7
 8006926:	2112      	movs	r1, #18
 8006928:	6828      	ldr	r0, [r5, #0]
 800692a:	f000 fb01 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800692e:	f104 001c 	add.w	r0, r4, #28
                if(indev_reset_check(&i->proc)) return;
 8006932:	f7ff fb15 	bl	8005f60 <indev_reset_check>
 8006936:	b328      	cbz	r0, 8006984 <lv_indev_read_task+0x1a4>
        indev_proc_reset_query_handler(indev_act);
 8006938:	f8d8 0000 	ldr.w	r0, [r8]
 800693c:	f7ff ff1e 	bl	800677c <indev_proc_reset_query_handler>
    } while(more_to_read);
 8006940:	f1b9 0f00 	cmp.w	r9, #0
 8006944:	f47f af62 	bne.w	800680c <lv_indev_read_task+0x2c>
    indev_act     = NULL;
 8006948:	f8c8 9000 	str.w	r9, [r8]
    indev_obj_act = NULL;
 800694c:	f8c5 9000 	str.w	r9, [r5]
}
 8006950:	b007      	add	sp, #28
 8006952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(data->key == LV_KEY_NEXT) {
 8006956:	2909      	cmp	r1, #9
 8006958:	d107      	bne.n	800696a <lv_indev_read_task+0x18a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7ff fa87 	bl	8005e70 <lv_group_set_editing>
            lv_group_focus_next(g);
 8006962:	4630      	mov	r0, r6
 8006964:	f7ff f9f8 	bl	8005d58 <lv_group_focus_next>
 8006968:	e7e1      	b.n	800692e <lv_indev_read_task+0x14e>
        else if(data->key == LV_KEY_PREV) {
 800696a:	290b      	cmp	r1, #11
 800696c:	d107      	bne.n	800697e <lv_indev_read_task+0x19e>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f7ff fa7d 	bl	8005e70 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8006976:	4630      	mov	r0, r6
 8006978:	f7ff f9fc 	bl	8005d74 <lv_group_focus_prev>
 800697c:	e7d7      	b.n	800692e <lv_indev_read_task+0x14e>
            lv_group_send_data(g, data->key);
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff fa61 	bl	8005e46 <lv_group_send_data>
    indev_obj_act = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	e7d6      	b.n	8006938 <lv_indev_read_task+0x158>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 800698a:	2f01      	cmp	r7, #1
 800698c:	d1fa      	bne.n	8006984 <lv_indev_read_task+0x1a4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800698e:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
 8006992:	f017 0701 	ands.w	r7, r7, #1
 8006996:	d123      	bne.n	80069e0 <lv_indev_read_task+0x200>
 8006998:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800699a:	f005 fde1 	bl	800c560 <lv_tick_elaps>
 800699e:	8ae3      	ldrh	r3, [r4, #22]
 80069a0:	4298      	cmp	r0, r3
 80069a2:	d91d      	bls.n	80069e0 <lv_indev_read_task+0x200>
            i->proc.long_pr_sent = 1;
 80069a4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	2b0a      	cmp	r3, #10
 80069b4:	d1e6      	bne.n	8006984 <lv_indev_read_task+0x1a4>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80069b6:	f005 fdc5 	bl	800c544 <lv_tick_get>
 80069ba:	64a0      	str	r0, [r4, #72]	; 0x48
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80069bc:	6828      	ldr	r0, [r5, #0]
 80069be:	463a      	mov	r2, r7
 80069c0:	69c3      	ldr	r3, [r0, #28]
 80069c2:	210b      	movs	r1, #11
                if(indev_reset_check(&i->proc)) return;
 80069c4:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80069c6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7ff fac9 	bl	8005f60 <indev_reset_check>
 80069ce:	4602      	mov	r2, r0
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d1b1      	bne.n	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80069d4:	2104      	movs	r1, #4
 80069d6:	6828      	ldr	r0, [r5, #0]
 80069d8:	f000 faaa 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80069dc:	4620      	mov	r0, r4
 80069de:	e7a8      	b.n	8006932 <lv_indev_read_task+0x152>
        else if(i->proc.long_pr_sent != 0 &&
 80069e0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80069e4:	07df      	lsls	r7, r3, #31
 80069e6:	d5cd      	bpl.n	8006984 <lv_indev_read_task+0x1a4>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 80069e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069ea:	f005 fdb9 	bl	800c560 <lv_tick_elaps>
 80069ee:	8b23      	ldrh	r3, [r4, #24]
        else if(i->proc.long_pr_sent != 0 &&
 80069f0:	4298      	cmp	r0, r3
 80069f2:	d9c7      	bls.n	8006984 <lv_indev_read_task+0x1a4>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80069f4:	f005 fda6 	bl	800c544 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80069f8:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80069fa:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 80069fc:	290a      	cmp	r1, #10
 80069fe:	f104 041c 	add.w	r4, r4, #28
 8006a02:	d10c      	bne.n	8006a1e <lv_indev_read_task+0x23e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8006a04:	6828      	ldr	r0, [r5, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	69c3      	ldr	r3, [r0, #28]
 8006a0a:	210c      	movs	r1, #12
 8006a0c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff faa6 	bl	8005f60 <indev_reset_check>
 8006a14:	4602      	mov	r2, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d18e      	bne.n	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8006a1a:	2105      	movs	r1, #5
 8006a1c:	e7db      	b.n	80069d6 <lv_indev_read_task+0x1f6>
            else if(data->key == LV_KEY_NEXT) {
 8006a1e:	2909      	cmp	r1, #9
 8006a20:	d107      	bne.n	8006a32 <lv_indev_read_task+0x252>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8006a22:	4630      	mov	r0, r6
 8006a24:	2100      	movs	r1, #0
 8006a26:	f7ff fa23 	bl	8005e70 <lv_group_set_editing>
                lv_group_focus_next(g);
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff f994 	bl	8005d58 <lv_group_focus_next>
 8006a30:	e7d4      	b.n	80069dc <lv_indev_read_task+0x1fc>
            else if(data->key == LV_KEY_PREV) {
 8006a32:	290b      	cmp	r1, #11
 8006a34:	d107      	bne.n	8006a46 <lv_indev_read_task+0x266>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8006a36:	4630      	mov	r0, r6
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f7ff fa19 	bl	8005e70 <lv_group_set_editing>
                lv_group_focus_prev(g);
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff f998 	bl	8005d74 <lv_group_focus_prev>
 8006a44:	e7ca      	b.n	80069dc <lv_indev_read_task+0x1fc>
                lv_group_send_data(g, data->key);
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff f9fd 	bl	8005e46 <lv_group_send_data>
 8006a4c:	e7c6      	b.n	80069dc <lv_indev_read_task+0x1fc>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d198      	bne.n	8006984 <lv_indev_read_task+0x1a4>
 8006a52:	2f01      	cmp	r7, #1
 8006a54:	d196      	bne.n	8006984 <lv_indev_read_task+0x1a4>
        if(data->key == LV_KEY_ENTER) {
 8006a56:	290a      	cmp	r1, #10
        data->key = prev_key;
 8006a58:	9103      	str	r1, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 8006a5a:	d006      	beq.n	8006a6a <lv_indev_read_task+0x28a>
        i->proc.long_pr_sent = 0;
 8006a5c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
        i->proc.pr_timestamp = 0;
 8006a60:	2200      	movs	r2, #0
 8006a62:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8006a64:	f362 0300 	bfi	r3, r2, #0, #1
 8006a68:	e0e4      	b.n	8006c34 <lv_indev_read_task+0x454>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006a6a:	69c3      	ldr	r3, [r0, #28]
            if(indev_reset_check(&i->proc)) return;
 8006a6c:	f104 061c 	add.w	r6, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006a70:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff fa74 	bl	8005f60 <indev_reset_check>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f47f af5d 	bne.w	8006938 <lv_indev_read_task+0x158>
            if(i->proc.long_pr_sent == 0) {
 8006a7e:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8006a82:	f012 0201 	ands.w	r2, r2, #1
 8006a86:	d015      	beq.n	8006ab4 <lv_indev_read_task+0x2d4>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006a88:	2200      	movs	r2, #0
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006a8a:	2106      	movs	r1, #6
 8006a8c:	6828      	ldr	r0, [r5, #0]
 8006a8e:	f000 fa4f 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff fa64 	bl	8005f60 <indev_reset_check>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f47f af4c 	bne.w	8006938 <lv_indev_read_task+0x158>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8006aa0:	2107      	movs	r1, #7
 8006aa2:	6828      	ldr	r0, [r5, #0]
 8006aa4:	f000 fa44 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fa59 	bl	8005f60 <indev_reset_check>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0d4      	beq.n	8006a5c <lv_indev_read_task+0x27c>
 8006ab2:	e741      	b.n	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8006ab4:	2103      	movs	r1, #3
 8006ab6:	6828      	ldr	r0, [r5, #0]
 8006ab8:	f000 fa3a 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff fa4f 	bl	8005f60 <indev_reset_check>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d0e0      	beq.n	8006a88 <lv_indev_read_task+0x2a8>
 8006ac6:	e737      	b.n	8006938 <lv_indev_read_task+0x158>
 8006ac8:	20010488 	.word	0x20010488
 8006acc:	2001048c 	.word	0x2001048c
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	f040 8140 	bne.w	8006d56 <lv_indev_read_task+0x576>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8006ad6:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8006ada:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006ade:	2901      	cmp	r1, #1
 8006ae0:	d102      	bne.n	8006ae8 <lv_indev_read_task+0x308>
 8006ae2:	071e      	lsls	r6, r3, #28
 8006ae4:	f53f af28 	bmi.w	8006938 <lv_indev_read_task+0x158>
    if(i->proc.wait_until_release) {
 8006ae8:	0718      	lsls	r0, r3, #28
 8006aea:	d509      	bpl.n	8006b00 <lv_indev_read_task+0x320>
        i->proc.pr_timestamp            = 0;
 8006aec:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8006aee:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8006af2:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 8006af6:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8006af8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8006afc:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
 8006b00:	6d66      	ldr	r6, [r4, #84]	; 0x54
    i->proc.types.keypad.last_key   = data->key;
 8006b02:	9b03      	ldr	r3, [sp, #12]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8006b04:	f894 b020 	ldrb.w	fp, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 8006b08:	6263      	str	r3, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8006b0a:	f884 1020 	strb.w	r1, [r4, #32]
    if(g == NULL) return;
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	f43f af12 	beq.w	8006938 <lv_indev_read_task+0x158>
    indev_obj_act = lv_group_get_focused(g);
 8006b14:	4630      	mov	r0, r6
 8006b16:	f7ff f991 	bl	8005e3c <lv_group_get_focused>
 8006b1a:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f43f af0b 	beq.w	8006938 <lv_indev_read_task+0x158>
    if(data->state == LV_INDEV_STATE_REL) {
 8006b22:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8006b26:	b31f      	cbz	r7, 8006b70 <lv_indev_read_task+0x390>
    indev_obj_act = lv_group_get_focused(g);
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7ff f987 	bl	8005e3c <lv_group_get_focused>
 8006b2e:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f43f af01 	beq.w	8006938 <lv_indev_read_task+0x158>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8006b36:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8006b3a:	2901      	cmp	r1, #1
 8006b3c:	f040 8094 	bne.w	8006c68 <lv_indev_read_task+0x488>
 8006b40:	f1bb 0f00 	cmp.w	fp, #0
 8006b44:	d14a      	bne.n	8006bdc <lv_indev_read_task+0x3fc>
        bool editable = false;
 8006b46:	aa06      	add	r2, sp, #24
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006b48:	69c3      	ldr	r3, [r0, #28]
        bool editable = false;
 8006b4a:	f802 bd11 	strb.w	fp, [r2, #-17]!
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006b4e:	2112      	movs	r1, #18
 8006b50:	4798      	blx	r3
        i->proc.pr_timestamp = lv_tick_get();
 8006b52:	f005 fcf7 	bl	800c544 <lv_tick_get>
 8006b56:	6460      	str	r0, [r4, #68]	; 0x44
        if(lv_group_get_editing(g) == true || editable == false) {
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f7ff f9f5 	bl	8005f48 <lv_group_get_editing>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f47f aece 	bne.w	8006900 <lv_indev_read_task+0x120>
 8006b64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af0b 	bne.w	8006984 <lv_indev_read_task+0x1a4>
 8006b6e:	e6c7      	b.n	8006900 <lv_indev_read_task+0x120>
        if(lv_group_get_editing(g)) {
 8006b70:	4630      	mov	r0, r6
 8006b72:	f7ff f9e9 	bl	8005f48 <lv_group_get_editing>
 8006b76:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006b7a:	b1b8      	cbz	r0, 8006bac <lv_indev_read_task+0x3cc>
            if(data->enc_diff < 0) {
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da0a      	bge.n	8006b96 <lv_indev_read_task+0x3b6>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8006b80:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006b84:	425b      	negs	r3, r3
 8006b86:	429f      	cmp	r7, r3
 8006b88:	dace      	bge.n	8006b28 <lv_indev_read_task+0x348>
 8006b8a:	2114      	movs	r1, #20
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff f95a 	bl	8005e46 <lv_group_send_data>
 8006b92:	3701      	adds	r7, #1
 8006b94:	e7f4      	b.n	8006b80 <lv_indev_read_task+0x3a0>
            } else if(data->enc_diff > 0) {
 8006b96:	d0c7      	beq.n	8006b28 <lv_indev_read_task+0x348>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8006b98:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006b9c:	429f      	cmp	r7, r3
 8006b9e:	dac3      	bge.n	8006b28 <lv_indev_read_task+0x348>
 8006ba0:	2113      	movs	r1, #19
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7ff f94f 	bl	8005e46 <lv_group_send_data>
 8006ba8:	3701      	adds	r7, #1
 8006baa:	e7f5      	b.n	8006b98 <lv_indev_read_task+0x3b8>
            if(data->enc_diff < 0) {
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	da0a      	bge.n	8006bc6 <lv_indev_read_task+0x3e6>
 8006bb0:	4607      	mov	r7, r0
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8006bb2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006bb6:	425b      	negs	r3, r3
 8006bb8:	429f      	cmp	r7, r3
 8006bba:	dab5      	bge.n	8006b28 <lv_indev_read_task+0x348>
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff f8d9 	bl	8005d74 <lv_group_focus_prev>
 8006bc2:	3701      	adds	r7, #1
 8006bc4:	e7f5      	b.n	8006bb2 <lv_indev_read_task+0x3d2>
            } else if(data->enc_diff > 0) {
 8006bc6:	d0af      	beq.n	8006b28 <lv_indev_read_task+0x348>
 8006bc8:	4607      	mov	r7, r0
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8006bca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8006bce:	429f      	cmp	r7, r3
 8006bd0:	daaa      	bge.n	8006b28 <lv_indev_read_task+0x348>
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff f8c0 	bl	8005d58 <lv_group_focus_next>
 8006bd8:	3701      	adds	r7, #1
 8006bda:	e7f6      	b.n	8006bca <lv_indev_read_task+0x3ea>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8006bdc:	f1bb 0f01 	cmp.w	fp, #1
 8006be0:	f47f aed0 	bne.w	8006984 <lv_indev_read_task+0x1a4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8006be4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006be8:	f013 0701 	ands.w	r7, r3, #1
 8006bec:	f47f aeca 	bne.w	8006984 <lv_indev_read_task+0x1a4>
 8006bf0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006bf2:	f005 fcb5 	bl	800c560 <lv_tick_elaps>
 8006bf6:	8ae3      	ldrh	r3, [r4, #22]
 8006bf8:	4298      	cmp	r0, r3
 8006bfa:	f67f aec3 	bls.w	8006984 <lv_indev_read_task+0x1a4>
            bool editable = false;
 8006bfe:	aa06      	add	r2, sp, #24
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006c00:	6828      	ldr	r0, [r5, #0]
            bool editable = false;
 8006c02:	f802 7d11 	strb.w	r7, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006c06:	69c3      	ldr	r3, [r0, #28]
 8006c08:	2112      	movs	r1, #18
 8006c0a:	4798      	blx	r3
            if(editable) {
 8006c0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006c10:	b19a      	cbz	r2, 8006c3a <lv_indev_read_task+0x45a>
                if(lv_ll_is_empty(&g->obj_ll) == false) {
 8006c12:	4630      	mov	r0, r6
 8006c14:	f006 f8c0 	bl	800cd98 <lv_ll_is_empty>
 8006c18:	b940      	cbnz	r0, 8006c2c <lv_indev_read_task+0x44c>
                    lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7ff f994 	bl	8005f48 <lv_group_get_editing>
 8006c20:	f080 0101 	eor.w	r1, r0, #1
 8006c24:	b2c9      	uxtb	r1, r1
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff f922 	bl	8005e70 <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 8006c2c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006c30:	f043 0301 	orr.w	r3, r3, #1
 8006c34:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8006c38:	e6a4      	b.n	8006984 <lv_indev_read_task+0x1a4>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8006c3a:	6828      	ldr	r0, [r5, #0]
 8006c3c:	210b      	movs	r1, #11
 8006c3e:	69c3      	ldr	r3, [r0, #28]
                if(indev_reset_check(&i->proc)) return;
 8006c40:	f104 061c 	add.w	r6, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8006c44:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff f98a 	bl	8005f60 <indev_reset_check>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f47f ae72 	bne.w	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8006c54:	2104      	movs	r1, #4
 8006c56:	6828      	ldr	r0, [r5, #0]
 8006c58:	f000 f96a 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff f97f 	bl	8005f60 <indev_reset_check>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d0e2      	beq.n	8006c2c <lv_indev_read_task+0x44c>
 8006c66:	e667      	b.n	8006938 <lv_indev_read_task+0x158>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	f47f ae8b 	bne.w	8006984 <lv_indev_read_task+0x1a4>
 8006c6e:	f1bb 0f01 	cmp.w	fp, #1
 8006c72:	f47f ae87 	bne.w	8006984 <lv_indev_read_task+0x1a4>
        bool editable = false;
 8006c76:	aa06      	add	r2, sp, #24
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006c78:	69c3      	ldr	r3, [r0, #28]
        bool editable = false;
 8006c7a:	f802 1d11 	strb.w	r1, [r2, #-17]!
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8006c7e:	2112      	movs	r1, #18
 8006c80:	4798      	blx	r3
        if(editable == false) {
 8006c82:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006c86:	b9e2      	cbnz	r2, 8006cc2 <lv_indev_read_task+0x4e2>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006c88:	6828      	ldr	r0, [r5, #0]
 8006c8a:	210a      	movs	r1, #10
 8006c8c:	69c3      	ldr	r3, [r0, #28]
            if(indev_reset_check(&i->proc)) return;
 8006c8e:	f104 061c 	add.w	r6, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006c92:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff f963 	bl	8005f60 <indev_reset_check>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f47f ae4c 	bne.w	8006938 <lv_indev_read_task+0x158>
            if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8006ca0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8006ca4:	f012 0201 	ands.w	r2, r2, #1
 8006ca8:	d103      	bne.n	8006cb2 <lv_indev_read_task+0x4d2>
 8006caa:	2103      	movs	r1, #3
 8006cac:	6828      	ldr	r0, [r5, #0]
 8006cae:	f000 f93f 	bl	8006f30 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff f954 	bl	8005f60 <indev_reset_check>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f47f ae3c 	bne.w	8006938 <lv_indev_read_task+0x158>
 8006cc0:	e6e3      	b.n	8006a8a <lv_indev_read_task+0x2aa>
        else if(g->editing) {
 8006cc2:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
 8006cc6:	f013 0f02 	tst.w	r3, #2
 8006cca:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006cce:	d03a      	beq.n	8006d46 <lv_indev_read_task+0x566>
            if(!i->proc.long_pr_sent || lv_ll_is_empty(&g->obj_ll)) {
 8006cd0:	07da      	lsls	r2, r3, #31
 8006cd2:	d432      	bmi.n	8006d3a <lv_indev_read_task+0x55a>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006cd4:	6828      	ldr	r0, [r5, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	69c3      	ldr	r3, [r0, #28]
 8006cda:	210a      	movs	r1, #10
                if(indev_reset_check(&i->proc)) return;
 8006cdc:	f104 071c 	add.w	r7, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8006ce0:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f7ff f93c 	bl	8005f60 <indev_reset_check>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f47f ae24 	bne.w	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8006cf0:	2103      	movs	r1, #3
 8006cf2:	6828      	ldr	r0, [r5, #0]
 8006cf4:	f000 f91c 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff f931 	bl	8005f60 <indev_reset_check>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f47f ae19 	bne.w	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8006d06:	2106      	movs	r1, #6
 8006d08:	6828      	ldr	r0, [r5, #0]
 8006d0a:	f000 f911 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff f926 	bl	8005f60 <indev_reset_check>
 8006d14:	4602      	mov	r2, r0
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f47f ae0e 	bne.w	8006938 <lv_indev_read_task+0x158>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8006d1c:	2107      	movs	r1, #7
 8006d1e:	6828      	ldr	r0, [r5, #0]
 8006d20:	f000 f906 	bl	8006f30 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff f91b 	bl	8005f60 <indev_reset_check>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	f47f ae04 	bne.w	8006938 <lv_indev_read_task+0x158>
                lv_group_send_data(g, LV_KEY_ENTER);
 8006d30:	210a      	movs	r1, #10
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff f887 	bl	8005e46 <lv_group_send_data>
 8006d38:	e690      	b.n	8006a5c <lv_indev_read_task+0x27c>
            if(!i->proc.long_pr_sent || lv_ll_is_empty(&g->obj_ll)) {
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f006 f82c 	bl	800cd98 <lv_ll_is_empty>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d1c7      	bne.n	8006cd4 <lv_indev_read_task+0x4f4>
 8006d44:	e68a      	b.n	8006a5c <lv_indev_read_task+0x27c>
        else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8006d46:	07db      	lsls	r3, r3, #31
 8006d48:	f53f ae88 	bmi.w	8006a5c <lv_indev_read_task+0x27c>
            lv_group_set_editing(g, true); /*Set edit mode*/
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff f88e 	bl	8005e70 <lv_group_set_editing>
 8006d54:	e682      	b.n	8006a5c <lv_indev_read_task+0x27c>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	f47f adee 	bne.w	8006938 <lv_indev_read_task+0x158>
    i->proc.types.pointer.act_point.x = i->btn_points[data->btn_id].x;
 8006d5c:	9a04      	ldr	r2, [sp, #16]
 8006d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d60:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006d64:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 8006d68:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = i->btn_points[data->btn_id].y;
 8006d6a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8006d6e:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
 8006d70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d72:	6a23      	ldr	r3, [r4, #32]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f104 001c 	add.w	r0, r4, #28
 8006d7a:	d102      	bne.n	8006d82 <lv_indev_read_task+0x5a2>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8006d7c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006d80:	e57e      	b.n	8006880 <lv_indev_read_task+0xa0>
        indev_proc_release(&i->proc);
 8006d82:	f7ff fb4f 	bl	8006424 <indev_proc_release>
 8006d86:	e580      	b.n	800688a <lv_indev_read_task+0xaa>

08006d88 <lv_indev_get_act>:
}
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <lv_indev_get_act+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20010488 	.word	0x20010488

08006d94 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8006d94:	b100      	cbz	r0, 8006d98 <lv_indev_get_type+0x4>
    return indev->driver.type;
 8006d96:	7800      	ldrb	r0, [r0, #0]
}
 8006d98:	4770      	bx	lr

08006d9a <lv_indev_get_point>:
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8006d9a:	7803      	ldrb	r3, [r0, #0]
 8006d9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8006da0:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 8006da2:	bf05      	ittet	eq
 8006da4:	f9b0 3020 	ldrsheq.w	r3, [r0, #32]
 8006da8:	800b      	strheq	r3, [r1, #0]
        point->x = -1;
 8006daa:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->y = indev->proc.types.pointer.act_point.y;
 8006dae:	f9b0 3022 	ldrsheq.w	r3, [r0, #34]	; 0x22
        point->x = -1;
 8006db2:	bf18      	it	ne
 8006db4:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8006db6:	804b      	strh	r3, [r1, #2]
 8006db8:	4770      	bx	lr

08006dba <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8006dba:	b150      	cbz	r0, 8006dd2 <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8006dbc:	7803      	ldrb	r3, [r0, #0]
 8006dbe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d104      	bne.n	8006dd0 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 8006dc6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8006dca:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006dce:	4770      	bx	lr
    if(indev == NULL) return false;
 8006dd0:	2000      	movs	r0, #0
}
 8006dd2:	4770      	bx	lr

08006dd4 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8006dd8:	1d05      	adds	r5, r0, #4
 8006dda:	4628      	mov	r0, r5
{
 8006ddc:	460e      	mov	r6, r1
 8006dde:	4617      	mov	r7, r2
    LV_LL_READ(obj->child_ll, i)
 8006de0:	f005 fee5 	bl	800cbae <lv_ll_get_head>
    {
        i->coords.x1 += x_diff;
 8006de4:	fa1f f886 	uxth.w	r8, r6
    LV_LL_READ(obj->child_ll, i)
 8006de8:	4604      	mov	r4, r0
        i->coords.y1 += y_diff;
 8006dea:	fa1f f987 	uxth.w	r9, r7
    LV_LL_READ(obj->child_ll, i)
 8006dee:	b90c      	cbnz	r4, 8006df4 <refresh_children_position+0x20>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 8006df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 8006df4:	8a23      	ldrh	r3, [r4, #16]
 8006df6:	4443      	add	r3, r8
 8006df8:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8006dfa:	8a63      	ldrh	r3, [r4, #18]
 8006dfc:	444b      	add	r3, r9
 8006dfe:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 8006e00:	8aa3      	ldrh	r3, [r4, #20]
 8006e02:	4443      	add	r3, r8
 8006e04:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 8006e06:	8ae3      	ldrh	r3, [r4, #22]
 8006e08:	444b      	add	r3, r9
 8006e0a:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	463a      	mov	r2, r7
 8006e10:	4631      	mov	r1, r6
 8006e12:	f7ff ffdf 	bl	8006dd4 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f005 fece 	bl	800cbba <lv_ll_get_next>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	e7e5      	b.n	8006dee <refresh_children_position+0x1a>
	...

08006e24 <lv_init>:
{
 8006e24:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8006e26:	4c12      	ldr	r4, [pc, #72]	; (8006e70 <lv_init+0x4c>)
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	b9fb      	cbnz	r3, 8006e6c <lv_init+0x48>
    lv_mem_init();
 8006e2c:	f005 fff4 	bl	800ce18 <lv_mem_init>
    lv_task_core_init();
 8006e30:	f006 f88e 	bl	800cf50 <lv_task_core_init>
    lv_fs_init();
 8006e34:	f005 fdb8 	bl	800c9a8 <lv_fs_init>
    lv_anim_core_init();
 8006e38:	f005 fc42 	bl	800c6c0 <lv_anim_core_init>
    lv_group_init();
 8006e3c:	f7fe ff86 	bl	8005d4c <lv_group_init>
    lv_style_init();
 8006e40:	f001 f9d4 	bl	80081ec <lv_style_init>
    lv_refr_init();
 8006e44:	f000 ffb6 	bl	8007db4 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8006e48:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006e4c:	4809      	ldr	r0, [pc, #36]	; (8006e74 <lv_init+0x50>)
 8006e4e:	f005 fe68 	bl	800cb22 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006e52:	215c      	movs	r1, #92	; 0x5c
 8006e54:	4808      	ldr	r0, [pc, #32]	; (8006e78 <lv_init+0x54>)
 8006e56:	f005 fe64 	bl	800cb22 <lv_ll_init>
    lv_indev_init();
 8006e5a:	f7ff fcbe 	bl	80067da <lv_indev_init>
    lv_img_decoder_init();
 8006e5e:	f005 f8c9 	bl	800bff4 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f004 fd68 	bl	800b938 <lv_img_cache_set_size>
    lv_initialized = true;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	7023      	strb	r3, [r4, #0]
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	20010498 	.word	0x20010498
 8006e74:	20015e6c 	.word	0x20015e6c
 8006e78:	20015e5c 	.word	0x20015e5c

08006e7c <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8006e7c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8006e80:	f361 0300 	bfi	r3, r1, #0, #1
 8006e84:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 8006e88:	4770      	bx	lr

08006e8a <lv_obj_set_protect>:
    obj->protect |= prot;
 8006e8a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006e8e:	4319      	orrs	r1, r3
 8006e90:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8006e94:	4770      	bx	lr

08006e96 <lv_obj_clear_protect>:
    obj->protect &= prot;
 8006e96:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006e9a:	ea23 0101 	bic.w	r1, r3, r1
 8006e9e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8006ea2:	4770      	bx	lr

08006ea4 <lv_obj_set_event_cb>:
    obj->event_cb = event_cb;
 8006ea4:	6181      	str	r1, [r0, #24]
 8006ea6:	4770      	bx	lr

08006ea8 <lv_event_send_func>:
{
 8006ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(event_temp_data_head) {
 8006eac:	4c1e      	ldr	r4, [pc, #120]	; (8006f28 <lv_event_send_func+0x80>)
    event_temp_data.obj     = obj;
 8006eae:	9101      	str	r1, [sp, #4]
{
 8006eb0:	4698      	mov	r8, r3
    event_temp_data.deleted = false;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 8006eb8:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 8006eba:	6823      	ldr	r3, [r4, #0]
{
 8006ebc:	4681      	mov	r9, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	4617      	mov	r7, r2
    if(event_temp_data_head) {
 8006ec2:	b103      	cbz	r3, 8006ec6 <lv_event_send_func+0x1e>
        event_temp_data.prev = event_temp_data_head;
 8006ec4:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 8006ec6:	4e19      	ldr	r6, [pc, #100]	; (8006f2c <lv_event_send_func+0x84>)
    event_temp_data_head = &event_temp_data;
 8006ec8:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 8006eca:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 8006ece:	6023      	str	r3, [r4, #0]
    event_act_data                   = data;
 8006ed0:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006ed4:	f7ff ff58 	bl	8006d88 <lv_indev_get_act>
    if(indev_act) {
 8006ed8:	b118      	cbz	r0, 8006ee2 <lv_event_send_func+0x3a>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006eda:	6883      	ldr	r3, [r0, #8]
 8006edc:	b10b      	cbz	r3, 8006ee2 <lv_event_send_func+0x3a>
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8006ee2:	f1b9 0f00 	cmp.w	r9, #0
 8006ee6:	d002      	beq.n	8006eee <lv_event_send_func+0x46>
 8006ee8:	4639      	mov	r1, r7
 8006eea:	4628      	mov	r0, r5
 8006eec:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 8006eee:	6823      	ldr	r3, [r4, #0]
    event_act_data = event_act_data_save;
 8006ef0:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	6023      	str	r3, [r4, #0]
    if(event_temp_data.deleted) {
 8006ef8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006efc:	b983      	cbnz	r3, 8006f20 <lv_event_send_func+0x78>
    if(obj) {
 8006efe:	b18d      	cbz	r5, 8006f24 <lv_event_send_func+0x7c>
        if(obj->parent_event && obj->par) {
 8006f00:	f995 3030 	ldrsb.w	r3, [r5, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da0d      	bge.n	8006f24 <lv_event_send_func+0x7c>
 8006f08:	6828      	ldr	r0, [r5, #0]
 8006f0a:	b158      	cbz	r0, 8006f24 <lv_event_send_func+0x7c>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f000 f80e 	bl	8006f30 <lv_event_send>
        return LV_RES_INV;
 8006f14:	1e43      	subs	r3, r0, #1
 8006f16:	4258      	negs	r0, r3
 8006f18:	4158      	adcs	r0, r3
}
 8006f1a:	b004      	add	sp, #16
 8006f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 8006f20:	2000      	movs	r0, #0
 8006f22:	e7fa      	b.n	8006f1a <lv_event_send_func+0x72>
    return LV_RES_OK;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e7f8      	b.n	8006f1a <lv_event_send_func+0x72>
 8006f28:	20010494 	.word	0x20010494
 8006f2c:	20010490 	.word	0x20010490

08006f30 <lv_event_send>:
{
 8006f30:	4613      	mov	r3, r2
    if(obj == NULL) return LV_RES_OK;
 8006f32:	b120      	cbz	r0, 8006f3e <lv_event_send+0xe>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8006f34:	460a      	mov	r2, r1
 8006f36:	4601      	mov	r1, r0
 8006f38:	6980      	ldr	r0, [r0, #24]
 8006f3a:	f7ff bfb5 	b.w	8006ea8 <lv_event_send_func>
}
 8006f3e:	2001      	movs	r0, #1
 8006f40:	4770      	bx	lr

08006f42 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 8006f42:	61c1      	str	r1, [r0, #28]
 8006f44:	4770      	bx	lr

08006f46 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 8006f46:	6201      	str	r1, [r0, #32]
 8006f48:	4770      	bx	lr

08006f4a <lv_obj_allocate_ext_attr>:
{
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	4604      	mov	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006f4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006f50:	f005 ffd4 	bl	800cefc <lv_mem_realloc>
 8006f54:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <lv_obj_get_disp>:
{
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 8006f5a:	6803      	ldr	r3, [r0, #0]
{
 8006f5c:	4605      	mov	r5, r0
    if(obj->par == NULL)
 8006f5e:	b943      	cbnz	r3, 8006f72 <lv_obj_get_disp+0x1a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006f60:	480f      	ldr	r0, [pc, #60]	; (8006fa0 <lv_obj_get_disp+0x48>)
 8006f62:	4f0f      	ldr	r7, [pc, #60]	; (8006fa0 <lv_obj_get_disp+0x48>)
 8006f64:	f005 fe23 	bl	800cbae <lv_ll_get_head>
 8006f68:	4604      	mov	r4, r0
 8006f6a:	b934      	cbnz	r4, 8006f7a <lv_obj_get_disp+0x22>
}
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006f70:	461d      	mov	r5, r3
    return obj->par;
 8006f72:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1fb      	bne.n	8006f70 <lv_obj_get_disp+0x18>
 8006f78:	e7f2      	b.n	8006f60 <lv_obj_get_disp+0x8>
        LV_LL_READ(d->scr_ll, s)
 8006f7a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f005 fe15 	bl	800cbae <lv_ll_get_head>
 8006f84:	b928      	cbnz	r0, 8006f92 <lv_obj_get_disp+0x3a>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006f86:	4621      	mov	r1, r4
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f005 fe16 	bl	800cbba <lv_ll_get_next>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	e7eb      	b.n	8006f6a <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8006f92:	4285      	cmp	r5, r0
 8006f94:	d0ea      	beq.n	8006f6c <lv_obj_get_disp+0x14>
        LV_LL_READ(d->scr_ll, s)
 8006f96:	4601      	mov	r1, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f005 fe0e 	bl	800cbba <lv_ll_get_next>
 8006f9e:	e7f1      	b.n	8006f84 <lv_obj_get_disp+0x2c>
 8006fa0:	20015e6c 	.word	0x20015e6c

08006fa4 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8006fa4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    if(lv_obj_get_hidden(obj)) return;
 8006fa8:	06da      	lsls	r2, r3, #27
{
 8006faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fac:	4604      	mov	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8006fae:	d439      	bmi.n	8007024 <lv_obj_invalidate+0x80>
 8006fb0:	4605      	mov	r5, r0
    return obj->par;
 8006fb2:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006fb4:	bb53      	cbnz	r3, 800700c <lv_obj_invalidate+0x68>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7ff ffce 	bl	8006f58 <lv_obj_get_disp>
 8006fbc:	4606      	mov	r6, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006fbe:	f7fe fe27 	bl	8005c10 <lv_disp_get_scr_act>
 8006fc2:	4285      	cmp	r5, r0
 8006fc4:	d124      	bne.n	8007010 <lv_obj_invalidate+0x6c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 8006fc6:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    return obj->par;
 8006fca:	6825      	ldr	r5, [r4, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8006fcc:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8006fd0:	6861      	ldr	r1, [r4, #4]
 8006fd2:	466a      	mov	r2, sp
 8006fd4:	c203      	stmia	r2!, {r0, r1}
        area_trunc.x1 -= ext_size;
 8006fd6:	f8bd 2000 	ldrh.w	r2, [sp]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	1ad2      	subs	r2, r2, r3
 8006fde:	f8ad 2000 	strh.w	r2, [sp]
        area_trunc.y1 -= ext_size;
 8006fe2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	f8ad 2002 	strh.w	r2, [sp, #2]
        area_trunc.x2 += ext_size;
 8006fec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_trunc.y2 += ext_size;
 8006ff6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f8ad 3006 	strh.w	r3, [sp, #6]
        while(par != NULL) {
 8007000:	b995      	cbnz	r5, 8007028 <lv_obj_invalidate+0x84>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 8007002:	4669      	mov	r1, sp
 8007004:	4630      	mov	r0, r6
 8007006:	f000 fed6 	bl	8007db6 <lv_inv_area>
 800700a:	e00b      	b.n	8007024 <lv_obj_invalidate+0x80>
    } while(par != NULL);
 800700c:	461d      	mov	r5, r3
 800700e:	e7d0      	b.n	8006fb2 <lv_obj_invalidate+0xe>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8007010:	4630      	mov	r0, r6
 8007012:	f7fe fe0e 	bl	8005c32 <lv_disp_get_layer_top>
 8007016:	4285      	cmp	r5, r0
 8007018:	d0d5      	beq.n	8006fc6 <lv_obj_invalidate+0x22>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800701a:	4630      	mov	r0, r6
 800701c:	f7fe fe10 	bl	8005c40 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8007020:	4285      	cmp	r5, r0
 8007022:	d0d0      	beq.n	8006fc6 <lv_obj_invalidate+0x22>
}
 8007024:	b002      	add	sp, #8
 8007026:	bd70      	pop	{r4, r5, r6, pc}
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8007028:	f105 0210 	add.w	r2, r5, #16
 800702c:	4669      	mov	r1, sp
 800702e:	4668      	mov	r0, sp
 8007030:	f005 fbe4 	bl	800c7fc <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8007034:	2800      	cmp	r0, #0
 8007036:	d0f5      	beq.n	8007024 <lv_obj_invalidate+0x80>
    return obj->hidden == 0 ? false : true;
 8007038:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800703c:	06db      	lsls	r3, r3, #27
 800703e:	d4f1      	bmi.n	8007024 <lv_obj_invalidate+0x80>
    return obj->par;
 8007040:	682d      	ldr	r5, [r5, #0]
 8007042:	e7dd      	b.n	8007000 <lv_obj_invalidate+0x5c>

08007044 <lv_obj_move_foreground>:
{
 8007044:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 8007046:	6804      	ldr	r4, [r0, #0]
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8007048:	1d26      	adds	r6, r4, #4
{
 800704a:	4605      	mov	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 800704c:	4630      	mov	r0, r6
 800704e:	f005 fdae 	bl	800cbae <lv_ll_get_head>
 8007052:	4285      	cmp	r5, r0
 8007054:	d012      	beq.n	800707c <lv_obj_move_foreground+0x38>
    lv_obj_invalidate(parent);
 8007056:	4620      	mov	r0, r4
 8007058:	f7ff ffa4 	bl	8006fa4 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800705c:	462a      	mov	r2, r5
 800705e:	4631      	mov	r1, r6
 8007060:	4630      	mov	r0, r6
 8007062:	2301      	movs	r3, #1
 8007064:	f005 fe1c 	bl	800cca0 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8007068:	69e3      	ldr	r3, [r4, #28]
 800706a:	462a      	mov	r2, r5
 800706c:	4620      	mov	r0, r4
 800706e:	2101      	movs	r1, #1
 8007070:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8007072:	4620      	mov	r0, r4
}
 8007074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 8007078:	f7ff bf94 	b.w	8006fa4 <lv_obj_invalidate>
 800707c:	bd70      	pop	{r4, r5, r6, pc}

0800707e <lv_obj_set_pos>:
{
 800707e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * par = obj->par;
 8007082:	6806      	ldr	r6, [r0, #0]
    diff.x = x - obj->coords.x1;
 8007084:	8a03      	ldrh	r3, [r0, #16]
 8007086:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    diff.y = y - obj->coords.y1;
 800708a:	8a75      	ldrh	r5, [r6, #18]
    diff.x = x - obj->coords.x1;
 800708c:	eba8 0803 	sub.w	r8, r8, r3
    diff.y = y - obj->coords.y1;
 8007090:	8a43      	ldrh	r3, [r0, #18]
    diff.x = x - obj->coords.x1;
 8007092:	4488      	add	r8, r1
    diff.y = y - obj->coords.y1;
 8007094:	1aed      	subs	r5, r5, r3
    diff.x = x - obj->coords.x1;
 8007096:	fa1f f888 	uxth.w	r8, r8
    diff.y = y - obj->coords.y1;
 800709a:	4415      	add	r5, r2
 800709c:	b2ad      	uxth	r5, r5
    diff.x = x - obj->coords.x1;
 800709e:	fa0f f788 	sxth.w	r7, r8
{
 80070a2:	4604      	mov	r4, r0
    diff.y = y - obj->coords.y1;
 80070a4:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
 80070a8:	b917      	cbnz	r7, 80070b0 <lv_obj_set_pos+0x32>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	d026      	beq.n	80070fe <lv_obj_set_pos+0x80>
    lv_obj_invalidate(obj);
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7ff ff77 	bl	8006fa4 <lv_obj_invalidate>
 80070b6:	4622      	mov	r2, r4
 80070b8:	466b      	mov	r3, sp
 80070ba:	f852 0f10 	ldr.w	r0, [r2, #16]!
 80070be:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 += diff.y;
 80070c0:	8ae2      	ldrh	r2, [r4, #22]
 80070c2:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x1 += diff.x;
 80070c4:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 80070c6:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 80070c8:	4443      	add	r3, r8
 80070ca:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 80070cc:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80070ce:	4441      	add	r1, r8
    obj->coords.y1 += diff.y;
 80070d0:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 80070d2:	4415      	add	r5, r2
    obj->coords.y1 += diff.y;
 80070d4:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80070d6:	82a1      	strh	r1, [r4, #20]
    refresh_children_position(obj, diff.x, diff.y);
 80070d8:	464a      	mov	r2, r9
 80070da:	4639      	mov	r1, r7
 80070dc:	4620      	mov	r0, r4
    obj->coords.y2 += diff.y;
 80070de:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 80070e0:	f7ff fe78 	bl	8006dd4 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 80070e4:	69e3      	ldr	r3, [r4, #28]
 80070e6:	466a      	mov	r2, sp
 80070e8:	2102      	movs	r1, #2
 80070ea:	4620      	mov	r0, r4
 80070ec:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80070ee:	69f3      	ldr	r3, [r6, #28]
 80070f0:	4622      	mov	r2, r4
 80070f2:	2101      	movs	r1, #1
 80070f4:	4630      	mov	r0, r6
 80070f6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff ff53 	bl	8006fa4 <lv_obj_invalidate>
}
 80070fe:	b003      	add	sp, #12
 8007100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007104 <lv_obj_set_x>:
{
 8007104:	b410      	push	{r4}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007106:	6804      	ldr	r4, [r0, #0]
 8007108:	8a42      	ldrh	r2, [r0, #18]
 800710a:	8a63      	ldrh	r3, [r4, #18]
}
 800710c:	f85d 4b04 	ldr.w	r4, [sp], #4
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007110:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8007112:	b212      	sxth	r2, r2
 8007114:	f7ff bfb3 	b.w	800707e <lv_obj_set_pos>

08007118 <lv_obj_set_y>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007118:	6802      	ldr	r2, [r0, #0]
 800711a:	8a03      	ldrh	r3, [r0, #16]
 800711c:	8a12      	ldrh	r2, [r2, #16]
 800711e:	1a9b      	subs	r3, r3, r2
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8007120:	460a      	mov	r2, r1
 8007122:	b219      	sxth	r1, r3
 8007124:	f7ff bfab 	b.w	800707e <lv_obj_set_pos>

08007128 <lv_obj_align>:
{
 8007128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return obj->par;
 800712c:	6804      	ldr	r4, [r0, #0]
{
 800712e:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007132:	f8b4 e010 	ldrh.w	lr, [r4, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007136:	f8b4 c012 	ldrh.w	ip, [r4, #18]
{
 800713a:	4605      	mov	r5, r0
 800713c:	4616      	mov	r6, r2
 800713e:	4698      	mov	r8, r3
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007140:	8a00      	ldrh	r0, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007142:	f8b5 9012 	ldrh.w	r9, [r5, #18]
 8007146:	2900      	cmp	r1, #0
 8007148:	bf18      	it	ne
 800714a:	460c      	movne	r4, r1
    switch(align) {
 800714c:	2a14      	cmp	r2, #20
 800714e:	d816      	bhi.n	800717e <lv_obj_align+0x56>
 8007150:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007154:	0128001c 	.word	0x0128001c
 8007158:	00540042 	.word	0x00540042
 800715c:	0083005a 	.word	0x0083005a
 8007160:	00a4009e 	.word	0x00a4009e
 8007164:	00cd00b5 	.word	0x00cd00b5
 8007168:	00e700d2 	.word	0x00e700d2
 800716c:	00f200ed 	.word	0x00f200ed
 8007170:	010d0107 	.word	0x010d0107
 8007174:	01150111 	.word	0x01150111
 8007178:	011e0119 	.word	0x011e0119
 800717c:	0123      	.short	0x0123
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800717e:	eba0 010e 	sub.w	r1, r0, lr
 8007182:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007184:	eba9 020c 	sub.w	r2, r9, ip
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007188:	b212      	sxth	r2, r2
            break;
 800718a:	e049      	b.n	8007220 <lv_obj_align+0xf8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800718c:	f8b4 a014 	ldrh.w	sl, [r4, #20]
 8007190:	8a21      	ldrh	r1, [r4, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8007192:	8ae3      	ldrh	r3, [r4, #22]
 8007194:	8a62      	ldrh	r2, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 8007196:	f10a 0a01 	add.w	sl, sl, #1
 800719a:	ebaa 0a01 	sub.w	sl, sl, r1
    return area_p->y2 - area_p->y1 + 1;
 800719e:	3301      	adds	r3, #1
    return area_p->x2 - area_p->x1 + 1;
 80071a0:	8aa9      	ldrh	r1, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	8aea      	ldrh	r2, [r5, #22]
    return area_p->x2 - area_p->x1 + 1;
 80071a6:	3101      	adds	r1, #1
 80071a8:	1a09      	subs	r1, r1, r0
    return area_p->y2 - area_p->y1 + 1;
 80071aa:	3201      	adds	r2, #1
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80071ac:	f04f 0b02 	mov.w	fp, #2
 80071b0:	fa0f fa8a 	sxth.w	sl, sl
 80071b4:	b209      	sxth	r1, r1
 80071b6:	fb9a fafb 	sdiv	sl, sl, fp
 80071ba:	fb91 f1fb 	sdiv	r1, r1, fp
 80071be:	eba2 0209 	sub.w	r2, r2, r9
 80071c2:	ebaa 0101 	sub.w	r1, sl, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80071c6:	b21b      	sxth	r3, r3
 80071c8:	b212      	sxth	r2, r2
 80071ca:	fb93 f3fb 	sdiv	r3, r3, fp
 80071ce:	fb92 f2fb 	sdiv	r2, r2, fp
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80071d2:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80071d4:	1a9a      	subs	r2, r3, r2
 80071d6:	e7d7      	b.n	8007188 <lv_obj_align+0x60>
    return area_p->x2 - area_p->x1 + 1;
 80071d8:	8aa1      	ldrh	r1, [r4, #20]
 80071da:	8a23      	ldrh	r3, [r4, #16]
 80071dc:	3101      	adds	r1, #1
 80071de:	1ac9      	subs	r1, r1, r3
 80071e0:	8aab      	ldrh	r3, [r5, #20]
 80071e2:	3301      	adds	r3, #1
 80071e4:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80071e6:	2202      	movs	r2, #2
 80071e8:	b209      	sxth	r1, r1
 80071ea:	b200      	sxth	r0, r0
 80071ec:	fb91 f1f2 	sdiv	r1, r1, r2
 80071f0:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80071f4:	1a09      	subs	r1, r1, r0
 80071f6:	b209      	sxth	r1, r1
            new_y = 0;
 80071f8:	2200      	movs	r2, #0
            break;
 80071fa:	e011      	b.n	8007220 <lv_obj_align+0xf8>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80071fc:	8aa9      	ldrh	r1, [r5, #20]
 80071fe:	1a08      	subs	r0, r1, r0
 8007200:	8aa1      	ldrh	r1, [r4, #20]
 8007202:	1a09      	subs	r1, r1, r0
 8007204:	8a20      	ldrh	r0, [r4, #16]
 8007206:	e7f5      	b.n	80071f4 <lv_obj_align+0xcc>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007208:	8aea      	ldrh	r2, [r5, #22]
 800720a:	eba2 0909 	sub.w	r9, r2, r9
 800720e:	8ae2      	ldrh	r2, [r4, #22]
 8007210:	eba2 0209 	sub.w	r2, r2, r9
 8007214:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 8007218:	eba2 0209 	sub.w	r2, r2, r9
    return area_p->y2 - area_p->y1 + 1;
 800721c:	b212      	sxth	r2, r2
            new_x = 0;
 800721e:	2100      	movs	r1, #0
    new_x -= par_abs_x;
 8007220:	8a23      	ldrh	r3, [r4, #16]
 8007222:	eba8 0e0e 	sub.w	lr, r8, lr
 8007226:	449e      	add	lr, r3
    new_y -= par_abs_y;
 8007228:	8a63      	ldrh	r3, [r4, #18]
 800722a:	eba7 0c0c 	sub.w	ip, r7, ip
 800722e:	449c      	add	ip, r3
    new_x -= par_abs_x;
 8007230:	4471      	add	r1, lr
    new_y -= par_abs_y;
 8007232:	4462      	add	r2, ip
    lv_obj_set_pos(obj, new_x, new_y);
 8007234:	b212      	sxth	r2, r2
 8007236:	b209      	sxth	r1, r1
 8007238:	4628      	mov	r0, r5
 800723a:	f7ff ff20 	bl	800707e <lv_obj_set_pos>
    obj->realign.origo_align = 0;
 800723e:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 8007242:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 0;
 8007246:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_mod;
 800724a:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800724e:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 8007250:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 0;
 8007252:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8007256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return area_p->x2 - area_p->x1 + 1;
 800725a:	8aa1      	ldrh	r1, [r4, #20]
 800725c:	8a23      	ldrh	r3, [r4, #16]
 800725e:	3101      	adds	r1, #1
 8007260:	1ac9      	subs	r1, r1, r3
 8007262:	8aab      	ldrh	r3, [r5, #20]
 8007264:	3301      	adds	r3, #1
 8007266:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8007268:	2202      	movs	r2, #2
 800726a:	b209      	sxth	r1, r1
 800726c:	b200      	sxth	r0, r0
 800726e:	fb91 f1f2 	sdiv	r1, r1, r2
 8007272:	fb90 f0f2 	sdiv	r0, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007276:	1a09      	subs	r1, r1, r0
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007278:	8aea      	ldrh	r2, [r5, #22]
 800727a:	eba2 0909 	sub.w	r9, r2, r9
 800727e:	8ae2      	ldrh	r2, [r4, #22]
 8007280:	eba2 0209 	sub.w	r2, r2, r9
 8007284:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 8007288:	b209      	sxth	r1, r1
 800728a:	eba2 0209 	sub.w	r2, r2, r9
 800728e:	e77b      	b.n	8007188 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007290:	8aa9      	ldrh	r1, [r5, #20]
 8007292:	1a08      	subs	r0, r1, r0
 8007294:	8aa1      	ldrh	r1, [r4, #20]
 8007296:	1a09      	subs	r1, r1, r0
 8007298:	8a20      	ldrh	r0, [r4, #16]
 800729a:	e7ec      	b.n	8007276 <lv_obj_align+0x14e>
    return area_p->y2 - area_p->y1 + 1;
 800729c:	8ae3      	ldrh	r3, [r4, #22]
 800729e:	8a62      	ldrh	r2, [r4, #18]
 80072a0:	3301      	adds	r3, #1
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	8aea      	ldrh	r2, [r5, #22]
 80072a6:	3201      	adds	r2, #1
 80072a8:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80072ac:	2102      	movs	r1, #2
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	b212      	sxth	r2, r2
 80072b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80072b6:	fb92 f2f1 	sdiv	r2, r2, r1
 80072ba:	1a9a      	subs	r2, r3, r2
 80072bc:	e7ae      	b.n	800721c <lv_obj_align+0xf4>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80072be:	8aa9      	ldrh	r1, [r5, #20]
 80072c0:	1a08      	subs	r0, r1, r0
 80072c2:	8aa1      	ldrh	r1, [r4, #20]
 80072c4:	1a09      	subs	r1, r1, r0
 80072c6:	8a20      	ldrh	r0, [r4, #16]
 80072c8:	1a09      	subs	r1, r1, r0
 80072ca:	8ae0      	ldrh	r0, [r4, #22]
 80072cc:	8a62      	ldrh	r2, [r4, #18]
 80072ce:	3001      	adds	r0, #1
 80072d0:	1a80      	subs	r0, r0, r2
 80072d2:	8aea      	ldrh	r2, [r5, #22]
 80072d4:	3201      	adds	r2, #1
 80072d6:	eba2 0209 	sub.w	r2, r2, r9
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80072da:	2302      	movs	r3, #2
 80072dc:	b200      	sxth	r0, r0
 80072de:	b212      	sxth	r2, r2
 80072e0:	fb90 f0f3 	sdiv	r0, r0, r3
 80072e4:	fb92 f2f3 	sdiv	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80072e8:	b209      	sxth	r1, r1
 80072ea:	1a82      	subs	r2, r0, r2
 80072ec:	e74c      	b.n	8007188 <lv_obj_align+0x60>
    return area_p->y2 - area_p->y1 + 1;
 80072ee:	8aea      	ldrh	r2, [r5, #22]
 80072f0:	eba2 0209 	sub.w	r2, r2, r9
            new_y = -lv_obj_get_height(obj);
 80072f4:	43d2      	mvns	r2, r2
 80072f6:	e791      	b.n	800721c <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 80072f8:	8aa1      	ldrh	r1, [r4, #20]
 80072fa:	8a23      	ldrh	r3, [r4, #16]
 80072fc:	3101      	adds	r1, #1
 80072fe:	1ac9      	subs	r1, r1, r3
 8007300:	8aab      	ldrh	r3, [r5, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8007306:	2202      	movs	r2, #2
 8007308:	b209      	sxth	r1, r1
 800730a:	b200      	sxth	r0, r0
 800730c:	fb91 f1f2 	sdiv	r1, r1, r2
 8007310:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 8007314:	8aea      	ldrh	r2, [r5, #22]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007316:	1a09      	subs	r1, r1, r0
 8007318:	eba2 0209 	sub.w	r2, r2, r9
 800731c:	b209      	sxth	r1, r1
            new_y = -lv_obj_get_height(obj);
 800731e:	43d2      	mvns	r2, r2
 8007320:	e732      	b.n	8007188 <lv_obj_align+0x60>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007322:	8aa9      	ldrh	r1, [r5, #20]
 8007324:	1a08      	subs	r0, r1, r0
 8007326:	8aa1      	ldrh	r1, [r4, #20]
 8007328:	1a09      	subs	r1, r1, r0
 800732a:	8a20      	ldrh	r0, [r4, #16]
 800732c:	e7f2      	b.n	8007314 <lv_obj_align+0x1ec>
 800732e:	8ae2      	ldrh	r2, [r4, #22]
 8007330:	8a63      	ldrh	r3, [r4, #18]
 8007332:	3201      	adds	r2, #1
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	e771      	b.n	800721c <lv_obj_align+0xf4>
    return area_p->x2 - area_p->x1 + 1;
 8007338:	8aa1      	ldrh	r1, [r4, #20]
 800733a:	8a23      	ldrh	r3, [r4, #16]
 800733c:	3101      	adds	r1, #1
 800733e:	1ac9      	subs	r1, r1, r3
 8007340:	8aab      	ldrh	r3, [r5, #20]
 8007342:	3301      	adds	r3, #1
 8007344:	1a18      	subs	r0, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8007346:	2202      	movs	r2, #2
 8007348:	b209      	sxth	r1, r1
 800734a:	b200      	sxth	r0, r0
 800734c:	fb91 f1f2 	sdiv	r1, r1, r2
 8007350:	fb90 f0f2 	sdiv	r0, r0, r2
    return area_p->y2 - area_p->y1 + 1;
 8007354:	8ae2      	ldrh	r2, [r4, #22]
 8007356:	8a63      	ldrh	r3, [r4, #18]
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007358:	1a09      	subs	r1, r1, r0
 800735a:	3201      	adds	r2, #1
 800735c:	b209      	sxth	r1, r1
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	e712      	b.n	8007188 <lv_obj_align+0x60>
 8007362:	8aa9      	ldrh	r1, [r5, #20]
 8007364:	1a08      	subs	r0, r1, r0
 8007366:	8aa1      	ldrh	r1, [r4, #20]
 8007368:	1a09      	subs	r1, r1, r0
 800736a:	8a20      	ldrh	r0, [r4, #16]
 800736c:	e7f2      	b.n	8007354 <lv_obj_align+0x22c>
    return area_p->x2 - area_p->x1 + 1;
 800736e:	8aa9      	ldrh	r1, [r5, #20]
 8007370:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8007372:	43c9      	mvns	r1, r1
 8007374:	e73f      	b.n	80071f6 <lv_obj_align+0xce>
 8007376:	8aa9      	ldrh	r1, [r5, #20]
 8007378:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 800737a:	43c9      	mvns	r1, r1
 800737c:	e7a5      	b.n	80072ca <lv_obj_align+0x1a2>
 800737e:	8aa9      	ldrh	r1, [r5, #20]
 8007380:	1a09      	subs	r1, r1, r0
            new_x = -lv_obj_get_width(obj);
 8007382:	43c9      	mvns	r1, r1
 8007384:	e778      	b.n	8007278 <lv_obj_align+0x150>
 8007386:	8aa1      	ldrh	r1, [r4, #20]
 8007388:	8a23      	ldrh	r3, [r4, #16]
 800738a:	3101      	adds	r1, #1
 800738c:	1ac9      	subs	r1, r1, r3
 800738e:	e732      	b.n	80071f6 <lv_obj_align+0xce>
 8007390:	8aa1      	ldrh	r1, [r4, #20]
 8007392:	8a23      	ldrh	r3, [r4, #16]
 8007394:	3101      	adds	r1, #1
 8007396:	1ac9      	subs	r1, r1, r3
 8007398:	e797      	b.n	80072ca <lv_obj_align+0x1a2>
 800739a:	8aa1      	ldrh	r1, [r4, #20]
 800739c:	8a23      	ldrh	r3, [r4, #16]
 800739e:	3101      	adds	r1, #1
 80073a0:	1ac9      	subs	r1, r1, r3
 80073a2:	e769      	b.n	8007278 <lv_obj_align+0x150>
            new_y = 0;
 80073a4:	2200      	movs	r2, #0
            new_x = 0;
 80073a6:	4611      	mov	r1, r2
 80073a8:	e73a      	b.n	8007220 <lv_obj_align+0xf8>

080073aa <lv_obj_align_origo>:
{
 80073aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ae:	4605      	mov	r5, r0
 80073b0:	4616      	mov	r6, r2
 80073b2:	f8b5 e014 	ldrh.w	lr, [r5, #20]
    return area_p->y2 - area_p->y1 + 1;
 80073b6:	8aea      	ldrh	r2, [r5, #22]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80073b8:	f8b0 9010 	ldrh.w	r9, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80073bc:	f8b0 c012 	ldrh.w	ip, [r0, #18]
    return obj->par;
 80073c0:	6804      	ldr	r4, [r0, #0]
{
 80073c2:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80073c6:	8a60      	ldrh	r0, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 80073c8:	f10e 0e01 	add.w	lr, lr, #1
    return area_p->y2 - area_p->y1 + 1;
 80073cc:	3201      	adds	r2, #1
    return area_p->x2 - area_p->x1 + 1;
 80073ce:	ebae 0e09 	sub.w	lr, lr, r9
    return area_p->y2 - area_p->y1 + 1;
 80073d2:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 80073d6:	f04f 0a02 	mov.w	sl, #2
{
 80073da:	4698      	mov	r8, r3
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 80073dc:	fa0f fe8e 	sxth.w	lr, lr
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80073e0:	8a23      	ldrh	r3, [r4, #16]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 80073e2:	fb9e fefa 	sdiv	lr, lr, sl
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 80073e6:	b212      	sxth	r2, r2
    if(base == NULL) {
 80073e8:	2900      	cmp	r1, #0
 80073ea:	bf18      	it	ne
 80073ec:	460c      	movne	r4, r1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 80073ee:	fb92 f2fa 	sdiv	r2, r2, sl
    switch(align) {
 80073f2:	2e14      	cmp	r6, #20
 80073f4:	d80c      	bhi.n	8007410 <lv_obj_align_origo+0x66>
 80073f6:	e8df f006 	tbb	[pc, r6]
 80073fa:	672e      	.short	0x672e
 80073fc:	597c894b 	.word	0x597c894b
 8007400:	67916c9b 	.word	0x67916c9b
 8007404:	597c894b 	.word	0x597c894b
 8007408:	7c6c679b 	.word	0x7c6c679b
 800740c:	9189      	.short	0x9189
 800740e:	9b          	.byte	0x9b
 800740f:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007410:	eba9 0103 	sub.w	r1, r9, r3
 8007414:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007416:	ebac 0200 	sub.w	r2, ip, r0
    new_x -= par_abs_x;
 800741a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800741e:	eba8 0303 	sub.w	r3, r8, r3
 8007422:	4473      	add	r3, lr
 8007424:	4419      	add	r1, r3
    new_y -= par_abs_y;
 8007426:	8a63      	ldrh	r3, [r4, #18]
 8007428:	1a38      	subs	r0, r7, r0
 800742a:	4418      	add	r0, r3
            new_y = lv_obj_get_height(base) - obj_h_half;
 800742c:	b212      	sxth	r2, r2
    new_y -= par_abs_y;
 800742e:	4402      	add	r2, r0
    lv_obj_set_pos(obj, new_x, new_y);
 8007430:	b212      	sxth	r2, r2
 8007432:	b209      	sxth	r1, r1
 8007434:	4628      	mov	r0, r5
 8007436:	f7ff fe22 	bl	800707e <lv_obj_set_pos>
    obj->realign.origo_align = 1;
 800743a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    obj->realign.align       = align;
 800743e:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
    obj->realign.origo_align = 1;
 8007442:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_mod;
 8007446:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800744a:	87ef      	strh	r7, [r5, #62]	; 0x3e
    obj->realign.base        = base;
 800744c:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.origo_align = 1;
 800744e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return area_p->x2 - area_p->x1 + 1;
 8007456:	8aa1      	ldrh	r1, [r4, #20]
 8007458:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    return area_p->y2 - area_p->y1 + 1;
 800745c:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    return area_p->x2 - area_p->x1 + 1;
 8007460:	3101      	adds	r1, #1
 8007462:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8007466:	b209      	sxth	r1, r1
 8007468:	f04f 0c02 	mov.w	ip, #2
 800746c:	fb91 f1fc 	sdiv	r1, r1, ip
 8007470:	eba1 010e 	sub.w	r1, r1, lr
    return area_p->y2 - area_p->y1 + 1;
 8007474:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8007478:	f10e 0e01 	add.w	lr, lr, #1
 800747c:	ebae 0e09 	sub.w	lr, lr, r9
 8007480:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8007482:	fa0f fe8e 	sxth.w	lr, lr
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8007486:	fb9e fefc 	sdiv	lr, lr, ip
 800748a:	ebae 0202 	sub.w	r2, lr, r2
 800748e:	e7c4      	b.n	800741a <lv_obj_align_origo+0x70>
    return area_p->x2 - area_p->x1 + 1;
 8007490:	8aa1      	ldrh	r1, [r4, #20]
 8007492:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8007496:	3101      	adds	r1, #1
 8007498:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800749c:	b209      	sxth	r1, r1
 800749e:	f04f 0c02 	mov.w	ip, #2
 80074a2:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 80074a6:	eba1 010e 	sub.w	r1, r1, lr
 80074aa:	e00f      	b.n	80074cc <lv_obj_align_origo+0x122>
 80074ac:	8aa1      	ldrh	r1, [r4, #20]
 80074ae:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80074b2:	3101      	adds	r1, #1
 80074b4:	eba1 010c 	sub.w	r1, r1, ip
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80074b8:	b209      	sxth	r1, r1
 80074ba:	f04f 0c02 	mov.w	ip, #2
 80074be:	fb91 f1fc 	sdiv	r1, r1, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 80074c2:	eba1 010e 	sub.w	r1, r1, lr
 80074c6:	e016      	b.n	80074f6 <lv_obj_align_origo+0x14c>
            new_x = -obj_w_half;
 80074c8:	f1ce 0100 	rsb	r1, lr, #0
            new_x = lv_obj_get_width(base) - obj_w_half;
 80074cc:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 80074ce:	4252      	negs	r2, r2
 80074d0:	e7a3      	b.n	800741a <lv_obj_align_origo+0x70>
            new_x = -obj_w_half;
 80074d2:	f1ce 0100 	rsb	r1, lr, #0
    return area_p->y2 - area_p->y1 + 1;
 80074d6:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 80074da:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 80074de:	f10e 0e01 	add.w	lr, lr, #1
 80074e2:	ebae 0e0c 	sub.w	lr, lr, ip
            new_x = lv_obj_get_width(base) - obj_w_half;
 80074e6:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80074e8:	fa0f fe8e 	sxth.w	lr, lr
 80074ec:	f04f 0c02 	mov.w	ip, #2
 80074f0:	e7c9      	b.n	8007486 <lv_obj_align_origo+0xdc>
            new_x = -obj_w_half;
 80074f2:	f1ce 0100 	rsb	r1, lr, #0
            new_y = lv_obj_get_height(base) - obj_h_half;
 80074f6:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 80074fa:	f1c2 0201 	rsb	r2, r2, #1
 80074fe:	4472      	add	r2, lr
 8007500:	f8b4 e012 	ldrh.w	lr, [r4, #18]
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007504:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8007506:	eba2 020e 	sub.w	r2, r2, lr
 800750a:	e786      	b.n	800741a <lv_obj_align_origo+0x70>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800750c:	f1ce 0101 	rsb	r1, lr, #1
 8007510:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8007514:	4471      	add	r1, lr
 8007516:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800751a:	e7c4      	b.n	80074a6 <lv_obj_align_origo+0xfc>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800751c:	f1ce 0101 	rsb	r1, lr, #1
 8007520:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8007524:	4471      	add	r1, lr
 8007526:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800752a:	eba1 010e 	sub.w	r1, r1, lr
 800752e:	e7d2      	b.n	80074d6 <lv_obj_align_origo+0x12c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007530:	f1ce 0101 	rsb	r1, lr, #1
 8007534:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8007538:	4471      	add	r1, lr
 800753a:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 800753e:	e7c0      	b.n	80074c2 <lv_obj_align_origo+0x118>

08007540 <lv_obj_realign>:
{
 8007540:	b513      	push	{r0, r1, r4, lr}
    if(obj->realign.origo_align)
 8007542:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007546:	f9b0 403e 	ldrsh.w	r4, [r0, #62]	; 0x3e
 800754a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800754e:	9400      	str	r4, [sp, #0]
    if(obj->realign.origo_align)
 8007550:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007554:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007556:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
    if(obj->realign.origo_align)
 800755a:	d003      	beq.n	8007564 <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800755c:	f7ff ff25 	bl	80073aa <lv_obj_align_origo>
}
 8007560:	b002      	add	sp, #8
 8007562:	bd10      	pop	{r4, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007564:	f7ff fde0 	bl	8007128 <lv_obj_align>
}
 8007568:	e7fa      	b.n	8007560 <lv_obj_realign+0x20>
	...

0800756c <lv_obj_create>:
{
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	460d      	mov	r5, r1
    if(parent == NULL) {
 8007570:	4606      	mov	r6, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	f040 80e6 	bne.w	8007744 <lv_obj_create+0x1d8>
        lv_disp_t * disp = lv_disp_get_default();
 8007578:	f004 ff04 	bl	800c384 <lv_disp_get_default>
        if(!disp) {
 800757c:	2800      	cmp	r0, #0
 800757e:	f000 8133 	beq.w	80077e8 <lv_obj_create+0x27c>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8007582:	302c      	adds	r0, #44	; 0x2c
 8007584:	f005 fad7 	bl	800cb36 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 8007588:	4604      	mov	r4, r0
 800758a:	b900      	cbnz	r0, 800758e <lv_obj_create+0x22>
 800758c:	e7fe      	b.n	800758c <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800758e:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 8007590:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8007594:	f005 fac5 	bl	800cb22 <lv_ll_init>
        new_obj->coords.x1    = 0;
 8007598:	8226      	strh	r6, [r4, #16]
        new_obj->coords.y1    = 0;
 800759a:	8266      	strh	r6, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 800759c:	4630      	mov	r0, r6
 800759e:	f004 fef7 	bl	800c390 <lv_disp_get_hor_res>
 80075a2:	3801      	subs	r0, #1
 80075a4:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80075a6:	4630      	mov	r0, r6
 80075a8:	f004 ff04 	bl	800c3b4 <lv_disp_get_ver_res>
        new_obj->realign.auto_realign = 0;
 80075ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        new_obj->ext_draw_pad = 0;
 80075b0:	86a6      	strh	r6, [r4, #52]	; 0x34
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80075b2:	3801      	subs	r0, #1
        new_obj->realign.auto_realign = 0;
 80075b4:	f366 0300 	bfi	r3, r6, #0, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80075b8:	82e0      	strh	r0, [r4, #22]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80075ba:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 80075be:	87a6      	strh	r6, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 80075c0:	87e6      	strh	r6, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 80075c2:	63a6      	str	r6, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80075c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 80075c8:	f008 fe90 	bl	80102ec <lv_theme_get_current>
        if(th) {
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f000 80b7 	beq.w	8007740 <lv_obj_create+0x1d4>
            new_obj->style_p = th->style.scr;
 80075d2:	6803      	ldr	r3, [r0, #0]
        new_obj->click        = 0;
 80075d4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
            new_obj->style_p = &lv_style_scr;
 80075d8:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 80075da:	4b84      	ldr	r3, [pc, #528]	; (80077ec <lv_obj_create+0x280>)
 80075dc:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 80075de:	4b84      	ldr	r3, [pc, #528]	; (80077f0 <lv_obj_create+0x284>)
 80075e0:	6223      	str	r3, [r4, #32]
        new_obj->parent_event = 0;
 80075e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
        new_obj->event_cb = NULL;
 80075e6:	2300      	movs	r3, #0
        new_obj->parent_event = 0;
 80075e8:	f363 12c7 	bfi	r2, r3, #7, #1
 80075ec:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->reserved     = 0;
 80075f0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
        new_obj->event_cb = NULL;
 80075f4:	61a3      	str	r3, [r4, #24]
        new_obj->opa_scale    = LV_OPA_COVER;
 80075f6:	21ff      	movs	r1, #255	; 0xff
        new_obj->reserved     = 0;
 80075f8:	f363 0287 	bfi	r2, r3, #2, #6
        new_obj->group_p = NULL;
 80075fc:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 80075fe:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8007602:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->reserved     = 0;
 8007606:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        new_obj->ext_attr = NULL;
 800760a:	6263      	str	r3, [r4, #36]	; 0x24
    if(copy != NULL) {
 800760c:	2d00      	cmp	r5, #0
 800760e:	f000 80e7 	beq.w	80077e0 <lv_obj_create+0x274>
    memcpy(dest, src, sizeof(lv_area_t));
 8007612:	462a      	mov	r2, r5
 8007614:	f852 3f10 	ldr.w	r3, [r2, #16]!
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	6853      	ldr	r3, [r2, #4]
 800761c:	6163      	str	r3, [r4, #20]
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800761e:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
 8007622:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 8007624:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8007628:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 800762c:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
 8007630:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8007632:	f9b5 303e 	ldrsh.w	r3, [r5, #62]	; 0x3e
 8007636:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8007638:	6bab      	ldr	r3, [r5, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800763a:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
        new_obj->realign.base         = copy->realign.base;
 800763e:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8007640:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007644:	f362 0300 	bfi	r3, r2, #0, #1
 8007648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        new_obj->event_cb = copy->event_cb;
 800764c:	69ab      	ldr	r3, [r5, #24]
        new_obj->click        = copy->click;
 800764e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
        new_obj->event_cb = copy->event_cb;
 8007652:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 8007654:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007658:	f362 0300 	bfi	r3, r2, #0, #1
 800765c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->drag         = copy->drag;
 8007660:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007664:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007668:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800766c:	f363 0241 	bfi	r2, r3, #1, #1
 8007670:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_dir     = copy->drag_dir;
 8007674:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 8007678:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800767c:	f362 0301 	bfi	r3, r2, #0, #2
 8007680:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->drag_throw   = copy->drag_throw;
 8007684:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007688:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800768c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007690:	f363 0282 	bfi	r2, r3, #2, #1
 8007694:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->drag_parent  = copy->drag_parent;
 8007698:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076a2:	f363 02c3 	bfi	r2, r3, #3, #1
 80076a6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->hidden       = copy->hidden;
 80076aa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076b4:	f363 1204 	bfi	r2, r3, #4, #1
 80076b8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->top          = copy->top;
 80076bc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076c6:	f363 1245 	bfi	r2, r3, #5, #1
 80076ca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->parent_event = copy->parent_event;
 80076ce:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	09db      	lsrs	r3, r3, #7
 80076d6:	f363 12c7 	bfi	r2, r3, #7, #1
 80076da:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->opa_scale_en = copy->opa_scale_en;
 80076de:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80076e8:	f363 1286 	bfi	r2, r3, #6, #1
 80076ec:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        new_obj->protect      = copy->protect;
 80076f0:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 80076f4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->opa_scale    = copy->opa_scale;
 80076f8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 80076fc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        if(copy->group_p != NULL) {
 8007700:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8007702:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007704:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 8007706:	b110      	cbz	r0, 800770e <lv_obj_create+0x1a2>
            lv_group_add_obj(copy->group_p, new_obj);
 8007708:	4621      	mov	r1, r4
 800770a:	f7fe fb59 	bl	8005dc0 <lv_group_add_obj>
    return obj->par;
 800770e:	682b      	ldr	r3, [r5, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8007710:	2b00      	cmp	r3, #0
 8007712:	d060      	beq.n	80077d6 <lv_obj_create+0x26a>
 8007714:	2e00      	cmp	r6, #0
 8007716:	d05e      	beq.n	80077d6 <lv_obj_create+0x26a>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007718:	8a59      	ldrh	r1, [r3, #18]
 800771a:	8a6a      	ldrh	r2, [r5, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800771c:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800771e:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007720:	8a29      	ldrh	r1, [r5, #16]
 8007722:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8007724:	b212      	sxth	r2, r2
 8007726:	b209      	sxth	r1, r1
 8007728:	4620      	mov	r0, r4
 800772a:	f7ff fca8 	bl	800707e <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 800772e:	69f3      	ldr	r3, [r6, #28]
 8007730:	4622      	mov	r2, r4
 8007732:	2101      	movs	r1, #1
 8007734:	4630      	mov	r0, r6
 8007736:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff fc33 	bl	8006fa4 <lv_obj_invalidate>
 800773e:	e051      	b.n	80077e4 <lv_obj_create+0x278>
            new_obj->style_p = &lv_style_scr;
 8007740:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <lv_obj_create+0x288>)
 8007742:	e747      	b.n	80075d4 <lv_obj_create+0x68>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8007744:	3004      	adds	r0, #4
 8007746:	f005 f9f6 	bl	800cb36 <lv_ll_ins_head>
        lv_mem_assert(new_obj);
 800774a:	4604      	mov	r4, r0
 800774c:	b900      	cbnz	r0, 8007750 <lv_obj_create+0x1e4>
 800774e:	e7fe      	b.n	800774e <lv_obj_create+0x1e2>
        new_obj->par = parent; /*Set the parent*/
 8007750:	f840 6b04 	str.w	r6, [r0], #4
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8007754:	2144      	movs	r1, #68	; 0x44
 8007756:	f005 f9e4 	bl	800cb22 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 800775a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800775e:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8007760:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8007764:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8007766:	8a33      	ldrh	r3, [r6, #16]
        new_obj->realign.auto_realign = 0;
 8007768:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800776c:	3364      	adds	r3, #100	; 0x64
 800776e:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8007770:	8a73      	ldrh	r3, [r6, #18]
 8007772:	3342      	adds	r3, #66	; 0x42
 8007774:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8007776:	2300      	movs	r3, #0
        new_obj->realign.auto_realign = 0;
 8007778:	f363 0200 	bfi	r2, r3, #0, #1
        new_obj->ext_draw_pad = 0;
 800777c:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800777e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        new_obj->realign.xofs         = 0;
 8007782:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8007784:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8007786:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8007788:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        lv_theme_t * th = lv_theme_get_current();
 800778c:	f008 fdae 	bl	80102ec <lv_theme_get_current>
        if(th) {
 8007790:	b1f8      	cbz	r0, 80077d2 <lv_obj_create+0x266>
            new_obj->style_p = th->style.panel;
 8007792:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 8007794:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8007796:	4b15      	ldr	r3, [pc, #84]	; (80077ec <lv_obj_create+0x280>)
 8007798:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <lv_obj_create+0x284>)
 800779c:	6223      	str	r3, [r4, #32]
        new_obj->click        = 1;
 800779e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80077a2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
        new_obj->drag         = 0;
 80077a6:	f043 0301 	orr.w	r3, r3, #1
        new_obj->event_cb = NULL;
 80077aa:	2200      	movs	r2, #0
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80077ac:	f041 0103 	orr.w	r1, r1, #3
        new_obj->parent_event = 0;
 80077b0:	f003 0381 	and.w	r3, r3, #129	; 0x81
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80077b4:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        new_obj->parent_event = 0;
 80077b8:	f362 13c7 	bfi	r3, r2, #7, #1
        new_obj->opa_scale    = LV_OPA_COVER;
 80077bc:	21ff      	movs	r1, #255	; 0xff
        new_obj->event_cb = NULL;
 80077be:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 80077c0:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->protect      = LV_PROTECT_NONE;
 80077c2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 80077c6:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        new_obj->parent_event = 0;
 80077ca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_attr = NULL;
 80077ce:	6262      	str	r2, [r4, #36]	; 0x24
 80077d0:	e71c      	b.n	800760c <lv_obj_create+0xa0>
            new_obj->style_p = &lv_style_plain_color;
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <lv_obj_create+0x28c>)
 80077d4:	e7de      	b.n	8007794 <lv_obj_create+0x228>
            lv_obj_set_pos(new_obj, 0, 0);
 80077d6:	2200      	movs	r2, #0
 80077d8:	4611      	mov	r1, r2
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff fc4f 	bl	800707e <lv_obj_set_pos>
    if(parent != NULL) {
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	d1a4      	bne.n	800772e <lv_obj_create+0x1c2>
}
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
            return NULL;
 80077e8:	4604      	mov	r4, r0
 80077ea:	e7fb      	b.n	80077e4 <lv_obj_create+0x278>
 80077ec:	080079dd 	.word	0x080079dd
 80077f0:	08007a99 	.word	0x08007a99
 80077f4:	20015d60 	.word	0x20015d60
 80077f8:	20015e00 	.word	0x20015e00

080077fc <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 80077fc:	8a83      	ldrh	r3, [r0, #20]
{
 80077fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007800:	4616      	mov	r6, r2
 8007802:	8a02      	ldrh	r2, [r0, #16]
 8007804:	3301      	adds	r3, #1
 8007806:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8007808:	b21b      	sxth	r3, r3
 800780a:	4299      	cmp	r1, r3
{
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8007810:	d106      	bne.n	8007820 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 8007812:	8ac3      	ldrh	r3, [r0, #22]
 8007814:	8a42      	ldrh	r2, [r0, #18]
 8007816:	3301      	adds	r3, #1
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	b21b      	sxth	r3, r3
 800781c:	429e      	cmp	r6, r3
 800781e:	d02b      	beq.n	8007878 <lv_obj_set_size+0x7c>
    lv_obj_invalidate(obj);
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff fbbf 	bl	8006fa4 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8007826:	4622      	mov	r2, r4
 8007828:	466b      	mov	r3, sp
 800782a:	f852 0f10 	ldr.w	r0, [r2, #16]!
 800782e:	6851      	ldr	r1, [r2, #4]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007830:	8a62      	ldrh	r2, [r4, #18]
 8007832:	c303      	stmia	r3!, {r0, r1}
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8007834:	8a23      	ldrh	r3, [r4, #16]
 8007836:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007838:	3e01      	subs	r6, #1
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800783a:	441d      	add	r5, r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800783c:	4416      	add	r6, r2
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800783e:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007840:	82e6      	strh	r6, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	466a      	mov	r2, sp
 8007846:	2102      	movs	r1, #2
 8007848:	4620      	mov	r0, r4
 800784a:	4798      	blx	r3
    return obj->par;
 800784c:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800784e:	b118      	cbz	r0, 8007858 <lv_obj_set_size+0x5c>
 8007850:	69c3      	ldr	r3, [r0, #28]
 8007852:	4622      	mov	r2, r4
 8007854:	2101      	movs	r1, #1
 8007856:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007858:	1d26      	adds	r6, r4, #4
 800785a:	4630      	mov	r0, r6
 800785c:	f005 f9a7 	bl	800cbae <lv_ll_get_head>
 8007860:	4605      	mov	r5, r0
 8007862:	b958      	cbnz	r0, 800787c <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff fb9d 	bl	8006fa4 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 800786a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d502      	bpl.n	8007878 <lv_obj_set_size+0x7c>
 8007872:	4620      	mov	r0, r4
 8007874:	f7ff fe64 	bl	8007540 <lv_obj_realign>
}
 8007878:	b002      	add	sp, #8
 800787a:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800787c:	69eb      	ldr	r3, [r5, #28]
 800787e:	2200      	movs	r2, #0
 8007880:	2103      	movs	r1, #3
 8007882:	4628      	mov	r0, r5
 8007884:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007886:	4629      	mov	r1, r5
 8007888:	4630      	mov	r0, r6
 800788a:	f005 f996 	bl	800cbba <lv_ll_get_next>
 800788e:	e7e7      	b.n	8007860 <lv_obj_set_size+0x64>

08007890 <lv_obj_set_width>:
    return area_p->y2 - area_p->y1 + 1;
 8007890:	8ac2      	ldrh	r2, [r0, #22]
 8007892:	8a43      	ldrh	r3, [r0, #18]
 8007894:	3201      	adds	r2, #1
 8007896:	1ad2      	subs	r2, r2, r3
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8007898:	b212      	sxth	r2, r2
 800789a:	f7ff bfaf 	b.w	80077fc <lv_obj_set_size>

0800789e <lv_obj_set_height>:
    return area_p->x2 - area_p->x1 + 1;
 800789e:	8a83      	ldrh	r3, [r0, #20]
 80078a0:	8a02      	ldrh	r2, [r0, #16]
 80078a2:	3301      	adds	r3, #1
 80078a4:	1a9b      	subs	r3, r3, r2
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80078a6:	460a      	mov	r2, r1
 80078a8:	b219      	sxth	r1, r3
 80078aa:	f7ff bfa7 	b.w	80077fc <lv_obj_set_size>

080078ae <lv_obj_refresh_style>:
{
 80078ae:	b510      	push	{r4, lr}
 80078b0:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 80078b2:	f7ff fb77 	bl	8006fa4 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80078b6:	69e3      	ldr	r3, [r4, #28]
 80078b8:	4620      	mov	r0, r4
 80078ba:	2200      	movs	r2, #0
 80078bc:	2104      	movs	r1, #4
 80078be:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80078c0:	4620      	mov	r0, r4
}
 80078c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80078c6:	f7ff bb6d 	b.w	8006fa4 <lv_obj_invalidate>

080078ca <lv_obj_refresh_ext_draw_pad>:
{
 80078ca:	b510      	push	{r4, lr}
    obj->ext_draw_pad = 0;
 80078cc:	2200      	movs	r2, #0
{
 80078ce:	4604      	mov	r4, r0
    obj->ext_draw_pad = 0;
 80078d0:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80078d2:	69c3      	ldr	r3, [r0, #28]
 80078d4:	2105      	movs	r1, #5
 80078d6:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80078d8:	4620      	mov	r0, r4
}
 80078da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(obj);
 80078de:	f7ff bb61 	b.w	8006fa4 <lv_obj_invalidate>

080078e2 <lv_obj_get_parent>:
}
 80078e2:	6800      	ldr	r0, [r0, #0]
 80078e4:	4770      	bx	lr

080078e6 <lv_obj_get_child>:
{
 80078e6:	3004      	adds	r0, #4
    if(child == NULL) {
 80078e8:	b909      	cbnz	r1, 80078ee <lv_obj_get_child+0x8>
        result = lv_ll_get_head(&obj->child_ll);
 80078ea:	f005 b960 	b.w	800cbae <lv_ll_get_head>
        result = lv_ll_get_next(&obj->child_ll, child);
 80078ee:	f005 b964 	b.w	800cbba <lv_ll_get_next>

080078f2 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 80078f2:	b538      	push	{r3, r4, r5, lr}
 80078f4:	4605      	mov	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 80078f6:	3004      	adds	r0, #4
 80078f8:	f005 f959 	bl	800cbae <lv_ll_get_head>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
 80078fc:	4604      	mov	r4, r0
    while(child != NULL) {
 80078fe:	b900      	cbnz	r0, 8007902 <refresh_children_style+0x10>
    }
}
 8007900:	bd38      	pop	{r3, r4, r5, pc}
        if(child->style_p == NULL) {
 8007902:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007904:	b953      	cbnz	r3, 800791c <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff fff3 	bl	80078f2 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800790c:	4620      	mov	r0, r4
 800790e:	f7ff ffce 	bl	80078ae <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f7ff ffe6 	bl	80078e6 <lv_obj_get_child>
 800791a:	e7ef      	b.n	80078fc <refresh_children_style+0xa>
        } else if(child->style_p->glass) {
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	07db      	lsls	r3, r3, #31
 8007920:	d5f7      	bpl.n	8007912 <refresh_children_style+0x20>
            refresh_children_style(child);
 8007922:	4620      	mov	r0, r4
 8007924:	f7ff ffe5 	bl	80078f2 <refresh_children_style>
 8007928:	e7f3      	b.n	8007912 <refresh_children_style+0x20>

0800792a <lv_obj_set_style>:
{
 800792a:	b510      	push	{r4, lr}
 800792c:	4604      	mov	r4, r0
    obj->style_p = style;
 800792e:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8007930:	f7ff ffdf 	bl	80078f2 <refresh_children_style>
    lv_obj_refresh_style(obj);
 8007934:	4620      	mov	r0, r4
}
 8007936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_refresh_style(obj);
 800793a:	f7ff bfb8 	b.w	80078ae <lv_obj_refresh_style>

0800793e <lv_obj_get_coords>:
    memcpy(dest, src, sizeof(lv_area_t));
 800793e:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8007942:	600b      	str	r3, [r1, #0]
 8007944:	6843      	ldr	r3, [r0, #4]
 8007946:	604b      	str	r3, [r1, #4]
 8007948:	4770      	bx	lr

0800794a <lv_obj_get_x>:
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800794a:	6803      	ldr	r3, [r0, #0]
 800794c:	8a00      	ldrh	r0, [r0, #16]
 800794e:	8a1b      	ldrh	r3, [r3, #16]
 8007950:	1ac0      	subs	r0, r0, r3
}
 8007952:	b200      	sxth	r0, r0
 8007954:	4770      	bx	lr

08007956 <lv_obj_get_y>:
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007956:	6803      	ldr	r3, [r0, #0]
 8007958:	8a40      	ldrh	r0, [r0, #18]
 800795a:	8a5b      	ldrh	r3, [r3, #18]
 800795c:	1ac0      	subs	r0, r0, r3
}
 800795e:	b200      	sxth	r0, r0
 8007960:	4770      	bx	lr

08007962 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8007962:	8a83      	ldrh	r3, [r0, #20]
 8007964:	8a00      	ldrh	r0, [r0, #16]
 8007966:	3301      	adds	r3, #1
 8007968:	1a18      	subs	r0, r3, r0
}
 800796a:	b200      	sxth	r0, r0
 800796c:	4770      	bx	lr

0800796e <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800796e:	8ac3      	ldrh	r3, [r0, #22]
 8007970:	8a40      	ldrh	r0, [r0, #18]
 8007972:	3301      	adds	r3, #1
 8007974:	1a18      	subs	r0, r3, r0
}
 8007976:	b200      	sxth	r0, r0
 8007978:	4770      	bx	lr

0800797a <lv_obj_get_auto_realign>:
    return obj->realign.auto_realign ? true : false;
 800797a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800797e:	f000 0001 	and.w	r0, r0, #1
 8007982:	4770      	bx	lr

08007984 <lv_obj_get_style>:
{
 8007984:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8007986:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8007988:	4606      	mov	r6, r0
    if(style_act == NULL) {
 800798a:	b98d      	cbnz	r5, 80079b0 <lv_obj_get_style+0x2c>
        lv_obj_t * par = obj->par;
 800798c:	6804      	ldr	r4, [r0, #0]
        while(par) {
 800798e:	b17c      	cbz	r4, 80079b0 <lv_obj_get_style+0x2c>
            if(par->style_p) {
 8007990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007992:	b1fb      	cbz	r3, 80079d4 <lv_obj_get_style+0x50>
                if(par->style_p->glass == 0) {
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	07db      	lsls	r3, r3, #31
 8007998:	d41c      	bmi.n	80079d4 <lv_obj_get_style+0x50>
    return obj->group_p;
 800799a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 800799c:	4628      	mov	r0, r5
 800799e:	f7fe fa4d 	bl	8005e3c <lv_group_get_focused>
 80079a2:	4284      	cmp	r4, r0
 80079a4:	d114      	bne.n	80079d0 <lv_obj_get_style+0x4c>
                        style_act = lv_group_mod_style(g, par->style_p);
 80079a6:	4628      	mov	r0, r5
 80079a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80079aa:	f7fe fa34 	bl	8005e16 <lv_group_mod_style>
 80079ae:	4605      	mov	r5, r0
    if(obj->group_p) {
 80079b0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80079b2:	b140      	cbz	r0, 80079c6 <lv_obj_get_style+0x42>
        if(lv_group_get_focused(obj->group_p) == obj) {
 80079b4:	f7fe fa42 	bl	8005e3c <lv_group_get_focused>
 80079b8:	4286      	cmp	r6, r0
 80079ba:	d104      	bne.n	80079c6 <lv_obj_get_style+0x42>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 80079bc:	4629      	mov	r1, r5
 80079be:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80079c0:	f7fe fa29 	bl	8005e16 <lv_group_mod_style>
 80079c4:	4605      	mov	r5, r0
}
 80079c6:	4804      	ldr	r0, [pc, #16]	; (80079d8 <lv_obj_get_style+0x54>)
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	bf18      	it	ne
 80079cc:	4628      	movne	r0, r5
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 80079d0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80079d2:	e7ed      	b.n	80079b0 <lv_obj_get_style+0x2c>
            par = par->par;
 80079d4:	6824      	ldr	r4, [r4, #0]
 80079d6:	e7da      	b.n	800798e <lv_obj_get_style+0xa>
 80079d8:	20015cc0 	.word	0x20015cc0

080079dc <lv_obj_signal>:
{
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	460c      	mov	r4, r1
 80079e0:	4605      	mov	r5, r0
 80079e2:	4616      	mov	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 80079e4:	f7ff ffce 	bl	8007984 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 80079e8:	2c01      	cmp	r4, #1
 80079ea:	d105      	bne.n	80079f8 <lv_obj_signal+0x1c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80079ec:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 80079f0:	43c0      	mvns	r0, r0
 80079f2:	f000 0001 	and.w	r0, r0, #1
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80079f8:	2c05      	cmp	r4, #5
 80079fa:	d108      	bne.n	8007a0e <lv_obj_signal+0x32>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 80079fc:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8007a00:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8007a04:	429a      	cmp	r2, r3
 8007a06:	da00      	bge.n	8007a0a <lv_obj_signal+0x2e>
 8007a08:	86ab      	strh	r3, [r5, #52]	; 0x34
    lv_res_t res = LV_RES_OK;
 8007a0a:	2001      	movs	r0, #1
}
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8007a0e:	2c04      	cmp	r4, #4
 8007a10:	d103      	bne.n	8007a1a <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7ff ff59 	bl	80078ca <lv_obj_refresh_ext_draw_pad>
 8007a18:	e7f7      	b.n	8007a0a <lv_obj_signal+0x2e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8007a1a:	2c06      	cmp	r4, #6
        buf->type[0]        = "lv_obj";
 8007a1c:	bf04      	itt	eq
 8007a1e:	4b01      	ldreq	r3, [pc, #4]	; (8007a24 <lv_obj_signal+0x48>)
 8007a20:	6033      	streq	r3, [r6, #0]
 8007a22:	e7f2      	b.n	8007a0a <lv_obj_signal+0x2e>
 8007a24:	080f3607 	.word	0x080f3607

08007a28 <lv_obj_get_width_fit>:
{
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4604      	mov	r4, r0
    const lv_style_t * style = lv_obj_get_style(obj);
 8007a2c:	f7ff ffaa 	bl	8007984 <lv_obj_get_style>
    return area_p->x2 - area_p->x1 + 1;
 8007a30:	8aa3      	ldrh	r3, [r4, #20]
 8007a32:	8a22      	ldrh	r2, [r4, #16]
 8007a34:	3301      	adds	r3, #1
 8007a36:	1a9b      	subs	r3, r3, r2
    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 8007a38:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8007a3a:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	1a18      	subs	r0, r3, r0
}
 8007a40:	b200      	sxth	r0, r0
 8007a42:	bd10      	pop	{r4, pc}

08007a44 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 8007a44:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007a48:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8007a4c:	4770      	bx	lr

08007a4e <lv_obj_get_click>:
    return obj->click == 0 ? false : true;
 8007a4e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007a52:	f000 0001 	and.w	r0, r0, #1
 8007a56:	4770      	bx	lr

08007a58 <lv_obj_get_drag>:
    return obj->drag == 0 ? false : true;
 8007a58:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007a5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007a60:	4770      	bx	lr

08007a62 <lv_obj_get_drag_dir>:
    return obj->drag_dir;
 8007a62:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
}
 8007a66:	f000 0003 	and.w	r0, r0, #3
 8007a6a:	4770      	bx	lr

08007a6c <lv_obj_get_drag_throw>:
    return obj->drag_throw == 0 ? false : true;
 8007a6c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007a70:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8007a74:	4770      	bx	lr

08007a76 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 8007a76:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
}
 8007a7a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8007a7e:	4770      	bx	lr

08007a80 <lv_obj_get_opa_scale>:
    while(parent) {
 8007a80:	b908      	cbnz	r0, 8007a86 <lv_obj_get_opa_scale+0x6>
    return LV_OPA_COVER;
 8007a82:	20ff      	movs	r0, #255	; 0xff
}
 8007a84:	4770      	bx	lr
        if(parent->opa_scale_en) return parent->opa_scale;
 8007a86:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007a8a:	065b      	lsls	r3, r3, #25
 8007a8c:	d502      	bpl.n	8007a94 <lv_obj_get_opa_scale+0x14>
 8007a8e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 8007a92:	4770      	bx	lr
    return obj->par;
 8007a94:	6800      	ldr	r0, [r0, #0]
 8007a96:	e7f3      	b.n	8007a80 <lv_obj_get_opa_scale>

08007a98 <lv_obj_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 8007a98:	2a02      	cmp	r2, #2
{
 8007a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8007aa0:	d13c      	bne.n	8007b1c <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8007aa2:	f100 0510 	add.w	r5, r0, #16
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f004 ff29 	bl	800c900 <lv_area_is_in>
 8007aae:	b390      	cbz	r0, 8007b16 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f7ff ff67 	bl	8007984 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 8007ab6:	7b83      	ldrb	r3, [r0, #14]
 8007ab8:	2bfa      	cmp	r3, #250	; 0xfa
 8007aba:	d92c      	bls.n	8007b16 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 8007abc:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
        if(r == LV_RADIUS_CIRCLE) return false;
 8007ac0:	f647 4318 	movw	r3, #31768	; 0x7c18
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	d026      	beq.n	8007b16 <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 8007ac8:	6828      	ldr	r0, [r5, #0]
 8007aca:	6869      	ldr	r1, [r5, #4]
 8007acc:	466b      	mov	r3, sp
 8007ace:	c303      	stmia	r3!, {r0, r1}
        area_tmp.x1 += r;
 8007ad0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ad4:	b2a4      	uxth	r4, r4
 8007ad6:	4423      	add	r3, r4
 8007ad8:	f8ad 3000 	strh.w	r3, [sp]
        area_tmp.x2 -= r;
 8007adc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007ae0:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8007ae2:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007ae4:	4630      	mov	r0, r6
        area_tmp.x2 -= r;
 8007ae6:	f8ad 3004 	strh.w	r3, [sp, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007aea:	f004 ff09 	bl	800c900 <lv_area_is_in>
 8007aee:	b190      	cbz	r0, 8007b16 <lv_obj_design+0x7e>
 8007af0:	6828      	ldr	r0, [r5, #0]
 8007af2:	6869      	ldr	r1, [r5, #4]
 8007af4:	466b      	mov	r3, sp
 8007af6:	c303      	stmia	r3!, {r0, r1}
        area_tmp.y1 += r;
 8007af8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007afc:	4423      	add	r3, r4
 8007afe:	f8ad 3002 	strh.w	r3, [sp, #2]
        area_tmp.y2 -= r;
 8007b02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007b06:	4669      	mov	r1, sp
        area_tmp.y2 -= r;
 8007b08:	1b1c      	subs	r4, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007b0a:	4630      	mov	r0, r6
        area_tmp.y2 -= r;
 8007b0c:	f8ad 4006 	strh.w	r4, [sp, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007b10:	f004 fef6 	bl	800c900 <lv_area_is_in>
 8007b14:	b900      	cbnz	r0, 8007b18 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8007b16:	2000      	movs	r0, #0
}
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8007b1c:	b95a      	cbnz	r2, 8007b36 <lv_obj_design+0x9e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8007b1e:	f7ff ff31 	bl	8007984 <lv_obj_get_style>
 8007b22:	4602      	mov	r2, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7ff ffab 	bl	8007a80 <lv_obj_get_opa_scale>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f104 0010 	add.w	r0, r4, #16
 8007b32:	f001 fedb 	bl	80098ec <lv_draw_rect>
    return true;
 8007b36:	2001      	movs	r0, #1
 8007b38:	e7ee      	b.n	8007b18 <lv_obj_design+0x80>

08007b3a <lv_obj_is_protected>:
    return (obj->protect & prot) == 0 ? false : true;
 8007b3a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007b3e:	4219      	tst	r1, r3
}
 8007b40:	bf14      	ite	ne
 8007b42:	2001      	movne	r0, #1
 8007b44:	2000      	moveq	r0, #0
 8007b46:	4770      	bx	lr

08007b48 <lv_obj_get_signal_cb>:
}
 8007b48:	69c0      	ldr	r0, [r0, #28]
 8007b4a:	4770      	bx	lr

08007b4c <lv_obj_get_design_cb>:
}
 8007b4c:	6a00      	ldr	r0, [r0, #32]
 8007b4e:	4770      	bx	lr

08007b50 <lv_obj_get_ext_attr>:
}
 8007b50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007b52:	4770      	bx	lr

08007b54 <lv_obj_get_group>:
}
 8007b54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007b56:	4770      	bx	lr

08007b58 <lv_obj_is_focused>:
{
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	4604      	mov	r4, r0
    if(obj->group_p) {
 8007b5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8007b5e:	b120      	cbz	r0, 8007b6a <lv_obj_is_focused+0x12>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8007b60:	f7fe f96c 	bl	8005e3c <lv_group_get_focused>
 8007b64:	1a23      	subs	r3, r4, r0
 8007b66:	4258      	negs	r0, r3
 8007b68:	4158      	adcs	r0, r3
}
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007b6c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007b6e:	4d10      	ldr	r5, [pc, #64]	; (8007bb0 <lv_refr_vdb_flush+0x44>)
 8007b70:	6828      	ldr	r0, [r5, #0]
 8007b72:	f004 fc41 	bl	800c3f8 <lv_disp_get_buf>
 8007b76:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007b78:	6828      	ldr	r0, [r5, #0]
 8007b7a:	f004 fc52 	bl	800c422 <lv_disp_is_double_buf>
 8007b7e:	b110      	cbz	r0, 8007b86 <lv_refr_vdb_flush+0x1a>
        while(vdb->flushing)
 8007b80:	69a3      	ldr	r3, [r4, #24]
 8007b82:	07db      	lsls	r3, r3, #31
 8007b84:	d4fc      	bmi.n	8007b80 <lv_refr_vdb_flush+0x14>
            ;
    }

    vdb->flushing = 1;
 8007b86:	7e23      	ldrb	r3, [r4, #24]
    return disp_refr;
 8007b88:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8007b90:	68c3      	ldr	r3, [r0, #12]
 8007b92:	b11b      	cbz	r3, 8007b9c <lv_refr_vdb_flush+0x30>
 8007b94:	68a2      	ldr	r2, [r4, #8]
 8007b96:	f104 0110 	add.w	r1, r4, #16
 8007b9a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	b133      	cbz	r3, 8007bae <lv_refr_vdb_flush+0x42>
 8007ba0:	6862      	ldr	r2, [r4, #4]
 8007ba2:	b122      	cbz	r2, 8007bae <lv_refr_vdb_flush+0x42>
        if(vdb->buf_act == vdb->buf1)
 8007ba4:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 8007ba6:	428b      	cmp	r3, r1
 8007ba8:	bf08      	it	eq
 8007baa:	4613      	moveq	r3, r2
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	2001049c 	.word	0x2001049c

08007bb4 <lv_refr_get_top_obj>:
{
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	460c      	mov	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007bb8:	3110      	adds	r1, #16
{
 8007bba:	4606      	mov	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007bbc:	f004 fea0 	bl	800c900 <lv_area_is_in>
 8007bc0:	b908      	cbnz	r0, 8007bc6 <lv_refr_get_top_obj+0x12>
    lv_obj_t * found_p = NULL;
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007bc6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007bca:	06db      	lsls	r3, r3, #27
 8007bcc:	d4f9      	bmi.n	8007bc2 <lv_refr_get_top_obj+0xe>
        LV_LL_READ(obj->child_ll, i)
 8007bce:	1d27      	adds	r7, r4, #4
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f004 ffec 	bl	800cbae <lv_ll_get_head>
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	b998      	cbnz	r0, 8007c02 <lv_refr_get_top_obj+0x4e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff fed2 	bl	8007984 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007be0:	7b83      	ldrb	r3, [r0, #14]
 8007be2:	2bff      	cmp	r3, #255	; 0xff
 8007be4:	d1ed      	bne.n	8007bc2 <lv_refr_get_top_obj+0xe>
 8007be6:	6a23      	ldr	r3, [r4, #32]
 8007be8:	2202      	movs	r2, #2
 8007bea:	4631      	mov	r1, r6
 8007bec:	4620      	mov	r0, r4
 8007bee:	4798      	blx	r3
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d0e6      	beq.n	8007bc2 <lv_refr_get_top_obj+0xe>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7ff ff43 	bl	8007a80 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007bfa:	28ff      	cmp	r0, #255	; 0xff
 8007bfc:	d1e1      	bne.n	8007bc2 <lv_refr_get_top_obj+0xe>
 8007bfe:	4620      	mov	r0, r4
    return found_p;
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            found_p = lv_refr_get_top_obj(area_p, i);
 8007c02:	4629      	mov	r1, r5
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff ffd5 	bl	8007bb4 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007c0a:	b920      	cbnz	r0, 8007c16 <lv_refr_get_top_obj+0x62>
        LV_LL_READ(obj->child_ll, i)
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f004 ffd3 	bl	800cbba <lv_ll_get_next>
 8007c14:	e7df      	b.n	8007bd6 <lv_refr_get_top_obj+0x22>
}
 8007c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c18 <lv_refr_obj>:
{
 8007c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8007c1a:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8007c1e:	f016 0610 	ands.w	r6, r6, #16
{
 8007c22:	b08b      	sub	sp, #44	; 0x2c
 8007c24:	4604      	mov	r4, r0
 8007c26:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 8007c28:	d139      	bne.n	8007c9e <lv_refr_obj+0x86>
    lv_coord_t ext_size = obj->ext_draw_pad;
 8007c2a:	f9b0 5034 	ldrsh.w	r5, [r0, #52]	; 0x34
    lv_obj_get_coords(obj, &obj_area);
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	f7ff fe85 	bl	800793e <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007c34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007c38:	b2ab      	uxth	r3, r5
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8007c40:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8007c4a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007c4e:	441a      	add	r2, r3
 8007c50:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 8007c54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c58:	4639      	mov	r1, r7
    obj_area.y2 += ext_size;
 8007c5a:	4413      	add	r3, r2
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c5c:	a802      	add	r0, sp, #8
 8007c5e:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8007c60:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007c64:	f004 fdca 	bl	800c7fc <lv_area_intersect>
    if(union_ok != false) {
 8007c68:	b1c8      	cbz	r0, 8007c9e <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	6a23      	ldr	r3, [r4, #32]
 8007c6e:	a902      	add	r1, sp, #8
 8007c70:	4620      	mov	r0, r4
 8007c72:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff fe61 	bl	800793e <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007c7c:	aa04      	add	r2, sp, #16
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4668      	mov	r0, sp
 8007c82:	f004 fdbb 	bl	800c7fc <lv_area_intersect>
        if(union_ok != false) {
 8007c86:	b128      	cbz	r0, 8007c94 <lv_refr_obj+0x7c>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007c88:	1d26      	adds	r6, r4, #4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f004 ff92 	bl	800cbb4 <lv_ll_get_tail>
 8007c90:	4605      	mov	r5, r0
 8007c92:	b930      	cbnz	r0, 8007ca2 <lv_refr_obj+0x8a>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8007c94:	6a23      	ldr	r3, [r4, #32]
 8007c96:	2201      	movs	r2, #1
 8007c98:	a902      	add	r1, sp, #8
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4798      	blx	r3
}
 8007c9e:	b00b      	add	sp, #44	; 0x2c
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8007ca2:	a908      	add	r1, sp, #32
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7ff fe4a 	bl	800793e <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8007caa:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007cac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8007cb6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8007cc0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007cc4:	441a      	add	r2, r3
 8007cc6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 8007cca:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007cce:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
 8007cd0:	4413      	add	r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007cd2:	a806      	add	r0, sp, #24
 8007cd4:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8007cd6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007cda:	f004 fd8f 	bl	800c7fc <lv_area_intersect>
                if(union_ok) {
 8007cde:	b118      	cbz	r0, 8007ce8 <lv_refr_obj+0xd0>
                    lv_refr_obj(child_p, &mask_child);
 8007ce0:	a906      	add	r1, sp, #24
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff ff98 	bl	8007c18 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f004 ff6a 	bl	800cbc4 <lv_ll_get_prev>
 8007cf0:	e7ce      	b.n	8007c90 <lv_refr_obj+0x78>
	...

08007cf4 <lv_refr_obj_and_children>:
{
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	b920      	cbnz	r0, 8007d06 <lv_refr_obj_and_children+0x12>
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <lv_refr_obj_and_children+0x54>)
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	f7fd ff86 	bl	8005c10 <lv_disp_get_scr_act>
 8007d04:	4605      	mov	r5, r0
    lv_refr_obj(top_p, mask_p);
 8007d06:	4628      	mov	r0, r5
 8007d08:	4631      	mov	r1, r6
 8007d0a:	f7ff ff85 	bl	8007c18 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f7ff fde7 	bl	80078e2 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8007d14:	4604      	mov	r4, r0
    while(par != NULL) {
 8007d16:	b900      	cbnz	r0, 8007d1a <lv_refr_obj_and_children+0x26>
}
 8007d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8007d1a:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f004 ff50 	bl	800cbc4 <lv_ll_get_prev>
 8007d24:	4605      	mov	r5, r0
        while(i != NULL) {
 8007d26:	b948      	cbnz	r0, 8007d3c <lv_refr_obj_and_children+0x48>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8007d28:	6a23      	ldr	r3, [r4, #32]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7ff fdd5 	bl	80078e2 <lv_obj_get_parent>
 8007d38:	4625      	mov	r5, r4
 8007d3a:	e7eb      	b.n	8007d14 <lv_refr_obj_and_children+0x20>
            lv_refr_obj(i, mask_p);
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7ff ff6a 	bl	8007c18 <lv_refr_obj>
 8007d44:	e7ea      	b.n	8007d1c <lv_refr_obj_and_children+0x28>
 8007d46:	bf00      	nop
 8007d48:	2001049c 	.word	0x2001049c

08007d4c <lv_refr_area_part>:
{
 8007d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007d4e:	4c18      	ldr	r4, [pc, #96]	; (8007db0 <lv_refr_area_part+0x64>)
{
 8007d50:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007d52:	6820      	ldr	r0, [r4, #0]
 8007d54:	f004 fb50 	bl	800c3f8 <lv_disp_get_buf>
 8007d58:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	f004 fb61 	bl	800c422 <lv_disp_is_double_buf>
 8007d60:	b910      	cbnz	r0, 8007d68 <lv_refr_area_part+0x1c>
        while(vdb->flushing)
 8007d62:	69ab      	ldr	r3, [r5, #24]
 8007d64:	07db      	lsls	r3, r3, #31
 8007d66:	d4fc      	bmi.n	8007d62 <lv_refr_area_part+0x16>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007d68:	f105 0210 	add.w	r2, r5, #16
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4668      	mov	r0, sp
 8007d70:	f004 fd44 	bl	800c7fc <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	f7fd ff4b 	bl	8005c10 <lv_disp_get_scr_act>
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	4668      	mov	r0, sp
 8007d7e:	f7ff ff19 	bl	8007bb4 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8007d82:	4669      	mov	r1, sp
 8007d84:	f7ff ffb6 	bl	8007cf4 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	f7fd ff52 	bl	8005c32 <lv_disp_get_layer_top>
 8007d8e:	4669      	mov	r1, sp
 8007d90:	f7ff ffb0 	bl	8007cf4 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	f7fd ff53 	bl	8005c40 <lv_disp_get_layer_sys>
 8007d9a:	4669      	mov	r1, sp
 8007d9c:	f7ff ffaa 	bl	8007cf4 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	f004 fb46 	bl	800c432 <lv_disp_is_true_double_buf>
 8007da6:	b908      	cbnz	r0, 8007dac <lv_refr_area_part+0x60>
        lv_refr_vdb_flush();
 8007da8:	f7ff fee0 	bl	8007b6c <lv_refr_vdb_flush>
}
 8007dac:	b002      	add	sp, #8
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	2001049c 	.word	0x2001049c

08007db4 <lv_refr_init>:
{
 8007db4:	4770      	bx	lr

08007db6 <lv_inv_area>:
{
 8007db6:	b530      	push	{r4, r5, lr}
 8007db8:	460d      	mov	r5, r1
 8007dba:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	b920      	cbnz	r0, 8007dca <lv_inv_area+0x14>
 8007dc0:	f004 fae0 	bl	800c384 <lv_disp_get_default>
    if(!disp) return;
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d044      	beq.n	8007e54 <lv_inv_area+0x9e>
    if(area_p == NULL) {
 8007dca:	b935      	cbnz	r5, 8007dda <lv_inv_area+0x24>
        disp->inv_p = 0;
 8007dcc:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 8007dd0:	f365 0309 	bfi	r3, r5, #0, #10
        disp->inv_p++;
 8007dd4:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 8007dd8:	e03c      	b.n	8007e54 <lv_inv_area+0x9e>
    scr_area.x1 = 0;
 8007dda:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007ddc:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 8007dde:	f8ad 3000 	strh.w	r3, [sp]
    scr_area.y1 = 0;
 8007de2:	f8ad 3002 	strh.w	r3, [sp, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007de6:	f004 fad3 	bl	800c390 <lv_disp_get_hor_res>
 8007dea:	3801      	subs	r0, #1
 8007dec:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007df0:	4620      	mov	r0, r4
 8007df2:	f004 fadf 	bl	800c3b4 <lv_disp_get_ver_res>
 8007df6:	3801      	subs	r0, #1
 8007df8:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8007dfc:	466a      	mov	r2, sp
 8007dfe:	4629      	mov	r1, r5
 8007e00:	a802      	add	r0, sp, #8
 8007e02:	f004 fcfb 	bl	800c7fc <lv_area_intersect>
    if(suc != false) {
 8007e06:	b328      	cbz	r0, 8007e54 <lv_inv_area+0x9e>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	b113      	cbz	r3, 8007e12 <lv_inv_area+0x5c>
 8007e0c:	a902      	add	r1, sp, #8
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4798      	blx	r3
{
 8007e12:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 8007e14:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 8007e18:	b2a9      	uxth	r1, r5
 8007e1a:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	db0f      	blt.n	8007e42 <lv_inv_area+0x8c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007e22:	2b1f      	cmp	r3, #31
 8007e24:	dc18      	bgt.n	8007e58 <lv_inv_area+0xa2>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007e2c:	ab02      	add	r3, sp, #8
 8007e2e:	cb03      	ldmia	r3!, {r0, r1}
 8007e30:	18a5      	adds	r5, r4, r2
 8007e32:	50a0      	str	r0, [r4, r2]
 8007e34:	6069      	str	r1, [r5, #4]
        disp->inv_p++;
 8007e36:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	f362 0309 	bfi	r3, r2, #0, #10
 8007e40:	e7c8      	b.n	8007dd4 <lv_inv_area+0x1e>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8007e42:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007e46:	3144      	adds	r1, #68	; 0x44
 8007e48:	a802      	add	r0, sp, #8
 8007e4a:	f004 fd59 	bl	800c900 <lv_area_is_in>
 8007e4e:	3501      	adds	r5, #1
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0df      	beq.n	8007e14 <lv_inv_area+0x5e>
}
 8007e54:	b005      	add	sp, #20
 8007e56:	bd30      	pop	{r4, r5, pc}
            disp->inv_p = 0;
 8007e58:	4613      	mov	r3, r2
 8007e5a:	f36f 0309 	bfc	r3, #0, #10
 8007e5e:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
 8007e62:	466b      	mov	r3, sp
 8007e64:	cb03      	ldmia	r3!, {r0, r1}
 8007e66:	6460      	str	r0, [r4, #68]	; 0x44
 8007e68:	64a1      	str	r1, [r4, #72]	; 0x48
 8007e6a:	e7e4      	b.n	8007e36 <lv_inv_area+0x80>

08007e6c <lv_refr_get_disp_refreshing>:
}
 8007e6c:	4b01      	ldr	r3, [pc, #4]	; (8007e74 <lv_refr_get_disp_refreshing+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2001049c 	.word	0x2001049c

08007e78 <lv_disp_refr_task>:
{
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	b089      	sub	sp, #36	; 0x24
 8007e7e:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 8007e80:	f004 fb60 	bl	800c544 <lv_tick_get>
    disp_refr = task->user_data;
 8007e84:	4bbe      	ldr	r3, [pc, #760]	; (8008180 <lv_disp_refr_task+0x308>)
 8007e86:	68e2      	ldr	r2, [r4, #12]
    uint32_t start = lv_tick_get();
 8007e88:	9002      	str	r0, [sp, #8]
    disp_refr = task->user_data;
 8007e8a:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	469a      	mov	sl, r3
                disp_refr->inv_area_joined[join_from] = 1;
 8007e90:	2701      	movs	r7, #1
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007e92:	f8da 3000 	ldr.w	r3, [sl]
 8007e96:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
 8007e9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007e9e:	4296      	cmp	r6, r2
 8007ea0:	d330      	bcc.n	8007f04 <lv_disp_refr_task+0x8c>
    px_num = 0;
 8007ea2:	4bb8      	ldr	r3, [pc, #736]	; (8008184 <lv_disp_refr_task+0x30c>)
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007ea4:	9301      	str	r3, [sp, #4]
    px_num = 0;
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	601c      	str	r4, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007eaa:	f8da 7000 	ldr.w	r7, [sl]
 8007eae:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007eb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007eb6:	4294      	cmp	r4, r2
 8007eb8:	d36c      	bcc.n	8007f94 <lv_disp_refr_task+0x11c>
    if(disp_refr->inv_p != 0) {
 8007eba:	b1f2      	cbz	r2, 8007efa <lv_disp_refr_task+0x82>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f004 fab8 	bl	800c432 <lv_disp_is_true_double_buf>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f040 8134 	bne.w	8008130 <lv_disp_refr_task+0x2b8>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007ec8:	f8da 4000 	ldr.w	r4, [sl]
 8007ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8007ed6:	f008 fc8c 	bl	80107f2 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007eda:	2220      	movs	r2, #32
 8007edc:	2100      	movs	r1, #0
 8007ede:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 8007ee2:	f008 fc86 	bl	80107f2 <memset>
        disp_refr->inv_p = 0;
 8007ee6:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 8007eea:	69a5      	ldr	r5, [r4, #24]
        disp_refr->inv_p = 0;
 8007eec:	f36f 0309 	bfc	r3, #0, #10
 8007ef0:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
        if(disp_refr->driver.monitor_cb) {
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	f040 816a 	bne.w	80081ce <lv_disp_refr_task+0x356>
    lv_draw_free_buf();
 8007efa:	f000 fbef 	bl	80086dc <lv_draw_free_buf>
}
 8007efe:	b009      	add	sp, #36	; 0x24
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007f04:	4433      	add	r3, r6
 8007f06:	f893 4144 	ldrb.w	r4, [r3, #324]	; 0x144
 8007f0a:	b94c      	cbnz	r4, 8007f20 <lv_disp_refr_task+0xa8>
 8007f0c:	00f5      	lsls	r5, r6, #3
 8007f0e:	3544      	adds	r5, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007f10:	f8da 0000 	ldr.w	r0, [sl]
 8007f14:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 8007f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d301      	bcc.n	8007f24 <lv_disp_refr_task+0xac>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7b6      	b.n	8007e92 <lv_disp_refr_task+0x1a>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8007f24:	1903      	adds	r3, r0, r4
 8007f26:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8007f2a:	bb8b      	cbnz	r3, 8007f90 <lv_disp_refr_task+0x118>
 8007f2c:	42a6      	cmp	r6, r4
 8007f2e:	d02f      	beq.n	8007f90 <lv_disp_refr_task+0x118>
 8007f30:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007f34:	f108 0844 	add.w	r8, r8, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007f38:	eb00 0108 	add.w	r1, r0, r8
 8007f3c:	4428      	add	r0, r5
 8007f3e:	f004 fcc2 	bl	800c8c6 <lv_area_is_on>
 8007f42:	b328      	cbz	r0, 8007f90 <lv_disp_refr_task+0x118>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007f44:	f8da 1000 	ldr.w	r1, [sl]
 8007f48:	a806      	add	r0, sp, #24
 8007f4a:	eb01 0208 	add.w	r2, r1, r8
 8007f4e:	4429      	add	r1, r5
 8007f50:	f004 fc7e 	bl	800c850 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007f54:	a806      	add	r0, sp, #24
 8007f56:	f004 fc43 	bl	800c7e0 <lv_area_get_size>
 8007f5a:	4683      	mov	fp, r0
 8007f5c:	f8da 0000 	ldr.w	r0, [sl]
 8007f60:	4428      	add	r0, r5
 8007f62:	f004 fc3d 	bl	800c7e0 <lv_area_get_size>
 8007f66:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007f68:	f8da 0000 	ldr.w	r0, [sl]
 8007f6c:	4440      	add	r0, r8
 8007f6e:	f004 fc37 	bl	800c7e0 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007f72:	4448      	add	r0, r9
 8007f74:	4583      	cmp	fp, r0
 8007f76:	d20b      	bcs.n	8007f90 <lv_disp_refr_task+0x118>
 8007f78:	aa06      	add	r2, sp, #24
 8007f7a:	ca03      	ldmia	r2!, {r0, r1}
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007f7c:	f8da 3000 	ldr.w	r3, [sl]
 8007f80:	5158      	str	r0, [r3, r5]
 8007f82:	eb03 0e05 	add.w	lr, r3, r5
                disp_refr->inv_area_joined[join_from] = 1;
 8007f86:	4423      	add	r3, r4
 8007f88:	f8ce 1004 	str.w	r1, [lr, #4]
 8007f8c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007f90:	3401      	adds	r4, #1
 8007f92:	e7bd      	b.n	8007f10 <lv_disp_refr_task+0x98>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007f94:	193b      	adds	r3, r7, r4
 8007f96:	f893 5144 	ldrb.w	r5, [r3, #324]	; 0x144
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	f040 8084 	bne.w	80080a8 <lv_disp_refr_task+0x230>
 8007fa0:	00e3      	lsls	r3, r4, #3
 8007fa2:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	3344      	adds	r3, #68	; 0x44
 8007fa8:	9300      	str	r3, [sp, #0]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8007faa:	eb07 0803 	add.w	r8, r7, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007fae:	f004 fa40 	bl	800c432 <lv_disp_is_true_double_buf>
 8007fb2:	b1b0      	cbz	r0, 8007fe2 <lv_disp_refr_task+0x16a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007fb4:	f8da 0000 	ldr.w	r0, [sl]
 8007fb8:	f004 fa1e 	bl	800c3f8 <lv_disp_get_buf>
 8007fbc:	4606      	mov	r6, r0
        vdb->area.x1        = 0;
 8007fbe:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007fc0:	f8da 0000 	ldr.w	r0, [sl]
 8007fc4:	f004 f9e4 	bl	800c390 <lv_disp_get_hor_res>
 8007fc8:	3801      	subs	r0, #1
 8007fca:	82b0      	strh	r0, [r6, #20]
        vdb->area.y1        = 0;
 8007fcc:	8275      	strh	r5, [r6, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007fce:	f8da 0000 	ldr.w	r0, [sl]
 8007fd2:	f004 f9ef 	bl	800c3b4 <lv_disp_get_ver_res>
 8007fd6:	3801      	subs	r0, #1
 8007fd8:	82f0      	strh	r0, [r6, #22]
            lv_refr_area_part(area_p);
 8007fda:	4640      	mov	r0, r8
 8007fdc:	f7ff feb6 	bl	8007d4c <lv_refr_area_part>
 8007fe0:	e055      	b.n	800808e <lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007fe2:	f8da 0000 	ldr.w	r0, [sl]
 8007fe6:	f004 fa07 	bl	800c3f8 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8007fea:	9b00      	ldr	r3, [sp, #0]
 8007fec:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 8007ff0:	5afe      	ldrh	r6, [r7, r3]
 8007ff2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
    return area_p->y2 - area_p->y1 + 1;
 8007ff6:	f8b8 b002 	ldrh.w	fp, [r8, #2]
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	4605      	mov	r5, r0
    return area_p->x2 - area_p->x1 + 1;
 8007ffe:	f109 0901 	add.w	r9, r9, #1
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8008002:	f8da 0000 	ldr.w	r0, [sl]
 8008006:	eba9 0906 	sub.w	r9, r9, r6
    return area_p->y2 - area_p->y1 + 1;
 800800a:	1c5e      	adds	r6, r3, #1
 800800c:	f004 f9d2 	bl	800c3b4 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	eba6 060b 	sub.w	r6, r6, fp
 8008016:	4283      	cmp	r3, r0
    return area_p->x2 - area_p->x1 + 1;
 8008018:	fa0f f989 	sxth.w	r9, r9
    return area_p->y2 - area_p->y1 + 1;
 800801c:	fa0f fb86 	sxth.w	fp, r6
 8008020:	db44      	blt.n	80080ac <lv_disp_refr_task+0x234>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8008022:	f8da 0000 	ldr.w	r0, [sl]
 8008026:	f004 f9c5 	bl	800c3b4 <lv_disp_get_ver_res>
 800802a:	3801      	subs	r0, #1
 800802c:	b203      	sxth	r3, r0
        if(disp_refr->driver.rounder_cb) {
 800802e:	f8da 2000 	ldr.w	r2, [sl]
        int32_t max_row = (uint32_t)vdb->size / w;
 8008032:	68ee      	ldr	r6, [r5, #12]
        if(disp_refr->driver.rounder_cb) {
 8008034:	6912      	ldr	r2, [r2, #16]
        int32_t max_row = (uint32_t)vdb->size / w;
 8008036:	fbb6 f6f9 	udiv	r6, r6, r9
 800803a:	455e      	cmp	r6, fp
 800803c:	bfa8      	it	ge
 800803e:	465e      	movge	r6, fp
        if(disp_refr->driver.rounder_cb) {
 8008040:	2a00      	cmp	r2, #0
 8008042:	d03c      	beq.n	80080be <lv_disp_refr_task+0x246>
            tmp.x1 = 0;
 8008044:	f04f 0200 	mov.w	r2, #0
            lv_coord_t y_tmp = max_row - 1;
 8008048:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
            tmp.x1 = 0;
 800804c:	f8ad 2018 	strh.w	r2, [sp, #24]
            tmp.x2 = 0;
 8008050:	f8ad 201c 	strh.w	r2, [sp, #28]
            tmp.y1 = 0;
 8008054:	f8ad 201a 	strh.w	r2, [sp, #26]
            lv_coord_t y_tmp = max_row - 1;
 8008058:	fa0f f989 	sxth.w	r9, r9
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800805c:	f8da 0000 	ldr.w	r0, [sl]
                tmp.y2 = y_tmp;
 8008060:	f8ad 901e 	strh.w	r9, [sp, #30]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8008064:	6902      	ldr	r2, [r0, #16]
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	a906      	add	r1, sp, #24
 800806a:	4790      	blx	r2
 800806c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8008070:	f8bd 201a 	ldrh.w	r2, [sp, #26]
                if(lv_area_get_height(&tmp) <= max_row) break;
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	3101      	adds	r1, #1
 8008078:	1a8a      	subs	r2, r1, r2
 800807a:	b212      	sxth	r2, r2
 800807c:	42b2      	cmp	r2, r6
 800807e:	dd1a      	ble.n	80080b6 <lv_disp_refr_task+0x23e>
 8008080:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008084:	fa0f f989 	sxth.w	r9, r9
            } while(y_tmp != 0);
 8008088:	f1b9 0f00 	cmp.w	r9, #0
 800808c:	d1e6      	bne.n	800805c <lv_disp_refr_task+0x1e4>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800808e:	f8da 0000 	ldr.w	r0, [sl]
 8008092:	6983      	ldr	r3, [r0, #24]
 8008094:	b143      	cbz	r3, 80080a8 <lv_disp_refr_task+0x230>
 8008096:	9b00      	ldr	r3, [sp, #0]
 8008098:	4418      	add	r0, r3
 800809a:	f004 fba1 	bl	800c7e0 <lv_area_get_size>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4418      	add	r0, r3
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80080a8:	3401      	adds	r4, #1
 80080aa:	e6fe      	b.n	8007eaa <lv_disp_refr_task+0x32>
        lv_coord_t y2 =
 80080ac:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
 80080b0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80080b4:	e7bb      	b.n	800802e <lv_disp_refr_task+0x1b6>
            if(y_tmp == 0) {
 80080b6:	f1b9 0f00 	cmp.w	r9, #0
 80080ba:	d0e8      	beq.n	800808e <lv_disp_refr_task+0x216>
                max_row = tmp.y2 + 1;
 80080bc:	460e      	mov	r6, r1
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	4417      	add	r7, r2
            vdb->area.y2 = row + max_row - 1;
 80080c2:	b2b2      	uxth	r2, r6
 80080c4:	1e51      	subs	r1, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80080c6:	f9b7 9046 	ldrsh.w	r9, [r7, #70]	; 0x46
 80080ca:	9103      	str	r1, [sp, #12]
        lv_coord_t row_last = 0;
 80080cc:	f04f 0b00 	mov.w	fp, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80080d0:	eb09 0106 	add.w	r1, r9, r6
 80080d4:	3901      	subs	r1, #1
 80080d6:	4299      	cmp	r1, r3
 80080d8:	dd0b      	ble.n	80080f2 <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 80080da:	455b      	cmp	r3, fp
 80080dc:	d0d7      	beq.n	800808e <lv_disp_refr_task+0x216>
            vdb->area.x1 = area_p->x1;
 80080de:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80080e2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
 80080e4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80080e8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
 80080ea:	f8a5 9012 	strh.w	r9, [r5, #18]
            vdb->area.y2 = y2;
 80080ee:	82eb      	strh	r3, [r5, #22]
 80080f0:	e773      	b.n	8007fda <lv_disp_refr_task+0x162>
            vdb->area.x1 = area_p->x1;
 80080f2:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 80080f6:	9205      	str	r2, [sp, #20]
 80080f8:	8229      	strh	r1, [r5, #16]
 80080fa:	9a03      	ldr	r2, [sp, #12]
            vdb->area.x2 = area_p->x2;
 80080fc:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
            vdb->area.y1 = row;
 8008100:	f8a5 9012 	strh.w	r9, [r5, #18]
 8008104:	fa1f f989 	uxth.w	r9, r9
 8008108:	eb09 0b02 	add.w	fp, r9, r2
 800810c:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 8008110:	459b      	cmp	fp, r3
 8008112:	bfa8      	it	ge
 8008114:	469b      	movge	fp, r3
            vdb->area.x2 = area_p->x2;
 8008116:	82a9      	strh	r1, [r5, #20]
            vdb->area.y2 = row + max_row - 1;
 8008118:	f8a5 b016 	strh.w	fp, [r5, #22]
            lv_refr_area_part(area_p);
 800811c:	4640      	mov	r0, r8
            vdb->area.y2 = row + max_row - 1;
 800811e:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 8008120:	f7ff fe14 	bl	8007d4c <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008124:	9a05      	ldr	r2, [sp, #20]
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	4491      	add	r9, r2
 800812a:	fa0f f989 	sxth.w	r9, r9
 800812e:	e7cf      	b.n	80080d0 <lv_disp_refr_task+0x258>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8008130:	f8da 0000 	ldr.w	r0, [sl]
 8008134:	f004 f960 	bl	800c3f8 <lv_disp_get_buf>
 8008138:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
 800813a:	f7ff fd17 	bl	8007b6c <lv_refr_vdb_flush>
            while(vdb->flushing)
 800813e:	69a3      	ldr	r3, [r4, #24]
 8008140:	07db      	lsls	r3, r3, #31
 8008142:	d4fc      	bmi.n	800813e <lv_disp_refr_task+0x2c6>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8008144:	68a3      	ldr	r3, [r4, #8]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8008146:	6827      	ldr	r7, [r4, #0]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008148:	f8da 0000 	ldr.w	r0, [sl]
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800814c:	9300      	str	r3, [sp, #0]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800814e:	42bb      	cmp	r3, r7
 8008150:	bf08      	it	eq
 8008152:	6867      	ldreq	r7, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008154:	f004 f91c 	bl	800c390 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008158:	2600      	movs	r6, #0
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800815a:	4681      	mov	r9, r0
                        start_offs += hres * sizeof(lv_color_t);
 800815c:	ea4f 0b80 	mov.w	fp, r0, lsl #2
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008160:	f8da 1000 	ldr.w	r1, [sl]
 8008164:	f8b1 3164 	ldrh.w	r3, [r1, #356]	; 0x164
 8008168:	b2b2      	uxth	r2, r6
 800816a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800816e:	429a      	cmp	r2, r3
 8008170:	f6bf aeaa 	bge.w	8007ec8 <lv_disp_refr_task+0x50>
                if(disp_refr->inv_area_joined[a] == 0) {
 8008174:	188b      	adds	r3, r1, r2
 8008176:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800817a:	b12b      	cbz	r3, 8008188 <lv_disp_refr_task+0x310>
 800817c:	3601      	adds	r6, #1
 800817e:	e7ef      	b.n	8008160 <lv_disp_refr_task+0x2e8>
 8008180:	2001049c 	.word	0x2001049c
 8008184:	200104a0 	.word	0x200104a0
 8008188:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800818c:	f9b8 3044 	ldrsh.w	r3, [r8, #68]	; 0x44
 8008190:	f9b8 5046 	ldrsh.w	r5, [r8, #70]	; 0x46
    return area_p->x2 - area_p->x1 + 1;
 8008194:	f8b8 2048 	ldrh.w	r2, [r8, #72]	; 0x48
 8008198:	fb09 3405 	mla	r4, r9, r5, r3
 800819c:	f1c3 0301 	rsb	r3, r3, #1
 80081a0:	4413      	add	r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 80081a2:	b21b      	sxth	r3, r3
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	9b00      	ldr	r3, [sp, #0]
                    uint32_t start_offs =
 80081aa:	00a4      	lsls	r4, r4, #2
 80081ac:	4423      	add	r3, r4
 80081ae:	443c      	add	r4, r7
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 80081b0:	f9b8 204a 	ldrsh.w	r2, [r8, #74]	; 0x4a
 80081b4:	42aa      	cmp	r2, r5
 80081b6:	dbe1      	blt.n	800817c <lv_disp_refr_task+0x304>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80081b8:	4621      	mov	r1, r4
 80081ba:	4618      	mov	r0, r3
 80081bc:	9a01      	ldr	r2, [sp, #4]
 80081be:	f008 fb0d 	bl	80107dc <memcpy>
 80081c2:	3501      	adds	r5, #1
 80081c4:	4603      	mov	r3, r0
 80081c6:	b22d      	sxth	r5, r5
 80081c8:	445b      	add	r3, fp
 80081ca:	445c      	add	r4, fp
 80081cc:	e7f0      	b.n	80081b0 <lv_disp_refr_task+0x338>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 80081ce:	9802      	ldr	r0, [sp, #8]
 80081d0:	f004 f9c6 	bl	800c560 <lv_tick_elaps>
 80081d4:	4b02      	ldr	r3, [pc, #8]	; (80081e0 <lv_disp_refr_task+0x368>)
 80081d6:	4601      	mov	r1, r0
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4620      	mov	r0, r4
 80081dc:	47a8      	blx	r5
 80081de:	e68c      	b.n	8007efa <lv_disp_refr_task+0x82>
 80081e0:	200104a0 	.word	0x200104a0

080081e4 <lv_style_copy>:
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
    memcpy(dest, src, sizeof(lv_style_t));
 80081e4:	2250      	movs	r2, #80	; 0x50
 80081e6:	f008 baf9 	b.w	80107dc <memcpy>
	...

080081ec <lv_style_init>:
{
 80081ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_scr.glass               = 0;
 80081f0:	49e9      	ldr	r1, [pc, #932]	; (8008598 <lv_style_init+0x3ac>)
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80081f2:	f8df 93c8 	ldr.w	r9, [pc, #968]	; 80085bc <lv_style_init+0x3d0>
    lv_style_scr.glass               = 0;
 80081f6:	780b      	ldrb	r3, [r1, #0]
 80081f8:	f36f 0300 	bfc	r3, #0, #1
 80081fc:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 80081fe:	230f      	movs	r3, #15
 8008200:	758b      	strb	r3, [r1, #22]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8008202:	f04f 0301 	mov.w	r3, #1
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008206:	24ff      	movs	r4, #255	; 0xff
    lv_style_scr.body.radius         = 0;
 8008208:	2600      	movs	r6, #0
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800820a:	2780      	movs	r7, #128	; 0x80
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800820c:	2505      	movs	r5, #5
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 800820e:	778b      	strb	r3, [r1, #30]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008210:	2330      	movs	r3, #48	; 0x30
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008212:	738c      	strb	r4, [r1, #14]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8008214:	710c      	strb	r4, [r1, #4]
 8008216:	714c      	strb	r4, [r1, #5]
 8008218:	718c      	strb	r4, [r1, #6]
 800821a:	71cc      	strb	r4, [r1, #7]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 800821c:	720c      	strb	r4, [r1, #8]
 800821e:	724c      	strb	r4, [r1, #9]
 8008220:	728c      	strb	r4, [r1, #10]
 8008222:	72cc      	strb	r4, [r1, #11]
    lv_style_scr.body.radius         = 0;
 8008224:	818e      	strh	r6, [r1, #12]
    lv_style_scr.body.padding.left   = 0;
 8008226:	848e      	strh	r6, [r1, #36]	; 0x24
    lv_style_scr.body.padding.right  = 0;
 8008228:	84ce      	strh	r6, [r1, #38]	; 0x26
    lv_style_scr.body.padding.top    = 0;
 800822a:	840e      	strh	r6, [r1, #32]
    lv_style_scr.body.padding.bottom = 0;
 800822c:	844e      	strh	r6, [r1, #34]	; 0x22
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800822e:	850d      	strh	r5, [r1, #40]	; 0x28
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008230:	740e      	strb	r6, [r1, #16]
 8008232:	744e      	strb	r6, [r1, #17]
 8008234:	748e      	strb	r6, [r1, #18]
 8008236:	74cc      	strb	r4, [r1, #19]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8008238:	75cc      	strb	r4, [r1, #23]
    lv_style_scr.body.border.width = 0;
 800823a:	828e      	strh	r6, [r1, #20]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 800823c:	760f      	strb	r7, [r1, #24]
 800823e:	764f      	strb	r7, [r1, #25]
 8008240:	768f      	strb	r7, [r1, #26]
 8008242:	76cc      	strb	r4, [r1, #27]
    lv_style_scr.body.shadow.width = 0;
 8008244:	838e      	strh	r6, [r1, #28]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008246:	f881 403c 	strb.w	r4, [r1, #60]	; 0x3c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800824a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_style_scr.line.rounded = 0;
 800824e:	f891 004f 	ldrb.w	r0, [r1, #79]	; 0x4f
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008252:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8008256:	f04f 0a20 	mov.w	sl, #32
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800825a:	f04f 08d8 	mov.w	r8, #216	; 0xd8
 800825e:	2296      	movs	r2, #150	; 0x96
 8008260:	f04f 0b55 	mov.w	fp, #85	; 0x55
    lv_style_scr.line.rounded = 0;
 8008264:	f366 0000 	bfi	r0, r6, #0, #1
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008268:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800826c:	4bcb      	ldr	r3, [pc, #812]	; (800859c <lv_style_init+0x3b0>)
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800826e:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008272:	f881 402f 	strb.w	r4, [r1, #47]	; 0x2f
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8008276:	f881 8030 	strb.w	r8, [r1, #48]	; 0x30
 800827a:	f881 b032 	strb.w	fp, [r1, #50]	; 0x32
 800827e:	f881 4033 	strb.w	r4, [r1, #51]	; 0x33
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8008282:	634b      	str	r3, [r1, #52]	; 0x34
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8008284:	f881 a040 	strb.w	sl, [r1, #64]	; 0x40
    lv_style_scr.text.line_space   = 2;
 8008288:	f04f 0302 	mov.w	r3, #2
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800828c:	f881 a041 	strb.w	sl, [r1, #65]	; 0x41
 8008290:	f881 a042 	strb.w	sl, [r1, #66]	; 0x42
 8008294:	f881 4043 	strb.w	r4, [r1, #67]	; 0x43
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8008298:	f881 a048 	strb.w	sl, [r1, #72]	; 0x48
 800829c:	f881 a049 	strb.w	sl, [r1, #73]	; 0x49
 80082a0:	f881 a04a 	strb.w	sl, [r1, #74]	; 0x4a
 80082a4:	f881 404b 	strb.w	r4, [r1, #75]	; 0x4b
    lv_style_scr.line.rounded = 0;
 80082a8:	f881 004f 	strb.w	r0, [r1, #79]	; 0x4f
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80082ac:	4648      	mov	r0, r9
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 80082ae:	9200      	str	r2, [sp, #0]
    lv_style_scr.text.line_space   = 2;
 80082b0:	874b      	strh	r3, [r1, #58]	; 0x3a
    lv_style_scr.line.width   = 2;
 80082b2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
    lv_style_scr.text.letter_space = 0;
 80082b6:	870e      	strh	r6, [r1, #56]	; 0x38
    lv_style_scr.image.opa     = LV_OPA_COVER;
 80082b8:	f881 4045 	strb.w	r4, [r1, #69]	; 0x45
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 80082bc:	f881 6044 	strb.w	r6, [r1, #68]	; 0x44
    lv_style_scr.line.opa     = LV_OPA_COVER;
 80082c0:	f881 404e 	strb.w	r4, [r1, #78]	; 0x4e
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80082c4:	f7ff ff8e 	bl	80081e4 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 80082c8:	f8a9 5024 	strh.w	r5, [r9, #36]	; 0x24
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 80082cc:	f8a9 5026 	strh.w	r5, [r9, #38]	; 0x26
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 80082d0:	f8a9 5020 	strh.w	r5, [r9, #32]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 80082d4:	f8a9 5022 	strh.w	r5, [r9, #34]	; 0x22
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80082d8:	4db1      	ldr	r5, [pc, #708]	; (80085a0 <lv_style_init+0x3b4>)
 80082da:	4649      	mov	r1, r9
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff ff81 	bl	80081e4 <lv_style_copy>
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 80082e2:	9a00      	ldr	r2, [sp, #0]
 80082e4:	f885 8004 	strb.w	r8, [r5, #4]
 80082e8:	f885 b006 	strb.w	fp, [r5, #6]
 80082ec:	71ec      	strb	r4, [r5, #7]
 80082ee:	716a      	strb	r2, [r5, #5]
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80082f0:	21f0      	movs	r1, #240	; 0xf0
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 80082f2:	686a      	ldr	r2, [r5, #4]
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80082f4:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
 80082f8:	f885 102d 	strb.w	r1, [r5, #45]	; 0x2d
 80082fc:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
 8008300:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8008304:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
 8008308:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
 800830c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
 8008310:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8008314:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
 8008318:	f885 1049 	strb.w	r1, [r5, #73]	; 0x49
 800831c:	f885 104a 	strb.w	r1, [r5, #74]	; 0x4a
 8008320:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8008324:	60aa      	str	r2, [r5, #8]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8008326:	4d9f      	ldr	r5, [pc, #636]	; (80085a4 <lv_style_init+0x3b8>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008328:	f8df b294 	ldr.w	fp, [pc, #660]	; 80085c0 <lv_style_init+0x3d4>
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 800832c:	4649      	mov	r1, r9
 800832e:	4628      	mov	r0, r5
 8008330:	f7ff ff58 	bl	80081e4 <lv_style_copy>
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8008334:	2140      	movs	r1, #64	; 0x40
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008336:	f04f 0302 	mov.w	r3, #2
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800833a:	22c0      	movs	r2, #192	; 0xc0
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 800833c:	f885 a02c 	strb.w	sl, [r5, #44]	; 0x2c
 8008340:	f885 a02d 	strb.w	sl, [r5, #45]	; 0x2d
 8008344:	f885 a02e 	strb.w	sl, [r5, #46]	; 0x2e
 8008348:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800834c:	f885 a040 	strb.w	sl, [r5, #64]	; 0x40
 8008350:	f885 a041 	strb.w	sl, [r5, #65]	; 0x41
 8008354:	f885 a042 	strb.w	sl, [r5, #66]	; 0x42
 8008358:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 800835c:	f885 a048 	strb.w	sl, [r5, #72]	; 0x48
 8008360:	f885 a049 	strb.w	sl, [r5, #73]	; 0x49
 8008364:	f885 a04a 	strb.w	sl, [r5, #74]	; 0x4a
 8008368:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
    lv_style_pretty.body.radius       = LV_DPI / 15;
 800836c:	f04f 0a06 	mov.w	sl, #6
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8008370:	7429      	strb	r1, [r5, #16]
 8008372:	7469      	strb	r1, [r5, #17]
 8008374:	74a9      	strb	r1, [r5, #18]
 8008376:	74ec      	strb	r4, [r5, #19]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008378:	82ab      	strh	r3, [r5, #20]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800837a:	4629      	mov	r1, r5
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800837c:	f04f 034c 	mov.w	r3, #76	; 0x4c
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008380:	4658      	mov	r0, fp
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8008382:	712c      	strb	r4, [r5, #4]
 8008384:	716c      	strb	r4, [r5, #5]
 8008386:	71ac      	strb	r4, [r5, #6]
 8008388:	71ec      	strb	r4, [r5, #7]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 800838a:	722a      	strb	r2, [r5, #8]
 800838c:	726a      	strb	r2, [r5, #9]
 800838e:	72aa      	strb	r2, [r5, #10]
 8008390:	9200      	str	r2, [sp, #0]
 8008392:	72ec      	strb	r4, [r5, #11]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8008394:	f8a5 a00c 	strh.w	sl, [r5, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8008398:	75eb      	strb	r3, [r5, #23]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800839a:	f7ff ff23 	bl	80081e4 <lv_style_copy>
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800839e:	9a00      	ldr	r2, [sp, #0]
 80083a0:	f88b 2048 	strb.w	r2, [fp, #72]	; 0x48
 80083a4:	f88b 2049 	strb.w	r2, [fp, #73]	; 0x49
 80083a8:	f88b 204a 	strb.w	r2, [fp, #74]	; 0x4a
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80083ac:	22c7      	movs	r2, #199	; 0xc7
 80083ae:	f88b 2004 	strb.w	r2, [fp, #4]
 80083b2:	229a      	movs	r2, #154	; 0x9a
 80083b4:	f88b 2005 	strb.w	r2, [fp, #5]
 80083b8:	226b      	movs	r2, #107	; 0x6b
 80083ba:	f88b 2006 	strb.w	r2, [fp, #6]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80083be:	228b      	movs	r2, #139	; 0x8b
 80083c0:	f88b 2008 	strb.w	r2, [fp, #8]
 80083c4:	2259      	movs	r2, #89	; 0x59
 80083c6:	f88b 2009 	strb.w	r2, [fp, #9]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80083ca:	2242      	movs	r2, #66	; 0x42
 80083cc:	f88b 2010 	strb.w	r2, [fp, #16]
 80083d0:	222c      	movs	r2, #44	; 0x2c
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 80083d2:	21e0      	movs	r1, #224	; 0xe0
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80083d4:	232b      	movs	r3, #43	; 0x2b
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80083d6:	f88b 2011 	strb.w	r2, [fp, #17]
 80083da:	2215      	movs	r2, #21
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80083dc:	f88b 300a 	strb.w	r3, [fp, #10]
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 80083e0:	f88b 102c 	strb.w	r1, [fp, #44]	; 0x2c
 80083e4:	f88b 102d 	strb.w	r1, [fp, #45]	; 0x2d
 80083e8:	f88b 102e 	strb.w	r1, [fp, #46]	; 0x2e
 80083ec:	f88b 402f 	strb.w	r4, [fp, #47]	; 0x2f
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80083f0:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
 80083f4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
 80083f8:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
 80083fc:	f88b 4043 	strb.w	r4, [fp, #67]	; 0x43
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8008400:	f88b 404b 	strb.w	r4, [fp, #75]	; 0x4b
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8008404:	f88b 4007 	strb.w	r4, [fp, #7]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8008408:	f88b 400b 	strb.w	r4, [fp, #11]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 800840c:	f88b 2012 	strb.w	r2, [fp, #18]
 8008410:	f88b 4013 	strb.w	r4, [fp, #19]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8008414:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80085c4 <lv_style_init+0x3d8>
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8008418:	9301      	str	r3, [sp, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 800841a:	4649      	mov	r1, r9
 800841c:	4658      	mov	r0, fp
 800841e:	f7ff fee1 	bl	80081e4 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8008422:	f89b 2000 	ldrb.w	r2, [fp]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008426:	4d60      	ldr	r5, [pc, #384]	; (80085a8 <lv_style_init+0x3bc>)
    lv_style_transp.body.border.width = 0;
 8008428:	f8ab 6014 	strh.w	r6, [fp, #20]
    lv_style_transp.glass             = 1;
 800842c:	f042 0201 	orr.w	r2, r2, #1
 8008430:	f88b 2000 	strb.w	r2, [fp]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8008434:	f88b 600e 	strb.w	r6, [fp, #14]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008438:	4659      	mov	r1, fp
 800843a:	4628      	mov	r0, r5
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800843c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80085c8 <lv_style_init+0x3dc>
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008440:	f7ff fed0 	bl	80081e4 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8008444:	84ae      	strh	r6, [r5, #36]	; 0x24
    lv_style_transp_fit.body.padding.right  = 0;
 8008446:	84ee      	strh	r6, [r5, #38]	; 0x26
    lv_style_transp_fit.body.padding.top    = 0;
 8008448:	842e      	strh	r6, [r5, #32]
    lv_style_transp_fit.body.padding.bottom = 0;
 800844a:	846e      	strh	r6, [r5, #34]	; 0x22
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800844c:	4629      	mov	r1, r5
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800844e:	4d57      	ldr	r5, [pc, #348]	; (80085ac <lv_style_init+0x3c0>)
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8008450:	4658      	mov	r0, fp
 8008452:	f7ff fec7 	bl	80081e4 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008456:	4649      	mov	r1, r9
 8008458:	4628      	mov	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 800845a:	f8ab 6028 	strh.w	r6, [fp, #40]	; 0x28
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 800845e:	f7ff fec1 	bl	80081e4 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008462:	22d0      	movs	r2, #208	; 0xd0
 8008464:	712a      	strb	r2, [r5, #4]
 8008466:	22a2      	movs	r2, #162	; 0xa2
 8008468:	716a      	strb	r2, [r5, #5]
 800846a:	2276      	movs	r2, #118	; 0x76
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800846c:	2119      	movs	r1, #25
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800846e:	71aa      	strb	r2, [r5, #6]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008470:	225d      	movs	r2, #93	; 0x5d
 8008472:	722a      	strb	r2, [r5, #8]
 8008474:	72a9      	strb	r1, [r5, #10]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8008476:	84a9      	strh	r1, [r5, #36]	; 0x24
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8008478:	84e9      	strh	r1, [r5, #38]	; 0x26
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800847a:	7469      	strb	r1, [r5, #17]
    lv_style_btn_rel.body.shadow.width   = 0;
 800847c:	83ae      	strh	r6, [r5, #28]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800847e:	223a      	movs	r2, #58	; 0x3a
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8008480:	4e4b      	ldr	r6, [pc, #300]	; (80085b0 <lv_style_init+0x3c4>)
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008482:	726a      	strb	r2, [r5, #9]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008484:	210b      	movs	r1, #11
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8008486:	220a      	movs	r2, #10
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8008488:	f04f 0910 	mov.w	r9, #16
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800848c:	f04f 0302 	mov.w	r3, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008490:	74a9      	strb	r1, [r5, #18]
 8008492:	2028      	movs	r0, #40	; 0x28
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8008494:	21b2      	movs	r1, #178	; 0xb2
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8008496:	852a      	strh	r2, [r5, #40]	; 0x28
 8008498:	9200      	str	r2, [sp, #0]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800849a:	82ab      	strh	r3, [r5, #20]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800849c:	f8a5 a00c 	strh.w	sl, [r5, #12]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 80084a0:	f8a5 9020 	strh.w	r9, [r5, #32]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 80084a4:	f8a5 9022 	strh.w	r9, [r5, #34]	; 0x22
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80084a8:	7428      	strb	r0, [r5, #16]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80084aa:	75e9      	strb	r1, [r5, #23]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80084ac:	762f      	strb	r7, [r5, #24]
 80084ae:	766f      	strb	r7, [r5, #25]
 80084b0:	76af      	strb	r7, [r5, #26]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80084b2:	4629      	mov	r1, r5
 80084b4:	4630      	mov	r0, r6
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80084b6:	71ec      	strb	r4, [r5, #7]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80084b8:	72ec      	strb	r4, [r5, #11]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80084ba:	74ec      	strb	r4, [r5, #19]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80084bc:	76ec      	strb	r4, [r5, #27]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80084be:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 80084c2:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
 80084c6:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
 80084ca:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 80084ce:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
 80084d2:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
 80084d6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
 80084da:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 80084de:	f7ff fe81 	bl	80081e4 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80084e2:	2194      	movs	r1, #148	; 0x94
 80084e4:	7131      	strb	r1, [r6, #4]
 80084e6:	2133      	movs	r1, #51	; 0x33
 80084e8:	71b1      	strb	r1, [r6, #6]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 80084ea:	213c      	movs	r1, #60	; 0x3c
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80084ec:	f04f 0bc6 	mov.w	fp, #198	; 0xc6
 80084f0:	f04f 0ab5 	mov.w	sl, #181	; 0xb5
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80084f4:	2762      	movs	r7, #98	; 0x62
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 80084f6:	7231      	strb	r1, [r6, #8]
 80084f8:	f886 900a 	strb.w	r9, [r6, #10]
 80084fc:	2126      	movs	r1, #38	; 0x26
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80084fe:	f04f 09a4 	mov.w	r9, #164	; 0xa4
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008502:	7177      	strb	r7, [r6, #5]
 8008504:	71f4      	strb	r4, [r6, #7]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8008506:	7271      	strb	r1, [r6, #9]
 8008508:	72f4      	strb	r4, [r6, #11]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800850a:	f886 b02c 	strb.w	fp, [r6, #44]	; 0x2c
 800850e:	f886 a02d 	strb.w	sl, [r6, #45]	; 0x2d
 8008512:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
 8008516:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800851a:	f886 b040 	strb.w	fp, [r6, #64]	; 0x40
 800851e:	f886 a041 	strb.w	sl, [r6, #65]	; 0x41
 8008522:	f886 9042 	strb.w	r9, [r6, #66]	; 0x42
 8008526:	f886 4043 	strb.w	r4, [r6, #67]	; 0x43
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800852a:	f886 b048 	strb.w	fp, [r6, #72]	; 0x48
 800852e:	f886 a049 	strb.w	sl, [r6, #73]	; 0x49
 8008532:	f886 904a 	strb.w	r9, [r6, #74]	; 0x4a
 8008536:	f886 404b 	strb.w	r4, [r6, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800853a:	4e1e      	ldr	r6, [pc, #120]	; (80085b4 <lv_style_init+0x3c8>)
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff fe50 	bl	80081e4 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008544:	2122      	movs	r1, #34	; 0x22
 8008546:	7131      	strb	r1, [r6, #4]
 8008548:	2111      	movs	r1, #17
 800854a:	7171      	strb	r1, [r6, #5]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800854c:	2137      	movs	r1, #55	; 0x37
 800854e:	7277      	strb	r7, [r6, #9]
 8008550:	72b1      	strb	r1, [r6, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008552:	27f4      	movs	r7, #244	; 0xf4
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008554:	210d      	movs	r1, #13
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008556:	9a00      	ldr	r2, [sp, #0]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008558:	7431      	strb	r1, [r6, #16]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800855a:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800855e:	f886 7040 	strb.w	r7, [r6, #64]	; 0x40
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008562:	f886 7048 	strb.w	r7, [r6, #72]	; 0x48
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008566:	2107      	movs	r1, #7
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8008568:	4f13      	ldr	r7, [pc, #76]	; (80085b8 <lv_style_init+0x3cc>)
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800856a:	71b2      	strb	r2, [r6, #6]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800856c:	20dd      	movs	r0, #221	; 0xdd
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800856e:	2290      	movs	r2, #144	; 0x90
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008570:	7471      	strb	r1, [r6, #17]
 8008572:	f04f 0301 	mov.w	r3, #1
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008576:	21c8      	movs	r1, #200	; 0xc8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008578:	7232      	strb	r2, [r6, #8]
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800857a:	71f4      	strb	r4, [r6, #7]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800857c:	72f4      	strb	r4, [r6, #11]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800857e:	74b3      	strb	r3, [r6, #18]
 8008580:	74f4      	strb	r4, [r6, #19]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008582:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
 8008586:	f886 102e 	strb.w	r1, [r6, #46]	; 0x2e
 800858a:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 800858e:	f886 0041 	strb.w	r0, [r6, #65]	; 0x41
 8008592:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
 8008596:	e019      	b.n	80085cc <lv_style_init+0x3e0>
 8008598:	20015d60 	.word	0x20015d60
 800859c:	200000e4 	.word	0x200000e4
 80085a0:	20015e00 	.word	0x20015e00
 80085a4:	20015b80 	.word	0x20015b80
 80085a8:	20015c70 	.word	0x20015c70
 80085ac:	20015ae0 	.word	0x20015ae0
 80085b0:	20015b30 	.word	0x20015b30
 80085b4:	20015d10 	.word	0x20015d10
 80085b8:	20015db0 	.word	0x20015db0
 80085bc:	20015cc0 	.word	0x20015cc0
 80085c0:	20015a40 	.word	0x20015a40
 80085c4:	20015a90 	.word	0x20015a90
 80085c8:	20015bd0 	.word	0x20015bd0
 80085cc:	f886 4043 	strb.w	r4, [r6, #67]	; 0x43
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80085d0:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
 80085d4:	f886 104a 	strb.w	r1, [r6, #74]	; 0x4a
 80085d8:	f886 404b 	strb.w	r4, [r6, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80085dc:	4631      	mov	r1, r6
 80085de:	4638      	mov	r0, r7
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 80085e0:	9200      	str	r2, [sp, #0]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80085e2:	f7ff fdff 	bl	80081e4 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80085e6:	f04f 0302 	mov.w	r3, #2
 80085ea:	71bb      	strb	r3, [r7, #6]
 80085ec:	2127      	movs	r1, #39	; 0x27
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80085ee:	f04f 034c 	mov.w	r3, #76	; 0x4c
 80085f2:	2670      	movs	r6, #112	; 0x70
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80085f4:	7139      	strb	r1, [r7, #4]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80085f6:	727b      	strb	r3, [r7, #9]
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80085f8:	2114      	movs	r1, #20
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80085fa:	9b01      	ldr	r3, [sp, #4]
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80085fc:	7179      	strb	r1, [r7, #5]
 80085fe:	71fc      	strb	r4, [r7, #7]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8008600:	723e      	strb	r6, [r7, #8]
 8008602:	72bb      	strb	r3, [r7, #10]
 8008604:	72fc      	strb	r4, [r7, #11]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008606:	f887 b02c 	strb.w	fp, [r7, #44]	; 0x2c
 800860a:	f887 a02d 	strb.w	sl, [r7, #45]	; 0x2d
 800860e:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
 8008612:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008616:	f887 b040 	strb.w	fp, [r7, #64]	; 0x40
 800861a:	f887 a041 	strb.w	sl, [r7, #65]	; 0x41
 800861e:	f887 9042 	strb.w	r9, [r7, #66]	; 0x42
 8008622:	f887 4043 	strb.w	r4, [r7, #67]	; 0x43
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008626:	f887 b048 	strb.w	fp, [r7, #72]	; 0x48
 800862a:	f887 a049 	strb.w	sl, [r7, #73]	; 0x49
 800862e:	f887 904a 	strb.w	r9, [r7, #74]	; 0x4a
 8008632:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8008636:	4f19      	ldr	r7, [pc, #100]	; (800869c <lv_style_init+0x4b0>)
 8008638:	4629      	mov	r1, r5
 800863a:	4638      	mov	r0, r7
 800863c:	f7ff fdd2 	bl	80081e4 <lv_style_copy>
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8008640:	9a00      	ldr	r2, [sp, #0]
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008642:	f887 8004 	strb.w	r8, [r7, #4]
 8008646:	f887 8005 	strb.w	r8, [r7, #5]
 800864a:	f887 8006 	strb.w	r8, [r7, #6]
 800864e:	71fc      	strb	r4, [r7, #7]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008650:	f887 8008 	strb.w	r8, [r7, #8]
 8008654:	f887 8009 	strb.w	r8, [r7, #9]
 8008658:	f887 800a 	strb.w	r8, [r7, #10]
 800865c:	72fc      	strb	r4, [r7, #11]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800865e:	743a      	strb	r2, [r7, #16]
 8008660:	747a      	strb	r2, [r7, #17]
 8008662:	74ba      	strb	r2, [r7, #18]
 8008664:	74fc      	strb	r4, [r7, #19]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8008666:	f887 602c 	strb.w	r6, [r7, #44]	; 0x2c
 800866a:	f887 602d 	strb.w	r6, [r7, #45]	; 0x2d
 800866e:	f887 602e 	strb.w	r6, [r7, #46]	; 0x2e
 8008672:	f887 402f 	strb.w	r4, [r7, #47]	; 0x2f
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8008676:	f887 6040 	strb.w	r6, [r7, #64]	; 0x40
 800867a:	f887 6041 	strb.w	r6, [r7, #65]	; 0x41
 800867e:	f887 6042 	strb.w	r6, [r7, #66]	; 0x42
 8008682:	f887 4043 	strb.w	r4, [r7, #67]	; 0x43
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8008686:	f887 6048 	strb.w	r6, [r7, #72]	; 0x48
 800868a:	f887 6049 	strb.w	r6, [r7, #73]	; 0x49
 800868e:	f887 604a 	strb.w	r6, [r7, #74]	; 0x4a
 8008692:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
}
 8008696:	b003      	add	sp, #12
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869c:	20015c20 	.word	0x20015c20

080086a0 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80086a0:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <lv_draw_get_buf+0x34>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	4282      	cmp	r2, r0
{
 80086a6:	b510      	push	{r4, lr}
 80086a8:	4601      	mov	r1, r0
 80086aa:	4c0b      	ldr	r4, [pc, #44]	; (80086d8 <lv_draw_get_buf+0x38>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80086ac:	d301      	bcc.n	80086b2 <lv_draw_get_buf+0x12>
 80086ae:	6820      	ldr	r0, [r4, #0]
 80086b0:	bd10      	pop	{r4, pc}

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 80086b2:	6018      	str	r0, [r3, #0]

    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	b923      	cbnz	r3, 80086c2 <lv_draw_get_buf+0x22>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80086b8:	f004 fbc0 	bl	800ce3c <lv_mem_alloc>
 80086bc:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80086be:	b938      	cbnz	r0, 80086d0 <lv_draw_get_buf+0x30>
 80086c0:	e7fe      	b.n	80086c0 <lv_draw_get_buf+0x20>
        return LV_GC_ROOT(_lv_draw_buf);
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80086c2:	4618      	mov	r0, r3
 80086c4:	f004 fc1a 	bl	800cefc <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80086c8:	b108      	cbz	r0, 80086ce <lv_draw_get_buf+0x2e>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80086ca:	6020      	str	r0, [r4, #0]
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	e7fe      	b.n	80086ce <lv_draw_get_buf+0x2e>
    return LV_GC_ROOT(_lv_draw_buf);
}
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	bf00      	nop
 80086d4:	200104a4 	.word	0x200104a4
 80086d8:	20015e68 	.word	0x20015e68

080086dc <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 80086dc:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 80086de:	4c05      	ldr	r4, [pc, #20]	; (80086f4 <lv_draw_free_buf+0x18>)
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	b128      	cbz	r0, 80086f0 <lv_draw_free_buf+0x14>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 80086e4:	f004 fbe0 	bl	800cea8 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
        draw_buf_size = 0;
 80086e8:	4a03      	ldr	r2, [pc, #12]	; (80086f8 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	20015e68 	.word	0x20015e68
 80086f8:	200104a4 	.word	0x200104a4

080086fc <lv_draw_aa_get_opa>:
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 80086fc:	b188      	cbz	r0, 8008722 <lv_draw_aa_get_opa+0x26>
        return LV_OPA_TRANSP;
    else if(seg < 8)
 80086fe:	2807      	cmp	r0, #7
 8008700:	dc08      	bgt.n	8008714 <lv_draw_aa_get_opa+0x18>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8008702:	3801      	subs	r0, #1
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <lv_draw_aa_get_opa+0x28>)
 8008706:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800870a:	5c58      	ldrb	r0, [r3, r1]
 800870c:	fb10 f002 	smulbb	r0, r0, r2
 8008710:	0a00      	lsrs	r0, r0, #8
 8008712:	4770      	bx	lr
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8008714:	0049      	lsls	r1, r1, #1
 8008716:	fb01 2202 	mla	r2, r1, r2, r2
 800871a:	0040      	lsls	r0, r0, #1
 800871c:	fb92 f0f0 	sdiv	r0, r2, r0
 8008720:	b2c0      	uxtb	r0, r0
    }
}
 8008722:	4770      	bx	lr
 8008724:	080f3634 	.word	0x080f3634

08008728 <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	f89d 4018 	ldrb.w	r4, [sp, #24]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800872e:	b2a5      	uxth	r5, r4
 8008730:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8008734:	4363      	muls	r3, r4
 8008736:	fb00 3305 	mla	r3, r0, r5, r3
 800873a:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800873e:	2000      	movs	r0, #0
 8008740:	f363 0007 	bfi	r0, r3, #0, #8
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008744:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008748:	b2a6      	uxth	r6, r4
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800874a:	fb13 f306 	smulbb	r3, r3, r6
 800874e:	fb01 3105 	mla	r1, r1, r5, r3
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008752:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008756:	fb13 f606 	smulbb	r6, r3, r6
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800875a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800875e:	fb02 6205 	mla	r2, r2, r5, r6
    return ret;
 8008762:	f361 200f 	bfi	r0, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008766:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 800876a:	f362 4017 	bfi	r0, r2, #16, #8
}
 800876e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8008772:	bd70      	pop	{r4, r5, r6, pc}

08008774 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	b089      	sub	sp, #36	; 0x24
 800877a:	461d      	mov	r5, r3
 800877c:	fa5f fb83 	uxtb.w	fp, r3
 8008780:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	9007      	str	r0, [sp, #28]
 800878e:	9106      	str	r1, [sp, #24]
 8008790:	4614      	mov	r4, r2
 8008792:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8008796:	f7ff fb69 	bl	8007e6c <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 800879a:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800879c:	4682      	mov	sl, r0
    if(disp->driver.set_px_cb) {
 800879e:	b35b      	cbz	r3, 80087f8 <sw_color_fill+0x84>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80087a0:	f9b4 7000 	ldrsh.w	r7, [r4]
 80087a4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80087a8:	42bb      	cmp	r3, r7
 80087aa:	da02      	bge.n	80087b2 <sw_color_fill+0x3e>
                }
                mem += mem_width;
            }
        }
    }
}
 80087ac:	b009      	add	sp, #36	; 0x24
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80087b2:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
 80087b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80087ba:	4543      	cmp	r3, r8
 80087bc:	da02      	bge.n	80087c4 <sw_color_fill+0x50>
 80087be:	3701      	adds	r7, #1
 80087c0:	b23f      	sxth	r7, r7
 80087c2:	e7ef      	b.n	80087a4 <sw_color_fill+0x30>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80087c4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	f8cd 8000 	str.w	r8, [sp]
 80087ce:	461e      	mov	r6, r3
 80087d0:	9b05      	ldr	r3, [sp, #20]
 80087d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80087d6:	f36b 0507 	bfi	r5, fp, #0, #8
 80087da:	f363 250f 	bfi	r5, r3, #8, #8
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	9907      	ldr	r1, [sp, #28]
 80087e2:	f363 4517 	bfi	r5, r3, #16, #8
 80087e6:	9501      	str	r5, [sp, #4]
 80087e8:	463b      	mov	r3, r7
 80087ea:	4650      	mov	r0, sl
 80087ec:	f108 0801 	add.w	r8, r8, #1
 80087f0:	47b0      	blx	r6
 80087f2:	fa0f f888 	sxth.w	r8, r8
 80087f6:	e7de      	b.n	80087b6 <sw_color_fill+0x42>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80087f8:	9a06      	ldr	r2, [sp, #24]
 80087fa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80087fe:	fb01 f702 	mul.w	r7, r1, r2
 8008802:	9a07      	ldr	r2, [sp, #28]
        if(opa == LV_OPA_COVER) {
 8008804:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8008808:	eb02 0787 	add.w	r7, r2, r7, lsl #2
        if(opa == LV_OPA_COVER) {
 800880c:	d131      	bne.n	8008872 <sw_color_fill+0xfe>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800880e:	f9b4 9000 	ldrsh.w	r9, [r4]
 8008812:	464a      	mov	r2, r9
 8008814:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	dd1d      	ble.n	8008858 <sw_color_fill+0xe4>
            lv_color_t * mem_first = &mem[fill_area->x1];
 800881c:	eb07 0889 	add.w	r8, r7, r9, lsl #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008820:	eba3 0909 	sub.w	r9, r3, r9
            mem += mem_width;
 8008824:	9b06      	ldr	r3, [sp, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008826:	f109 0901 	add.w	r9, r9, #1
 800882a:	ea4f 0989 	mov.w	r9, r9, lsl #2
            mem += mem_width;
 800882e:	009e      	lsls	r6, r3, #2
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008830:	fa0f f989 	sxth.w	r9, r9
            mem += mem_width;
 8008834:	4437      	add	r7, r6
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8008836:	1c4d      	adds	r5, r1, #1
 8008838:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800883c:	b22d      	sxth	r5, r5
 800883e:	42ab      	cmp	r3, r5
 8008840:	dbb4      	blt.n	80087ac <sw_color_fill+0x38>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8008842:	f9b4 0000 	ldrsh.w	r0, [r4]
 8008846:	464a      	mov	r2, r9
 8008848:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800884c:	4641      	mov	r1, r8
 800884e:	f007 ffc5 	bl	80107dc <memcpy>
                mem += mem_width;
 8008852:	4437      	add	r7, r6
 8008854:	3501      	adds	r5, #1
 8008856:	e7ef      	b.n	8008838 <sw_color_fill+0xc4>
                mem[col] = color;
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	f36b 0507 	bfi	r5, fp, #0, #8
 800885e:	f363 250f 	bfi	r5, r3, #8, #8
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	f363 4517 	bfi	r5, r3, #16, #8
 8008868:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
 800886c:	3201      	adds	r2, #1
 800886e:	b212      	sxth	r2, r2
 8008870:	e7d0      	b.n	8008814 <sw_color_fill+0xa0>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8008872:	2500      	movs	r5, #0
 8008874:	f363 0507 	bfi	r5, r3, #0, #8
 8008878:	f363 250f 	bfi	r5, r3, #8, #8
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	f8cd 9008 	str.w	r9, [sp, #8]
 8008884:	9a04      	ldr	r2, [sp, #16]
 8008886:	9905      	ldr	r1, [sp, #20]
 8008888:	4658      	mov	r0, fp
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800888a:	f363 4517 	bfi	r5, r3, #16, #8
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800888e:	f7ff ff4b 	bl	8008728 <lv_color_mix.isra.0>
                mem += mem_width;
 8008892:	9b06      	ldr	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008894:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
                mem += mem_width;
 8008898:	009b      	lsls	r3, r3, #2
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800889a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
                mem += mem_width;
 800889e:	9306      	str	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80088a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80088a4:	4543      	cmp	r3, r8
 80088a6:	db81      	blt.n	80087ac <sw_color_fill+0x38>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80088a8:	f9b4 6000 	ldrsh.w	r6, [r4]
 80088ac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80088b0:	42b3      	cmp	r3, r6
 80088b2:	da06      	bge.n	80088c2 <sw_color_fill+0x14e>
                mem += mem_width;
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	f108 0801 	add.w	r8, r8, #1
 80088ba:	441f      	add	r7, r3
 80088bc:	fa0f f888 	sxth.w	r8, r8
 80088c0:	e7ee      	b.n	80088a0 <sw_color_fill+0x12c>
                        if(mem[col].full != bg_tmp.full) {
 80088c2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80088c6:	42ab      	cmp	r3, r5
 80088c8:	eb07 0a86 	add.w	sl, r7, r6, lsl #2
 80088cc:	d00e      	beq.n	80088ec <sw_color_fill+0x178>
                            bg_tmp  = mem[col];
 80088ce:	461d      	mov	r5, r3
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 80088d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80088e0:	b2eb      	uxtb	r3, r5
 80088e2:	9a04      	ldr	r2, [sp, #16]
 80088e4:	9905      	ldr	r1, [sp, #20]
 80088e6:	4658      	mov	r0, fp
 80088e8:	f7ff ff1e 	bl	8008728 <lv_color_mix.isra.0>
 80088ec:	3601      	adds	r6, #1
                        mem[col] = opa_tmp;
 80088ee:	f8ca 0000 	str.w	r0, [sl]
 80088f2:	b236      	sxth	r6, r6
 80088f4:	e7da      	b.n	80088ac <sw_color_fill+0x138>

080088f6 <lv_draw_px>:
{
 80088f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088fa:	b085      	sub	sp, #20
 80088fc:	4606      	mov	r6, r0
 80088fe:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if(opa < LV_OPA_MIN) return;
 8008902:	f1b9 0f0f 	cmp.w	r9, #15
{
 8008906:	460d      	mov	r5, r1
 8008908:	461f      	mov	r7, r3
    if(opa < LV_OPA_MIN) return;
 800890a:	d92b      	bls.n	8008964 <lv_draw_px+0x6e>
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800890c:	f9b2 3000 	ldrsh.w	r3, [r2]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008910:	f1b9 0ffc 	cmp.w	r9, #252	; 0xfc
 8008914:	bf28      	it	cs
 8008916:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800891a:	4283      	cmp	r3, r0
 800891c:	dc22      	bgt.n	8008964 <lv_draw_px+0x6e>
 800891e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8008922:	4283      	cmp	r3, r0
 8008924:	db1e      	blt.n	8008964 <lv_draw_px+0x6e>
 8008926:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800892a:	428b      	cmp	r3, r1
 800892c:	dc1a      	bgt.n	8008964 <lv_draw_px+0x6e>
 800892e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8008932:	428b      	cmp	r3, r1
 8008934:	db16      	blt.n	8008964 <lv_draw_px+0x6e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008936:	f7ff fa99 	bl	8007e6c <lv_refr_get_disp_refreshing>
 800893a:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800893c:	f003 fd5c 	bl	800c3f8 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8008940:	8a82      	ldrh	r2, [r0, #20]
    y -= vdb->area.y1;
 8008942:	8a44      	ldrh	r4, [r0, #18]
 8008944:	8a03      	ldrh	r3, [r0, #16]
 8008946:	1b2c      	subs	r4, r5, r4
 8008948:	3201      	adds	r2, #1
    if(disp->driver.set_px_cb) {
 800894a:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800894e:	1ad2      	subs	r2, r2, r3
    x -= vdb->area.x1;
 8008950:	1af3      	subs	r3, r6, r3
 8008952:	b212      	sxth	r2, r2
 8008954:	b21b      	sxth	r3, r3
    y -= vdb->area.y1;
 8008956:	b224      	sxth	r4, r4
    if(disp->driver.set_px_cb) {
 8008958:	b13d      	cbz	r5, 800896a <lv_draw_px+0x74>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 800895a:	e88d 0290 	stmia.w	sp, {r4, r7, r9}
 800895e:	6881      	ldr	r1, [r0, #8]
 8008960:	4640      	mov	r0, r8
 8008962:	47a8      	blx	r5
}
 8008964:	b005      	add	sp, #20
 8008966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_color_t * vdb_px_p = vdb->buf_act;
 800896a:	6885      	ldr	r5, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 800896c:	fb02 3404 	mla	r4, r2, r4, r3
            if(opa == LV_OPA_COVER) {
 8008970:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
        vdb_px_p += y * vdb_width + x;
 8008974:	eb05 0284 	add.w	r2, r5, r4, lsl #2
            if(opa == LV_OPA_COVER) {
 8008978:	d102      	bne.n	8008980 <lv_draw_px+0x8a>
                *vdb_px_p = color;
 800897a:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
 800897e:	e7f1      	b.n	8008964 <lv_draw_px+0x6e>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8008980:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
 8008984:	f8cd 9008 	str.w	r9, [sp, #8]
 8008988:	7891      	ldrb	r1, [r2, #2]
 800898a:	9101      	str	r1, [sp, #4]
 800898c:	7852      	ldrb	r2, [r2, #1]
 800898e:	9200      	str	r2, [sp, #0]
 8008990:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8008994:	f3c7 4207 	ubfx	r2, r7, #16, #8
 8008998:	b2f8      	uxtb	r0, r7
 800899a:	f7ff fec5 	bl	8008728 <lv_color_mix.isra.0>
 800899e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80089a2:	e7df      	b.n	8008964 <lv_draw_px+0x6e>

080089a4 <lv_draw_fill>:
{
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(opa < LV_OPA_MIN) return;
 80089a8:	2b0f      	cmp	r3, #15
{
 80089aa:	b087      	sub	sp, #28
 80089ac:	4617      	mov	r7, r2
 80089ae:	4699      	mov	r9, r3
    if(opa < LV_OPA_MIN) return;
 80089b0:	d950      	bls.n	8008a54 <lv_draw_fill+0xb0>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80089b2:	2bfc      	cmp	r3, #252	; 0xfc
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80089b4:	460a      	mov	r2, r1
 80089b6:	4601      	mov	r1, r0
 80089b8:	a802      	add	r0, sp, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80089ba:	bf28      	it	cs
 80089bc:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 80089c0:	f003 ff1c 	bl	800c7fc <lv_area_intersect>
    if(union_ok == false) {
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d045      	beq.n	8008a54 <lv_draw_fill+0xb0>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80089c8:	f7ff fa50 	bl	8007e6c <lv_refr_get_disp_refreshing>
 80089cc:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80089ce:	f003 fd13 	bl	800c3f8 <lv_disp_get_buf>
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80089d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80089d6:	8a41      	ldrh	r1, [r0, #18]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80089d8:	f8b0 a010 	ldrh.w	sl, [r0, #16]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80089dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80089e0:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80089e4:	1a5b      	subs	r3, r3, r1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80089e6:	4684      	mov	ip, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80089e8:	fa1f fe83 	uxth.w	lr, r3
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80089ec:	eba2 020a 	sub.w	r2, r2, sl
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80089f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 80089f4:	6880      	ldr	r0, [r0, #8]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80089f6:	eba4 040a 	sub.w	r4, r4, sl
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80089fa:	b292      	uxth	r2, r2
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80089fc:	b2a6      	uxth	r6, r4
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	1c54      	adds	r4, r2, #1
 8008a02:	f8bc 1014 	ldrh.w	r1, [ip, #20]
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8008a06:	f8ad 6010 	strh.w	r6, [sp, #16]
 8008a0a:	1ba4      	subs	r4, r4, r6
 8008a0c:	3101      	adds	r1, #1
 8008a0e:	b224      	sxth	r4, r4
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008a10:	fa0f f58e 	sxth.w	r5, lr
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	eba1 010a 	sub.w	r1, r1, sl
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8008a1a:	2c31      	cmp	r4, #49	; 0x31
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008a1c:	f8ad 5012 	strh.w	r5, [sp, #18]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8008a20:	f8ad 2014 	strh.w	r2, [sp, #20]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008a24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a28:	b209      	sxth	r1, r1
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8008a2a:	dc02      	bgt.n	8008a32 <lv_draw_fill+0x8e>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008a2c:	f8cd 9000 	str.w	r9, [sp]
 8008a30:	e04c      	b.n	8008acc <lv_draw_fill+0x128>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8008a32:	00ae      	lsls	r6, r5, #2
    else if(opa == LV_OPA_COVER) {
 8008a34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8008a38:	fb01 0606 	mla	r6, r1, r6, r0
    else if(opa == LV_OPA_COVER) {
 8008a3c:	d14b      	bne.n	8008ad6 <lv_draw_fill+0x132>
        if(disp->driver.gpu_fill_cb) {
 8008a3e:	f8d8 9020 	ldr.w	r9, [r8, #32]
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	d008      	beq.n	8008a5a <lv_draw_fill+0xb6>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 8008a48:	460a      	mov	r2, r1
 8008a4a:	9700      	str	r7, [sp, #0]
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	ab04      	add	r3, sp, #16
 8008a50:	4640      	mov	r0, r8
 8008a52:	47c8      	blx	r9
}
 8008a54:	b007      	add	sp, #28
 8008a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	eba3 030e 	sub.w	r3, r3, lr
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 8008a60:	b21b      	sxth	r3, r3
 8008a62:	2b32      	cmp	r3, #50	; 0x32
 8008a64:	dd30      	ble.n	8008ac8 <lv_draw_fill+0x124>
 8008a66:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008a6a:	b36b      	cbz	r3, 8008ac8 <lv_draw_fill+0x124>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008a6c:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <lv_draw_fill+0x194>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4297      	cmp	r7, r2
 8008a72:	d104      	bne.n	8008a7e <lv_draw_fill+0xda>
 8008a74:	4a31      	ldr	r2, [pc, #196]	; (8008b3c <lv_draw_fill+0x198>)
 8008a76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008a7a:	42a2      	cmp	r2, r4
 8008a7c:	d007      	beq.n	8008a8e <lv_draw_fill+0xea>
                for(i = 0; i < w; i++) {
 8008a7e:	fa1f f289 	uxth.w	r2, r9
 8008a82:	42a2      	cmp	r2, r4
 8008a84:	f109 0901 	add.w	r9, r9, #1
 8008a88:	db1b      	blt.n	8008ac2 <lv_draw_fill+0x11e>
                last_width = w;
 8008a8a:	4b2c      	ldr	r3, [pc, #176]	; (8008b3c <lv_draw_fill+0x198>)
 8008a8c:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008a8e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8008b38 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8008a92:	ea4f 0981 	mov.w	r9, r1, lsl #2
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008a96:	f04f 0aff 	mov.w	sl, #255	; 0xff
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8008a9a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8008a9e:	42ab      	cmp	r3, r5
 8008aa0:	dbd8      	blt.n	8008a54 <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008aa2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8008aa6:	f8cd a000 	str.w	sl, [sp]
 8008aaa:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8008aae:	4623      	mov	r3, r4
 8008ab0:	465a      	mov	r2, fp
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f8d8 701c 	ldr.w	r7, [r8, #28]
 8008ab8:	3501      	adds	r5, #1
 8008aba:	47b8      	blx	r7
                vdb_buf_tmp += vdb_width;
 8008abc:	444e      	add	r6, r9
 8008abe:	b22d      	sxth	r5, r5
 8008ac0:	e7eb      	b.n	8008a9a <lv_draw_fill+0xf6>
                    color_array_tmp[i].full = color.full;
 8008ac2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8008ac6:	e7da      	b.n	8008a7e <lv_draw_fill+0xda>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008ac8:	23ff      	movs	r3, #255	; 0xff
 8008aca:	9300      	str	r3, [sp, #0]
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008acc:	463b      	mov	r3, r7
 8008ace:	aa04      	add	r2, sp, #16
 8008ad0:	f7ff fe50 	bl	8008774 <sw_color_fill>
 8008ad4:	e7be      	b.n	8008a54 <lv_draw_fill+0xb0>
        if(disp->driver.gpu_blend_cb) {
 8008ad6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0a6      	beq.n	8008a2c <lv_draw_fill+0x88>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008ade:	4a16      	ldr	r2, [pc, #88]	; (8008b38 <lv_draw_fill+0x194>)
 8008ae0:	6813      	ldr	r3, [r2, #0]
 8008ae2:	429f      	cmp	r7, r3
 8008ae4:	d104      	bne.n	8008af0 <lv_draw_fill+0x14c>
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <lv_draw_fill+0x198>)
 8008ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d007      	beq.n	8008b00 <lv_draw_fill+0x15c>
 8008af0:	2300      	movs	r3, #0
                for(i = 0; i < w; i++) {
 8008af2:	b298      	uxth	r0, r3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	f103 0301 	add.w	r3, r3, #1
 8008afa:	db19      	blt.n	8008b30 <lv_draw_fill+0x18c>
                last_width = w;
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <lv_draw_fill+0x198>)
 8008afe:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008b00:	f8df b034 	ldr.w	fp, [pc, #52]	; 8008b38 <lv_draw_fill+0x194>
                vdb_buf_tmp += vdb_width;
 8008b04:	ea4f 0a81 	mov.w	sl, r1, lsl #2
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8008b08:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dba1      	blt.n	8008a54 <lv_draw_fill+0xb0>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008b10:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8008b14:	f8cd 9000 	str.w	r9, [sp]
 8008b18:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	465a      	mov	r2, fp
 8008b20:	4640      	mov	r0, r8
 8008b22:	f8d8 701c 	ldr.w	r7, [r8, #28]
 8008b26:	3501      	adds	r5, #1
 8008b28:	47b8      	blx	r7
                vdb_buf_tmp += vdb_width;
 8008b2a:	4456      	add	r6, sl
 8008b2c:	b22d      	sxth	r5, r5
 8008b2e:	e7eb      	b.n	8008b08 <lv_draw_fill+0x164>
                    color_array_tmp[i].full = color.full;
 8008b30:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8008b34:	e7dd      	b.n	8008af2 <lv_draw_fill+0x14e>
 8008b36:	bf00      	nop
 8008b38:	200104a8 	.word	0x200104a8
 8008b3c:	200000c6 	.word	0x200000c6

08008b40 <lv_draw_letter>:
{
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	b09d      	sub	sp, #116	; 0x74
 8008b46:	4615      	mov	r5, r2
 8008b48:	4699      	mov	r9, r3
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b4a:	2200      	movs	r2, #0
{
 8008b4c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8008b50:	9305      	str	r3, [sp, #20]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b52:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
 8008b56:	23ff      	movs	r3, #255	; 0xff
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008b58:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 8008b5c:	2255      	movs	r2, #85	; 0x55
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008b5e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008b62:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
 8008b66:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 8008b6a:	22aa      	movs	r2, #170	; 0xaa
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b6c:	4bb5      	ldr	r3, [pc, #724]	; (8008e44 <lv_draw_letter+0x304>)
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008b6e:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b72:	aa18      	add	r2, sp, #96	; 0x60
{
 8008b74:	4604      	mov	r4, r0
 8008b76:	460f      	mov	r7, r1
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008b78:	f103 0c10 	add.w	ip, r3, #16
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	6859      	ldr	r1, [r3, #4]
 8008b82:	4696      	mov	lr, r2
 8008b84:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8008b88:	3308      	adds	r3, #8
 8008b8a:	4563      	cmp	r3, ip
 8008b8c:	4672      	mov	r2, lr
 8008b8e:	d1f6      	bne.n	8008b7e <lv_draw_letter+0x3e>
    if(opa < LV_OPA_MIN) return;
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	f240 80e2 	bls.w	8008d5c <lv_draw_letter+0x21c>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008b98:	2bfc      	cmp	r3, #252	; 0xfc
 8008b9a:	bf28      	it	cs
 8008b9c:	23ff      	movcs	r3, #255	; 0xff
 8008b9e:	9305      	str	r3, [sp, #20]
    if(font_p == NULL) {
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	f000 80db 	beq.w	8008d5c <lv_draw_letter+0x21c>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	464a      	mov	r2, r9
 8008baa:	a916      	add	r1, sp, #88	; 0x58
 8008bac:	4628      	mov	r0, r5
 8008bae:	f003 fa3f 	bl	800c030 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f000 80d2 	beq.w	8008d5c <lv_draw_letter+0x21c>
    switch(g.bpp) {
 8008bb8:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	f200 80cc 	bhi.w	8008d5c <lv_draw_letter+0x21c>
 8008bc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008bc8:	00d10008 	.word	0x00d10008
 8008bcc:	000d00ca 	.word	0x000d00ca
 8008bd0:	00ca00ca 	.word	0x00ca00ca
 8008bd4:	00cd00ca 	.word	0x00cd00ca
            bitmask_init  = 0x80;
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp1_opa_table;
 8008bdc:	ab14      	add	r3, sp, #80	; 0x50
            bpp_opa_table = bpp2_opa_table;
 8008bde:	9308      	str	r3, [sp, #32]
 8008be0:	e002      	b.n	8008be8 <lv_draw_letter+0xa8>
            bitmask_init  = 0xF0;
 8008be2:	23f0      	movs	r3, #240	; 0xf0
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp4_opa_table;
 8008be6:	9608      	str	r6, [sp, #32]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008be8:	f99d 205c 	ldrsb.w	r2, [sp, #92]	; 0x5c
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008bec:	f99d 305d 	ldrsb.w	r3, [sp, #93]	; 0x5d
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008bf0:	f9b4 8000 	ldrsh.w	r8, [r4]
 8008bf4:	9207      	str	r2, [sp, #28]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4628      	mov	r0, r5
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008bfa:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8008bfe:	f895 b008 	ldrb.w	fp, [r5, #8]
 8008c02:	f895 a009 	ldrb.w	sl, [r5, #9]
 8008c06:	f89d 605b 	ldrb.w	r6, [sp, #91]	; 0x5b
 8008c0a:	9306      	str	r3, [sp, #24]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008c0c:	f003 fa0e 	bl	800c02c <lv_font_get_glyph_bitmap>
    if(map_p == NULL) return;
 8008c10:	4681      	mov	r9, r0
 8008c12:	2800      	cmp	r0, #0
 8008c14:	f000 80a2 	beq.w	8008d5c <lv_draw_letter+0x21c>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008c18:	9a07      	ldr	r2, [sp, #28]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008c1a:	f9b7 1000 	ldrsh.w	r1, [r7]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008c1e:	4490      	add	r8, r2
 8008c20:	fa1f f388 	uxth.w	r3, r8
 8008c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c26:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008c2a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8008c2e:	4442      	add	r2, r8
 8008c30:	428a      	cmp	r2, r1
 8008c32:	f2c0 8093 	blt.w	8008d5c <lv_draw_letter+0x21c>
 8008c36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008c3a:	4542      	cmp	r2, r8
 8008c3c:	f2c0 808e 	blt.w	8008d5c <lv_draw_letter+0x21c>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008c40:	9b06      	ldr	r3, [sp, #24]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008c42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008c46:	441e      	add	r6, r3
 8008c48:	1ba4      	subs	r4, r4, r6
 8008c4a:	44a3      	add	fp, r4
 8008c4c:	ebab 0a0a 	sub.w	sl, fp, sl
 8008c50:	fa1f f38a 	uxth.w	r3, sl
 8008c54:	930c      	str	r3, [sp, #48]	; 0x30
 8008c56:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008c5a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8008c5e:	445b      	add	r3, fp
 8008c60:	4293      	cmp	r3, r2
 8008c62:	db7b      	blt.n	8008d5c <lv_draw_letter+0x21c>
 8008c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c68:	455b      	cmp	r3, fp
 8008c6a:	db77      	blt.n	8008d5c <lv_draw_letter+0x21c>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008c6c:	f7ff f8fe 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8008c70:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008c72:	f003 fbc1 	bl	800c3f8 <lv_disp_get_buf>
 8008c76:	4682      	mov	sl, r0
 8008c78:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
    return area_p->x2 - area_p->x1 + 1;
 8008c7c:	f8ba 3014 	ldrh.w	r3, [sl, #20]
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8008c80:	f89d 605a 	ldrb.w	r6, [sp, #90]	; 0x5a
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008c84:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008c88:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008c8c:	f89d e05b 	ldrb.w	lr, [sp, #91]	; 0x5b
 8008c90:	3301      	adds	r3, #1
 8008c92:	1a1b      	subs	r3, r3, r0
 8008c94:	b21b      	sxth	r3, r3
 8008c96:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008c98:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008c9c:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8008c9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008ca2:	4598      	cmp	r8, r3
 8008ca4:	bfbd      	ittte	lt
 8008ca6:	990b      	ldrlt	r1, [sp, #44]	; 0x2c
 8008ca8:	1a5b      	sublt	r3, r3, r1
 8008caa:	b29b      	uxthlt	r3, r3
 8008cac:	2300      	movge	r3, #0
 8008cae:	b219      	sxth	r1, r3
 8008cb0:	9107      	str	r1, [sp, #28]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008cb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008cb6:	eb08 0406 	add.w	r4, r8, r6
 8008cba:	428c      	cmp	r4, r1
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008cbc:	fb06 fc02 	mul.w	ip, r6, r2
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008cc0:	bfc2      	ittt	gt
 8008cc2:	1c4e      	addgt	r6, r1, #1
 8008cc4:	990b      	ldrgt	r1, [sp, #44]	; 0x2c
 8008cc6:	1a76      	subgt	r6, r6, r1
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008cc8:	45ab      	cmp	fp, r5
 8008cca:	bfbd      	ittte	lt
 8008ccc:	990c      	ldrlt	r1, [sp, #48]	; 0x30
 8008cce:	1a6d      	sublt	r5, r5, r1
 8008cd0:	b2ad      	uxthlt	r5, r5
 8008cd2:	2500      	movge	r5, #0
 8008cd4:	b229      	sxth	r1, r5
 8008cd6:	9106      	str	r1, [sp, #24]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008cd8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8008cdc:	eb0e 040b 	add.w	r4, lr, fp
 8008ce0:	428c      	cmp	r4, r1
 8008ce2:	bfc3      	ittte	gt
 8008ce4:	9c0c      	ldrgt	r4, [sp, #48]	; 0x30
 8008ce6:	3101      	addgt	r1, #1
 8008ce8:	1b09      	subgt	r1, r1, r4
 8008cea:	fa0f f18e 	sxthle.w	r1, lr
 8008cee:	bfc8      	it	gt
 8008cf0:	b209      	sxthgt	r1, r1
 8008cf2:	910e      	str	r1, [sp, #56]	; 0x38
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008cf4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8008cf8:	fb12 f401 	smulbb	r4, r2, r1
 8008cfc:	9a06      	ldr	r2, [sp, #24]
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008cfe:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008d00:	fb0c 4402 	mla	r4, ip, r2, r4
    map_p += bit_ofs >> 3;
 8008d04:	eb09 02d4 	add.w	r2, r9, r4, lsr #3
 8008d08:	920a      	str	r2, [sp, #40]	; 0x28
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008d0a:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008d0c:	b236      	sxth	r6, r6
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008d0e:	1ab2      	subs	r2, r6, r2
 8008d10:	1af3      	subs	r3, r6, r3
 8008d12:	1a8a      	subs	r2, r1, r2
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	9907      	ldr	r1, [sp, #28]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	42b1      	cmp	r1, r6
 8008d1c:	bfc8      	it	gt
 8008d1e:	2300      	movgt	r3, #0
 8008d20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008d24:	9311      	str	r3, [sp, #68]	; 0x44
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008d26:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
 8008d2a:	ebab 0b03 	sub.w	fp, fp, r3
 8008d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8008d30:	460a      	mov	r2, r1
 8008d32:	9906      	ldr	r1, [sp, #24]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008d34:	fb03 880b 	mla	r8, r3, fp, r8
 8008d38:	eba8 0000 	sub.w	r0, r8, r0
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8008d3c:	fb03 2801 	mla	r8, r3, r1, r2
 8008d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d42:	4440      	add	r0, r8
 8008d44:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008d48:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8008d4c:	9313      	str	r3, [sp, #76]	; 0x4c
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008d4e:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start; row < row_end; row++) {
 8008d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d54:	9a06      	ldr	r2, [sp, #24]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	465f      	mov	r7, fp
 8008d5a:	db0a      	blt.n	8008d72 <lv_draw_letter+0x232>
}
 8008d5c:	b01d      	add	sp, #116	; 0x74
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 8008d62:	23ff      	movs	r3, #255	; 0xff
 8008d64:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e739      	b.n	8008bde <lv_draw_letter+0x9e>
            bitmask_init  = 0xC0;
 8008d6a:	23c0      	movs	r3, #192	; 0xc0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
            bpp_opa_table = bpp2_opa_table;
 8008d6e:	ab15      	add	r3, sp, #84	; 0x54
 8008d70:	e735      	b.n	8008bde <lv_draw_letter+0x9e>
        bitmask = bitmask_init >> col_bit;
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 8008d74:	f8dd 801c 	ldr.w	r8, [sp, #28]
        bitmask = bitmask_init >> col_bit;
 8008d78:	fa43 f904 	asr.w	r9, r3, r4
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008d7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d7e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008d82:	9310      	str	r3, [sp, #64]	; 0x40
 8008d84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d86:	f3c3 2307 	ubfx	r3, r3, #8, #8
        bitmask = bitmask_init >> col_bit;
 8008d8a:	fa5f f989 	uxtb.w	r9, r9
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008d8e:	9312      	str	r3, [sp, #72]	; 0x48
        for(col = col_start; col < col_end; col++) {
 8008d90:	45b0      	cmp	r8, r6
 8008d92:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8008d96:	db15      	blt.n	8008dc4 <lv_draw_letter+0x284>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008d98:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8008d9c:	9907      	ldr	r1, [sp, #28]
 8008d9e:	9d06      	ldr	r5, [sp, #24]
 8008da0:	1b92      	subs	r2, r2, r6
 8008da2:	440a      	add	r2, r1
 8008da4:	fb13 f302 	smulbb	r3, r3, r2
 8008da8:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 8008daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008dac:	b2a4      	uxth	r4, r4
        map_p += (col_bit >> 3);
 8008dae:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8008db2:	3501      	adds	r5, #1
 8008db4:	930a      	str	r3, [sp, #40]	; 0x28
 8008db6:	b22b      	sxth	r3, r5
 8008db8:	9306      	str	r3, [sp, #24]
 8008dba:	9b11      	ldr	r3, [sp, #68]	; 0x44
        col_bit = col_bit & 0x7;
 8008dbc:	f004 0407 	and.w	r4, r4, #7
 8008dc0:	449b      	add	fp, r3
 8008dc2:	e7c6      	b.n	8008d52 <lv_draw_letter+0x212>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8008dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	f1c4 0108 	rsb	r1, r4, #8
 8008dcc:	ea09 0202 	and.w	r2, r9, r2
 8008dd0:	1ac9      	subs	r1, r1, r3
 8008dd2:	410a      	asrs	r2, r1
            if(letter_px != 0) {
 8008dd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8008dd8:	d021      	beq.n	8008e1e <lv_draw_letter+0x2de>
                if(opa == LV_OPA_COVER) {
 8008dda:	9905      	ldr	r1, [sp, #20]
 8008ddc:	29ff      	cmp	r1, #255	; 0xff
 8008dde:	d133      	bne.n	8008e48 <lv_draw_letter+0x308>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d001      	beq.n	8008de8 <lv_draw_letter+0x2a8>
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	5c9a      	ldrb	r2, [r3, r2]
                if(disp->driver.set_px_cb) {
 8008de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	461d      	mov	r5, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d035      	beq.n	8008e5e <lv_draw_letter+0x31e>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008df2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8008df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008df8:	9202      	str	r2, [sp, #8]
 8008dfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dfc:	9201      	str	r2, [sp, #4]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008dfe:	1acb      	subs	r3, r1, r3
 8008e00:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 8008e04:	990c      	ldr	r1, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008e06:	980f      	ldr	r0, [sp, #60]	; 0x3c
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008e08:	1a8a      	subs	r2, r1, r2
 8008e0a:	9906      	ldr	r1, [sp, #24]
 8008e0c:	440a      	add	r2, r1
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008e0e:	b212      	sxth	r2, r2
 8008e10:	9200      	str	r2, [sp, #0]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008e12:	4443      	add	r3, r8
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e18:	f8da 1008 	ldr.w	r1, [sl, #8]
 8008e1c:	47a8      	blx	r5
            if(col_bit < 8 - g.bpp) {
 8008e1e:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8008e22:	f1c3 0208 	rsb	r2, r3, #8
 8008e26:	4294      	cmp	r4, r2
            vdb_buf_tmp++;
 8008e28:	f107 0704 	add.w	r7, r7, #4
            if(col_bit < 8 - g.bpp) {
 8008e2c:	da2e      	bge.n	8008e8c <lv_draw_letter+0x34c>
                col_bit += g.bpp;
 8008e2e:	441c      	add	r4, r3
                bitmask = bitmask >> g.bpp;
 8008e30:	fa49 f903 	asr.w	r9, r9, r3
                col_bit += g.bpp;
 8008e34:	b2a4      	uxth	r4, r4
                bitmask = bitmask >> g.bpp;
 8008e36:	fa5f f989 	uxtb.w	r9, r9
 8008e3a:	f108 0801 	add.w	r8, r8, #1
 8008e3e:	fa0f f888 	sxth.w	r8, r8
 8008e42:	e7a5      	b.n	8008d90 <lv_draw_letter+0x250>
 8008e44:	08014f50 	.word	0x08014f50
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8008e48:	2b08      	cmp	r3, #8
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8008e4a:	bf1c      	itt	ne
 8008e4c:	9b08      	ldrne	r3, [sp, #32]
 8008e4e:	5c9a      	ldrbne	r2, [r3, r2]
 8008e50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008e54:	fb12 f203 	smulbb	r2, r2, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8008e58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008e5c:	e7c4      	b.n	8008de8 <lv_draw_letter+0x2a8>
                } else if(vdb_buf_tmp->full != color.full) {
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008e62:	428b      	cmp	r3, r1
 8008e64:	d0db      	beq.n	8008e1e <lv_draw_letter+0x2de>
                    if(px_opa > LV_OPA_MAX)
 8008e66:	2afb      	cmp	r2, #251	; 0xfb
 8008e68:	d901      	bls.n	8008e6e <lv_draw_letter+0x32e>
                        *vdb_buf_tmp = color;
 8008e6a:	6039      	str	r1, [r7, #0]
 8008e6c:	e7d7      	b.n	8008e1e <lv_draw_letter+0x2de>
                    else if(px_opa > LV_OPA_MIN) {
 8008e6e:	2a10      	cmp	r2, #16
 8008e70:	d9d5      	bls.n	8008e1e <lv_draw_letter+0x2de>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008e72:	783b      	ldrb	r3, [r7, #0]
 8008e74:	9202      	str	r2, [sp, #8]
 8008e76:	78ba      	ldrb	r2, [r7, #2]
 8008e78:	9201      	str	r2, [sp, #4]
 8008e7a:	787a      	ldrb	r2, [r7, #1]
 8008e7c:	9200      	str	r2, [sp, #0]
 8008e7e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008e84:	f7ff fc50 	bl	8008728 <lv_color_mix.isra.0>
 8008e88:	6038      	str	r0, [r7, #0]
 8008e8a:	e7c8      	b.n	8008e1e <lv_draw_letter+0x2de>
                map_p++;
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                bitmask = bitmask_init;
 8008e8e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
                map_p++;
 8008e92:	3301      	adds	r3, #1
 8008e94:	930a      	str	r3, [sp, #40]	; 0x28
                col_bit = 0;
 8008e96:	2400      	movs	r4, #0
 8008e98:	e7cf      	b.n	8008e3a <lv_draw_letter+0x2fa>
 8008e9a:	bf00      	nop

08008e9c <lv_draw_map>:
{
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	b095      	sub	sp, #84	; 0x54
 8008ea2:	461d      	mov	r5, r3
 8008ea4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8008ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eaa:	4614      	mov	r4, r2
 8008eac:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8008eb0:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8008eb4:	9310      	str	r3, [sp, #64]	; 0x40
    if(opa < LV_OPA_MIN) return;
 8008eb6:	2d0f      	cmp	r5, #15
{
 8008eb8:	4606      	mov	r6, r0
 8008eba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ebc:	920a      	str	r2, [sp, #40]	; 0x28
    if(opa < LV_OPA_MIN) return;
 8008ebe:	d97d      	bls.n	8008fbc <lv_draw_map+0x120>
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	920d      	str	r2, [sp, #52]	; 0x34
 8008ec4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008ec8:	2dfc      	cmp	r5, #252	; 0xfc
 8008eca:	920c      	str	r2, [sp, #48]	; 0x30
 8008ecc:	f3c3 4307 	ubfx	r3, r3, #16, #8
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	a812      	add	r0, sp, #72	; 0x48
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008ed6:	bf28      	it	cs
 8008ed8:	25ff      	movcs	r5, #255	; 0xff
 8008eda:	930e      	str	r3, [sp, #56]	; 0x38
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8008edc:	f003 fc8e 	bl	800c7fc <lv_area_intersect>
    if(union_ok == false) return;
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d06b      	beq.n	8008fbc <lv_draw_map+0x120>
    if(cords_p->y1 < masked_a.y1) {
 8008ee4:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8008ee8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8008eec:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8008ef0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8008efa:	bfb8      	it	lt
 8008efc:	1a5b      	sublt	r3, r3, r1
 8008efe:	ebaa 0a02 	sub.w	sl, sl, r2
 8008f02:	bfb8      	it	lt
 8008f04:	009b      	lsllt	r3, r3, #2
 8008f06:	fa0f fa8a 	sxth.w	sl, sl
 8008f0a:	bfb8      	it	lt
 8008f0c:	fb0a 4403 	mlalt	r4, sl, r3, r4
    if(cords_p->x1 < masked_a.x1) {
 8008f10:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8008f14:	4293      	cmp	r3, r2
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8008f16:	bfc4      	itt	gt
 8008f18:	1a9a      	subgt	r2, r3, r2
 8008f1a:	eb04 0482 	addgt.w	r4, r4, r2, lsl #2
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008f1e:	f7fe ffa5 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8008f22:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008f24:	f003 fa68 	bl	800c3f8 <lv_disp_get_buf>
 8008f28:	4683      	mov	fp, r0
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8008f2a:	f8bd 604e 	ldrh.w	r6, [sp, #78]	; 0x4e
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008f2e:	f8bb e012 	ldrh.w	lr, [fp, #18]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f32:	8a01      	ldrh	r1, [r0, #16]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008f34:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f38:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008f3c:	f8bd 704a 	ldrh.w	r7, [sp, #74]	; 0x4a
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8008f40:	eba6 060e 	sub.w	r6, r6, lr
 8008f44:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
 8008f48:	f8bb 6014 	ldrh.w	r6, [fp, #20]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008f4c:	1a5b      	subs	r3, r3, r1
 8008f4e:	3601      	adds	r6, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f50:	1a52      	subs	r2, r2, r1
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	1a71      	subs	r1, r6, r1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f56:	b292      	uxth	r2, r2
 8008f58:	b209      	sxth	r1, r1
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008f5a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8008f5e:	3301      	adds	r3, #1
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f60:	b210      	sxth	r0, r2
 8008f62:	9105      	str	r1, [sp, #20]
 8008f64:	1a9a      	subs	r2, r3, r2
 8008f66:	b213      	sxth	r3, r2
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008f68:	eba7 070e 	sub.w	r7, r7, lr
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008f6c:	9e05      	ldr	r6, [sp, #20]
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008f6e:	f8db 1008 	ldr.w	r1, [fp, #8]
 8008f72:	9309      	str	r3, [sp, #36]	; 0x24
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008f74:	b23f      	sxth	r7, r7
 8008f76:	ea4f 038a 	mov.w	r3, sl, lsl #2
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008f7a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8008f7e:	930b      	str	r3, [sp, #44]	; 0x2c
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008f80:	fb06 0007 	mla	r0, r6, r7, r0
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8008f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008f86:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008f8a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008f8e:	9104      	str	r1, [sp, #16]
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d151      	bne.n	8009038 <lv_draw_map+0x19c>
 8008f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d14e      	bne.n	8009038 <lv_draw_map+0x19c>
 8008f9a:	2dff      	cmp	r5, #255	; 0xff
 8008f9c:	d14c      	bne.n	8009038 <lv_draw_map+0x19c>
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d149      	bne.n	8009038 <lv_draw_map+0x19c>
        if(disp->driver.set_px_cb) {
 8008fa4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008fa8:	b95b      	cbnz	r3, 8008fc2 <lv_draw_map+0x126>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008fac:	ea4f 0a86 	mov.w	sl, r6, lsl #2
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008fb0:	ea4f 0983 	mov.w	r9, r3, lsl #2
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008fb4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8008fb8:	42bb      	cmp	r3, r7
 8008fba:	da26      	bge.n	800900a <lv_draw_map+0x16e>
}
 8008fbc:	b015      	add	sp, #84	; 0x54
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8008fc2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008fc6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8008fca:	42bb      	cmp	r3, r7
 8008fcc:	dbf6      	blt.n	8008fbc <lv_draw_map+0x120>
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	e011      	b.n	8008ff8 <lv_draw_map+0x15c>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008fd4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8008fd8:	f854 2029 	ldr.w	r2, [r4, r9, lsl #2]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008fdc:	9201      	str	r2, [sp, #4]
 8008fde:	9502      	str	r5, [sp, #8]
 8008fe0:	9700      	str	r7, [sp, #0]
 8008fe2:	444b      	add	r3, r9
 8008fe4:	f8d8 6014 	ldr.w	r6, [r8, #20]
 8008fe8:	9a05      	ldr	r2, [sp, #20]
 8008fea:	f8db 1008 	ldr.w	r1, [fp, #8]
 8008fee:	b21b      	sxth	r3, r3
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47b0      	blx	r6
 8008ff4:	f109 0901 	add.w	r9, r9, #1
                for(col = 0; col < map_useful_w; col++) {
 8008ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ffa:	fa0f f389 	sxth.w	r3, r9
 8008ffe:	4293      	cmp	r3, r2
 8009000:	dbe8      	blt.n	8008fd4 <lv_draw_map+0x138>
 8009002:	3701      	adds	r7, #1
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8009004:	4454      	add	r4, sl
 8009006:	b23f      	sxth	r7, r7
 8009008:	e7dd      	b.n	8008fc6 <lv_draw_map+0x12a>
                if(disp->driver.gpu_blend_cb == false) {
 800900a:	f8d8 601c 	ldr.w	r6, [r8, #28]
 800900e:	b966      	cbnz	r6, 800902a <lv_draw_map+0x18e>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8009010:	464a      	mov	r2, r9
 8009012:	4621      	mov	r1, r4
 8009014:	9804      	ldr	r0, [sp, #16]
 8009016:	f007 fbe1 	bl	80107dc <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	441c      	add	r4, r3
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	3701      	adds	r7, #1
 8009022:	4453      	add	r3, sl
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	b23f      	sxth	r7, r7
 8009028:	e7c4      	b.n	8008fb4 <lv_draw_map+0x118>
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 800902a:	9500      	str	r5, [sp, #0]
 800902c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902e:	9904      	ldr	r1, [sp, #16]
 8009030:	4622      	mov	r2, r4
 8009032:	4640      	mov	r0, r8
 8009034:	47b0      	blx	r6
 8009036:	e7f0      	b.n	800901a <lv_draw_map+0x17e>
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	2300      	movs	r3, #0
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009044:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009046:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009048:	f7ff fb6e 	bl	8008728 <lv_color_mix.isra.0>
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800904c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8009050:	9306      	str	r3, [sp, #24]
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8009052:	f04f 0900 	mov.w	r9, #0
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009056:	9b05      	ldr	r3, [sp, #20]
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8009058:	f36f 0907 	bfc	r9, #0, #8
 800905c:	f36f 290f 	bfc	r9, #8, #8
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009060:	009b      	lsls	r3, r3, #2
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8009062:	f6cf 7900 	movt	r9, #65280	; 0xff00
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8009066:	4682      	mov	sl, r0
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009068:	9311      	str	r3, [sp, #68]	; 0x44
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 800906a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800906e:	9a06      	ldr	r2, [sp, #24]
 8009070:	4293      	cmp	r3, r2
 8009072:	dba3      	blt.n	8008fbc <lv_draw_map+0x120>
 8009074:	2300      	movs	r3, #0
 8009076:	9f04      	ldr	r7, [sp, #16]
 8009078:	9408      	str	r4, [sp, #32]
 800907a:	9307      	str	r3, [sp, #28]
 800907c:	e04b      	b.n	8009116 <lv_draw_map+0x27a>
                if(alpha_byte) {
 800907e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d039      	beq.n	80090f8 <lv_draw_map+0x25c>
                    px_color = *((lv_color_t *)px_color_p);
 8009084:	9b08      	ldr	r3, [sp, #32]
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8009086:	78de      	ldrb	r6, [r3, #3]
                    px_color = *((lv_color_t *)px_color_p);
 8009088:	6818      	ldr	r0, [r3, #0]
                    if(px_opa == LV_OPA_TRANSP)
 800908a:	2e00      	cmp	r6, #0
 800908c:	d03c      	beq.n	8009108 <lv_draw_map+0x26c>
                    else if(px_opa != LV_OPA_COVER)
 800908e:	2eff      	cmp	r6, #255	; 0xff
 8009090:	d034      	beq.n	80090fc <lv_draw_map+0x260>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8009092:	fb16 f605 	smulbb	r6, r6, r5
 8009096:	f3c6 2607 	ubfx	r6, r6, #8, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 800909a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800909c:	b11b      	cbz	r3, 80090a6 <lv_draw_map+0x20a>
 800909e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80090a2:	4298      	cmp	r0, r3
 80090a4:	d030      	beq.n	8009108 <lv_draw_map+0x26c>
                if(recolor_opa != LV_OPA_TRANSP) {
 80090a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d053      	beq.n	8009154 <lv_draw_map+0x2b8>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 80090ac:	4581      	cmp	r9, r0
 80090ae:	d00e      	beq.n	80090ce <lv_draw_map+0x232>
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80090bc:	9300      	str	r3, [sp, #0]
                        last_img_px  = px_color;
 80090be:	4681      	mov	r9, r0
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 80090c0:	b2c3      	uxtb	r3, r0
 80090c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090c8:	f7ff fb2e 	bl	8008728 <lv_color_mix.isra.0>
 80090cc:	4682      	mov	sl, r0
                    if(disp->driver.set_px_cb) {
 80090ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80090d2:	469e      	mov	lr, r3
 80090d4:	b1a3      	cbz	r3, 8009100 <lv_draw_map+0x264>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 80090d6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80090da:	9a07      	ldr	r2, [sp, #28]
 80090dc:	9602      	str	r6, [sp, #8]
 80090de:	4413      	add	r3, r2
 80090e0:	f8cd a004 	str.w	sl, [sp, #4]
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 80090e4:	9a06      	ldr	r2, [sp, #24]
 80090e6:	9200      	str	r2, [sp, #0]
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	f8db 1008 	ldr.w	r1, [fp, #8]
 80090f0:	4640      	mov	r0, r8
 80090f2:	4676      	mov	r6, lr
 80090f4:	47b0      	blx	r6
 80090f6:	e007      	b.n	8009108 <lv_draw_map+0x26c>
                    px_color = *((lv_color_t *)px_color_p);
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	462e      	mov	r6, r5
 80090fe:	e7cc      	b.n	800909a <lv_draw_map+0x1fe>
                        if(opa_result == LV_OPA_COVER)
 8009100:	2eff      	cmp	r6, #255	; 0xff
 8009102:	d118      	bne.n	8009136 <lv_draw_map+0x29a>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8009104:	f8c7 a000 	str.w	sl, [r7]
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	3301      	adds	r3, #1
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	3304      	adds	r3, #4
 8009112:	3704      	adds	r7, #4
 8009114:	9308      	str	r3, [sp, #32]
            for(col = 0; col < map_useful_w; col++) {
 8009116:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800911a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800911c:	429a      	cmp	r2, r3
 800911e:	dcae      	bgt.n	800907e <lv_draw_map+0x1e2>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8009120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009122:	9a11      	ldr	r2, [sp, #68]	; 0x44
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8009124:	441c      	add	r4, r3
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8009126:	9b04      	ldr	r3, [sp, #16]
 8009128:	4413      	add	r3, r2
 800912a:	9304      	str	r3, [sp, #16]
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	3301      	adds	r3, #1
 8009130:	b21b      	sxth	r3, r3
 8009132:	9306      	str	r3, [sp, #24]
 8009134:	e799      	b.n	800906a <lv_draw_map+0x1ce>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8009136:	783b      	ldrb	r3, [r7, #0]
 8009138:	9602      	str	r6, [sp, #8]
 800913a:	78ba      	ldrb	r2, [r7, #2]
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	787a      	ldrb	r2, [r7, #1]
 8009140:	9200      	str	r2, [sp, #0]
 8009142:	f3ca 2107 	ubfx	r1, sl, #8, #8
 8009146:	f3ca 4207 	ubfx	r2, sl, #16, #8
 800914a:	fa5f f08a 	uxtb.w	r0, sl
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800914e:	f7ff faeb 	bl	8008728 <lv_color_mix.isra.0>
 8009152:	e00c      	b.n	800916e <lv_draw_map+0x2d2>
                    if(disp->driver.set_px_cb) {
 8009154:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009158:	469e      	mov	lr, r3
 800915a:	b133      	cbz	r3, 800916a <lv_draw_map+0x2ce>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 800915c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8009160:	9a07      	ldr	r2, [sp, #28]
 8009162:	9602      	str	r6, [sp, #8]
 8009164:	4413      	add	r3, r2
 8009166:	9001      	str	r0, [sp, #4]
 8009168:	e7bc      	b.n	80090e4 <lv_draw_map+0x248>
                        if(opa_result == LV_OPA_COVER)
 800916a:	2eff      	cmp	r6, #255	; 0xff
 800916c:	d101      	bne.n	8009172 <lv_draw_map+0x2d6>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 800916e:	6038      	str	r0, [r7, #0]
 8009170:	e7ca      	b.n	8009108 <lv_draw_map+0x26c>
 8009172:	783b      	ldrb	r3, [r7, #0]
 8009174:	9602      	str	r6, [sp, #8]
 8009176:	78ba      	ldrb	r2, [r7, #2]
 8009178:	9201      	str	r2, [sp, #4]
 800917a:	787a      	ldrb	r2, [r7, #1]
 800917c:	9200      	str	r2, [sp, #0]
 800917e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009182:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009186:	b2c0      	uxtb	r0, r0
 8009188:	e7e1      	b.n	800914e <lv_draw_map+0x2b2>
	...

0800918c <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800918c:	3804      	subs	r0, #4
 800918e:	b2c0      	uxtb	r0, r0
 8009190:	280a      	cmp	r0, #10
 8009192:	bf9a      	itte	ls
 8009194:	4b01      	ldrls	r3, [pc, #4]	; (800919c <lv_img_color_format_get_px_size+0x10>)
 8009196:	5c18      	ldrbls	r0, [r3, r0]
 8009198:	2000      	movhi	r0, #0
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 800919a:	4770      	bx	lr
 800919c:	080f3654 	.word	0x080f3654

080091a0 <lv_img_color_format_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_color_format_is_chroma_keyed(lv_img_cf_t cf)
{
 80091a0:	280a      	cmp	r0, #10
 80091a2:	d808      	bhi.n	80091b6 <lv_img_color_format_is_chroma_keyed+0x16>
 80091a4:	2301      	movs	r3, #1
 80091a6:	fa03 f000 	lsl.w	r0, r3, r0
 80091aa:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 80091ae:	bf14      	ite	ne
 80091b0:	4618      	movne	r0, r3
 80091b2:	2000      	moveq	r0, #0
 80091b4:	4770      	bx	lr
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 80091b6:	2000      	movs	r0, #0
    }

    return is_chroma_keyed;
}
 80091b8:	4770      	bx	lr

080091ba <lv_img_color_format_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_color_format_has_alpha(lv_img_cf_t cf)
{
 80091ba:	3802      	subs	r0, #2
 80091bc:	b2c0      	uxtb	r0, r0
 80091be:	280c      	cmp	r0, #12
 80091c0:	d809      	bhi.n	80091d6 <lv_img_color_format_has_alpha+0x1c>
 80091c2:	2301      	movs	r3, #1
 80091c4:	fa03 f000 	lsl.w	r0, r3, r0
 80091c8:	f641 6309 	movw	r3, #7689	; 0x1e09
 80091cc:	4218      	tst	r0, r3
 80091ce:	bf14      	ite	ne
 80091d0:	2001      	movne	r0, #1
 80091d2:	2000      	moveq	r0, #0
 80091d4:	4770      	bx	lr
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 80091d6:	2000      	movs	r0, #0
    }

    return has_alpha;
}
 80091d8:	4770      	bx	lr
	...

080091dc <lv_draw_img>:
{
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	b093      	sub	sp, #76	; 0x4c
 80091e2:	4604      	mov	r4, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	469a      	mov	sl, r3
 80091e8:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
    if(src == NULL) {
 80091ec:	4615      	mov	r5, r2
 80091ee:	b962      	cbnz	r2, 800920a <lv_draw_img+0x2e>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80091f0:	23ff      	movs	r3, #255	; 0xff
 80091f2:	4a64      	ldr	r2, [pc, #400]	; (8009384 <lv_draw_img+0x1a8>)
 80091f4:	f000 fb7a 	bl	80098ec <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80091f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091fc:	9505      	str	r5, [sp, #20]
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	9502      	str	r5, [sp, #8]
 8009204:	9501      	str	r5, [sp, #4]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8009206:	4b60      	ldr	r3, [pc, #384]	; (8009388 <lv_draw_img+0x1ac>)
 8009208:	e036      	b.n	8009278 <lv_draw_img+0x9c>
                                 const lv_style_t * style, lv_opa_t opa_scale)
{

    lv_area_t mask_com; /*Common area of mask and coords*/
    bool union_ok;
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 800920a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800920e:	4602      	mov	r2, r0
 8009210:	4640      	mov	r0, r8
 8009212:	f003 faf3 	bl	800c7fc <lv_area_intersect>
    if(union_ok == false) {
 8009216:	2800      	cmp	r0, #0
 8009218:	d048      	beq.n	80092ac <lv_draw_img+0xd0>
 800921a:	f89a 6045 	ldrb.w	r6, [sl, #69]	; 0x45
        return LV_RES_OK; /*Out of mask. There is nothing to draw so the image is drawn
                             successfully.*/
    }

    lv_opa_t opa =
 800921e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8009222:	bf18      	it	ne
 8009224:	fb06 f609 	mulne.w	r6, r6, r9
        opa_scale == LV_OPA_COVER ? style->image.opa : (uint16_t)((uint16_t)style->image.opa * opa_scale) >> 8;

    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8009228:	4651      	mov	r1, sl
 800922a:	4628      	mov	r0, r5
    lv_opa_t opa =
 800922c:	bf18      	it	ne
 800922e:	f3c6 2607 	ubfxne	r6, r6, #8, #8
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 8009232:	f002 faeb 	bl	800b80c <lv_img_cache_open>

    if(cdsc == NULL) return LV_RES_INV;
 8009236:	4681      	mov	r9, r0
 8009238:	2800      	cmp	r0, #0
 800923a:	d079      	beq.n	8009330 <lv_draw_img+0x154>

    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800923c:	7c02      	ldrb	r2, [r0, #16]
 800923e:	f002 021f 	and.w	r2, r2, #31
 8009242:	4610      	mov	r0, r2
 8009244:	f7ff ffac 	bl	80091a0 <lv_img_color_format_is_chroma_keyed>
 8009248:	9007      	str	r0, [sp, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 800924a:	4610      	mov	r0, r2
 800924c:	f7ff ffb5 	bl	80091ba <lv_img_color_format_has_alpha>

    if(cdsc->dec_dsc.error_msg != NULL) {
 8009250:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 8009254:	9008      	str	r0, [sp, #32]
    if(cdsc->dec_dsc.error_msg != NULL) {
 8009256:	b1bb      	cbz	r3, 8009288 <lv_draw_img+0xac>
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8009258:	23ff      	movs	r3, #255	; 0xff
 800925a:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <lv_draw_img+0x1a8>)
 800925c:	4639      	mov	r1, r7
 800925e:	4620      	mov	r0, r4
 8009260:	f000 fb44 	bl	80098ec <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 8009264:	2300      	movs	r3, #0
 8009266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	9204      	str	r2, [sp, #16]
 800926e:	9203      	str	r2, [sp, #12]
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	f8d9 301c 	ldr.w	r3, [r9, #28]
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4a42      	ldr	r2, [pc, #264]	; (8009384 <lv_draw_img+0x1a8>)
 800927c:	23ff      	movs	r3, #255	; 0xff
 800927e:	4639      	mov	r1, r7
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f8a9 	bl	80093d8 <lv_draw_label>
        return;
 8009286:	e011      	b.n	80092ac <lv_draw_img+0xd0>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8009288:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800928c:	b18a      	cbz	r2, 80092b2 <lv_draw_img+0xd6>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800928e:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	9b07      	ldr	r3, [sp, #28]
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	4639      	mov	r1, r7
 80092a4:	4633      	mov	r3, r6
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fdf8 	bl	8008e9c <lv_draw_map>
}
 80092ac:	b013      	add	sp, #76	; 0x4c
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80092b2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80092b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80092ba:	920d      	str	r2, [sp, #52]	; 0x34
 80092bc:	3501      	adds	r5, #1
 80092be:	1aed      	subs	r5, r5, r3
 80092c0:	b22d      	sxth	r5, r5
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 80092c2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80092c6:	f7ff f9eb 	bl	80086a0 <lv_draw_get_buf>
 80092ca:	9009      	str	r0, [sp, #36]	; 0x24
    memcpy(dest, src, sizeof(lv_area_t));
 80092cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80092d0:	ab10      	add	r3, sp, #64	; 0x40
 80092d2:	e883 0003 	stmia.w	r3, {r0, r1}

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 80092d6:	4618      	mov	r0, r3
 80092d8:	2101      	movs	r1, #1
 80092da:	930c      	str	r3, [sp, #48]	; 0x30
 80092dc:	f003 fa7b 	bl	800c7d6 <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 80092e0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80092e4:	8820      	ldrh	r0, [r4, #0]
        lv_coord_t y = mask_com.y1 - coords->y1;
 80092e6:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
 80092ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        lv_coord_t x = mask_com.x1 - coords->x1;
 80092ec:	1a09      	subs	r1, r1, r0
 80092ee:	b20b      	sxth	r3, r1
        lv_coord_t y = mask_com.y1 - coords->y1;
 80092f0:	8861      	ldrh	r1, [r4, #2]
        lv_coord_t x = mask_com.x1 - coords->x1;
 80092f2:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t y = mask_com.y1 - coords->y1;
 80092f4:	ebab 0101 	sub.w	r1, fp, r1
 80092f8:	b28b      	uxth	r3, r1
 80092fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80092fc:	4690      	mov	r8, r2
 80092fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009300:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8009304:	fa1f f388 	uxth.w	r3, r8
 8009308:	441a      	add	r2, r3
 800930a:	445b      	add	r3, fp
 800930c:	b21b      	sxth	r3, r3
 800930e:	4299      	cmp	r1, r3
 8009310:	b212      	sxth	r2, r2
 8009312:	dbcb      	blt.n	80092ac <lv_draw_img+0xd0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	990a      	ldr	r1, [sp, #40]	; 0x28
 800931a:	462b      	mov	r3, r5
 800931c:	4648      	mov	r0, r9
 800931e:	f002 fe41 	bl	800bfa4 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8009322:	2801      	cmp	r0, #1
 8009324:	f108 0801 	add.w	r8, r8, #1
 8009328:	d011      	beq.n	800934e <lv_draw_img+0x172>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800932a:	4648      	mov	r0, r9
 800932c:	f002 fe4a 	bl	800bfc4 <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8009330:	23ff      	movs	r3, #255	; 0xff
 8009332:	4a14      	ldr	r2, [pc, #80]	; (8009384 <lv_draw_img+0x1a8>)
 8009334:	4639      	mov	r1, r7
 8009336:	4620      	mov	r0, r4
 8009338:	f000 fad8 	bl	80098ec <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800933c:	2300      	movs	r3, #0
 800933e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	9204      	str	r2, [sp, #16]
 8009346:	9203      	str	r2, [sp, #12]
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	e75b      	b.n	8009206 <lv_draw_img+0x2a>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 800934e:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8009358:	9302      	str	r3, [sp, #8]
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	9b07      	ldr	r3, [sp, #28]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009364:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009366:	4633      	mov	r3, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7ff fd97 	bl	8008e9c <lv_draw_map>
            line.y1++;
 800936e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8009372:	3301      	adds	r3, #1
 8009374:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            line.y2++;
 8009378:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800937c:	3301      	adds	r3, #1
 800937e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8009382:	e7bc      	b.n	80092fe <lv_draw_img+0x122>
 8009384:	20015cc0 	.word	0x20015cc0
 8009388:	080f365f 	.word	0x080f365f

0800938c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800938c:	b150      	cbz	r0, 80093a4 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800938e:	7803      	ldrb	r3, [r0, #0]
 8009390:	f1a3 0220 	sub.w	r2, r3, #32
 8009394:	2a5f      	cmp	r2, #95	; 0x5f
 8009396:	d907      	bls.n	80093a8 <lv_img_src_get_type+0x1c>
    } else if(u8_p[0] >= 0x80) {
 8009398:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800939c:	bf14      	ite	ne
 800939e:	2002      	movne	r0, #2
 80093a0:	2000      	moveq	r0, #0
 80093a2:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 80093a4:	2003      	movs	r0, #3
 80093a6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80093a8:	2001      	movs	r0, #1
}
 80093aa:	4770      	bx	lr

080093ac <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 80093ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	d90a      	bls.n	80093cc <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80093b6:	2860      	cmp	r0, #96	; 0x60
 80093b8:	bf84      	itt	hi
 80093ba:	3820      	subhi	r0, #32
 80093bc:	b2c0      	uxtbhi	r0, r0
 80093be:	3841      	subs	r0, #65	; 0x41
 80093c0:	b2c0      	uxtb	r0, r0
 80093c2:	2805      	cmp	r0, #5
 80093c4:	d804      	bhi.n	80093d0 <hex_char_to_num+0x24>
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <hex_char_to_num+0x28>)
 80093c8:	5c18      	ldrb	r0, [r3, r0]
 80093ca:	4770      	bx	lr
 80093cc:	4618      	mov	r0, r3
 80093ce:	4770      	bx	lr
 80093d0:	2000      	movs	r0, #0
            default: result = 0; break;
        }
    }

    return result;
}
 80093d2:	4770      	bx	lr
 80093d4:	080f3667 	.word	0x080f3667

080093d8 <lv_draw_label>:
{
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	b0ab      	sub	sp, #172	; 0xac
 80093de:	4605      	mov	r5, r0
 80093e0:	f89d b0d4 	ldrb.w	fp, [sp, #212]	; 0xd4
 80093e4:	9309      	str	r3, [sp, #36]	; 0x24
 80093e6:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 80093ea:	930d      	str	r3, [sp, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 80093ec:	f01b 0f02 	tst.w	fp, #2
{
 80093f0:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 80093f4:	9107      	str	r1, [sp, #28]
 80093f6:	4614      	mov	r4, r2
 80093f8:	930e      	str	r3, [sp, #56]	; 0x38
 80093fa:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
    const lv_font_t * font = style->text.font;
 80093fe:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8009402:	f040 8095 	bne.w	8009530 <lv_draw_label+0x158>
    return area_p->x2 - area_p->x1 + 1;
 8009406:	8883      	ldrh	r3, [r0, #4]
 8009408:	8802      	ldrh	r2, [r0, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	b21b      	sxth	r3, r3
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8009410:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
        w = p.x;
 8009412:	9304      	str	r3, [sp, #16]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8009414:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8009418:	4413      	add	r3, r2
 800941a:	b29b      	uxth	r3, r3
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8009422:	9306      	str	r3, [sp, #24]
    pos.x = coords->x1;
 8009424:	882b      	ldrh	r3, [r5, #0]
 8009426:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    if(offset != NULL) {
 800942a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    pos.y = coords->y1;
 800942c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8009430:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(offset != NULL) {
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 81ea 	beq.w	800980e <lv_draw_label+0x436>
        x_ofs = offset->x;
 800943a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800943e:	930a      	str	r3, [sp, #40]	; 0x28
        y_ofs = offset->y;
 8009440:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8009442:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        pos.y += y_ofs;
 8009446:	18d1      	adds	r1, r2, r3
 8009448:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800944c:	f1b8 0f00 	cmp.w	r8, #0
 8009450:	f000 81e3 	beq.w	800981a <lv_draw_label+0x442>
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 81e0 	bne.w	800981a <lv_draw_label+0x442>
 800945a:	2a00      	cmp	r2, #0
 800945c:	f280 81dd 	bge.w	800981a <lv_draw_label+0x442>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8009460:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	9a06      	ldr	r2, [sp, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfb8      	it	lt
 800946c:	425b      	neglt	r3, r3
 800946e:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8009472:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
            hint->line_start = -1;
 8009476:	bfc4      	itt	gt
 8009478:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
 800947c:	f8c8 3000 	strgt.w	r3, [r8]
        last_line_start = hint->line_start;
 8009480:	f8d8 7000 	ldr.w	r7, [r8]
    if(hint && last_line_start >= 0) {
 8009484:	2f00      	cmp	r7, #0
 8009486:	f2c0 81c8 	blt.w	800981a <lv_draw_label+0x442>
        pos.y += hint->y;
 800948a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800948e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009492:	4413      	add	r3, r2
 8009494:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009498:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800949a:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 800949e:	f8cd b000 	str.w	fp, [sp]
 80094a2:	9b04      	ldr	r3, [sp, #16]
 80094a4:	4651      	mov	r1, sl
 80094a6:	4438      	add	r0, r7
 80094a8:	f003 ffb6 	bl	800d418 <lv_txt_get_next_line>
 80094ac:	19c6      	adds	r6, r0, r7
    while(pos.y + line_height < mask->y1) {
 80094ae:	9a06      	ldr	r2, [sp, #24]
 80094b0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80094b4:	4413      	add	r3, r2
 80094b6:	9a07      	ldr	r2, [sp, #28]
 80094b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80094bc:	4293      	cmp	r3, r2
 80094be:	db4c      	blt.n	800955a <lv_draw_label+0x182>
    if(flag & LV_TXT_FLAG_CENTER) {
 80094c0:	f01b 0304 	ands.w	r3, fp, #4
 80094c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c6:	d076      	beq.n	80095b6 <lv_draw_label+0x1de>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80094c8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80094ca:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80094ce:	f8cd b000 	str.w	fp, [sp]
 80094d2:	1bf1      	subs	r1, r6, r7
 80094d4:	4652      	mov	r2, sl
 80094d6:	b289      	uxth	r1, r1
 80094d8:	4438      	add	r0, r7
 80094da:	f004 f825 	bl	800d528 <lv_txt_get_width>
 80094de:	88ab      	ldrh	r3, [r5, #4]
 80094e0:	882a      	ldrh	r2, [r5, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80094e6:	b21b      	sxth	r3, r3
 80094e8:	1a18      	subs	r0, r3, r0
 80094ea:	2302      	movs	r3, #2
 80094ec:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 80094f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80094f4:	4418      	add	r0, r3
 80094f6:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 80094fc:	49b7      	ldr	r1, [pc, #732]	; (80097dc <lv_draw_label+0x404>)
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80094fe:	2bff      	cmp	r3, #255	; 0xff
 8009500:	bf18      	it	ne
 8009502:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8009504:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009508:	bf1c      	itt	ne
 800950a:	4353      	mulne	r3, r2
 800950c:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009510:	a816      	add	r0, sp, #88	; 0x58
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8009512:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009514:	f7fe fe66 	bl	80081e4 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8009518:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800951a:	9318      	str	r3, [sp, #96]	; 0x60
 800951c:	9317      	str	r3, [sp, #92]	; 0x5c
    uint16_t par_start = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	9308      	str	r3, [sp, #32]
    while(txt[line_start] != '\0') {
 8009522:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009524:	5ddb      	ldrb	r3, [r3, r7]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d15a      	bne.n	80095e0 <lv_draw_label+0x208>
}
 800952a:	b02b      	add	sp, #172	; 0xac
 800952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8009530:	f9b2 3038 	ldrsh.w	r3, [r2, #56]	; 0x38
 8009534:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8009536:	f8cd b008 	str.w	fp, [sp, #8]
 800953a:	f647 4218 	movw	r2, #31768	; 0x7c18
 800953e:	9201      	str	r2, [sp, #4]
 8009540:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8009544:	9200      	str	r2, [sp, #0]
 8009546:	a816      	add	r0, sp, #88	; 0x58
 8009548:	4652      	mov	r2, sl
 800954a:	f004 f835 	bl	800d5b8 <lv_txt_get_size>
        w = p.x;
 800954e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8009552:	e75d      	b.n	8009410 <lv_draw_label+0x38>
    lv_coord_t x_ofs = 0;
 8009554:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8009556:	930a      	str	r3, [sp, #40]	; 0x28
 8009558:	e77f      	b.n	800945a <lv_draw_label+0x82>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800955a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800955c:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8009560:	f8cd b000 	str.w	fp, [sp]
 8009564:	4433      	add	r3, r6
 8009566:	9308      	str	r3, [sp, #32]
 8009568:	4651      	mov	r1, sl
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	9808      	ldr	r0, [sp, #32]
 800956e:	f003 ff53 	bl	800d418 <lv_txt_get_next_line>
        pos.y += line_height;
 8009572:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8009576:	9a05      	ldr	r2, [sp, #20]
 8009578:	4413      	add	r3, r2
 800957a:	b21b      	sxth	r3, r3
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800957c:	4430      	add	r0, r6
        pos.y += line_height;
 800957e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8009582:	f1b8 0f00 	cmp.w	r8, #0
 8009586:	d00f      	beq.n	80095a8 <lv_draw_label+0x1d0>
 8009588:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800958c:	db0c      	blt.n	80095a8 <lv_draw_label+0x1d0>
 800958e:	f8d8 2000 	ldr.w	r2, [r8]
 8009592:	2a00      	cmp	r2, #0
 8009594:	da08      	bge.n	80095a8 <lv_draw_label+0x1d0>
            hint->y          = pos.y - coords->y1;
 8009596:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
            hint->line_start = line_start;
 800959a:	f8c8 6000 	str.w	r6, [r8]
            hint->y          = pos.y - coords->y1;
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	f8c8 3004 	str.w	r3, [r8, #4]
            hint->coord_y    = coords->y1;
 80095a4:	f8c8 2008 	str.w	r2, [r8, #8]
        if(txt[line_start] == '\0') return;
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	4637      	mov	r7, r6
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0bb      	beq.n	800952a <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80095b2:	4606      	mov	r6, r0
 80095b4:	e77b      	b.n	80094ae <lv_draw_label+0xd6>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 80095b6:	f01b 0f08 	tst.w	fp, #8
 80095ba:	d09e      	beq.n	80094fa <lv_draw_label+0x122>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80095bc:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80095be:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80095c2:	f8cd b000 	str.w	fp, [sp]
 80095c6:	1bf1      	subs	r1, r6, r7
 80095c8:	4652      	mov	r2, sl
 80095ca:	b289      	uxth	r1, r1
 80095cc:	4438      	add	r0, r7
 80095ce:	f003 ffab 	bl	800d528 <lv_txt_get_width>
 80095d2:	88ab      	ldrh	r3, [r5, #4]
 80095d4:	882a      	ldrh	r2, [r5, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 80095da:	b21b      	sxth	r3, r3
 80095dc:	1a18      	subs	r0, r3, r0
 80095de:	e787      	b.n	80094f0 <lv_draw_label+0x118>
        if(offset != NULL) {
 80095e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80095e2:	b12b      	cbz	r3, 80095f0 <lv_draw_label+0x218>
            pos.x += x_ofs;
 80095e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80095e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ea:	4413      	add	r3, r2
 80095ec:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80095f0:	f00b 0301 	and.w	r3, fp, #1
        i         = line_start;
 80095f4:	9713      	str	r7, [sp, #76]	; 0x4c
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80095f6:	9311      	str	r3, [sp, #68]	; 0x44
        cmd_state = CMD_STATE_WAIT;
 80095f8:	2700      	movs	r7, #0
        while(i < line_end) {
 80095fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095fc:	429e      	cmp	r6, r3
 80095fe:	d83a      	bhi.n	8009676 <lv_draw_label+0x29e>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009600:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009602:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8009606:	f8cd b000 	str.w	fp, [sp]
 800960a:	199f      	adds	r7, r3, r6
 800960c:	4651      	mov	r1, sl
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	4638      	mov	r0, r7
 8009612:	f003 ff01 	bl	800d418 <lv_txt_get_next_line>
        pos.x = coords->x1;
 8009616:	882b      	ldrh	r3, [r5, #0]
 8009618:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(flag & LV_TXT_FLAG_CENTER) {
 800961c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800961e:	4601      	mov	r1, r0
 8009620:	eb00 0806 	add.w	r8, r0, r6
        if(flag & LV_TXT_FLAG_CENTER) {
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80df 	beq.w	80097e8 <lv_draw_label+0x410>
            line_width =
 800962a:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800962e:	f8cd b000 	str.w	fp, [sp]
 8009632:	4652      	mov	r2, sl
 8009634:	4638      	mov	r0, r7
 8009636:	f003 ff77 	bl	800d528 <lv_txt_get_width>
 800963a:	88ab      	ldrh	r3, [r5, #4]
 800963c:	882a      	ldrh	r2, [r5, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009642:	b21b      	sxth	r3, r3
 8009644:	1a18      	subs	r0, r3, r0
 8009646:	2302      	movs	r3, #2
 8009648:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 800964c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8009650:	4418      	add	r0, r3
 8009652:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 8009656:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800965a:	9a05      	ldr	r2, [sp, #20]
 800965c:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800965e:	9a07      	ldr	r2, [sp, #28]
 8009660:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 8009664:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 8009666:	429a      	cmp	r2, r3
        pos.y += line_height;
 8009668:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 800966c:	4637      	mov	r7, r6
        if(pos.y > mask->y2) return;
 800966e:	f6ff af5c 	blt.w	800952a <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009672:	4646      	mov	r6, r8
 8009674:	e755      	b.n	8009522 <lv_draw_label+0x14a>
            letter      = lv_txt_encoded_next(txt, &i);
 8009676:	4b5a      	ldr	r3, [pc, #360]	; (80097e0 <lv_draw_label+0x408>)
 8009678:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	a913      	add	r1, sp, #76	; 0x4c
 800967e:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009680:	9a34      	ldr	r2, [sp, #208]	; 0xd0
            letter      = lv_txt_encoded_next(txt, &i);
 8009682:	9006      	str	r0, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009684:	4b56      	ldr	r3, [pc, #344]	; (80097e0 <lv_draw_label+0x408>)
 8009686:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4410      	add	r0, r2
 800968c:	2100      	movs	r1, #0
 800968e:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009690:	9b11      	ldr	r3, [sp, #68]	; 0x44
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009692:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009694:	2b00      	cmp	r3, #0
 8009696:	d051      	beq.n	800973c <lv_draw_label+0x364>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009698:	9b06      	ldr	r3, [sp, #24]
 800969a:	2b23      	cmp	r3, #35	; 0x23
 800969c:	d10c      	bne.n	80096b8 <lv_draw_label+0x2e0>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800969e:	b927      	cbnz	r7, 80096aa <lv_draw_label+0x2d2>
                        par_start = i;
 80096a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80096a4:	9308      	str	r3, [sp, #32]
                        cmd_state = CMD_STATE_PAR;
 80096a6:	2701      	movs	r7, #1
                        continue;
 80096a8:	e7a7      	b.n	80095fa <lv_draw_label+0x222>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 80096aa:	2f01      	cmp	r7, #1
 80096ac:	f000 80b7 	beq.w	800981e <lv_draw_label+0x446>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 80096b0:	2f02      	cmp	r7, #2
 80096b2:	d145      	bne.n	8009740 <lv_draw_label+0x368>
                        cmd_state = CMD_STATE_WAIT;
 80096b4:	2700      	movs	r7, #0
 80096b6:	e7a0      	b.n	80095fa <lv_draw_label+0x222>
                if(cmd_state == CMD_STATE_PAR) {
 80096b8:	2f01      	cmp	r7, #1
 80096ba:	d13f      	bne.n	800973c <lv_draw_label+0x364>
                    if(letter == ' ') {
 80096bc:	9b06      	ldr	r3, [sp, #24]
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d19b      	bne.n	80095fa <lv_draw_label+0x222>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80096c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096c4:	9a08      	ldr	r2, [sp, #32]
 80096c6:	1a9b      	subs	r3, r3, r2
 80096c8:	2b07      	cmp	r3, #7
 80096ca:	d134      	bne.n	8009736 <lv_draw_label+0x35e>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 80096cc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80096ce:	4413      	add	r3, r2
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	9014      	str	r0, [sp, #80]	; 0x50
 80096d4:	0e01      	lsrs	r1, r0, #24
 80096d6:	889b      	ldrh	r3, [r3, #4]
 80096d8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 80096dc:	0c07      	lsrs	r7, r0, #16
 80096de:	ea4f 2810 	mov.w	r8, r0, lsr #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 80096e2:	b2c0      	uxtb	r0, r0
 80096e4:	f7ff fe62 	bl	80093ac <hex_char_to_num>
 80096e8:	4602      	mov	r2, r0
 80096ea:	fa5f f088 	uxtb.w	r0, r8
 80096ee:	f7ff fe5d 	bl	80093ac <hex_char_to_num>
 80096f2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80096f6:	b2f8      	uxtb	r0, r7
 80096f8:	f7ff fe58 	bl	80093ac <hex_char_to_num>
 80096fc:	4607      	mov	r7, r0
 80096fe:	b2c8      	uxtb	r0, r1
 8009700:	f7ff fe54 	bl	80093ac <hex_char_to_num>
 8009704:	eb00 1107 	add.w	r1, r0, r7, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8009708:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800970c:	f7ff fe4e 	bl	80093ac <hex_char_to_num>
 8009710:	4607      	mov	r7, r0
 8009712:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
 8009716:	f7ff fe49 	bl	80093ac <hex_char_to_num>
 800971a:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800971e:	f360 0907 	bfi	r9, r0, #0, #8
 8009722:	f361 290f 	bfi	r9, r1, #8, #8
 8009726:	f362 4917 	bfi	r9, r2, #16, #8
 800972a:	f049 497f 	orr.w	r9, r9, #4278190080	; 0xff000000
 800972e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8009732:	2702      	movs	r7, #2
 8009734:	e761      	b.n	80095fa <lv_draw_label+0x222>
                            recolor.full = style->text.color.full;
 8009736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009738:	930b      	str	r3, [sp, #44]	; 0x2c
 800973a:	e7fa      	b.n	8009732 <lv_draw_label+0x35a>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800973c:	2f02      	cmp	r7, #2
 800973e:	d04a      	beq.n	80097d6 <lv_draw_label+0x3fe>
            lv_color_t color = style->text.color;
 8009740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8009742:	9906      	ldr	r1, [sp, #24]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8009744:	930c      	str	r3, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8009746:	4650      	mov	r0, sl
 8009748:	f002 fc78 	bl	800c03c <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800974c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800974e:	b203      	sxth	r3, r0
 8009750:	9310      	str	r3, [sp, #64]	; 0x40
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8009752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009756:	429a      	cmp	r2, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8009758:	4680      	mov	r8, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800975a:	d026      	beq.n	80097aa <lv_draw_label+0x3d2>
 800975c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975e:	429a      	cmp	r2, r3
 8009760:	d023      	beq.n	80097aa <lv_draw_label+0x3d2>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8009762:	4b20      	ldr	r3, [pc, #128]	; (80097e4 <lv_draw_label+0x40c>)
 8009764:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800976a:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 800976c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976e:	4298      	cmp	r0, r3
 8009770:	dd1b      	ble.n	80097aa <lv_draw_label+0x3d2>
 8009772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009774:	4298      	cmp	r0, r3
 8009776:	dc18      	bgt.n	80097aa <lv_draw_label+0x3d2>
                    sel_coords.x1 = pos.x;
 8009778:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800977c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
                    sel_coords.x1 = pos.x;
 800977e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8009782:	3b01      	subs	r3, #1
 8009784:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 8009786:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 800978a:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800978e:	4443      	add	r3, r8
 8009790:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                    sel_coords.y2 = pos.y + line_height - 1;
 8009794:	9b05      	ldr	r3, [sp, #20]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8009796:	9907      	ldr	r1, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
 8009798:	3a01      	subs	r2, #1
 800979a:	441a      	add	r2, r3
 800979c:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	aa16      	add	r2, sp, #88	; 0x58
 80097a4:	a814      	add	r0, sp, #80	; 0x50
 80097a6:	f000 f8a1 	bl	80098ec <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 80097aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4652      	mov	r2, sl
 80097b4:	9b06      	ldr	r3, [sp, #24]
 80097b6:	9907      	ldr	r1, [sp, #28]
 80097b8:	a812      	add	r0, sp, #72	; 0x48
 80097ba:	f7ff f9c1 	bl	8008b40 <lv_draw_letter>
            if(letter_w > 0) {
 80097be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f77f af1a 	ble.w	80095fa <lv_draw_label+0x222>
                pos.x += letter_w + style->text.letter_space;
 80097c6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80097ca:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80097cc:	4413      	add	r3, r2
 80097ce:	4498      	add	r8, r3
 80097d0:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
 80097d4:	e711      	b.n	80095fa <lv_draw_label+0x222>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 80097d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d8:	e7b3      	b.n	8009742 <lv_draw_label+0x36a>
 80097da:	bf00      	nop
 80097dc:	20015e00 	.word	0x20015e00
 80097e0:	20000128 	.word	0x20000128
 80097e4:	20000120 	.word	0x20000120
        else if(flag & LV_TXT_FLAG_RIGHT) {
 80097e8:	f01b 0f08 	tst.w	fp, #8
 80097ec:	f43f af33 	beq.w	8009656 <lv_draw_label+0x27e>
            line_width =
 80097f0:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 80097f4:	f8cd b000 	str.w	fp, [sp]
 80097f8:	4652      	mov	r2, sl
 80097fa:	4638      	mov	r0, r7
 80097fc:	f003 fe94 	bl	800d528 <lv_txt_get_width>
 8009800:	88ab      	ldrh	r3, [r5, #4]
 8009802:	882a      	ldrh	r2, [r5, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8009808:	b21b      	sxth	r3, r3
 800980a:	1a18      	subs	r0, r3, r0
 800980c:	e71e      	b.n	800964c <lv_draw_label+0x274>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800980e:	f1b8 0f00 	cmp.w	r8, #0
 8009812:	f47f ae9f 	bne.w	8009554 <lv_draw_label+0x17c>
    lv_coord_t x_ofs = 0;
 8009816:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    uint32_t line_start     = 0;
 800981a:	2700      	movs	r7, #0
 800981c:	e63c      	b.n	8009498 <lv_draw_label+0xc0>
                        cmd_state = CMD_STATE_WAIT;
 800981e:	2700      	movs	r7, #0
 8009820:	e78e      	b.n	8009740 <lv_draw_label+0x368>
 8009822:	bf00      	nop

08009824 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	460e      	mov	r6, r1
 8009828:	4604      	mov	r4, r0
 800982a:	4615      	mov	r5, r2
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800982c:	f7fe fb1e 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8009830:	f002 fdd2 	bl	800c3d8 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 8009834:	1071      	asrs	r1, r6, #1
 8009836:	428c      	cmp	r4, r1
 8009838:	db03      	blt.n	8009842 <lv_draw_cont_radius_corr+0x1e>
        r = (w >> 1);
 800983a:	b28c      	uxth	r4, r1
        if(r != 0) r--;
 800983c:	b10c      	cbz	r4, 8009842 <lv_draw_cont_radius_corr+0x1e>
 800983e:	3c01      	subs	r4, #1
 8009840:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 8009842:	106a      	asrs	r2, r5, #1
 8009844:	4294      	cmp	r4, r2
 8009846:	db03      	blt.n	8009850 <lv_draw_cont_radius_corr+0x2c>
        r = (h >> 1);
 8009848:	b294      	uxth	r4, r2
        if(r != 0) r--;
 800984a:	b124      	cbz	r4, 8009856 <lv_draw_cont_radius_corr+0x32>
 800984c:	3c01      	subs	r4, #1
 800984e:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 8009850:	b10c      	cbz	r4, 8009856 <lv_draw_cont_radius_corr+0x32>
 8009852:	1a24      	subs	r4, r4, r0
 8009854:	b2a4      	uxth	r4, r4

    return r;
}
 8009856:	4620      	mov	r0, r4
 8009858:	bd70      	pop	{r4, r5, r6, pc}

0800985a <lv_color_mix.isra.0>:
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
 800985a:	b570      	push	{r4, r5, r6, lr}
 800985c:	f89d 4018 	ldrb.w	r4, [sp, #24]
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009860:	b2a5      	uxth	r5, r4
 8009862:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009866:	4363      	muls	r3, r4
 8009868:	fb00 3305 	mla	r3, r0, r5, r3
 800986c:	f3c3 2307 	ubfx	r3, r3, #8, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009870:	2000      	movs	r0, #0
 8009872:	f363 0007 	bfi	r0, r3, #0, #8
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009876:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800987a:	b2a6      	uxth	r6, r4
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800987c:	fb13 f306 	smulbb	r3, r3, r6
 8009880:	fb01 3105 	mla	r1, r1, r5, r3
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009884:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009888:	fb13 f606 	smulbb	r6, r3, r6
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800988c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009890:	fb02 6205 	mla	r2, r2, r5, r6
    return ret;
 8009894:	f361 200f 	bfi	r0, r1, #8, #8
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009898:	f3c2 2207 	ubfx	r2, r2, #8, #8
    return ret;
 800989c:	f362 4017 	bfi	r0, r2, #16, #8
}
 80098a0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080098a8 <antialias_get_opa_circ>:
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 80098a8:	2802      	cmp	r0, #2
 80098aa:	d105      	bne.n	80098b8 <antialias_get_opa_circ+0x10>
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <antialias_get_opa_circ+0x34>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80098ae:	5c58      	ldrb	r0, [r3, r1]
 80098b0:	fb10 f002 	smulbb	r0, r0, r2
 80098b4:	0a00      	lsrs	r0, r0, #8
}
 80098b6:	4770      	bx	lr
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 80098b8:	2803      	cmp	r0, #3
 80098ba:	d101      	bne.n	80098c0 <antialias_get_opa_circ+0x18>
 80098bc:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <antialias_get_opa_circ+0x38>)
 80098be:	e7f6      	b.n	80098ae <antialias_get_opa_circ+0x6>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80098c0:	2804      	cmp	r0, #4
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80098c2:	bf1b      	ittet	ne
 80098c4:	ebc1 01c1 	rsbne	r1, r1, r1, lsl #3
 80098c8:	f100 33ff 	addne.w	r3, r0, #4294967295	; 0xffffffff
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80098cc:	4b05      	ldreq	r3, [pc, #20]	; (80098e4 <antialias_get_opa_circ+0x3c>)
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 80098ce:	fbb1 f1f3 	udivne	r1, r1, r3
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80098d2:	bf1c      	itt	ne
 80098d4:	4b04      	ldrne	r3, [pc, #16]	; (80098e8 <antialias_get_opa_circ+0x40>)
 80098d6:	b2c9      	uxtbne	r1, r1
 80098d8:	e7e9      	b.n	80098ae <antialias_get_opa_circ+0x6>
 80098da:	bf00      	nop
 80098dc:	080f366d 	.word	0x080f366d
 80098e0:	080f366f 	.word	0x080f366f
 80098e4:	080f3672 	.word	0x080f3672
 80098e8:	080f3676 	.word	0x080f3676

080098ec <lv_draw_rect>:
{
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b0b1      	sub	sp, #196	; 0xc4
 80098f2:	4682      	mov	sl, r0
 80098f4:	9204      	str	r2, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80098f6:	88c2      	ldrh	r2, [r0, #6]
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	8843      	ldrh	r3, [r0, #2]
 80098fc:	3201      	adds	r2, #1
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	b212      	sxth	r2, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009902:	2a00      	cmp	r2, #0
{
 8009904:	4689      	mov	r9, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009906:	f340 86a6 	ble.w	800a656 <lv_draw_rect+0xd6a>
    return area_p->x2 - area_p->x1 + 1;
 800990a:	8881      	ldrh	r1, [r0, #4]
 800990c:	8803      	ldrh	r3, [r0, #0]
 800990e:	3101      	adds	r1, #1
 8009910:	1ac9      	subs	r1, r1, r3
 8009912:	b209      	sxth	r1, r1
 8009914:	2900      	cmp	r1, #0
 8009916:	f340 869e 	ble.w	800a656 <lv_draw_rect+0xd6a>
    if(style->body.shadow.width != 0) {
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 82ce 	beq.w	8009ec2 <lv_draw_rect+0x5d6>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	8998      	ldrh	r0, [r3, #12]
 800992a:	f7ff ff7b 	bl	8009824 <lv_draw_cont_radius_corr>
    memcpy(dest, src, sizeof(lv_area_t));
 800992e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009932:	4604      	mov	r4, r0
 8009934:	f8da 0000 	ldr.w	r0, [sl]
 8009938:	ab26      	add	r3, sp, #152	; 0x98
 800993a:	c303      	stmia	r3!, {r0, r1}
    area_tmp.x1 += radius;
 800993c:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8009940:	4423      	add	r3, r4
 8009942:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    area_tmp.x2 -= radius;
 8009946:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800994a:	a926      	add	r1, sp, #152	; 0x98
    area_tmp.x2 -= radius;
 800994c:	1b1b      	subs	r3, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800994e:	4648      	mov	r0, r9
    area_tmp.x2 -= radius;
 8009950:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009954:	f002 ffd4 	bl	800c900 <lv_area_is_in>
 8009958:	2800      	cmp	r0, #0
 800995a:	f040 82b2 	bne.w	8009ec2 <lv_draw_rect+0x5d6>
 800995e:	f8da 0000 	ldr.w	r0, [sl]
 8009962:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009966:	ab26      	add	r3, sp, #152	; 0x98
 8009968:	c303      	stmia	r3!, {r0, r1}
    area_tmp.y1 += radius;
 800996a:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800996e:	4423      	add	r3, r4
 8009970:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    area_tmp.y2 -= radius;
 8009974:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009978:	a926      	add	r1, sp, #152	; 0x98
    area_tmp.y2 -= radius;
 800997a:	1b1c      	subs	r4, r3, r4
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800997c:	4648      	mov	r0, r9
    area_tmp.y2 -= radius;
 800997e:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009982:	f002 ffbd 	bl	800c900 <lv_area_is_in>
 8009986:	4605      	mov	r5, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	f040 829a 	bne.w	8009ec2 <lv_draw_rect+0x5d6>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	7f9b      	ldrb	r3, [r3, #30]
 8009992:	2b01      	cmp	r3, #1
 8009994:	f040 820d 	bne.w	8009db2 <lv_draw_rect+0x4c6>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009998:	f7fe fa68 	bl	8007e6c <lv_refr_get_disp_refreshing>
 800999c:	f002 fd1c 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80099a0:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 80099a2:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80099a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 80099b0:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 80099b4:	3201      	adds	r2, #1
 80099b6:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80099b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80099bc:	3101      	adds	r1, #1
 80099be:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80099c0:	9b04      	ldr	r3, [sp, #16]
 80099c2:	b209      	sxth	r1, r1
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80099c4:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80099c6:	b212      	sxth	r2, r2
 80099c8:	8998      	ldrh	r0, [r3, #12]
 80099ca:	f7ff ff2b 	bl	8009824 <lv_draw_cont_radius_corr>
    radius += aa;
 80099ce:	b2a4      	uxth	r4, r4
 80099d0:	4420      	add	r0, r4
 80099d2:	b283      	uxth	r3, r0
 80099d4:	9306      	str	r3, [sp, #24]
    int16_t filter_width = 2 * swidth + 1;
 80099d6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    radius += aa;
 80099da:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80099de:	9a05      	ldr	r2, [sp, #20]
    radius += aa;
 80099e0:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t filter_width = 2 * swidth + 1;
 80099e2:	ea4f 0846 	mov.w	r8, r6, lsl #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80099e6:	4413      	add	r3, r2
    int16_t filter_width = 2 * swidth + 1;
 80099e8:	f108 0801 	add.w	r8, r8, #1
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80099ec:	1d18      	adds	r0, r3, #4
    int16_t filter_width = 2 * swidth + 1;
 80099ee:	fa0f f888 	sxth.w	r8, r8
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 80099f2:	f020 0003 	bic.w	r0, r0, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 80099f6:	f108 0703 	add.w	r7, r8, #3
    curve_x_size *= sizeof(lv_coord_t);
 80099fa:	0042      	lsls	r2, r0, #1
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 80099fc:	f027 0703 	bic.w	r7, r7, #3
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009a00:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009a04:	4438      	add	r0, r7
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009a06:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	f7fe fe49 	bl	80086a0 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8009a0e:	9a07      	ldr	r2, [sp, #28]
 8009a10:	1883      	adds	r3, r0, r2
    memset(curve_x, 0, curve_x_size);
 8009a12:	4629      	mov	r1, r5
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8009a14:	930d      	str	r3, [sp, #52]	; 0x34
    lv_circ_init(&circ, &circ_tmp, radius);
 8009a16:	ad25      	add	r5, sp, #148	; 0x94
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8009a18:	19c3      	adds	r3, r0, r7
    lv_circ_init(&circ, &circ_tmp, radius);
 8009a1a:	f10d 0792 	add.w	r7, sp, #146	; 0x92
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 8009a1e:	4683      	mov	fp, r0
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8009a20:	930e      	str	r3, [sp, #56]	; 0x38
    memset(curve_x, 0, curve_x_size);
 8009a22:	f006 fee6 	bl	80107f2 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f002 ff85 	bl	800c93a <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009a30:	4628      	mov	r0, r5
 8009a32:	f002 ff89 	bl	800c948 <lv_circ_cont>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d159      	bne.n	8009aee <lv_draw_rect+0x202>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	2bff      	cmp	r3, #255	; 0xff
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	bf18      	it	ne
 8009a42:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8009a44:	7b9b      	ldrb	r3, [r3, #14]
 8009a46:	bf1c      	itt	ne
 8009a48:	4353      	mulne	r3, r2
 8009a4a:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8009a54:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8009a58:	4359      	muls	r1, r3
                             (filter_width * filter_width);
 8009a5a:	fb08 f508 	mul.w	r5, r8, r8
 8009a5e:	4353      	muls	r3, r2
 8009a60:	2200      	movs	r2, #0
    for(line = 0; line < filter_width; line++) {
 8009a62:	b210      	sxth	r0, r2
 8009a64:	4580      	cmp	r8, r0
 8009a66:	dc53      	bgt.n	8009b10 <lv_draw_rect+0x224>
    ofs_rb.x = coords->x2 - radius - aa;
 8009a68:	9a06      	ldr	r2, [sp, #24]
 8009a6a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	1b1b      	subs	r3, r3, r4
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	9310      	str	r3, [sp, #64]	; 0x40
 8009a76:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009a7a:	9316      	str	r3, [sp, #88]	; 0x58
    ofs_rb.y = coords->y2 - radius - aa;
 8009a7c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	1b1b      	subs	r3, r3, r4
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	9311      	str	r3, [sp, #68]	; 0x44
 8009a88:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8009a8c:	9312      	str	r3, [sp, #72]	; 0x48
    ofs_rt.y = coords->y1 + radius + aa;
 8009a8e:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009a92:	4423      	add	r3, r4
 8009a94:	4413      	add	r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a9a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8009a9e:	9314      	str	r3, [sp, #80]	; 0x50
    ofs_lb.x = coords->x1 + radius + aa;
 8009aa0:	f8ba 3000 	ldrh.w	r3, [sl]
 8009aa4:	441c      	add	r4, r3
 8009aa6:	4414      	add	r4, r2
 8009aa8:	b2a3      	uxth	r3, r4
 8009aaa:	9315      	str	r3, [sp, #84]	; 0x54
 8009aac:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8009ab0:	9317      	str	r3, [sp, #92]	; 0x5c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009ab2:	4276      	negs	r6, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	930a      	str	r3, [sp, #40]	; 0x28
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009ab8:	b233      	sxth	r3, r6
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8009ac0:	9307      	str	r3, [sp, #28]
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	f2c0 81fb 	blt.w	8009ec2 <lv_draw_rect+0x5d6>
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009acc:	9b05      	ldr	r3, [sp, #20]
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009ace:	eb0b 0542 	add.w	r5, fp, r2, lsl #1
 8009ad2:	2000      	movs	r0, #0
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009ad4:	425c      	negs	r4, r3
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8009ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ad8:	b283      	uxth	r3, r0
 8009ada:	429a      	cmp	r2, r3
 8009adc:	9308      	str	r3, [sp, #32]
 8009ade:	db3a      	blt.n	8009b56 <lv_draw_rect+0x26a>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009ae0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            uint32_t px_opa_sum = 0;
 8009ae2:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009ae4:	9b05      	ldr	r3, [sp, #20]
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	da1a      	bge.n	8009b20 <lv_draw_rect+0x234>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009aea:	2200      	movs	r2, #0
 8009aec:	e028      	b.n	8009b40 <lv_draw_rect+0x254>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8009aee:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8009af2:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	; 0x94
 8009af6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8009afa:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8009afe:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
 8009b02:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 8009b06:	4639      	mov	r1, r7
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f002 ff26 	bl	800c95a <lv_circ_next>
 8009b0e:	e78f      	b.n	8009a30 <lv_draw_rect+0x144>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 8009b10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009b12:	fbb3 f0f5 	udiv	r0, r3, r5
 8009b16:	440b      	add	r3, r1
 8009b18:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
 8009b1c:	3201      	adds	r2, #1
 8009b1e:	e7a0      	b.n	8009a62 <lv_draw_rect+0x176>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	18d3      	adds	r3, r2, r3
 8009b24:	f140 80a9 	bpl.w	8009c7a <lv_draw_rect+0x38e>
                    col_rel = radius - curve_x[line] - col;
 8009b28:	882b      	ldrh	r3, [r5, #0]
 8009b2a:	9e06      	ldr	r6, [sp, #24]
 8009b2c:	1af3      	subs	r3, r6, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009b2e:	9e08      	ldr	r6, [sp, #32]
 8009b30:	1b9b      	subs	r3, r3, r6
 8009b32:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	f280 80a9 	bge.w	8009c8c <lv_draw_rect+0x3a0>
                    if(line_rel == -swidth)
 8009b3a:	1b16      	subs	r6, r2, r4
 8009b3c:	4272      	negs	r2, r6
 8009b3e:	4172      	adcs	r2, r6
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 8009b40:	b283      	uxth	r3, r0
 8009b42:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009b44:	0a09      	lsrs	r1, r1, #8
 8009b46:	54f1      	strb	r1, [r6, r3]
 8009b48:	3001      	adds	r0, #1
            if(line_ready) {
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	d0c3      	beq.n	8009ad6 <lv_draw_rect+0x1ea>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 8009b4e:	9b08      	ldr	r3, [sp, #32]
 8009b50:	3301      	adds	r3, #1
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	9308      	str	r3, [sp, #32]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8009b5c:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
 8009b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	440a      	add	r2, r1
 8009b66:	b293      	uxth	r3, r2
 8009b68:	9318      	str	r3, [sp, #96]	; 0x60
 8009b6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b6c:	1b1e      	subs	r6, r3, r4
 8009b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b70:	441c      	add	r4, r3
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b74:	3b01      	subs	r3, #1
 8009b76:	1a5b      	subs	r3, r3, r1
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	9319      	str	r3, [sp, #100]	; 0x64
 8009b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b7e:	1c5d      	adds	r5, r3, #1
 8009b80:	2300      	movs	r3, #0
 8009b82:	b236      	sxth	r6, r6
 8009b84:	b224      	sxth	r4, r4
 8009b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b88:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009b8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b8e:	eba2 0803 	sub.w	r8, r2, r3
 8009b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b94:	18d7      	adds	r7, r2, r3
        for(d = 1; d < col; d++) {
 8009b96:	3301      	adds	r3, #1
 8009b98:	9a08      	ldr	r2, [sp, #32]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	fa0f f888 	sxth.w	r8, r8
 8009ba2:	b23f      	sxth	r7, r7
 8009ba4:	f200 8081 	bhi.w	8009caa <lv_draw_rect+0x3be>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8009ba8:	9b07      	ldr	r3, [sp, #28]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d161      	bne.n	8009c72 <lv_draw_rect+0x386>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009bae:	f7fe f95d 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8009bb2:	f002 fc11 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009bb6:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009bb8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009bbc:	f9b3 801c 	ldrsh.w	r8, [r3, #28]
 8009bc0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009bc4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009bc8:	3201      	adds	r2, #1
 8009bca:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009bcc:	f8ba 3000 	ldrh.w	r3, [sl]
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009bd4:	9b04      	ldr	r3, [sp, #16]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009bd6:	4604      	mov	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009bd8:	b212      	sxth	r2, r2
 8009bda:	b209      	sxth	r1, r1
 8009bdc:	8998      	ldrh	r0, [r3, #12]
 8009bde:	f7ff fe21 	bl	8009824 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8009be2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    right_area.y1 = coords->y1 + radius + aa;
 8009be6:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    radius += aa;
 8009bea:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8009bec:	1c4a      	adds	r2, r1, #1
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	b212      	sxth	r2, r2
    radius += aa;
 8009bf2:	4418      	add	r0, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8009bf4:	f8ba 4000 	ldrh.w	r4, [sl]
    right_area.x1 = coords->x2 + 1 - aa;
 8009bf8:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    right_area.x2 = right_area.x1;
 8009bfc:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    right_area.y2 = coords->y2 - radius - aa;
 8009c00:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    radius += aa;
 8009c04:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8009c06:	eb03 0e05 	add.w	lr, r3, r5
    right_area.y2 = coords->y2 - radius - aa;
 8009c0a:	1a16      	subs	r6, r2, r0
    left_area.x1 = coords->x1 - 1 + aa;
 8009c0c:	1e67      	subs	r7, r4, #1
    top_area.y1 = coords->y1 - 1 + aa;
 8009c0e:	3d01      	subs	r5, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009c10:	441c      	add	r4, r3
    top_area.x2 = coords->x2 - radius - aa;
 8009c12:	1a09      	subs	r1, r1, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009c14:	3201      	adds	r2, #1
    right_area.y2 = coords->y2 - radius - aa;
 8009c16:	1af6      	subs	r6, r6, r3
    left_area.x1 = coords->x1 - 1 + aa;
 8009c18:	441f      	add	r7, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8009c1a:	441d      	add	r5, r3
    top_area.x2 = coords->x2 - radius - aa;
 8009c1c:	1ac9      	subs	r1, r1, r3
    right_area.y1 = coords->y1 + radius + aa;
 8009c1e:	4486      	add	lr, r0
    top_area.x1 = coords->x1 + radius + aa;
 8009c20:	4404      	add	r4, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009c22:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8009c24:	b224      	sxth	r4, r4
    right_area.y1 = coords->y1 + radius + aa;
 8009c26:	fa0f fe8e 	sxth.w	lr, lr
    right_area.y2 = coords->y2 - radius - aa;
 8009c2a:	b236      	sxth	r6, r6
    left_area.x1 = coords->x1 - 1 + aa;
 8009c2c:	b23f      	sxth	r7, r7
    top_area.y1 = coords->y1 - 1 + aa;
 8009c2e:	b22d      	sxth	r5, r5
    top_area.x2 = coords->x2 - radius - aa;
 8009c30:	b209      	sxth	r1, r1
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009c32:	b21b      	sxth	r3, r3
    top_area.x1 = coords->x1 + radius + aa;
 8009c34:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
    bottom_area.x1 = coords->x1 + radius + aa;
 8009c38:	f8ad 40b8 	strh.w	r4, [sp, #184]	; 0xb8
    right_area.y1 = coords->y1 + radius + aa;
 8009c3c:	f8ad e0a2 	strh.w	lr, [sp, #162]	; 0xa2
    right_area.y2 = coords->y2 - radius - aa;
 8009c40:	f8ad 60a6 	strh.w	r6, [sp, #166]	; 0xa6
    left_area.x1 = coords->x1 - 1 + aa;
 8009c44:	f8ad 70a8 	strh.w	r7, [sp, #168]	; 0xa8
    left_area.y1 = coords->y1 + radius + aa;
 8009c48:	f8ad e0aa 	strh.w	lr, [sp, #170]	; 0xaa
    left_area.x2 = left_area.x1;
 8009c4c:	f8ad 70ac 	strh.w	r7, [sp, #172]	; 0xac
    left_area.y2 = coords->y2 - radius - aa;
 8009c50:	f8ad 60ae 	strh.w	r6, [sp, #174]	; 0xae
    top_area.y1 = coords->y1 - 1 + aa;
 8009c54:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
    top_area.x2 = coords->x2 - radius - aa;
 8009c58:	f8ad 10b4 	strh.w	r1, [sp, #180]	; 0xb4
    top_area.y2 = top_area.y1;
 8009c5c:	f8ad 50b6 	strh.w	r5, [sp, #182]	; 0xb6
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009c60:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    bottom_area.x2 = coords->x2 - radius - aa;
 8009c64:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
    bottom_area.y2 = bottom_area.y1;
 8009c68:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009c6c:	2401      	movs	r4, #1
 8009c6e:	45a0      	cmp	r8, r4
 8009c70:	da56      	bge.n	8009d20 <lv_draw_rect+0x434>
 8009c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c74:	3301      	adds	r3, #1
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
 8009c78:	e720      	b.n	8009abc <lv_draw_rect+0x1d0>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009c7a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c7c:	429e      	cmp	r6, r3
 8009c7e:	f6ff af34 	blt.w	8009aea <lv_draw_rect+0x1fe>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009c82:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
 8009c86:	882e      	ldrh	r6, [r5, #0]
 8009c88:	1b9b      	subs	r3, r3, r6
 8009c8a:	e750      	b.n	8009b2e <lv_draw_rect+0x242>
                } else if(col_rel > swidth)
 8009c8c:	9e05      	ldr	r6, [sp, #20]
 8009c8e:	429e      	cmp	r6, r3
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009c90:	bfa9      	itett	ge
 8009c92:	9e05      	ldrge	r6, [sp, #20]
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009c94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009c96:	1af3      	subge	r3, r6, r3
 8009c98:	9e0d      	ldrge	r6, [sp, #52]	; 0x34
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009c9a:	bfb4      	ite	lt
 8009c9c:	681b      	ldrlt	r3, [r3, #0]
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009c9e:	f856 3023 	ldrge.w	r3, [r6, r3, lsl #2]
 8009ca2:	3201      	adds	r2, #1
 8009ca4:	4419      	add	r1, r3
 8009ca6:	b212      	sxth	r2, r2
 8009ca8:	e71c      	b.n	8009ae4 <lv_draw_rect+0x1f8>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8009caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cac:	4543      	cmp	r3, r8
 8009cae:	dd17      	ble.n	8009ce0 <lv_draw_rect+0x3f4>
 8009cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb2:	42b3      	cmp	r3, r6
 8009cb4:	dd08      	ble.n	8009cc8 <lv_draw_rect+0x3dc>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009cb6:	782b      	ldrb	r3, [r5, #0]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	464a      	mov	r2, r9
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7fe fe17 	bl	80088f6 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8009cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cca:	42a3      	cmp	r3, r4
 8009ccc:	da08      	bge.n	8009ce0 <lv_draw_rect+0x3f4>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009cce:	782b      	ldrb	r3, [r5, #0]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	464a      	mov	r2, r9
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7fe fe0b 	bl	80088f6 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8009ce0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ce2:	42bb      	cmp	r3, r7
 8009ce4:	da17      	bge.n	8009d16 <lv_draw_rect+0x42a>
 8009ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ce8:	42b3      	cmp	r3, r6
 8009cea:	dd08      	ble.n	8009cfe <lv_draw_rect+0x412>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009cec:	782b      	ldrb	r3, [r5, #0]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9b04      	ldr	r3, [sp, #16]
 8009cf2:	464a      	mov	r2, r9
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7fe fdfc 	bl	80088f6 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8009cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	da08      	bge.n	8009d16 <lv_draw_rect+0x42a>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009d04:	782b      	ldrb	r3, [r5, #0]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	464a      	mov	r2, r9
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7fe fdf0 	bl	80088f6 <lv_draw_px>
 8009d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d18:	3301      	adds	r3, #1
 8009d1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d1c:	3501      	adds	r5, #1
 8009d1e:	e733      	b.n	8009b88 <lv_draw_rect+0x29c>
        opa_act = map[d];
 8009d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009d22:	9a04      	ldr	r2, [sp, #16]
        opa_act = map[d];
 8009d24:	5d1d      	ldrb	r5, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009d26:	6992      	ldr	r2, [r2, #24]
 8009d28:	462b      	mov	r3, r5
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	a828      	add	r0, sp, #160	; 0xa0
 8009d2e:	f7fe fe39 	bl	80089a4 <lv_draw_fill>
        right_area.x1++;
 8009d32:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009d36:	9a04      	ldr	r2, [sp, #16]
        right_area.x1++;
 8009d38:	3301      	adds	r3, #1
 8009d3a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        right_area.x2++;
 8009d3e:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009d42:	6992      	ldr	r2, [r2, #24]
        right_area.x2++;
 8009d44:	3301      	adds	r3, #1
 8009d46:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	462b      	mov	r3, r5
 8009d4e:	a82a      	add	r0, sp, #168	; 0xa8
 8009d50:	f7fe fe28 	bl	80089a4 <lv_draw_fill>
        left_area.x1--;
 8009d54:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009d58:	9a04      	ldr	r2, [sp, #16]
        left_area.x1--;
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
        left_area.x2--;
 8009d60:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009d64:	6992      	ldr	r2, [r2, #24]
        left_area.x2--;
 8009d66:	3b01      	subs	r3, #1
 8009d68:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	462b      	mov	r3, r5
 8009d70:	a82c      	add	r0, sp, #176	; 0xb0
 8009d72:	f7fe fe17 	bl	80089a4 <lv_draw_fill>
        top_area.y1--;
 8009d76:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009d7a:	9a04      	ldr	r2, [sp, #16]
        top_area.y1--;
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        top_area.y2--;
 8009d82:	f8bd 30b6 	ldrh.w	r3, [sp, #182]	; 0xb6
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009d86:	6992      	ldr	r2, [r2, #24]
        top_area.y2--;
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009d8e:	4649      	mov	r1, r9
 8009d90:	462b      	mov	r3, r5
 8009d92:	a82e      	add	r0, sp, #184	; 0xb8
 8009d94:	f7fe fe06 	bl	80089a4 <lv_draw_fill>
        bottom_area.y1++;
 8009d98:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        bottom_area.y2++;
 8009da2:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 8009da6:	3401      	adds	r4, #1
 8009da8:	3301      	adds	r3, #1
 8009daa:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8009dae:	b224      	sxth	r4, r4
 8009db0:	e75d      	b.n	8009c6e <lv_draw_rect+0x382>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 8085 	bne.w	8009ec2 <lv_draw_rect+0x5d6>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009db8:	f7fe f858 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8009dbc:	f002 fb0c 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009dc0:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009dc2:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009dc6:	f9b3 401c 	ldrsh.w	r4, [r3, #28]
 8009dca:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009dce:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009dd6:	f8ba 3000 	ldrh.w	r3, [sl]
 8009dda:	3101      	adds	r1, #1
 8009ddc:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	b212      	sxth	r2, r2
 8009de2:	b209      	sxth	r1, r1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009de4:	4680      	mov	r8, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009de6:	8998      	ldrh	r0, [r3, #12]
 8009de8:	f7ff fd1c 	bl	8009824 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8009dec:	fa1f f888 	uxth.w	r8, r8
 8009df0:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8009df4:	4405      	add	r5, r0
 8009df6:	b2ad      	uxth	r5, r5
 8009df8:	b22b      	sxth	r3, r5
    swidth += aa;
 8009dfa:	eb08 0004 	add.w	r0, r8, r4
 8009dfe:	b280      	uxth	r0, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009e00:	1d1c      	adds	r4, r3, #4
    swidth += aa;
 8009e02:	b206      	sxth	r6, r0
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009e04:	f024 0403 	bic.w	r4, r4, #3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8009e08:	3003      	adds	r0, #3
    curve_x_size *= sizeof(lv_coord_t);
 8009e0a:	0064      	lsls	r4, r4, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009e0c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8009e10:	4420      	add	r0, r4
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8009e12:	9305      	str	r3, [sp, #20]
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009e14:	f7fe fc44 	bl	80086a0 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009e18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009e1c:	4607      	mov	r7, r0
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8009e1e:	4404      	add	r4, r0
    lv_circ_init(&circ, &circ_tmp, radius);
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	a92a      	add	r1, sp, #168	; 0xa8
 8009e24:	4658      	mov	r0, fp
 8009e26:	f002 fd88 	bl	800c93a <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009e2a:	4658      	mov	r0, fp
 8009e2c:	f002 fd8c 	bl	800c948 <lv_circ_cont>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f040 8413 	bne.w	800a65c <lv_draw_rect+0xd70>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e38:	2bff      	cmp	r3, #255	; 0xff
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	bf18      	it	ne
 8009e3e:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 8009e40:	7b9b      	ldrb	r3, [r3, #14]
 8009e42:	bf1c      	itt	ne
 8009e44:	4353      	mulne	r3, r2
 8009e46:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 8009e4a:	fb13 f006 	smulbb	r0, r3, r6
    ofs_lb.x = coords->x1 + radius + aa;
 8009e4e:	4621      	mov	r1, r4
    for(col = 0; col < swidth; col++) {
 8009e50:	1b0a      	subs	r2, r1, r4
 8009e52:	b212      	sxth	r2, r2
 8009e54:	4296      	cmp	r6, r2
 8009e56:	f300 8413 	bgt.w	800a680 <lv_draw_rect+0xd94>
    ofs_l.x = coords->x1 + radius;
 8009e5a:	f8ba 3000 	ldrh.w	r3, [sl]
    ofs_r.x = coords->x2 - radius;
 8009e5e:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ofs_l.x = coords->x1 + radius;
 8009e62:	442b      	add	r3, r5
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	9306      	str	r3, [sp, #24]
 8009e68:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e6e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009e72:	3301      	adds	r3, #1
 8009e74:	eba3 0808 	sub.w	r8, r3, r8
 8009e78:	fa1f f388 	uxth.w	r3, r8
 8009e7c:	9307      	str	r3, [sp, #28]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8009e7e:	1b5b      	subs	r3, r3, r5
 8009e80:	b29b      	uxth	r3, r3
    ofs_r.x = coords->x2 - radius;
 8009e82:	1b45      	subs	r5, r0, r5
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8009e84:	930e      	str	r3, [sp, #56]	; 0x38
    ofs_r.x = coords->x2 - radius;
 8009e86:	b2ab      	uxth	r3, r5
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	f04f 0800 	mov.w	r8, #0
    for(col = 0; col <= radius; col++) {
 8009e8e:	9a05      	ldr	r2, [sp, #20]
 8009e90:	fa0f f388 	sxth.w	r3, r8
 8009e94:	429a      	cmp	r2, r3
 8009e96:	f280 83fb 	bge.w	800a690 <lv_draw_rect+0xda4>
    area_mid.x1 = ofs_l.x + 1;
 8009e9a:	9b06      	ldr	r3, [sp, #24]
    area_mid.y1 = ofs_l.y + radius;
 8009e9c:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8009ea0:	f8ad 80ba 	strh.w	r8, [sp, #186]	; 0xba
    area_mid.x1 = ofs_l.x + 1;
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    area_mid.x2 = ofs_r.x - 1;
 8009eaa:	9b08      	ldr	r3, [sp, #32]
    area_mid.y2 = area_mid.y1;
 8009eac:	f8ad 80be 	strh.w	r8, [sp, #190]	; 0xbe
    area_mid.x2 = ofs_r.x - 1;
 8009eb0:	1e5d      	subs	r5, r3, #1
 8009eb2:	f8ad 50bc 	strh.w	r5, [sp, #188]	; 0xbc
    area_mid.y2 = area_mid.y1;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	1c5d      	adds	r5, r3, #1
    for(d = 0; d < swidth; d++) {
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	42b3      	cmp	r3, r6
 8009ebe:	f2c0 8430 	blt.w	800a722 <lv_draw_rect+0xe36>
    if(lv_area_is_on(coords, mask) == false) return;
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	f002 fcfe 	bl	800c8c6 <lv_area_is_on>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f000 83c3 	beq.w	800a656 <lv_draw_rect+0xd6a>
    if(style->body.opa > LV_OPA_MIN) {
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	7b9b      	ldrb	r3, [r3, #14]
 8009ed4:	2b10      	cmp	r3, #16
 8009ed6:	f240 81fa 	bls.w	800a2ce <lv_draw_rect+0x9e2>
    uint16_t radius = style->body.radius;
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	899d      	ldrh	r5, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009ede:	f7fd ffc5 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8009ee2:	f002 fa79 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009ee6:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009ee8:	f8ba 6006 	ldrh.w	r6, [sl, #6]
 8009eec:	f8d3 8004 	ldr.w	r8, [r3, #4]
    lv_color_t gcolor = style->body.grad_color;
 8009ef0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8009ef4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009ef8:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009efc:	3601      	adds	r6, #1
 8009efe:	1af6      	subs	r6, r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8009f00:	f8ba 3000 	ldrh.w	r3, [sl]
 8009f04:	3101      	adds	r1, #1
 8009f06:	1ac9      	subs	r1, r1, r3
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0a:	2bff      	cmp	r3, #255	; 0xff
 8009f0c:	9b04      	ldr	r3, [sp, #16]
 8009f0e:	7b9f      	ldrb	r7, [r3, #14]
 8009f10:	bf18      	it	ne
 8009f12:	9b09      	ldrne	r3, [sp, #36]	; 0x24
    return area_p->y2 - area_p->y1 + 1;
 8009f14:	b236      	sxth	r6, r6
 8009f16:	bf18      	it	ne
 8009f18:	435f      	mulne	r7, r3
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009f1a:	4604      	mov	r4, r0
    return area_p->x2 - area_p->x1 + 1;
 8009f1c:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009f1e:	4632      	mov	r2, r6
 8009f20:	4628      	mov	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009f22:	bf18      	it	ne
 8009f24:	f3c7 2707 	ubfxne	r7, r7, #8, #8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009f28:	f7ff fc7c 	bl	8009824 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	fb96 f3f3 	sdiv	r3, r6, r3
 8009f32:	4298      	cmp	r0, r3
 8009f34:	dc29      	bgt.n	8009f8a <lv_draw_rect+0x69e>
    work_area.x1 = coords->x1;
 8009f36:	f8ba 3000 	ldrh.w	r3, [sl]
 8009f3a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    work_area.x2 = coords->x2;
 8009f3e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009f42:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8009f46:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009f4a:	f8ba 5006 	ldrh.w	r5, [sl, #6]
        work_area.y1 = coords->y1 + radius;
 8009f4e:	4403      	add	r3, r0
    if(mcolor.full == gcolor.full) {
 8009f50:	45d8      	cmp	r8, fp
        work_area.y1 = coords->y1 + radius;
 8009f52:	b29b      	uxth	r3, r3
    if(mcolor.full == gcolor.full) {
 8009f54:	f040 83fe 	bne.w	800a754 <lv_draw_rect+0xe68>
        if(style->body.radius != 0) {
 8009f58:	9a04      	ldr	r2, [sp, #16]
        work_area.y1 = coords->y1 + radius;
 8009f5a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        work_area.y2 = coords->y2 - radius;
 8009f5e:	1a2d      	subs	r5, r5, r0
        if(style->body.radius != 0) {
 8009f60:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
        work_area.y2 = coords->y2 - radius;
 8009f64:	b2ad      	uxth	r5, r5
 8009f66:	f8ad 50be 	strh.w	r5, [sp, #190]	; 0xbe
        if(style->body.radius != 0) {
 8009f6a:	b142      	cbz	r2, 8009f7e <lv_draw_rect+0x692>
            if(aa) {
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	f000 83ec 	beq.w	800a74a <lv_draw_rect+0xe5e>
                work_area.y1 += 2;
 8009f72:	3302      	adds	r3, #2
 8009f74:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                work_area.y2 -= 2;
 8009f78:	3d02      	subs	r5, #2
                work_area.y2 -= 1;
 8009f7a:	f8ad 50be 	strh.w	r5, [sp, #190]	; 0xbe
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4642      	mov	r2, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	a82e      	add	r0, sp, #184	; 0xb8
 8009f86:	f7fe fd0d 	bl	80089a4 <lv_draw_fill>
        if(style->body.radius != 0) {
 8009f8a:	9b04      	ldr	r3, [sp, #16]
 8009f8c:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	f000 819c 	beq.w	800a2ce <lv_draw_rect+0x9e2>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009f96:	f7fd ff69 	bl	8007e6c <lv_refr_get_disp_refreshing>
 8009f9a:	f002 fa1d 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009f9e:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009fa0:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009fa4:	685c      	ldr	r4, [r3, #4]
    lv_color_t gcolor = style->body.grad_color;
 8009fa6:	f8d3 b008 	ldr.w	fp, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return area_p->x2 - area_p->x1 + 1;
 8009fac:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009fb0:	901b      	str	r0, [sp, #108]	; 0x6c
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009fb2:	2bff      	cmp	r3, #255	; 0xff
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	7b9e      	ldrb	r6, [r3, #14]
 8009fb8:	bf17      	itett	ne
 8009fba:	9b09      	ldrne	r3, [sp, #36]	; 0x24
 8009fbc:	9605      	streq	r6, [sp, #20]
 8009fbe:	435e      	mulne	r6, r3
 8009fc0:	f3c6 2307 	ubfxne	r3, r6, #8, #8
 8009fc4:	bf18      	it	ne
 8009fc6:	9305      	strne	r3, [sp, #20]
    return area_p->y2 - area_p->y1 + 1;
 8009fc8:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	1a9b      	subs	r3, r3, r2
 8009fd0:	b21b      	sxth	r3, r3
 8009fd2:	9306      	str	r3, [sp, #24]
    return area_p->x2 - area_p->x1 + 1;
 8009fd4:	f8ba 3000 	ldrh.w	r3, [sl]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009fd8:	9a06      	ldr	r2, [sp, #24]
 8009fda:	3101      	adds	r1, #1
 8009fdc:	1ac9      	subs	r1, r1, r3
    uint16_t radius = style->body.radius;
 8009fde:	b2ad      	uxth	r5, r5
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009fe0:	b209      	sxth	r1, r1
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f7ff fc1e 	bl	8009824 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8009fe8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8009fec:	f8ba 7000 	ldrh.w	r7, [sl]
    lb_origo.y = coords->y2 - radius - aa;
 8009ff0:	f8ba 8006 	ldrh.w	r8, [sl, #6]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009ff4:	900a      	str	r0, [sp, #40]	; 0x28
    lt_origo.x = coords->x1 + radius + aa;
 8009ff6:	442f      	add	r7, r5
 8009ff8:	4407      	add	r7, r0
 8009ffa:	b2bb      	uxth	r3, r7
 8009ffc:	9307      	str	r3, [sp, #28]
    lt_origo.y = coords->y1 + radius + aa;
 8009ffe:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a002:	442b      	add	r3, r5
 800a004:	4403      	add	r3, r0
 800a006:	b29b      	uxth	r3, r3
 800a008:	930b      	str	r3, [sp, #44]	; 0x2c
    lb_origo.y = coords->y2 - radius - aa;
 800a00a:	eba8 0800 	sub.w	r8, r8, r0
    lt_origo.y = coords->y1 + radius + aa;
 800a00e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800a012:	931c      	str	r3, [sp, #112]	; 0x70
    lb_origo.y = coords->y2 - radius - aa;
 800a014:	eba8 0805 	sub.w	r8, r8, r5
 800a018:	fa1f f388 	uxth.w	r3, r8
 800a01c:	930c      	str	r3, [sp, #48]	; 0x30
 800a01e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a022:	931d      	str	r3, [sp, #116]	; 0x74
    rt_origo.x = coords->x2 - radius - aa;
 800a024:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    lv_circ_init(&cir, &cir_tmp, radius);
 800a028:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    rt_origo.x = coords->x2 - radius - aa;
 800a02c:	1a1b      	subs	r3, r3, r0
 800a02e:	1b5d      	subs	r5, r3, r5
 800a030:	b2ab      	uxth	r3, r5
    lv_circ_init(&cir, &cir_tmp, radius);
 800a032:	ad26      	add	r5, sp, #152	; 0x98
 800a034:	4642      	mov	r2, r8
 800a036:	a925      	add	r1, sp, #148	; 0x94
 800a038:	4628      	mov	r0, r5
    rt_origo.x = coords->x2 - radius - aa;
 800a03a:	9308      	str	r3, [sp, #32]
    lv_circ_init(&cir, &cir_tmp, radius);
 800a03c:	f002 fc7d 	bl	800c93a <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a042:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 800a046:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800a04a:	9807      	ldr	r0, [sp, #28]
 800a04c:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a04e:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a050:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a052:	440b      	add	r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a054:	1a41      	subs	r1, r0, r1
 800a056:	9200      	str	r2, [sp, #0]
 800a058:	b21b      	sxth	r3, r3
 800a05a:	b209      	sxth	r1, r1
 800a05c:	a82c      	add	r0, sp, #176	; 0xb0
 800a05e:	f002 fbb3 	bl	800c7c8 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a064:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800a068:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 800a06c:	9807      	ldr	r0, [sp, #28]
 800a06e:	441a      	add	r2, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a070:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a072:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a074:	440b      	add	r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a076:	1a41      	subs	r1, r0, r1
 800a078:	9200      	str	r2, [sp, #0]
 800a07a:	b21b      	sxth	r3, r3
 800a07c:	b209      	sxth	r1, r1
 800a07e:	a82e      	add	r0, sp, #184	; 0xb8
 800a080:	f002 fba2 	bl	800c7c8 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a086:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 800a08a:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800a08e:	9807      	ldr	r0, [sp, #28]
 800a090:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a092:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a094:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a096:	440b      	add	r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a098:	1a41      	subs	r1, r0, r1
 800a09a:	9200      	str	r2, [sp, #0]
 800a09c:	b21b      	sxth	r3, r3
 800a09e:	b209      	sxth	r1, r1
 800a0a0:	a82a      	add	r0, sp, #168	; 0xa8
 800a0a2:	f002 fb91 	bl	800c7c8 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a8:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800a0ac:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 800a0b0:	9807      	ldr	r0, [sp, #28]
 800a0b2:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a0b4:	9b08      	ldr	r3, [sp, #32]
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0b6:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a0b8:	440b      	add	r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0ba:	1a41      	subs	r1, r0, r1
 800a0bc:	b21b      	sxth	r3, r3
 800a0be:	9200      	str	r2, [sp, #0]
 800a0c0:	b209      	sxth	r1, r1
 800a0c2:	a828      	add	r0, sp, #160	; 0xa0
 800a0c4:	f002 fb80 	bl	800c7c8 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	930f      	str	r3, [sp, #60]	; 0x3c
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a0cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    while(lv_circ_cont(&cir)) {
 800a0ce:	9521      	str	r5, [sp, #132]	; 0x84
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	9323      	str	r3, [sp, #140]	; 0x8c
    while(lv_circ_cont(&cir)) {
 800a0d4:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a0d6:	f002 fc37 	bl	800c948 <lv_circ_cont>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f040 837d 	bne.w	800a7da <lv_draw_rect+0xeee>
    if(mcolor.full == gcolor.full)
 800a0e0:	455c      	cmp	r4, fp
 800a0e2:	f040 8566 	bne.w	800abb2 <lv_draw_rect+0x12c6>
        act_color = mcolor;
 800a0e6:	4622      	mov	r2, r4
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800a0e8:	9b05      	ldr	r3, [sp, #20]
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	a828      	add	r0, sp, #160	; 0xa0
 800a0ee:	f7fe fc59 	bl	80089a4 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 800a0f2:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800a0f6:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d008      	beq.n	800a110 <lv_draw_rect+0x824>
        if(mcolor.full == gcolor.full)
 800a0fe:	455c      	cmp	r4, fp
 800a100:	f040 8575 	bne.w	800abee <lv_draw_rect+0x1302>
            act_color = mcolor;
 800a104:	4622      	mov	r2, r4
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	4649      	mov	r1, r9
 800a10a:	a82a      	add	r0, sp, #168	; 0xa8
 800a10c:	f7fe fc4a 	bl	80089a4 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 800a110:	455c      	cmp	r4, fp
 800a112:	f040 8588 	bne.w	800ac26 <lv_draw_rect+0x133a>
        act_color = mcolor;
 800a116:	4622      	mov	r2, r4
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	4649      	mov	r1, r9
 800a11c:	a82c      	add	r0, sp, #176	; 0xb0
 800a11e:	f7fe fc41 	bl	80089a4 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800a122:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800a126:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d008      	beq.n	800a140 <lv_draw_rect+0x854>
        if(mcolor.full == gcolor.full)
 800a12e:	455c      	cmp	r4, fp
 800a130:	f040 8597 	bne.w	800ac62 <lv_draw_rect+0x1376>
            act_color = mcolor;
 800a134:	4622      	mov	r2, r4
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a136:	9b05      	ldr	r3, [sp, #20]
 800a138:	4649      	mov	r1, r9
 800a13a:	a82e      	add	r0, sp, #184	; 0xb8
 800a13c:	f7fe fc32 	bl	80089a4 <lv_draw_fill>
    if(aa) {
 800a140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 80c3 	beq.w	800a2ce <lv_draw_rect+0x9e2>
        edge_top_area.x1 = coords->x1 + radius + 2;
 800a148:	f8ba 3000 	ldrh.w	r3, [sl]
 800a14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14e:	3302      	adds	r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a156:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a15a:	3b02      	subs	r3, #2
 800a15c:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a15e:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a160:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        edge_top_area.y1 = coords->y1;
 800a164:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800a168:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        edge_top_area.y2 = coords->y1;
 800a16c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a170:	6852      	ldr	r2, [r2, #4]
 800a172:	9b05      	ldr	r3, [sp, #20]
 800a174:	4649      	mov	r1, r9
 800a176:	a828      	add	r0, sp, #160	; 0xa0
 800a178:	f7fe fc14 	bl	80089a4 <lv_draw_fill>
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a17c:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y2;
 800a17e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a182:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        edge_top_area.y2 = coords->y2;
 800a186:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a18a:	6892      	ldr	r2, [r2, #8]
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	4649      	mov	r1, r9
 800a190:	a828      	add	r0, sp, #160	; 0xa0
 800a192:	f7fe fc07 	bl	80089a4 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a196:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a19a:	9315      	str	r3, [sp, #84]	; 0x54
 800a19c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a19e:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 800a1a2:	1a9b      	subs	r3, r3, r2
 800a1a4:	b21b      	sxth	r3, r3
 800a1a6:	9319      	str	r3, [sp, #100]	; 0x64
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1aa:	eba3 0508 	sub.w	r5, r3, r8
 800a1ae:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	fbb5 f5f3 	udiv	r5, r5, r3
 800a1b8:	fa5f f38b 	uxtb.w	r3, fp
 800a1bc:	9310      	str	r3, [sp, #64]	; 0x40
 800a1be:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a1c2:	9311      	str	r3, [sp, #68]	; 0x44
 800a1c4:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a1c8:	9312      	str	r3, [sp, #72]	; 0x48
 800a1ca:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a1ce:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1d0:	f3c4 4307 	ubfx	r3, r4, #16, #8
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a1d4:	9301      	str	r3, [sp, #4]
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a1d6:	b2ed      	uxtb	r5, r5
 800a1d8:	9314      	str	r3, [sp, #80]	; 0x50
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a1da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	fa5f fb84 	uxtb.w	fp, r4
 800a1e2:	9502      	str	r5, [sp, #8]
 800a1e4:	a810      	add	r0, sp, #64	; 0x40
 800a1e6:	c807      	ldmia	r0, {r0, r1, r2}
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	f7ff fb36 	bl	800985a <lv_color_mix.isra.0>
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a1ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a1f4:	900e      	str	r0, [sp, #56]	; 0x38
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1fc:	9502      	str	r5, [sp, #8]
 800a1fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a200:	4658      	mov	r0, fp
 800a202:	f7ff fb2a 	bl	800985a <lv_color_mix.isra.0>
 800a206:	2300      	movs	r3, #0
 800a208:	9316      	str	r3, [sp, #88]	; 0x58
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a20a:	fa1f f388 	uxth.w	r3, r8
 800a20e:	9318      	str	r3, [sp, #96]	; 0x60
 800a210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a212:	9a18      	ldr	r2, [sp, #96]	; 0x60
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a214:	900d      	str	r0, [sp, #52]	; 0x34
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a216:	3301      	adds	r3, #1
 800a218:	18d3      	adds	r3, r2, r3
 800a21a:	931c      	str	r3, [sp, #112]	; 0x70
 800a21c:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
        for(i = 0; i < seg_size; i++) {
 800a220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a222:	428b      	cmp	r3, r1
 800a224:	f300 8539 	bgt.w	800ac9a <lv_draw_rect+0x13ae>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a22a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a22c:	eba8 0303 	sub.w	r3, r8, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	bfb8      	it	lt
 800a234:	425b      	neglt	r3, r3
 800a236:	4293      	cmp	r3, r2
 800a238:	d149      	bne.n	800a2ce <lv_draw_rect+0x9e2>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	ebc8 2408 	rsb	r4, r8, r8, lsl #8
 800a240:	fbb4 f4f3 	udiv	r4, r4, r3
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a246:	9301      	str	r3, [sp, #4]
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a248:	b2e4      	uxtb	r4, r4
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a24a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a24c:	9402      	str	r4, [sp, #8]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	a810      	add	r0, sp, #64	; 0x40
 800a252:	c807      	ldmia	r0, {r0, r1, r2}
 800a254:	465b      	mov	r3, fp
 800a256:	f7ff fb00 	bl	800985a <lv_color_mix.isra.0>
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a25a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	9b11      	ldr	r3, [sp, #68]	; 0x44
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a260:	900d      	str	r0, [sp, #52]	; 0x34
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a262:	9402      	str	r4, [sp, #8]
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a26a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a26c:	4658      	mov	r0, fp
 800a26e:	f7ff faf4 	bl	800985a <lv_color_mix.isra.0>
            lv_opa_t aa_opa = opa >> 1;
 800a272:	9b05      	ldr	r3, [sp, #20]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a274:	900e      	str	r0, [sp, #56]	; 0x38
            lv_opa_t aa_opa = opa >> 1;
 800a276:	085e      	lsrs	r6, r3, #1
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	9600      	str	r6, [sp, #0]
 800a27c:	fa1f f488 	uxth.w	r4, r8
 800a280:	4423      	add	r3, r4
 800a282:	b21d      	sxth	r5, r3
 800a284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a286:	4423      	add	r3, r4
 800a288:	fa0f f883 	sxth.w	r8, r3
 800a28c:	464a      	mov	r2, r9
 800a28e:	4603      	mov	r3, r0
 800a290:	4641      	mov	r1, r8
 800a292:	4628      	mov	r0, r5
 800a294:	f7fe fb2f 	bl	80088f6 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	9600      	str	r6, [sp, #0]
 800a29c:	1b1f      	subs	r7, r3, r4
 800a29e:	b23f      	sxth	r7, r7
 800a2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a2:	464a      	mov	r2, r9
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f7fe fb25 	bl	80088f6 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800a2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ae:	9600      	str	r6, [sp, #0]
 800a2b0:	1b1c      	subs	r4, r3, r4
 800a2b2:	b224      	sxth	r4, r4
 800a2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b6:	464a      	mov	r2, r9
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f7fe fb1b 	bl	80088f6 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800a2c0:	9600      	str	r6, [sp, #0]
 800a2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2c4:	464a      	mov	r2, r9
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f7fe fb14 	bl	80088f6 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 81be 	beq.w	800a656 <lv_draw_rect+0xd6a>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	7d9b      	ldrb	r3, [r3, #22]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 81b9 	beq.w	800a656 <lv_draw_rect+0xd6a>
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	7ddb      	ldrb	r3, [r3, #23]
 800a2e8:	2b0f      	cmp	r3, #15
 800a2ea:	f240 81b4 	bls.w	800a656 <lv_draw_rect+0xd6a>
    uint16_t radius = style->body.radius;
 800a2ee:	9b04      	ldr	r3, [sp, #16]
 800a2f0:	f8b3 b00c 	ldrh.w	fp, [r3, #12]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a2f4:	f7fd fdba 	bl	8007e6c <lv_refr_get_disp_refreshing>
 800a2f8:	f002 f86e 	bl	800c3d8 <lv_disp_get_antialiasing>
 800a2fc:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800a300:	f8ba 3000 	ldrh.w	r3, [sl]
    return area_p->y2 - area_p->y1 + 1;
 800a304:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    return area_p->x2 - area_p->x1 + 1;
 800a308:	3101      	adds	r1, #1
 800a30a:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800a30c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a310:	4680      	mov	r8, r0
 800a312:	3201      	adds	r2, #1
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a316:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800a318:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a31a:	28ff      	cmp	r0, #255	; 0xff
 800a31c:	9804      	ldr	r0, [sp, #16]
    lv_coord_t bwidth = style->body.border.width;
 800a31e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a322:	7dc4      	ldrb	r4, [r0, #23]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a324:	bf18      	it	ne
 800a326:	9809      	ldrne	r0, [sp, #36]	; 0x24
    bwidth--;
 800a328:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a32a:	bf18      	it	ne
 800a32c:	4344      	mulne	r4, r0
    bwidth--;
 800a32e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    lv_border_part_t part = style->body.border.part;
 800a332:	9804      	ldr	r0, [sp, #16]
    bwidth--;
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	b2b6      	uxth	r6, r6
 800a338:	b212      	sxth	r2, r2
    lv_border_part_t part = style->body.border.part;
 800a33a:	7d85      	ldrb	r5, [r0, #22]
    lv_color_t color      = style->body.border.color;
 800a33c:	6907      	ldr	r7, [r0, #16]
    bwidth--;
 800a33e:	b233      	sxth	r3, r6
    return area_p->x2 - area_p->x1 + 1;
 800a340:	b209      	sxth	r1, r1
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a342:	4658      	mov	r0, fp
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a344:	bf18      	it	ne
 800a346:	f3c4 2407 	ubfxne	r4, r4, #8, #8
    bwidth--;
 800a34a:	9306      	str	r3, [sp, #24]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a34c:	f7ff fa6a 	bl	8009824 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	4298      	cmp	r0, r3
        length_corr = bwidth - radius - aa;
 800a354:	bfbd      	ittte	lt
 800a356:	1a32      	sublt	r2, r6, r0
 800a358:	eba2 0208 	sublt.w	r2, r2, r8
 800a35c:	b212      	sxthlt	r2, r2
    lv_coord_t length_corr = 0;
 800a35e:	2200      	movge	r2, #0
 800a360:	9206      	str	r2, [sp, #24]
    if(style->body.radius == 0) {
 800a362:	9a04      	ldr	r2, [sp, #16]
 800a364:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
        corner_size = radius + aa;
 800a368:	bfa8      	it	ge
 800a36a:	eb00 0308 	addge.w	r3, r0, r8
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a36e:	4683      	mov	fp, r0
        corner_size = radius + aa;
 800a370:	bfa8      	it	ge
 800a372:	b21b      	sxthge	r3, r3
 800a374:	f005 0202 	and.w	r2, r5, #2
    if(style->body.radius == 0) {
 800a378:	2900      	cmp	r1, #0
 800a37a:	f040 8522 	bne.w	800adc2 <lv_draw_rect+0x14d6>
        if(part & LV_BORDER_TOP) {
 800a37e:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 800a382:	b1a2      	cbz	r2, 800a3ae <lv_draw_rect+0xac2>
            work_area.x1 = coords->x1;
 800a384:	f8ba 3000 	ldrh.w	r3, [sl]
 800a388:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x2;
 800a38c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a390:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1;
 800a394:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800a398:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 800a39c:	4433      	add	r3, r6
 800a39e:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	a82e      	add	r0, sp, #184	; 0xb8
 800a3aa:	f7fe fafb 	bl	80089a4 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800a3ae:	0729      	lsls	r1, r5, #28
 800a3b0:	d520      	bpl.n	800a3f4 <lv_draw_rect+0xb08>
            work_area.x1 = coords->x2 - bwidth;
 800a3b2:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800a3b6:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - bwidth;
 800a3ba:	1b9a      	subs	r2, r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a3bc:	f1b8 0f00 	cmp.w	r8, #0
            work_area.x1 = coords->x2 - bwidth;
 800a3c0:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a3c4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a3c8:	9a05      	ldr	r2, [sp, #20]
 800a3ca:	bf08      	it	eq
 800a3cc:	2200      	moveq	r2, #0
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a3d4:	9a05      	ldr	r2, [sp, #20]
 800a3d6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a3da:	f015 0f01 	tst.w	r5, #1
 800a3de:	bf08      	it	eq
 800a3e0:	2200      	moveq	r2, #0
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a3e8:	463a      	mov	r2, r7
 800a3ea:	4623      	mov	r3, r4
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	a82e      	add	r0, sp, #184	; 0xb8
 800a3f0:	f7fe fad8 	bl	80089a4 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800a3f4:	f015 0f04 	tst.w	r5, #4
 800a3f8:	f005 0501 	and.w	r5, r5, #1
 800a3fc:	d020      	beq.n	800a440 <lv_draw_rect+0xb54>
            work_area.x1 = coords->x1;
 800a3fe:	f9ba 3000 	ldrsh.w	r3, [sl]
 800a402:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + bwidth;
 800a406:	4433      	add	r3, r6
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a408:	9a05      	ldr	r2, [sp, #20]
            work_area.x2 = coords->x1 + bwidth;
 800a40a:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a416:	bf08      	it	eq
 800a418:	2200      	moveq	r2, #0
 800a41a:	4413      	add	r3, r2
 800a41c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a420:	9a05      	ldr	r2, [sp, #20]
 800a422:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a426:	2d00      	cmp	r5, #0
 800a428:	bf08      	it	eq
 800a42a:	2200      	moveq	r2, #0
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	9205      	str	r2, [sp, #20]
 800a430:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a434:	463a      	mov	r2, r7
 800a436:	4623      	mov	r3, r4
 800a438:	4649      	mov	r1, r9
 800a43a:	a82e      	add	r0, sp, #184	; 0xb8
 800a43c:	f7fe fab2 	bl	80089a4 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800a440:	b1a5      	cbz	r5, 800a46c <lv_draw_rect+0xb80>
            work_area.x1 = coords->x1;
 800a442:	f8ba 3000 	ldrh.w	r3, [sl]
 800a446:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.x2 = coords->x2;
 800a44a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a44e:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - bwidth;
 800a452:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800a456:	1b9e      	subs	r6, r3, r6
 800a458:	f8ad 60ba 	strh.w	r6, [sp, #186]	; 0xba
            work_area.y2 = coords->y2;
 800a45c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800a460:	463a      	mov	r2, r7
 800a462:	4623      	mov	r3, r4
 800a464:	4649      	mov	r1, r9
 800a466:	a82e      	add	r0, sp, #184	; 0xb8
 800a468:	f7fe fa9c 	bl	80089a4 <lv_draw_fill>
        if(style->body.radius != 0) {
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 800a472:	2d00      	cmp	r5, #0
 800a474:	f000 80ef 	beq.w	800a656 <lv_draw_rect+0xd6a>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a478:	f7fd fcf8 	bl	8007e6c <lv_refr_get_disp_refreshing>
 800a47c:	f001 ffac 	bl	800c3d8 <lv_disp_get_antialiasing>
    lv_coord_t bwidth     = style->body.border.width;
 800a480:	9b04      	ldr	r3, [sp, #16]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a482:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_coord_t bwidth     = style->body.border.width;
 800a484:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
    lv_color_t color      = style->body.border.color;
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_border_part_t part = style->body.border.part;
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	7d9b      	ldrb	r3, [r3, #22]
 800a490:	9306      	str	r3, [sp, #24]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a494:	2bff      	cmp	r3, #255	; 0xff
 800a496:	9b04      	ldr	r3, [sp, #16]
 800a498:	bf18      	it	ne
 800a49a:	9a09      	ldrne	r2, [sp, #36]	; 0x24
 800a49c:	7ddb      	ldrb	r3, [r3, #23]
 800a49e:	bf1c      	itt	ne
 800a4a0:	4353      	mulne	r3, r2
 800a4a2:	f3c3 2307 	ubfxne	r3, r3, #8, #8
 800a4a6:	9308      	str	r3, [sp, #32]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    uint16_t radius       = style->body.radius;
 800a4aa:	b2ad      	uxth	r5, r5
    bwidth--;
 800a4ac:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 85d7 	bne.w	800b062 <lv_draw_rect+0x1776>
    bwidth--;
 800a4b4:	3c01      	subs	r4, #1
    return area_p->y2 - area_p->y1 + 1;
 800a4b6:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a4ba:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a4be:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a4c2:	3201      	adds	r2, #1
 800a4c4:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a4c6:	f8ba 3000 	ldrh.w	r3, [sl]
 800a4ca:	3101      	adds	r1, #1
 800a4cc:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a4ce:	b212      	sxth	r2, r2
 800a4d0:	b209      	sxth	r1, r1
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f7ff f9a6 	bl	8009824 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800a4d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a4dc:	f8ba 2000 	ldrh.w	r2, [sl]
    lb_origo.y = coords->y2 - radius - aa;
 800a4e0:	f8ba b006 	ldrh.w	fp, [sl, #6]
    lt_origo.x = coords->x1 + radius + aa;
 800a4e4:	441a      	add	r2, r3
 800a4e6:	4402      	add	r2, r0
 800a4e8:	b292      	uxth	r2, r2
 800a4ea:	9207      	str	r2, [sp, #28]
    lt_origo.y = coords->y1 + radius + aa;
 800a4ec:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	4402      	add	r2, r0
 800a4f4:	b292      	uxth	r2, r2
    lb_origo.y = coords->y2 - radius - aa;
 800a4f6:	ebab 0b00 	sub.w	fp, fp, r0
    lt_origo.y = coords->y1 + radius + aa;
 800a4fa:	9205      	str	r2, [sp, #20]
    lb_origo.y = coords->y2 - radius - aa;
 800a4fc:	ebab 0b03 	sub.w	fp, fp, r3
    lt_origo.y = coords->y1 + radius + aa;
 800a500:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800a504:	9212      	str	r2, [sp, #72]	; 0x48
    lb_origo.y = coords->y2 - radius - aa;
 800a506:	fa1f fb8b 	uxth.w	fp, fp
 800a50a:	fa0f f28b 	sxth.w	r2, fp
 800a50e:	9213      	str	r2, [sp, #76]	; 0x4c
    rt_origo.x = coords->x2 - radius - aa;
 800a510:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800a514:	1a12      	subs	r2, r2, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a516:	4605      	mov	r5, r0
    rt_origo.x = coords->x2 - radius - aa;
 800a518:	1ad3      	subs	r3, r2, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a51a:	b207      	sxth	r7, r0
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a51c:	b2a4      	uxth	r4, r4
    rt_origo.x = coords->x2 - radius - aa;
 800a51e:	b29b      	uxth	r3, r3
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a520:	463a      	mov	r2, r7
 800a522:	a926      	add	r1, sp, #152	; 0x98
 800a524:	a82a      	add	r0, sp, #168	; 0xa8
    lv_coord_t radius_in = radius - bwidth;
 800a526:	1b2c      	subs	r4, r5, r4
    rt_origo.x = coords->x2 - radius - aa;
 800a528:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a52a:	f002 fa06 	bl	800c93a <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800a52e:	b223      	sxth	r3, r4
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a530:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a534:	a928      	add	r1, sp, #160	; 0xa0
 800a536:	a82c      	add	r0, sp, #176	; 0xb0
    lv_coord_t radius_in = radius - bwidth;
 800a538:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a53a:	f002 f9fe 	bl	800c93a <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t out_y_seg_start = 0;
 800a542:	9310      	str	r3, [sp, #64]	; 0x40
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a546:	3b01      	subs	r3, #1
 800a548:	9318      	str	r3, [sp, #96]	; 0x60
 800a54a:	9b06      	ldr	r3, [sp, #24]
 800a54c:	f003 0309 	and.w	r3, r3, #9
 800a550:	9311      	str	r3, [sp, #68]	; 0x44
    while(cir_out.y <= cir_out.x) {
 800a552:	f9bd a0aa 	ldrsh.w	sl, [sp, #170]	; 0xaa
 800a556:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
 800a55a:	4552      	cmp	r2, sl
 800a55c:	f280 8584 	bge.w	800b068 <lv_draw_rect+0x177c>
    if(aa) {
 800a560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d077      	beq.n	800a656 <lv_draw_rect+0xd6a>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a566:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800a56a:	ebaa 0a05 	sub.w	sl, sl, r5
 800a56e:	fa0f f38a 	sxth.w	r3, sl
 800a572:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a576:	fa1f fa87 	uxth.w	sl, r7
 800a57a:	3301      	adds	r3, #1
 800a57c:	4453      	add	r3, sl
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a57e:	2600      	movs	r6, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a580:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 800a582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a584:	b231      	sxth	r1, r6
 800a586:	428b      	cmp	r3, r1
 800a588:	f300 87f7 	bgt.w	800b57a <lv_draw_rect+0x1c8e>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58e:	1afd      	subs	r5, r7, r3
 800a590:	2d00      	cmp	r5, #0
 800a592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a594:	bfb8      	it	lt
 800a596:	426d      	neglt	r5, r5
 800a598:	429d      	cmp	r5, r3
 800a59a:	d149      	bne.n	800a630 <lv_draw_rect+0xd44>
            lv_opa_t aa_opa = opa >> 1;
 800a59c:	9b08      	ldr	r3, [sp, #32]
 800a59e:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a5a0:	9b06      	ldr	r3, [sp, #24]
 800a5a2:	f003 0309 	and.w	r3, r3, #9
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	d10c      	bne.n	800a5c4 <lv_draw_rect+0xcd8>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ac:	9400      	str	r4, [sp, #0]
 800a5ae:	b2b8      	uxth	r0, r7
 800a5b0:	eb0b 0100 	add.w	r1, fp, r0
 800a5b4:	4418      	add	r0, r3
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	464a      	mov	r2, r9
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	b209      	sxth	r1, r1
 800a5be:	b200      	sxth	r0, r0
 800a5c0:	f7fe f999 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	f003 0305 	and.w	r3, r3, #5
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d10c      	bne.n	800a5e8 <lv_draw_rect+0xcfc>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800a5ce:	9b07      	ldr	r3, [sp, #28]
 800a5d0:	9400      	str	r4, [sp, #0]
 800a5d2:	b2b8      	uxth	r0, r7
 800a5d4:	eb0b 0100 	add.w	r1, fp, r0
 800a5d8:	1a18      	subs	r0, r3, r0
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	464a      	mov	r2, r9
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	b209      	sxth	r1, r1
 800a5e2:	b200      	sxth	r0, r0
 800a5e4:	f7fe f987 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a5e8:	9b06      	ldr	r3, [sp, #24]
 800a5ea:	f003 0306 	and.w	r3, r3, #6
 800a5ee:	2b06      	cmp	r3, #6
 800a5f0:	d10c      	bne.n	800a60c <lv_draw_rect+0xd20>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800a5f2:	9b05      	ldr	r3, [sp, #20]
 800a5f4:	9400      	str	r4, [sp, #0]
 800a5f6:	b2b8      	uxth	r0, r7
 800a5f8:	1a19      	subs	r1, r3, r0
 800a5fa:	9b07      	ldr	r3, [sp, #28]
 800a5fc:	1a18      	subs	r0, r3, r0
 800a5fe:	9b04      	ldr	r3, [sp, #16]
 800a600:	464a      	mov	r2, r9
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	b209      	sxth	r1, r1
 800a606:	b200      	sxth	r0, r0
 800a608:	f7fe f975 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	f003 030a 	and.w	r3, r3, #10
 800a612:	2b0a      	cmp	r3, #10
 800a614:	d10c      	bne.n	800a630 <lv_draw_rect+0xd44>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	9400      	str	r4, [sp, #0]
 800a61a:	b2bf      	uxth	r7, r7
 800a61c:	1bd9      	subs	r1, r3, r7
 800a61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a620:	441f      	add	r7, r3
 800a622:	9b04      	ldr	r3, [sp, #16]
 800a624:	464a      	mov	r2, r9
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	b209      	sxth	r1, r1
 800a62a:	b238      	sxth	r0, r7
 800a62c:	f7fe f963 	bl	80088f6 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a630:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
 800a634:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a638:	9a09      	ldr	r2, [sp, #36]	; 0x24
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a63a:	1b5b      	subs	r3, r3, r5
 800a63c:	b21b      	sxth	r3, r3
 800a63e:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a642:	3b01      	subs	r3, #1
 800a644:	4413      	add	r3, r2
 800a646:	b21b      	sxth	r3, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a648:	2400      	movs	r4, #0
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a64a:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 800a64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a64e:	b221      	sxth	r1, r4
 800a650:	428b      	cmp	r3, r1
 800a652:	f301 802f 	bgt.w	800b6b4 <lv_draw_rect+0x1dc8>
}
 800a656:	b031      	add	sp, #196	; 0xc4
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800a65c:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800a660:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800a664:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800a668:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800a66c:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800a670:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
        lv_circ_next(&circ, &circ_tmp);
 800a674:	a92a      	add	r1, sp, #168	; 0xa8
 800a676:	4658      	mov	r0, fp
 800a678:	f002 f96f 	bl	800c95a <lv_circ_next>
 800a67c:	f7ff bbd5 	b.w	8009e2a <lv_draw_rect+0x53e>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800a680:	0842      	lsrs	r2, r0, #1
 800a682:	1ac0      	subs	r0, r0, r3
 800a684:	fbb2 f2f6 	udiv	r2, r2, r6
 800a688:	f801 2b01 	strb.w	r2, [r1], #1
 800a68c:	f7ff bbe0 	b.w	8009e50 <lv_draw_rect+0x564>
        point_l.y = ofs_l.y + curve_x[col];
 800a690:	f837 b013 	ldrh.w	fp, [r7, r3, lsl #1]
 800a694:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a696:	9906      	ldr	r1, [sp, #24]
 800a698:	4458      	add	r0, fp
 800a69a:	b280      	uxth	r0, r0
 800a69c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a69e:	9808      	ldr	r0, [sp, #32]
 800a6a0:	fa1f f288 	uxth.w	r2, r8
 800a6a4:	1a89      	subs	r1, r1, r2
 800a6a6:	4402      	add	r2, r0
 800a6a8:	b209      	sxth	r1, r1
 800a6aa:	b212      	sxth	r2, r2
 800a6ac:	9110      	str	r1, [sp, #64]	; 0x40
 800a6ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6b0:	0059      	lsls	r1, r3, #1
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800a6b2:	b12b      	cbz	r3, 800a6c0 <lv_draw_rect+0xdd4>
 800a6b4:	187a      	adds	r2, r7, r1
 800a6b6:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800a6ba:	eba3 030b 	sub.w	r3, r3, fp
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	b21b      	sxth	r3, r3
 800a6c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c4:	f04f 0b00 	mov.w	fp, #0
 800a6c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ca:	445b      	add	r3, fp
 800a6cc:	b21b      	sxth	r3, r3
 800a6ce:	930c      	str	r3, [sp, #48]	; 0x30
        for(d = 0; d < swidth; d++) {
 800a6d0:	fa1f f38b 	uxth.w	r3, fp
 800a6d4:	42b3      	cmp	r3, r6
 800a6d6:	db03      	blt.n	800a6e0 <lv_draw_rect+0xdf4>
 800a6d8:	f108 0801 	add.w	r8, r8, #1
 800a6dc:	f7ff bbd7 	b.w	8009e8e <lv_draw_rect+0x5a2>
            if(diff == 0) {
 800a6e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                px_opa = line_1d_blur[d];
 800a6e2:	5ce5      	ldrb	r5, [r4, r3]
            if(diff == 0) {
 800a6e4:	b9b2      	cbnz	r2, 800a714 <lv_draw_rect+0xe28>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	9500      	str	r5, [sp, #0]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6f0:	464a      	mov	r2, r9
 800a6f2:	f7fe f900 	bl	80088f6 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800a6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	da07      	bge.n	800a70e <lv_draw_rect+0xe22>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800a6fe:	9b04      	ldr	r3, [sp, #16]
 800a700:	9500      	str	r5, [sp, #0]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a706:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a708:	464a      	mov	r2, r9
 800a70a:	f7fe f8f4 	bl	80088f6 <lv_draw_px>
 800a70e:	f10b 0b01 	add.w	fp, fp, #1
 800a712:	e7d9      	b.n	800a6c8 <lv_draw_rect+0xddc>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800a714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a716:	1a9b      	subs	r3, r3, r2
 800a718:	5ce3      	ldrb	r3, [r4, r3]
 800a71a:	441d      	add	r5, r3
 800a71c:	f3c5 0547 	ubfx	r5, r5, #1, #8
 800a720:	e7e1      	b.n	800a6e6 <lv_draw_rect+0xdfa>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800a722:	9a04      	ldr	r2, [sp, #16]
 800a724:	5ce3      	ldrb	r3, [r4, r3]
 800a726:	6992      	ldr	r2, [r2, #24]
 800a728:	4649      	mov	r1, r9
 800a72a:	a82e      	add	r0, sp, #184	; 0xb8
 800a72c:	f7fe f93a 	bl	80089a4 <lv_draw_fill>
        area_mid.y1++;
 800a730:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
 800a734:	3301      	adds	r3, #1
 800a736:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        area_mid.y2++;
 800a73a:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 800a73e:	3301      	adds	r3, #1
 800a740:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 800a744:	462b      	mov	r3, r5
 800a746:	f7ff bbb7 	b.w	8009eb8 <lv_draw_rect+0x5cc>
                work_area.y1 += 1;
 800a74a:	3301      	adds	r3, #1
 800a74c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                work_area.y2 -= 1;
 800a750:	3d01      	subs	r5, #1
 800a752:	e412      	b.n	8009f7a <lv_draw_rect+0x68e>
        if(style->body.radius != 0) {
 800a754:	9a04      	ldr	r2, [sp, #16]
 800a756:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
        lv_coord_t row_end   = coords->y2 - radius;
 800a75a:	1a2d      	subs	r5, r5, r0
 800a75c:	b2ad      	uxth	r5, r5
        if(style->body.radius != 0) {
 800a75e:	2a00      	cmp	r2, #0
 800a760:	d132      	bne.n	800a7c8 <lv_draw_rect+0xedc>
        lv_coord_t row_start = coords->y1 + radius;
 800a762:	b21c      	sxth	r4, r3
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a764:	fa5f f38b 	uxtb.w	r3, fp
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800a76e:	9306      	str	r3, [sp, #24]
 800a770:	f3c8 2307 	ubfx	r3, r8, #8, #8
                row_end -= 1;
 800a774:	b22d      	sxth	r5, r5
 800a776:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a77a:	9307      	str	r3, [sp, #28]
        for(row = row_start; row <= row_end; row++) {
 800a77c:	42ac      	cmp	r4, r5
 800a77e:	f73f ac04 	bgt.w	8009f8a <lv_draw_rect+0x69e>
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a782:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a786:	9a06      	ldr	r2, [sp, #24]
 800a788:	9907      	ldr	r1, [sp, #28]
            work_area.y1 = row;
 800a78a:	f8ad 40ba 	strh.w	r4, [sp, #186]	; 0xba
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a78e:	1b1b      	subs	r3, r3, r4
 800a790:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800a794:	fbb3 f3f6 	udiv	r3, r3, r6
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	9302      	str	r3, [sp, #8]
 800a79c:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	fa5f f088 	uxtb.w	r0, r8
 800a7ac:	9b05      	ldr	r3, [sp, #20]
            work_area.y2 = row;
 800a7ae:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a7b2:	f7ff f852 	bl	800985a <lv_color_mix.isra.0>
 800a7b6:	3401      	adds	r4, #1
            lv_draw_fill(&work_area, mask, act_color, opa);
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	4649      	mov	r1, r9
 800a7be:	a82e      	add	r0, sp, #184	; 0xb8
 800a7c0:	f7fe f8f0 	bl	80089a4 <lv_draw_fill>
 800a7c4:	b224      	sxth	r4, r4
 800a7c6:	e7d9      	b.n	800a77c <lv_draw_rect+0xe90>
            if(aa) {
 800a7c8:	b11c      	cbz	r4, 800a7d2 <lv_draw_rect+0xee6>
                row_start += 2;
 800a7ca:	1c9c      	adds	r4, r3, #2
 800a7cc:	b224      	sxth	r4, r4
                row_end -= 2;
 800a7ce:	3d02      	subs	r5, #2
 800a7d0:	e7c8      	b.n	800a764 <lv_draw_rect+0xe78>
                row_start += 1;
 800a7d2:	1c5c      	adds	r4, r3, #1
 800a7d4:	b224      	sxth	r4, r4
                row_end -= 1;
 800a7d6:	3d01      	subs	r5, #1
 800a7d8:	e7c4      	b.n	800a764 <lv_draw_rect+0xe78>
        if(aa) {
 800a7da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d04e      	beq.n	800a87e <lv_draw_rect+0xf92>
            if(out_x_last != cir.x) {
 800a7e0:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 800a7e4:	4543      	cmp	r3, r8
 800a7e6:	d04a      	beq.n	800a87e <lv_draw_rect+0xf92>
                out_y_seg_end       = cir.y;
 800a7e8:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800a7ec:	931e      	str	r3, [sp, #120]	; 0x78
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a7ee:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a7f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a7f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a7f8:	1a9b      	subs	r3, r3, r2
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	9312      	str	r3, [sp, #72]	; 0x48
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	eba3 0508 	sub.w	r5, r3, r8
 800a804:	ebc5 2505 	rsb	r5, r5, r5, lsl #8
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	fbb5 f5f3 	udiv	r5, r5, r3
 800a80e:	fa5f f38b 	uxtb.w	r3, fp
 800a812:	9313      	str	r3, [sp, #76]	; 0x4c
 800a814:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a818:	9314      	str	r3, [sp, #80]	; 0x50
 800a81a:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800a81e:	9315      	str	r3, [sp, #84]	; 0x54
 800a820:	b2e3      	uxtb	r3, r4
 800a822:	9316      	str	r3, [sp, #88]	; 0x58
 800a824:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a828:	9317      	str	r3, [sp, #92]	; 0x5c
 800a82a:	f3c4 4307 	ubfx	r3, r4, #16, #8
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a82e:	9301      	str	r3, [sp, #4]
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a830:	b2ed      	uxtb	r5, r5
 800a832:	9318      	str	r3, [sp, #96]	; 0x60
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a836:	9502      	str	r5, [sp, #8]
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	a813      	add	r0, sp, #76	; 0x4c
 800a83c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800a83e:	f7ff f80c 	bl	800985a <lv_color_mix.isra.0>
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a848:	9300      	str	r3, [sp, #0]
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a84a:	900d      	str	r0, [sp, #52]	; 0x34
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a84c:	9502      	str	r5, [sp, #8]
 800a84e:	a816      	add	r0, sp, #88	; 0x58
 800a850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a852:	c807      	ldmia	r0, {r0, r1, r2}
 800a854:	f7ff f801 	bl	800985a <lv_color_mix.isra.0>
 800a858:	2300      	movs	r3, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a85a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a85c:	9310      	str	r3, [sp, #64]	; 0x40
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a85e:	fa1f f388 	uxth.w	r3, r8
 800a862:	931a      	str	r3, [sp, #104]	; 0x68
 800a864:	4413      	add	r3, r2
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a866:	900e      	str	r0, [sp, #56]	; 0x38
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a868:	9322      	str	r3, [sp, #136]	; 0x88
 800a86a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800a86e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a870:	428b      	cmp	r3, r1
 800a872:	f300 808c 	bgt.w	800a98e <lv_draw_rect+0x10a2>
                out_y_seg_start = out_y_seg_end;
 800a876:	9b1e      	ldr	r3, [sp, #120]	; 0x78
                out_x_last      = cir.x;
 800a878:	f9bd 8098 	ldrsh.w	r8, [sp, #152]	; 0x98
                out_y_seg_start = out_y_seg_end;
 800a87c:	930f      	str	r3, [sp, #60]	; 0x3c
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800a87e:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800a882:	f9bd 509a 	ldrsh.w	r5, [sp, #154]	; 0x9a
 800a886:	930d      	str	r3, [sp, #52]	; 0x34
 800a888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800a88a:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800a88e:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800a892:	f9bd 70aa 	ldrsh.w	r7, [sp, #170]	; 0xaa
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800a896:	18ee      	adds	r6, r5, r3
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800a898:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 800a89c:	930e      	str	r3, [sp, #56]	; 0x38
 800a89e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8a0:	4413      	add	r3, r2
 800a8a2:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800a8a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800a8a6:	1a9a      	subs	r2, r3, r2
 800a8a8:	4291      	cmp	r1, r2
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800a8aa:	eba3 0505 	sub.w	r5, r3, r5
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800a8ae:	f040 87a1 	bne.w	800b7f4 <lv_draw_rect+0x1f08>
        if(mid_top_refr != 0) {
 800a8b2:	42af      	cmp	r7, r5
 800a8b4:	d008      	beq.n	800a8c8 <lv_draw_rect+0xfdc>
            if(mcolor.full == gcolor.full)
 800a8b6:	455c      	cmp	r4, fp
 800a8b8:	f040 8124 	bne.w	800ab04 <lv_draw_rect+0x1218>
                act_color = mcolor;
 800a8bc:	4622      	mov	r2, r4
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a8be:	9b05      	ldr	r3, [sp, #20]
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	a82a      	add	r0, sp, #168	; 0xa8
 800a8c4:	f7fe f86e 	bl	80089a4 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800a8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ca:	42b3      	cmp	r3, r6
 800a8cc:	d008      	beq.n	800a8e0 <lv_draw_rect+0xff4>
            if(mcolor.full == gcolor.full)
 800a8ce:	455c      	cmp	r4, fp
 800a8d0:	f040 8135 	bne.w	800ab3e <lv_draw_rect+0x1252>
                act_color = mcolor;
 800a8d4:	4622      	mov	r2, r4
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a8d6:	9b05      	ldr	r3, [sp, #20]
 800a8d8:	4649      	mov	r1, r9
 800a8da:	a82c      	add	r0, sp, #176	; 0xb0
 800a8dc:	f7fe f862 	bl	80089a4 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800a8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d008      	beq.n	800a8fa <lv_draw_rect+0x100e>
            if(mcolor.full == gcolor.full)
 800a8e8:	455c      	cmp	r4, fp
 800a8ea:	f040 8145 	bne.w	800ab78 <lv_draw_rect+0x128c>
                act_color = mcolor;
 800a8ee:	4622      	mov	r2, r4
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	a82e      	add	r0, sp, #184	; 0xb8
 800a8f6:	f7fe f855 	bl	80089a4 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8fc:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 800a900:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800a904:	9807      	ldr	r0, [sp, #28]
 800a906:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a908:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a90a:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a90c:	440b      	add	r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a90e:	1a41      	subs	r1, r0, r1
 800a910:	9200      	str	r2, [sp, #0]
 800a912:	a82c      	add	r0, sp, #176	; 0xb0
 800a914:	b21b      	sxth	r3, r3
 800a916:	b209      	sxth	r1, r1
 800a918:	f001 ff56 	bl	800c7c8 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a91e:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800a922:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 800a926:	9807      	ldr	r0, [sp, #28]
 800a928:	441a      	add	r2, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a92a:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a92c:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a92e:	440b      	add	r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a930:	1a41      	subs	r1, r0, r1
 800a932:	9200      	str	r2, [sp, #0]
 800a934:	a82e      	add	r0, sp, #184	; 0xb8
 800a936:	b21b      	sxth	r3, r3
 800a938:	b209      	sxth	r1, r1
 800a93a:	f001 ff45 	bl	800c7c8 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a940:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 800a944:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800a948:	9807      	ldr	r0, [sp, #28]
 800a94a:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a94c:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a94e:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a950:	440b      	add	r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a952:	1a41      	subs	r1, r0, r1
 800a954:	9200      	str	r2, [sp, #0]
 800a956:	a82a      	add	r0, sp, #168	; 0xa8
 800a958:	b21b      	sxth	r3, r3
 800a95a:	b209      	sxth	r1, r1
 800a95c:	f001 ff34 	bl	800c7c8 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a962:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800a966:	f8bd 109a 	ldrh.w	r1, [sp, #154]	; 0x9a
 800a96a:	9807      	ldr	r0, [sp, #28]
 800a96c:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a96e:	9b08      	ldr	r3, [sp, #32]
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a970:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a972:	440b      	add	r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a974:	1a41      	subs	r1, r0, r1
 800a976:	9200      	str	r2, [sp, #0]
 800a978:	a828      	add	r0, sp, #160	; 0xa0
 800a97a:	b21b      	sxth	r3, r3
 800a97c:	b209      	sxth	r1, r1
 800a97e:	f001 ff23 	bl	800c7c8 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800a982:	a925      	add	r1, sp, #148	; 0x94
 800a984:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a986:	f001 ffe8 	bl	800c95a <lv_circ_next>
 800a98a:	f7ff bba3 	b.w	800a0d4 <lv_draw_rect+0x7e8>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a98e:	9b12      	ldr	r3, [sp, #72]	; 0x48
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a990:	9a05      	ldr	r2, [sp, #20]
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a992:	2b01      	cmp	r3, #1
 800a994:	f000 8093 	beq.w	800aabe <lv_draw_rect+0x11d2>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe ff85 	bl	80098a8 <antialias_get_opa_circ>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a9a4:	9319      	str	r3, [sp, #100]	; 0x64
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a9a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	f9bd 7088 	ldrsh.w	r7, [sp, #136]	; 0x88
 800a9ae:	9600      	str	r6, [sp, #0]
 800a9b0:	189d      	adds	r5, r3, r2
 800a9b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9b4:	441d      	add	r5, r3
 800a9b6:	b22d      	sxth	r5, r5
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9be:	464a      	mov	r2, r9
 800a9c0:	f7fd ff99 	bl	80088f6 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9c8:	9600      	str	r6, [sp, #0]
 800a9ca:	eba3 0802 	sub.w	r8, r3, r2
 800a9ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9d0:	eba8 0803 	sub.w	r8, r8, r3
 800a9d4:	fa0f f888 	sxth.w	r8, r8
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4640      	mov	r0, r8
 800a9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9de:	464a      	mov	r2, r9
 800a9e0:	f7fd ff89 	bl	80088f6 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e6:	9600      	str	r6, [sp, #0]
 800a9e8:	1e5f      	subs	r7, r3, #1
 800a9ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a9ec:	1aff      	subs	r7, r7, r3
 800a9ee:	b23f      	sxth	r7, r7
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9f6:	464a      	mov	r2, r9
 800a9f8:	f7fd ff7d 	bl	80088f6 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	4628      	mov	r0, r5
 800aa00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa02:	9600      	str	r6, [sp, #0]
 800aa04:	464a      	mov	r2, r9
 800aa06:	f7fd ff76 	bl	80088f6 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa0e:	1a9f      	subs	r7, r3, r2
 800aa10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa12:	441f      	add	r7, r3
 800aa14:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 800aa18:	9b06      	ldr	r3, [sp, #24]
 800aa1a:	fbb7 f7f3 	udiv	r7, r7, r3
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aa1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa20:	9301      	str	r3, [sp, #4]
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800aa22:	b2ff      	uxtb	r7, r7
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aa24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa26:	9702      	str	r7, [sp, #8]
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	a816      	add	r0, sp, #88	; 0x58
 800aa2c:	c807      	ldmia	r0, {r0, r1, r2}
 800aa2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa30:	f7fe ff13 	bl	800985a <lv_color_mix.isra.0>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa38:	9600      	str	r6, [sp, #0]
 800aa3a:	f103 0801 	add.w	r8, r3, #1
 800aa3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aa40:	4498      	add	r8, r3
 800aa42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa44:	4413      	add	r3, r2
 800aa46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa48:	4413      	add	r3, r2
 800aa4a:	b21b      	sxth	r3, r3
 800aa4c:	9320      	str	r3, [sp, #128]	; 0x80
 800aa4e:	fa0f f888 	sxth.w	r8, r8
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aa52:	4605      	mov	r5, r0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800aa54:	4603      	mov	r3, r0
 800aa56:	464a      	mov	r2, r9
 800aa58:	9920      	ldr	r1, [sp, #128]	; 0x80
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7fd ff4b 	bl	80088f6 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800aa60:	9b07      	ldr	r3, [sp, #28]
 800aa62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa64:	9920      	ldr	r1, [sp, #128]	; 0x80
 800aa66:	9600      	str	r6, [sp, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	b21b      	sxth	r3, r3
 800aa6e:	931f      	str	r3, [sp, #124]	; 0x7c
 800aa70:	464a      	mov	r2, r9
 800aa72:	462b      	mov	r3, r5
 800aa74:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800aa76:	f7fd ff3e 	bl	80088f6 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800aa7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa80:	9702      	str	r7, [sp, #8]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	a813      	add	r0, sp, #76	; 0x4c
 800aa86:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800aa88:	f7fe fee7 	bl	800985a <lv_color_mix.isra.0>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800aa8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa90:	9600      	str	r6, [sp, #0]
 800aa92:	1a9f      	subs	r7, r3, r2
 800aa94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa96:	1aff      	subs	r7, r7, r3
 800aa98:	b23f      	sxth	r7, r7
 800aa9a:	4603      	mov	r3, r0
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800aa9c:	4605      	mov	r5, r0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800aa9e:	464a      	mov	r2, r9
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800aaa4:	f7fd ff27 	bl	80088f6 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800aaa8:	462b      	mov	r3, r5
 800aaaa:	9600      	str	r6, [sp, #0]
 800aaac:	464a      	mov	r2, r9
 800aaae:	4639      	mov	r1, r7
 800aab0:	4640      	mov	r0, r8
 800aab2:	f7fd ff20 	bl	80088f6 <lv_draw_px>
 800aab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aab8:	3301      	adds	r3, #1
 800aaba:	9310      	str	r3, [sp, #64]	; 0x40
 800aabc:	e6d5      	b.n	800a86a <lv_draw_rect+0xf7e>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aabe:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aac0:	f7fd fe1c 	bl	80086fc <lv_draw_aa_get_opa>
 800aac4:	9b05      	ldr	r3, [sp, #20]
 800aac6:	1a18      	subs	r0, r3, r0
 800aac8:	b2c6      	uxtb	r6, r0
 800aaca:	e769      	b.n	800a9a0 <lv_draw_rect+0x10b4>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800aacc:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800aad0:	9a06      	ldr	r2, [sp, #24]
 800aad2:	1a5b      	subs	r3, r3, r1
 800aad4:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800aad8:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800aaf0:	fa5f f38b 	uxtb.w	r3, fp
 800aaf4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800aaf8:	b2e0      	uxtb	r0, r4
 800aafa:	f7fe feae 	bl	800985a <lv_color_mix.isra.0>
 800aafe:	4602      	mov	r2, r0
 800ab00:	f000 be7c 	b.w	800b7fc <lv_draw_rect+0x1f10>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800ab04:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ab08:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
 800ab0c:	1a9b      	subs	r3, r3, r2
 800ab0e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800ab12:	9a06      	ldr	r2, [sp, #24]
 800ab14:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	9302      	str	r3, [sp, #8]
 800ab1c:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ab2c:	fa5f f38b 	uxtb.w	r3, fp
 800ab30:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800ab34:	b2e0      	uxtb	r0, r4
 800ab36:	f7fe fe90 	bl	800985a <lv_color_mix.isra.0>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	e6bf      	b.n	800a8be <lv_draw_rect+0xfd2>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ab3e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ab42:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800ab46:	1a9b      	subs	r3, r3, r2
 800ab48:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800ab4c:	9a06      	ldr	r2, [sp, #24]
 800ab4e:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ab66:	fa5f f38b 	uxtb.w	r3, fp
 800ab6a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800ab6e:	b2e0      	uxtb	r0, r4
 800ab70:	f7fe fe73 	bl	800985a <lv_color_mix.isra.0>
 800ab74:	4602      	mov	r2, r0
 800ab76:	e6ae      	b.n	800a8d6 <lv_draw_rect+0xfea>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ab78:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ab7c:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800ab86:	9a06      	ldr	r2, [sp, #24]
 800ab88:	fbb3 f3f2 	udiv	r3, r3, r2
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	9302      	str	r3, [sp, #8]
 800ab90:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800aba0:	fa5f f38b 	uxtb.w	r3, fp
 800aba4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800aba8:	b2e0      	uxtb	r0, r4
 800abaa:	f7fe fe56 	bl	800985a <lv_color_mix.isra.0>
 800abae:	4602      	mov	r2, r0
 800abb0:	e69e      	b.n	800a8f0 <lv_draw_rect+0x1004>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800abb2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800abb6:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800abc0:	9a06      	ldr	r2, [sp, #24]
 800abc2:	fbb3 f3f2 	udiv	r3, r3, r2
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	9302      	str	r3, [sp, #8]
 800abca:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800abda:	fa5f f38b 	uxtb.w	r3, fp
 800abde:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800abe2:	b2e0      	uxtb	r0, r4
 800abe4:	f7fe fe39 	bl	800985a <lv_color_mix.isra.0>
 800abe8:	4602      	mov	r2, r0
 800abea:	f7ff ba7d 	b.w	800a0e8 <lv_draw_rect+0x7fc>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800abee:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800abf8:	9a06      	ldr	r2, [sp, #24]
 800abfa:	fbb3 f3f2 	udiv	r3, r3, r2
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	9302      	str	r3, [sp, #8]
 800ac02:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ac12:	fa5f f38b 	uxtb.w	r3, fp
 800ac16:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800ac1a:	b2e0      	uxtb	r0, r4
 800ac1c:	f7fe fe1d 	bl	800985a <lv_color_mix.isra.0>
 800ac20:	4602      	mov	r2, r0
 800ac22:	f7ff ba70 	b.w	800a106 <lv_draw_rect+0x81a>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800ac26:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ac2a:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800ac2e:	1a9b      	subs	r3, r3, r2
 800ac30:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800ac34:	9a06      	ldr	r2, [sp, #24]
 800ac36:	fbb3 f3f2 	udiv	r3, r3, r2
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ac4e:	fa5f f38b 	uxtb.w	r3, fp
 800ac52:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800ac56:	b2e0      	uxtb	r0, r4
 800ac58:	f7fe fdff 	bl	800985a <lv_color_mix.isra.0>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f7ff ba5b 	b.w	800a118 <lv_draw_rect+0x82c>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800ac62:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800ac6c:	9a06      	ldr	r2, [sp, #24]
 800ac6e:	fbb3 f3f2 	udiv	r3, r3, r2
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	9302      	str	r3, [sp, #8]
 800ac76:	f3cb 4307 	ubfx	r3, fp, #16, #8
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ac86:	fa5f f38b 	uxtb.w	r3, fp
 800ac8a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800ac8e:	b2e0      	uxtb	r0, r4
 800ac90:	f7fe fde3 	bl	800985a <lv_color_mix.isra.0>
 800ac94:	4602      	mov	r2, r0
 800ac96:	f7ff ba4e 	b.w	800a136 <lv_draw_rect+0x84a>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800ac9a:	9a05      	ldr	r2, [sp, #20]
 800ac9c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ac9e:	f7fd fd2d 	bl	80086fc <lv_draw_aa_get_opa>
 800aca2:	9b05      	ldr	r3, [sp, #20]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aca4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aca6:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800acaa:	1a18      	subs	r0, r3, r0
 800acac:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800acb0:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	189c      	adds	r4, r3, r2
 800acb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acb8:	441c      	add	r4, r3
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800acba:	b2c6      	uxtb	r6, r0
 800acbc:	b224      	sxth	r4, r4
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800acbe:	4629      	mov	r1, r5
 800acc0:	4620      	mov	r0, r4
 800acc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acc4:	9600      	str	r6, [sp, #0]
 800acc6:	464a      	mov	r2, r9
 800acc8:	f7fd fe15 	bl	80088f6 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800accc:	9b07      	ldr	r3, [sp, #28]
 800acce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acd0:	9600      	str	r6, [sp, #0]
 800acd2:	1a9f      	subs	r7, r3, r2
 800acd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd6:	1aff      	subs	r7, r7, r3
 800acd8:	b23f      	sxth	r7, r7
 800acda:	4629      	mov	r1, r5
 800acdc:	4638      	mov	r0, r7
 800acde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace0:	464a      	mov	r2, r9
 800ace2:	f7fd fe08 	bl	80088f6 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800ace6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace8:	9600      	str	r6, [sp, #0]
 800acea:	1e5d      	subs	r5, r3, #1
 800acec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800acee:	1aed      	subs	r5, r5, r3
 800acf0:	b22d      	sxth	r5, r5
 800acf2:	4629      	mov	r1, r5
 800acf4:	4638      	mov	r0, r7
 800acf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf8:	464a      	mov	r2, r9
 800acfa:	f7fd fdfc 	bl	80088f6 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800acfe:	4629      	mov	r1, r5
 800ad00:	4620      	mov	r0, r4
 800ad02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad04:	9600      	str	r6, [sp, #0]
 800ad06:	464a      	mov	r2, r9
 800ad08:	f7fd fdf5 	bl	80088f6 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800ad0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad10:	9913      	ldr	r1, [sp, #76]	; 0x4c
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800ad12:	1a9c      	subs	r4, r3, r2
 800ad14:	9b16      	ldr	r3, [sp, #88]	; 0x58
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad16:	9a14      	ldr	r2, [sp, #80]	; 0x50
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800ad18:	441c      	add	r4, r3
 800ad1a:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	fbb4 f4f3 	udiv	r4, r4, r3
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad26:	9301      	str	r3, [sp, #4]
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800ad28:	b2e4      	uxtb	r4, r4
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad2c:	9402      	str	r4, [sp, #8]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4658      	mov	r0, fp
 800ad32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad34:	f7fe fd91 	bl	800985a <lv_color_mix.isra.0>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad3c:	9600      	str	r6, [sp, #0]
 800ad3e:	1c5f      	adds	r7, r3, #1
 800ad40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad42:	441f      	add	r7, r3
 800ad44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad46:	4413      	add	r3, r2
 800ad48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad4a:	4413      	add	r3, r2
 800ad4c:	b21b      	sxth	r3, r3
 800ad4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad50:	b23f      	sxth	r7, r7
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800ad52:	4605      	mov	r5, r0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800ad54:	4603      	mov	r3, r0
 800ad56:	464a      	mov	r2, r9
 800ad58:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	f7fd fdcb 	bl	80088f6 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad64:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ad66:	9600      	str	r6, [sp, #0]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	b21b      	sxth	r3, r3
 800ad6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad70:	464a      	mov	r2, r9
 800ad72:	462b      	mov	r3, r5
 800ad74:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ad76:	f7fd fdbe 	bl	80088f6 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ad7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad80:	9402      	str	r4, [sp, #8]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	a810      	add	r0, sp, #64	; 0x40
 800ad86:	c807      	ldmia	r0, {r0, r1, r2}
 800ad88:	465b      	mov	r3, fp
 800ad8a:	f7fe fd66 	bl	800985a <lv_color_mix.isra.0>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800ad8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad92:	9600      	str	r6, [sp, #0]
 800ad94:	1a9b      	subs	r3, r3, r2
 800ad96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad98:	1a9b      	subs	r3, r3, r2
 800ad9a:	b21c      	sxth	r4, r3
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ad9c:	4605      	mov	r5, r0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800ad9e:	4603      	mov	r3, r0
 800ada0:	464a      	mov	r2, r9
 800ada2:	4621      	mov	r1, r4
 800ada4:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ada6:	f7fd fda6 	bl	80088f6 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800adaa:	462b      	mov	r3, r5
 800adac:	9600      	str	r6, [sp, #0]
 800adae:	464a      	mov	r2, r9
 800adb0:	4621      	mov	r1, r4
 800adb2:	4638      	mov	r0, r7
 800adb4:	f7fd fd9f 	bl	80088f6 <lv_draw_px>
 800adb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adba:	3301      	adds	r3, #1
 800adbc:	9316      	str	r3, [sp, #88]	; 0x58
 800adbe:	f7ff ba2d 	b.w	800a21c <lv_draw_rect+0x930>
    corner_size++;
 800adc2:	3301      	adds	r3, #1
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	9305      	str	r3, [sp, #20]
    if(part & LV_BORDER_TOP)
 800adc8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800adcc:	9307      	str	r3, [sp, #28]
 800adce:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800add2:	2a00      	cmp	r2, #0
 800add4:	f000 8143 	beq.w	800b05e <lv_draw_rect+0x1772>
        work_area.y1 = coords->y1 + corner_size;
 800add8:	9a05      	ldr	r2, [sp, #20]
 800adda:	4413      	add	r3, r2
        work_area.y1 = coords->y1 + radius;
 800addc:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    if(part & LV_BORDER_BOTTOM)
 800ade0:	f015 0301 	ands.w	r3, r5, #1
        work_area.y2 = coords->y2 - corner_size;
 800ade4:	bf18      	it	ne
 800ade6:	9a05      	ldrne	r2, [sp, #20]
    if(part & LV_BORDER_BOTTOM)
 800ade8:	9308      	str	r3, [sp, #32]
 800adea:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        work_area.y2 = coords->y2 - corner_size;
 800adee:	bf14      	ite	ne
 800adf0:	1a9b      	subne	r3, r3, r2
        work_area.y2 = coords->y2 - radius;
 800adf2:	eba3 030b 	subeq.w	r3, r3, fp
    if(part & LV_BORDER_LEFT) {
 800adf6:	076a      	lsls	r2, r5, #29
        work_area.y2 = coords->y2 - radius;
 800adf8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
    if(part & LV_BORDER_LEFT) {
 800adfc:	d50c      	bpl.n	800ae18 <lv_draw_rect+0x152c>
        work_area.x1 = coords->x1;
 800adfe:	f9ba 3000 	ldrsh.w	r3, [sl]
 800ae02:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        work_area.x2 = work_area.x1 + bwidth;
 800ae06:	4433      	add	r3, r6
 800ae08:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        lv_draw_fill(&work_area, mask, color, opa);
 800ae0c:	463a      	mov	r2, r7
 800ae0e:	4623      	mov	r3, r4
 800ae10:	4649      	mov	r1, r9
 800ae12:	a82e      	add	r0, sp, #184	; 0xb8
 800ae14:	f7fd fdc6 	bl	80089a4 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800ae18:	072b      	lsls	r3, r5, #28
 800ae1a:	d50c      	bpl.n	800ae36 <lv_draw_rect+0x154a>
        work_area.x2 = coords->x2;
 800ae1c:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800ae20:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        work_area.x1 = work_area.x2 - bwidth;
 800ae24:	a830      	add	r0, sp, #192	; 0xc0
 800ae26:	1b9b      	subs	r3, r3, r6
 800ae28:	f820 3d08 	strh.w	r3, [r0, #-8]!
        lv_draw_fill(&work_area, mask, color, opa);
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4623      	mov	r3, r4
 800ae30:	4649      	mov	r1, r9
 800ae32:	f7fd fdb7 	bl	80089a4 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800ae36:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	f8ba 1000 	ldrh.w	r1, [sl]
 800ae40:	1ad2      	subs	r2, r2, r3
 800ae42:	440a      	add	r2, r1
 800ae44:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800ae48:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	9a05      	ldr	r2, [sp, #20]
 800ae50:	1a9b      	subs	r3, r3, r2
 800ae52:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
    if(part & LV_BORDER_TOP) {
 800ae56:	9b07      	ldr	r3, [sp, #28]
 800ae58:	b163      	cbz	r3, 800ae74 <lv_draw_rect+0x1588>
        work_area.y1 = coords->y1;
 800ae5a:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 800ae5e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        work_area.y2 = coords->y1 + bwidth;
 800ae62:	4433      	add	r3, r6
 800ae64:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        lv_draw_fill(&work_area, mask, color, opa);
 800ae68:	463a      	mov	r2, r7
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	a82e      	add	r0, sp, #184	; 0xb8
 800ae70:	f7fd fd98 	bl	80089a4 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	b163      	cbz	r3, 800ae92 <lv_draw_rect+0x15a6>
        work_area.y2 = coords->y2;
 800ae78:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800ae7c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        work_area.y1 = work_area.y2 - bwidth;
 800ae80:	1b9b      	subs	r3, r3, r6
 800ae82:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        lv_draw_fill(&work_area, mask, color, opa);
 800ae86:	463a      	mov	r2, r7
 800ae88:	4623      	mov	r3, r4
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	a82e      	add	r0, sp, #184	; 0xb8
 800ae8e:	f7fd fd89 	bl	80089a4 <lv_draw_fill>
    if(length_corr != 0) {
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d07b      	beq.n	800af90 <lv_draw_rect+0x16a4>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ae98:	f005 0306 	and.w	r3, r5, #6
 800ae9c:	2b06      	cmp	r3, #6
 800ae9e:	d119      	bne.n	800aed4 <lv_draw_rect+0x15e8>
            work_area.x1 = coords->x1;
 800aea0:	f9ba 2000 	ldrsh.w	r2, [sl]
 800aea4:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + radius + aa;
 800aea8:	fa1f f388 	uxth.w	r3, r8
 800aeac:	441a      	add	r2, r3
 800aeae:	445a      	add	r2, fp
 800aeb0:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800aeb4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800aeb8:	1c51      	adds	r1, r2, #1
 800aeba:	440b      	add	r3, r1
 800aebc:	445b      	add	r3, fp
            work_area.y2 = coords->y1 + bwidth;
 800aebe:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800aec0:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 800aec4:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800aec8:	4623      	mov	r3, r4
 800aeca:	463a      	mov	r2, r7
 800aecc:	4649      	mov	r1, r9
 800aece:	a82e      	add	r0, sp, #184	; 0xb8
 800aed0:	f7fd fd68 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800aed4:	f005 030a 	and.w	r3, r5, #10
 800aed8:	2b0a      	cmp	r3, #10
 800aeda:	d11a      	bne.n	800af12 <lv_draw_rect+0x1626>
            work_area.x1 = coords->x2 - radius - aa;
 800aedc:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800aee0:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - radius - aa;
 800aee4:	fa1f f388 	uxth.w	r3, r8
 800aee8:	eba1 020b 	sub.w	r2, r1, fp
 800aeec:	1ad2      	subs	r2, r2, r3
 800aeee:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800aef2:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800aef6:	1c51      	adds	r1, r2, #1
 800aef8:	440b      	add	r3, r1
 800aefa:	445b      	add	r3, fp
            work_area.y2 = coords->y1 + bwidth;
 800aefc:	4432      	add	r2, r6
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800aefe:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + bwidth;
 800af02:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800af06:	4623      	mov	r3, r4
 800af08:	463a      	mov	r2, r7
 800af0a:	4649      	mov	r1, r9
 800af0c:	a82e      	add	r0, sp, #184	; 0xb8
 800af0e:	f7fd fd49 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800af12:	f005 0305 	and.w	r3, r5, #5
 800af16:	2b05      	cmp	r3, #5
 800af18:	d11a      	bne.n	800af50 <lv_draw_rect+0x1664>
            work_area.x1 = coords->x1;
 800af1a:	f9ba 2000 	ldrsh.w	r2, [sl]
            work_area.y1 = coords->y2 - bwidth;
 800af1e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.x1 = coords->x1;
 800af22:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + radius + aa;
 800af26:	fa1f f188 	uxth.w	r1, r8
 800af2a:	440a      	add	r2, r1
 800af2c:	445a      	add	r2, fp
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800af2e:	43c9      	mvns	r1, r1
            work_area.x2 = coords->x1 + radius + aa;
 800af30:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - bwidth;
 800af34:	1b9a      	subs	r2, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800af36:	440b      	add	r3, r1
 800af38:	eba3 030b 	sub.w	r3, r3, fp
            work_area.y1 = coords->y2 - bwidth;
 800af3c:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800af40:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800af44:	463a      	mov	r2, r7
 800af46:	4623      	mov	r3, r4
 800af48:	4649      	mov	r1, r9
 800af4a:	a82e      	add	r0, sp, #184	; 0xb8
 800af4c:	f7fd fd2a 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800af50:	f005 0309 	and.w	r3, r5, #9
 800af54:	2b09      	cmp	r3, #9
 800af56:	d11b      	bne.n	800af90 <lv_draw_rect+0x16a4>
            work_area.x1 = coords->x2 - radius - aa;
 800af58:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
            work_area.x2 = coords->x2;
 800af5c:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - radius - aa;
 800af60:	fa1f f288 	uxth.w	r2, r8
 800af64:	eba1 030b 	sub.w	r3, r1, fp
 800af68:	1a9b      	subs	r3, r3, r2
 800af6a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            work_area.y1 = coords->y2 - bwidth;
 800af6e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800af72:	43d2      	mvns	r2, r2
            work_area.y1 = coords->y2 - bwidth;
 800af74:	1b9e      	subs	r6, r3, r6
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800af76:	4413      	add	r3, r2
 800af78:	eba3 030b 	sub.w	r3, r3, fp
 800af7c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800af80:	463a      	mov	r2, r7
 800af82:	4623      	mov	r3, r4
 800af84:	4649      	mov	r1, r9
 800af86:	a82e      	add	r0, sp, #184	; 0xb8
            work_area.y1 = coords->y2 - bwidth;
 800af88:	f8ad 60ba 	strh.w	r6, [sp, #186]	; 0xba
            lv_draw_fill(&work_area, mask, color, opa);
 800af8c:	f7fd fd0a 	bl	80089a4 <lv_draw_fill>
    if(style->body.radius == 0) {
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f47f aa68 	bne.w	800a46c <lv_draw_rect+0xb80>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800af9c:	f015 0f06 	tst.w	r5, #6
 800afa0:	d015      	beq.n	800afce <lv_draw_rect+0x16e2>
            work_area.x1 = coords->x1;
 800afa2:	f9ba 2000 	ldrsh.w	r2, [sl]
 800afa6:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + aa;
 800afaa:	fa1f f388 	uxth.w	r3, r8
 800afae:	441a      	add	r2, r3
 800afb0:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y1;
 800afb4:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800afb8:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + aa;
 800afbc:	4413      	add	r3, r2
 800afbe:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800afc2:	463a      	mov	r2, r7
 800afc4:	4623      	mov	r3, r4
 800afc6:	4649      	mov	r1, r9
 800afc8:	a82e      	add	r0, sp, #184	; 0xb8
 800afca:	f7fd fceb 	bl	80089a4 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800afce:	f015 0f0a 	tst.w	r5, #10
 800afd2:	d015      	beq.n	800b000 <lv_draw_rect+0x1714>
            work_area.x1 = coords->x2 - aa;
 800afd4:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
            work_area.x2 = coords->x2;
 800afd8:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - aa;
 800afdc:	fa1f f388 	uxth.w	r3, r8
 800afe0:	1ad1      	subs	r1, r2, r3
            work_area.y1 = coords->y1;
 800afe2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
            work_area.x1 = coords->x2 - aa;
 800afe6:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            work_area.y2 = coords->y1 + aa;
 800afea:	4413      	add	r3, r2
            work_area.y1 = coords->y1;
 800afec:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            work_area.y2 = coords->y1 + aa;
 800aff0:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&work_area, mask, color, opa);
 800aff4:	463a      	mov	r2, r7
 800aff6:	4623      	mov	r3, r4
 800aff8:	4649      	mov	r1, r9
 800affa:	a82e      	add	r0, sp, #184	; 0xb8
 800affc:	f7fd fcd2 	bl	80089a4 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800b000:	f015 0f05 	tst.w	r5, #5
 800b004:	d015      	beq.n	800b032 <lv_draw_rect+0x1746>
            work_area.x1 = coords->x1;
 800b006:	f9ba 2000 	ldrsh.w	r2, [sl]
 800b00a:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.x2 = coords->x1 + aa;
 800b00e:	fa1f f388 	uxth.w	r3, r8
 800b012:	441a      	add	r2, r3
 800b014:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            work_area.y1 = coords->y2 - aa;
 800b018:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
            work_area.y2 = coords->y2;
 800b01c:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
            work_area.y1 = coords->y2 - aa;
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            lv_draw_fill(&work_area, mask, color, opa);
 800b026:	463a      	mov	r2, r7
 800b028:	4623      	mov	r3, r4
 800b02a:	4649      	mov	r1, r9
 800b02c:	a82e      	add	r0, sp, #184	; 0xb8
 800b02e:	f7fd fcb9 	bl	80089a4 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800b032:	f015 0f09 	tst.w	r5, #9
 800b036:	f43f aa19 	beq.w	800a46c <lv_draw_rect+0xb80>
            work_area.x1 = coords->x2 - aa;
 800b03a:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
            work_area.x2 = coords->x2;
 800b03e:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            work_area.x1 = coords->x2 - aa;
 800b042:	fa1f f888 	uxth.w	r8, r8
 800b046:	eba3 0208 	sub.w	r2, r3, r8
            work_area.y1 = coords->y2 - aa;
 800b04a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
            work_area.x1 = coords->x2 - aa;
 800b04e:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            work_area.y1 = coords->y2 - aa;
 800b052:	eba3 0808 	sub.w	r8, r3, r8
 800b056:	f8ad 80ba 	strh.w	r8, [sp, #186]	; 0xba
 800b05a:	f7ff b9ff 	b.w	800a45c <lv_draw_rect+0xb70>
        work_area.y1 = coords->y1 + radius;
 800b05e:	4403      	add	r3, r0
 800b060:	e6bc      	b.n	800addc <lv_draw_rect+0x14f0>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b062:	3c02      	subs	r4, #2
 800b064:	f7ff ba27 	b.w	800a4b6 <lv_draw_rect+0xbca>
        if(cir_in.y < cir_in.x) {
 800b068:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800b06c:	f9bd 10b2 	ldrsh.w	r1, [sp, #178]	; 0xb2
 800b070:	4299      	cmp	r1, r3
 800b072:	f280 8133 	bge.w	800b2dc <lv_draw_rect+0x19f0>
            act_w1 = cir_out.x - cir_in.x;
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	b21b      	sxth	r3, r3
 800b07a:	930c      	str	r3, [sp, #48]	; 0x30
            act_w2 = act_w1 - 1;
 800b07c:	930e      	str	r3, [sp, #56]	; 0x38
        if(aa) {
 800b07e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b080:	b38b      	cbz	r3, 800b0e6 <lv_draw_rect+0x17fa>
            if(out_x_last != cir_out.x) {
 800b082:	42ba      	cmp	r2, r7
 800b084:	d013      	beq.n	800b0ae <lv_draw_rect+0x17c2>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b088:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b08c:	b2bf      	uxth	r7, r7
 800b08e:	3301      	adds	r3, #1
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b090:	ebaa 0805 	sub.w	r8, sl, r5
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b094:	18fb      	adds	r3, r7, r3
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b096:	fa0f f888 	sxth.w	r8, r8
 800b09a:	2600      	movs	r6, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b09c:	9314      	str	r3, [sp, #80]	; 0x50
 800b09e:	b231      	sxth	r1, r6
                for(i = 0; i < seg_size; i++) {
 800b0a0:	4588      	cmp	r8, r1
 800b0a2:	f300 8123 	bgt.w	800b2ec <lv_draw_rect+0x1a00>
                out_x_last      = cir_out.x;
 800b0a6:	f9bd 70a8 	ldrsh.w	r7, [sp, #168]	; 0xa8
 800b0aa:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
            if(in_x_last != cir_in.x) {
 800b0ae:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800b0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d016      	beq.n	800b0e6 <lv_draw_rect+0x17fa>
                in_y_seg_end        = cir_out.y;
 800b0b8:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b0bc:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
                in_y_seg_end        = cir_out.y;
 800b0c0:	9314      	str	r3, [sp, #80]	; 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b0c2:	eba3 0a06 	sub.w	sl, r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b0c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0c8:	4413      	add	r3, r2
 800b0ca:	b21b      	sxth	r3, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b0cc:	fa0f fa8a 	sxth.w	sl, sl
 800b0d0:	2400      	movs	r4, #0
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b0d2:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0d4:	b221      	sxth	r1, r4
                for(i = 0; i < seg_size; i++) {
 800b0d6:	458a      	cmp	sl, r1
 800b0d8:	f300 81a7 	bgt.w	800b42a <lv_draw_rect+0x1b3e>
                in_x_last      = cir_in.x;
 800b0dc:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
                in_y_seg_start = in_y_seg_end;
 800b0e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0e4:	930d      	str	r3, [sp, #52]	; 0x34
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0e8:	2b09      	cmp	r3, #9
 800b0ea:	d131      	bne.n	800b150 <lv_draw_rect+0x1864>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800b0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ee:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b0f2:	4413      	add	r3, r2
 800b0f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	1a9a      	subs	r2, r3, r2
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800b0fa:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b0fe:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800b102:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b106:	445b      	add	r3, fp
 800b108:	b21b      	sxth	r3, r3
 800b10a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b10e:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	4649      	mov	r1, r9
 800b118:	a82e      	add	r0, sp, #184	; 0xb8
 800b11a:	f7fd fc43 	bl	80089a4 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b120:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800b124:	4413      	add	r3, r2
 800b126:	b21b      	sxth	r3, r3
 800b128:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b12c:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800b130:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b136:	445b      	add	r3, fp
 800b138:	b29b      	uxth	r3, r3
 800b13a:	1a9a      	subs	r2, r3, r2
 800b13c:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800b140:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	4649      	mov	r1, r9
 800b14a:	a82e      	add	r0, sp, #184	; 0xb8
 800b14c:	f7fd fc2a 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b150:	9b06      	ldr	r3, [sp, #24]
 800b152:	f003 0305 	and.w	r3, r3, #5
 800b156:	2b05      	cmp	r3, #5
 800b158:	d131      	bne.n	800b1be <lv_draw_rect+0x18d2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b15a:	9a07      	ldr	r2, [sp, #28]
 800b15c:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	b21b      	sxth	r3, r3
 800b164:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b168:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800b16c:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b172:	445b      	add	r3, fp
 800b174:	b29b      	uxth	r3, r3
 800b176:	1a9a      	subs	r2, r3, r2
 800b178:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800b17c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	4649      	mov	r1, r9
 800b186:	a82e      	add	r0, sp, #184	; 0xb8
 800b188:	f7fd fc0c 	bl	80089a4 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b192:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800b194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800b196:	b29b      	uxth	r3, r3
 800b198:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800b19c:	4413      	add	r3, r2
 800b19e:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b1a2:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
            lv_draw_fill(&circ_area, mask, color, opa);
 800b1a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b1a8:	445b      	add	r3, fp
 800b1aa:	b21b      	sxth	r3, r3
 800b1ac:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b1b0:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	9b08      	ldr	r3, [sp, #32]
 800b1b8:	a82e      	add	r0, sp, #184	; 0xb8
 800b1ba:	f7fd fbf3 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	f003 0306 	and.w	r3, r3, #6
 800b1c4:	2b06      	cmp	r3, #6
 800b1c6:	d139      	bne.n	800b23c <lv_draw_rect+0x1950>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800b1c8:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800b1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1ce:	18d1      	adds	r1, r2, r3
 800b1d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1d2:	1ad2      	subs	r2, r2, r3
 800b1d4:	4291      	cmp	r1, r2
 800b1d6:	dd17      	ble.n	800b208 <lv_draw_rect+0x191c>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800b1d8:	9907      	ldr	r1, [sp, #28]
 800b1da:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 800b1de:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800b1e0:	990e      	ldr	r1, [sp, #56]	; 0x38
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800b1e2:	b292      	uxth	r2, r2
 800b1e4:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800b1ee:	9a05      	ldr	r2, [sp, #20]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800b1f8:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
                lv_draw_fill(&circ_area, mask, color, opa);
 800b1fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1fe:	9b08      	ldr	r3, [sp, #32]
 800b200:	4649      	mov	r1, r9
 800b202:	a82e      	add	r0, sp, #184	; 0xb8
 800b204:	f7fd fbce 	bl	80089a4 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b208:	9a07      	ldr	r2, [sp, #28]
 800b20a:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	b21b      	sxth	r3, r3
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b212:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b214:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800b218:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b21c:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b220:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800b222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800b224:	b29b      	uxth	r3, r3
 800b226:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800b22a:	4413      	add	r3, r2
 800b22c:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	4649      	mov	r1, r9
 800b236:	a82e      	add	r0, sp, #184	; 0xb8
 800b238:	f7fd fbb4 	bl	80089a4 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b23c:	9b06      	ldr	r3, [sp, #24]
 800b23e:	f003 030a 	and.w	r3, r3, #10
 800b242:	2b0a      	cmp	r3, #10
 800b244:	d139      	bne.n	800b2ba <lv_draw_rect+0x19ce>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b248:	f8bd 30aa 	ldrh.w	r3, [sp, #170]	; 0xaa
 800b24c:	4413      	add	r3, r2
 800b24e:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b250:	9a05      	ldr	r2, [sp, #20]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b252:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800b256:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b25a:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800b25e:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800b260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800b262:	b29b      	uxth	r3, r3
 800b264:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800b268:	4413      	add	r3, r2
 800b26a:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_fill(&circ_area, mask, color, opa);
 800b26e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	4649      	mov	r1, r9
 800b274:	a82e      	add	r0, sp, #184	; 0xb8
 800b276:	f7fd fb95 	bl	80089a4 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800b27a:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 800b27e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b280:	18d1      	adds	r1, r2, r3
 800b282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b284:	1ad2      	subs	r2, r2, r3
 800b286:	4291      	cmp	r1, r2
 800b288:	dd17      	ble.n	800b2ba <lv_draw_rect+0x19ce>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800b28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28c:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	; 0xa8
 800b290:	4411      	add	r1, r2
 800b292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b294:	b289      	uxth	r1, r1
 800b296:	1a8a      	subs	r2, r1, r2
 800b298:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b29c:	9a05      	ldr	r2, [sp, #20]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800b29e:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	b21b      	sxth	r3, r3
 800b2a6:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b2aa:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
                lv_draw_fill(&circ_area, mask, color, opa);
 800b2ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	a82e      	add	r0, sp, #184	; 0xb8
 800b2b6:	f7fd fb75 	bl	80089a4 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800b2ba:	a926      	add	r1, sp, #152	; 0x98
 800b2bc:	a82a      	add	r0, sp, #168	; 0xa8
 800b2be:	f001 fb4c 	bl	800c95a <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800b2c2:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800b2c6:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	f6bf a941 	bge.w	800a552 <lv_draw_rect+0xc66>
            lv_circ_next(&cir_in, &tmp_in);
 800b2d0:	a928      	add	r1, sp, #160	; 0xa0
 800b2d2:	a82c      	add	r0, sp, #176	; 0xb0
 800b2d4:	f001 fb41 	bl	800c95a <lv_circ_next>
 800b2d8:	f7ff b93b 	b.w	800a552 <lv_draw_rect+0xc66>
            act_w1 = cir_out.x - cir_out.y;
 800b2dc:	eba2 030a 	sub.w	r3, r2, sl
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800b2e4:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800b2e6:	910c      	str	r1, [sp, #48]	; 0x30
            act_w2 = act_w1 - 1;
 800b2e8:	b21b      	sxth	r3, r3
 800b2ea:	e6c7      	b.n	800b07c <lv_draw_rect+0x1790>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b2ec:	f1b8 0f01 	cmp.w	r8, #1
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b2f0:	9a08      	ldr	r2, [sp, #32]
 800b2f2:	4640      	mov	r0, r8
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b2f4:	f000 8093 	beq.w	800b41e <lv_draw_rect+0x1b32>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b2f8:	f7fe fad6 	bl	80098a8 <antialias_get_opa_circ>
 800b2fc:	4604      	mov	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b2fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b300:	2b09      	cmp	r3, #9
 800b302:	d11c      	bne.n	800b33e <lv_draw_rect+0x1a52>
 800b304:	b2b3      	uxth	r3, r6
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b306:	eb0b 0105 	add.w	r1, fp, r5
 800b30a:	9310      	str	r3, [sp, #64]	; 0x40
 800b30c:	4419      	add	r1, r3
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	9400      	str	r4, [sp, #0]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800b318:	464a      	mov	r2, r9
 800b31a:	b209      	sxth	r1, r1
 800b31c:	f7fd faeb 	bl	80088f6 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b322:	9400      	str	r4, [sp, #0]
 800b324:	1958      	adds	r0, r3, r5
 800b326:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b328:	f10b 0101 	add.w	r1, fp, #1
 800b32c:	4418      	add	r0, r3
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	4439      	add	r1, r7
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	464a      	mov	r2, r9
 800b336:	b209      	sxth	r1, r1
 800b338:	b200      	sxth	r0, r0
 800b33a:	f7fd fadc 	bl	80088f6 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b33e:	9b06      	ldr	r3, [sp, #24]
 800b340:	f003 0305 	and.w	r3, r3, #5
 800b344:	2b05      	cmp	r3, #5
 800b346:	d11f      	bne.n	800b388 <lv_draw_rect+0x1a9c>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b348:	9a07      	ldr	r2, [sp, #28]
 800b34a:	9400      	str	r4, [sp, #0]
 800b34c:	b2b3      	uxth	r3, r6
 800b34e:	1b50      	subs	r0, r2, r5
 800b350:	9310      	str	r3, [sp, #64]	; 0x40
 800b352:	1ac0      	subs	r0, r0, r3
 800b354:	f10b 0e01 	add.w	lr, fp, #1
 800b358:	9b04      	ldr	r3, [sp, #16]
 800b35a:	44be      	add	lr, r7
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	464a      	mov	r2, r9
 800b360:	fa0f f18e 	sxth.w	r1, lr
 800b364:	b200      	sxth	r0, r0
 800b366:	f7fd fac6 	bl	80088f6 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b36a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b36c:	9400      	str	r4, [sp, #0]
 800b36e:	eb0b 0105 	add.w	r1, fp, r5
 800b372:	4419      	add	r1, r3
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	1e58      	subs	r0, r3, #1
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	1bc0      	subs	r0, r0, r7
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	464a      	mov	r2, r9
 800b380:	b209      	sxth	r1, r1
 800b382:	b200      	sxth	r0, r0
 800b384:	f7fd fab7 	bl	80088f6 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b388:	9b06      	ldr	r3, [sp, #24]
 800b38a:	f003 0306 	and.w	r3, r3, #6
 800b38e:	2b06      	cmp	r3, #6
 800b390:	d11e      	bne.n	800b3d0 <lv_draw_rect+0x1ae4>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b392:	9a05      	ldr	r2, [sp, #20]
 800b394:	9400      	str	r4, [sp, #0]
 800b396:	b2b3      	uxth	r3, r6
 800b398:	1b51      	subs	r1, r2, r5
 800b39a:	9310      	str	r3, [sp, #64]	; 0x40
 800b39c:	1ac9      	subs	r1, r1, r3
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	1e58      	subs	r0, r3, #1
 800b3a2:	9b04      	ldr	r3, [sp, #16]
 800b3a4:	1bc0      	subs	r0, r0, r7
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	464a      	mov	r2, r9
 800b3aa:	b209      	sxth	r1, r1
 800b3ac:	b200      	sxth	r0, r0
 800b3ae:	f7fd faa2 	bl	80088f6 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	9400      	str	r4, [sp, #0]
 800b3b6:	1e59      	subs	r1, r3, #1
 800b3b8:	9b07      	ldr	r3, [sp, #28]
 800b3ba:	1b58      	subs	r0, r3, r5
 800b3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3be:	1ac0      	subs	r0, r0, r3
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	1bc9      	subs	r1, r1, r7
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	464a      	mov	r2, r9
 800b3c8:	b209      	sxth	r1, r1
 800b3ca:	b200      	sxth	r0, r0
 800b3cc:	f7fd fa93 	bl	80088f6 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	f003 030a 	and.w	r3, r3, #10
 800b3d6:	2b0a      	cmp	r3, #10
 800b3d8:	d11f      	bne.n	800b41a <lv_draw_rect+0x1b2e>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b3da:	9a05      	ldr	r2, [sp, #20]
 800b3dc:	9400      	str	r4, [sp, #0]
 800b3de:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 800b3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e4:	b2b3      	uxth	r3, r6
 800b3e6:	1950      	adds	r0, r2, r5
 800b3e8:	9310      	str	r3, [sp, #64]	; 0x40
 800b3ea:	4418      	add	r0, r3
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	ebae 0e07 	sub.w	lr, lr, r7
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	464a      	mov	r2, r9
 800b3f6:	fa0f f18e 	sxth.w	r1, lr
 800b3fa:	b200      	sxth	r0, r0
 800b3fc:	f7fd fa7b 	bl	80088f6 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b400:	9b05      	ldr	r3, [sp, #20]
 800b402:	9400      	str	r4, [sp, #0]
 800b404:	1b59      	subs	r1, r3, r5
 800b406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b408:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800b40c:	1ac9      	subs	r1, r1, r3
 800b40e:	9b04      	ldr	r3, [sp, #16]
 800b410:	464a      	mov	r2, r9
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	b209      	sxth	r1, r1
 800b416:	f7fd fa6e 	bl	80088f6 <lv_draw_px>
 800b41a:	3601      	adds	r6, #1
 800b41c:	e63f      	b.n	800b09e <lv_draw_rect+0x17b2>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b41e:	f7fd f96d 	bl	80086fc <lv_draw_aa_get_opa>
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	1a18      	subs	r0, r3, r0
 800b426:	b2c4      	uxtb	r4, r0
 800b428:	e769      	b.n	800b2fe <lv_draw_rect+0x1a12>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b42a:	f1ba 0f01 	cmp.w	sl, #1
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b42e:	9a08      	ldr	r2, [sp, #32]
 800b430:	4650      	mov	r0, sl
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b432:	f000 809e 	beq.w	800b572 <lv_draw_rect+0x1c86>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b436:	f7fe fa37 	bl	80098a8 <antialias_get_opa_circ>
 800b43a:	9b08      	ldr	r3, [sp, #32]
 800b43c:	1a18      	subs	r0, r3, r0
 800b43e:	b2c5      	uxtb	r5, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b442:	2b09      	cmp	r3, #9
 800b444:	d10a      	bne.n	800b45c <lv_draw_rect+0x1b70>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b446:	eb0b 0106 	add.w	r1, fp, r6
 800b44a:	9b04      	ldr	r3, [sp, #16]
 800b44c:	9500      	str	r5, [sp, #0]
 800b44e:	4421      	add	r1, r4
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b454:	464a      	mov	r2, r9
 800b456:	b209      	sxth	r1, r1
 800b458:	f7fd fa4d 	bl	80088f6 <lv_draw_px>
 800b45c:	9b06      	ldr	r3, [sp, #24]
 800b45e:	f003 0305 	and.w	r3, r3, #5
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b462:	2b05      	cmp	r3, #5
 800b464:	9315      	str	r3, [sp, #84]	; 0x54
 800b466:	d10e      	bne.n	800b486 <lv_draw_rect+0x1b9a>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46a:	9500      	str	r5, [sp, #0]
 800b46c:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800b470:	4419      	add	r1, r3
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	1b98      	subs	r0, r3, r6
 800b476:	9b04      	ldr	r3, [sp, #16]
 800b478:	1b00      	subs	r0, r0, r4
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	464a      	mov	r2, r9
 800b47e:	b209      	sxth	r1, r1
 800b480:	b200      	sxth	r0, r0
 800b482:	f7fd fa38 	bl	80088f6 <lv_draw_px>
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	f003 0806 	and.w	r8, r3, #6
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b48c:	f1b8 0f06 	cmp.w	r8, #6
 800b490:	d10e      	bne.n	800b4b0 <lv_draw_rect+0x1bc4>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	9500      	str	r5, [sp, #0]
 800b496:	1b99      	subs	r1, r3, r6
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	1c58      	adds	r0, r3, #1
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	1ac0      	subs	r0, r0, r3
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	1b09      	subs	r1, r1, r4
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	464a      	mov	r2, r9
 800b4a8:	b209      	sxth	r1, r1
 800b4aa:	b200      	sxth	r0, r0
 800b4ac:	f7fd fa23 	bl	80088f6 <lv_draw_px>
 800b4b0:	9b06      	ldr	r3, [sp, #24]
 800b4b2:	f003 030a 	and.w	r3, r3, #10
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b4b6:	2b0a      	cmp	r3, #10
 800b4b8:	9316      	str	r3, [sp, #88]	; 0x58
 800b4ba:	d10e      	bne.n	800b4da <lv_draw_rect+0x1bee>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	9500      	str	r5, [sp, #0]
 800b4c0:	1c59      	adds	r1, r3, #1
 800b4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c4:	1ac9      	subs	r1, r1, r3
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	1998      	adds	r0, r3, r6
 800b4ca:	9b04      	ldr	r3, [sp, #16]
 800b4cc:	4420      	add	r0, r4
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	464a      	mov	r2, r9
 800b4d2:	b209      	sxth	r1, r1
 800b4d4:	b200      	sxth	r0, r0
 800b4d6:	f7fd fa0e 	bl	80088f6 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4de:	4423      	add	r3, r4
 800b4e0:	3a01      	subs	r2, #1
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d043      	beq.n	800b56e <lv_draw_rect+0x1c82>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b4e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4e8:	2b09      	cmp	r3, #9
 800b4ea:	d10e      	bne.n	800b50a <lv_draw_rect+0x1c1e>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800b4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ee:	9500      	str	r5, [sp, #0]
 800b4f0:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800b4f4:	4419      	add	r1, r3
 800b4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f8:	1998      	adds	r0, r3, r6
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	4420      	add	r0, r4
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	464a      	mov	r2, r9
 800b502:	b209      	sxth	r1, r1
 800b504:	b200      	sxth	r0, r0
 800b506:	f7fd f9f6 	bl	80088f6 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b50c:	2b05      	cmp	r3, #5
 800b50e:	d10e      	bne.n	800b52e <lv_draw_rect+0x1c42>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800b510:	9b07      	ldr	r3, [sp, #28]
 800b512:	9500      	str	r5, [sp, #0]
 800b514:	1c58      	adds	r0, r3, #1
 800b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b518:	eb0b 0106 	add.w	r1, fp, r6
 800b51c:	1ac0      	subs	r0, r0, r3
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	4421      	add	r1, r4
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	464a      	mov	r2, r9
 800b526:	b209      	sxth	r1, r1
 800b528:	b200      	sxth	r0, r0
 800b52a:	f7fd f9e4 	bl	80088f6 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b52e:	f1b8 0f06 	cmp.w	r8, #6
 800b532:	d10e      	bne.n	800b552 <lv_draw_rect+0x1c66>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800b534:	9b05      	ldr	r3, [sp, #20]
 800b536:	9500      	str	r5, [sp, #0]
 800b538:	1c59      	adds	r1, r3, #1
 800b53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53c:	1ac9      	subs	r1, r1, r3
 800b53e:	9b07      	ldr	r3, [sp, #28]
 800b540:	1b98      	subs	r0, r3, r6
 800b542:	9b04      	ldr	r3, [sp, #16]
 800b544:	1b00      	subs	r0, r0, r4
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	464a      	mov	r2, r9
 800b54a:	b209      	sxth	r1, r1
 800b54c:	b200      	sxth	r0, r0
 800b54e:	f7fd f9d2 	bl	80088f6 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b552:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b554:	2b0a      	cmp	r3, #10
 800b556:	d10a      	bne.n	800b56e <lv_draw_rect+0x1c82>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	9500      	str	r5, [sp, #0]
 800b55c:	1b99      	subs	r1, r3, r6
 800b55e:	9b04      	ldr	r3, [sp, #16]
 800b560:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	1b09      	subs	r1, r1, r4
 800b566:	464a      	mov	r2, r9
 800b568:	b209      	sxth	r1, r1
 800b56a:	f7fd f9c4 	bl	80088f6 <lv_draw_px>
 800b56e:	3401      	adds	r4, #1
 800b570:	e5b0      	b.n	800b0d4 <lv_draw_rect+0x17e8>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b572:	f7fd f8c3 	bl	80086fc <lv_draw_aa_get_opa>
 800b576:	4605      	mov	r5, r0
 800b578:	e762      	b.n	800b440 <lv_draw_rect+0x1b54>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b57a:	9a08      	ldr	r2, [sp, #32]
 800b57c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b57e:	f7fd f8bd 	bl	80086fc <lv_draw_aa_get_opa>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	1a18      	subs	r0, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	f003 0309 	and.w	r3, r3, #9
 800b58c:	2b09      	cmp	r3, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b58e:	b2c4      	uxtb	r4, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b590:	d11b      	bne.n	800b5ca <lv_draw_rect+0x1cde>
 800b592:	fa1f f886 	uxth.w	r8, r6
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	9400      	str	r4, [sp, #0]
 800b59a:	eb0b 0105 	add.w	r1, fp, r5
 800b59e:	4441      	add	r1, r8
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800b5a6:	464a      	mov	r2, r9
 800b5a8:	b209      	sxth	r1, r1
 800b5aa:	f7fd f9a4 	bl	80088f6 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b0:	9400      	str	r4, [sp, #0]
 800b5b2:	1958      	adds	r0, r3, r5
 800b5b4:	f10b 0101 	add.w	r1, fp, #1
 800b5b8:	9b04      	ldr	r3, [sp, #16]
 800b5ba:	4451      	add	r1, sl
 800b5bc:	4440      	add	r0, r8
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	464a      	mov	r2, r9
 800b5c2:	b209      	sxth	r1, r1
 800b5c4:	b200      	sxth	r0, r0
 800b5c6:	f7fd f996 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b5ca:	9b06      	ldr	r3, [sp, #24]
 800b5cc:	f003 0305 	and.w	r3, r3, #5
 800b5d0:	2b05      	cmp	r3, #5
 800b5d2:	d120      	bne.n	800b616 <lv_draw_rect+0x1d2a>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	9400      	str	r4, [sp, #0]
 800b5d8:	fa1f f886 	uxth.w	r8, r6
 800b5dc:	1b58      	subs	r0, r3, r5
 800b5de:	f10b 0e01 	add.w	lr, fp, #1
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	44d6      	add	lr, sl
 800b5e6:	eba0 0008 	sub.w	r0, r0, r8
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	464a      	mov	r2, r9
 800b5ee:	fa0f f18e 	sxth.w	r1, lr
 800b5f2:	b200      	sxth	r0, r0
 800b5f4:	f7fd f97f 	bl	80088f6 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b5f8:	9b07      	ldr	r3, [sp, #28]
 800b5fa:	9400      	str	r4, [sp, #0]
 800b5fc:	1e58      	subs	r0, r3, #1
 800b5fe:	eb0b 0105 	add.w	r1, fp, r5
 800b602:	9b04      	ldr	r3, [sp, #16]
 800b604:	4441      	add	r1, r8
 800b606:	eba0 000a 	sub.w	r0, r0, sl
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	464a      	mov	r2, r9
 800b60e:	b209      	sxth	r1, r1
 800b610:	b200      	sxth	r0, r0
 800b612:	f7fd f970 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	f003 0306 	and.w	r3, r3, #6
 800b61c:	2b06      	cmp	r3, #6
 800b61e:	d121      	bne.n	800b664 <lv_draw_rect+0x1d78>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b620:	9b05      	ldr	r3, [sp, #20]
 800b622:	9400      	str	r4, [sp, #0]
 800b624:	1b59      	subs	r1, r3, r5
 800b626:	9b07      	ldr	r3, [sp, #28]
 800b628:	fa1f f886 	uxth.w	r8, r6
 800b62c:	1e58      	subs	r0, r3, #1
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	eba1 0108 	sub.w	r1, r1, r8
 800b634:	eba0 000a 	sub.w	r0, r0, sl
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	464a      	mov	r2, r9
 800b63c:	b209      	sxth	r1, r1
 800b63e:	b200      	sxth	r0, r0
 800b640:	f7fd f959 	bl	80088f6 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b644:	9b05      	ldr	r3, [sp, #20]
 800b646:	9400      	str	r4, [sp, #0]
 800b648:	1e59      	subs	r1, r3, #1
 800b64a:	9b07      	ldr	r3, [sp, #28]
 800b64c:	1b58      	subs	r0, r3, r5
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	eba1 010a 	sub.w	r1, r1, sl
 800b654:	eba0 0008 	sub.w	r0, r0, r8
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	464a      	mov	r2, r9
 800b65c:	b209      	sxth	r1, r1
 800b65e:	b200      	sxth	r0, r0
 800b660:	f7fd f949 	bl	80088f6 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b664:	9b06      	ldr	r3, [sp, #24]
 800b666:	f003 030a 	and.w	r3, r3, #10
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	d11f      	bne.n	800b6ae <lv_draw_rect+0x1dc2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b66e:	9b05      	ldr	r3, [sp, #20]
 800b670:	9400      	str	r4, [sp, #0]
 800b672:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	fa1f f886 	uxth.w	r8, r6
 800b67c:	1958      	adds	r0, r3, r5
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	ebae 0e0a 	sub.w	lr, lr, sl
 800b684:	4440      	add	r0, r8
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	464a      	mov	r2, r9
 800b68a:	fa0f f18e 	sxth.w	r1, lr
 800b68e:	b200      	sxth	r0, r0
 800b690:	f7fd f931 	bl	80088f6 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b694:	9b05      	ldr	r3, [sp, #20]
 800b696:	9400      	str	r4, [sp, #0]
 800b698:	1b59      	subs	r1, r3, r5
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	eba1 0108 	sub.w	r1, r1, r8
 800b6a6:	464a      	mov	r2, r9
 800b6a8:	b209      	sxth	r1, r1
 800b6aa:	f7fd f924 	bl	80088f6 <lv_draw_px>
 800b6ae:	3601      	adds	r6, #1
 800b6b0:	f7fe bf67 	b.w	800a582 <lv_draw_rect+0xc96>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b6b4:	9a08      	ldr	r2, [sp, #32]
 800b6b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b6b8:	f7fd f820 	bl	80086fc <lv_draw_aa_get_opa>
 800b6bc:	9b06      	ldr	r3, [sp, #24]
 800b6be:	f003 0a09 	and.w	sl, r3, #9
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b6c2:	f1ba 0f09 	cmp.w	sl, #9
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b6c6:	4606      	mov	r6, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b6c8:	d10a      	bne.n	800b6e0 <lv_draw_rect+0x1df4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b6ca:	eb0b 0105 	add.w	r1, fp, r5
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	9000      	str	r0, [sp, #0]
 800b6d2:	4421      	add	r1, r4
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b6d8:	464a      	mov	r2, r9
 800b6da:	b209      	sxth	r1, r1
 800b6dc:	f7fd f90b 	bl	80088f6 <lv_draw_px>
 800b6e0:	9b06      	ldr	r3, [sp, #24]
 800b6e2:	f003 0305 	and.w	r3, r3, #5
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b6e6:	2b05      	cmp	r3, #5
 800b6e8:	930c      	str	r3, [sp, #48]	; 0x30
 800b6ea:	d10e      	bne.n	800b70a <lv_draw_rect+0x1e1e>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ee:	9600      	str	r6, [sp, #0]
 800b6f0:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800b6f4:	4419      	add	r1, r3
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	1b58      	subs	r0, r3, r5
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	1b00      	subs	r0, r0, r4
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	464a      	mov	r2, r9
 800b702:	b209      	sxth	r1, r1
 800b704:	b200      	sxth	r0, r0
 800b706:	f7fd f8f6 	bl	80088f6 <lv_draw_px>
 800b70a:	9b06      	ldr	r3, [sp, #24]
 800b70c:	f003 0806 	and.w	r8, r3, #6
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b710:	f1b8 0f06 	cmp.w	r8, #6
 800b714:	d10e      	bne.n	800b734 <lv_draw_rect+0x1e48>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	9600      	str	r6, [sp, #0]
 800b71a:	1b59      	subs	r1, r3, r5
 800b71c:	9b07      	ldr	r3, [sp, #28]
 800b71e:	1c58      	adds	r0, r3, #1
 800b720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b722:	1ac0      	subs	r0, r0, r3
 800b724:	9b04      	ldr	r3, [sp, #16]
 800b726:	1b09      	subs	r1, r1, r4
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	464a      	mov	r2, r9
 800b72c:	b209      	sxth	r1, r1
 800b72e:	b200      	sxth	r0, r0
 800b730:	f7fd f8e1 	bl	80088f6 <lv_draw_px>
 800b734:	9b06      	ldr	r3, [sp, #24]
 800b736:	f003 070a 	and.w	r7, r3, #10
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b73a:	2f0a      	cmp	r7, #10
 800b73c:	d10e      	bne.n	800b75c <lv_draw_rect+0x1e70>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b73e:	9b05      	ldr	r3, [sp, #20]
 800b740:	9600      	str	r6, [sp, #0]
 800b742:	1c59      	adds	r1, r3, #1
 800b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b746:	1ac9      	subs	r1, r1, r3
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	1958      	adds	r0, r3, r5
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	4420      	add	r0, r4
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	464a      	mov	r2, r9
 800b754:	b209      	sxth	r1, r1
 800b756:	b200      	sxth	r0, r0
 800b758:	f7fd f8cd 	bl	80088f6 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b760:	3b01      	subs	r3, #1
 800b762:	4422      	add	r2, r4
 800b764:	4293      	cmp	r3, r2
 800b766:	d042      	beq.n	800b7ee <lv_draw_rect+0x1f02>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b768:	f1ba 0f09 	cmp.w	sl, #9
 800b76c:	d10e      	bne.n	800b78c <lv_draw_rect+0x1ea0>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800b76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b770:	9600      	str	r6, [sp, #0]
 800b772:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800b776:	4419      	add	r1, r3
 800b778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77a:	1958      	adds	r0, r3, r5
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	4420      	add	r0, r4
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	464a      	mov	r2, r9
 800b784:	b209      	sxth	r1, r1
 800b786:	b200      	sxth	r0, r0
 800b788:	f7fd f8b5 	bl	80088f6 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78e:	2b05      	cmp	r3, #5
 800b790:	d10e      	bne.n	800b7b0 <lv_draw_rect+0x1ec4>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b792:	9b07      	ldr	r3, [sp, #28]
 800b794:	9600      	str	r6, [sp, #0]
 800b796:	1c58      	adds	r0, r3, #1
 800b798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79a:	eb0b 0105 	add.w	r1, fp, r5
 800b79e:	1ac0      	subs	r0, r0, r3
 800b7a0:	9b04      	ldr	r3, [sp, #16]
 800b7a2:	4421      	add	r1, r4
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	464a      	mov	r2, r9
 800b7a8:	b209      	sxth	r1, r1
 800b7aa:	b200      	sxth	r0, r0
 800b7ac:	f7fd f8a3 	bl	80088f6 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b7b0:	f1b8 0f06 	cmp.w	r8, #6
 800b7b4:	d10e      	bne.n	800b7d4 <lv_draw_rect+0x1ee8>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800b7b6:	9b05      	ldr	r3, [sp, #20]
 800b7b8:	9600      	str	r6, [sp, #0]
 800b7ba:	1c59      	adds	r1, r3, #1
 800b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7be:	1ac9      	subs	r1, r1, r3
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	1b58      	subs	r0, r3, r5
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	1b00      	subs	r0, r0, r4
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	464a      	mov	r2, r9
 800b7cc:	b209      	sxth	r1, r1
 800b7ce:	b200      	sxth	r0, r0
 800b7d0:	f7fd f891 	bl	80088f6 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b7d4:	2f0a      	cmp	r7, #10
 800b7d6:	d10a      	bne.n	800b7ee <lv_draw_rect+0x1f02>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	9600      	str	r6, [sp, #0]
 800b7dc:	1b59      	subs	r1, r3, r5
 800b7de:	9b04      	ldr	r3, [sp, #16]
 800b7e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	1b09      	subs	r1, r1, r4
 800b7e6:	464a      	mov	r2, r9
 800b7e8:	b209      	sxth	r1, r1
 800b7ea:	f7fd f884 	bl	80088f6 <lv_draw_px>
 800b7ee:	3401      	adds	r4, #1
 800b7f0:	f7fe bf2c 	b.w	800a64c <lv_draw_rect+0xd60>
            if(mcolor.full == gcolor.full)
 800b7f4:	455c      	cmp	r4, fp
 800b7f6:	f47f a969 	bne.w	800aacc <lv_draw_rect+0x11e0>
                act_color = mcolor;
 800b7fa:	4622      	mov	r2, r4
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800b7fc:	9b05      	ldr	r3, [sp, #20]
 800b7fe:	4649      	mov	r1, r9
 800b800:	a828      	add	r0, sp, #160	; 0xa0
 800b802:	f7fd f8cf 	bl	80089a4 <lv_draw_fill>
 800b806:	f7ff b854 	b.w	800a8b2 <lv_draw_rect+0xfc6>
	...

0800b80c <lv_img_cache_open>:
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
    if(entry_cnt == 0) {
 800b80c:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <lv_img_cache_open+0xd4>)
{
 800b80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(entry_cnt == 0) {
 800b812:	881c      	ldrh	r4, [r3, #0]
{
 800b814:	4605      	mov	r5, r0
 800b816:	460e      	mov	r6, r1
    if(entry_cnt == 0) {
 800b818:	b1ec      	cbz	r4, 800b856 <lv_img_cache_open+0x4a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b81a:	4b32      	ldr	r3, [pc, #200]	; (800b8e4 <lv_img_cache_open+0xd8>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800b81c:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 800b8e8 <lv_img_cache_open+0xdc>
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	2728      	movs	r7, #40	; 0x28
 800b824:	4613      	mov	r3, r2
 800b826:	fb07 2704 	mla	r7, r7, r4, r2
    for(i = 0; i < entry_cnt; i++) {
 800b82a:	4611      	mov	r1, r2
 800b82c:	428f      	cmp	r7, r1
 800b82e:	d115      	bne.n	800b85c <lv_img_cache_open+0x50>
 800b830:	3c01      	subs	r4, #1
 800b832:	b2a4      	uxth	r4, r4
 800b834:	2128      	movs	r1, #40	; 0x28
 800b836:	fb04 1101 	mla	r1, r4, r1, r1
 800b83a:	4411      	add	r1, r2
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 800b83c:	6858      	ldr	r0, [r3, #4]
 800b83e:	42a8      	cmp	r0, r5
 800b840:	461c      	mov	r4, r3
 800b842:	d113      	bne.n	800b86c <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	69a2      	ldr	r2, [r4, #24]
 800b848:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800b84a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b84e:	bfc8      	it	gt
 800b850:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 800b854:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 800b856:	4620      	mov	r0, r4
 800b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800b85c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b85e:	4570      	cmp	r0, lr
            cache[i].life -= LV_IMG_CACHE_AGING;
 800b860:	bfa4      	itt	ge
 800b862:	f100 30ff 	addge.w	r0, r0, #4294967295	; 0xffffffff
 800b866:	6248      	strge	r0, [r1, #36]	; 0x24
 800b868:	3128      	adds	r1, #40	; 0x28
 800b86a:	e7df      	b.n	800b82c <lv_img_cache_open+0x20>
 800b86c:	3328      	adds	r3, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800b86e:	428b      	cmp	r3, r1
 800b870:	d1e4      	bne.n	800b83c <lv_img_cache_open+0x30>
 800b872:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800b876:	4614      	mov	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 800b878:	428b      	cmp	r3, r1
 800b87a:	d11d      	bne.n	800b8b8 <lv_img_cache_open+0xac>
        if(cached_src->dec_dsc.src) {
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	b113      	cbz	r3, 800b886 <lv_img_cache_open+0x7a>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fb9f 	bl	800bfc4 <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 800b886:	f000 fe5d 	bl	800c544 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 800b88a:	2700      	movs	r7, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800b88c:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
 800b88e:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 800b890:	61a7      	str	r7, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800b892:	4632      	mov	r2, r6
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fb47 	bl	800bf28 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 800b89a:	4605      	mov	r5, r0
 800b89c:	b998      	cbnz	r0, 800b8c6 <lv_img_cache_open+0xba>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fb90 	bl	800bfc4 <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	2228      	movs	r2, #40	; 0x28
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f004 ffa2 	bl	80107f2 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800b8ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8b2:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 800b8b4:	462c      	mov	r4, r5
 800b8b6:	e7ce      	b.n	800b856 <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 800b8b8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b8ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b8bc:	4290      	cmp	r0, r2
 800b8be:	bfb8      	it	lt
 800b8c0:	460c      	movlt	r4, r1
 800b8c2:	3128      	adds	r1, #40	; 0x28
 800b8c4:	e7d8      	b.n	800b878 <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 800b8c6:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 800b8c8:	6267      	str	r7, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 800b8ca:	b91b      	cbnz	r3, 800b8d4 <lv_img_cache_open+0xc8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	f000 fe47 	bl	800c560 <lv_tick_elaps>
 800b8d2:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800b8d4:	69a3      	ldr	r3, [r4, #24]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1bd      	bne.n	800b856 <lv_img_cache_open+0x4a>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	61a3      	str	r3, [r4, #24]
 800b8de:	e7ba      	b.n	800b856 <lv_img_cache_open+0x4a>
 800b8e0:	20011128 	.word	0x20011128
 800b8e4:	20015e94 	.word	0x20015e94
 800b8e8:	80000002 	.word	0x80000002

0800b8ec <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b8f0:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <lv_img_cache_invalidate_src+0x44>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800b8f2:	4f10      	ldr	r7, [pc, #64]	; (800b934 <lv_img_cache_invalidate_src+0x48>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b8f4:	f8d3 8000 	ldr.w	r8, [r3]
{
 800b8f8:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
 800b8fa:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b8fc:	f04f 0928 	mov.w	r9, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800b900:	883a      	ldrh	r2, [r7, #0]
 800b902:	b2ab      	uxth	r3, r5
 800b904:	429a      	cmp	r2, r3
 800b906:	d801      	bhi.n	800b90c <lv_img_cache_invalidate_src+0x20>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800b908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b90c:	b2ac      	uxth	r4, r5
 800b90e:	fb09 8404 	mla	r4, r9, r4, r8
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	42b3      	cmp	r3, r6
 800b916:	d000      	beq.n	800b91a <lv_img_cache_invalidate_src+0x2e>
 800b918:	b946      	cbnz	r6, 800b92c <lv_img_cache_invalidate_src+0x40>
            if(cache[i].dec_dsc.src != NULL) {
 800b91a:	b113      	cbz	r3, 800b922 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fb51 	bl	800bfc4 <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800b922:	2228      	movs	r2, #40	; 0x28
 800b924:	2100      	movs	r1, #0
 800b926:	4620      	mov	r0, r4
 800b928:	f004 ff63 	bl	80107f2 <memset>
 800b92c:	3501      	adds	r5, #1
 800b92e:	e7e7      	b.n	800b900 <lv_img_cache_invalidate_src+0x14>
 800b930:	20015e94 	.word	0x20015e94
 800b934:	20011128 	.word	0x20011128

0800b938 <lv_img_cache_set_size>:
{
 800b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b93c:	4c14      	ldr	r4, [pc, #80]	; (800b990 <lv_img_cache_set_size+0x58>)
 800b93e:	6823      	ldr	r3, [r4, #0]
{
 800b940:	4680      	mov	r8, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b942:	b12b      	cbz	r3, 800b950 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800b944:	2000      	movs	r0, #0
 800b946:	f7ff ffd1 	bl	800b8ec <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800b94a:	6820      	ldr	r0, [r4, #0]
 800b94c:	f001 faac 	bl	800cea8 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800b950:	2628      	movs	r6, #40	; 0x28
 800b952:	fb06 f008 	mul.w	r0, r6, r8
 800b956:	f001 fa71 	bl	800ce3c <lv_mem_alloc>
 800b95a:	6020      	str	r0, [r4, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800b95c:	b900      	cbnz	r0, 800b960 <lv_img_cache_set_size+0x28>
 800b95e:	e7fe      	b.n	800b95e <lv_img_cache_set_size+0x26>
    entry_cnt = new_entry_cnt;
 800b960:	4b0c      	ldr	r3, [pc, #48]	; (800b994 <lv_img_cache_set_size+0x5c>)
    for(i = 0; i < entry_cnt; i++) {
 800b962:	2500      	movs	r5, #0
    entry_cnt = new_entry_cnt;
 800b964:	f8a3 8000 	strh.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 800b968:	45a8      	cmp	r8, r5
 800b96a:	d101      	bne.n	800b970 <lv_img_cache_set_size+0x38>
}
 800b96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800b970:	6820      	ldr	r0, [r4, #0]
 800b972:	fb06 f705 	mul.w	r7, r6, r5
 800b976:	2224      	movs	r2, #36	; 0x24
 800b978:	2100      	movs	r1, #0
 800b97a:	4438      	add	r0, r7
 800b97c:	f004 ff39 	bl	80107f2 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800b980:	6820      	ldr	r0, [r4, #0]
 800b982:	2228      	movs	r2, #40	; 0x28
 800b984:	2100      	movs	r1, #0
 800b986:	4438      	add	r0, r7
 800b988:	f004 ff33 	bl	80107f2 <memset>
 800b98c:	3501      	adds	r5, #1
 800b98e:	e7eb      	b.n	800b968 <lv_img_cache_set_size+0x30>
 800b990:	20015e94 	.word	0x20015e94
 800b994:	20011128 	.word	0x20011128

0800b998 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800b998:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b99a:	6a0c      	ldr	r4, [r1, #32]
{
 800b99c:	460d      	mov	r5, r1
    if(user_data) {
 800b99e:	b17c      	cbz	r4, 800b9c0 <lv_img_decoder_built_in_close+0x28>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	b120      	cbz	r0, 800b9ae <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 800b9a4:	f001 f806 	bl	800c9b4 <lv_fs_close>
            lv_mem_free(user_data->f);
 800b9a8:	6820      	ldr	r0, [r4, #0]
 800b9aa:	f001 fa7d 	bl	800cea8 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800b9ae:	6860      	ldr	r0, [r4, #4]
 800b9b0:	b108      	cbz	r0, 800b9b6 <lv_img_decoder_built_in_close+0x1e>
 800b9b2:	f001 fa79 	bl	800cea8 <lv_mem_free>

        lv_mem_free(user_data);
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f001 fa76 	bl	800cea8 <lv_mem_free>

        dsc->user_data = NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	622b      	str	r3, [r5, #32]
 800b9c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b9c4 <lv_img_decoder_built_in_open>:
{
 800b9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9c6:	7b0b      	ldrb	r3, [r1, #12]
 800b9c8:	2b01      	cmp	r3, #1
{
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9ce:	d124      	bne.n	800ba1a <lv_img_decoder_built_in_open+0x56>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800b9d0:	6848      	ldr	r0, [r1, #4]
 800b9d2:	f001 f881 	bl	800cad8 <lv_fs_get_ext>
 800b9d6:	493d      	ldr	r1, [pc, #244]	; (800bacc <lv_img_decoder_built_in_open+0x108>)
 800b9d8:	f7f4 fbfa 	bl	80001d0 <strcmp>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d172      	bne.n	800bac6 <lv_img_decoder_built_in_open+0x102>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	6861      	ldr	r1, [r4, #4]
 800b9e4:	4668      	mov	r0, sp
 800b9e6:	f001 f83b 	bl	800ca60 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d16b      	bne.n	800bac6 <lv_img_decoder_built_in_open+0x102>
        if(dsc->user_data == NULL) {
 800b9ee:	6a26      	ldr	r6, [r4, #32]
 800b9f0:	b93e      	cbnz	r6, 800ba02 <lv_img_decoder_built_in_open+0x3e>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b9f2:	2008      	movs	r0, #8
 800b9f4:	f001 fa22 	bl	800ce3c <lv_mem_alloc>
 800b9f8:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b9fa:	b900      	cbnz	r0, 800b9fe <lv_img_decoder_built_in_open+0x3a>
 800b9fc:	e7fe      	b.n	800b9fc <lv_img_decoder_built_in_open+0x38>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b9fe:	6006      	str	r6, [r0, #0]
 800ba00:	6046      	str	r6, [r0, #4]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800ba02:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ba04:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800ba06:	f001 fa19 	bl	800ce3c <lv_mem_alloc>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800ba0e:	b900      	cbnz	r0, 800ba12 <lv_img_decoder_built_in_open+0x4e>
 800ba10:	e7fe      	b.n	800ba10 <lv_img_decoder_built_in_open+0x4c>
        memcpy(user_data->f, &f, sizeof(f));
 800ba12:	466b      	mov	r3, sp
 800ba14:	cb03      	ldmia	r3!, {r0, r1}
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	6051      	str	r1, [r2, #4]
    lv_img_cf_t cf = dsc->header.cf;
 800ba1a:	7c20      	ldrb	r0, [r4, #16]
 800ba1c:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ba20:	1f03      	subs	r3, r0, #4
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d807      	bhi.n	800ba36 <lv_img_decoder_built_in_open+0x72>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ba26:	7b23      	ldrb	r3, [r4, #12]
 800ba28:	bb6b      	cbnz	r3, 800ba86 <lv_img_decoder_built_in_open+0xc2>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 800ba2e:	6163      	str	r3, [r4, #20]
            return LV_RES_OK;
 800ba30:	2001      	movs	r0, #1
}
 800ba32:	b003      	add	sp, #12
 800ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800ba36:	1fc3      	subs	r3, r0, #7
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d83d      	bhi.n	800bab8 <lv_img_decoder_built_in_open+0xf4>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800ba3c:	f7fd fba6 	bl	800918c <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800ba40:	6a25      	ldr	r5, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800ba42:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800ba44:	b93d      	cbnz	r5, 800ba56 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800ba46:	2008      	movs	r0, #8
 800ba48:	f001 f9f8 	bl	800ce3c <lv_mem_alloc>
 800ba4c:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800ba4e:	b900      	cbnz	r0, 800ba52 <lv_img_decoder_built_in_open+0x8e>
 800ba50:	e7fe      	b.n	800ba50 <lv_img_decoder_built_in_open+0x8c>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800ba52:	6005      	str	r5, [r0, #0]
 800ba54:	6045      	str	r5, [r0, #4]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800ba56:	2604      	movs	r6, #4
 800ba58:	40be      	lsls	r6, r7
 800ba5a:	4630      	mov	r0, r6
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ba5c:	6a25      	ldr	r5, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800ba5e:	f001 f9ed 	bl	800ce3c <lv_mem_alloc>
 800ba62:	6068      	str	r0, [r5, #4]
        if(user_data->palette == NULL) {
 800ba64:	b910      	cbnz	r0, 800ba6c <lv_img_decoder_built_in_open+0xa8>
            lv_mem_assert(user_data->f);
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b903      	cbnz	r3, 800ba6c <lv_img_decoder_built_in_open+0xa8>
 800ba6a:	e7fe      	b.n	800ba6a <lv_img_decoder_built_in_open+0xa6>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ba6c:	7b23      	ldrb	r3, [r4, #12]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d10b      	bne.n	800ba8a <lv_img_decoder_built_in_open+0xc6>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800ba72:	2104      	movs	r1, #4
 800ba74:	6828      	ldr	r0, [r5, #0]
 800ba76:	f000 ffcf 	bl	800ca18 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba82:	f000 ffac 	bl	800c9de <lv_fs_read>
            dsc->img_data = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e7d1      	b.n	800ba2e <lv_img_decoder_built_in_open+0x6a>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	2204      	movs	r2, #4
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	40ba      	lsls	r2, r7
 800ba92:	441a      	add	r2, r3
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800ba94:	21ff      	movs	r1, #255	; 0xff
            for(i = 0; i < palette_size; i++) {
 800ba96:	429a      	cmp	r2, r3
 800ba98:	f100 0004 	add.w	r0, r0, #4
 800ba9c:	d0f3      	beq.n	800ba86 <lv_img_decoder_built_in_open+0xc2>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800ba9e:	789d      	ldrb	r5, [r3, #2]
 800baa0:	785e      	ldrb	r6, [r3, #1]
 800baa2:	f813 7b04 	ldrb.w	r7, [r3], #4
 800baa6:	f800 7c04 	strb.w	r7, [r0, #-4]
 800baaa:	f800 6c03 	strb.w	r6, [r0, #-3]
 800baae:	f800 5c02 	strb.w	r5, [r0, #-2]
 800bab2:	f800 1c01 	strb.w	r1, [r0, #-1]
 800bab6:	e7ee      	b.n	800ba96 <lv_img_decoder_built_in_open+0xd2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800bab8:	380b      	subs	r0, #11
 800baba:	2803      	cmp	r0, #3
 800babc:	d9e3      	bls.n	800ba86 <lv_img_decoder_built_in_open+0xc2>
        lv_img_decoder_built_in_close(decoder, dsc);
 800babe:	4621      	mov	r1, r4
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7ff ff69 	bl	800b998 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800bac6:	2000      	movs	r0, #0
 800bac8:	e7b3      	b.n	800ba32 <lv_img_decoder_built_in_open+0x6e>
 800baca:	bf00      	nop
 800bacc:	080f367e 	.word	0x080f367e

0800bad0 <lv_img_decoder_built_in_line_alpha>:
#endif
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 800bad8:	4616      	mov	r6, r2
 800bada:	4699      	mov	r9, r3

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800badc:	2200      	movs	r2, #0
 800bade:	23ff      	movs	r3, #255	; 0xff
 800bae0:	f88d 2000 	strb.w	r2, [sp]
 800bae4:	f88d 3001 	strb.w	r3, [sp, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800bae8:	f88d 2004 	strb.w	r2, [sp, #4]
 800baec:	f88d 3007 	strb.w	r3, [sp, #7]
 800baf0:	2255      	movs	r2, #85	; 0x55
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800baf2:	4b5e      	ldr	r3, [pc, #376]	; (800bc6c <lv_img_decoder_built_in_line_alpha+0x19c>)
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800baf4:	f88d 2005 	strb.w	r2, [sp, #5]
 800baf8:	22aa      	movs	r2, #170	; 0xaa
{
 800bafa:	4605      	mov	r5, r0
 800bafc:	460c      	mov	r4, r1
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800bafe:	f88d 2006 	strb.w	r2, [sp, #6]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800bb02:	af02      	add	r7, sp, #8
 800bb04:	f103 0e10 	add.w	lr, r3, #16
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	6859      	ldr	r1, [r3, #4]
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	c203      	stmia	r2!, {r0, r1}
 800bb10:	3308      	adds	r3, #8
 800bb12:	4573      	cmp	r3, lr
 800bb14:	4617      	mov	r7, r2
 800bb16:	d1f7      	bne.n	800bb08 <lv_img_decoder_built_in_line_alpha+0x38>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800bb18:	68ab      	ldr	r3, [r5, #8]
 800bb1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	b21a      	sxth	r2, r3
 800bb20:	4591      	cmp	r9, r2
 800bb22:	dc13      	bgt.n	800bb4c <lv_img_decoder_built_in_line_alpha+0x7c>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800bb24:	7c28      	ldrb	r0, [r5, #16]
 800bb26:	f000 001f 	and.w	r0, r0, #31
 800bb2a:	f7fd fb2f 	bl	800918c <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800bb2e:	7c2b      	ldrb	r3, [r5, #16]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bb30:	2701      	movs	r7, #1
 800bb32:	4087      	lsls	r7, r0
    switch(dsc->header.cf) {
 800bb34:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bb38:	3f01      	subs	r7, #1
    switch(dsc->header.cf) {
 800bb3a:	3b0b      	subs	r3, #11
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800bb3c:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bb3e:	b2bf      	uxth	r7, r7
    switch(dsc->header.cf) {
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d862      	bhi.n	800bc0a <lv_img_decoder_built_in_line_alpha+0x13a>
 800bb44:	e8df f003 	tbb	[pc, r3]
 800bb48:	57422c07 	.word	0x57422c07
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 800bb4c:	9ad8      	ldr	r2, [sp, #864]	; 0x360
 800bb4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800bb52:	3301      	adds	r3, #1
 800bb54:	e7e3      	b.n	800bb1e <lv_img_decoder_built_in_line_alpha+0x4e>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bb56:	692b      	ldr	r3, [r5, #16]
 800bb58:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bb5c:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800bb5e:	0758      	lsls	r0, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800bb60:	ea4f 01e4 	mov.w	r1, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bb64:	bf0c      	ite	eq
 800bb66:	fa0f fa82 	sxtheq.w	sl, r2
            if(dsc->header.w & 0x7) w++;
 800bb6a:	f102 0a01 	addne.w	sl, r2, #1
            pos       = 7 - (x & 0x7);
 800bb6e:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800bb70:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 7 - (x & 0x7);
 800bb74:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800bb78:	466e      	mov	r6, sp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bb7a:	7b2b      	ldrb	r3, [r5, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d148      	bne.n	800bc12 <lv_img_decoder_built_in_line_alpha+0x142>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800bb80:	686b      	ldr	r3, [r5, #4]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800bb86:	f1c8 0008 	rsb	r0, r8, #8
        data_tmp = fs_buf;
 800bb8a:	2200      	movs	r2, #0
            pos = 8 - px_size;
 800bb8c:	fa4f fc80 	sxtb.w	ip, r0
    for(i = 0; i < len; i++) {
 800bb90:	b213      	sxth	r3, r2
 800bb92:	4599      	cmp	r9, r3
 800bb94:	dc4d      	bgt.n	800bc32 <lv_img_decoder_built_in_line_alpha+0x162>

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800bb96:	2001      	movs	r0, #1
 800bb98:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
 800bb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bba0:	692b      	ldr	r3, [r5, #16]
 800bba2:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x3) w++;
 800bba6:	0799      	lsls	r1, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bba8:	ea4f 02a3 	mov.w	r2, r3, asr #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800bbac:	ea4f 01a4 	mov.w	r1, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
 800bbb0:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bbb4:	bf0c      	ite	eq
 800bbb6:	fa0f fa82 	sxtheq.w	sl, r2
            if(dsc->header.w & 0x3) w++;
 800bbba:	f102 0a01 	addne.w	sl, r2, #1
            pos       = 6 - ((x & 0x3) * 2);
 800bbbe:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800bbc2:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 6 - ((x & 0x3) * 2);
 800bbc6:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800bbc8:	ae01      	add	r6, sp, #4
            break;
 800bbca:	e7d6      	b.n	800bb7a <lv_img_decoder_built_in_line_alpha+0xaa>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bbcc:	692b      	ldr	r3, [r5, #16]
 800bbce:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bbd2:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800bbd4:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800bbd6:	ea4f 0164 	mov.w	r1, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bbda:	bf54      	ite	pl
 800bbdc:	fa0f fa82 	sxthpl.w	sl, r2
            if(dsc->header.w & 0x1) w++;
 800bbe0:	f102 0a01 	addmi.w	sl, r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 800bbe4:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800bbe8:	fb0a 1106 	mla	r1, sl, r6, r1
            pos       = 4 - ((x & 0x1) * 4);
 800bbec:	bf0c      	ite	eq
 800bbee:	2404      	moveq	r4, #4
 800bbf0:	2400      	movne	r4, #0
 800bbf2:	ae02      	add	r6, sp, #8
 800bbf4:	e7c1      	b.n	800bb7a <lv_img_decoder_built_in_line_alpha+0xaa>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bbf6:	6929      	ldr	r1, [r5, #16]
 800bbf8:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800bbfc:	fa0f fa81 	sxth.w	sl, r1
            ofs += w * y + x;  /*First pixel*/
 800bc00:	fb16 4101 	smlabb	r1, r6, r1, r4
            pos = 0;
 800bc04:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800bc06:	4626      	mov	r6, r4
 800bc08:	e7b7      	b.n	800bb7a <lv_img_decoder_built_in_line_alpha+0xaa>
    int8_t pos   = 0;
 800bc0a:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 800bc0c:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 800bc0e:	46a2      	mov	sl, r4
 800bc10:	e7f9      	b.n	800bc06 <lv_img_decoder_built_in_line_alpha+0x136>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bc12:	f8d5 b020 	ldr.w	fp, [r5, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bc16:	3104      	adds	r1, #4
 800bc18:	f8db 0000 	ldr.w	r0, [fp]
 800bc1c:	f000 fefc 	bl	800ca18 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800bc20:	a906      	add	r1, sp, #24
 800bc22:	2300      	movs	r3, #0
 800bc24:	4652      	mov	r2, sl
 800bc26:	f8db 0000 	ldr.w	r0, [fp]
 800bc2a:	f000 fed8 	bl	800c9de <lv_fs_read>
        data_tmp = fs_buf;
 800bc2e:	a906      	add	r1, sp, #24
 800bc30:	e7a9      	b.n	800bb86 <lv_img_decoder_built_in_line_alpha+0xb6>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bc32:	780b      	ldrb	r3, [r1, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bc34:	98d8      	ldr	r0, [sp, #864]	; 0x360
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bc36:	fa07 fe04 	lsl.w	lr, r7, r4
 800bc3a:	ea03 030e 	and.w	r3, r3, lr
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800bc3e:	f895 e010 	ldrb.w	lr, [r5, #16]
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bc42:	4123      	asrs	r3, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bc44:	f00e 0e1f 	and.w	lr, lr, #31
 800bc48:	b2db      	uxtb	r3, r3
        pos -= px_size;
 800bc4a:	eba4 0408 	sub.w	r4, r4, r8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bc4e:	f1be 0f0e 	cmp.w	lr, #14
        pos -= px_size;
 800bc52:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bc54:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 800bc58:	bf18      	it	ne
 800bc5a:	5cf3      	ldrbne	r3, [r6, r3]
 800bc5c:	f88e 3003 	strb.w	r3, [lr, #3]
        if(pos < 0) {
 800bc60:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800bc62:	bfbc      	itt	lt
 800bc64:	4664      	movlt	r4, ip
            data_tmp++;
 800bc66:	3101      	addlt	r1, #1
 800bc68:	3201      	adds	r2, #1
 800bc6a:	e791      	b.n	800bb90 <lv_img_decoder_built_in_line_alpha+0xc0>
 800bc6c:	08014f60 	.word	0x08014f60

0800bc70 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	4606      	mov	r6, r0

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bc76:	7c00      	ldrb	r0, [r0, #16]
{
 800bc78:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bc7c:	f000 001f 	and.w	r0, r0, #31
{
 800bc80:	469b      	mov	fp, r3
 800bc82:	460c      	mov	r4, r1
 800bc84:	4692      	mov	sl, r2
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bc86:	f7fd fa81 	bl	800918c <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800bc8a:	7c33      	ldrb	r3, [r6, #16]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bc8c:	f04f 0801 	mov.w	r8, #1
 800bc90:	fa08 f800 	lsl.w	r8, r8, r0
    switch(dsc->header.cf) {
 800bc94:	f003 031f 	and.w	r3, r3, #31
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bc98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    switch(dsc->header.cf) {
 800bc9c:	3b07      	subs	r3, #7
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bc9e:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bca0:	fa1f f888 	uxth.w	r8, r8
    switch(dsc->header.cf) {
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d857      	bhi.n	800bd58 <lv_img_decoder_built_in_line_indexed+0xe8>
 800bca8:	e8df f003 	tbb	[pc, r3]
 800bcac:	4c382502 	.word	0x4c382502
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bcb0:	6933      	ldr	r3, [r6, #16]
 800bcb2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bcb6:	10dd      	asrs	r5, r3, #3
            if(dsc->header.w & 0x7) w++;
 800bcb8:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800bcba:	ea4f 02e4 	mov.w	r2, r4, asr #3
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bcbe:	bf0c      	ite	eq
 800bcc0:	b22d      	sxtheq	r5, r5
            if(dsc->header.w & 0x7) w++;
 800bcc2:	3501      	addne	r5, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800bcc4:	fb05 220a 	mla	r2, r5, sl, r2
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
 800bcc8:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
 800bcca:	3208      	adds	r2, #8
            pos = 7 - (x & 0x7);
 800bccc:	f004 0407 	and.w	r4, r4, #7

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bcd0:	7b33      	ldrb	r3, [r6, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bcd2:	6a37      	ldr	r7, [r6, #32]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d143      	bne.n	800bd60 <lv_img_decoder_built_in_line_indexed+0xf0>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800bcd8:	6873      	ldr	r3, [r6, #4]
 800bcda:	6899      	ldr	r1, [r3, #8]
 800bcdc:	440a      	add	r2, r1
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800bcde:	f1c9 0508 	rsb	r5, r9, #8
        data_tmp = fs_buf;
 800bce2:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800bce4:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800bce6:	b203      	sxth	r3, r0
 800bce8:	459b      	cmp	fp, r3
 800bcea:	dc45      	bgt.n	800bd78 <lv_img_decoder_built_in_line_indexed+0x108>
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800bcec:	2001      	movs	r0, #1
 800bcee:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 800bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bcf6:	6933      	ldr	r3, [r6, #16]
 800bcf8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bcfc:	109d      	asrs	r5, r3, #2
            if(dsc->header.w & 0x3) w++;
 800bcfe:	079a      	lsls	r2, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bd00:	bf08      	it	eq
 800bd02:	b22d      	sxtheq	r5, r5
            ofs += w * y + (x >> 2); /*First pixel*/
 800bd04:	ea4f 02a4 	mov.w	r2, r4, asr #2
            if(dsc->header.w & 0x3) w++;
 800bd08:	bf18      	it	ne
 800bd0a:	3501      	addne	r5, #1
            pos = 6 - ((x & 0x3) * 2);
 800bd0c:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800bd0e:	fb05 220a 	mla	r2, r5, sl, r2
            pos = 6 - ((x & 0x3) * 2);
 800bd12:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
 800bd16:	3210      	adds	r2, #16
            pos = 6 - ((x & 0x3) * 2);
 800bd18:	0064      	lsls	r4, r4, #1
            break;
 800bd1a:	e7d9      	b.n	800bcd0 <lv_img_decoder_built_in_line_indexed+0x60>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bd1c:	6933      	ldr	r3, [r6, #16]
 800bd1e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800bd22:	105d      	asrs	r5, r3, #1
            if(dsc->header.w & 0x1) w++;
 800bd24:	07db      	lsls	r3, r3, #31
            ofs += w * y + (x >> 1); /*First pixel*/
 800bd26:	ea4f 0264 	mov.w	r2, r4, asr #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bd2a:	bf54      	ite	pl
 800bd2c:	b22d      	sxthpl	r5, r5
            if(dsc->header.w & 0x1) w++;
 800bd2e:	3501      	addmi	r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800bd30:	fb05 220a 	mla	r2, r5, sl, r2
            pos = 4 - ((x & 0x1) * 4);
 800bd34:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 800bd38:	f102 0240 	add.w	r2, r2, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800bd3c:	bf0c      	ite	eq
 800bd3e:	2404      	moveq	r4, #4
 800bd40:	2400      	movne	r4, #0
 800bd42:	e7c5      	b.n	800bcd0 <lv_img_decoder_built_in_line_indexed+0x60>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bd44:	6932      	ldr	r2, [r6, #16]
 800bd46:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800bd4a:	b215      	sxth	r5, r2
            ofs += w * y + x;  /*First pixel*/
 800bd4c:	fb1a 4202 	smlabb	r2, sl, r2, r4
            ofs += 1024;       /*Skip the palette*/
 800bd50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
            pos = 0;
 800bd54:	2400      	movs	r4, #0
            break;
 800bd56:	e7bb      	b.n	800bcd0 <lv_img_decoder_built_in_line_indexed+0x60>
    uint32_t ofs = 0;
 800bd58:	2200      	movs	r2, #0
    int8_t pos   = 0;
 800bd5a:	4614      	mov	r4, r2
    lv_coord_t w = 0;
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	e7b7      	b.n	800bcd0 <lv_img_decoder_built_in_line_indexed+0x60>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bd60:	1d11      	adds	r1, r2, #4
 800bd62:	6838      	ldr	r0, [r7, #0]
 800bd64:	f000 fe58 	bl	800ca18 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800bd68:	462a      	mov	r2, r5
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4669      	mov	r1, sp
 800bd6e:	6838      	ldr	r0, [r7, #0]
 800bd70:	f000 fe35 	bl	800c9de <lv_fs_read>
        data_tmp = fs_buf;
 800bd74:	466a      	mov	r2, sp
 800bd76:	e7b2      	b.n	800bcde <lv_img_decoder_built_in_line_indexed+0x6e>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bd78:	7813      	ldrb	r3, [r2, #0]
 800bd7a:	fa08 f104 	lsl.w	r1, r8, r4
 800bd7e:	400b      	ands	r3, r1
 800bd80:	4123      	asrs	r3, r4
        cbuf[i] = user_data->palette[val_act];
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	b2db      	uxtb	r3, r3
        pos -= px_size;
 800bd86:	eba4 0409 	sub.w	r4, r4, r9
        cbuf[i] = user_data->palette[val_act];
 800bd8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd8e:	99d2      	ldr	r1, [sp, #840]	; 0x348
        pos -= px_size;
 800bd90:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800bd92:	2c00      	cmp	r4, #0
        cbuf[i] = user_data->palette[val_act];
 800bd94:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
            pos = 8 - px_size;
 800bd98:	bfbc      	itt	lt
 800bd9a:	462c      	movlt	r4, r5
            data_tmp++;
 800bd9c:	3201      	addlt	r2, #1
 800bd9e:	3001      	adds	r0, #1
 800bda0:	e7a1      	b.n	800bce6 <lv_img_decoder_built_in_line_indexed+0x76>

0800bda2 <lv_img_decoder_built_in_info>:
{
 800bda2:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800bda4:	4608      	mov	r0, r1
{
 800bda6:	b085      	sub	sp, #20
 800bda8:	460d      	mov	r5, r1
 800bdaa:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800bdac:	f7fd faee 	bl	800938c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800bdb0:	b9d0      	cbnz	r0, 800bde8 <lv_img_decoder_built_in_info+0x46>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800bdb2:	782b      	ldrb	r3, [r5, #0]
 800bdb4:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800bdb8:	1f1a      	subs	r2, r3, #4
 800bdba:	2a0a      	cmp	r2, #10
 800bdbc:	d812      	bhi.n	800bde4 <lv_img_decoder_built_in_info+0x42>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800bdbe:	682a      	ldr	r2, [r5, #0]
 800bdc0:	6821      	ldr	r1, [r4, #0]
 800bdc2:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800bdc6:	f362 2194 	bfi	r1, r2, #10, #11
 800bdca:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800bdcc:	886a      	ldrh	r2, [r5, #2]
 800bdce:	8861      	ldrh	r1, [r4, #2]
 800bdd0:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800bdd4:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800bdd8:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800bdda:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800bddc:	f363 0204 	bfi	r2, r3, #0, #5
 800bde0:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800bde2:	2001      	movs	r0, #1
}
 800bde4:	b005      	add	sp, #20
 800bde6:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800bde8:	2801      	cmp	r0, #1
 800bdea:	d117      	bne.n	800be1c <lv_img_decoder_built_in_info+0x7a>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800bdec:	2202      	movs	r2, #2
 800bdee:	4629      	mov	r1, r5
 800bdf0:	a802      	add	r0, sp, #8
 800bdf2:	f000 fe35 	bl	800ca60 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800bdf6:	b940      	cbnz	r0, 800be0a <lv_img_decoder_built_in_info+0x68>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800bdf8:	ab01      	add	r3, sp, #4
 800bdfa:	2204      	movs	r2, #4
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	a802      	add	r0, sp, #8
 800be00:	f000 fded 	bl	800c9de <lv_fs_read>
            lv_fs_close(&file);
 800be04:	a802      	add	r0, sp, #8
 800be06:	f000 fdd5 	bl	800c9b4 <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800be0a:	7820      	ldrb	r0, [r4, #0]
 800be0c:	301c      	adds	r0, #28
 800be0e:	f000 001f 	and.w	r0, r0, #31
 800be12:	280a      	cmp	r0, #10
 800be14:	bf8c      	ite	hi
 800be16:	2000      	movhi	r0, #0
 800be18:	2001      	movls	r0, #1
 800be1a:	e7e3      	b.n	800bde4 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800be1c:	2802      	cmp	r0, #2
 800be1e:	d10d      	bne.n	800be3c <lv_img_decoder_built_in_info+0x9a>
        header->w = 1;
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 800be28:	0c1a      	lsrs	r2, r3, #16
 800be2a:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 800be2e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800be30:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800be32:	220b      	movs	r2, #11
 800be34:	f362 0304 	bfi	r3, r2, #0, #5
 800be38:	7023      	strb	r3, [r4, #0]
 800be3a:	e7d3      	b.n	800bde4 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800be3c:	2000      	movs	r0, #0
 800be3e:	e7d1      	b.n	800bde4 <lv_img_decoder_built_in_info+0x42>

0800be40 <lv_img_decoder_built_in_read_line>:
{
 800be40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800be44:	7c08      	ldrb	r0, [r1, #16]
{
 800be46:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 800be4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800be4c:	469a      	mov	sl, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800be4e:	f000 031f 	and.w	r3, r0, #31
{
 800be52:	4691      	mov	r9, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800be54:	1f1a      	subs	r2, r3, #4
 800be56:	2a02      	cmp	r2, #2
{
 800be58:	460c      	mov	r4, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800be5a:	d827      	bhi.n	800beac <lv_img_decoder_built_in_read_line+0x6c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800be5c:	7b0b      	ldrb	r3, [r1, #12]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d13b      	bne.n	800beda <lv_img_decoder_built_in_read_line+0x9a>
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800be62:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800be66:	6a0e      	ldr	r6, [r1, #32]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800be68:	f7fd f990 	bl	800918c <lv_img_color_format_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800be6c:	6924      	ldr	r4, [r4, #16]
 800be6e:	f3c4 248a 	ubfx	r4, r4, #10, #11
 800be72:	fb1a 9104 	smlabb	r1, sl, r4, r9
 800be76:	4341      	muls	r1, r0
 800be78:	10c9      	asrs	r1, r1, #3
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800be7a:	4607      	mov	r7, r0
    res = lv_fs_seek(user_data->f, pos);
 800be7c:	3104      	adds	r1, #4
 800be7e:	6830      	ldr	r0, [r6, #0]
 800be80:	f000 fdca 	bl	800ca18 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800be84:	bb48      	cbnz	r0, 800beda <lv_img_decoder_built_in_read_line+0x9a>
    uint32_t br  = 0;
 800be86:	ab04      	add	r3, sp, #16
    uint32_t btr = len * (px_size >> 3);
 800be88:	f3c7 04c7 	ubfx	r4, r7, #3, #8
 800be8c:	fb14 f408 	smulbb	r4, r4, r8
    uint32_t br  = 0;
 800be90:	f843 0d04 	str.w	r0, [r3, #-4]!
    lv_fs_read(user_data->f, buf, btr, &br);
 800be94:	4622      	mov	r2, r4
 800be96:	4629      	mov	r1, r5
 800be98:	6830      	ldr	r0, [r6, #0]
 800be9a:	f000 fda0 	bl	800c9de <lv_fs_read>
        return LV_RES_INV;
 800be9e:	9803      	ldr	r0, [sp, #12]
 800bea0:	1b03      	subs	r3, r0, r4
 800bea2:	4258      	negs	r0, r3
 800bea4:	4158      	adcs	r0, r3
}
 800bea6:	b004      	add	sp, #16
 800bea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800beac:	f1a3 020b 	sub.w	r2, r3, #11
 800beb0:	2a03      	cmp	r2, #3
 800beb2:	d807      	bhi.n	800bec4 <lv_img_decoder_built_in_read_line+0x84>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 800beb4:	9500      	str	r5, [sp, #0]
 800beb6:	4643      	mov	r3, r8
 800beb8:	4652      	mov	r2, sl
 800beba:	4649      	mov	r1, r9
 800bebc:	4620      	mov	r0, r4
 800bebe:	f7ff fe07 	bl	800bad0 <lv_img_decoder_built_in_line_alpha>
 800bec2:	e7f0      	b.n	800bea6 <lv_img_decoder_built_in_read_line+0x66>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800bec4:	3b07      	subs	r3, #7
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d807      	bhi.n	800beda <lv_img_decoder_built_in_read_line+0x9a>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800beca:	9500      	str	r5, [sp, #0]
 800becc:	4643      	mov	r3, r8
 800bece:	4652      	mov	r2, sl
 800bed0:	4649      	mov	r1, r9
 800bed2:	4620      	mov	r0, r4
 800bed4:	f7ff fecc 	bl	800bc70 <lv_img_decoder_built_in_line_indexed>
 800bed8:	e7e5      	b.n	800bea6 <lv_img_decoder_built_in_read_line+0x66>
    lv_res_t res = LV_RES_INV;
 800beda:	2000      	movs	r0, #0
 800bedc:	e7e3      	b.n	800bea6 <lv_img_decoder_built_in_read_line+0x66>
	...

0800bee0 <lv_img_decoder_get_info>:
    header->always_zero = 0;
 800bee0:	780b      	ldrb	r3, [r1, #0]
 800bee2:	f36f 1347 	bfc	r3, #5, #3
{
 800bee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beea:	4607      	mov	r7, r0
    header->always_zero = 0;
 800beec:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800beee:	480d      	ldr	r0, [pc, #52]	; (800bf24 <lv_img_decoder_get_info+0x44>)
 800bef0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800bf24 <lv_img_decoder_get_info+0x44>
{
 800bef4:	460e      	mov	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bef6:	f000 fe5a 	bl	800cbae <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800befa:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800befc:	4605      	mov	r5, r0
 800befe:	b915      	cbnz	r5, 800bf06 <lv_img_decoder_get_info+0x26>
}
 800bf00:	4620      	mov	r0, r4
 800bf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800bf06:	682c      	ldr	r4, [r5, #0]
 800bf08:	b134      	cbz	r4, 800bf18 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	4628      	mov	r0, r5
 800bf10:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 800bf12:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800bf14:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 800bf16:	d0f3      	beq.n	800bf00 <lv_img_decoder_get_info+0x20>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	f000 fe4d 	bl	800cbba <lv_ll_get_next>
 800bf20:	4605      	mov	r5, r0
 800bf22:	e7ec      	b.n	800befe <lv_img_decoder_get_info+0x1e>
 800bf24:	20015e78 	.word	0x20015e78

0800bf28 <lv_img_decoder_open>:
{
 800bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	4605      	mov	r5, r0
    dsc->style     = style;
 800bf2e:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 800bf30:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 800bf32:	4608      	mov	r0, r1
{
 800bf34:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 800bf36:	f7fd fa29 	bl	800938c <lv_img_src_get_type>
    dsc->user_data = NULL;
 800bf3a:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 800bf3c:	7328      	strb	r0, [r5, #12]
    dsc->user_data = NULL;
 800bf3e:	622c      	str	r4, [r5, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bf40:	4817      	ldr	r0, [pc, #92]	; (800bfa0 <lv_img_decoder_open+0x78>)
 800bf42:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800bfa0 <lv_img_decoder_open+0x78>
 800bf46:	f000 fe32 	bl	800cbae <lv_ll_get_head>
        res = d->info_cb(d, src, &dsc->header);
 800bf4a:	f105 0910 	add.w	r9, r5, #16
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bf4e:	4606      	mov	r6, r0
        dsc->error_msg = NULL;
 800bf50:	46a0      	mov	r8, r4
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bf52:	b946      	cbnz	r6, 800bf66 <lv_img_decoder_open+0x3e>
    if(res == LV_RES_INV) {
 800bf54:	b924      	cbnz	r4, 800bf60 <lv_img_decoder_open+0x38>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800bf56:	2224      	movs	r2, #36	; 0x24
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f004 fc49 	bl	80107f2 <memset>
}
 800bf60:	4620      	mov	r0, r4
 800bf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800bf66:	6833      	ldr	r3, [r6, #0]
 800bf68:	b1a3      	cbz	r3, 800bf94 <lv_img_decoder_open+0x6c>
 800bf6a:	6872      	ldr	r2, [r6, #4]
 800bf6c:	b192      	cbz	r2, 800bf94 <lv_img_decoder_open+0x6c>
        res = d->info_cb(d, src, &dsc->header);
 800bf6e:	464a      	mov	r2, r9
 800bf70:	4639      	mov	r1, r7
 800bf72:	4630      	mov	r0, r6
 800bf74:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800bf76:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 800bf78:	4604      	mov	r4, r0
        if(res != LV_RES_OK) continue;
 800bf7a:	d10b      	bne.n	800bf94 <lv_img_decoder_open+0x6c>
        dsc->error_msg = NULL;
 800bf7c:	f8c5 801c 	str.w	r8, [r5, #28]
        dsc->img_data  = NULL;
 800bf80:	f8c5 8014 	str.w	r8, [r5, #20]
        dsc->decoder   = d;
 800bf84:	602e      	str	r6, [r5, #0]
        res = d->open_cb(d, dsc);
 800bf86:	6873      	ldr	r3, [r6, #4]
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 800bf8e:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 800bf90:	4604      	mov	r4, r0
        if(res == LV_RES_OK) break;
 800bf92:	d0e5      	beq.n	800bf60 <lv_img_decoder_open+0x38>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bf94:	4631      	mov	r1, r6
 800bf96:	4650      	mov	r0, sl
 800bf98:	f000 fe0f 	bl	800cbba <lv_ll_get_next>
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	e7d8      	b.n	800bf52 <lv_img_decoder_open+0x2a>
 800bfa0:	20015e78 	.word	0x20015e78

0800bfa4 <lv_img_decoder_read_line>:
{
 800bfa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfa6:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800bfa8:	6800      	ldr	r0, [r0, #0]
 800bfaa:	6884      	ldr	r4, [r0, #8]
 800bfac:	b144      	cbz	r4, 800bfc0 <lv_img_decoder_read_line+0x1c>
 800bfae:	9e06      	ldr	r6, [sp, #24]
 800bfb0:	e88d 0048 	stmia.w	sp, {r3, r6}
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	4629      	mov	r1, r5
 800bfba:	47a0      	blx	r4
}
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	e7fb      	b.n	800bfbc <lv_img_decoder_read_line+0x18>

0800bfc4 <lv_img_decoder_close>:
{
 800bfc4:	4601      	mov	r1, r0
    if(dsc->decoder) {
 800bfc6:	6800      	ldr	r0, [r0, #0]
 800bfc8:	b110      	cbz	r0, 800bfd0 <lv_img_decoder_close+0xc>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800bfca:	68c2      	ldr	r2, [r0, #12]
 800bfcc:	b102      	cbz	r2, 800bfd0 <lv_img_decoder_close+0xc>
 800bfce:	4710      	bx	r2
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <lv_img_decoder_create>:
{
 800bfd4:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800bfd6:	4806      	ldr	r0, [pc, #24]	; (800bff0 <lv_img_decoder_create+0x1c>)
 800bfd8:	f000 fdad 	bl	800cb36 <lv_ll_ins_head>
    lv_mem_assert(decoder);
 800bfdc:	4604      	mov	r4, r0
 800bfde:	b900      	cbnz	r0, 800bfe2 <lv_img_decoder_create+0xe>
 800bfe0:	e7fe      	b.n	800bfe0 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800bfe2:	2210      	movs	r2, #16
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	f004 fc04 	bl	80107f2 <memset>
}
 800bfea:	4620      	mov	r0, r4
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	bf00      	nop
 800bff0:	20015e78 	.word	0x20015e78

0800bff4 <lv_img_decoder_init>:
{
 800bff4:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800bff6:	2110      	movs	r1, #16
 800bff8:	4807      	ldr	r0, [pc, #28]	; (800c018 <lv_img_decoder_init+0x24>)
 800bffa:	f000 fd92 	bl	800cb22 <lv_ll_init>
    decoder = lv_img_decoder_create();
 800bffe:	f7ff ffe9 	bl	800bfd4 <lv_img_decoder_create>
    if(decoder == NULL) {
 800c002:	b900      	cbnz	r0, 800c006 <lv_img_decoder_init+0x12>
 800c004:	e7fe      	b.n	800c004 <lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <lv_img_decoder_init+0x28>)
 800c008:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <lv_img_decoder_init+0x2c>)
 800c00c:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800c00e:	4b05      	ldr	r3, [pc, #20]	; (800c024 <lv_img_decoder_init+0x30>)
 800c010:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800c012:	4b05      	ldr	r3, [pc, #20]	; (800c028 <lv_img_decoder_init+0x34>)
 800c014:	60c3      	str	r3, [r0, #12]
 800c016:	bd08      	pop	{r3, pc}
 800c018:	20015e78 	.word	0x20015e78
 800c01c:	0800bda3 	.word	0x0800bda3
 800c020:	0800b9c5 	.word	0x0800b9c5
 800c024:	0800be41 	.word	0x0800be41
 800c028:	0800b999 	.word	0x0800b999

0800c02c <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 800c02c:	6843      	ldr	r3, [r0, #4]
 800c02e:	4718      	bx	r3

0800c030 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800c030:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800c032:	6804      	ldr	r4, [r0, #0]
 800c034:	46a4      	mov	ip, r4
}
 800c036:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800c03a:	4760      	bx	ip

0800c03c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800c03c:	b507      	push	{r0, r1, r2, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800c03e:	4613      	mov	r3, r2
 800c040:	460a      	mov	r2, r1
 800c042:	4669      	mov	r1, sp
 800c044:	f7ff fff4 	bl	800c030 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 800c048:	b108      	cbz	r0, 800c04e <lv_font_get_glyph_width+0x12>
 800c04a:	f8bd 0000 	ldrh.w	r0, [sp]
    else return 0;
}
 800c04e:	b003      	add	sp, #12
 800c050:	f85d fb04 	ldr.w	pc, [sp], #4

0800c054 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800c054:	7803      	ldrb	r3, [r0, #0]
 800c056:	780a      	ldrb	r2, [r1, #0]
 800c058:	4293      	cmp	r3, r2
 800c05a:	bf11      	iteee	ne
 800c05c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800c05e:	784b      	ldrbeq	r3, [r1, #1]
 800c060:	7840      	ldrbeq	r0, [r0, #1]
 800c062:	1ac0      	subeq	r0, r0, r3

}
 800c064:	4770      	bx	lr

0800c066 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800c066:	8803      	ldrh	r3, [r0, #0]
 800c068:	880a      	ldrh	r2, [r1, #0]
 800c06a:	4293      	cmp	r3, r2
 800c06c:	bf11      	iteee	ne
 800c06e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800c070:	884b      	ldrheq	r3, [r1, #2]
 800c072:	8840      	ldrheq	r0, [r0, #2]
 800c074:	1ac0      	subeq	r0, r0, r3
}
 800c076:	4770      	bx	lr

0800c078 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800c078:	8800      	ldrh	r0, [r0, #0]
 800c07a:	880b      	ldrh	r3, [r1, #0]
}
 800c07c:	1ac0      	subs	r0, r0, r3
 800c07e:	4770      	bx	lr

0800c080 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800c080:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c082:	6804      	ldr	r4, [r0, #0]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c084:	6963      	ldr	r3, [r4, #20]
 800c086:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800c088:	b085      	sub	sp, #20
 800c08a:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c08c:	d00b      	beq.n	800c0a6 <get_glyph_dsc_id.isra.0.part.1+0x26>
 800c08e:	2700      	movs	r7, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c090:	f04f 0e14 	mov.w	lr, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800c094:	8a63      	ldrh	r3, [r4, #18]
 800c096:	b2be      	uxth	r6, r7
 800c098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c09c:	429e      	cmp	r6, r3
 800c09e:	db05      	blt.n	800c0ac <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 800c0a0:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	e015      	b.n	800c0d2 <get_glyph_dsc_id.isra.0.part.1+0x52>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800c0a6:	69a0      	ldr	r0, [r4, #24]
}
 800c0a8:	b005      	add	sp, #20
 800c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	fb0e f606 	mul.w	r6, lr, r6
 800c0b2:	1999      	adds	r1, r3, r6
 800c0b4:	599a      	ldr	r2, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c0b6:	888b      	ldrh	r3, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c0b8:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c0ba:	429a      	cmp	r2, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800c0bc:	9203      	str	r2, [sp, #12]
 800c0be:	f107 0701 	add.w	r7, r7, #1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800c0c2:	d8e7      	bhi.n	800c094 <get_glyph_dsc_id.isra.0.part.1+0x14>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800c0c4:	7c8b      	ldrb	r3, [r1, #18]
 800c0c6:	f013 0303 	ands.w	r3, r3, #3
 800c0ca:	d104      	bne.n	800c0d6 <get_glyph_dsc_id.isra.0.part.1+0x56>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800c0cc:	88c8      	ldrh	r0, [r1, #6]
 800c0ce:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 800c0d0:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800c0d2:	61a0      	str	r0, [r4, #24]
 800c0d4:	e7e8      	b.n	800c0a8 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d104      	bne.n	800c0e4 <get_glyph_dsc_id.isra.0.part.1+0x64>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800c0da:	68cb      	ldr	r3, [r1, #12]
 800c0dc:	5c98      	ldrb	r0, [r3, r2]
 800c0de:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800c0e0:	4418      	add	r0, r3
 800c0e2:	e7f5      	b.n	800c0d0 <get_glyph_dsc_id.isra.0.part.1+0x50>
 800c0e4:	4811      	ldr	r0, [pc, #68]	; (800c12c <get_glyph_dsc_id.isra.0.part.1+0xac>)
 800c0e6:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c0e8:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d10e      	bne.n	800c10c <get_glyph_dsc_id.isra.0.part.1+0x8c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c0ee:	6889      	ldr	r1, [r1, #8]
 800c0f0:	a803      	add	r0, sp, #12
 800c0f2:	f001 fab6 	bl	800d662 <lv_utils_bsearch>
            if(p) {
 800c0f6:	b908      	cbnz	r0, 800c0fc <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7e9      	b.n	800c0d0 <get_glyph_dsc_id.isra.0.part.1+0x50>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	441e      	add	r6, r3
 800c100:	68b3      	ldr	r3, [r6, #8]
 800c102:	1ac3      	subs	r3, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800c104:	88f0      	ldrh	r0, [r6, #6]
 800c106:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c10a:	e7e1      	b.n	800c0d0 <get_glyph_dsc_id.isra.0.part.1+0x50>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800c10c:	2302      	movs	r3, #2
 800c10e:	6889      	ldr	r1, [r1, #8]
 800c110:	a803      	add	r0, sp, #12
 800c112:	f001 faa6 	bl	800d662 <lv_utils_bsearch>
            if(p) {
 800c116:	2800      	cmp	r0, #0
 800c118:	d0ee      	beq.n	800c0f8 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800c11a:	68a3      	ldr	r3, [r4, #8]
 800c11c:	441e      	add	r6, r3
 800c11e:	68b3      	ldr	r3, [r6, #8]
 800c120:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800c122:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800c124:	68f3      	ldr	r3, [r6, #12]
 800c126:	5c18      	ldrb	r0, [r3, r0]
 800c128:	88f3      	ldrh	r3, [r6, #6]
 800c12a:	e7d9      	b.n	800c0e0 <get_glyph_dsc_id.isra.0.part.1+0x60>
 800c12c:	0800c079 	.word	0x0800c079

0800c130 <lv_font_get_bitmap_fmt_txt>:
{
 800c130:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800c132:	b909      	cbnz	r1, 800c138 <lv_font_get_bitmap_fmt_txt+0x8>
    if(!gid) return false;
 800c134:	2000      	movs	r0, #0
 800c136:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c138:	f850 4f0c 	ldr.w	r4, [r0, #12]!
 800c13c:	f7ff ffa0 	bl	800c080 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800c140:	2800      	cmp	r0, #0
 800c142:	d0f7      	beq.n	800c134 <lv_font_get_bitmap_fmt_txt+0x4>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800c14a:	2a00      	cmp	r2, #0
 800c14c:	d0f2      	beq.n	800c134 <lv_font_get_bitmap_fmt_txt+0x4>
 800c14e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800c152:	6820      	ldr	r0, [r4, #0]
 800c154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c158:	4418      	add	r0, r3
}
 800c15a:	bd10      	pop	{r4, pc}

0800c15c <lv_font_get_glyph_dsc_fmt_txt>:
{
 800c15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c160:	4680      	mov	r8, r0
 800c162:	b085      	sub	sp, #20
 800c164:	460c      	mov	r4, r1
 800c166:	4699      	mov	r9, r3
    if(letter == '\0') return 0;
 800c168:	b91a      	cbnz	r2, 800c172 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    if(!gid) return false;
 800c16a:	2000      	movs	r0, #0
}
 800c16c:	b005      	add	sp, #20
 800c16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800c172:	4607      	mov	r7, r0
 800c174:	4611      	mov	r1, r2
 800c176:	f857 5f0c 	ldr.w	r5, [r7, #12]!
 800c17a:	4638      	mov	r0, r7
 800c17c:	f7ff ff80 	bl	800c080 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800c180:	4606      	mov	r6, r0
 800c182:	2800      	cmp	r0, #0
 800c184:	d0f1      	beq.n	800c16a <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800c186:	68eb      	ldr	r3, [r5, #12]
 800c188:	b9db      	cbnz	r3, 800c1c2 <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800c18a:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800c18c:	686b      	ldr	r3, [r5, #4]
 800c18e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800c192:	8a2b      	ldrh	r3, [r5, #16]
 800c194:	4358      	muls	r0, r3
 800c196:	8873      	ldrh	r3, [r6, #2]
 800c198:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800c19c:	eb03 1020 	add.w	r0, r3, r0, asr #4
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800c1a0:	3008      	adds	r0, #8
 800c1a2:	0900      	lsrs	r0, r0, #4
    dsc_out->adv_w = adv_w;
 800c1a4:	8020      	strh	r0, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 800c1a6:	7973      	ldrb	r3, [r6, #5]
 800c1a8:	70e3      	strb	r3, [r4, #3]
    dsc_out->box_w = gdsc->box_w;
 800c1aa:	7933      	ldrb	r3, [r6, #4]
 800c1ac:	70a3      	strb	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800c1ae:	79b3      	ldrb	r3, [r6, #6]
 800c1b0:	7123      	strb	r3, [r4, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800c1b2:	79f3      	ldrb	r3, [r6, #7]
 800c1b4:	7163      	strb	r3, [r4, #5]
    dsc_out->bpp   = fdsc->bpp;
 800c1b6:	7ceb      	ldrb	r3, [r5, #19]
 800c1b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c1bc:	71a3      	strb	r3, [r4, #6]
    return true;
 800c1be:	2001      	movs	r0, #1
 800c1c0:	e7d4      	b.n	800c16c <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800c1c2:	f1b9 0f00 	cmp.w	r9, #0
 800c1c6:	d0e0      	beq.n	800c18a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	f7ff ff58 	bl	800c080 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d0da      	beq.n	800c18a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800c1d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    if(fdsc->kern_classes == 0) {
 800c1d8:	7cda      	ldrb	r2, [r3, #19]
 800c1da:	68df      	ldr	r7, [r3, #12]
 800c1dc:	f012 0f20 	tst.w	r2, #32
 800c1e0:	d133      	bne.n	800c24a <lv_font_get_glyph_dsc_fmt_txt+0xee>
        if(kdsc->glyph_ids_size == 0) {
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
 800c1e4:	f013 0303 	ands.w	r3, r3, #3
 800c1e8:	d117      	bne.n	800c21a <lv_font_get_glyph_dsc_fmt_txt+0xbe>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c1ea:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800c1ee:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 800c1f0:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800c1f4:	68ba      	ldr	r2, [r7, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c1f6:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800c1fa:	4b1c      	ldr	r3, [pc, #112]	; (800c26c <lv_font_get_glyph_dsc_fmt_txt+0x110>)
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c202:	2302      	movs	r3, #2
 800c204:	4641      	mov	r1, r8
 800c206:	f001 fa2c 	bl	800d662 <lv_utils_bsearch>
            if(kid_p) {
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0be      	beq.n	800c18c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800c20e:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800c212:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	5618      	ldrsb	r0, [r3, r0]
 800c218:	e7b8      	b.n	800c18c <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d1b5      	bne.n	800c18a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c21e:	eb06 2300 	add.w	r3, r6, r0, lsl #8
 800c222:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 800c224:	f8d7 8000 	ldr.w	r8, [r7]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800c228:	68ba      	ldr	r2, [r7, #8]
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800c22a:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800c22e:	4b10      	ldr	r3, [pc, #64]	; (800c270 <lv_font_get_glyph_dsc_fmt_txt+0x114>)
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800c236:	2304      	movs	r3, #4
 800c238:	4641      	mov	r1, r8
 800c23a:	f001 fa12 	bl	800d662 <lv_utils_bsearch>
            if(kid_p) {
 800c23e:	2800      	cmp	r0, #0
 800c240:	d0a4      	beq.n	800c18c <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800c242:	eba0 0008 	sub.w	r0, r0, r8
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800c246:	0900      	lsrs	r0, r0, #4
 800c248:	e7e4      	b.n	800c214 <lv_font_get_glyph_dsc_fmt_txt+0xb8>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	5d93      	ldrb	r3, [r2, r6]
        if(left_class > 0 && right_class > 0) {
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d09b      	beq.n	800c18a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800c252:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800c254:	2900      	cmp	r1, #0
 800c256:	d098      	beq.n	800c18a <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	7b78      	ldrb	r0, [r7, #13]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	440a      	add	r2, r1
 800c260:	fb00 2303 	mla	r3, r0, r3, r2
 800c264:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800c268:	e790      	b.n	800c18c <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800c26a:	bf00      	nop
 800c26c:	0800c055 	.word	0x0800c055
 800c270:	0800c067 	.word	0x0800c067

0800c274 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800c274:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c276:	2228      	movs	r2, #40	; 0x28
{
 800c278:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c27a:	2100      	movs	r1, #0
 800c27c:	f004 fab9 	bl	80107f2 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800c280:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c284:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800c286:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    driver->flush_cb         = NULL;
 800c28a:	2200      	movs	r2, #0
    driver->ver_res          = LV_VER_RES_MAX;
 800c28c:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800c28e:	23ff      	movs	r3, #255	; 0xff
 800c290:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800c294:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 800c298:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800c29c:	2301      	movs	r3, #1
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800c29e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
    driver->antialiasing = true;
 800c2a2:	7223      	strb	r3, [r4, #8]
 800c2a4:	bd10      	pop	{r4, pc}

0800c2a6 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800c2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4617      	mov	r7, r2
 800c2ae:	461e      	mov	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800c2b0:	221c      	movs	r2, #28
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	f004 fa9d 	bl	80107f2 <memset>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 800c2b8:	e884 00a0 	stmia.w	r4, {r5, r7}
    disp_buf->buf_act = disp_buf->buf1;
 800c2bc:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800c2be:	60e6      	str	r6, [r4, #12]
 800c2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2c4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	4605      	mov	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800c2c8:	482a      	ldr	r0, [pc, #168]	; (800c374 <lv_disp_drv_register+0xb0>)
 800c2ca:	f000 fc34 	bl	800cb36 <lv_ll_ins_head>
    if(!disp) {
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	b900      	cbnz	r0, 800c2d4 <lv_disp_drv_register+0x10>
 800c2d2:	e7fe      	b.n	800c2d2 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	4623      	mov	r3, r4
 800c2d8:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800c2dc:	f850 1b04 	ldr.w	r1, [r0], #4
 800c2e0:	f843 1b04 	str.w	r1, [r3], #4
 800c2e4:	4290      	cmp	r0, r2
 800c2e6:	d1f9      	bne.n	800c2dc <lv_disp_drv_register+0x18>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800c2f0:	f004 fa7f 	bl	80107f2 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));

    if(disp_def == NULL) disp_def = disp;
 800c2f4:	4d20      	ldr	r5, [pc, #128]	; (800c378 <lv_disp_drv_register+0xb4>)
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800c2f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800c300:	f004 fa77 	bl	80107f2 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800c304:	2144      	movs	r1, #68	; 0x44
 800c306:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c30a:	f000 fc0a 	bl	800cb22 <lv_ll_init>
    if(disp_def == NULL) disp_def = disp;
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b903      	cbnz	r3, 800c314 <lv_disp_drv_register+0x50>
 800c312:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800c314:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    lv_disp_t * disp_def_tmp = disp_def;
 800c318:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800c31a:	602c      	str	r4, [r5, #0]
    disp->inv_p = 0;
 800c31c:	f36f 0309 	bfc	r3, #0, #10

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c320:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800c322:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c326:	4608      	mov	r0, r1
 800c328:	f7fb f920 	bl	800756c <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c32c:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c32e:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c330:	4608      	mov	r0, r1
 800c332:	f7fb f91b 	bl	800756c <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c336:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c338:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c33a:	4608      	mov	r0, r1
 800c33c:	f7fb f916 	bl	800756c <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c340:	490e      	ldr	r1, [pc, #56]	; (800c37c <lv_disp_drv_register+0xb8>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c342:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c344:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c346:	f7fb faf0 	bl	800792a <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800c34a:	490c      	ldr	r1, [pc, #48]	; (800c37c <lv_disp_drv_register+0xb8>)
 800c34c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c34e:	f7fb faec 	bl	800792a <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800c352:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c354:	f7fa fe26 	bl	8006fa4 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c358:	4623      	mov	r3, r4
 800c35a:	2203      	movs	r2, #3
 800c35c:	211e      	movs	r1, #30
 800c35e:	4808      	ldr	r0, [pc, #32]	; (800c380 <lv_disp_drv_register+0xbc>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800c360:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c362:	f000 ff31 	bl	800d1c8 <lv_task_create>
 800c366:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800c368:	b900      	cbnz	r0, 800c36c <lv_disp_drv_register+0xa8>
 800c36a:	e7fe      	b.n	800c36a <lv_disp_drv_register+0xa6>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800c36c:	f000 ff41 	bl	800d1f2 <lv_task_ready>

    return disp;
}
 800c370:	4620      	mov	r0, r4
 800c372:	bd70      	pop	{r4, r5, r6, pc}
 800c374:	20015e6c 	.word	0x20015e6c
 800c378:	2001112c 	.word	0x2001112c
 800c37c:	20015a90 	.word	0x20015a90
 800c380:	08007e79 	.word	0x08007e79

0800c384 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800c384:	4b01      	ldr	r3, [pc, #4]	; (800c38c <lv_disp_get_default+0x8>)
 800c386:	6818      	ldr	r0, [r3, #0]
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	2001112c 	.word	0x2001112c

0800c390 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800c390:	b910      	cbnz	r0, 800c398 <lv_disp_get_hor_res+0x8>
    return disp_def;
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <lv_disp_get_hor_res+0x20>)
 800c394:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800c396:	b138      	cbz	r0, 800c3a8 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800c398:	7a03      	ldrb	r3, [r0, #8]
 800c39a:	079b      	lsls	r3, r3, #30
 800c39c:	bf54      	ite	pl
 800c39e:	f9b0 0000 	ldrshpl.w	r0, [r0]
 800c3a2:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 800c3a6:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 800c3a8:	f44f 7048 	mov.w	r0, #800	; 0x320
}
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	2001112c 	.word	0x2001112c

0800c3b4 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800c3b4:	b910      	cbnz	r0, 800c3bc <lv_disp_get_ver_res+0x8>
    return disp_def;
 800c3b6:	4b07      	ldr	r3, [pc, #28]	; (800c3d4 <lv_disp_get_ver_res+0x20>)
 800c3b8:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800c3ba:	b138      	cbz	r0, 800c3cc <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800c3bc:	7a03      	ldrb	r3, [r0, #8]
 800c3be:	079b      	lsls	r3, r3, #30
 800c3c0:	bf54      	ite	pl
 800c3c2:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 800c3c6:	f9b0 0000 	ldrshmi.w	r0, [r0]
 800c3ca:	4770      	bx	lr
        return LV_VER_RES_MAX;
 800c3cc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	2001112c 	.word	0x2001112c

0800c3d8 <lv_disp_get_antialiasing>:
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800c3d8:	b910      	cbnz	r0, 800c3e0 <lv_disp_get_antialiasing+0x8>
    return disp_def;
 800c3da:	4b03      	ldr	r3, [pc, #12]	; (800c3e8 <lv_disp_get_antialiasing+0x10>)
 800c3dc:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return false;
 800c3de:	b110      	cbz	r0, 800c3e6 <lv_disp_get_antialiasing+0xe>

    return disp->driver.antialiasing ? true : false;
 800c3e0:	7a00      	ldrb	r0, [r0, #8]
 800c3e2:	f000 0001 	and.w	r0, r0, #1
#endif
}
 800c3e6:	4770      	bx	lr
 800c3e8:	2001112c 	.word	0x2001112c

0800c3ec <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800c3ec:	6842      	ldr	r2, [r0, #4]
 800c3ee:	7e13      	ldrb	r3, [r2, #24]
 800c3f0:	f36f 0300 	bfc	r3, #0, #1
 800c3f4:	7613      	strb	r3, [r2, #24]
 800c3f6:	4770      	bx	lr

0800c3f8 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800c3f8:	6840      	ldr	r0, [r0, #4]
 800c3fa:	4770      	bx	lr

0800c3fc <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
 800c3fc:	f8b0 0164 	ldrh.w	r0, [r0, #356]	; 0x164
}
 800c400:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c404:	4770      	bx	lr

0800c406 <lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
 800c406:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 800c40a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c40e:	428a      	cmp	r2, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
 800c410:	bfaa      	itet	ge
 800c412:	1a52      	subge	r2, r2, r1
        disp->inv_p = 0;
 800c414:	f36f 0309 	bfclt	r3, #0, #10
        disp->inv_p -= num;
 800c418:	f362 0309 	bfige	r3, r2, #0, #10
 800c41c:	f8a0 3164 	strh.w	r3, [r0, #356]	; 0x164
 800c420:	4770      	bx	lr

0800c422 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800c422:	6843      	ldr	r3, [r0, #4]
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	b118      	cbz	r0, 800c430 <lv_disp_is_double_buf+0xe>
 800c428:	6858      	ldr	r0, [r3, #4]
 800c42a:	3000      	adds	r0, #0
 800c42c:	bf18      	it	ne
 800c42e:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800c430:	4770      	bx	lr

0800c432 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800c432:	b508      	push	{r3, lr}
 800c434:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c436:	f7ff fff4 	bl	800c422 <lv_disp_is_double_buf>
 800c43a:	b140      	cbz	r0, 800c44e <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800c43c:	8853      	ldrh	r3, [r2, #2]
 800c43e:	8810      	ldrh	r0, [r2, #0]
 800c440:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c444:	6853      	ldr	r3, [r2, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	1ac3      	subs	r3, r0, r3
 800c44a:	4258      	negs	r0, r3
 800c44c:	4158      	adcs	r0, r3
        return true;
    } else {
        return false;
    }
}
 800c44e:	bd08      	pop	{r3, pc}

0800c450 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 800c450:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_indev_drv_t));
 800c452:	221c      	movs	r2, #28
{
 800c454:	4604      	mov	r4, r0
    memset(driver, 0, sizeof(lv_indev_drv_t));
 800c456:	2100      	movs	r1, #0
 800c458:	f004 f9cb 	bl	80107f2 <memset>

    driver->type                = LV_INDEV_TYPE_NONE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	7023      	strb	r3, [r4, #0]
    driver->drag_limit          = LV_INDEV_DEF_DRAG_LIMIT;
 800c460:	230a      	movs	r3, #10
 800c462:	7523      	strb	r3, [r4, #20]
    driver->drag_throw          = LV_INDEV_DEF_DRAG_THROW;
 800c464:	2314      	movs	r3, #20
 800c466:	7563      	strb	r3, [r4, #21]
    driver->long_press_time     = LV_INDEV_DEF_LONG_PRESS_TIME;
 800c468:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c46c:	82e3      	strh	r3, [r4, #22]
    driver->long_press_rep_time = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 800c46e:	2364      	movs	r3, #100	; 0x64
 800c470:	8323      	strh	r3, [r4, #24]
 800c472:	bd10      	pop	{r4, pc}

0800c474 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800c474:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800c476:	68c3      	ldr	r3, [r0, #12]
{
 800c478:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800c47a:	b913      	cbnz	r3, 800c482 <lv_indev_drv_register+0xe>
 800c47c:	f7ff ff82 	bl	800c384 <lv_disp_get_default>
 800c480:	60e8      	str	r0, [r5, #12]

    if(driver->disp == NULL) {
 800c482:	68ec      	ldr	r4, [r5, #12]
 800c484:	b31c      	cbz	r4, 800c4ce <lv_indev_drv_register+0x5a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attache the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 800c486:	4813      	ldr	r0, [pc, #76]	; (800c4d4 <lv_indev_drv_register+0x60>)
 800c488:	f000 fb55 	bl	800cb36 <lv_ll_ins_head>
    if(!indev) {
 800c48c:	4604      	mov	r4, r0
 800c48e:	b900      	cbnz	r0, 800c492 <lv_indev_drv_register+0x1e>
 800c490:	e7fe      	b.n	800c490 <lv_indev_drv_register+0x1c>
        lv_mem_assert(indev);
        return NULL;
    }

    memset(indev, 0, sizeof(lv_indev_t));
 800c492:	225c      	movs	r2, #92	; 0x5c
 800c494:	2100      	movs	r1, #0
 800c496:	f004 f9ac 	bl	80107f2 <memset>
    memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 800c49a:	4623      	mov	r3, r4
 800c49c:	f105 021c 	add.w	r2, r5, #28
 800c4a0:	f855 1b04 	ldr.w	r1, [r5], #4
 800c4a4:	f843 1b04 	str.w	r1, [r3], #4
 800c4a8:	4295      	cmp	r5, r2
 800c4aa:	d1f9      	bne.n	800c4a0 <lv_indev_drv_register+0x2c>

    indev->proc.reset_query = 1;
 800c4ac:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    indev->cursor           = NULL;
    indev->group            = NULL;
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
 800c4b0:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <lv_indev_drv_register+0x64>)
    indev->proc.reset_query = 1;
 800c4b2:	f043 0302 	orr.w	r3, r3, #2
 800c4b6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    indev->cursor           = NULL;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6523      	str	r3, [r4, #80]	; 0x50
    indev->group            = NULL;
 800c4be:	6563      	str	r3, [r4, #84]	; 0x54
    indev->btn_points       = NULL;
 800c4c0:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	4623      	mov	r3, r4
 800c4c6:	211e      	movs	r1, #30
 800c4c8:	f000 fe7e 	bl	800d1c8 <lv_task_create>
 800c4cc:	6120      	str	r0, [r4, #16]

    return indev;
}
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	bd38      	pop	{r3, r4, r5, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20015e5c 	.word	0x20015e5c
 800c4d8:	080067e1 	.word	0x080067e1

0800c4dc <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800c4dc:	4601      	mov	r1, r0
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800c4de:	4803      	ldr	r0, [pc, #12]	; (800c4ec <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800c4e0:	b909      	cbnz	r1, 800c4e6 <lv_indev_get_next+0xa>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800c4e2:	f000 bb64 	b.w	800cbae <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800c4e6:	f000 bb68 	b.w	800cbba <lv_ll_get_next>
 800c4ea:	bf00      	nop
 800c4ec:	20015e5c 	.word	0x20015e5c

0800c4f0 <lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
    bool cont = false;

    memset(data, 0, sizeof(lv_indev_data_t));
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f004 f979 	bl	80107f2 <memset>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 800c500:	7823      	ldrb	r3, [r4, #0]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d10a      	bne.n	800c51c <lv_indev_read+0x2c>
        data->point.x = indev->proc.types.pointer.act_point.x;
 800c506:	8c23      	ldrh	r3, [r4, #32]
 800c508:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 800c50a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800c50c:	806b      	strh	r3, [r5, #2]
    /*Similarly set at least the last key in case of the  the user doesn't set it  on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
        data->key = indev->proc.types.keypad.last_key;
    }

    if(indev->driver.read_cb) {
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	b14b      	cbz	r3, 800c526 <lv_indev_read+0x36>
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 800c512:	4629      	mov	r1, r5
 800c514:	4620      	mov	r0, r4
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 800c516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
 800c51a:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 800c51c:	2b02      	cmp	r3, #2
        data->key = indev->proc.types.keypad.last_key;
 800c51e:	bf04      	itt	eq
 800c520:	6a63      	ldreq	r3, [r4, #36]	; 0x24
 800c522:	606b      	streq	r3, [r5, #4]
 800c524:	e7f3      	b.n	800c50e <lv_indev_read+0x1e>
}
 800c526:	4618      	mov	r0, r3
 800c528:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c52c <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800c52c:	4b03      	ldr	r3, [pc, #12]	; (800c53c <lv_tick_inc+0x10>)
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800c532:	4a03      	ldr	r2, [pc, #12]	; (800c540 <lv_tick_inc+0x14>)
 800c534:	6813      	ldr	r3, [r2, #0]
 800c536:	4418      	add	r0, r3
 800c538:	6010      	str	r0, [r2, #0]
 800c53a:	4770      	bx	lr
 800c53c:	20011134 	.word	0x20011134
 800c540:	20011130 	.word	0x20011130

0800c544 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <lv_tick_get+0x14>)
 800c546:	f04f 0101 	mov.w	r1, #1
 800c54a:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	2a00      	cmp	r2, #0
 800c550:	d0fb      	beq.n	800c54a <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800c552:	4b02      	ldr	r3, [pc, #8]	; (800c55c <lv_tick_get+0x18>)
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	4770      	bx	lr
 800c558:	20011134 	.word	0x20011134
 800c55c:	20011130 	.word	0x20011130

0800c560 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800c560:	b510      	push	{r4, lr}
 800c562:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800c564:	f7ff ffee 	bl	800c544 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800c568:	1b00      	subs	r0, r0, r4
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800c56c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800c570:	8b02      	ldrh	r2, [r0, #24]
 800c572:	429a      	cmp	r2, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800c574:	bf1c      	itt	ne
 800c576:	029b      	lslne	r3, r3, #10
 800c578:	fb93 f3f2 	sdivne	r3, r3, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800c57c:	6902      	ldr	r2, [r0, #16]
 800c57e:	6940      	ldr	r0, [r0, #20]
 800c580:	bf08      	it	eq
 800c582:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c586:	1a80      	subs	r0, r0, r2
 800c588:	4343      	muls	r3, r0
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 800c58a:	eb02 23a3 	add.w	r3, r2, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 800c58e:	b218      	sxth	r0, r3
 800c590:	4770      	bx	lr
	...

0800c594 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c598:	4846      	ldr	r0, [pc, #280]	; (800c6b4 <anim_task+0x120>)
 800c59a:	4c46      	ldr	r4, [pc, #280]	; (800c6b4 <anim_task+0x120>)
{
 800c59c:	b08a      	sub	sp, #40	; 0x28
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c59e:	f000 fb06 	bl	800cbae <lv_ll_get_head>
 800c5a2:	b988      	cbnz	r0, 800c5c8 <anim_task+0x34>
    {
        a->has_run = 0;
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c5a4:	4d44      	ldr	r5, [pc, #272]	; (800c6b8 <anim_task+0x124>)
    while(a != NULL) {
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800c5a6:	4e45      	ldr	r6, [pc, #276]	; (800c6bc <anim_task+0x128>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c5a8:	6828      	ldr	r0, [r5, #0]
        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c5aa:	4f42      	ldr	r7, [pc, #264]	; (800c6b4 <anim_task+0x120>)
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c5ac:	f7ff ffd8 	bl	800c560 <lv_tick_elaps>
 800c5b0:	4680      	mov	r8, r0
    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c5b2:	4840      	ldr	r0, [pc, #256]	; (800c6b4 <anim_task+0x120>)
 800c5b4:	f000 fafb 	bl	800cbae <lv_ll_get_head>
 800c5b8:	4604      	mov	r4, r0
    while(a != NULL) {
 800c5ba:	b984      	cbnz	r4, 800c5de <anim_task+0x4a>
    }

    last_task_run = lv_tick_get();
 800c5bc:	f7ff ffc2 	bl	800c544 <lv_tick_get>
 800c5c0:	6028      	str	r0, [r5, #0]
}
 800c5c2:	b00a      	add	sp, #40	; 0x28
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 800c5c8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c5cc:	f36f 03c3 	bfc	r3, #3, #1
 800c5d0:	f880 3020 	strb.w	r3, [r0, #32]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 faef 	bl	800cbba <lv_ll_get_next>
 800c5dc:	e7e1      	b.n	800c5a2 <anim_task+0xe>
        anim_list_changed = false;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	7033      	strb	r3, [r6, #0]
        if(!a->has_run) {
 800c5e2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c5e6:	0718      	lsls	r0, r3, #28
 800c5e8:	d45f      	bmi.n	800c6aa <anim_task+0x116>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800c5ea:	f043 0308 	orr.w	r3, r3, #8
 800c5ee:	f884 3020 	strb.w	r3, [r4, #32]
            a->act_time += elaps;
 800c5f2:	8b63      	ldrh	r3, [r4, #26]
 800c5f4:	4443      	add	r3, r8
 800c5f6:	b21b      	sxth	r3, r3
            if(a->act_time >= 0) {
 800c5f8:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800c5fa:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800c5fc:	db55      	blt.n	800c6aa <anim_task+0x116>
                if(a->act_time > a->time) a->act_time = a->time;
 800c5fe:	8b22      	ldrh	r2, [r4, #24]
 800c600:	4293      	cmp	r3, r2
 800c602:	bfc8      	it	gt
 800c604:	8362      	strhgt	r2, [r4, #26]
                new_value = a->path_cb(a);
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	4620      	mov	r0, r4
 800c60a:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c60c:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800c60e:	4601      	mov	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c610:	b10b      	cbz	r3, 800c616 <anim_task+0x82>
 800c612:	6820      	ldr	r0, [r4, #0]
 800c614:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800c616:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800c61a:	8b23      	ldrh	r3, [r4, #24]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	db24      	blt.n	800c66a <anim_task+0xd6>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800c620:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c624:	0799      	lsls	r1, r3, #30
 800c626:	d003      	beq.n	800c630 <anim_task+0x9c>
 800c628:	f003 0207 	and.w	r2, r3, #7
 800c62c:	2a05      	cmp	r2, #5
 800c62e:	d123      	bne.n	800c678 <anim_task+0xe4>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800c630:	4623      	mov	r3, r4
 800c632:	aa01      	add	r2, sp, #4
 800c634:	f104 0c20 	add.w	ip, r4, #32
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	6859      	ldr	r1, [r3, #4]
 800c63c:	4696      	mov	lr, r2
 800c63e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c642:	3308      	adds	r3, #8
 800c644:	4563      	cmp	r3, ip
 800c646:	4672      	mov	r2, lr
 800c648:	d1f6      	bne.n	800c638 <anim_task+0xa4>
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	f8ce 0000 	str.w	r0, [lr]
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800c650:	4621      	mov	r1, r4
 800c652:	4638      	mov	r0, r7
 800c654:	f000 faea 	bl	800cc2c <lv_ll_rem>
        lv_mem_free(a);
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 fc25 	bl	800cea8 <lv_mem_free>
        anim_list_changed = true;
 800c65e:	2301      	movs	r3, #1
 800c660:	7033      	strb	r3, [r6, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800c662:	9b04      	ldr	r3, [sp, #16]
 800c664:	b10b      	cbz	r3, 800c66a <anim_task+0xd6>
 800c666:	a801      	add	r0, sp, #4
 800c668:	4798      	blx	r3
        if(anim_list_changed)
 800c66a:	7833      	ldrb	r3, [r6, #0]
 800c66c:	b1eb      	cbz	r3, 800c6aa <anim_task+0x116>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c66e:	4638      	mov	r0, r7
 800c670:	f000 fa9d 	bl	800cbae <lv_ll_get_head>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c674:	4604      	mov	r4, r0
 800c676:	e7a0      	b.n	800c5ba <anim_task+0x26>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800c678:	8be2      	ldrh	r2, [r4, #30]
 800c67a:	4252      	negs	r2, r2
 800c67c:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800c67e:	07da      	lsls	r2, r3, #31
 800c680:	d5f3      	bpl.n	800c66a <anim_task+0xd6>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800c682:	f013 0304 	ands.w	r3, r3, #4
 800c686:	bf02      	ittt	eq
 800c688:	8ba2      	ldrheq	r2, [r4, #28]
 800c68a:	4252      	negeq	r2, r2
 800c68c:	8362      	strheq	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800c68e:	fab3 f383 	clz	r3, r3
 800c692:	f894 2020 	ldrb.w	r2, [r4, #32]
 800c696:	095b      	lsrs	r3, r3, #5
 800c698:	f363 0282 	bfi	r2, r3, #2, #1
 800c69c:	f884 2020 	strb.w	r2, [r4, #32]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800c6a0:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800c6a2:	6962      	ldr	r2, [r4, #20]
 800c6a4:	6122      	str	r2, [r4, #16]
            a->end   = tmp;
 800c6a6:	6163      	str	r3, [r4, #20]
 800c6a8:	e7df      	b.n	800c66a <anim_task+0xd6>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f000 fa84 	bl	800cbba <lv_ll_get_next>
 800c6b2:	e7df      	b.n	800c674 <anim_task+0xe0>
 800c6b4:	20015e98 	.word	0x20015e98
 800c6b8:	20011138 	.word	0x20011138
 800c6bc:	20011135 	.word	0x20011135

0800c6c0 <lv_anim_core_init>:
{
 800c6c0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800c6c2:	2124      	movs	r1, #36	; 0x24
 800c6c4:	4807      	ldr	r0, [pc, #28]	; (800c6e4 <lv_anim_core_init+0x24>)
 800c6c6:	f000 fa2c 	bl	800cb22 <lv_ll_init>
    last_task_run = lv_tick_get();
 800c6ca:	f7ff ff3b 	bl	800c544 <lv_tick_get>
 800c6ce:	4b06      	ldr	r3, [pc, #24]	; (800c6e8 <lv_anim_core_init+0x28>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c6d0:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800c6d2:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c6d4:	211e      	movs	r1, #30
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	4804      	ldr	r0, [pc, #16]	; (800c6ec <lv_anim_core_init+0x2c>)
}
 800c6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c6de:	f000 bd73 	b.w	800d1c8 <lv_task_create>
 800c6e2:	bf00      	nop
 800c6e4:	20015e98 	.word	0x20015e98
 800c6e8:	20011138 	.word	0x20011138
 800c6ec:	0800c595 	.word	0x0800c595

0800c6f0 <lv_anim_del>:
{
 800c6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	4680      	mov	r8, r0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c6f6:	4813      	ldr	r0, [pc, #76]	; (800c744 <lv_anim_del+0x54>)
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c6f8:	4f12      	ldr	r7, [pc, #72]	; (800c744 <lv_anim_del+0x54>)
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800c6fa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800c748 <lv_anim_del+0x58>
{
 800c6fe:	460e      	mov	r6, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c700:	f000 fa55 	bl	800cbae <lv_ll_get_head>
    bool del = false;
 800c704:	2500      	movs	r5, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c706:	4604      	mov	r4, r0
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800c708:	f04f 0a01 	mov.w	sl, #1
    while(a != NULL) {
 800c70c:	b914      	cbnz	r4, 800c714 <lv_anim_del+0x24>
}
 800c70e:	4628      	mov	r0, r5
 800c710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c714:	4621      	mov	r1, r4
 800c716:	4638      	mov	r0, r7
 800c718:	f000 fa4f 	bl	800cbba <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	4543      	cmp	r3, r8
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c720:	4683      	mov	fp, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800c722:	d10d      	bne.n	800c740 <lv_anim_del+0x50>
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	42b3      	cmp	r3, r6
 800c728:	d000      	beq.n	800c72c <lv_anim_del+0x3c>
 800c72a:	b94e      	cbnz	r6, 800c740 <lv_anim_del+0x50>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800c72c:	4621      	mov	r1, r4
 800c72e:	4638      	mov	r0, r7
 800c730:	f000 fa7c 	bl	800cc2c <lv_ll_rem>
            lv_mem_free(a);
 800c734:	4620      	mov	r0, r4
 800c736:	f000 fbb7 	bl	800cea8 <lv_mem_free>
            del = true;
 800c73a:	2501      	movs	r5, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800c73c:	f889 a000 	strb.w	sl, [r9]
            del = true;
 800c740:	465c      	mov	r4, fp
 800c742:	e7e3      	b.n	800c70c <lv_anim_del+0x1c>
 800c744:	20015e98 	.word	0x20015e98
 800c748:	20011135 	.word	0x20011135

0800c74c <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800c74c:	6841      	ldr	r1, [r0, #4]
{
 800c74e:	b510      	push	{r4, lr}
 800c750:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800c752:	b111      	cbz	r1, 800c75a <lv_anim_create+0xe>
 800c754:	6800      	ldr	r0, [r0, #0]
 800c756:	f7ff ffcb 	bl	800c6f0 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800c75a:	480f      	ldr	r0, [pc, #60]	; (800c798 <lv_anim_create+0x4c>)
 800c75c:	f000 f9eb 	bl	800cb36 <lv_ll_ins_head>
    lv_mem_assert(new_anim);
 800c760:	b900      	cbnz	r0, 800c764 <lv_anim_create+0x18>
 800c762:	e7fe      	b.n	800c762 <lv_anim_create+0x16>
    a->playback_now = 0;
 800c764:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c768:	f36f 0382 	bfc	r3, #2, #1
 800c76c:	f884 3020 	strb.w	r3, [r4, #32]
    memcpy(new_anim, a, sizeof(lv_anim_t));
 800c770:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800c774:	4603      	mov	r3, r0
 800c776:	f854 1b04 	ldr.w	r1, [r4], #4
 800c77a:	f843 1b04 	str.w	r1, [r3], #4
 800c77e:	4294      	cmp	r4, r2
 800c780:	d1f9      	bne.n	800c776 <lv_anim_create+0x2a>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 800c782:	6843      	ldr	r3, [r0, #4]
 800c784:	b11b      	cbz	r3, 800c78e <lv_anim_create+0x42>
 800c786:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	4798      	blx	r3
    anim_list_changed = true;
 800c78e:	4b03      	ldr	r3, [pc, #12]	; (800c79c <lv_anim_create+0x50>)
 800c790:	2201      	movs	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	bd10      	pop	{r4, pc}
 800c796:	bf00      	nop
 800c798:	20015e98 	.word	0x20015e98
 800c79c:	20011135 	.word	0x20011135

0800c7a0 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800c7a0:	1a89      	subs	r1, r1, r2
 800c7a2:	2900      	cmp	r1, #0
 800c7a4:	bfb8      	it	lt
 800c7a6:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800c7a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c7ac:	434a      	muls	r2, r1
 800c7ae:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 800c7b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800c7b6:	da04      	bge.n	800c7c2 <lv_anim_speed_to_time+0x22>
        time++;
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	bf08      	it	eq
 800c7bc:	2001      	moveq	r0, #1
}
 800c7be:	b280      	uxth	r0, r0
 800c7c0:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 800c7c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c7c6:	e7fa      	b.n	800c7be <lv_anim_speed_to_time+0x1e>

0800c7c8 <lv_area_set>:
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
    area_p->x1 = x1;
    area_p->y1 = y1;
    area_p->x2 = x2;
 800c7c8:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800c7ca:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800c7ce:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800c7d0:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800c7d2:	80c3      	strh	r3, [r0, #6]
 800c7d4:	4770      	bx	lr

0800c7d6 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 800c7d6:	8843      	ldrh	r3, [r0, #2]
 800c7d8:	3901      	subs	r1, #1
 800c7da:	4419      	add	r1, r3
 800c7dc:	80c1      	strh	r1, [r0, #6]
 800c7de:	4770      	bx	lr

0800c7e0 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800c7e0:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c7e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c7e8:	1ad2      	subs	r2, r2, r3
 800c7ea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c7ee:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800c7f2:	1a18      	subs	r0, r3, r0
 800c7f4:	3001      	adds	r0, #1

    return size;
}
 800c7f6:	fb02 0000 	mla	r0, r2, r0, r0
 800c7fa:	4770      	bx	lr

0800c7fc <lv_area_intersect>:
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c7fc:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800c800:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c802:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c806:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c80a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c80e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c812:	429d      	cmp	r5, r3
 800c814:	bfb8      	it	lt
 800c816:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c818:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c81c:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c81e:	42a3      	cmp	r3, r4
 800c820:	bfb8      	it	lt
 800c822:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c824:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c828:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c82c:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c82e:	42b4      	cmp	r4, r6
 800c830:	bfa8      	it	ge
 800c832:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c834:	428a      	cmp	r2, r1
 800c836:	bfa8      	it	ge
 800c838:	460a      	movge	r2, r1

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c83a:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c83c:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c83e:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c840:	dc04      	bgt.n	800c84c <lv_area_intersect+0x50>
 800c842:	4293      	cmp	r3, r2
 800c844:	bfcc      	ite	gt
 800c846:	2000      	movgt	r0, #0
 800c848:	2001      	movle	r0, #1
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800c84c:	2000      	movs	r0, #0
    }

    return union_ok;
}
 800c84e:	bd70      	pop	{r4, r5, r6, pc}

0800c850 <lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c850:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800c854:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c856:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	bfa8      	it	ge
 800c85e:	4623      	movge	r3, r4
 800c860:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800c862:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800c866:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	bfa8      	it	ge
 800c86e:	4623      	movge	r3, r4
 800c870:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800c872:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800c876:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	bfb8      	it	lt
 800c87e:	4623      	movlt	r3, r4
 800c880:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800c882:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800c886:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800c88a:	4293      	cmp	r3, r2
 800c88c:	bfb8      	it	lt
 800c88e:	4613      	movlt	r3, r2
 800c890:	80c3      	strh	r3, [r0, #6]
 800c892:	bd10      	pop	{r4, pc}

0800c894 <lv_area_is_point_on>:
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
    bool is_on = false;

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800c894:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c898:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	dc10      	bgt.n	800c8c2 <lv_area_is_point_on+0x2e>
 800c8a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	db0c      	blt.n	800c8c2 <lv_area_is_point_on+0x2e>
 800c8a8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c8ac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	dc06      	bgt.n	800c8c2 <lv_area_is_point_on+0x2e>
 800c8b4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c8b8:	4298      	cmp	r0, r3
 800c8ba:	bfb4      	ite	lt
 800c8bc:	2000      	movlt	r0, #0
 800c8be:	2001      	movge	r0, #1
 800c8c0:	4770      	bx	lr
    bool is_on = false;
 800c8c2:	2000      	movs	r0, #0
        is_on = true;
    }

    return is_on;
}
 800c8c4:	4770      	bx	lr

0800c8c6 <lv_area_is_on>:
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c8c6:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c8ca:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	dc14      	bgt.n	800c8fc <lv_area_is_on+0x36>
 800c8d2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c8d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	db0e      	blt.n	800c8fc <lv_area_is_on+0x36>
 800c8de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c8e2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	dc08      	bgt.n	800c8fc <lv_area_is_on+0x36>
 800c8ea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c8ee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c8f2:	4298      	cmp	r0, r3
 800c8f4:	bfb4      	ite	lt
 800c8f6:	2000      	movlt	r0, #0
 800c8f8:	2001      	movge	r0, #1
 800c8fa:	4770      	bx	lr
        return true;
    } else {
        return false;
 800c8fc:	2000      	movs	r0, #0
    }
}
 800c8fe:	4770      	bx	lr

0800c900 <lv_area_is_in>:
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c900:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c904:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c908:	429a      	cmp	r2, r3
 800c90a:	db14      	blt.n	800c936 <lv_area_is_in+0x36>
 800c90c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c910:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c914:	429a      	cmp	r2, r3
 800c916:	db0e      	blt.n	800c936 <lv_area_is_in+0x36>
 800c918:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c91c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	dc08      	bgt.n	800c936 <lv_area_is_in+0x36>
 800c924:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c928:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c92c:	4298      	cmp	r0, r3
 800c92e:	bfcc      	ite	gt
 800c930:	2000      	movgt	r0, #0
 800c932:	2001      	movle	r0, #1
 800c934:	4770      	bx	lr
    bool is_in = false;
 800c936:	2000      	movs	r0, #0
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800c938:	4770      	bx	lr

0800c93a <lv_circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 800c93a:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 800c93c:	2300      	movs	r3, #0
    *tmp = 1 - radius;
 800c93e:	f1c2 0201 	rsb	r2, r2, #1
    c->y = 0;
 800c942:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800c944:	800a      	strh	r2, [r1, #0]
 800c946:	4770      	bx	lr

0800c948 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800c948:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c94c:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 800c950:	4282      	cmp	r2, r0
 800c952:	bfcc      	ite	gt
 800c954:	2000      	movgt	r0, #0
 800c956:	2001      	movle	r0, #1
 800c958:	4770      	bx	lr

0800c95a <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800c95a:	8842      	ldrh	r2, [r0, #2]
 800c95c:	3201      	adds	r2, #1
{
 800c95e:	b530      	push	{r4, r5, lr}
    c->y++;
 800c960:	b294      	uxth	r4, r2
 800c962:	b225      	sxth	r5, r4
 800c964:	8045      	strh	r5, [r0, #2]

    if(*tmp <= 0) {
 800c966:	f9b1 2000 	ldrsh.w	r2, [r1]
 800c96a:	2a00      	cmp	r2, #0
 800c96c:	dc04      	bgt.n	800c978 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
 800c96e:	3201      	adds	r2, #1
 800c970:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800c974:	800a      	strh	r2, [r1, #0]
 800c976:	bd30      	pop	{r4, r5, pc}
    } else {
        c->x--;
 800c978:	8803      	ldrh	r3, [r0, #0]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b21b      	sxth	r3, r3
 800c97e:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
 800c980:	1aed      	subs	r5, r5, r3
 800c982:	880b      	ldrh	r3, [r1, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800c98a:	800b      	strh	r3, [r1, #0]
 800c98c:	bd30      	pop	{r4, r5, pc}

0800c98e <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800c98e:	1c42      	adds	r2, r0, #1
 800c990:	4610      	mov	r0, r2

    while(*path != '\0') {
 800c992:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c996:	b12b      	cbz	r3, 800c9a4 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800c998:	2b3a      	cmp	r3, #58	; 0x3a
 800c99a:	d0f9      	beq.n	800c990 <lv_fs_get_real_path+0x2>
 800c99c:	2b5c      	cmp	r3, #92	; 0x5c
 800c99e:	d0f7      	beq.n	800c990 <lv_fs_get_real_path+0x2>
 800c9a0:	2b2f      	cmp	r3, #47	; 0x2f
 800c9a2:	d0f5      	beq.n	800c990 <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <lv_fs_init>:
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800c9a8:	2144      	movs	r1, #68	; 0x44
 800c9aa:	4801      	ldr	r0, [pc, #4]	; (800c9b0 <lv_fs_init+0x8>)
 800c9ac:	f000 b8b9 	b.w	800cb22 <lv_ll_init>
 800c9b0:	20015e84 	.word	0x20015e84

0800c9b4 <lv_fs_close>:
{
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800c9b8:	6840      	ldr	r0, [r0, #4]
 800c9ba:	b160      	cbz	r0, 800c9d6 <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800c9bc:	6903      	ldr	r3, [r0, #16]
 800c9be:	b163      	cbz	r3, 800c9da <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800c9c0:	6821      	ldr	r1, [r4, #0]
 800c9c2:	4798      	blx	r3
 800c9c4:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	f000 fa6e 	bl	800cea8 <lv_mem_free>
    file_p->file_d = NULL;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800c9d0:	6063      	str	r3, [r4, #4]
}
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800c9d6:	250b      	movs	r5, #11
 800c9d8:	e7fb      	b.n	800c9d2 <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800c9da:	2509      	movs	r5, #9
 800c9dc:	e7f9      	b.n	800c9d2 <lv_fs_close+0x1e>

0800c9de <lv_fs_read>:
{
 800c9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e0:	4606      	mov	r6, r0
 800c9e2:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 800c9e4:	461c      	mov	r4, r3
 800c9e6:	b10b      	cbz	r3, 800c9ec <lv_fs_read+0xe>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800c9ec:	6870      	ldr	r0, [r6, #4]
 800c9ee:	b178      	cbz	r0, 800ca10 <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800c9f0:	6985      	ldr	r5, [r0, #24]
 800c9f2:	b17d      	cbz	r5, 800ca14 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800c9f4:	ab04      	add	r3, sp, #16
 800c9f6:	2700      	movs	r7, #0
 800c9f8:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	460a      	mov	r2, r1
 800ca02:	6831      	ldr	r1, [r6, #0]
 800ca04:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800ca06:	b10c      	cbz	r4, 800ca0c <lv_fs_read+0x2e>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	6023      	str	r3, [r4, #0]
}
 800ca0c:	b005      	add	sp, #20
 800ca0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800ca10:	200b      	movs	r0, #11
 800ca12:	e7fb      	b.n	800ca0c <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800ca14:	2009      	movs	r0, #9
 800ca16:	e7f9      	b.n	800ca0c <lv_fs_read+0x2e>

0800ca18 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800ca18:	6843      	ldr	r3, [r0, #4]
{
 800ca1a:	b410      	push	{r4}
 800ca1c:	460a      	mov	r2, r1
    if(file_p->drv == NULL) {
 800ca1e:	b13b      	cbz	r3, 800ca30 <lv_fs_seek+0x18>
    if(file_p->drv->seek_cb == NULL) {
 800ca20:	6a1c      	ldr	r4, [r3, #32]
 800ca22:	b14c      	cbz	r4, 800ca38 <lv_fs_seek+0x20>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ca24:	6801      	ldr	r1, [r0, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	4623      	mov	r3, r4
}
 800ca2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800ca2e:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800ca30:	200b      	movs	r0, #11
}
 800ca32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca36:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800ca38:	2009      	movs	r0, #9
 800ca3a:	e7fa      	b.n	800ca32 <lv_fs_seek+0x1a>

0800ca3c <lv_fs_get_drv>:
{
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4604      	mov	r4, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800ca40:	4806      	ldr	r0, [pc, #24]	; (800ca5c <lv_fs_get_drv+0x20>)
 800ca42:	4d06      	ldr	r5, [pc, #24]	; (800ca5c <lv_fs_get_drv+0x20>)
 800ca44:	f000 f8b3 	bl	800cbae <lv_ll_get_head>
 800ca48:	b900      	cbnz	r0, 800ca4c <lv_fs_get_drv+0x10>
}
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800ca4c:	7803      	ldrb	r3, [r0, #0]
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	d0fb      	beq.n	800ca4a <lv_fs_get_drv+0xe>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800ca52:	4601      	mov	r1, r0
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 f8b0 	bl	800cbba <lv_ll_get_next>
 800ca5a:	e7f5      	b.n	800ca48 <lv_fs_get_drv+0xc>
 800ca5c:	20015e84 	.word	0x20015e84

0800ca60 <lv_fs_open>:
    file_p->drv    = NULL;
 800ca60:	2300      	movs	r3, #0
{
 800ca62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	4604      	mov	r4, r0
 800ca68:	4690      	mov	r8, r2
    file_p->drv    = NULL;
 800ca6a:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800ca6c:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800ca6e:	460d      	mov	r5, r1
 800ca70:	b369      	cbz	r1, 800cace <lv_fs_open+0x6e>
    file_p->drv = lv_fs_get_drv(letter);
 800ca72:	7808      	ldrb	r0, [r1, #0]
 800ca74:	f7ff ffe2 	bl	800ca3c <lv_fs_get_drv>
 800ca78:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800ca7a:	b920      	cbnz	r0, 800ca86 <lv_fs_open+0x26>
        file_p->file_d = NULL;
 800ca7c:	6020      	str	r0, [r4, #0]
        return LV_FS_RES_NOT_EX;
 800ca7e:	2503      	movs	r5, #3
}
 800ca80:	4628      	mov	r0, r5
 800ca82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 800ca86:	6883      	ldr	r3, [r0, #8]
 800ca88:	b12b      	cbz	r3, 800ca96 <lv_fs_open+0x36>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800ca8a:	4798      	blx	r3
 800ca8c:	b918      	cbnz	r0, 800ca96 <lv_fs_open+0x36>
            file_p->drv    = NULL;
 800ca8e:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800ca90:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800ca92:	2501      	movs	r5, #1
 800ca94:	e7f4      	b.n	800ca80 <lv_fs_open+0x20>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	8858      	ldrh	r0, [r3, #2]
 800ca9a:	f000 f9cf 	bl	800ce3c <lv_mem_alloc>
 800ca9e:	4601      	mov	r1, r0
 800caa0:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800caa2:	b900      	cbnz	r0, 800caa6 <lv_fs_open+0x46>
 800caa4:	e7fe      	b.n	800caa4 <lv_fs_open+0x44>
    if(file_p->drv->open_cb == NULL) {
 800caa6:	6867      	ldr	r7, [r4, #4]
 800caa8:	68fe      	ldr	r6, [r7, #12]
 800caaa:	b196      	cbz	r6, 800cad2 <lv_fs_open+0x72>
    const char * real_path = lv_fs_get_real_path(path);
 800caac:	4628      	mov	r0, r5
 800caae:	f7ff ff6e 	bl	800c98e <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800cab2:	4643      	mov	r3, r8
 800cab4:	4602      	mov	r2, r0
 800cab6:	4638      	mov	r0, r7
 800cab8:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 800caba:	4605      	mov	r5, r0
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d0df      	beq.n	800ca80 <lv_fs_open+0x20>
        lv_mem_free(file_p->file_d);
 800cac0:	6820      	ldr	r0, [r4, #0]
 800cac2:	f000 f9f1 	bl	800cea8 <lv_mem_free>
        file_p->file_d = NULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800caca:	6063      	str	r3, [r4, #4]
 800cacc:	e7d8      	b.n	800ca80 <lv_fs_open+0x20>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800cace:	250b      	movs	r5, #11
 800cad0:	e7d6      	b.n	800ca80 <lv_fs_open+0x20>
        return LV_FS_RES_NOT_IMP;
 800cad2:	2509      	movs	r5, #9
 800cad4:	e7d4      	b.n	800ca80 <lv_fs_open+0x20>
	...

0800cad8 <lv_fs_get_ext>:
{
 800cad8:	b510      	push	{r4, lr}
 800cada:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800cadc:	f7f3 fb82 	bl	80001e4 <strlen>
 800cae0:	b280      	uxth	r0, r0
 800cae2:	b908      	cbnz	r0, 800cae8 <lv_fs_get_ext+0x10>
            return ""; /*No extension if a '\' or '/' found*/
 800cae4:	4806      	ldr	r0, [pc, #24]	; (800cb00 <lv_fs_get_ext+0x28>)
}
 800cae6:	bd10      	pop	{r4, pc}
        if(fn[i] == '.') {
 800cae8:	5c23      	ldrb	r3, [r4, r0]
 800caea:	2b2e      	cmp	r3, #46	; 0x2e
 800caec:	d102      	bne.n	800caf4 <lv_fs_get_ext+0x1c>
            return &fn[i + 1];
 800caee:	3001      	adds	r0, #1
 800caf0:	4420      	add	r0, r4
 800caf2:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800caf4:	2b2f      	cmp	r3, #47	; 0x2f
 800caf6:	d0f5      	beq.n	800cae4 <lv_fs_get_ext+0xc>
 800caf8:	2b5c      	cmp	r3, #92	; 0x5c
 800cafa:	d0f3      	beq.n	800cae4 <lv_fs_get_ext+0xc>
    for(i = strlen(fn); i > 0; i--) {
 800cafc:	3801      	subs	r0, #1
 800cafe:	e7ef      	b.n	800cae0 <lv_fs_get_ext+0x8>
 800cb00:	080f3597 	.word	0x080f3597

0800cb04 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800cb04:	b131      	cbz	r1, 800cb14 <node_set_next.isra.0+0x10>
 800cb06:	6803      	ldr	r3, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800cb08:	b112      	cbz	r2, 800cb10 <node_set_next.isra.0+0xc>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800cb0a:	4419      	add	r1, r3
 800cb0c:	604a      	str	r2, [r1, #4]
 800cb0e:	4770      	bx	lr
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800cb10:	3304      	adds	r3, #4
 800cb12:	50ca      	str	r2, [r1, r3]
 800cb14:	4770      	bx	lr

0800cb16 <node_set_prev.isra.2>:
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800cb16:	b119      	cbz	r1, 800cb20 <node_set_prev.isra.2+0xa>
 800cb18:	6803      	ldr	r3, [r0, #0]
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800cb1a:	50ca      	str	r2, [r1, r3]
    if(prev)
 800cb1c:	b102      	cbz	r2, 800cb20 <node_set_prev.isra.2+0xa>
 800cb1e:	4770      	bx	lr
 800cb20:	4770      	bx	lr

0800cb22 <lv_ll_init>:
    ll_p->head = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800cb26:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800cb28:	078b      	lsls	r3, r1, #30
        node_size = node_size & (~0x3);
 800cb2a:	bf1c      	itt	ne
 800cb2c:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
 800cb30:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
 800cb32:	6001      	str	r1, [r0, #0]
 800cb34:	4770      	bx	lr

0800cb36 <lv_ll_ins_head>:
{
 800cb36:	b538      	push	{r3, r4, r5, lr}
 800cb38:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	3008      	adds	r0, #8
 800cb3e:	f000 f97d 	bl	800ce3c <lv_mem_alloc>
    if(n_new != NULL) {
 800cb42:	4605      	mov	r5, r0
 800cb44:	b198      	cbz	r0, 800cb6e <lv_ll_ins_head+0x38>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800cb46:	4601      	mov	r1, r0
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff ffe3 	bl	800cb16 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800cb50:	4629      	mov	r1, r5
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	4620      	mov	r0, r4
 800cb56:	f7ff ffd5 	bl	800cb04 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800cb5a:	6861      	ldr	r1, [r4, #4]
 800cb5c:	b119      	cbz	r1, 800cb66 <lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7ff ffd8 	bl	800cb16 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800cb66:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800cb68:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800cb6a:	b903      	cbnz	r3, 800cb6e <lv_ll_ins_head+0x38>
            ll_p->tail = n_new;
 800cb6c:	60a5      	str	r5, [r4, #8]
}
 800cb6e:	4628      	mov	r0, r5
 800cb70:	bd38      	pop	{r3, r4, r5, pc}

0800cb72 <lv_ll_ins_tail>:
{
 800cb72:	b538      	push	{r3, r4, r5, lr}
 800cb74:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800cb76:	6800      	ldr	r0, [r0, #0]
 800cb78:	3008      	adds	r0, #8
 800cb7a:	f000 f95f 	bl	800ce3c <lv_mem_alloc>
    if(n_new == NULL) return NULL;
 800cb7e:	4605      	mov	r5, r0
 800cb80:	b198      	cbz	r0, 800cbaa <lv_ll_ins_tail+0x38>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800cb82:	4601      	mov	r1, r0
 800cb84:	2200      	movs	r2, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff ffbc 	bl	800cb04 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	68a2      	ldr	r2, [r4, #8]
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7ff ffc0 	bl	800cb16 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800cb96:	68a1      	ldr	r1, [r4, #8]
 800cb98:	b119      	cbz	r1, 800cba2 <lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f7ff ffb1 	bl	800cb04 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800cba2:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800cba4:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800cba6:	b903      	cbnz	r3, 800cbaa <lv_ll_ins_tail+0x38>
            ll_p->head = n_new;
 800cba8:	6065      	str	r5, [r4, #4]
}
 800cbaa:	4628      	mov	r0, r5
 800cbac:	bd38      	pop	{r3, r4, r5, pc}

0800cbae <lv_ll_get_head>:
    if(ll_p != NULL) {
 800cbae:	b100      	cbz	r0, 800cbb2 <lv_ll_get_head+0x4>
        head = ll_p->head;
 800cbb0:	6840      	ldr	r0, [r0, #4]
}
 800cbb2:	4770      	bx	lr

0800cbb4 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800cbb4:	b100      	cbz	r0, 800cbb8 <lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800cbb6:	6880      	ldr	r0, [r0, #8]
}
 800cbb8:	4770      	bx	lr

0800cbba <lv_ll_get_next>:
    if(ll_p != NULL) {
 800cbba:	b110      	cbz	r0, 800cbc2 <lv_ll_get_next+0x8>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800cbbc:	6803      	ldr	r3, [r0, #0]
 800cbbe:	4419      	add	r1, r3
 800cbc0:	6848      	ldr	r0, [r1, #4]
}
 800cbc2:	4770      	bx	lr

0800cbc4 <lv_ll_get_prev>:
    if(ll_p != NULL) {
 800cbc4:	b108      	cbz	r0, 800cbca <lv_ll_get_prev+0x6>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800cbc6:	6803      	ldr	r3, [r0, #0]
 800cbc8:	58c8      	ldr	r0, [r1, r3]
}
 800cbca:	4770      	bx	lr

0800cbcc <lv_ll_ins_prev>:
{
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	460c      	mov	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	b340      	cbz	r0, 800cc26 <lv_ll_ins_prev+0x5a>
 800cbd4:	b341      	cbz	r1, 800cc28 <lv_ll_ins_prev+0x5c>
    if(lv_ll_get_head(ll_p) == n_act) {
 800cbd6:	6843      	ldr	r3, [r0, #4]
 800cbd8:	4299      	cmp	r1, r3
 800cbda:	d103      	bne.n	800cbe4 <lv_ll_ins_prev+0x18>
}
 800cbdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = lv_ll_ins_head(ll_p);
 800cbe0:	f7ff bfa9 	b.w	800cb36 <lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800cbe4:	6800      	ldr	r0, [r0, #0]
 800cbe6:	3008      	adds	r0, #8
 800cbe8:	f000 f928 	bl	800ce3c <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800cbec:	4606      	mov	r6, r0
 800cbee:	b1c0      	cbz	r0, 800cc22 <lv_ll_ins_prev+0x56>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7ff ffe6 	bl	800cbc4 <lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
 800cbf8:	4632      	mov	r2, r6
 800cbfa:	4601      	mov	r1, r0
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800cbfc:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f7ff ff80 	bl	800cb04 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800cc04:	463a      	mov	r2, r7
 800cc06:	4631      	mov	r1, r6
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f7ff ff84 	bl	800cb16 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800cc0e:	4632      	mov	r2, r6
 800cc10:	4621      	mov	r1, r4
 800cc12:	4628      	mov	r0, r5
 800cc14:	f7ff ff7f 	bl	800cb16 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800cc18:	4622      	mov	r2, r4
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f7ff ff71 	bl	800cb04 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800cc22:	4634      	mov	r4, r6
 800cc24:	e000      	b.n	800cc28 <lv_ll_ins_prev+0x5c>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800cc26:	4604      	mov	r4, r0
}
 800cc28:	4620      	mov	r0, r4
 800cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc2c <lv_ll_rem>:
{
 800cc2c:	b570      	push	{r4, r5, r6, lr}
 800cc2e:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 800cc30:	4604      	mov	r4, r0
 800cc32:	b308      	cbz	r0, 800cc78 <lv_ll_rem+0x4c>
    if(lv_ll_get_head(ll_p) == node_p) {
 800cc34:	6843      	ldr	r3, [r0, #4]
 800cc36:	4299      	cmp	r1, r3
 800cc38:	d10e      	bne.n	800cc58 <lv_ll_rem+0x2c>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f7ff ffbc 	bl	800cbba <lv_ll_get_next>
 800cc42:	4601      	mov	r1, r0
 800cc44:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800cc46:	b908      	cbnz	r0, 800cc4c <lv_ll_rem+0x20>
            ll_p->tail = NULL;
 800cc48:	60a0      	str	r0, [r4, #8]
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800cc4c:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800cc4e:	4620      	mov	r0, r4
}
 800cc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800cc54:	f7ff bf5f 	b.w	800cb16 <node_set_prev.isra.2>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800cc58:	6883      	ldr	r3, [r0, #8]
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	d10e      	bne.n	800cc7c <lv_ll_rem+0x50>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800cc5e:	f7ff ffb1 	bl	800cbc4 <lv_ll_get_prev>
 800cc62:	4601      	mov	r1, r0
 800cc64:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800cc66:	b908      	cbnz	r0, 800cc6c <lv_ll_rem+0x40>
            ll_p->head = NULL;
 800cc68:	6060      	str	r0, [r4, #4]
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
            node_set_next(ll_p, ll_p->tail, NULL);
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	2200      	movs	r2, #0
}
 800cc70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800cc74:	f7ff bf46 	b.w	800cb04 <node_set_next.isra.0>
    if(lv_ll_get_head(ll_p) == node_p) {
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	d0de      	beq.n	800cc3a <lv_ll_rem+0xe>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f7ff ffa0 	bl	800cbc4 <lv_ll_get_prev>
 800cc84:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800cc86:	4611      	mov	r1, r2
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f7ff ff96 	bl	800cbba <lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800cc92:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7ff ff35 	bl	800cb04 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800cc9a:	4632      	mov	r2, r6
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	e7d6      	b.n	800cc4e <lv_ll_rem+0x22>

0800cca0 <lv_ll_chg_list>:
{
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	460c      	mov	r4, r1
 800cca4:	461e      	mov	r6, r3
    lv_ll_rem(ll_ori_p, node);
 800cca6:	4611      	mov	r1, r2
{
 800cca8:	4615      	mov	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800ccaa:	f7ff ffbf 	bl	800cc2c <lv_ll_rem>
    if(head) {
 800ccae:	b1a6      	cbz	r6, 800ccda <lv_ll_chg_list+0x3a>
        node_set_prev(ll_new_p, node, NULL);
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7ff ff2e 	bl	800cb16 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800ccba:	4629      	mov	r1, r5
 800ccbc:	6862      	ldr	r2, [r4, #4]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f7ff ff20 	bl	800cb04 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800ccc4:	6861      	ldr	r1, [r4, #4]
 800ccc6:	b119      	cbz	r1, 800ccd0 <lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800ccc8:	462a      	mov	r2, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff ff23 	bl	800cb16 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800ccd0:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800ccd2:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800ccd4:	b9ab      	cbnz	r3, 800cd02 <lv_ll_chg_list+0x62>
            ll_new_p->tail = node;
 800ccd6:	60a5      	str	r5, [r4, #8]
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800ccda:	68a2      	ldr	r2, [r4, #8]
 800ccdc:	4629      	mov	r1, r5
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7ff ff19 	bl	800cb16 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800cce4:	4629      	mov	r1, r5
 800cce6:	4632      	mov	r2, r6
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7ff ff0b 	bl	800cb04 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800ccee:	68a1      	ldr	r1, [r4, #8]
 800ccf0:	b119      	cbz	r1, 800ccfa <lv_ll_chg_list+0x5a>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800ccf2:	462a      	mov	r2, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f7ff ff05 	bl	800cb04 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800ccfa:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800ccfc:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800ccfe:	b903      	cbnz	r3, 800cd02 <lv_ll_chg_list+0x62>
            ll_new_p->head = node;
 800cd00:	6065      	str	r5, [r4, #4]
 800cd02:	bd70      	pop	{r4, r5, r6, pc}

0800cd04 <lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 800cd04:	4291      	cmp	r1, r2
{
 800cd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800cd0e:	d042      	beq.n	800cd96 <lv_ll_move_before+0x92>
    if(n_after != NULL)
 800cd10:	b132      	cbz	r2, 800cd20 <lv_ll_move_before+0x1c>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800cd12:	4611      	mov	r1, r2
 800cd14:	f7ff ff56 	bl	800cbc4 <lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cd18:	4284      	cmp	r4, r0
        n_before = lv_ll_get_prev(ll_p, n_after);
 800cd1a:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cd1c:	d121      	bne.n	800cd62 <lv_ll_move_before+0x5e>
 800cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800cd20:	b100      	cbz	r0, 800cd24 <lv_ll_move_before+0x20>
        tail = ll_p->tail;
 800cd22:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800cd24:	42b4      	cmp	r4, r6
 800cd26:	d100      	bne.n	800cd2a <lv_ll_move_before+0x26>
 800cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f7ff ff7d 	bl	800cc2c <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800cd32:	4622      	mov	r2, r4
 800cd34:	4631      	mov	r1, r6
 800cd36:	4628      	mov	r0, r5
 800cd38:	f7ff fee4 	bl	800cb04 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800cd3c:	4632      	mov	r2, r6
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4628      	mov	r0, r5
 800cd42:	f7ff fee8 	bl	800cb16 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800cd46:	4622      	mov	r2, r4
 800cd48:	2100      	movs	r1, #0
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	f7ff fee3 	bl	800cb16 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800cd50:	2200      	movs	r2, #0
 800cd52:	4621      	mov	r1, r4
 800cd54:	4628      	mov	r0, r5
 800cd56:	f7ff fed5 	bl	800cb04 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800cd5a:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800cd5c:	b9de      	cbnz	r6, 800cd96 <lv_ll_move_before+0x92>
 800cd5e:	606c      	str	r4, [r5, #4]
 800cd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_ll_rem(ll_p, n_act);
 800cd62:	4621      	mov	r1, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	f7ff ff61 	bl	800cc2c <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f7ff fec8 	bl	800cb04 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800cd74:	463a      	mov	r2, r7
 800cd76:	4621      	mov	r1, r4
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f7ff fecc 	bl	800cb16 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4622      	mov	r2, r4
 800cd82:	4628      	mov	r0, r5
 800cd84:	f7ff fec7 	bl	800cb16 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800cd88:	4632      	mov	r2, r6
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f7ff feb9 	bl	800cb04 <node_set_next.isra.0>
 800cd92:	463e      	mov	r6, r7
 800cd94:	e7e2      	b.n	800cd5c <lv_ll_move_before+0x58>
 800cd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd98 <lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 800cd98:	b130      	cbz	r0, 800cda8 <lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800cd9a:	6843      	ldr	r3, [r0, #4]
 800cd9c:	b933      	cbnz	r3, 800cdac <lv_ll_is_empty+0x14>
 800cd9e:	6880      	ldr	r0, [r0, #8]
 800cda0:	fab0 f080 	clz	r0, r0
 800cda4:	0940      	lsrs	r0, r0, #5
 800cda6:	4770      	bx	lr
    if(ll_p == NULL) return true;
 800cda8:	2001      	movs	r0, #1
 800cdaa:	4770      	bx	lr
    return false;
 800cdac:	2000      	movs	r0, #0
}
 800cdae:	4770      	bx	lr

0800cdb0 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800cdb0:	4a07      	ldr	r2, [pc, #28]	; (800cdd0 <ent_get_next+0x20>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800cdb2:	b908      	cbnz	r0, 800cdb8 <ent_get_next+0x8>
        next_e = (lv_mem_ent_t *)work_mem;
 800cdb4:	6810      	ldr	r0, [r2, #0]
 800cdb6:	4770      	bx	lr
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 800cdb8:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800cdba:	6800      	ldr	r0, [r0, #0]
 800cdbc:	eb03 0050 	add.w	r0, r3, r0, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800cdc0:	6813      	ldr	r3, [r2, #0]
 800cdc2:	1d01      	adds	r1, r0, #4
 800cdc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800cdc8:	4299      	cmp	r1, r3
 800cdca:	bf28      	it	cs
 800cdcc:	2000      	movcs	r0, #0
    }

    return next_e;
}
 800cdce:	4770      	bx	lr
 800cdd0:	2001113c 	.word	0x2001113c

0800cdd4 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800cdd4:	078b      	lsls	r3, r1, #30
        size = size & (~0x3);
 800cdd6:	bf18      	it	ne
 800cdd8:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cddc:	6803      	ldr	r3, [r0, #0]
        size += 4;
 800cdde:	bf18      	it	ne
 800cde0:	3104      	addne	r1, #4
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cde2:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800cde6:	1d0a      	adds	r2, r1, #4
 800cde8:	4293      	cmp	r3, r2
{
 800cdea:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800cdec:	d011      	beq.n	800ce12 <ent_trunc+0x3e>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	d00a      	beq.n	800ce08 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
 800cdf2:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800cdf4:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 800cdf6:	5c54      	ldrb	r4, [r2, r1]
 800cdf8:	f36f 0400 	bfc	r4, #0, #1
 800cdfc:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800cdfe:	5854      	ldr	r4, [r2, r1]
 800ce00:	1a5b      	subs	r3, r3, r1
 800ce02:	f363 045f 	bfi	r4, r3, #1, #31
 800ce06:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800ce08:	6803      	ldr	r3, [r0, #0]
 800ce0a:	f361 035f 	bfi	r3, r1, #1, #31
 800ce0e:	6003      	str	r3, [r0, #0]
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	4619      	mov	r1, r3
 800ce14:	e7f8      	b.n	800ce08 <ent_trunc+0x34>
	...

0800ce18 <lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <lv_mem_init+0x1c>)
 800ce1a:	4a07      	ldr	r2, [pc, #28]	; (800ce38 <lv_mem_init+0x20>)
 800ce1c:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800ce1e:	781a      	ldrb	r2, [r3, #0]
 800ce20:	f36f 0200 	bfc	r2, #0, #1
 800ce24:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 800ce2c:	f361 025f 	bfi	r2, r1, #1, #31
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	4770      	bx	lr
 800ce34:	20011140 	.word	0x20011140
 800ce38:	2001113c 	.word	0x2001113c

0800ce3c <lv_mem_alloc>:
{
 800ce3c:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800ce3e:	4605      	mov	r5, r0
 800ce40:	b300      	cbz	r0, 800ce84 <lv_mem_alloc+0x48>
    if(size & 0x3) {
 800ce42:	0782      	lsls	r2, r0, #30
        size = size & (~0x3);
 800ce44:	bf1c      	itt	ne
 800ce46:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
 800ce4a:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
 800ce4c:	2400      	movs	r4, #0
        e = ent_get_next(e);
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f7ff ffae 	bl	800cdb0 <ent_get_next>
        if(e != NULL) {
 800ce54:	4604      	mov	r4, r0
 800ce56:	b198      	cbz	r0, 800ce80 <lv_mem_alloc+0x44>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800ce58:	7803      	ldrb	r3, [r0, #0]
 800ce5a:	07db      	lsls	r3, r3, #31
 800ce5c:	d4f7      	bmi.n	800ce4e <lv_mem_alloc+0x12>
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800ce64:	d8f3      	bhi.n	800ce4e <lv_mem_alloc+0x12>
        ent_trunc(e, size),
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7ff ffb4 	bl	800cdd4 <ent_trunc>
            e->header.s.used = 1;
 800ce6c:	7803      	ldrb	r3, [r0, #0]
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	f804 3b04 	strb.w	r3, [r4], #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800ce76:	462a      	mov	r2, r5
 800ce78:	21aa      	movs	r1, #170	; 0xaa
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f003 fcb9 	bl	80107f2 <memset>
}
 800ce80:	4620      	mov	r0, r4
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800ce84:	4c00      	ldr	r4, [pc, #0]	; (800ce88 <lv_mem_alloc+0x4c>)
 800ce86:	e7fb      	b.n	800ce80 <lv_mem_alloc+0x44>
 800ce88:	20015140 	.word	0x20015140

0800ce8c <lv_mem_get_size>:
    if(data == NULL) return 0;
 800ce8c:	b140      	cbz	r0, 800cea0 <lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800ce8e:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <lv_mem_get_size+0x18>)
 800ce90:	4298      	cmp	r0, r3
 800ce92:	d004      	beq.n	800ce9e <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800ce94:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ce98:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800ce9c:	4770      	bx	lr
    if(data == NULL) return 0;
 800ce9e:	2000      	movs	r0, #0
}
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20015140 	.word	0x20015140

0800cea8 <lv_mem_free>:
    if(data == &zero_mem) return;
 800cea8:	4b13      	ldr	r3, [pc, #76]	; (800cef8 <lv_mem_free+0x50>)
 800ceaa:	4298      	cmp	r0, r3
{
 800ceac:	b510      	push	{r4, lr}
 800ceae:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800ceb0:	d011      	beq.n	800ced6 <lv_mem_free+0x2e>
    if(data == NULL) return;
 800ceb2:	b180      	cbz	r0, 800ced6 <lv_mem_free+0x2e>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800ceb4:	f7ff ffea 	bl	800ce8c <lv_mem_get_size>
 800ceb8:	21bb      	movs	r1, #187	; 0xbb
 800ceba:	4602      	mov	r2, r0
 800cebc:	4620      	mov	r0, r4
 800cebe:	f003 fc98 	bl	80107f2 <memset>
    e->header.s.used = 0;
 800cec2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f36f 0300 	bfc	r3, #0, #1
 800cecc:	f800 3d04 	strb.w	r3, [r0, #-4]!
        e_next = ent_get_next(e_next);
 800ced0:	f7ff ff6e 	bl	800cdb0 <ent_get_next>
    while(e_next != NULL) {
 800ced4:	b900      	cbnz	r0, 800ced8 <lv_mem_free+0x30>
 800ced6:	bd10      	pop	{r4, pc}
        if(e_next->header.s.used == 0) {
 800ced8:	7803      	ldrb	r3, [r0, #0]
 800ceda:	07db      	lsls	r3, r3, #31
 800cedc:	d4fb      	bmi.n	800ced6 <lv_mem_free+0x2e>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800cede:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cee2:	6801      	ldr	r1, [r0, #0]
 800cee4:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800cee8:	3204      	adds	r2, #4
 800ceea:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800ceee:	f362 035f 	bfi	r3, r2, #1, #31
 800cef2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cef6:	e7eb      	b.n	800ced0 <lv_mem_free+0x28>
 800cef8:	20015140 	.word	0x20015140

0800cefc <lv_mem_realloc>:
{
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	460d      	mov	r5, r1
    if(data_p != NULL) {
 800cf00:	4604      	mov	r4, r0
 800cf02:	b128      	cbz	r0, 800cf10 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800cf04:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800cf08:	f013 0f01 	tst.w	r3, #1
 800cf0c:	bf08      	it	eq
 800cf0e:	2400      	moveq	r4, #0
    uint32_t old_size = lv_mem_get_size(data_p);
 800cf10:	4620      	mov	r0, r4
 800cf12:	f7ff ffbb 	bl	800ce8c <lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800cf16:	42a8      	cmp	r0, r5
    uint32_t old_size = lv_mem_get_size(data_p);
 800cf18:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800cf1a:	d004      	beq.n	800cf26 <lv_mem_realloc+0x2a>
    if(new_size < old_size) {
 800cf1c:	d905      	bls.n	800cf2a <lv_mem_realloc+0x2e>
        ent_trunc(e, new_size);
 800cf1e:	4629      	mov	r1, r5
 800cf20:	1f20      	subs	r0, r4, #4
 800cf22:	f7ff ff57 	bl	800cdd4 <ent_trunc>
 800cf26:	4626      	mov	r6, r4
 800cf28:	e010      	b.n	800cf4c <lv_mem_realloc+0x50>
    new_p = lv_mem_alloc(new_size);
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f7ff ff86 	bl	800ce3c <lv_mem_alloc>
    if(new_p != NULL && data_p != NULL) {
 800cf30:	4606      	mov	r6, r0
 800cf32:	b158      	cbz	r0, 800cf4c <lv_mem_realloc+0x50>
 800cf34:	b154      	cbz	r4, 800cf4c <lv_mem_realloc+0x50>
        if(old_size != 0) {
 800cf36:	b14f      	cbz	r7, 800cf4c <lv_mem_realloc+0x50>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800cf38:	42af      	cmp	r7, r5
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	bf28      	it	cs
 800cf40:	462a      	movcs	r2, r5
 800cf42:	f003 fc4b 	bl	80107dc <memcpy>
            lv_mem_free(data_p);
 800cf46:	4620      	mov	r0, r4
 800cf48:	f7ff ffae 	bl	800cea8 <lv_mem_free>
}
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf50 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800cf50:	b508      	push	{r3, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800cf52:	2114      	movs	r1, #20
 800cf54:	4803      	ldr	r0, [pc, #12]	; (800cf64 <lv_task_core_init+0x14>)
 800cf56:	f7ff fde4 	bl	800cb22 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800cf5a:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <lv_task_core_init+0x18>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	bd08      	pop	{r3, pc}
 800cf62:	bf00      	nop
 800cf64:	20015e50 	.word	0x20015e50
 800cf68:	20015154 	.word	0x20015154

0800cf6c <lv_task_create_basic>:
{
 800cf6c:	b538      	push	{r3, r4, r5, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800cf6e:	481c      	ldr	r0, [pc, #112]	; (800cfe0 <lv_task_create_basic+0x74>)
 800cf70:	f7ff fe1d 	bl	800cbae <lv_ll_get_head>
    if(NULL == tmp) {
 800cf74:	4601      	mov	r1, r0
 800cf76:	b928      	cbnz	r0, 800cf84 <lv_task_create_basic+0x18>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800cf78:	4819      	ldr	r0, [pc, #100]	; (800cfe0 <lv_task_create_basic+0x74>)
 800cf7a:	f7ff fddc 	bl	800cb36 <lv_ll_ins_head>
        lv_mem_assert(new_task);
 800cf7e:	4604      	mov	r4, r0
 800cf80:	b9b8      	cbnz	r0, 800cfb2 <lv_task_create_basic+0x46>
 800cf82:	e7fe      	b.n	800cf82 <lv_task_create_basic+0x16>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf84:	4c16      	ldr	r4, [pc, #88]	; (800cfe0 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
 800cf86:	7c0b      	ldrb	r3, [r1, #16]
 800cf88:	f003 0307 	and.w	r3, r3, #7
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	dc05      	bgt.n	800cf9c <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf90:	4813      	ldr	r0, [pc, #76]	; (800cfe0 <lv_task_create_basic+0x74>)
 800cf92:	f7ff fe1b 	bl	800cbcc <lv_ll_ins_prev>
                lv_mem_assert(new_task);
 800cf96:	4604      	mov	r4, r0
 800cf98:	b958      	cbnz	r0, 800cfb2 <lv_task_create_basic+0x46>
 800cf9a:	e7fe      	b.n	800cf9a <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff fe0c 	bl	800cbba <lv_ll_get_next>
        } while(tmp != NULL);
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1ee      	bne.n	800cf86 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800cfa8:	480d      	ldr	r0, [pc, #52]	; (800cfe0 <lv_task_create_basic+0x74>)
 800cfaa:	f7ff fde2 	bl	800cb72 <lv_ll_ins_tail>
            lv_mem_assert(new_task);
 800cfae:	4604      	mov	r4, r0
 800cfb0:	b1a0      	cbz	r0, 800cfdc <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800cfb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cfb6:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800cfb8:	7c23      	ldrb	r3, [r4, #16]
 800cfba:	2203      	movs	r2, #3
    new_task->task_cb = NULL;
 800cfbc:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800cfbe:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->once     = 0;
 800cfc2:	f365 03c3 	bfi	r3, r5, #3, #1
 800cfc6:	7423      	strb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800cfc8:	60a5      	str	r5, [r4, #8]
    new_task->last_run = lv_tick_get();
 800cfca:	f7ff fabb 	bl	800c544 <lv_tick_get>
    task_created = true;
 800cfce:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800cfd0:	6060      	str	r0, [r4, #4]
    task_created = true;
 800cfd2:	2201      	movs	r2, #1
    new_task->user_data = NULL;
 800cfd4:	60e5      	str	r5, [r4, #12]
    task_created = true;
 800cfd6:	701a      	strb	r2, [r3, #0]
}
 800cfd8:	4620      	mov	r0, r4
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	e7fe      	b.n	800cfdc <lv_task_create_basic+0x70>
 800cfde:	bf00      	nop
 800cfe0:	20015e50 	.word	0x20015e50
 800cfe4:	20015155 	.word	0x20015155

0800cfe8 <lv_task_del>:
{
 800cfe8:	b510      	push	{r4, lr}
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800cfea:	4601      	mov	r1, r0
{
 800cfec:	4604      	mov	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800cfee:	4807      	ldr	r0, [pc, #28]	; (800d00c <lv_task_del+0x24>)
 800cff0:	f7ff fe1c 	bl	800cc2c <lv_ll_rem>
    lv_mem_free(task);
 800cff4:	4620      	mov	r0, r4
 800cff6:	f7ff ff57 	bl	800cea8 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800cffa:	4b05      	ldr	r3, [pc, #20]	; (800d010 <lv_task_del+0x28>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	429c      	cmp	r4, r3
 800d000:	bf02      	ittt	eq
 800d002:	4b04      	ldreq	r3, [pc, #16]	; (800d014 <lv_task_del+0x2c>)
 800d004:	2201      	moveq	r2, #1
 800d006:	701a      	strbeq	r2, [r3, #0]
 800d008:	bd10      	pop	{r4, pc}
 800d00a:	bf00      	nop
 800d00c:	20015e50 	.word	0x20015e50
 800d010:	20015e90 	.word	0x20015e90
 800d014:	20015156 	.word	0x20015156

0800d018 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4604      	mov	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800d01c:	6840      	ldr	r0, [r0, #4]
 800d01e:	f7ff fa9f 	bl	800c560 <lv_tick_elaps>
    if(elp >= task->period) {
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	4298      	cmp	r0, r3
 800d026:	d315      	bcc.n	800d054 <lv_task_exec+0x3c>
        task->last_run = lv_tick_get();
 800d028:	f7ff fa8c 	bl	800c544 <lv_tick_get>
        task_deleted   = false;
 800d02c:	4d0a      	ldr	r5, [pc, #40]	; (800d058 <lv_task_exec+0x40>)
        task_created   = false;
 800d02e:	490b      	ldr	r1, [pc, #44]	; (800d05c <lv_task_exec+0x44>)
        task->last_run = lv_tick_get();
 800d030:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800d032:	2200      	movs	r2, #0
 800d034:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 800d036:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 800d038:	68a2      	ldr	r2, [r4, #8]
 800d03a:	b10a      	cbz	r2, 800d040 <lv_task_exec+0x28>
 800d03c:	4620      	mov	r0, r4
 800d03e:	4790      	blx	r2

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800d040:	7828      	ldrb	r0, [r5, #0]
 800d042:	b930      	cbnz	r0, 800d052 <lv_task_exec+0x3a>
            if(task->once != 0) {
 800d044:	7c23      	ldrb	r3, [r4, #16]
 800d046:	071b      	lsls	r3, r3, #28
 800d048:	d502      	bpl.n	800d050 <lv_task_exec+0x38>
                lv_task_del(task);
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff ffcc 	bl	800cfe8 <lv_task_del>
            }
        }
        exec = true;
 800d050:	2001      	movs	r0, #1
    }

    return exec;
}
 800d052:	bd38      	pop	{r3, r4, r5, pc}
    bool exec = false;
 800d054:	2000      	movs	r0, #0
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	20015156 	.word	0x20015156
 800d05c:	20015155 	.word	0x20015155

0800d060 <lv_task_handler>:
{
 800d060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(task_handler_mutex) return;
 800d064:	4d3a      	ldr	r5, [pc, #232]	; (800d150 <lv_task_handler+0xf0>)
 800d066:	782c      	ldrb	r4, [r5, #0]
 800d068:	b934      	cbnz	r4, 800d078 <lv_task_handler+0x18>
    task_handler_mutex = true;
 800d06a:	2301      	movs	r3, #1
 800d06c:	702b      	strb	r3, [r5, #0]
    if(lv_task_run == false) {
 800d06e:	4b39      	ldr	r3, [pc, #228]	; (800d154 <lv_task_handler+0xf4>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b923      	cbnz	r3, 800d07e <lv_task_handler+0x1e>
        task_handler_mutex = false; /*Release mutex*/
 800d074:	2300      	movs	r3, #0
 800d076:	702b      	strb	r3, [r5, #0]
}
 800d078:	b003      	add	sp, #12
 800d07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 800d07e:	f7ff fa61 	bl	800c544 <lv_tick_get>
 800d082:	4b35      	ldr	r3, [pc, #212]	; (800d158 <lv_task_handler+0xf8>)
        task_deleted             = false;
 800d084:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800d174 <lv_task_handler+0x114>
    handler_start = lv_tick_get();
 800d088:	6018      	str	r0, [r3, #0]
 800d08a:	469b      	mov	fp, r3
        task_deleted             = false;
 800d08c:	46a1      	mov	r9, r4
        task_created             = false;
 800d08e:	4e33      	ldr	r6, [pc, #204]	; (800d15c <lv_task_handler+0xfc>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800d090:	4833      	ldr	r0, [pc, #204]	; (800d160 <lv_task_handler+0x100>)
        task_created             = false;
 800d092:	f886 9000 	strb.w	r9, [r6]
        task_deleted             = false;
 800d096:	f888 9000 	strb.w	r9, [r8]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800d09a:	f7ff fd88 	bl	800cbae <lv_ll_get_head>
 800d09e:	4f31      	ldr	r7, [pc, #196]	; (800d164 <lv_task_handler+0x104>)
 800d0a0:	9601      	str	r6, [sp, #4]
 800d0a2:	6038      	str	r0, [r7, #0]
 800d0a4:	463e      	mov	r6, r7
        while(LV_GC_ROOT(_lv_task_act)) {
 800d0a6:	6831      	ldr	r1, [r6, #0]
 800d0a8:	bb29      	cbnz	r1, 800d0f6 <lv_task_handler+0x96>
    busy_time += lv_tick_elaps(handler_start);
 800d0aa:	4c2f      	ldr	r4, [pc, #188]	; (800d168 <lv_task_handler+0x108>)
 800d0ac:	f8db 0000 	ldr.w	r0, [fp]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800d0b0:	4e2e      	ldr	r6, [pc, #184]	; (800d16c <lv_task_handler+0x10c>)
    busy_time += lv_tick_elaps(handler_start);
 800d0b2:	f7ff fa55 	bl	800c560 <lv_tick_elaps>
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	4418      	add	r0, r3
 800d0ba:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800d0bc:	6830      	ldr	r0, [r6, #0]
 800d0be:	f7ff fa4f 	bl	800c560 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800d0c2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800d0c6:	d3d5      	bcc.n	800d074 <lv_task_handler+0x14>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800d0c8:	6822      	ldr	r2, [r4, #0]
 800d0ca:	2364      	movs	r3, #100	; 0x64
 800d0cc:	4353      	muls	r3, r2
 800d0ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d0d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0d6:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800d0d8:	2b64      	cmp	r3, #100	; 0x64
 800d0da:	bf98      	it	ls
 800d0dc:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 800d0e0:	4a23      	ldr	r2, [pc, #140]	; (800d170 <lv_task_handler+0x110>)
 800d0e2:	bf94      	ite	ls
 800d0e4:	b2db      	uxtbls	r3, r3
 800d0e6:	2300      	movhi	r3, #0
 800d0e8:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800d0ee:	f7ff fa29 	bl	800c544 <lv_tick_get>
 800d0f2:	6030      	str	r0, [r6, #0]
 800d0f4:	e7be      	b.n	800d074 <lv_task_handler+0x14>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800d0f6:	481a      	ldr	r0, [pc, #104]	; (800d160 <lv_task_handler+0x100>)
 800d0f8:	f7ff fd5f 	bl	800cbba <lv_ll_get_next>
 800d0fc:	4682      	mov	sl, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800d0fe:	6830      	ldr	r0, [r6, #0]
 800d100:	7c03      	ldrb	r3, [r0, #16]
 800d102:	f013 0207 	ands.w	r2, r3, #7
 800d106:	d0d0      	beq.n	800d0aa <lv_task_handler+0x4a>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800d108:	4284      	cmp	r4, r0
 800d10a:	d103      	bne.n	800d114 <lv_task_handler+0xb4>
                LV_GC_ROOT(_lv_task_act) = next;
 800d10c:	f8c6 a000 	str.w	sl, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800d110:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 800d112:	e7c8      	b.n	800d0a6 <lv_task_handler+0x46>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800d114:	2a05      	cmp	r2, #5
 800d116:	d10c      	bne.n	800d132 <lv_task_handler+0xd2>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800d118:	f7ff ff7e 	bl	800d018 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800d11c:	f898 3000 	ldrb.w	r3, [r8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1c2      	bne.n	800d0aa <lv_task_handler+0x4a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800d124:	9b01      	ldr	r3, [sp, #4]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1be      	bne.n	800d0aa <lv_task_handler+0x4a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800d12c:	f8c6 a000 	str.w	sl, [r6]
 800d130:	e7b9      	b.n	800d0a6 <lv_task_handler+0x46>
            else if(task_interrupter) {
 800d132:	b134      	cbz	r4, 800d142 <lv_task_handler+0xe2>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800d134:	7c22      	ldrb	r2, [r4, #16]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	f002 0207 	and.w	r2, r2, #7
 800d13e:	4293      	cmp	r3, r2
 800d140:	ddec      	ble.n	800d11c <lv_task_handler+0xbc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800d142:	f7ff ff69 	bl	800d018 <lv_task_exec>
 800d146:	2800      	cmp	r0, #0
 800d148:	d0e8      	beq.n	800d11c <lv_task_handler+0xbc>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800d14a:	683c      	ldr	r4, [r7, #0]
                    break;
 800d14c:	e79f      	b.n	800d08e <lv_task_handler+0x2e>
 800d14e:	bf00      	nop
 800d150:	20015157 	.word	0x20015157
 800d154:	20015154 	.word	0x20015154
 800d158:	20015148 	.word	0x20015148
 800d15c:	20015155 	.word	0x20015155
 800d160:	20015e50 	.word	0x20015e50
 800d164:	20015e90 	.word	0x20015e90
 800d168:	20015144 	.word	0x20015144
 800d16c:	20015150 	.word	0x20015150
 800d170:	2001514c 	.word	0x2001514c
 800d174:	20015156 	.word	0x20015156

0800d178 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800d178:	7c03      	ldrb	r3, [r0, #16]
 800d17a:	f003 0307 	and.w	r3, r3, #7
 800d17e:	428b      	cmp	r3, r1
{
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 800d186:	d01b      	beq.n	800d1c0 <lv_task_set_prio+0x48>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800d188:	480e      	ldr	r0, [pc, #56]	; (800d1c4 <lv_task_set_prio+0x4c>)
 800d18a:	4e0e      	ldr	r6, [pc, #56]	; (800d1c4 <lv_task_set_prio+0x4c>)
 800d18c:	f7ff fd0f 	bl	800cbae <lv_ll_get_head>
 800d190:	4602      	mov	r2, r0
 800d192:	b132      	cbz	r2, 800d1a2 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800d194:	7c13      	ldrb	r3, [r2, #16]
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	429d      	cmp	r5, r3
 800d19c:	db0a      	blt.n	800d1b4 <lv_task_set_prio+0x3c>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800d19e:	42a2      	cmp	r2, r4
 800d1a0:	d003      	beq.n	800d1aa <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	4807      	ldr	r0, [pc, #28]	; (800d1c4 <lv_task_set_prio+0x4c>)
 800d1a6:	f7ff fdad 	bl	800cd04 <lv_ll_move_before>
    task->prio = prio;
 800d1aa:	7c23      	ldrb	r3, [r4, #16]
 800d1ac:	f365 0302 	bfi	r3, r5, #0, #3
 800d1b0:	7423      	strb	r3, [r4, #16]
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7ff fcff 	bl	800cbba <lv_ll_get_next>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	e7e8      	b.n	800d192 <lv_task_set_prio+0x1a>
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20015e50 	.word	0x20015e50

0800d1c8 <lv_task_create>:
{
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
 800d1d4:	f7ff feca 	bl	800cf6c <lv_task_create_basic>
    lv_mem_assert(new_task);
 800d1d8:	4604      	mov	r4, r0
 800d1da:	b900      	cbnz	r0, 800d1de <lv_task_create+0x16>
 800d1dc:	e7fe      	b.n	800d1dc <lv_task_create+0x14>
    task->task_cb = task_cb;
 800d1de:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
 800d1e2:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	f7ff ffc7 	bl	800d178 <lv_task_set_prio>
    new_task->user_data = user_data;
 800d1ea:	60e5      	str	r5, [r4, #12]
}
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1f2 <lv_task_ready>:
{
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800d1f6:	f7ff f9a5 	bl	800c544 <lv_tick_get>
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	43db      	mvns	r3, r3
 800d1fe:	4403      	add	r3, r0
 800d200:	6063      	str	r3, [r4, #4]
 800d202:	bd10      	pop	{r4, pc}

0800d204 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800d204:	7803      	ldrb	r3, [r0, #0]
 800d206:	061a      	lsls	r2, r3, #24
 800d208:	d50e      	bpl.n	800d228 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 800d20a:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800d20e:	2ac0      	cmp	r2, #192	; 0xc0
 800d210:	d00c      	beq.n	800d22c <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 800d212:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d216:	2ae0      	cmp	r2, #224	; 0xe0
 800d218:	d00a      	beq.n	800d230 <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 800d21a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800d21e:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 800d220:	bf14      	ite	ne
 800d222:	2001      	movne	r0, #1
 800d224:	2004      	moveq	r0, #4
 800d226:	4770      	bx	lr
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800d228:	2001      	movs	r0, #1
 800d22a:	4770      	bx	lr
        return 2;
 800d22c:	2002      	movs	r0, #2
 800d22e:	4770      	bx	lr
        return 3;
 800d230:	2003      	movs	r0, #3
}
 800d232:	4770      	bx	lr

0800d234 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 800d234:	b573      	push	{r0, r1, r4, r5, r6, lr}
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800d23a:	b901      	cbnz	r1, 800d23e <lv_txt_utf8_next+0xa>
 800d23c:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800d23e:	680a      	ldr	r2, [r1, #0]
 800d240:	5c83      	ldrb	r3, [r0, r2]
 800d242:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d246:	f102 0401 	add.w	r4, r2, #1
 800d24a:	d103      	bne.n	800d254 <lv_txt_utf8_next+0x20>
        result = txt[*i];
 800d24c:	4618      	mov	r0, r3
        (*i)++;
 800d24e:	600c      	str	r4, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800d250:	b002      	add	sp, #8
 800d252:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800d254:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 800d258:	2dc0      	cmp	r5, #192	; 0xc0
 800d25a:	d110      	bne.n	800d27e <lv_txt_utf8_next+0x4a>
            (*i)++;
 800d25c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d25e:	5d00      	ldrb	r0, [r0, r4]
 800d260:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 800d264:	2c80      	cmp	r4, #128	; 0x80
 800d266:	d001      	beq.n	800d26c <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 800d268:	2000      	movs	r0, #0
 800d26a:	e7f1      	b.n	800d250 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800d26c:	019b      	lsls	r3, r3, #6
 800d26e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 800d272:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d276:	4418      	add	r0, r3
            (*i)++;
 800d278:	3202      	adds	r2, #2
            (*i)++;
 800d27a:	600a      	str	r2, [r1, #0]
 800d27c:	e7e8      	b.n	800d250 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800d27e:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 800d282:	2de0      	cmp	r5, #224	; 0xe0
 800d284:	d117      	bne.n	800d2b6 <lv_txt_utf8_next+0x82>
            (*i)++;
 800d286:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d288:	5d04      	ldrb	r4, [r0, r4]
 800d28a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800d28e:	2d80      	cmp	r5, #128	; 0x80
 800d290:	d1ea      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            (*i)++;
 800d292:	1c95      	adds	r5, r2, #2
 800d294:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d296:	5d45      	ldrb	r5, [r0, r5]
 800d298:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 800d29c:	2880      	cmp	r0, #128	; 0x80
 800d29e:	d1e3      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800d2a0:	0318      	lsls	r0, r3, #12
 800d2a2:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 800d2a4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800d2a8:	01a3      	lsls	r3, r4, #6
 800d2aa:	4428      	add	r0, r5
 800d2ac:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 800d2b0:	4418      	add	r0, r3
            (*i)++;
 800d2b2:	3203      	adds	r2, #3
 800d2b4:	e7e1      	b.n	800d27a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800d2b6:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 800d2ba:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 800d2bc:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800d2be:	d1d3      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d2c0:	5d04      	ldrb	r4, [r0, r4]
 800d2c2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 800d2c6:	2d80      	cmp	r5, #128	; 0x80
 800d2c8:	d1ce      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            (*i)++;
 800d2ca:	1c95      	adds	r5, r2, #2
 800d2cc:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d2ce:	5d45      	ldrb	r5, [r0, r5]
 800d2d0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 800d2d4:	2e80      	cmp	r6, #128	; 0x80
 800d2d6:	d1c7      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            (*i)++;
 800d2d8:	1cd6      	adds	r6, r2, #3
 800d2da:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800d2dc:	5d86      	ldrb	r6, [r0, r6]
 800d2de:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 800d2e2:	2880      	cmp	r0, #128	; 0x80
 800d2e4:	d1c0      	bne.n	800d268 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800d2e6:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800d2e8:	0320      	lsls	r0, r4, #12
 800d2ea:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800d2ee:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800d2f2:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800d2f4:	01a8      	lsls	r0, r5, #6
 800d2f6:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 800d2fa:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800d2fe:	4430      	add	r0, r6
 800d300:	4418      	add	r0, r3
            (*i)++;
 800d302:	3204      	adds	r2, #4
 800d304:	e7b9      	b.n	800d27a <lv_txt_utf8_next+0x46>
	...

0800d308 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800d308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800d30c:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800d30e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800d330 <lv_txt_utf8_get_byte_id+0x28>
{
 800d312:	4607      	mov	r7, r0
 800d314:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 800d316:	4625      	mov	r5, r4
 800d318:	42b5      	cmp	r5, r6
 800d31a:	d102      	bne.n	800d322 <lv_txt_utf8_get_byte_id+0x1a>
    }

    return byte_cnt;
}
 800d31c:	4620      	mov	r0, r4
 800d31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800d322:	1938      	adds	r0, r7, r4
 800d324:	f8d8 3000 	ldr.w	r3, [r8]
 800d328:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 800d32a:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800d32c:	4404      	add	r4, r0
 800d32e:	e7f3      	b.n	800d318 <lv_txt_utf8_get_byte_id+0x10>
 800d330:	20000130 	.word	0x20000130

0800d334 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800d334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 800d338:	ad02      	add	r5, sp, #8
 800d33a:	2400      	movs	r4, #0
 800d33c:	f845 4d04 	str.w	r4, [r5, #-4]!
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800d340:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800d364 <lv_txt_utf8_get_char_id+0x30>
{
 800d344:	4607      	mov	r7, r0
 800d346:	460e      	mov	r6, r1
    while(i < byte_id) {
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	42b3      	cmp	r3, r6
 800d34c:	d303      	bcc.n	800d356 <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 800d34e:	4620      	mov	r0, r4
 800d350:	b002      	add	sp, #8
 800d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800d356:	4629      	mov	r1, r5
 800d358:	4638      	mov	r0, r7
 800d35a:	f8d8 3000 	ldr.w	r3, [r8]
 800d35e:	4798      	blx	r3
        char_cnt++;
 800d360:	3401      	adds	r4, #1
 800d362:	e7f1      	b.n	800d348 <lv_txt_utf8_get_char_id+0x14>
 800d364:	20000128 	.word	0x20000128

0800d368 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800d368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800d36a:	ad02      	add	r5, sp, #8
 800d36c:	2400      	movs	r4, #0
 800d36e:	f845 4d04 	str.w	r4, [r5, #-4]!

    while(txt[i] != '\0') {
        lv_txt_encoded_next(txt, &i);
 800d372:	4f07      	ldr	r7, [pc, #28]	; (800d390 <lv_txt_utf8_get_length+0x28>)
{
 800d374:	4606      	mov	r6, r0
    while(txt[i] != '\0') {
 800d376:	9b01      	ldr	r3, [sp, #4]
 800d378:	5cf3      	ldrb	r3, [r6, r3]
 800d37a:	b913      	cbnz	r3, 800d382 <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 800d37c:	4620      	mov	r0, r4
 800d37e:	b003      	add	sp, #12
 800d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_encoded_next(txt, &i);
 800d382:	4629      	mov	r1, r5
 800d384:	4630      	mov	r0, r6
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	4798      	blx	r3
        len++;
 800d38a:	3401      	adds	r4, #1
 800d38c:	e7f3      	b.n	800d376 <lv_txt_utf8_get_length+0xe>
 800d38e:	bf00      	nop
 800d390:	20000128 	.word	0x20000128

0800d394 <lv_txt_utf8_prev>:
    (*i)--;
 800d394:	680b      	ldr	r3, [r1, #0]
{
 800d396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 800d398:	3b01      	subs	r3, #1
        c_size = lv_txt_encoded_size(&txt[*i]);
 800d39a:	4f0e      	ldr	r7, [pc, #56]	; (800d3d4 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 800d39c:	600b      	str	r3, [r1, #0]
{
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460d      	mov	r5, r1
    (*i)--;
 800d3a2:	2404      	movs	r4, #4
        c_size = lv_txt_encoded_size(&txt[*i]);
 800d3a4:	6828      	ldr	r0, [r5, #0]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	4430      	add	r0, r6
 800d3aa:	4798      	blx	r3
 800d3ac:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800d3ae:	b948      	cbnz	r0, 800d3c4 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 800d3b0:	b12b      	cbz	r3, 800d3be <lv_txt_utf8_prev+0x2a>
 800d3b2:	3c01      	subs	r4, #1
                (*i)--;
 800d3b4:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800d3b6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 800d3ba:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800d3bc:	d1f2      	bne.n	800d3a4 <lv_txt_utf8_prev+0x10>
 800d3be:	2000      	movs	r0, #0
}
 800d3c0:	b003      	add	sp, #12
 800d3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 800d3c4:	a902      	add	r1, sp, #8
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800d3c6:	4630      	mov	r0, r6
    uint32_t i_tmp  = *i;
 800d3c8:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800d3cc:	4b02      	ldr	r3, [pc, #8]	; (800d3d8 <lv_txt_utf8_prev+0x44>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4798      	blx	r3
 800d3d2:	e7f5      	b.n	800d3c0 <lv_txt_utf8_prev+0x2c>
 800d3d4:	20000130 	.word	0x20000130
 800d3d8:	20000128 	.word	0x20000128

0800d3dc <lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d3dc:	2923      	cmp	r1, #35	; 0x23
{
 800d3de:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800d3e0:	d117      	bne.n	800d412 <lv_txt_is_cmd+0x36>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800d3e2:	7803      	ldrb	r3, [r0, #0]
 800d3e4:	b91b      	cbnz	r3, 800d3ee <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	7003      	strb	r3, [r0, #0]
            ret    = true;
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	e004      	b.n	800d3f8 <lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	f04f 0000 	mov.w	r0, #0
 800d3f4:	d109      	bne.n	800d40a <lv_txt_is_cmd+0x2e>
            *state = LV_TXT_CMD_STATE_WAIT;
 800d3f6:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800d3f8:	7813      	ldrb	r3, [r2, #0]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d104      	bne.n	800d408 <lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 800d3fe:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d400:	bf04      	itt	eq
 800d402:	2102      	moveq	r1, #2
 800d404:	7011      	strbeq	r1, [r2, #0]
        ret = true;
 800d406:	4618      	mov	r0, r3
}
 800d408:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d1f4      	bne.n	800d3f8 <lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 800d40e:	7010      	strb	r0, [r2, #0]
 800d410:	e7eb      	b.n	800d3ea <lv_txt_is_cmd+0xe>
    bool ret = false;
 800d412:	2000      	movs	r0, #0
 800d414:	e7f0      	b.n	800d3f8 <lv_txt_is_cmd+0x1c>
	...

0800d418 <lv_txt_get_next_line>:
{
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	b087      	sub	sp, #28
 800d41e:	460c      	mov	r4, r1
 800d420:	9200      	str	r2, [sp, #0]
 800d422:	469a      	mov	sl, r3
 800d424:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
 800d428:	4607      	mov	r7, r0
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d072      	beq.n	800d514 <lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 800d42e:	2900      	cmp	r1, #0
 800d430:	d071      	beq.n	800d516 <lv_txt_get_next_line+0xfe>
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d432:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800d524 <lv_txt_get_next_line+0x10c>
    uint32_t i                   = 0;
 800d436:	2500      	movs	r5, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d438:	f01b 0f02 	tst.w	fp, #2
 800d43c:	f647 4218 	movw	r2, #31768	; 0x7c18
 800d440:	bf18      	it	ne
 800d442:	4692      	movne	sl, r2
    uint32_t i                   = 0;
 800d444:	9504      	str	r5, [sp, #16]
    uint32_t i_next              = 0;
 800d446:	9505      	str	r5, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800d448:	f88d 500f 	strb.w	r5, [sp, #15]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d44c:	f8d8 2000 	ldr.w	r2, [r8]
 800d450:	a905      	add	r1, sp, #20
 800d452:	4790      	blx	r2
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d454:	f00b 0301 	and.w	r3, fp, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d458:	4606      	mov	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800d45a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d45e:	9301      	str	r3, [sp, #4]
    while(txt[i] != '\0') {
 800d460:	9804      	ldr	r0, [sp, #16]
 800d462:	5c3b      	ldrb	r3, [r7, r0]
 800d464:	b90b      	cbnz	r3, 800d46a <lv_txt_get_next_line+0x52>
    return i;
 800d466:	b280      	uxth	r0, r0
 800d468:	e01e      	b.n	800d4a8 <lv_txt_get_next_line+0x90>
        i           = i_next;
 800d46a:	9b05      	ldr	r3, [sp, #20]
 800d46c:	9304      	str	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d46e:	a905      	add	r1, sp, #20
 800d470:	f8d8 3000 	ldr.w	r3, [r8]
 800d474:	4638      	mov	r0, r7
 800d476:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d478:	9b01      	ldr	r3, [sp, #4]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d47a:	4683      	mov	fp, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d47c:	b923      	cbnz	r3, 800d488 <lv_txt_get_next_line+0x70>
        if(letter == '\n' || letter == '\r') {
 800d47e:	2e0a      	cmp	r6, #10
 800d480:	d10b      	bne.n	800d49a <lv_txt_get_next_line+0x82>
                return i;
 800d482:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800d486:	e00f      	b.n	800d4a8 <lv_txt_get_next_line+0x90>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800d488:	4631      	mov	r1, r6
 800d48a:	f10d 000f 	add.w	r0, sp, #15
 800d48e:	f7ff ffa5 	bl	800d3dc <lv_txt_is_cmd>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0f3      	beq.n	800d47e <lv_txt_get_next_line+0x66>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d496:	465e      	mov	r6, fp
 800d498:	e7e2      	b.n	800d460 <lv_txt_get_next_line+0x48>
        if(letter == '\n' || letter == '\r') {
 800d49a:	2e0d      	cmp	r6, #13
 800d49c:	d107      	bne.n	800d4ae <lv_txt_get_next_line+0x96>
            if(letter == '\r' && letter_next == '\n')
 800d49e:	f1bb 0f0a 	cmp.w	fp, #10
 800d4a2:	d1ee      	bne.n	800d482 <lv_txt_get_next_line+0x6a>
                return i_next;
 800d4a4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
}
 800d4a8:	b007      	add	sp, #28
 800d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d4ae:	465a      	mov	r2, fp
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f7fe fdc2 	bl	800c03c <lv_font_get_glyph_width>
            cur_w += letter_w;
 800d4b8:	4405      	add	r5, r0
 800d4ba:	b2aa      	uxth	r2, r5
 800d4bc:	b215      	sxth	r5, r2
            if(cur_w > max_width) {
 800d4be:	45aa      	cmp	sl, r5
 800d4c0:	da1a      	bge.n	800d4f8 <lv_txt_get_next_line+0xe0>
                if(last_break != NO_BREAK_FOUND) {
 800d4c2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800d4c6:	d00a      	beq.n	800d4de <lv_txt_get_next_line+0xc6>
                    i = last_break;
 800d4c8:	f8cd 9010 	str.w	r9, [sp, #16]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800d4cc:	9b04      	ldr	r3, [sp, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1d7      	bne.n	800d482 <lv_txt_get_next_line+0x6a>
 800d4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4d6:	a904      	add	r1, sp, #16
 800d4d8:	4638      	mov	r0, r7
 800d4da:	4798      	blx	r3
 800d4dc:	e7d1      	b.n	800d482 <lv_txt_get_next_line+0x6a>
                    lv_txt_encoded_prev(txt, &i);
 800d4de:	4b0f      	ldr	r3, [pc, #60]	; (800d51c <lv_txt_get_next_line+0x104>)
 800d4e0:	a904      	add	r1, sp, #16
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	4798      	blx	r3
 800d4e8:	e7f0      	b.n	800d4cc <lv_txt_get_next_line+0xb4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800d4ea:	429e      	cmp	r6, r3
 800d4ec:	f101 0101 	add.w	r1, r1, #1
 800d4f0:	d103      	bne.n	800d4fa <lv_txt_get_next_line+0xe2>
                last_break = i; /*Save the first char index after break*/
 800d4f2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d4f6:	e007      	b.n	800d508 <lv_txt_get_next_line+0xf0>
 800d4f8:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800d4fa:	fa5f fe81 	uxtb.w	lr, r1
 800d4fe:	4b08      	ldr	r3, [pc, #32]	; (800d520 <lv_txt_get_next_line+0x108>)
 800d500:	f813 300e 	ldrb.w	r3, [r3, lr]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f0      	bne.n	800d4ea <lv_txt_get_next_line+0xd2>
        if(letter_w > 0) {
 800d508:	2800      	cmp	r0, #0
 800d50a:	d0c4      	beq.n	800d496 <lv_txt_get_next_line+0x7e>
            cur_w += letter_space;
 800d50c:	9b00      	ldr	r3, [sp, #0]
 800d50e:	18d5      	adds	r5, r2, r3
 800d510:	b22d      	sxth	r5, r5
 800d512:	e7c0      	b.n	800d496 <lv_txt_get_next_line+0x7e>
 800d514:	e7c8      	b.n	800d4a8 <lv_txt_get_next_line+0x90>
    if(txt == NULL) return 0;
 800d516:	4608      	mov	r0, r1
 800d518:	e7c6      	b.n	800d4a8 <lv_txt_get_next_line+0x90>
 800d51a:	bf00      	nop
 800d51c:	2000012c 	.word	0x2000012c
 800d520:	080faeb8 	.word	0x080faeb8
 800d524:	20000128 	.word	0x20000128

0800d528 <lv_txt_get_width>:
{
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	4688      	mov	r8, r1
 800d52e:	b085      	sub	sp, #20
 800d530:	4691      	mov	r9, r2
 800d532:	461d      	mov	r5, r3
    if(txt == NULL) return 0;
 800d534:	4606      	mov	r6, r0
 800d536:	b920      	cbnz	r0, 800d542 <lv_txt_get_width+0x1a>
 800d538:	2400      	movs	r4, #0
}
 800d53a:	4620      	mov	r0, r4
 800d53c:	b005      	add	sp, #20
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 800d542:	2a00      	cmp	r2, #0
 800d544:	d0f8      	beq.n	800d538 <lv_txt_get_width+0x10>
    uint32_t i                   = 0;
 800d546:	2400      	movs	r4, #0
 800d548:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800d54a:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 800d54e:	2900      	cmp	r1, #0
 800d550:	d0f2      	beq.n	800d538 <lv_txt_get_width+0x10>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d552:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
            letter      = lv_txt_encoded_next(txt, &i);
 800d556:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800d5b4 <lv_txt_get_width+0x8c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d55a:	f007 0701 	and.w	r7, r7, #1
        while(i < length) {
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	4598      	cmp	r8, r3
 800d562:	d804      	bhi.n	800d56e <lv_txt_get_width+0x46>
        if(width > 0) {
 800d564:	2c00      	cmp	r4, #0
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800d566:	bfc4      	itt	gt
 800d568:	1b64      	subgt	r4, r4, r5
 800d56a:	b224      	sxthgt	r4, r4
 800d56c:	e7e5      	b.n	800d53a <lv_txt_get_width+0x12>
            letter      = lv_txt_encoded_next(txt, &i);
 800d56e:	f8da 3000 	ldr.w	r3, [sl]
 800d572:	a903      	add	r1, sp, #12
 800d574:	4630      	mov	r0, r6
 800d576:	4798      	blx	r3
 800d578:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d57a:	9803      	ldr	r0, [sp, #12]
 800d57c:	f8da 3000 	ldr.w	r3, [sl]
 800d580:	2100      	movs	r1, #0
 800d582:	4430      	add	r0, r6
 800d584:	4798      	blx	r3
 800d586:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d588:	b957      	cbnz	r7, 800d5a0 <lv_txt_get_width+0x78>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800d58a:	4659      	mov	r1, fp
 800d58c:	4648      	mov	r0, r9
 800d58e:	f7fe fd55 	bl	800c03c <lv_font_get_glyph_width>
            if(char_width > 0) {
 800d592:	b203      	sxth	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	dde2      	ble.n	800d55e <lv_txt_get_width+0x36>
                width += letter_space;
 800d598:	442c      	add	r4, r5
 800d59a:	4404      	add	r4, r0
 800d59c:	b224      	sxth	r4, r4
 800d59e:	e7de      	b.n	800d55e <lv_txt_get_width+0x36>
 800d5a0:	9001      	str	r0, [sp, #4]
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800d5a2:	4659      	mov	r1, fp
 800d5a4:	f10d 000b 	add.w	r0, sp, #11
 800d5a8:	f7ff ff18 	bl	800d3dc <lv_txt_is_cmd>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d1d6      	bne.n	800d55e <lv_txt_get_width+0x36>
 800d5b0:	9a01      	ldr	r2, [sp, #4]
 800d5b2:	e7ea      	b.n	800d58a <lv_txt_get_width+0x62>
 800d5b4:	20000128 	.word	0x20000128

0800d5b8 <lv_txt_get_size>:
{
 800d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5bc:	b087      	sub	sp, #28
    size_res->x = 0;
 800d5be:	2500      	movs	r5, #0
{
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d5c6:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800d5ca:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 800d5ce:	9303      	str	r3, [sp, #12]
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	4616      	mov	r6, r2
    size_res->x = 0;
 800d5d4:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 800d5d6:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 800d5d8:	4689      	mov	r9, r1
 800d5da:	b1f9      	cbz	r1, 800d61c <lv_txt_get_size+0x64>
    if(font == NULL) return;
 800d5dc:	b1f2      	cbz	r2, 800d61c <lv_txt_get_size+0x64>
 800d5de:	7a17      	ldrb	r7, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d5e0:	f013 0f02 	tst.w	r3, #2
 800d5e4:	f647 4318 	movw	r3, #31768	; 0x7c18
 800d5e8:	bf18      	it	ne
 800d5ea:	469a      	movne	sl, r3
        size_res->y += line_space;
 800d5ec:	eb07 030b 	add.w	r3, r7, fp
 800d5f0:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 800d5f2:	f819 3005 	ldrb.w	r3, [r9, r5]
 800d5f6:	eb09 0805 	add.w	r8, r9, r5
 800d5fa:	b993      	cbnz	r3, 800d622 <lv_txt_get_size+0x6a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800d5fc:	b155      	cbz	r5, 800d614 <lv_txt_get_size+0x5c>
 800d5fe:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d602:	2b0a      	cmp	r3, #10
 800d604:	d001      	beq.n	800d60a <lv_txt_get_size+0x52>
 800d606:	2b0d      	cmp	r3, #13
 800d608:	d104      	bne.n	800d614 <lv_txt_get_size+0x5c>
        size_res->y += letter_height + line_space;
 800d60a:	8862      	ldrh	r2, [r4, #2]
 800d60c:	eb07 030b 	add.w	r3, r7, fp
 800d610:	4413      	add	r3, r2
 800d612:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800d614:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d618:	b9fb      	cbnz	r3, 800d65a <lv_txt_get_size+0xa2>
        size_res->y = letter_height;
 800d61a:	8067      	strh	r7, [r4, #2]
}
 800d61c:	b007      	add	sp, #28
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	9a04      	ldr	r2, [sp, #16]
 800d628:	4653      	mov	r3, sl
 800d62a:	4631      	mov	r1, r6
 800d62c:	4640      	mov	r0, r8
 800d62e:	f7ff fef3 	bl	800d418 <lv_txt_get_next_line>
        size_res->y += line_space;
 800d632:	8863      	ldrh	r3, [r4, #2]
 800d634:	9a05      	ldr	r2, [sp, #20]
 800d636:	4413      	add	r3, r2
 800d638:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	9300      	str	r3, [sp, #0]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d63e:	4601      	mov	r1, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800d640:	9b04      	ldr	r3, [sp, #16]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d642:	4405      	add	r5, r0
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800d644:	4632      	mov	r2, r6
 800d646:	4640      	mov	r0, r8
 800d648:	f7ff ff6e 	bl	800d528 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800d64c:	f9b4 3000 	ldrsh.w	r3, [r4]
 800d650:	4298      	cmp	r0, r3
 800d652:	bfb8      	it	lt
 800d654:	4618      	movlt	r0, r3
 800d656:	8020      	strh	r0, [r4, #0]
 800d658:	e7cb      	b.n	800d5f2 <lv_txt_get_size+0x3a>
        size_res->y -= line_space;
 800d65a:	eba3 030b 	sub.w	r3, r3, fp
 800d65e:	8063      	strh	r3, [r4, #2]
 800d660:	e7dc      	b.n	800d61c <lv_txt_get_size+0x64>

0800d662 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800d662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d666:	9d08      	ldr	r5, [sp, #32]
 800d668:	4681      	mov	r9, r0
 800d66a:	4688      	mov	r8, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800d670:	b914      	cbnz	r4, 800d678 <lv_utils_bsearch+0x16>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800d672:	4620      	mov	r0, r4
 800d674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
 800d678:	0867      	lsrs	r7, r4, #1
 800d67a:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800d67e:	4631      	mov	r1, r6
 800d680:	4648      	mov	r0, r9
 800d682:	47a8      	blx	r5
 800d684:	2800      	cmp	r0, #0
 800d686:	dd07      	ble.n	800d698 <lv_utils_bsearch+0x36>
 800d688:	43e1      	mvns	r1, r4
 800d68a:	f001 0101 	and.w	r1, r1, #1
            n    = (n / 2) - ((n & 1) == 0);
 800d68e:	1a7f      	subs	r7, r7, r1
            base = (middle += size);
 800d690:	eb06 080a 	add.w	r8, r6, sl
 800d694:	463c      	mov	r4, r7
 800d696:	e7eb      	b.n	800d670 <lv_utils_bsearch+0xe>
        } else if(c < 0) {
 800d698:	d1fc      	bne.n	800d694 <lv_utils_bsearch+0x32>
        middle += (n / 2) * size;
 800d69a:	4630      	mov	r0, r6
}
 800d69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d6a0 <lv_bar_anim>:
    return res;
}

#if LV_USE_ANIMATION
static void lv_bar_anim(void * bar, lv_anim_value_t value)
{
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d6a6:	f7fa fa53 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->anim_state    = value;
 800d6aa:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(bar);
 800d6ac:	4620      	mov	r0, r4
}
 800d6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(bar);
 800d6b2:	f7f9 bc77 	b.w	8006fa4 <lv_obj_invalidate>
	...

0800d6b8 <lv_bar_signal>:
{
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(bar, sign, param);
 800d6ba:	4b13      	ldr	r3, [pc, #76]	; (800d708 <lv_bar_signal+0x50>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
{
 800d6be:	4604      	mov	r4, r0
 800d6c0:	460f      	mov	r7, r1
 800d6c2:	4616      	mov	r6, r2
    res = ancestor_signal(bar, sign, param);
 800d6c4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800d6c6:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 800d6c8:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800d6ca:	d10c      	bne.n	800d6e6 <lv_bar_signal+0x2e>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800d6cc:	2f05      	cmp	r7, #5
 800d6ce:	d10c      	bne.n	800d6ea <lv_bar_signal+0x32>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7fa fa3d 	bl	8007b50 <lv_obj_get_ext_attr>
        if(style_indic->body.shadow.width > bar->ext_draw_pad) bar->ext_draw_pad = style_indic->body.shadow.width;
 800d6d6:	6903      	ldr	r3, [r0, #16]
 800d6d8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800d6dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	da00      	bge.n	800d6e6 <lv_bar_signal+0x2e>
 800d6e4:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800d6ea:	2f06      	cmp	r7, #6
 800d6ec:	d1fb      	bne.n	800d6e6 <lv_bar_signal+0x2e>
 800d6ee:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800d6f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	b119      	cbz	r1, 800d700 <lv_bar_signal+0x48>
 800d6f8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800d6fa:	2b07      	cmp	r3, #7
 800d6fc:	d1f8      	bne.n	800d6f0 <lv_bar_signal+0x38>
 800d6fe:	461a      	mov	r2, r3
        buf->type[i] = "lv_bar";
 800d700:	4b02      	ldr	r3, [pc, #8]	; (800d70c <lv_bar_signal+0x54>)
 800d702:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800d706:	e7ee      	b.n	800d6e6 <lv_bar_signal+0x2e>
 800d708:	2001515c 	.word	0x2001515c
 800d70c:	080faec0 	.word	0x080faec0

0800d710 <lv_bar_set_value>:
{
 800d710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d712:	b08b      	sub	sp, #44	; 0x2c
 800d714:	460e      	mov	r6, r1
 800d716:	4605      	mov	r5, r0
 800d718:	4617      	mov	r7, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d71a:	f7fa fa19 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->cur_value == value) return;
 800d71e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d722:	42b3      	cmp	r3, r6
 800d724:	d010      	beq.n	800d748 <lv_bar_set_value+0x38>
    new_value = value > ext->max_value ? ext->max_value : value;
 800d726:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 800d72a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    new_value = value > ext->max_value ? ext->max_value : value;
 800d72e:	42b4      	cmp	r4, r6
 800d730:	bfa8      	it	ge
 800d732:	4634      	movge	r4, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 800d734:	42a1      	cmp	r1, r4
 800d736:	bfb8      	it	lt
 800d738:	4621      	movlt	r1, r4
    if(ext->cur_value == new_value) return;
 800d73a:	428b      	cmp	r3, r1
 800d73c:	d004      	beq.n	800d748 <lv_bar_set_value+0x38>
    if(anim == LV_ANIM_OFF) {
 800d73e:	b92f      	cbnz	r7, 800d74c <lv_bar_set_value+0x3c>
        ext->cur_value = new_value;
 800d740:	8001      	strh	r1, [r0, #0]
        lv_obj_invalidate(bar);
 800d742:	4628      	mov	r0, r5
 800d744:	f7f9 fc2e 	bl	8006fa4 <lv_obj_invalidate>
}
 800d748:	b00b      	add	sp, #44	; 0x2c
 800d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 800d74c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        a.var            = bar;
 800d750:	9501      	str	r5, [sp, #4]
        if(ext->anim_state == LV_BAR_ANIM_STATE_INV) {
 800d752:	3201      	adds	r2, #1
            ext->anim_start = ext->anim_end;
 800d754:	bf18      	it	ne
 800d756:	8903      	ldrhne	r3, [r0, #8]
 800d758:	80c3      	strh	r3, [r0, #6]
        a.end            = LV_BAR_ANIM_STATE_END;
 800d75a:	f44f 7280 	mov.w	r2, #256	; 0x100
            ext->anim_end   = new_value;
 800d75e:	8101      	strh	r1, [r0, #8]
        a.end            = LV_BAR_ANIM_STATE_END;
 800d760:	9206      	str	r2, [sp, #24]
        a.exec_cb        = (lv_anim_exec_xcb_t)lv_bar_anim;
 800d762:	4a0e      	ldr	r2, [pc, #56]	; (800d79c <lv_bar_set_value+0x8c>)
 800d764:	9202      	str	r2, [sp, #8]
        a.path_cb        = lv_anim_path_linear;
 800d766:	4a0e      	ldr	r2, [pc, #56]	; (800d7a0 <lv_bar_set_value+0x90>)
 800d768:	9203      	str	r2, [sp, #12]
        a.ready_cb       = lv_bar_anim_ready;
 800d76a:	4a0e      	ldr	r2, [pc, #56]	; (800d7a4 <lv_bar_set_value+0x94>)
 800d76c:	9204      	str	r2, [sp, #16]
        a.time           = ext->anim_time;
 800d76e:	8982      	ldrh	r2, [r0, #12]
 800d770:	f8ad 201c 	strh.w	r2, [sp, #28]
        a.playback       = 0;
 800d774:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
        a.start          = LV_BAR_ANIM_STATE_START;
 800d778:	2300      	movs	r3, #0
        a.repeat         = 0;
 800d77a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d77e:	f363 0241 	bfi	r2, r3, #1, #1
        lv_anim_create(&a);
 800d782:	a801      	add	r0, sp, #4
        a.start          = LV_BAR_ANIM_STATE_START;
 800d784:	9305      	str	r3, [sp, #20]
        a.act_time       = 0;
 800d786:	f8ad 301e 	strh.w	r3, [sp, #30]
        a.playback_pause = 0;
 800d78a:	f8ad 3020 	strh.w	r3, [sp, #32]
        a.repeat         = 0;
 800d78e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        a.repeat_pause   = 0;
 800d792:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_anim_create(&a);
 800d796:	f7fe ffd9 	bl	800c74c <lv_anim_create>
 800d79a:	e7d5      	b.n	800d748 <lv_bar_set_value+0x38>
 800d79c:	0800d6a1 	.word	0x0800d6a1
 800d7a0:	0800c56d 	.word	0x0800c56d
 800d7a4:	0800d7a9 	.word	0x0800d7a9

0800d7a8 <lv_bar_anim_ready>:

static void lv_bar_anim_ready(lv_anim_t * a)
{
 800d7a8:	b510      	push	{r4, lr}
 800d7aa:	4604      	mov	r4, r0
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(a->var);
 800d7ac:	6800      	ldr	r0, [r0, #0]
 800d7ae:	f7fa f9cf 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->anim_state    = LV_BAR_ANIM_STATE_INV;
 800d7b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7b6:	8143      	strh	r3, [r0, #10]
    lv_bar_set_value(a->var, ext->anim_end, false);
 800d7b8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800d7bc:	6820      	ldr	r0, [r4, #0]
 800d7be:	2200      	movs	r2, #0
}
 800d7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_bar_set_value(a->var, ext->anim_end, false);
 800d7c4:	f7ff bfa4 	b.w	800d710 <lv_bar_set_value>

0800d7c8 <lv_bar_set_range>:
{
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	460d      	mov	r5, r1
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	4616      	mov	r6, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d7d0:	f7fa f9be 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 800d7d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d7d8:	42ab      	cmp	r3, r5
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d7da:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 800d7dc:	d103      	bne.n	800d7e6 <lv_bar_set_range+0x1e>
 800d7de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d7e2:	42b3      	cmp	r3, r6
 800d7e4:	d01a      	beq.n	800d81c <lv_bar_set_range+0x54>
    if(ext->cur_value > max) {
 800d7e6:	f9b4 3000 	ldrsh.w	r3, [r4]
    ext->max_value = max;
 800d7ea:	80a6      	strh	r6, [r4, #4]
    if(ext->cur_value > max) {
 800d7ec:	42b3      	cmp	r3, r6
    ext->min_value = min;
 800d7ee:	8065      	strh	r5, [r4, #2]
    if(ext->cur_value > max) {
 800d7f0:	dd05      	ble.n	800d7fe <lv_bar_set_range+0x36>
        ext->cur_value = max;
 800d7f2:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7ff ff89 	bl	800d710 <lv_bar_set_value>
    if(ext->cur_value < min) {
 800d7fe:	f9b4 3000 	ldrsh.w	r3, [r4]
 800d802:	42ab      	cmp	r3, r5
 800d804:	da05      	bge.n	800d812 <lv_bar_set_range+0x4a>
        ext->cur_value = min;
 800d806:	8025      	strh	r5, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 800d808:	2200      	movs	r2, #0
 800d80a:	4629      	mov	r1, r5
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff ff7f 	bl	800d710 <lv_bar_set_value>
    lv_obj_invalidate(bar);
 800d812:	4638      	mov	r0, r7
}
 800d814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 800d818:	f7f9 bbc4 	b.w	8006fa4 <lv_obj_invalidate>
 800d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d81e <lv_bar_set_style>:
{
 800d81e:	b570      	push	{r4, r5, r6, lr}
 800d820:	460e      	mov	r6, r1
 800d822:	4604      	mov	r4, r0
 800d824:	4615      	mov	r5, r2
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d826:	f7fa f993 	bl	8007b50 <lv_obj_get_ext_attr>
    switch(type) {
 800d82a:	b116      	cbz	r6, 800d832 <lv_bar_set_style+0x14>
 800d82c:	2e01      	cmp	r6, #1
 800d82e:	d006      	beq.n	800d83e <lv_bar_set_style+0x20>
 800d830:	bd70      	pop	{r4, r5, r6, pc}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 800d832:	4629      	mov	r1, r5
 800d834:	4620      	mov	r0, r4
}
 800d836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_BAR_STYLE_BG: lv_obj_set_style(bar, style); break;
 800d83a:	f7fa b876 	b.w	800792a <lv_obj_set_style>
            ext->style_indic = style;
 800d83e:	6105      	str	r5, [r0, #16]
            lv_obj_refresh_ext_draw_pad(bar);
 800d840:	4620      	mov	r0, r4
}
 800d842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(bar);
 800d846:	f7fa b840 	b.w	80078ca <lv_obj_refresh_ext_draw_pad>
	...

0800d84c <lv_bar_create>:
{
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	460f      	mov	r7, r1
    lv_obj_t * new_bar = lv_obj_create(par, copy);
 800d852:	f7f9 fe8b 	bl	800756c <lv_obj_create>
    lv_mem_assert(new_bar);
 800d856:	4605      	mov	r5, r0
 800d858:	b900      	cbnz	r0, 800d85c <lv_bar_create+0x10>
 800d85a:	e7fe      	b.n	800d85a <lv_bar_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_bar);
 800d85c:	4c39      	ldr	r4, [pc, #228]	; (800d944 <lv_bar_create+0xf8>)
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	b913      	cbnz	r3, 800d868 <lv_bar_create+0x1c>
 800d862:	f7fa f971 	bl	8007b48 <lv_obj_get_signal_cb>
 800d866:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_bar);
 800d868:	4c37      	ldr	r4, [pc, #220]	; (800d948 <lv_bar_create+0xfc>)
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	b91b      	cbnz	r3, 800d876 <lv_bar_create+0x2a>
 800d86e:	4628      	mov	r0, r5
 800d870:	f7fa f96c 	bl	8007b4c <lv_obj_get_design_cb>
 800d874:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(new_bar, sizeof(lv_bar_ext_t));
 800d876:	2114      	movs	r1, #20
 800d878:	4628      	mov	r0, r5
 800d87a:	f7f9 fb66 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800d87e:	4604      	mov	r4, r0
 800d880:	b900      	cbnz	r0, 800d884 <lv_bar_create+0x38>
 800d882:	e7fe      	b.n	800d882 <lv_bar_create+0x36>
    ext->max_value = 100;
 800d884:	2364      	movs	r3, #100	; 0x64
 800d886:	8083      	strh	r3, [r0, #4]
    ext->anim_state = LV_BAR_ANIM_STATE_INV;
 800d888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d88c:	8143      	strh	r3, [r0, #10]
    ext->sym         = 0;
 800d88e:	7b83      	ldrb	r3, [r0, #14]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 800d890:	492e      	ldr	r1, [pc, #184]	; (800d94c <lv_bar_create+0x100>)
    ext->min_value = 0;
 800d892:	2600      	movs	r6, #0
    ext->sym         = 0;
 800d894:	f366 0300 	bfi	r3, r6, #0, #1
 800d898:	7383      	strb	r3, [r0, #14]
    ext->anim_time  = 200;
 800d89a:	f04f 08c8 	mov.w	r8, #200	; 0xc8
    ext->style_indic = &lv_style_pretty_color;
 800d89e:	4b2c      	ldr	r3, [pc, #176]	; (800d950 <lv_bar_create+0x104>)
    ext->min_value = 0;
 800d8a0:	8046      	strh	r6, [r0, #2]
    ext->cur_value = 0;
 800d8a2:	8006      	strh	r6, [r0, #0]
    ext->anim_time  = 200;
 800d8a4:	f8a0 800c 	strh.w	r8, [r0, #12]
    ext->anim_start = 0;
 800d8a8:	80c6      	strh	r6, [r0, #6]
    ext->anim_end   = 0;
 800d8aa:	8106      	strh	r6, [r0, #8]
    ext->style_indic = &lv_style_pretty_color;
 800d8ac:	6103      	str	r3, [r0, #16]
    lv_obj_set_signal_cb(new_bar, lv_bar_signal);
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7f9 fb47 	bl	8006f42 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_bar, lv_bar_design);
 800d8b4:	4927      	ldr	r1, [pc, #156]	; (800d954 <lv_bar_create+0x108>)
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f7f9 fb45 	bl	8006f46 <lv_obj_set_design_cb>
    if(copy == NULL) {
 800d8bc:	bb27      	cbnz	r7, 800d908 <lv_bar_create+0xbc>
        lv_obj_set_click(new_bar, false);
 800d8be:	4639      	mov	r1, r7
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	f7f9 fadb 	bl	8006e7c <lv_obj_set_click>
        lv_obj_set_size(new_bar, LV_DPI * 2, LV_DPI / 3);
 800d8c6:	2221      	movs	r2, #33	; 0x21
 800d8c8:	4641      	mov	r1, r8
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f7f9 ff96 	bl	80077fc <lv_obj_set_size>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 800d8d0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d8d4:	463a      	mov	r2, r7
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	f7ff ff1a 	bl	800d710 <lv_bar_set_value>
        lv_theme_t * th = lv_theme_get_current();
 800d8dc:	f002 fd06 	bl	80102ec <lv_theme_get_current>
        if(th) {
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	b160      	cbz	r0, 800d8fe <lv_bar_create+0xb2>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_BG, th->style.bar.bg);
 800d8e4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	f7ff ff98 	bl	800d81e <lv_bar_set_style>
            lv_bar_set_style(new_bar, LV_BAR_STYLE_INDIC, th->style.bar.indic);
 800d8ee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f7ff ff93 	bl	800d81e <lv_bar_set_style>
}
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_obj_set_style(new_bar, &lv_style_pretty);
 800d8fe:	4916      	ldr	r1, [pc, #88]	; (800d958 <lv_bar_create+0x10c>)
 800d900:	4628      	mov	r0, r5
 800d902:	f7fa f812 	bl	800792a <lv_obj_set_style>
 800d906:	e7f7      	b.n	800d8f8 <lv_bar_create+0xac>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 800d908:	4638      	mov	r0, r7
 800d90a:	f7fa f921 	bl	8007b50 <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 800d90e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d912:	8063      	strh	r3, [r4, #2]
        ext->max_value          = ext_copy->max_value;
 800d914:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d918:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 800d91a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d91e:	8023      	strh	r3, [r4, #0]
        ext->style_indic        = ext_copy->style_indic;
 800d920:	6903      	ldr	r3, [r0, #16]
 800d922:	6123      	str	r3, [r4, #16]
        ext->sym                = ext_copy->sym;
 800d924:	7b82      	ldrb	r2, [r0, #14]
 800d926:	7ba3      	ldrb	r3, [r4, #14]
 800d928:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_bar);
 800d92c:	4628      	mov	r0, r5
        ext->sym                = ext_copy->sym;
 800d92e:	73a3      	strb	r3, [r4, #14]
        lv_obj_refresh_style(new_bar);
 800d930:	f7f9 ffbd 	bl	80078ae <lv_obj_refresh_style>
        lv_bar_set_value(new_bar, ext->cur_value, false);
 800d934:	4632      	mov	r2, r6
 800d936:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d93a:	4628      	mov	r0, r5
 800d93c:	f7ff fee8 	bl	800d710 <lv_bar_set_value>
 800d940:	e7da      	b.n	800d8f8 <lv_bar_create+0xac>
 800d942:	bf00      	nop
 800d944:	2001515c 	.word	0x2001515c
 800d948:	20015158 	.word	0x20015158
 800d94c:	0800d6b9 	.word	0x0800d6b9
 800d950:	20015a40 	.word	0x20015a40
 800d954:	0800d9b1 	.word	0x0800d9b1
 800d958:	20015b80 	.word	0x20015b80

0800d95c <lv_bar_get_value>:
{
 800d95c:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d95e:	f7fa f8f7 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->anim_state != LV_BAR_ANIM_STATE_INV) return ext->anim_end;
 800d962:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800d966:	3301      	adds	r3, #1
 800d968:	bf14      	ite	ne
 800d96a:	f9b0 0008 	ldrshne.w	r0, [r0, #8]
    return ext->cur_value;
 800d96e:	f9b0 0000 	ldrsheq.w	r0, [r0]
}
 800d972:	bd08      	pop	{r3, pc}

0800d974 <lv_bar_get_min_value>:
{
 800d974:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d976:	f7fa f8eb 	bl	8007b50 <lv_obj_get_ext_attr>
}
 800d97a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800d97e:	bd08      	pop	{r3, pc}

0800d980 <lv_bar_get_max_value>:
{
 800d980:	b508      	push	{r3, lr}
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800d982:	f7fa f8e5 	bl	8007b50 <lv_obj_get_ext_attr>
}
 800d986:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800d98a:	bd08      	pop	{r3, pc}

0800d98c <lv_bar_get_style>:
{
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	460c      	mov	r4, r1
 800d990:	4605      	mov	r5, r0
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 800d992:	f7fa f8dd 	bl	8007b50 <lv_obj_get_ext_attr>
    switch(type) {
 800d996:	b11c      	cbz	r4, 800d9a0 <lv_bar_get_style+0x14>
 800d998:	2c01      	cmp	r4, #1
 800d99a:	d006      	beq.n	800d9aa <lv_bar_get_style+0x1e>
        default: style = NULL; break;
 800d99c:	2000      	movs	r0, #0
}
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 800d9a0:	4628      	mov	r0, r5
}
 800d9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_BAR_STYLE_BG: style = lv_obj_get_style(bar); break;
 800d9a6:	f7f9 bfed 	b.w	8007984 <lv_obj_get_style>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 800d9aa:	6900      	ldr	r0, [r0, #16]
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d9b0 <lv_bar_design>:
{
 800d9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800d9b4:	2a02      	cmp	r2, #2
{
 800d9b6:	b095      	sub	sp, #84	; 0x54
 800d9b8:	4605      	mov	r5, r0
 800d9ba:	460e      	mov	r6, r1
 800d9bc:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 800d9be:	d107      	bne.n	800d9d0 <lv_bar_design+0x20>
        return ancestor_design_f(bar, mask, mode);
 800d9c0:	4b98      	ldr	r3, [pc, #608]	; (800dc24 <lv_bar_design+0x274>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4798      	blx	r3
 800d9c6:	4604      	mov	r4, r0
}
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	b015      	add	sp, #84	; 0x54
 800d9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800d9d0:	2a00      	cmp	r2, #0
 800d9d2:	f040 8105 	bne.w	800dbe0 <lv_bar_design+0x230>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(bar);
 800d9d6:	f7fa f853 	bl	8007a80 <lv_obj_get_opa_scale>
 800d9da:	4607      	mov	r7, r0
        if(lv_obj_is_focused(bar)) {
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f7fa f8bb 	bl	8007b58 <lv_obj_is_focused>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	b318      	cbz	r0, 800da2e <lv_bar_design+0x7e>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	f7ff ffcf 	bl	800d98c <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	4668      	mov	r0, sp
 800d9f2:	f7fa fbf7 	bl	80081e4 <lv_style_copy>
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800d9f6:	463b      	mov	r3, r7
 800d9f8:	466a      	mov	r2, sp
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	f105 0010 	add.w	r0, r5, #16
            style_tmp.body.border.width = 0;
 800da00:	f8ad 4014 	strh.w	r4, [sp, #20]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800da04:	f7fb ff72 	bl	80098ec <lv_draw_rect>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800da08:	4628      	mov	r0, r5
 800da0a:	f7fa f8a1 	bl	8007b50 <lv_obj_get_ext_attr>
        if(ext->cur_value != ext->min_value || ext->sym
 800da0e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da12:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800da16:	429a      	cmp	r2, r3
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 800da18:	4604      	mov	r4, r0
        if(ext->cur_value != ext->min_value || ext->sym
 800da1a:	d10e      	bne.n	800da3a <lv_bar_design+0x8a>
 800da1c:	7b83      	ldrb	r3, [r0, #14]
 800da1e:	07db      	lsls	r3, r3, #31
 800da20:	d40b      	bmi.n	800da3a <lv_bar_design+0x8a>
           || ext->anim_start != LV_BAR_ANIM_STATE_INV
 800da22:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800da26:	3301      	adds	r3, #1
 800da28:	d107      	bne.n	800da3a <lv_bar_design+0x8a>
    return true;
 800da2a:	2401      	movs	r4, #1
 800da2c:	e7cc      	b.n	800d9c8 <lv_bar_design+0x18>
            ancestor_design_f(bar, mask, mode);
 800da2e:	4b7d      	ldr	r3, [pc, #500]	; (800dc24 <lv_bar_design+0x274>)
 800da30:	4631      	mov	r1, r6
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4628      	mov	r0, r5
 800da36:	4798      	blx	r3
 800da38:	e7e6      	b.n	800da08 <lv_bar_design+0x58>
    lv_bar_ext_t * ext       = lv_obj_get_ext_attr(bar);
 800da3a:	4628      	mov	r0, r5
 800da3c:	f7fa f888 	bl	8007b50 <lv_obj_get_ext_attr>
        case LV_BAR_STYLE_INDIC: style = ext->style_indic; break;
 800da40:	6902      	ldr	r2, [r0, #16]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 800da42:	f855 0f10 	ldr.w	r0, [r5, #16]!
 800da46:	6869      	ldr	r1, [r5, #4]
 800da48:	466b      	mov	r3, sp
 800da4a:	c303      	stmia	r3!, {r0, r1}
            indic_area.x1 += style_indic->body.padding.left;
 800da4c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800da4e:	f8bd e000 	ldrh.w	lr, [sp]
            indic_area.x2 -= style_indic->body.padding.right;
 800da52:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
            indic_area.y2 -= style_indic->body.padding.bottom;
 800da54:	f8bd 0006 	ldrh.w	r0, [sp, #6]
            indic_area.y1 += style_indic->body.padding.top;
 800da58:	f8b2 c020 	ldrh.w	ip, [r2, #32]
 800da5c:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800da60:	f894 800e 	ldrb.w	r8, [r4, #14]
 800da64:	f9b4 900a 	ldrsh.w	r9, [r4, #10]
            indic_area.x1 += style_indic->body.padding.left;
 800da68:	449e      	add	lr, r3
            indic_area.x2 -= style_indic->body.padding.right;
 800da6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800da6e:	1a5b      	subs	r3, r3, r1
            indic_area.y2 -= style_indic->body.padding.bottom;
 800da70:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 800da72:	1a40      	subs	r0, r0, r1
            indic_area.x2 -= style_indic->body.padding.right;
 800da74:	b29b      	uxth	r3, r3
            indic_area.y1 += style_indic->body.padding.top;
 800da76:	4465      	add	r5, ip
            indic_area.y2 -= style_indic->body.padding.bottom;
 800da78:	b280      	uxth	r0, r0
            indic_area.y1 += style_indic->body.padding.top;
 800da7a:	b2ad      	uxth	r5, r5
            indic_area.x1 += style_indic->body.padding.left;
 800da7c:	fa1f fe8e 	uxth.w	lr, lr
            indic_area.x2 -= style_indic->body.padding.right;
 800da80:	f8ad 3004 	strh.w	r3, [sp, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800da84:	f100 0c01 	add.w	ip, r0, #1
    return area_p->x2 - area_p->x1 + 1;
 800da88:	3301      	adds	r3, #1
    return area_p->y2 - area_p->y1 + 1;
 800da8a:	ebac 0c05 	sub.w	ip, ip, r5
    return area_p->x2 - area_p->x1 + 1;
 800da8e:	eba3 030e 	sub.w	r3, r3, lr
 800da92:	b21b      	sxth	r3, r3
    return area_p->y2 - area_p->y1 + 1;
 800da94:	fa0f fc8c 	sxth.w	ip, ip
            if(w >= h) {
 800da98:	459c      	cmp	ip, r3
            indic_area.y1 += style_indic->body.padding.top;
 800da9a:	f8ad 5002 	strh.w	r5, [sp, #2]
            indic_area.x1 += style_indic->body.padding.left;
 800da9e:	f8ad e000 	strh.w	lr, [sp]
            indic_area.y2 -= style_indic->body.padding.bottom;
 800daa2:	f8ad 0006 	strh.w	r0, [sp, #6]
 800daa6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800daaa:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
            if(w >= h) {
 800daae:	dc4b      	bgt.n	800db48 <lv_bar_design+0x198>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 800dab0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800dab4:	d03e      	beq.n	800db34 <lv_bar_design+0x184>
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800dab6:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800daba:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800dabe:	ebac 0c01 	sub.w	ip, ip, r1
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800dac2:	1a40      	subs	r0, r0, r1
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800dac4:	1a6d      	subs	r5, r5, r1
 800dac6:	fb03 fc0c 	mul.w	ip, r3, ip
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800daca:	4358      	muls	r0, r3
                        (int32_t)((int32_t)w * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800dacc:	fb9c fcf5 	sdiv	ip, ip, r5
                        (int32_t)((int32_t)w * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800dad0:	fb90 f0f5 	sdiv	r0, r0, r5
                        anim_start_x + (((anim_end_x - anim_start_x) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 800dad4:	fa0f f58c 	sxth.w	r5, ip
 800dad8:	b200      	sxth	r0, r0
 800dada:	1b40      	subs	r0, r0, r5
 800dadc:	fb09 f000 	mul.w	r0, r9, r0
 800dae0:	eb0c 2020 	add.w	r0, ip, r0, asr #8
                    indic_area.x2 =
 800dae4:	f8ad 0004 	strh.w	r0, [sp, #4]
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 800dae8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800daec:	3801      	subs	r0, #1
 800daee:	4470      	add	r0, lr
 800daf0:	b200      	sxth	r0, r0
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 800daf2:	f018 0f01 	tst.w	r8, #1
                indic_area.x2 = indic_area.x1 + indic_area.x2 - 1;
 800daf6:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 800dafa:	d015      	beq.n	800db28 <lv_bar_design+0x178>
 800dafc:	2900      	cmp	r1, #0
 800dafe:	da13      	bge.n	800db28 <lv_bar_design+0x178>
 800db00:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800db04:	2c00      	cmp	r4, #0
 800db06:	dd0f      	ble.n	800db28 <lv_bar_design+0x178>
                    zero = indic_area.x1 + (-ext->min_value * w) / (ext->max_value - ext->min_value);
 800db08:	424d      	negs	r5, r1
 800db0a:	436b      	muls	r3, r5
 800db0c:	1a61      	subs	r1, r4, r1
 800db0e:	fb93 f3f1 	sdiv	r3, r3, r1
 800db12:	449e      	add	lr, r3
 800db14:	fa0f fe8e 	sxth.w	lr, lr
                    if(indic_area.x2 > zero)
 800db18:	4570      	cmp	r0, lr
                        indic_area.x1 = zero;
 800db1a:	bfce      	itee	gt
 800db1c:	f8ad e000 	strhgt.w	lr, [sp]
                        indic_area.x1 = indic_area.x2;
 800db20:	f8ad 0000 	strhle.w	r0, [sp]
                        indic_area.x2 = zero;
 800db24:	f8ad e004 	strhle.w	lr, [sp, #4]
            lv_draw_rect(&indic_area, mask, style_indic, opa_scale);
 800db28:	463b      	mov	r3, r7
 800db2a:	4631      	mov	r1, r6
 800db2c:	4668      	mov	r0, sp
 800db2e:	f7fb fedd 	bl	80098ec <lv_draw_rect>
 800db32:	e77a      	b.n	800da2a <lv_bar_design+0x7a>
                        (int32_t)((int32_t)w * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 800db34:	f9b4 0000 	ldrsh.w	r0, [r4]
 800db38:	1a40      	subs	r0, r0, r1
 800db3a:	4358      	muls	r0, r3
 800db3c:	1a6d      	subs	r5, r5, r1
 800db3e:	fb90 f5f5 	sdiv	r5, r0, r5
                    indic_area.x2 =
 800db42:	f8ad 5004 	strh.w	r5, [sp, #4]
 800db46:	e7cf      	b.n	800dae8 <lv_bar_design+0x138>
                if(ext->anim_state != LV_BAR_ANIM_STATE_INV) {
 800db48:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800db4c:	d03d      	beq.n	800dbca <lv_bar_design+0x21a>
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800db4e:	eba5 0e01 	sub.w	lr, r5, r1
 800db52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800db56:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800db5a:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800db5c:	1a6d      	subs	r5, r5, r1
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800db5e:	fb0c f303 	mul.w	r3, ip, r3
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800db62:	fb0c f505 	mul.w	r5, ip, r5
                        (int32_t)((int32_t)h * (ext->anim_start - ext->min_value)) / (ext->max_value - ext->min_value);
 800db66:	fb93 f3fe 	sdiv	r3, r3, lr
                        (int32_t)((int32_t)h * (ext->anim_end - ext->min_value)) / (ext->max_value - ext->min_value);
 800db6a:	fb95 f5fe 	sdiv	r5, r5, lr
                        anim_start_y + (((anim_end_y - anim_start_y) * ext->anim_state) >> LV_BAR_ANIM_STATE_NORM);
 800db6e:	fa0f fe83 	sxth.w	lr, r3
 800db72:	b22d      	sxth	r5, r5
 800db74:	eba5 050e 	sub.w	r5, r5, lr
 800db78:	fb09 f905 	mul.w	r9, r9, r5
 800db7c:	eb03 2929 	add.w	r9, r3, r9, asr #8
                    indic_area.y1 =
 800db80:	f8ad 9002 	strh.w	r9, [sp, #2]
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 800db84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800db88:	f1c3 0301 	rsb	r3, r3, #1
 800db8c:	4403      	add	r3, r0
 800db8e:	b21b      	sxth	r3, r3
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 800db90:	f018 0f01 	tst.w	r8, #1
                indic_area.y1 = indic_area.y2 - indic_area.y1 + 1;
 800db94:	f8ad 3002 	strh.w	r3, [sp, #2]
                if(ext->sym && ext->min_value < 0 && ext->max_value > 0) {
 800db98:	d0c6      	beq.n	800db28 <lv_bar_design+0x178>
 800db9a:	2900      	cmp	r1, #0
 800db9c:	dac4      	bge.n	800db28 <lv_bar_design+0x178>
 800db9e:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 800dba2:	2c00      	cmp	r4, #0
 800dba4:	ddc0      	ble.n	800db28 <lv_bar_design+0x178>
                    zero = indic_area.y2 - (-ext->min_value * h) / (ext->max_value - ext->min_value);
 800dba6:	424d      	negs	r5, r1
 800dba8:	fb0c fc05 	mul.w	ip, ip, r5
 800dbac:	1a61      	subs	r1, r4, r1
 800dbae:	fb9c fcf1 	sdiv	ip, ip, r1
 800dbb2:	eba0 000c 	sub.w	r0, r0, ip
 800dbb6:	b200      	sxth	r0, r0
                    if(indic_area.y1 < zero)
 800dbb8:	4283      	cmp	r3, r0
                        indic_area.y2 = zero;
 800dbba:	bfb2      	itee	lt
 800dbbc:	f8ad 0006 	strhlt.w	r0, [sp, #6]
                        indic_area.y2 = indic_area.y1;
 800dbc0:	f8ad 3006 	strhge.w	r3, [sp, #6]
                        indic_area.y1 = zero;
 800dbc4:	f8ad 0002 	strhge.w	r0, [sp, #2]
 800dbc8:	e7ae      	b.n	800db28 <lv_bar_design+0x178>
                        (int32_t)((int32_t)h * (ext->cur_value - ext->min_value)) / (ext->max_value - ext->min_value);
 800dbca:	f9b4 3000 	ldrsh.w	r3, [r4]
 800dbce:	1a5b      	subs	r3, r3, r1
 800dbd0:	fb0c f303 	mul.w	r3, ip, r3
 800dbd4:	1a6d      	subs	r5, r5, r1
 800dbd6:	fb93 f5f5 	sdiv	r5, r3, r5
                    indic_area.y1 =
 800dbda:	f8ad 5002 	strh.w	r5, [sp, #2]
 800dbde:	e7d1      	b.n	800db84 <lv_bar_design+0x1d4>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800dbe0:	2a01      	cmp	r2, #1
 800dbe2:	f47f af22 	bne.w	800da2a <lv_bar_design+0x7a>
        if(lv_obj_is_focused(bar)) {
 800dbe6:	f7f9 ffb7 	bl	8007b58 <lv_obj_is_focused>
 800dbea:	4604      	mov	r4, r0
 800dbec:	2800      	cmp	r0, #0
 800dbee:	f43f af1c 	beq.w	800da2a <lv_bar_design+0x7a>
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7f9 ff44 	bl	8007a80 <lv_obj_get_opa_scale>
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800dbf8:	2100      	movs	r1, #0
            lv_opa_t opa_scale          = lv_obj_get_opa_scale(bar);
 800dbfa:	4607      	mov	r7, r0
            const lv_style_t * style_bg = lv_bar_get_style(bar, LV_BAR_STYLE_BG);
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	f7ff fec5 	bl	800d98c <lv_bar_get_style>
            lv_style_copy(&style_tmp, style_bg);
 800dc02:	4601      	mov	r1, r0
 800dc04:	4668      	mov	r0, sp
 800dc06:	f7fa faed 	bl	80081e4 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f88d 200e 	strb.w	r2, [sp, #14]
            style_tmp.body.shadow.width = 0;
 800dc10:	f8ad 201c 	strh.w	r2, [sp, #28]
            lv_draw_rect(&bar->coords, mask, &style_tmp, opa_scale);
 800dc14:	463b      	mov	r3, r7
 800dc16:	466a      	mov	r2, sp
 800dc18:	4631      	mov	r1, r6
 800dc1a:	f105 0010 	add.w	r0, r5, #16
 800dc1e:	f7fb fe65 	bl	80098ec <lv_draw_rect>
 800dc22:	e6d1      	b.n	800d9c8 <lv_bar_design+0x18>
 800dc24:	20015158 	.word	0x20015158

0800dc28 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btn_design(lv_obj_t * btn, const lv_area_t * mask, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 800dc28:	2a02      	cmp	r2, #2
{
 800dc2a:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 800dc2c:	d008      	beq.n	800dc40 <lv_btn_design+0x18>
        return false;
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800dc2e:	b91a      	cbnz	r2, 800dc38 <lv_btn_design+0x10>
        }
#else
        ancestor_design(btn, mask, mode);
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, mask, mode);
 800dc30:	4b04      	ldr	r3, [pc, #16]	; (800dc44 <lv_btn_design+0x1c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4798      	blx	r3
 800dc36:	e001      	b.n	800dc3c <lv_btn_design+0x14>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 800dc38:	2a01      	cmp	r2, #1
 800dc3a:	d0f9      	beq.n	800dc30 <lv_btn_design+0x8>
    }

    return true;
 800dc3c:	2001      	movs	r0, #1
}
 800dc3e:	bd10      	pop	{r4, pc}
        return false;
 800dc40:	2000      	movs	r0, #0
 800dc42:	bd10      	pop	{r4, pc}
 800dc44:	20015160 	.word	0x20015160

0800dc48 <lv_btn_set_toggle>:
{
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	460c      	mov	r4, r1
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800dc4c:	f7f9 ff80 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->toggle = tgl != false ? 1 : 0;
 800dc50:	7e03      	ldrb	r3, [r0, #24]
 800dc52:	f364 03c3 	bfi	r3, r4, #3, #1
 800dc56:	7603      	strb	r3, [r0, #24]
 800dc58:	bd10      	pop	{r4, pc}

0800dc5a <lv_btn_set_state>:
{
 800dc5a:	b538      	push	{r3, r4, r5, lr}
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	4605      	mov	r5, r0
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800dc60:	f7f9 ff76 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->state != state) {
 800dc64:	7e03      	ldrb	r3, [r0, #24]
 800dc66:	f003 0207 	and.w	r2, r3, #7
 800dc6a:	42a2      	cmp	r2, r4
 800dc6c:	d00a      	beq.n	800dc84 <lv_btn_set_state+0x2a>
        ext->state = state;
 800dc6e:	f364 0302 	bfi	r3, r4, #0, #3
 800dc72:	7603      	strb	r3, [r0, #24]
        lv_obj_set_style(btn, ext->styles[state]);
 800dc74:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800dc78:	6841      	ldr	r1, [r0, #4]
 800dc7a:	4628      	mov	r0, r5
}
 800dc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_style(btn, ext->styles[state]);
 800dc80:	f7f9 be53 	b.w	800792a <lv_obj_set_style>
 800dc84:	bd38      	pop	{r3, r4, r5, pc}

0800dc86 <lv_btn_set_style>:
{
 800dc86:	b570      	push	{r4, r5, r6, lr}
 800dc88:	460d      	mov	r5, r1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	4614      	mov	r4, r2
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800dc8e:	f7f9 ff5f 	bl	8007b50 <lv_obj_get_ext_attr>
    switch(type) {
 800dc92:	2d04      	cmp	r5, #4
 800dc94:	d805      	bhi.n	800dca2 <lv_btn_set_style+0x1c>
 800dc96:	e8df f005 	tbb	[pc, r5]
 800dc9a:	0f03      	.short	0x0f03
 800dc9c:	1311      	.short	0x1311
 800dc9e:	15          	.byte	0x15
 800dc9f:	00          	.byte	0x00
        case LV_BTN_STYLE_REL: ext->styles[LV_BTN_STATE_REL] = style; break;
 800dca0:	6044      	str	r4, [r0, #4]
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800dca2:	7e03      	ldrb	r3, [r0, #24]
 800dca4:	f003 0307 	and.w	r3, r3, #7
 800dca8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dcac:	6841      	ldr	r1, [r0, #4]
 800dcae:	4630      	mov	r0, r6
}
 800dcb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_style(btn, ext->styles[ext->state]);
 800dcb4:	f7f9 be39 	b.w	800792a <lv_obj_set_style>
        case LV_BTN_STYLE_PR: ext->styles[LV_BTN_STATE_PR] = style; break;
 800dcb8:	6084      	str	r4, [r0, #8]
 800dcba:	e7f2      	b.n	800dca2 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_REL: ext->styles[LV_BTN_STATE_TGL_REL] = style; break;
 800dcbc:	60c4      	str	r4, [r0, #12]
 800dcbe:	e7f0      	b.n	800dca2 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_TGL_PR: ext->styles[LV_BTN_STATE_TGL_PR] = style; break;
 800dcc0:	6104      	str	r4, [r0, #16]
 800dcc2:	e7ee      	b.n	800dca2 <lv_btn_set_style+0x1c>
        case LV_BTN_STYLE_INA: ext->styles[LV_BTN_STATE_INA] = style; break;
 800dcc4:	6144      	str	r4, [r0, #20]
 800dcc6:	e7ec      	b.n	800dca2 <lv_btn_set_style+0x1c>

0800dcc8 <lv_btn_create>:
{
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	4607      	mov	r7, r0
 800dccc:	460e      	mov	r6, r1
    new_btn = lv_cont_create(par, copy);
 800dcce:	f000 fac9 	bl	800e264 <lv_cont_create>
    lv_mem_assert(new_btn);
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	b900      	cbnz	r0, 800dcd8 <lv_btn_create+0x10>
 800dcd6:	e7fe      	b.n	800dcd6 <lv_btn_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btn);
 800dcd8:	4c3a      	ldr	r4, [pc, #232]	; (800ddc4 <lv_btn_create+0xfc>)
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	b913      	cbnz	r3, 800dce4 <lv_btn_create+0x1c>
 800dcde:	f7f9 ff33 	bl	8007b48 <lv_obj_get_signal_cb>
 800dce2:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_btn);
 800dce4:	4c38      	ldr	r4, [pc, #224]	; (800ddc8 <lv_btn_create+0x100>)
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	b91b      	cbnz	r3, 800dcf2 <lv_btn_create+0x2a>
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7f9 ff2e 	bl	8007b4c <lv_obj_get_design_cb>
 800dcf0:	6020      	str	r0, [r4, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(new_btn, sizeof(lv_btn_ext_t));
 800dcf2:	211c      	movs	r1, #28
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f7f9 f928 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	b900      	cbnz	r0, 800dd00 <lv_btn_create+0x38>
 800dcfe:	e7fe      	b.n	800dcfe <lv_btn_create+0x36>
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 800dd00:	4a32      	ldr	r2, [pc, #200]	; (800ddcc <lv_btn_create+0x104>)
    ext->state = LV_BTN_STATE_REL;
 800dd02:	7e03      	ldrb	r3, [r0, #24]
    ext->styles[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 800dd04:	6042      	str	r2, [r0, #4]
    ext->styles[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 800dd06:	4a32      	ldr	r2, [pc, #200]	; (800ddd0 <lv_btn_create+0x108>)
 800dd08:	6082      	str	r2, [r0, #8]
    ext->styles[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 800dd0a:	4a32      	ldr	r2, [pc, #200]	; (800ddd4 <lv_btn_create+0x10c>)
 800dd0c:	60c2      	str	r2, [r0, #12]
    ext->toggle = 0;
 800dd0e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ext->styles[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 800dd12:	4a31      	ldr	r2, [pc, #196]	; (800ddd8 <lv_btn_create+0x110>)
 800dd14:	6102      	str	r2, [r0, #16]
    ext->toggle = 0;
 800dd16:	f36f 03c3 	bfc	r3, #3, #1
    ext->styles[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 800dd1a:	4a30      	ldr	r2, [pc, #192]	; (800dddc <lv_btn_create+0x114>)
 800dd1c:	6142      	str	r2, [r0, #20]
    ext->toggle = 0;
 800dd1e:	7603      	strb	r3, [r0, #24]
    lv_obj_set_signal_cb(new_btn, lv_btn_signal);
 800dd20:	492f      	ldr	r1, [pc, #188]	; (800dde0 <lv_btn_create+0x118>)
 800dd22:	4628      	mov	r0, r5
 800dd24:	f7f9 f90d 	bl	8006f42 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btn, lv_btn_design);
 800dd28:	492e      	ldr	r1, [pc, #184]	; (800dde4 <lv_btn_create+0x11c>)
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f7f9 f90b 	bl	8006f46 <lv_obj_set_design_cb>
    if(copy == NULL) {
 800dd30:	bb66      	cbnz	r6, 800dd8c <lv_btn_create+0xc4>
        if(par != NULL) {
 800dd32:	b11f      	cbz	r7, 800dd3c <lv_btn_create+0x74>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 800dd34:	2101      	movs	r1, #1
 800dd36:	4628      	mov	r0, r5
 800dd38:	f000 faf6 	bl	800e328 <lv_cont_set_layout>
        lv_obj_set_click(new_btn, true); /*Be sure the button is clickable*/
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7f9 f89c 	bl	8006e7c <lv_obj_set_click>
        lv_theme_t * th = lv_theme_get_current();
 800dd44:	f002 fad2 	bl	80102ec <lv_theme_get_current>
        if(th) {
 800dd48:	4606      	mov	r6, r0
 800dd4a:	b1d0      	cbz	r0, 800dd82 <lv_btn_create+0xba>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_REL, th->style.btn.rel);
 800dd4c:	6902      	ldr	r2, [r0, #16]
 800dd4e:	2100      	movs	r1, #0
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff ff98 	bl	800dc86 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_PR, th->style.btn.pr);
 800dd56:	6972      	ldr	r2, [r6, #20]
 800dd58:	2101      	movs	r1, #1
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7ff ff93 	bl	800dc86 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_REL, th->style.btn.tgl_rel);
 800dd60:	69b2      	ldr	r2, [r6, #24]
 800dd62:	2102      	movs	r1, #2
 800dd64:	4628      	mov	r0, r5
 800dd66:	f7ff ff8e 	bl	800dc86 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_TGL_PR, th->style.btn.tgl_pr);
 800dd6a:	69f2      	ldr	r2, [r6, #28]
 800dd6c:	2103      	movs	r1, #3
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f7ff ff89 	bl	800dc86 <lv_btn_set_style>
            lv_btn_set_style(new_btn, LV_BTN_STYLE_INA, th->style.btn.ina);
 800dd74:	6a32      	ldr	r2, [r6, #32]
 800dd76:	2104      	movs	r1, #4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f7ff ff84 	bl	800dc86 <lv_btn_set_style>
}
 800dd7e:	4628      	mov	r0, r5
 800dd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_obj_set_style(new_btn, ext->styles[LV_BTN_STATE_REL]);
 800dd82:	6861      	ldr	r1, [r4, #4]
 800dd84:	4628      	mov	r0, r5
 800dd86:	f7f9 fdd0 	bl	800792a <lv_obj_set_style>
 800dd8a:	e7f8      	b.n	800dd7e <lv_btn_create+0xb6>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7f9 fedf 	bl	8007b50 <lv_obj_get_ext_attr>
        ext->state              = copy_ext->state;
 800dd92:	7e23      	ldrb	r3, [r4, #24]
 800dd94:	7e02      	ldrb	r2, [r0, #24]
 800dd96:	f362 0302 	bfi	r3, r2, #0, #3
 800dd9a:	7623      	strb	r3, [r4, #24]
        ext->toggle             = copy_ext->toggle;
 800dd9c:	7e03      	ldrb	r3, [r0, #24]
 800dd9e:	7e22      	ldrb	r2, [r4, #24]
 800dda0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dda4:	f363 02c3 	bfi	r2, r3, #3, #1
 800dda8:	7622      	strb	r2, [r4, #24]
        memcpy(ext->styles, copy_ext->styles, sizeof(ext->styles));
 800ddaa:	1d03      	adds	r3, r0, #4
 800ddac:	3404      	adds	r4, #4
 800ddae:	3018      	adds	r0, #24
 800ddb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddb4:	f844 2b04 	str.w	r2, [r4], #4
 800ddb8:	4283      	cmp	r3, r0
 800ddba:	d1f9      	bne.n	800ddb0 <lv_btn_create+0xe8>
        lv_obj_refresh_style(new_btn);
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7f9 fd76 	bl	80078ae <lv_obj_refresh_style>
 800ddc2:	e7dc      	b.n	800dd7e <lv_btn_create+0xb6>
 800ddc4:	20015164 	.word	0x20015164
 800ddc8:	20015160 	.word	0x20015160
 800ddcc:	20015ae0 	.word	0x20015ae0
 800ddd0:	20015b30 	.word	0x20015b30
 800ddd4:	20015d10 	.word	0x20015d10
 800ddd8:	20015db0 	.word	0x20015db0
 800dddc:	20015c20 	.word	0x20015c20
 800dde0:	0800de05 	.word	0x0800de05
 800dde4:	0800dc29 	.word	0x0800dc29

0800dde8 <lv_btn_get_state>:
{
 800dde8:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800ddea:	f7f9 feb1 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->state;
 800ddee:	7e00      	ldrb	r0, [r0, #24]
}
 800ddf0:	f000 0007 	and.w	r0, r0, #7
 800ddf4:	bd08      	pop	{r3, pc}

0800ddf6 <lv_btn_get_toggle>:
{
 800ddf6:	b508      	push	{r3, lr}
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800ddf8:	f7f9 feaa 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->toggle != 0 ? true : false;
 800ddfc:	7e00      	ldrb	r0, [r0, #24]
}
 800ddfe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800de02:	bd08      	pop	{r3, pc}

0800de04 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 800de04:	4b52      	ldr	r3, [pc, #328]	; (800df50 <lv_btn_signal+0x14c>)
{
 800de06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = ancestor_signal(btn, sign, param);
 800de0a:	681b      	ldr	r3, [r3, #0]
{
 800de0c:	4604      	mov	r4, r0
 800de0e:	460e      	mov	r6, r1
 800de10:	4617      	mov	r7, r2
    res = ancestor_signal(btn, sign, param);
 800de12:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800de14:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 800de16:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800de18:	d112      	bne.n	800de40 <lv_btn_signal+0x3c>

    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7f9 fe98 	bl	8007b50 <lv_obj_get_ext_attr>
 800de20:	4681      	mov	r9, r0
    bool tgl           = lv_btn_get_toggle(btn);
 800de22:	4620      	mov	r0, r4
 800de24:	f7ff ffe7 	bl	800ddf6 <lv_btn_get_toggle>

    if(sign == LV_SIGNAL_PRESSED) {
 800de28:	2e07      	cmp	r6, #7
    bool tgl           = lv_btn_get_toggle(btn);
 800de2a:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_PRESSED) {
 800de2c:	d110      	bne.n	800de50 <lv_btn_signal+0x4c>
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_REL) {
 800de2e:	f899 3018 	ldrb.w	r3, [r9, #24]
 800de32:	f013 0307 	ands.w	r3, r3, #7
 800de36:	d107      	bne.n	800de48 <lv_btn_signal+0x44>
            lv_btn_set_state(btn, LV_BTN_STATE_PR);
 800de38:	4629      	mov	r1, r5
        }
#endif
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
        /*Refresh the state*/
        if(ext->state == LV_BTN_STATE_PR)
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7ff ff0d 	bl	800dc5a <lv_btn_set_state>
        }
        buf->type[i] = "lv_btn";
    }

    return res;
}
 800de40:	4628      	mov	r0, r5
 800de42:	b003      	add	sp, #12
 800de44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        } else if(ext->state == LV_BTN_STATE_TGL_REL) {
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d1f9      	bne.n	800de40 <lv_btn_signal+0x3c>
            lv_btn_set_state(btn, LV_BTN_STATE_TGL_PR);
 800de4c:	2103      	movs	r1, #3
 800de4e:	e7f4      	b.n	800de3a <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESS_LOST) {
 800de50:	2e09      	cmp	r6, #9
 800de52:	d10b      	bne.n	800de6c <lv_btn_signal+0x68>
        if(ext->state == LV_BTN_STATE_PR)
 800de54:	f899 3018 	ldrb.w	r3, [r9, #24]
 800de58:	f003 0307 	and.w	r3, r3, #7
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d101      	bne.n	800de64 <lv_btn_signal+0x60>
            lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800de60:	2100      	movs	r1, #0
 800de62:	e7ea      	b.n	800de3a <lv_btn_signal+0x36>
        else if(ext->state == LV_BTN_STATE_TGL_PR)
 800de64:	2b03      	cmp	r3, #3
 800de66:	d1eb      	bne.n	800de40 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800de68:	2102      	movs	r1, #2
 800de6a:	e7e6      	b.n	800de3a <lv_btn_signal+0x36>
    } else if(sign == LV_SIGNAL_PRESSING) {
 800de6c:	2e08      	cmp	r6, #8
 800de6e:	d105      	bne.n	800de7c <lv_btn_signal+0x78>
        if(lv_indev_is_dragging(param) != false) {
 800de70:	4638      	mov	r0, r7
 800de72:	f7f8 ffa2 	bl	8006dba <lv_indev_is_dragging>
 800de76:	2800      	cmp	r0, #0
 800de78:	d1ec      	bne.n	800de54 <lv_btn_signal+0x50>
 800de7a:	e7e1      	b.n	800de40 <lv_btn_signal+0x3c>
    } else if(sign == LV_SIGNAL_RELEASED) {
 800de7c:	2e0a      	cmp	r6, #10
 800de7e:	d12c      	bne.n	800deda <lv_btn_signal+0xd6>
        if(lv_indev_is_dragging(param) == false) {
 800de80:	4638      	mov	r0, r7
 800de82:	f7f8 ff9a 	bl	8006dba <lv_indev_is_dragging>
 800de86:	f899 3018 	ldrb.w	r3, [r9, #24]
 800de8a:	4606      	mov	r6, r0
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d1e3      	bne.n	800de58 <lv_btn_signal+0x54>
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 800de90:	f003 0307 	and.w	r3, r3, #7
 800de94:	2b01      	cmp	r3, #1
            uint32_t toggled = 0;
 800de96:	9001      	str	r0, [sp, #4]
            if(ext->state == LV_BTN_STATE_PR && tgl == false) {
 800de98:	d110      	bne.n	800debc <lv_btn_signal+0xb8>
 800de9a:	f1b8 0f00 	cmp.w	r8, #0
 800de9e:	d0df      	beq.n	800de60 <lv_btn_signal+0x5c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800dea0:	2102      	movs	r1, #2
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7ff fed9 	bl	800dc5a <lv_btn_set_state>
                toggled = 1;
 800dea8:	9501      	str	r5, [sp, #4]
                res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 800deaa:	aa01      	add	r2, sp, #4
 800deac:	210e      	movs	r1, #14
 800deae:	4620      	mov	r0, r4
 800deb0:	f7f9 f83e 	bl	8006f30 <lv_event_send>
                if(res != LV_RES_OK) return res;
 800deb4:	2801      	cmp	r0, #1
 800deb6:	bf18      	it	ne
 800deb8:	4605      	movne	r5, r0
 800deba:	e7c1      	b.n	800de40 <lv_btn_signal+0x3c>
            } else if(ext->state == LV_BTN_STATE_TGL_PR && tgl == false) {
 800debc:	2b03      	cmp	r3, #3
 800debe:	d108      	bne.n	800ded2 <lv_btn_signal+0xce>
 800dec0:	f1b8 0f00 	cmp.w	r8, #0
 800dec4:	d0d0      	beq.n	800de68 <lv_btn_signal+0x64>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800dec6:	4601      	mov	r1, r0
 800dec8:	4620      	mov	r0, r4
 800deca:	f7ff fec6 	bl	800dc5a <lv_btn_set_state>
                toggled = 0;
 800dece:	9601      	str	r6, [sp, #4]
 800ded0:	e7eb      	b.n	800deaa <lv_btn_signal+0xa6>
            if(tgl) {
 800ded2:	f1b8 0f00 	cmp.w	r8, #0
 800ded6:	d0b3      	beq.n	800de40 <lv_btn_signal+0x3c>
 800ded8:	e7e7      	b.n	800deaa <lv_btn_signal+0xa6>
    } else if(sign == LV_SIGNAL_CONTROL) {
 800deda:	2e11      	cmp	r6, #17
 800dedc:	d128      	bne.n	800df30 <lv_btn_signal+0x12c>
        char c = *((char *)param);
 800dede:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 800dee0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800dee4:	2a11      	cmp	r2, #17
 800dee6:	d111      	bne.n	800df0c <lv_btn_signal+0x108>
            if(lv_btn_get_toggle(btn)) {
 800dee8:	4620      	mov	r0, r4
 800deea:	f7ff ff84 	bl	800ddf6 <lv_btn_get_toggle>
 800deee:	2800      	cmp	r0, #0
 800def0:	d0a6      	beq.n	800de40 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_TGL_REL);
 800def2:	2102      	movs	r1, #2
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff feb0 	bl	800dc5a <lv_btn_set_state>
                uint32_t state = 1;
 800defa:	aa02      	add	r2, sp, #8
 800defc:	f842 5d04 	str.w	r5, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 800df00:	210e      	movs	r1, #14
 800df02:	4620      	mov	r0, r4
 800df04:	f7f9 f814 	bl	8006f30 <lv_event_send>
 800df08:	4605      	mov	r5, r0
 800df0a:	e799      	b.n	800de40 <lv_btn_signal+0x3c>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 800df0c:	2b14      	cmp	r3, #20
 800df0e:	d001      	beq.n	800df14 <lv_btn_signal+0x110>
 800df10:	2b12      	cmp	r3, #18
 800df12:	d195      	bne.n	800de40 <lv_btn_signal+0x3c>
            if(lv_btn_get_toggle(btn)) {
 800df14:	4620      	mov	r0, r4
 800df16:	f7ff ff6e 	bl	800ddf6 <lv_btn_get_toggle>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d090      	beq.n	800de40 <lv_btn_signal+0x3c>
                lv_btn_set_state(btn, LV_BTN_STATE_REL);
 800df1e:	2100      	movs	r1, #0
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff fe9a 	bl	800dc5a <lv_btn_set_state>
                uint32_t state = 0;
 800df26:	aa02      	add	r2, sp, #8
 800df28:	2300      	movs	r3, #0
 800df2a:	f842 3d04 	str.w	r3, [r2, #-4]!
 800df2e:	e7e7      	b.n	800df00 <lv_btn_signal+0xfc>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800df30:	2e06      	cmp	r6, #6
 800df32:	d185      	bne.n	800de40 <lv_btn_signal+0x3c>
 800df34:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800df36:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	b119      	cbz	r1, 800df46 <lv_btn_signal+0x142>
 800df3e:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800df40:	2b07      	cmp	r3, #7
 800df42:	d1f8      	bne.n	800df36 <lv_btn_signal+0x132>
 800df44:	461a      	mov	r2, r3
        buf->type[i] = "lv_btn";
 800df46:	4b03      	ldr	r3, [pc, #12]	; (800df54 <lv_btn_signal+0x150>)
 800df48:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 800df4c:	e778      	b.n	800de40 <lv_btn_signal+0x3c>
 800df4e:	bf00      	nop
 800df50:	20015164 	.word	0x20015164
 800df54:	080faec7 	.word	0x080faec7

0800df58 <lv_btn_get_style>:
{
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4606      	mov	r6, r0
 800df5c:	460d      	mov	r5, r1
    lv_btn_ext_t * ext       = lv_obj_get_ext_attr(btn);
 800df5e:	f7f9 fdf7 	bl	8007b50 <lv_obj_get_ext_attr>
 800df62:	4604      	mov	r4, r0
    lv_btn_state_t state     = lv_btn_get_state(btn);
 800df64:	4630      	mov	r0, r6
 800df66:	f7ff ff3f 	bl	800dde8 <lv_btn_get_state>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 800df6a:	b92d      	cbnz	r5, 800df78 <lv_btn_get_style+0x20>
 800df6c:	b9e0      	cbnz	r0, 800dfa8 <lv_btn_get_style+0x50>
        style = lv_obj_get_style(btn);
 800df6e:	4630      	mov	r0, r6
}
 800df70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        style = lv_obj_get_style(btn);
 800df74:	f7f9 bd06 	b.w	8007984 <lv_obj_get_style>
    if((type == LV_BTN_STYLE_REL && state == LV_BTN_STATE_REL) ||
 800df78:	2d01      	cmp	r5, #1
 800df7a:	d103      	bne.n	800df84 <lv_btn_get_style+0x2c>
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 800df7c:	2801      	cmp	r0, #1
 800df7e:	d0f6      	beq.n	800df6e <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_PR: style = ext->styles[LV_BTN_STATE_PR]; break;
 800df80:	68a0      	ldr	r0, [r4, #8]
 800df82:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_PR && state == LV_BTN_STATE_PR) ||
 800df84:	2d02      	cmp	r5, #2
 800df86:	d103      	bne.n	800df90 <lv_btn_get_style+0x38>
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 800df88:	2802      	cmp	r0, #2
 800df8a:	d0f0      	beq.n	800df6e <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_REL: style = ext->styles[LV_BTN_STATE_TGL_REL]; break;
 800df8c:	68e0      	ldr	r0, [r4, #12]
 800df8e:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_REL && state == LV_BTN_STATE_TGL_REL) ||
 800df90:	2d03      	cmp	r5, #3
 800df92:	d103      	bne.n	800df9c <lv_btn_get_style+0x44>
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 800df94:	2803      	cmp	r0, #3
 800df96:	d0ea      	beq.n	800df6e <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_TGL_PR: style = ext->styles[LV_BTN_STATE_TGL_PR]; break;
 800df98:	6920      	ldr	r0, [r4, #16]
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
       (type == LV_BTN_STYLE_TGL_PR && state == LV_BTN_STATE_TGL_PR) ||
 800df9c:	2d04      	cmp	r5, #4
 800df9e:	d105      	bne.n	800dfac <lv_btn_get_style+0x54>
       (type == LV_BTN_STYLE_INA && state == LV_BTN_STATE_INA)) {
 800dfa0:	2804      	cmp	r0, #4
 800dfa2:	d0e4      	beq.n	800df6e <lv_btn_get_style+0x16>
            case LV_BTN_STYLE_INA: style = ext->styles[LV_BTN_STATE_INA]; break;
 800dfa4:	6960      	ldr	r0, [r4, #20]
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
            case LV_BTN_STYLE_REL: style = ext->styles[LV_BTN_STATE_REL]; break;
 800dfa8:	6860      	ldr	r0, [r4, #4]
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
            default: style = NULL; break;
 800dfac:	2000      	movs	r0, #0
}
 800dfae:	bd70      	pop	{r4, r5, r6, pc}

0800dfb0 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 800dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb4:	b08d      	sub	sp, #52	; 0x34
 800dfb6:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800dfb8:	f7f9 fdca 	bl	8007b50 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 800dfbc:	7803      	ldrb	r3, [r0, #0]
 800dfbe:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800dfc2:	4682      	mov	sl, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 800dfc4:	d103      	bne.n	800dfce <lv_cont_refr_autofit+0x1e>
 800dfc6:	7843      	ldrb	r3, [r0, #1]
 800dfc8:	071b      	lsls	r3, r3, #28
 800dfca:	f000 80e8 	beq.w	800e19e <lv_cont_refr_autofit+0x1ee>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7f9 fcd8 	bl	8007984 <lv_obj_get_style>
 800dfd4:	4683      	mov	fp, r0
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7f9 fc83 	bl	80078e2 <lv_obj_get_parent>
 800dfdc:	9002      	str	r0, [sp, #8]
    const lv_style_t * par_style = lv_obj_get_style(par);
 800dfde:	f7f9 fcd1 	bl	8007984 <lv_obj_get_style>
    memcpy(dest, src, sizeof(lv_area_t));
 800dfe2:	9902      	ldr	r1, [sp, #8]
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	f851 0f10 	ldr.w	r0, [r1, #16]!
 800dfea:	6849      	ldr	r1, [r1, #4]
 800dfec:	aa08      	add	r2, sp, #32
 800dfee:	c203      	stmia	r2!, {r0, r1}
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
    flood_area.x1 += par_style->body.padding.left;
 800dff0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800dff2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 800dff6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 800dffa:	f8bd 6022 	ldrh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 800dffe:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
    flood_area.x1 += par_style->body.padding.left;
 800e002:	4490      	add	r8, r2
    flood_area.x2 -= par_style->body.padding.right;
 800e004:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800e006:	1abf      	subs	r7, r7, r2
    flood_area.y1 += par_style->body.padding.top;
 800e008:	8c1a      	ldrh	r2, [r3, #32]
    flood_area.y2 -= par_style->body.padding.bottom;
 800e00a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    flood_area.y1 += par_style->body.padding.top;
 800e00c:	4416      	add	r6, r2
    flood_area.y2 -= par_style->body.padding.bottom;
 800e00e:	1aed      	subs	r5, r5, r3

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 800e010:	a906      	add	r1, sp, #24
 800e012:	4620      	mov	r0, r4
    flood_area.x1 += par_style->body.padding.left;
 800e014:	fa0f f888 	sxth.w	r8, r8
    flood_area.x2 -= par_style->body.padding.right;
 800e018:	b23f      	sxth	r7, r7
    flood_area.y1 += par_style->body.padding.top;
 800e01a:	b236      	sxth	r6, r6
    flood_area.y2 -= par_style->body.padding.bottom;
 800e01c:	b22d      	sxth	r5, r5
    flood_area.x1 += par_style->body.padding.left;
 800e01e:	f8ad 8020 	strh.w	r8, [sp, #32]
    flood_area.x2 -= par_style->body.padding.right;
 800e022:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    flood_area.y1 += par_style->body.padding.top;
 800e026:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
    flood_area.y2 -= par_style->body.padding.bottom;
 800e02a:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 800e02e:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &ori);
 800e032:	f7f9 fc84 	bl	800793e <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 800e036:	a904      	add	r1, sp, #16
 800e038:	4620      	mov	r0, r4
 800e03a:	f7f9 fc80 	bl	800793e <lv_obj_get_coords>
    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 800e03e:	4648      	mov	r0, r9
 800e040:	f7fe feaa 	bl	800cd98 <lv_ll_is_empty>
 800e044:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 800e048:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800e04c:	9301      	str	r3, [sp, #4]
 800e04e:	d02e      	beq.n	800e0ae <lv_cont_refr_autofit+0xfe>
        tight_area.x1 = LV_COORD_MAX;
 800e050:	f647 4318 	movw	r3, #31768	; 0x7c18
 800e054:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.y1 = LV_COORD_MAX;
 800e058:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        LV_LL_READ(cont->child_ll, child_i)
 800e05c:	4648      	mov	r0, r9
        tight_area.x2 = LV_COORD_MIN;
 800e05e:	f248 33e8 	movw	r3, #33768	; 0x83e8
 800e062:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y2 = LV_COORD_MIN;
 800e066:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 800e06a:	f7fe fda0 	bl	800cbae <lv_ll_get_head>
 800e06e:	4601      	mov	r1, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	f040 8097 	bne.w	800e1a4 <lv_cont_refr_autofit+0x1f4>
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
        }

        tight_area.x1 -= style->body.padding.left;
 800e076:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e07a:	f8bb 2024 	ldrh.w	r2, [fp, #36]	; 0x24
 800e07e:	1a9b      	subs	r3, r3, r2
 800e080:	f8ad 3010 	strh.w	r3, [sp, #16]
        tight_area.x2 += style->body.padding.right;
 800e084:	f8bb 2026 	ldrh.w	r2, [fp, #38]	; 0x26
 800e088:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800e08c:	4413      	add	r3, r2
 800e08e:	f8ad 3014 	strh.w	r3, [sp, #20]
        tight_area.y1 -= style->body.padding.top;
 800e092:	f8bb 2020 	ldrh.w	r2, [fp, #32]
 800e096:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e09a:	1a9b      	subs	r3, r3, r2
 800e09c:	f8ad 3012 	strh.w	r3, [sp, #18]
        tight_area.y2 += style->body.padding.bottom;
 800e0a0:	f8bb 2022 	ldrh.w	r2, [fp, #34]	; 0x22
 800e0a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e0ae:	ab06      	add	r3, sp, #24
 800e0b0:	e893 0003 	ldmia.w	r3, {r0, r1}
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);

    switch(ext->fit_left) {
 800e0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b8:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800e0bc:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 800e0c0:	2a02      	cmp	r2, #2
 800e0c2:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e0c6:	f000 80a2 	beq.w	800e20e <lv_cont_refr_autofit+0x25e>
 800e0ca:	f200 8099 	bhi.w	800e200 <lv_cont_refr_autofit+0x250>
 800e0ce:	2a01      	cmp	r2, #1
 800e0d0:	d103      	bne.n	800e0da <lv_cont_refr_autofit+0x12a>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 800e0d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e0d6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
    }

    switch(ext->fit_right) {
 800e0da:	099b      	lsrs	r3, r3, #6
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	f000 80a0 	beq.w	800e222 <lv_cont_refr_autofit+0x272>
 800e0e2:	f200 8097 	bhi.w	800e214 <lv_cont_refr_autofit+0x264>
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d103      	bne.n	800e0f2 <lv_cont_refr_autofit+0x142>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 800e0ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800e0ee:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
    }

    switch(ext->fit_top) {
 800e0f2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800e0f6:	f003 0203 	and.w	r2, r3, #3
 800e0fa:	2a02      	cmp	r2, #2
 800e0fc:	f000 809b 	beq.w	800e236 <lv_cont_refr_autofit+0x286>
 800e100:	f200 8092 	bhi.w	800e228 <lv_cont_refr_autofit+0x278>
 800e104:	2a01      	cmp	r2, #1
 800e106:	d103      	bne.n	800e110 <lv_cont_refr_autofit+0x160>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 800e108:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e10c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
    }

    switch(ext->fit_bottom) {
 800e110:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e114:	2b02      	cmp	r3, #2
 800e116:	f000 8098 	beq.w	800e24a <lv_cont_refr_autofit+0x29a>
 800e11a:	f200 808f 	bhi.w	800e23c <lv_cont_refr_autofit+0x28c>
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d103      	bne.n	800e12a <lv_cont_refr_autofit+0x17a>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 800e122:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e126:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 800e12a:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800e12e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800e132:	429a      	cmp	r2, r3
 800e134:	d111      	bne.n	800e15a <lv_cont_refr_autofit+0x1aa>
 800e136:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800e13a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800e13e:	429a      	cmp	r2, r3
 800e140:	d10b      	bne.n	800e15a <lv_cont_refr_autofit+0x1aa>
 800e142:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800e146:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d105      	bne.n	800e15a <lv_cont_refr_autofit+0x1aa>
 800e14e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800e152:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800e156:	429a      	cmp	r2, r3
 800e158:	d021      	beq.n	800e19e <lv_cont_refr_autofit+0x1ee>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7f8 ff22 	bl	8006fa4 <lv_obj_invalidate>
 800e160:	465b      	mov	r3, fp
 800e162:	cb03      	ldmia	r3!, {r0, r1}
 800e164:	6120      	str	r0, [r4, #16]
 800e166:	6161      	str	r1, [r4, #20]
        lv_area_copy(&cont->coords, &new_area);
        lv_obj_invalidate(cont);
 800e168:	4620      	mov	r0, r4
 800e16a:	f7f8 ff1b 	bl	8006fa4 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 800e16e:	69e3      	ldr	r3, [r4, #28]
 800e170:	aa06      	add	r2, sp, #24
 800e172:	2102      	movs	r1, #2
 800e174:	4620      	mov	r0, r4
 800e176:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 800e178:	9b02      	ldr	r3, [sp, #8]
 800e17a:	9802      	ldr	r0, [sp, #8]
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	4622      	mov	r2, r4
 800e180:	2101      	movs	r1, #1
 800e182:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 800e184:	4620      	mov	r0, r4
 800e186:	f7f9 fbf8 	bl	800797a <lv_obj_get_auto_realign>
 800e18a:	b110      	cbz	r0, 800e192 <lv_cont_refr_autofit+0x1e2>
            lv_obj_realign(cont);
 800e18c:	4620      	mov	r0, r4
 800e18e:	f7f9 f9d7 	bl	8007540 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 800e192:	4648      	mov	r0, r9
 800e194:	f7fe fd0b 	bl	800cbae <lv_ll_get_head>
 800e198:	4604      	mov	r4, r0
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d158      	bne.n	800e250 <lv_cont_refr_autofit+0x2a0>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
        }
    }
}
 800e19e:	b00d      	add	sp, #52	; 0x34
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	9103      	str	r1, [sp, #12]
 800e1a8:	f7f9 fc4c 	bl	8007a44 <lv_obj_get_hidden>
 800e1ac:	9903      	ldr	r1, [sp, #12]
 800e1ae:	bb18      	cbnz	r0, 800e1f8 <lv_cont_refr_autofit+0x248>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 800e1b0:	f9b1 3010 	ldrsh.w	r3, [r1, #16]
 800e1b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	bfa8      	it	ge
 800e1bc:	4613      	movge	r3, r2
 800e1be:	f8ad 3010 	strh.w	r3, [sp, #16]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 800e1c2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800e1c6:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	bfa8      	it	ge
 800e1ce:	4613      	movge	r3, r2
 800e1d0:	f8ad 3012 	strh.w	r3, [sp, #18]
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 800e1d4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800e1d8:	f9b1 3014 	ldrsh.w	r3, [r1, #20]
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	bfb8      	it	lt
 800e1e0:	4613      	movlt	r3, r2
 800e1e2:	f8ad 3014 	strh.w	r3, [sp, #20]
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 800e1e6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800e1ea:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	bfb8      	it	lt
 800e1f2:	4613      	movlt	r3, r2
 800e1f4:	f8ad 3016 	strh.w	r3, [sp, #22]
        LV_LL_READ(cont->child_ll, child_i)
 800e1f8:	4648      	mov	r0, r9
 800e1fa:	f7fe fcde 	bl	800cbba <lv_ll_get_next>
 800e1fe:	e736      	b.n	800e06e <lv_cont_refr_autofit+0xbe>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 800e200:	9a01      	ldr	r2, [sp, #4]
 800e202:	b122      	cbz	r2, 800e20e <lv_cont_refr_autofit+0x25e>
 800e204:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e208:	4590      	cmp	r8, r2
 800e20a:	bfa8      	it	ge
 800e20c:	4690      	movge	r8, r2
 800e20e:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800e212:	e762      	b.n	800e0da <lv_cont_refr_autofit+0x12a>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 800e214:	9b01      	ldr	r3, [sp, #4]
 800e216:	b123      	cbz	r3, 800e222 <lv_cont_refr_autofit+0x272>
 800e218:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e21c:	429f      	cmp	r7, r3
 800e21e:	bfb8      	it	lt
 800e220:	461f      	movlt	r7, r3
 800e222:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800e226:	e764      	b.n	800e0f2 <lv_cont_refr_autofit+0x142>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 800e228:	9a01      	ldr	r2, [sp, #4]
 800e22a:	b122      	cbz	r2, 800e236 <lv_cont_refr_autofit+0x286>
 800e22c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800e230:	4296      	cmp	r6, r2
 800e232:	bfa8      	it	ge
 800e234:	4616      	movge	r6, r2
 800e236:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 800e23a:	e769      	b.n	800e110 <lv_cont_refr_autofit+0x160>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 800e23c:	9b01      	ldr	r3, [sp, #4]
 800e23e:	b123      	cbz	r3, 800e24a <lv_cont_refr_autofit+0x29a>
 800e240:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e244:	429d      	cmp	r5, r3
 800e246:	bfb8      	it	lt
 800e248:	461d      	movlt	r5, r3
 800e24a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800e24e:	e76c      	b.n	800e12a <lv_cont_refr_autofit+0x17a>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800e250:	69e3      	ldr	r3, [r4, #28]
 800e252:	2200      	movs	r2, #0
 800e254:	2103      	movs	r1, #3
 800e256:	4620      	mov	r0, r4
 800e258:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 800e25a:	4621      	mov	r1, r4
 800e25c:	4648      	mov	r0, r9
 800e25e:	f7fe fcac 	bl	800cbba <lv_ll_get_next>
 800e262:	e799      	b.n	800e198 <lv_cont_refr_autofit+0x1e8>

0800e264 <lv_cont_create>:
{
 800e264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e266:	4607      	mov	r7, r0
 800e268:	460e      	mov	r6, r1
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 800e26a:	f7f9 f97f 	bl	800756c <lv_obj_create>
    lv_mem_assert(new_cont);
 800e26e:	4605      	mov	r5, r0
 800e270:	b900      	cbnz	r0, 800e274 <lv_cont_create+0x10>
 800e272:	e7fe      	b.n	800e272 <lv_cont_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 800e274:	4c29      	ldr	r4, [pc, #164]	; (800e31c <lv_cont_create+0xb8>)
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	b913      	cbnz	r3, 800e280 <lv_cont_create+0x1c>
 800e27a:	f7f9 fc65 	bl	8007b48 <lv_obj_get_signal_cb>
 800e27e:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 800e280:	2102      	movs	r1, #2
 800e282:	4628      	mov	r0, r5
 800e284:	f7f8 fe61 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 800e288:	4628      	mov	r0, r5
 800e28a:	f7f9 fc61 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext == NULL) return NULL;
 800e28e:	4604      	mov	r4, r0
 800e290:	2800      	cmp	r0, #0
 800e292:	d041      	beq.n	800e318 <lv_cont_create+0xb4>
    ext->fit_left   = LV_FIT_NONE;
 800e294:	7803      	ldrb	r3, [r0, #0]
    ext->fit_top    = LV_FIT_NONE;
 800e296:	7842      	ldrb	r2, [r0, #1]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 800e298:	4921      	ldr	r1, [pc, #132]	; (800e320 <lv_cont_create+0xbc>)
    ext->fit_bottom = LV_FIT_NONE;
 800e29a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    ext->layout     = LV_LAYOUT_OFF;
 800e29e:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 800e2a2:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 800e2a6:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 800e2aa:	7042      	strb	r2, [r0, #1]
    ext->layout     = LV_LAYOUT_OFF;
 800e2ac:	7003      	strb	r3, [r0, #0]
    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f7f8 fe47 	bl	8006f42 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800e2b4:	b95e      	cbnz	r6, 800e2ce <lv_cont_create+0x6a>
        if(par != NULL) {
 800e2b6:	b137      	cbz	r7, 800e2c6 <lv_cont_create+0x62>
            lv_theme_t * th = lv_theme_get_current();
 800e2b8:	f002 f818 	bl	80102ec <lv_theme_get_current>
            if(th) {
 800e2bc:	b128      	cbz	r0, 800e2ca <lv_cont_create+0x66>
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 800e2be:	68c1      	ldr	r1, [r0, #12]
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	f7f9 fb32 	bl	800792a <lv_obj_set_style>
}
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ca:	4916      	ldr	r1, [pc, #88]	; (800e324 <lv_cont_create+0xc0>)
 800e2cc:	e7f8      	b.n	800e2c0 <lv_cont_create+0x5c>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f7f9 fc3e 	bl	8007b50 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 800e2d4:	7803      	ldrb	r3, [r0, #0]
 800e2d6:	7822      	ldrb	r2, [r4, #0]
 800e2d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e2dc:	f363 1205 	bfi	r2, r3, #4, #2
 800e2e0:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 800e2e2:	7803      	ldrb	r3, [r0, #0]
 800e2e4:	b2d2      	uxtb	r2, r2
 800e2e6:	099b      	lsrs	r3, r3, #6
 800e2e8:	f363 1287 	bfi	r2, r3, #6, #2
 800e2ec:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 800e2ee:	7842      	ldrb	r2, [r0, #1]
 800e2f0:	7863      	ldrb	r3, [r4, #1]
 800e2f2:	f362 0301 	bfi	r3, r2, #0, #2
 800e2f6:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 800e2f8:	7843      	ldrb	r3, [r0, #1]
 800e2fa:	7862      	ldrb	r2, [r4, #1]
 800e2fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e300:	f363 0283 	bfi	r2, r3, #2, #2
 800e304:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 800e306:	7802      	ldrb	r2, [r0, #0]
 800e308:	7823      	ldrb	r3, [r4, #0]
 800e30a:	f362 0303 	bfi	r3, r2, #0, #4
 800e30e:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(new_cont);
 800e310:	4628      	mov	r0, r5
 800e312:	f7f9 facc 	bl	80078ae <lv_obj_refresh_style>
 800e316:	e7d6      	b.n	800e2c6 <lv_cont_create+0x62>
    if(ext == NULL) return NULL;
 800e318:	4605      	mov	r5, r0
 800e31a:	e7d4      	b.n	800e2c6 <lv_cont_create+0x62>
 800e31c:	20015168 	.word	0x20015168
 800e320:	0800e8a9 	.word	0x0800e8a9
 800e324:	20015b80 	.word	0x20015b80

0800e328 <lv_cont_set_layout>:
{
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	460d      	mov	r5, r1
 800e32c:	4604      	mov	r4, r0
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800e32e:	f7f9 fc0f 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 800e332:	7803      	ldrb	r3, [r0, #0]
 800e334:	f003 020f 	and.w	r2, r3, #15
 800e338:	42aa      	cmp	r2, r5
 800e33a:	d009      	beq.n	800e350 <lv_cont_set_layout+0x28>
    ext->layout = layout;
 800e33c:	f365 0303 	bfi	r3, r5, #0, #4
 800e340:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 800e342:	2200      	movs	r2, #0
 800e344:	69e3      	ldr	r3, [r4, #28]
 800e346:	4620      	mov	r0, r4
 800e348:	2101      	movs	r1, #1
}
 800e34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 800e34e:	4718      	bx	r3
 800e350:	bd70      	pop	{r4, r5, r6, pc}

0800e352 <lv_cont_get_layout>:
{
 800e352:	b508      	push	{r3, lr}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 800e354:	f7f9 fbfc 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->layout;
 800e358:	7800      	ldrb	r0, [r0, #0]
}
 800e35a:	f000 000f 	and.w	r0, r0, #15
 800e35e:	bd08      	pop	{r3, pc}

0800e360 <lv_cont_refr_layout>:
{
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	b087      	sub	sp, #28
 800e366:	4604      	mov	r4, r0
    lv_layout_t type = lv_cont_get_layout(cont);
 800e368:	f7ff fff3 	bl	800e352 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 800e36c:	2100      	movs	r1, #0
    lv_layout_t type = lv_cont_get_layout(cont);
 800e36e:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 800e370:	4620      	mov	r0, r4
 800e372:	f7f9 fab8 	bl	80078e6 <lv_obj_get_child>
 800e376:	2800      	cmp	r0, #0
 800e378:	f000 8293 	beq.w	800e8a2 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_OFF) return;
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	f000 8290 	beq.w	800e8a2 <lv_cont_refr_layout+0x542>
    if(type == LV_LAYOUT_CENTER) {
 800e382:	2d01      	cmp	r5, #1
 800e384:	d16a      	bne.n	800e45c <lv_cont_refr_layout+0xfc>
    const lv_style_t * style = lv_obj_get_style(cont);
 800e386:	4620      	mov	r0, r4
 800e388:	f7f9 fafc 	bl	8007984 <lv_obj_get_style>
    LV_LL_READ(cont->child_ll, child)
 800e38c:	1d26      	adds	r6, r4, #4
    const lv_style_t * style = lv_obj_get_style(cont);
 800e38e:	4607      	mov	r7, r0
    LV_LL_READ(cont->child_ll, child)
 800e390:	4630      	mov	r0, r6
 800e392:	f7fe fc0c 	bl	800cbae <lv_ll_get_head>
    lv_coord_t h_tot         = 0;
 800e396:	2500      	movs	r5, #0
    LV_LL_READ(cont->child_ll, child)
 800e398:	4680      	mov	r8, r0
    uint32_t obj_num         = 0;
 800e39a:	46a9      	mov	r9, r5
    LV_LL_READ(cont->child_ll, child)
 800e39c:	f1b8 0f00 	cmp.w	r8, #0
 800e3a0:	d11d      	bne.n	800e3de <lv_cont_refr_layout+0x7e>
    if(obj_num == 0) return;
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	f000 827c 	beq.w	800e8a2 <lv_cont_refr_layout+0x542>
    h_tot -= style->body.padding.inner;
 800e3aa:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 800e3ac:	1a2d      	subs	r5, r5, r0
 800e3ae:	b2ad      	uxth	r5, r5
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	f7f8 fd69 	bl	8006e8a <lv_obj_set_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 800e3b8:	b22d      	sxth	r5, r5
 800e3ba:	f04f 0902 	mov.w	r9, #2
    LV_LL_READ_BACK(cont->child_ll, child)
 800e3be:	4630      	mov	r0, r6
    lv_coord_t last_cord = -(h_tot / 2);
 800e3c0:	fb95 f5f9 	sdiv	r5, r5, r9
 800e3c4:	426d      	negs	r5, r5
 800e3c6:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800e3c8:	f7fe fbf4 	bl	800cbb4 <lv_ll_get_tail>
 800e3cc:	4680      	mov	r8, r0
 800e3ce:	b9f8      	cbnz	r0, 800e410 <lv_cont_refr_layout+0xb0>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	4620      	mov	r0, r4
}
 800e3d4:	b007      	add	sp, #28
 800e3d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 800e3da:	f7f8 bd5c 	b.w	8006e96 <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800e3de:	4640      	mov	r0, r8
 800e3e0:	f7f9 fb30 	bl	8007a44 <lv_obj_get_hidden>
 800e3e4:	b970      	cbnz	r0, 800e404 <lv_cont_refr_layout+0xa4>
 800e3e6:	2104      	movs	r1, #4
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	f7f9 fba6 	bl	8007b3a <lv_obj_is_protected>
 800e3ee:	b948      	cbnz	r0, 800e404 <lv_cont_refr_layout+0xa4>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	f7f9 fabc 	bl	800796e <lv_obj_get_height>
 800e3f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e3fa:	4418      	add	r0, r3
 800e3fc:	4405      	add	r5, r0
 800e3fe:	b22d      	sxth	r5, r5
        obj_num++;
 800e400:	f109 0901 	add.w	r9, r9, #1
    LV_LL_READ(cont->child_ll, child)
 800e404:	4641      	mov	r1, r8
 800e406:	4630      	mov	r0, r6
 800e408:	f7fe fbd7 	bl	800cbba <lv_ll_get_next>
 800e40c:	4680      	mov	r8, r0
 800e40e:	e7c5      	b.n	800e39c <lv_cont_refr_layout+0x3c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800e410:	4640      	mov	r0, r8
 800e412:	f7f9 fb17 	bl	8007a44 <lv_obj_get_hidden>
 800e416:	b9e0      	cbnz	r0, 800e452 <lv_cont_refr_layout+0xf2>
 800e418:	2104      	movs	r1, #4
 800e41a:	4640      	mov	r0, r8
 800e41c:	f7f9 fb8d 	bl	8007b3a <lv_obj_is_protected>
 800e420:	4682      	mov	sl, r0
 800e422:	b9b0      	cbnz	r0, 800e452 <lv_cont_refr_layout+0xf2>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 800e424:	4640      	mov	r0, r8
 800e426:	f7f9 faa2 	bl	800796e <lv_obj_get_height>
 800e42a:	b2ad      	uxth	r5, r5
 800e42c:	fb90 f0f9 	sdiv	r0, r0, r9
 800e430:	4428      	add	r0, r5
 800e432:	b200      	sxth	r0, r0
 800e434:	4653      	mov	r3, sl
 800e436:	9000      	str	r0, [sp, #0]
 800e438:	4652      	mov	r2, sl
 800e43a:	4621      	mov	r1, r4
 800e43c:	4640      	mov	r0, r8
 800e43e:	f7f8 fe73 	bl	8007128 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 800e442:	4640      	mov	r0, r8
 800e444:	f7f9 fa93 	bl	800796e <lv_obj_get_height>
 800e448:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e44c:	4418      	add	r0, r3
 800e44e:	4405      	add	r5, r0
 800e450:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800e452:	4641      	mov	r1, r8
 800e454:	4630      	mov	r0, r6
 800e456:	f7fe fbb5 	bl	800cbc4 <lv_ll_get_prev>
 800e45a:	e7b7      	b.n	800e3cc <lv_cont_refr_layout+0x6c>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 800e45c:	1eab      	subs	r3, r5, #2
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b02      	cmp	r3, #2
 800e462:	d84a      	bhi.n	800e4fa <lv_cont_refr_layout+0x19a>
    lv_layout_t type = lv_cont_get_layout(cont);
 800e464:	4620      	mov	r0, r4
 800e466:	f7ff ff74 	bl	800e352 <lv_cont_get_layout>
 800e46a:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 800e46c:	4620      	mov	r0, r4
 800e46e:	f7f9 fa89 	bl	8007984 <lv_obj_get_style>
    switch(type) {
 800e472:	2d03      	cmp	r5, #3
    const lv_style_t * style = lv_obj_get_style(cont);
 800e474:	4607      	mov	r7, r0
    switch(type) {
 800e476:	d008      	beq.n	800e48a <lv_cont_refr_layout+0x12a>
 800e478:	2d04      	cmp	r5, #4
 800e47a:	d036      	beq.n	800e4ea <lv_cont_refr_layout+0x18a>
 800e47c:	2d02      	cmp	r5, #2
 800e47e:	d13a      	bne.n	800e4f6 <lv_cont_refr_layout+0x196>
            hpad_corr = style->body.padding.left;
 800e480:	f9b0 5024 	ldrsh.w	r5, [r0, #36]	; 0x24
            align     = LV_ALIGN_IN_TOP_LEFT;
 800e484:	f04f 0801 	mov.w	r8, #1
 800e488:	e002      	b.n	800e490 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 800e48a:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_TOP_MID;
 800e48c:	f04f 0802 	mov.w	r8, #2
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e490:	4620      	mov	r0, r4
 800e492:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 800e494:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e498:	f7f8 fcf7 	bl	8006e8a <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800e49c:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.top;
 800e49e:	f9b7 a020 	ldrsh.w	sl, [r7, #32]
    LV_LL_READ_BACK(cont->child_ll, child)
 800e4a2:	f7fe fb87 	bl	800cbb4 <lv_ll_get_tail>
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d091      	beq.n	800e3d0 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7f9 fac9 	bl	8007a44 <lv_obj_get_hidden>
 800e4b2:	b9a8      	cbnz	r0, 800e4e0 <lv_cont_refr_layout+0x180>
 800e4b4:	2104      	movs	r1, #4
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7f9 fb3f 	bl	8007b3a <lv_obj_is_protected>
 800e4bc:	b980      	cbnz	r0, 800e4e0 <lv_cont_refr_layout+0x180>
        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 800e4be:	462b      	mov	r3, r5
 800e4c0:	f8cd a000 	str.w	sl, [sp]
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f7f8 fe2d 	bl	8007128 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f7f9 fa4d 	bl	800796e <lv_obj_get_height>
 800e4d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e4d8:	4418      	add	r0, r3
 800e4da:	4450      	add	r0, sl
 800e4dc:	fa0f fa80 	sxth.w	sl, r0
    LV_LL_READ_BACK(cont->child_ll, child)
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	4648      	mov	r0, r9
 800e4e4:	f7fe fb6e 	bl	800cbc4 <lv_ll_get_prev>
 800e4e8:	e7dd      	b.n	800e4a6 <lv_cont_refr_layout+0x146>
            hpad_corr = -style->body.padding.right;
 800e4ea:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
 800e4ec:	426d      	negs	r5, r5
 800e4ee:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_TOP_RIGHT;
 800e4f0:	f04f 0803 	mov.w	r8, #3
 800e4f4:	e7cc      	b.n	800e490 <lv_cont_refr_layout+0x130>
            hpad_corr = 0;
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	e7c4      	b.n	800e484 <lv_cont_refr_layout+0x124>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 800e4fa:	1f6b      	subs	r3, r5, #5
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d84a      	bhi.n	800e598 <lv_cont_refr_layout+0x238>
    lv_layout_t type = lv_cont_get_layout(cont);
 800e502:	4620      	mov	r0, r4
 800e504:	f7ff ff25 	bl	800e352 <lv_cont_get_layout>
 800e508:	4605      	mov	r5, r0
    const lv_style_t * style = lv_obj_get_style(cont);
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7f9 fa3a 	bl	8007984 <lv_obj_get_style>
    switch(type) {
 800e510:	2d06      	cmp	r5, #6
    const lv_style_t * style = lv_obj_get_style(cont);
 800e512:	4607      	mov	r7, r0
    switch(type) {
 800e514:	d008      	beq.n	800e528 <lv_cont_refr_layout+0x1c8>
 800e516:	2d07      	cmp	r5, #7
 800e518:	d036      	beq.n	800e588 <lv_cont_refr_layout+0x228>
 800e51a:	2d05      	cmp	r5, #5
 800e51c:	d13a      	bne.n	800e594 <lv_cont_refr_layout+0x234>
            vpad_corr = style->body.padding.top;
 800e51e:	f9b0 5020 	ldrsh.w	r5, [r0, #32]
            align     = LV_ALIGN_IN_TOP_LEFT;
 800e522:	f04f 0801 	mov.w	r8, #1
 800e526:	e002      	b.n	800e52e <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 800e528:	2500      	movs	r5, #0
            align     = LV_ALIGN_IN_LEFT_MID;
 800e52a:	f04f 0807 	mov.w	r8, #7
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e52e:	4620      	mov	r0, r4
 800e530:	2101      	movs	r1, #1
    LV_LL_READ_BACK(cont->child_ll, child)
 800e532:	f104 0904 	add.w	r9, r4, #4
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e536:	f7f8 fca8 	bl	8006e8a <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800e53a:	4648      	mov	r0, r9
    lv_coord_t last_cord = style->body.padding.left;
 800e53c:	f9b7 a024 	ldrsh.w	sl, [r7, #36]	; 0x24
    LV_LL_READ_BACK(cont->child_ll, child)
 800e540:	f7fe fb38 	bl	800cbb4 <lv_ll_get_tail>
 800e544:	4606      	mov	r6, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f af42 	beq.w	800e3d0 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7f9 fa79 	bl	8007a44 <lv_obj_get_hidden>
 800e552:	b9a0      	cbnz	r0, 800e57e <lv_cont_refr_layout+0x21e>
 800e554:	2104      	movs	r1, #4
 800e556:	4630      	mov	r0, r6
 800e558:	f7f9 faef 	bl	8007b3a <lv_obj_is_protected>
 800e55c:	b978      	cbnz	r0, 800e57e <lv_cont_refr_layout+0x21e>
        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 800e55e:	4653      	mov	r3, sl
 800e560:	4642      	mov	r2, r8
 800e562:	4621      	mov	r1, r4
 800e564:	4630      	mov	r0, r6
 800e566:	9500      	str	r5, [sp, #0]
 800e568:	f7f8 fdde 	bl	8007128 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7f9 f9f8 	bl	8007962 <lv_obj_get_width>
 800e572:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e576:	4403      	add	r3, r0
 800e578:	4453      	add	r3, sl
 800e57a:	fa0f fa83 	sxth.w	sl, r3
    LV_LL_READ_BACK(cont->child_ll, child)
 800e57e:	4631      	mov	r1, r6
 800e580:	4648      	mov	r0, r9
 800e582:	f7fe fb1f 	bl	800cbc4 <lv_ll_get_prev>
 800e586:	e7dd      	b.n	800e544 <lv_cont_refr_layout+0x1e4>
            vpad_corr = -style->body.padding.bottom;
 800e588:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 800e58a:	426d      	negs	r5, r5
 800e58c:	b22d      	sxth	r5, r5
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 800e58e:	f04f 0804 	mov.w	r8, #4
 800e592:	e7cc      	b.n	800e52e <lv_cont_refr_layout+0x1ce>
            vpad_corr = 0;
 800e594:	2500      	movs	r5, #0
 800e596:	e7c4      	b.n	800e522 <lv_cont_refr_layout+0x1c2>
    } else if(type == LV_LAYOUT_PRETTY) {
 800e598:	2d08      	cmp	r5, #8
 800e59a:	f040 80e7 	bne.w	800e76c <lv_cont_refr_layout+0x40c>
    const lv_style_t * style = lv_obj_get_style(cont);
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7f9 f9f0 	bl	8007984 <lv_obj_get_style>
 800e5a4:	4680      	mov	r8, r0
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f7f9 f9db 	bl	8007962 <lv_obj_get_width>
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800e5ac:	1d23      	adds	r3, r4, #4
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 800e5ae:	9003      	str	r0, [sp, #12]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800e5b0:	4618      	mov	r0, r3
    lv_coord_t act_y         = style->body.padding.top;
 800e5b2:	f9b8 a020 	ldrsh.w	sl, [r8, #32]
    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 800e5b6:	9302      	str	r3, [sp, #8]
 800e5b8:	f7fe fafc 	bl	800cbb4 <lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 800e5bc:	4605      	mov	r5, r0
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f000 816f 	beq.w	800e8a2 <lv_cont_refr_layout+0x542>
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f7f8 fc5f 	bl	8006e8a <lv_obj_set_protect>
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 800e5cc:	f8b8 b024 	ldrh.w	fp, [r8, #36]	; 0x24
 800e5d0:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
        uint32_t obj_num = 0;
 800e5d4:	2700      	movs	r7, #0
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 800e5d6:	4483      	add	fp, r0
        lv_coord_t w_row =
 800e5d8:	fa0f fb8b 	sxth.w	fp, fp
 800e5dc:	462e      	mov	r6, r5
        lv_coord_t h_row = 0;
 800e5de:	46b9      	mov	r9, r7
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	f7f9 fa2f 	bl	8007a44 <lv_obj_get_hidden>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d13b      	bne.n	800e662 <lv_cont_refr_layout+0x302>
 800e5ea:	2104      	movs	r1, #4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f7f9 faa4 	bl	8007b3a <lv_obj_is_protected>
 800e5f2:	bbb0      	cbnz	r0, 800e662 <lv_cont_refr_layout+0x302>
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f7f9 f9b4 	bl	8007962 <lv_obj_get_width>
 800e5fa:	9b03      	ldr	r3, [sp, #12]
 800e5fc:	4458      	add	r0, fp
 800e5fe:	4298      	cmp	r0, r3
 800e600:	dd15      	ble.n	800e62e <lv_cont_refr_layout+0x2ce>
                    if(child_rc != NULL && obj_num != 0) {
 800e602:	2f00      	cmp	r7, #0
 800e604:	f000 812c 	beq.w	800e860 <lv_cont_refr_layout+0x500>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 800e608:	4629      	mov	r1, r5
 800e60a:	9802      	ldr	r0, [sp, #8]
 800e60c:	f7fe fad5 	bl	800cbba <lv_ll_get_next>
 800e610:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 800e612:	2f01      	cmp	r7, #1
 800e614:	d130      	bne.n	800e678 <lv_cont_refr_layout+0x318>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 800e616:	f8cd a000 	str.w	sl, [sp]
 800e61a:	2300      	movs	r3, #0
 800e61c:	2202      	movs	r2, #2
 800e61e:	4621      	mov	r1, r4
 800e620:	4630      	mov	r0, r6
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 800e622:	f7f8 fd81 	bl	8007128 <lv_obj_align>
        if(child_rc == NULL) break;
 800e626:	2d00      	cmp	r5, #0
 800e628:	f040 8126 	bne.w	800e878 <lv_cont_refr_layout+0x518>
 800e62c:	e6d0      	b.n	800e3d0 <lv_cont_refr_layout+0x70>
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 800e62e:	4628      	mov	r0, r5
 800e630:	f7f9 f997 	bl	8007962 <lv_obj_get_width>
 800e634:	f9b8 3028 	ldrsh.w	r3, [r8, #40]	; 0x28
 800e638:	4418      	add	r0, r3
 800e63a:	4483      	add	fp, r0
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 800e63c:	4628      	mov	r0, r5
 800e63e:	f7f9 f996 	bl	800796e <lv_obj_get_height>
 800e642:	4548      	cmp	r0, r9
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 800e644:	fa0f fb8b 	sxth.w	fp, fp
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 800e648:	db03      	blt.n	800e652 <lv_cont_refr_layout+0x2f2>
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7f9 f98f 	bl	800796e <lv_obj_get_height>
 800e650:	4681      	mov	r9, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 800e652:	2108      	movs	r1, #8
 800e654:	4628      	mov	r0, r5
                obj_num++;
 800e656:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 800e658:	f7f9 fa6f 	bl	8007b3a <lv_obj_is_protected>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	f040 80fc 	bne.w	800e85a <lv_cont_refr_layout+0x4fa>
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 800e662:	4629      	mov	r1, r5
 800e664:	9802      	ldr	r0, [sp, #8]
 800e666:	f7fe faad 	bl	800cbc4 <lv_ll_get_prev>
 800e66a:	4605      	mov	r5, r0
            if(obj_num == 0)
 800e66c:	2f00      	cmp	r7, #0
 800e66e:	f000 8113 	beq.w	800e898 <lv_cont_refr_layout+0x538>
        } while(child_rc != NULL);
 800e672:	2800      	cmp	r0, #0
 800e674:	d1b4      	bne.n	800e5e0 <lv_cont_refr_layout+0x280>
 800e676:	e7cc      	b.n	800e612 <lv_cont_refr_layout+0x2b2>
        else if(obj_num == 2) {
 800e678:	2f02      	cmp	r7, #2
 800e67a:	d13a      	bne.n	800e6f2 <lv_cont_refr_layout+0x392>
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 800e67c:	4631      	mov	r1, r6
 800e67e:	9802      	ldr	r0, [sp, #8]
 800e680:	f7fe faa0 	bl	800cbc4 <lv_ll_get_prev>
 800e684:	4683      	mov	fp, r0
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 800e686:	4630      	mov	r0, r6
 800e688:	f7f9 f96b 	bl	8007962 <lv_obj_get_width>
 800e68c:	9004      	str	r0, [sp, #16]
 800e68e:	4658      	mov	r0, fp
 800e690:	f7f9 f967 	bl	8007962 <lv_obj_get_width>
 800e694:	9b04      	ldr	r3, [sp, #16]
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800e696:	9a03      	ldr	r2, [sp, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 800e698:	4403      	add	r3, r0
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800e69a:	b21b      	sxth	r3, r3
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 800e69c:	4630      	mov	r0, r6
            lv_coord_t pad  = (w_obj - w_row) / 3;
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	2203      	movs	r2, #3
 800e6a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6a6:	9304      	str	r3, [sp, #16]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 800e6a8:	f7f9 f961 	bl	800796e <lv_obj_get_height>
 800e6ac:	fa1f f38a 	uxth.w	r3, sl
 800e6b0:	eba9 0000 	sub.w	r0, r9, r0
 800e6b4:	fb90 f0f7 	sdiv	r0, r0, r7
 800e6b8:	4418      	add	r0, r3
 800e6ba:	b200      	sxth	r0, r0
 800e6bc:	2201      	movs	r2, #1
 800e6be:	4621      	mov	r1, r4
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	9000      	str	r0, [sp, #0]
 800e6c4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f7f8 fd2d 	bl	8007128 <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	f7f9 f94d 	bl	800796e <lv_obj_get_height>
 800e6d4:	9a05      	ldr	r2, [sp, #20]
 800e6d6:	9b04      	ldr	r3, [sp, #16]
 800e6d8:	eba9 0000 	sub.w	r0, r9, r0
 800e6dc:	fb90 f7f7 	sdiv	r7, r0, r7
 800e6e0:	4417      	add	r7, r2
 800e6e2:	425b      	negs	r3, r3
 800e6e4:	b23f      	sxth	r7, r7
 800e6e6:	9700      	str	r7, [sp, #0]
 800e6e8:	b21b      	sxth	r3, r3
 800e6ea:	2203      	movs	r2, #3
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	e797      	b.n	800e622 <lv_cont_refr_layout+0x2c2>
            w_row -= style->body.padding.inner * obj_num;
 800e6f2:	f9b8 0028 	ldrsh.w	r0, [r8, #40]	; 0x28
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800e6f6:	9b03      	ldr	r3, [sp, #12]
            w_row -= style->body.padding.inner * obj_num;
 800e6f8:	fb10 f007 	smulbb	r0, r0, r7
 800e6fc:	ebab 0b00 	sub.w	fp, fp, r0
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800e700:	fa0f fb8b 	sxth.w	fp, fp
 800e704:	eba3 0b0b 	sub.w	fp, r3, fp
 800e708:	3f01      	subs	r7, #1
 800e70a:	fbbb f7f7 	udiv	r7, fp, r7
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 800e70e:	f9b8 b024 	ldrsh.w	fp, [r8, #36]	; 0x24
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 800e712:	b23f      	sxth	r7, r7
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 800e714:	4630      	mov	r0, r6
 800e716:	f7f9 f995 	bl	8007a44 <lv_obj_get_hidden>
 800e71a:	b9e0      	cbnz	r0, 800e756 <lv_cont_refr_layout+0x3f6>
 800e71c:	2104      	movs	r1, #4
 800e71e:	4630      	mov	r0, r6
 800e720:	f7f9 fa0b 	bl	8007b3a <lv_obj_is_protected>
 800e724:	b9b8      	cbnz	r0, 800e756 <lv_cont_refr_layout+0x3f6>
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 800e726:	4630      	mov	r0, r6
 800e728:	f7f9 f921 	bl	800796e <lv_obj_get_height>
 800e72c:	2302      	movs	r3, #2
 800e72e:	eba9 0000 	sub.w	r0, r9, r0
 800e732:	fb90 f0f3 	sdiv	r0, r0, r3
 800e736:	4450      	add	r0, sl
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 800e738:	b200      	sxth	r0, r0
 800e73a:	465b      	mov	r3, fp
 800e73c:	9000      	str	r0, [sp, #0]
 800e73e:	2201      	movs	r2, #1
 800e740:	4621      	mov	r1, r4
 800e742:	4630      	mov	r0, r6
 800e744:	f7f8 fcf0 	bl	8007128 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 800e748:	4630      	mov	r0, r6
 800e74a:	f7f9 f90a 	bl	8007962 <lv_obj_get_width>
 800e74e:	4438      	add	r0, r7
 800e750:	4483      	add	fp, r0
 800e752:	fa0f fb8b 	sxth.w	fp, fp
                if(child_tmp == child_rc) break;
 800e756:	42ae      	cmp	r6, r5
 800e758:	f000 808f 	beq.w	800e87a <lv_cont_refr_layout+0x51a>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 800e75c:	4631      	mov	r1, r6
 800e75e:	9802      	ldr	r0, [sp, #8]
 800e760:	f7fe fa30 	bl	800cbc4 <lv_ll_get_prev>
            while(child_tmp != NULL) {
 800e764:	4606      	mov	r6, r0
 800e766:	2800      	cmp	r0, #0
 800e768:	d1d4      	bne.n	800e714 <lv_cont_refr_layout+0x3b4>
 800e76a:	e75c      	b.n	800e626 <lv_cont_refr_layout+0x2c6>
    } else if(type == LV_LAYOUT_GRID) {
 800e76c:	2d09      	cmp	r5, #9
 800e76e:	f040 8098 	bne.w	800e8a2 <lv_cont_refr_layout+0x542>
    const lv_style_t * style = lv_obj_get_style(cont);
 800e772:	4620      	mov	r0, r4
 800e774:	f7f9 f906 	bl	8007984 <lv_obj_get_style>
 800e778:	4681      	mov	r9, r0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7f9 f8f1 	bl	8007962 <lv_obj_get_width>
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 800e780:	2100      	movs	r1, #0
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 800e782:	4607      	mov	r7, r0
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 800e784:	4620      	mov	r0, r4
 800e786:	f7f9 f8ae 	bl	80078e6 <lv_obj_get_child>
 800e78a:	f7f9 f8ea 	bl	8007962 <lv_obj_get_width>
 800e78e:	4605      	mov	r5, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 800e790:	4620      	mov	r0, r4
 800e792:	f7f9 f949 	bl	8007a28 <lv_obj_get_width_fit>
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 800e796:	2100      	movs	r1, #0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 800e798:	4606      	mov	r6, r0
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 800e79a:	4620      	mov	r0, r4
 800e79c:	f7f9 f8a3 	bl	80078e6 <lv_obj_get_child>
 800e7a0:	f7f9 f8e5 	bl	800796e <lv_obj_get_height>
    uint16_t obj_row         = (w_fit) / (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 800e7a4:	f9b9 2028 	ldrsh.w	r2, [r9, #40]	; 0x28
 800e7a8:	1953      	adds	r3, r2, r5
 800e7aa:	fb96 f3f3 	sdiv	r3, r6, r3
 800e7ae:	fa1f fa83 	uxth.w	sl, r3
    if(obj_row > 1) {
 800e7b2:	f1ba 0f01 	cmp.w	sl, #1
 800e7b6:	d944      	bls.n	800e842 <lv_cont_refr_layout+0x4e2>
        x_ofs = w_obj + (w_fit - (obj_row * w_obj)) / (obj_row - 1);
 800e7b8:	fb0a 6615 	mls	r6, sl, r5, r6
 800e7bc:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e7c0:	fb96 f3f3 	sdiv	r3, r6, r3
 800e7c4:	441d      	add	r5, r3
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 800e7c6:	4410      	add	r0, r2
 800e7c8:	b283      	uxth	r3, r0
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	4620      	mov	r0, r4
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 800e7ce:	9302      	str	r3, [sp, #8]
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 800e7d0:	f7f8 fb5b 	bl	8006e8a <lv_obj_set_protect>
    LV_LL_READ_BACK(cont->child_ll, child)
 800e7d4:	1d23      	adds	r3, r4, #4
 800e7d6:	4618      	mov	r0, r3
    lv_coord_t act_x = style->body.padding.left;
 800e7d8:	f9b9 6024 	ldrsh.w	r6, [r9, #36]	; 0x24
    lv_coord_t act_y = style->body.padding.top;
 800e7dc:	f9b9 7020 	ldrsh.w	r7, [r9, #32]
    LV_LL_READ_BACK(cont->child_ll, child)
 800e7e0:	9303      	str	r3, [sp, #12]
 800e7e2:	f7fe f9e7 	bl	800cbb4 <lv_ll_get_tail>
        x_ofs = w_tot / 2 - w_obj / 2;
 800e7e6:	b22d      	sxth	r5, r5
    LV_LL_READ_BACK(cont->child_ll, child)
 800e7e8:	4683      	mov	fp, r0
    uint16_t obj_cnt = 0;
 800e7ea:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 800e7ee:	f1bb 0f00 	cmp.w	fp, #0
 800e7f2:	f43f aded 	beq.w	800e3d0 <lv_cont_refr_layout+0x70>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 800e7f6:	4658      	mov	r0, fp
 800e7f8:	f7f9 f924 	bl	8007a44 <lv_obj_get_hidden>
 800e7fc:	b9d8      	cbnz	r0, 800e836 <lv_cont_refr_layout+0x4d6>
 800e7fe:	2104      	movs	r1, #4
 800e800:	4658      	mov	r0, fp
 800e802:	f7f9 f99a 	bl	8007b3a <lv_obj_is_protected>
 800e806:	b9b0      	cbnz	r0, 800e836 <lv_cont_refr_layout+0x4d6>
        if(obj_row > 1) {
 800e808:	f1ba 0f01 	cmp.w	sl, #1
            lv_obj_set_pos(child, act_x, act_y);
 800e80c:	463a      	mov	r2, r7
        if(obj_row > 1) {
 800e80e:	d91f      	bls.n	800e850 <lv_cont_refr_layout+0x4f0>
            lv_obj_set_pos(child, act_x, act_y);
 800e810:	4631      	mov	r1, r6
 800e812:	4658      	mov	r0, fp
 800e814:	f7f8 fc33 	bl	800707e <lv_obj_set_pos>
            act_x += x_ofs;
 800e818:	442e      	add	r6, r5
 800e81a:	b236      	sxth	r6, r6
        obj_cnt++;
 800e81c:	f108 0801 	add.w	r8, r8, #1
 800e820:	fa1f f888 	uxth.w	r8, r8
        if(obj_cnt >= obj_row) {
 800e824:	45c2      	cmp	sl, r8
 800e826:	d806      	bhi.n	800e836 <lv_cont_refr_layout+0x4d6>
            act_y += y_ofs;
 800e828:	9b02      	ldr	r3, [sp, #8]
            act_x   = style->body.padding.left;
 800e82a:	f9b9 6024 	ldrsh.w	r6, [r9, #36]	; 0x24
            act_y += y_ofs;
 800e82e:	441f      	add	r7, r3
 800e830:	b23f      	sxth	r7, r7
            obj_cnt = 0;
 800e832:	f04f 0800 	mov.w	r8, #0
    LV_LL_READ_BACK(cont->child_ll, child)
 800e836:	4659      	mov	r1, fp
 800e838:	9803      	ldr	r0, [sp, #12]
 800e83a:	f7fe f9c3 	bl	800cbc4 <lv_ll_get_prev>
 800e83e:	4683      	mov	fp, r0
 800e840:	e7d5      	b.n	800e7ee <lv_cont_refr_layout+0x48e>
        x_ofs = w_tot / 2 - w_obj / 2;
 800e842:	2302      	movs	r3, #2
 800e844:	fb97 f7f3 	sdiv	r7, r7, r3
 800e848:	fb95 f5f3 	sdiv	r5, r5, r3
 800e84c:	1b7d      	subs	r5, r7, r5
 800e84e:	e7ba      	b.n	800e7c6 <lv_cont_refr_layout+0x466>
            lv_obj_set_pos(child, x_ofs, act_y);
 800e850:	4629      	mov	r1, r5
 800e852:	4658      	mov	r0, fp
 800e854:	f7f8 fc13 	bl	800707e <lv_obj_set_pos>
 800e858:	e7e0      	b.n	800e81c <lv_cont_refr_layout+0x4bc>
        if(obj_num == 0) {
 800e85a:	2f00      	cmp	r7, #0
 800e85c:	f47f aed9 	bne.w	800e612 <lv_cont_refr_layout+0x2b2>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 800e860:	2300      	movs	r3, #0
 800e862:	2202      	movs	r2, #2
 800e864:	4621      	mov	r1, r4
 800e866:	4628      	mov	r0, r5
 800e868:	f8cd a000 	str.w	sl, [sp]
 800e86c:	f7f8 fc5c 	bl	8007128 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 800e870:	4628      	mov	r0, r5
 800e872:	f7f9 f87c 	bl	800796e <lv_obj_get_height>
 800e876:	4681      	mov	r9, r0
        if(child_rc == NULL) break;
 800e878:	462e      	mov	r6, r5
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800e87a:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 800e87e:	9802      	ldr	r0, [sp, #8]
 800e880:	4631      	mov	r1, r6
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800e882:	449a      	add	sl, r3
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 800e884:	f7fe f99e 	bl	800cbc4 <lv_ll_get_prev>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 800e888:	44d1      	add	r9, sl
 800e88a:	fa0f fa89 	sxth.w	sl, r9
    while(child_rs != NULL) {
 800e88e:	4605      	mov	r5, r0
 800e890:	2800      	cmp	r0, #0
 800e892:	f47f ae9b 	bne.w	800e5cc <lv_cont_refr_layout+0x26c>
 800e896:	e59b      	b.n	800e3d0 <lv_cont_refr_layout+0x70>
        } while(child_rc != NULL);
 800e898:	2800      	cmp	r0, #0
 800e89a:	f43f ad99 	beq.w	800e3d0 <lv_cont_refr_layout+0x70>
 800e89e:	462e      	mov	r6, r5
 800e8a0:	e69e      	b.n	800e5e0 <lv_cont_refr_layout+0x280>
}
 800e8a2:	b007      	add	sp, #28
 800e8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8a8 <lv_cont_signal>:
{
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(cont, sign, param);
 800e8aa:	4b1e      	ldr	r3, [pc, #120]	; (800e924 <lv_cont_signal+0x7c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
{
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	4616      	mov	r6, r2
    res = ancestor_signal(cont, sign, param);
 800e8b4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800e8b6:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 800e8b8:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800e8ba:	d120      	bne.n	800e8fe <lv_cont_signal+0x56>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 800e8bc:	2f04      	cmp	r7, #4
 800e8be:	d106      	bne.n	800e8ce <lv_cont_signal+0x26>
        lv_cont_refr_layout(cont);
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f7ff fd4d 	bl	800e360 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f7ff fb72 	bl	800dfb0 <lv_cont_refr_autofit>
 800e8cc:	e017      	b.n	800e8fe <lv_cont_signal+0x56>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 800e8ce:	2f01      	cmp	r7, #1
 800e8d0:	d0f6      	beq.n	800e8c0 <lv_cont_signal+0x18>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800e8d2:	2f02      	cmp	r7, #2
 800e8d4:	d115      	bne.n	800e902 <lv_cont_signal+0x5a>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f7f9 f843 	bl	8007962 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 800e8dc:	88b3      	ldrh	r3, [r6, #4]
 800e8de:	8832      	ldrh	r2, [r6, #0]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	1a9b      	subs	r3, r3, r2
 800e8e4:	b21b      	sxth	r3, r3
 800e8e6:	4298      	cmp	r0, r3
 800e8e8:	d1ea      	bne.n	800e8c0 <lv_cont_signal+0x18>
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7f9 f83f 	bl	800796e <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 800e8f0:	88f3      	ldrh	r3, [r6, #6]
 800e8f2:	8872      	ldrh	r2, [r6, #2]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	1a9b      	subs	r3, r3, r2
 800e8f8:	b21b      	sxth	r3, r3
 800e8fa:	4298      	cmp	r0, r3
 800e8fc:	d1e0      	bne.n	800e8c0 <lv_cont_signal+0x18>
}
 800e8fe:	4628      	mov	r0, r5
 800e900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 800e902:	2f03      	cmp	r7, #3
 800e904:	d0df      	beq.n	800e8c6 <lv_cont_signal+0x1e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800e906:	2f06      	cmp	r7, #6
 800e908:	d1f9      	bne.n	800e8fe <lv_cont_signal+0x56>
 800e90a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800e90c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800e910:	b2da      	uxtb	r2, r3
 800e912:	b119      	cbz	r1, 800e91c <lv_cont_signal+0x74>
 800e914:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800e916:	2b07      	cmp	r3, #7
 800e918:	d1f8      	bne.n	800e90c <lv_cont_signal+0x64>
 800e91a:	461a      	mov	r2, r3
        buf->type[i] = "lv_cont";
 800e91c:	4b02      	ldr	r3, [pc, #8]	; (800e928 <lv_cont_signal+0x80>)
 800e91e:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800e922:	e7ec      	b.n	800e8fe <lv_cont_signal+0x56>
 800e924:	20015168 	.word	0x20015168
 800e928:	080faece 	.word	0x080faece

0800e92c <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 800e92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e930:	b09d      	sub	sp, #116	; 0x74
 800e932:	4690      	mov	r8, r2
 800e934:	4681      	mov	r9, r0
 800e936:	460d      	mov	r5, r1
    const lv_style_t * style = lv_obj_get_style(img);
 800e938:	f7f9 f824 	bl	8007984 <lv_obj_get_style>
 800e93c:	4606      	mov	r6, r0
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 800e93e:	4648      	mov	r0, r9
 800e940:	f7f9 f906 	bl	8007b50 <lv_obj_get_ext_attr>

    if(mode == LV_DESIGN_COVER_CHK) {
 800e944:	f1b8 0f02 	cmp.w	r8, #2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 800e948:	4604      	mov	r4, r0
    if(mode == LV_DESIGN_COVER_CHK) {
 800e94a:	d115      	bne.n	800e978 <lv_img_design+0x4c>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800e94c:	7b03      	ldrb	r3, [r0, #12]
 800e94e:	f003 0203 	and.w	r2, r3, #3
 800e952:	3a02      	subs	r2, #2
 800e954:	2a01      	cmp	r2, #1
 800e956:	f240 808e 	bls.w	800ea76 <lv_img_design+0x14a>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 800e95a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800e95e:	2b20      	cmp	r3, #32
 800e960:	d002      	beq.n	800e968 <lv_img_design+0x3c>
 800e962:	2b08      	cmp	r3, #8
 800e964:	f040 8087 	bne.w	800ea76 <lv_img_design+0x14a>
 800e968:	f109 0110 	add.w	r1, r9, #16
 800e96c:	4628      	mov	r0, r5
 800e96e:	f7fd ffc7 	bl	800c900 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 800e972:	b01d      	add	sp, #116	; 0x74
 800e974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800e978:	f1b8 0f00 	cmp.w	r8, #0
 800e97c:	d105      	bne.n	800e98a <lv_img_design+0x5e>
        if(ext->h == 0 || ext->w == 0) return true;
 800e97e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e982:	b113      	cbz	r3, 800e98a <lv_img_design+0x5e>
 800e984:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800e988:	b90b      	cbnz	r3, 800e98e <lv_img_design+0x62>
    return true;
 800e98a:	2001      	movs	r0, #1
 800e98c:	e7f1      	b.n	800e972 <lv_img_design+0x46>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800e98e:	4648      	mov	r0, r9
 800e990:	f7f9 f876 	bl	8007a80 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 800e994:	a906      	add	r1, sp, #24
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800e996:	4607      	mov	r7, r0
        lv_obj_get_coords(img, &coords);
 800e998:	4648      	mov	r0, r9
 800e99a:	f7f8 ffd0 	bl	800793e <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 800e99e:	7b23      	ldrb	r3, [r4, #12]
 800e9a0:	f003 0303 	and.w	r3, r3, #3
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d842      	bhi.n	800ea2e <lv_img_design+0x102>
            coords.x1 -= ext->offset.x;
 800e9a8:	88a2      	ldrh	r2, [r4, #4]
 800e9aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800e9ae:	1a9b      	subs	r3, r3, r2
 800e9b0:	f8ad 3018 	strh.w	r3, [sp, #24]
            coords.y1 -= ext->offset.y;
 800e9b4:	88e2      	ldrh	r2, [r4, #6]
 800e9b6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800e9ba:	1a9b      	subs	r3, r3, r2
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	b21a      	sxth	r2, r3
 800e9c0:	f8ad 201a 	strh.w	r2, [sp, #26]
            cords_tmp.y1 = coords.y1;
 800e9c4:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 800e9c8:	8962      	ldrh	r2, [r4, #10]
 800e9ca:	3a01      	subs	r2, #1
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e9d2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800e9d6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	dad5      	bge.n	800e98a <lv_img_design+0x5e>
                cords_tmp.x1 = coords.x1;
 800e9de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 800e9e2:	8922      	ldrh	r2, [r4, #8]
                cords_tmp.x1 = coords.x1;
 800e9e4:	f8ad 3020 	strh.w	r3, [sp, #32]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 800e9e8:	3b01      	subs	r3, #1
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e9f0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800e9f4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	db08      	blt.n	800ea0e <lv_img_design+0xe2>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800e9fc:	8963      	ldrh	r3, [r4, #10]
 800e9fe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ea02:	441a      	add	r2, r3
 800ea04:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 800ea08:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800ea0c:	e7de      	b.n	800e9cc <lv_img_design+0xa0>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 800ea0e:	9700      	str	r7, [sp, #0]
 800ea10:	4633      	mov	r3, r6
 800ea12:	6822      	ldr	r2, [r4, #0]
 800ea14:	4629      	mov	r1, r5
 800ea16:	a808      	add	r0, sp, #32
 800ea18:	f7fa fbe0 	bl	80091dc <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800ea1c:	8923      	ldrh	r3, [r4, #8]
 800ea1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ea22:	441a      	add	r2, r3
 800ea24:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ea28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ea2c:	e7dd      	b.n	800e9ea <lv_img_design+0xbe>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d118      	bne.n	800ea64 <lv_img_design+0x138>
            lv_style_copy(&style_mod, style);
 800ea32:	4631      	mov	r1, r6
 800ea34:	a808      	add	r0, sp, #32
 800ea36:	f7f9 fbd5 	bl	80081e4 <lv_style_copy>
            style_mod.text.color = style->image.color;
 800ea3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ea3c:	9313      	str	r3, [sp, #76]	; 0x4c
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800ea3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea42:	f8cd 8014 	str.w	r8, [sp, #20]
 800ea46:	9304      	str	r3, [sp, #16]
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ea4e:	f8cd 8004 	str.w	r8, [sp, #4]
 800ea52:	6823      	ldr	r3, [r4, #0]
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	aa08      	add	r2, sp, #32
 800ea58:	463b      	mov	r3, r7
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	a806      	add	r0, sp, #24
 800ea5e:	f7fa fcbb 	bl	80093d8 <lv_draw_label>
 800ea62:	e792      	b.n	800e98a <lv_img_design+0x5e>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 800ea64:	9700      	str	r7, [sp, #0]
 800ea66:	4633      	mov	r3, r6
 800ea68:	4642      	mov	r2, r8
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	f109 0010 	add.w	r0, r9, #16
 800ea70:	f7fa fbb4 	bl	80091dc <lv_draw_img>
 800ea74:	e789      	b.n	800e98a <lv_img_design+0x5e>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800ea76:	2000      	movs	r0, #0
 800ea78:	e77b      	b.n	800e972 <lv_img_design+0x46>

0800ea7a <lv_img_set_auto_size>:
{
 800ea7a:	b510      	push	{r4, lr}
 800ea7c:	460c      	mov	r4, r1
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800ea7e:	f7f9 f867 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->auto_size = (en == false ? 0 : 1);
 800ea82:	7b03      	ldrb	r3, [r0, #12]
 800ea84:	f364 0382 	bfi	r3, r4, #2, #1
 800ea88:	7303      	strb	r3, [r0, #12]
 800ea8a:	bd10      	pop	{r4, pc}

0800ea8c <lv_img_get_auto_size>:
{
 800ea8c:	b508      	push	{r3, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800ea8e:	f7f9 f85f 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 800ea92:	7b00      	ldrb	r0, [r0, #12]
}
 800ea94:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800ea98:	bd08      	pop	{r3, pc}

0800ea9a <lv_img_set_src>:
{
 800ea9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	b086      	sub	sp, #24
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800eaa2:	4608      	mov	r0, r1
{
 800eaa4:	460d      	mov	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800eaa6:	f7fa fc71 	bl	800938c <lv_img_src_get_type>
 800eaaa:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7f9 f84f 	bl	8007b50 <lv_obj_get_ext_attr>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 800eab2:	2f03      	cmp	r7, #3
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800eab4:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 800eab6:	d111      	bne.n	800eadc <lv_img_set_src+0x42>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 800eab8:	7b03      	ldrb	r3, [r0, #12]
 800eaba:	f003 0303 	and.w	r3, r3, #3
 800eabe:	3b01      	subs	r3, #1
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d802      	bhi.n	800eaca <lv_img_set_src+0x30>
            lv_mem_free(ext->src);
 800eac4:	6800      	ldr	r0, [r0, #0]
 800eac6:	f7fe f9ef 	bl	800cea8 <lv_mem_free>
        ext->src      = NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 800eace:	7b23      	ldrb	r3, [r4, #12]
 800ead0:	f043 0303 	orr.w	r3, r3, #3
 800ead4:	7323      	strb	r3, [r4, #12]
}
 800ead6:	b006      	add	sp, #24
 800ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src_img, &header);
 800eadc:	a904      	add	r1, sp, #16
 800eade:	4628      	mov	r0, r5
 800eae0:	f7fd f9fe 	bl	800bee0 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800eae4:	bb4f      	cbnz	r7, 800eb3a <lv_img_set_src+0xa0>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800eae6:	7b23      	ldrb	r3, [r4, #12]
 800eae8:	f003 0303 	and.w	r3, r3, #3
 800eaec:	3b01      	subs	r3, #1
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d802      	bhi.n	800eaf8 <lv_img_set_src+0x5e>
            lv_mem_free(ext->src);
 800eaf2:	6820      	ldr	r0, [r4, #0]
 800eaf4:	f7fe f9d8 	bl	800cea8 <lv_mem_free>
        ext->src = src_img;
 800eaf8:	6025      	str	r5, [r4, #0]
    ext->w        = header.w;
 800eafa:	9a04      	ldr	r2, [sp, #16]
    ext->src_type = src_type;
 800eafc:	7b23      	ldrb	r3, [r4, #12]
    ext->w        = header.w;
 800eafe:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800eb02:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 800eb04:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800eb08:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800eb0c:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 800eb0e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ext->src_type = src_type;
 800eb12:	f367 0301 	bfi	r3, r7, #0, #2
    ext->cf       = header.cf;
 800eb16:	f362 03c7 	bfi	r3, r2, #3, #5
 800eb1a:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f7ff ffb5 	bl	800ea8c <lv_img_get_auto_size>
 800eb22:	b130      	cbz	r0, 800eb32 <lv_img_set_src+0x98>
        lv_obj_set_size(img, ext->w, ext->h);
 800eb24:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800eb28:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7f8 fe65 	bl	80077fc <lv_obj_set_size>
    lv_obj_invalidate(img);
 800eb32:	4630      	mov	r0, r6
 800eb34:	f7f8 fa36 	bl	8006fa4 <lv_obj_invalidate>
 800eb38:	e7cd      	b.n	800ead6 <lv_img_set_src+0x3c>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 800eb3a:	1e7b      	subs	r3, r7, #1
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d8db      	bhi.n	800eafa <lv_img_set_src+0x60>
        if(ext->src != src_img) {
 800eb42:	6820      	ldr	r0, [r4, #0]
 800eb44:	4285      	cmp	r5, r0
 800eb46:	d015      	beq.n	800eb74 <lv_img_set_src+0xda>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800eb48:	7b23      	ldrb	r3, [r4, #12]
 800eb4a:	f003 0303 	and.w	r3, r3, #3
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d801      	bhi.n	800eb58 <lv_img_set_src+0xbe>
                lv_mem_free(ext->src);
 800eb54:	f7fe f9a8 	bl	800cea8 <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f7f1 fb43 	bl	80001e4 <strlen>
 800eb5e:	3001      	adds	r0, #1
 800eb60:	f7fe f96c 	bl	800ce3c <lv_mem_alloc>
            lv_mem_assert(new_str);
 800eb64:	4680      	mov	r8, r0
 800eb66:	b900      	cbnz	r0, 800eb6a <lv_img_set_src+0xd0>
 800eb68:	e7fe      	b.n	800eb68 <lv_img_set_src+0xce>
            strcpy(new_str, src_img);
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f001 fea2 	bl	80108b4 <strcpy>
            ext->src = new_str;
 800eb70:	f8c4 8000 	str.w	r8, [r4]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800eb74:	2f02      	cmp	r7, #2
 800eb76:	d1c0      	bne.n	800eafa <lv_img_set_src+0x60>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f7f8 ff03 	bl	8007984 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800eb84:	9202      	str	r2, [sp, #8]
 800eb86:	f647 4218 	movw	r2, #31768	; 0x7c18
 800eb8a:	9201      	str	r2, [sp, #4]
 800eb8c:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 800eb90:	9200      	str	r2, [sp, #0]
 800eb92:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eb94:	4629      	mov	r1, r5
 800eb96:	a805      	add	r0, sp, #20
 800eb98:	f7fe fd0e 	bl	800d5b8 <lv_txt_get_size>
        header.w = size.x;
 800eb9c:	9b04      	ldr	r3, [sp, #16]
 800eb9e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800eba2:	f362 2394 	bfi	r3, r2, #10, #11
        header.h = size.y;
 800eba6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        header.w = size.x;
 800ebaa:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 800ebac:	0c1b      	lsrs	r3, r3, #16
 800ebae:	f362 134f 	bfi	r3, r2, #5, #11
 800ebb2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800ebb6:	e7a0      	b.n	800eafa <lv_img_set_src+0x60>

0800ebb8 <lv_img_create>:
{
 800ebb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebbc:	4680      	mov	r8, r0
 800ebbe:	460e      	mov	r6, r1
    new_img = lv_obj_create(par, copy);
 800ebc0:	f7f8 fcd4 	bl	800756c <lv_obj_create>
    lv_mem_assert(new_img);
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	b900      	cbnz	r0, 800ebca <lv_img_create+0x12>
 800ebc8:	e7fe      	b.n	800ebc8 <lv_img_create+0x10>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 800ebca:	4c2a      	ldr	r4, [pc, #168]	; (800ec74 <lv_img_create+0xbc>)
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	b913      	cbnz	r3, 800ebd6 <lv_img_create+0x1e>
 800ebd0:	f7f8 ffba 	bl	8007b48 <lv_obj_get_signal_cb>
 800ebd4:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 800ebd6:	2110      	movs	r1, #16
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f7f8 f9b6 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800ebde:	4604      	mov	r4, r0
 800ebe0:	b900      	cbnz	r0, 800ebe4 <lv_img_create+0x2c>
 800ebe2:	e7fe      	b.n	800ebe2 <lv_img_create+0x2a>
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 800ebe4:	7b03      	ldrb	r3, [r0, #12]
    ext->src       = NULL;
 800ebe6:	2700      	movs	r7, #0
    ext->cf        = LV_IMG_CF_UNKNOWN;
 800ebe8:	f043 0303 	orr.w	r3, r3, #3
 800ebec:	f367 03c7 	bfi	r3, r7, #3, #5
 800ebf0:	7303      	strb	r3, [r0, #12]
    ext->src       = NULL;
 800ebf2:	6007      	str	r7, [r0, #0]
    ext->w         = lv_obj_get_width(new_img);
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f7f8 feb4 	bl	8007962 <lv_obj_get_width>
 800ebfa:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7f8 feb6 	bl	800796e <lv_obj_get_height>
    ext->auto_size = 1;
 800ec02:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 800ec04:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 800ec06:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800ec0a:	491b      	ldr	r1, [pc, #108]	; (800ec78 <lv_img_create+0xc0>)
    ext->auto_size = 1;
 800ec0c:	7323      	strb	r3, [r4, #12]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800ec0e:	4628      	mov	r0, r5
    ext->offset.x  = 0;
 800ec10:	80a7      	strh	r7, [r4, #4]
    ext->offset.y  = 0;
 800ec12:	80e7      	strh	r7, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800ec14:	f7f8 f995 	bl	8006f42 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 800ec18:	4918      	ldr	r1, [pc, #96]	; (800ec7c <lv_img_create+0xc4>)
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	f7f8 f993 	bl	8006f46 <lv_obj_set_design_cb>
    if(copy == NULL) {
 800ec20:	b9b6      	cbnz	r6, 800ec50 <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 800ec22:	4631      	mov	r1, r6
 800ec24:	4628      	mov	r0, r5
 800ec26:	f7f8 f929 	bl	8006e7c <lv_obj_set_click>
 800ec2a:	7b23      	ldrb	r3, [r4, #12]
        if(par != NULL) {
 800ec2c:	f1b8 0f00 	cmp.w	r8, #0
 800ec30:	d009      	beq.n	800ec46 <lv_img_create+0x8e>
            ext->auto_size = 1;
 800ec32:	f043 0304 	orr.w	r3, r3, #4
 800ec36:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 800ec38:	4631      	mov	r1, r6
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	f7f8 fe75 	bl	800792a <lv_obj_set_style>
}
 800ec40:	4628      	mov	r0, r5
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ext->auto_size = 0;
 800ec46:	f368 0382 	bfi	r3, r8, #2, #1
 800ec4a:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800ec4c:	490c      	ldr	r1, [pc, #48]	; (800ec80 <lv_img_create+0xc8>)
 800ec4e:	e7f4      	b.n	800ec3a <lv_img_create+0x82>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7f8 ff7d 	bl	8007b50 <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 800ec56:	7b03      	ldrb	r3, [r0, #12]
 800ec58:	7b22      	ldrb	r2, [r4, #12]
 800ec5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ec5e:	f363 0282 	bfi	r2, r3, #2, #1
 800ec62:	7322      	strb	r2, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 800ec64:	6801      	ldr	r1, [r0, #0]
 800ec66:	4628      	mov	r0, r5
 800ec68:	f7ff ff17 	bl	800ea9a <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f7f8 fe1e 	bl	80078ae <lv_obj_refresh_style>
 800ec72:	e7e5      	b.n	800ec40 <lv_img_create+0x88>
 800ec74:	2001516c 	.word	0x2001516c
 800ec78:	0800ec85 	.word	0x0800ec85
 800ec7c:	0800e92d 	.word	0x0800e92d
 800ec80:	20015cc0 	.word	0x20015cc0

0800ec84 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 800ec84:	4b1d      	ldr	r3, [pc, #116]	; (800ecfc <lv_img_signal+0x78>)
{
 800ec86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(img, sign, param);
 800ec8a:	681b      	ldr	r3, [r3, #0]
{
 800ec8c:	4680      	mov	r8, r0
 800ec8e:	460d      	mov	r5, r1
 800ec90:	4617      	mov	r7, r2
    res = ancestor_signal(img, sign, param);
 800ec92:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800ec94:	2801      	cmp	r0, #1
    res = ancestor_signal(img, sign, param);
 800ec96:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 800ec98:	d112      	bne.n	800ecc0 <lv_img_signal+0x3c>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	f7f8 ff58 	bl	8007b50 <lv_obj_get_ext_attr>
 800eca0:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800eca2:	b985      	cbnz	r5, 800ecc6 <lv_img_signal+0x42>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800eca4:	7b03      	ldrb	r3, [r0, #12]
 800eca6:	f003 0303 	and.w	r3, r3, #3
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d807      	bhi.n	800ecc0 <lv_img_signal+0x3c>
            lv_mem_free(ext->src);
 800ecb0:	6800      	ldr	r0, [r0, #0]
 800ecb2:	f7fe f8f9 	bl	800cea8 <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800ecb6:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 800ecb8:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800ecba:	f043 0303 	orr.w	r3, r3, #3
 800ecbe:	7323      	strb	r3, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800ecc6:	2d04      	cmp	r5, #4
 800ecc8:	d109      	bne.n	800ecde <lv_img_signal+0x5a>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800ecca:	7b03      	ldrb	r3, [r0, #12]
 800eccc:	f003 0303 	and.w	r3, r3, #3
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	d1f5      	bne.n	800ecc0 <lv_img_signal+0x3c>
            lv_img_set_src(img, ext->src);
 800ecd4:	6801      	ldr	r1, [r0, #0]
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f7ff fedf 	bl	800ea9a <lv_img_set_src>
 800ecdc:	e7f0      	b.n	800ecc0 <lv_img_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800ecde:	2d06      	cmp	r5, #6
 800ece0:	d1ee      	bne.n	800ecc0 <lv_img_signal+0x3c>
 800ece2:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800ece4:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	b119      	cbz	r1, 800ecf4 <lv_img_signal+0x70>
 800ecec:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800ecee:	2b07      	cmp	r3, #7
 800ecf0:	d1f8      	bne.n	800ece4 <lv_img_signal+0x60>
 800ecf2:	461a      	mov	r2, r3
        buf->type[i] = "lv_img";
 800ecf4:	4b02      	ldr	r3, [pc, #8]	; (800ed00 <lv_img_signal+0x7c>)
 800ecf6:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 800ecfa:	e7e1      	b.n	800ecc0 <lv_img_signal+0x3c>
 800ecfc:	2001516c 	.word	0x2001516c
 800ed00:	080faed6 	.word	0x080faed6

0800ed04 <refr_img>:

    return res;
}

static void refr_img(lv_obj_t * imgbtn)
{
 800ed04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed06:	4604      	mov	r4, r0
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800ed08:	f7f8 ff22 	bl	8007b50 <lv_obj_get_ext_attr>
 800ed0c:	4605      	mov	r5, r0
 * @param imgbtn pointer to a image button object
 * @return the state of the button (from lv_btn_state_t enum)
 */
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)
{
    return lv_btn_get_state(imgbtn);
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f7ff f86a 	bl	800dde8 <lv_btn_get_state>
    lv_btn_state_t state  = lv_imgbtn_get_state(imgbtn);
    lv_img_header_t header;

#if LV_IMGBTN_TILED == 0
    const void * src = ext->img_src[state];
 800ed14:	eb05 0080 	add.w	r0, r5, r0, lsl #2
#else
    const void * src = ext->img_src_mid[state];
#endif

    lv_res_t info_res;
    info_res = lv_img_decoder_get_info(src, &header);
 800ed18:	a901      	add	r1, sp, #4
 800ed1a:	69c0      	ldr	r0, [r0, #28]
 800ed1c:	f7fd f8e0 	bl	800bee0 <lv_img_decoder_get_info>
    if(info_res == LV_RES_OK) {
 800ed20:	2801      	cmp	r0, #1
 800ed22:	d114      	bne.n	800ed4e <refr_img+0x4a>
        ext->act_cf = header.cf;
 800ed24:	f89d 3004 	ldrb.w	r3, [sp, #4]
#if LV_IMGBTN_TILED == 0
        lv_obj_set_size(imgbtn, header.w, header.h);
 800ed28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ed2c:	9901      	ldr	r1, [sp, #4]
        ext->act_cf = header.cf;
 800ed2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800ed32:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        lv_obj_set_size(imgbtn, header.w, header.h);
 800ed36:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800ed3a:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f7f8 fd5c 	bl	80077fc <lv_obj_set_size>
#endif
    } else {
        ext->act_cf = LV_IMG_CF_UNKNOWN;
    }

    lv_obj_invalidate(imgbtn);
 800ed44:	4620      	mov	r0, r4
 800ed46:	f7f8 f92d 	bl	8006fa4 <lv_obj_invalidate>
}
 800ed4a:	b003      	add	sp, #12
 800ed4c:	bd30      	pop	{r4, r5, pc}
        ext->act_cf = LV_IMG_CF_UNKNOWN;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ed54:	e7f6      	b.n	800ed44 <refr_img+0x40>
	...

0800ed58 <lv_imgbtn_signal>:
{
 800ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = ancestor_signal(imgbtn, sign, param);
 800ed5a:	4b0f      	ldr	r3, [pc, #60]	; (800ed98 <lv_imgbtn_signal+0x40>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
{
 800ed5e:	4607      	mov	r7, r0
 800ed60:	460e      	mov	r6, r1
 800ed62:	4615      	mov	r5, r2
    res = ancestor_signal(imgbtn, sign, param);
 800ed64:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800ed66:	2801      	cmp	r0, #1
    res = ancestor_signal(imgbtn, sign, param);
 800ed68:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
 800ed6a:	d104      	bne.n	800ed76 <lv_imgbtn_signal+0x1e>
    if(sign == LV_SIGNAL_STYLE_CHG) {
 800ed6c:	2e04      	cmp	r6, #4
 800ed6e:	d104      	bne.n	800ed7a <lv_imgbtn_signal+0x22>
        refr_img(imgbtn);
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7ff ffc7 	bl	800ed04 <refr_img>
}
 800ed76:	4620      	mov	r0, r4
 800ed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800ed7a:	2e06      	cmp	r6, #6
 800ed7c:	d1fb      	bne.n	800ed76 <lv_imgbtn_signal+0x1e>
 800ed7e:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800ed80:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	b119      	cbz	r1, 800ed90 <lv_imgbtn_signal+0x38>
 800ed88:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800ed8a:	2b07      	cmp	r3, #7
 800ed8c:	d1f8      	bne.n	800ed80 <lv_imgbtn_signal+0x28>
 800ed8e:	461a      	mov	r2, r3
        buf->type[i] = "lv_imgbtn";
 800ed90:	4b02      	ldr	r3, [pc, #8]	; (800ed9c <lv_imgbtn_signal+0x44>)
 800ed92:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800ed96:	e7ee      	b.n	800ed76 <lv_imgbtn_signal+0x1e>
 800ed98:	20015174 	.word	0x20015174
 800ed9c:	080faedd 	.word	0x080faedd

0800eda0 <lv_imgbtn_design>:
    if(mode == LV_DESIGN_COVER_CHK) {
 800eda0:	2a02      	cmp	r2, #2
{
 800eda2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eda6:	4604      	mov	r4, r0
 800eda8:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800edaa:	d10f      	bne.n	800edcc <lv_imgbtn_design+0x2c>
        lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800edac:	f7f8 fed0 	bl	8007b50 <lv_obj_get_ext_attr>
        if(ext->act_cf == LV_IMG_CF_TRUE_COLOR || ext->act_cf == LV_IMG_CF_RAW) {
 800edb0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800edb4:	2b04      	cmp	r3, #4
 800edb6:	d001      	beq.n	800edbc <lv_imgbtn_design+0x1c>
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d123      	bne.n	800ee04 <lv_imgbtn_design+0x64>
            cover = lv_area_is_in(mask, &imgbtn->coords);
 800edbc:	f104 0110 	add.w	r1, r4, #16
 800edc0:	4630      	mov	r0, r6
}
 800edc2:	b002      	add	sp, #8
 800edc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            cover = lv_area_is_in(mask, &imgbtn->coords);
 800edc8:	f7fd bd9a 	b.w	800c900 <lv_area_is_in>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800edcc:	b9c2      	cbnz	r2, 800ee00 <lv_imgbtn_design+0x60>
        lv_imgbtn_ext_t * ext    = lv_obj_get_ext_attr(imgbtn);
 800edce:	f7f8 febf 	bl	8007b50 <lv_obj_get_ext_attr>
 800edd2:	4605      	mov	r5, r0
 800edd4:	4620      	mov	r0, r4
 800edd6:	f7ff f807 	bl	800dde8 <lv_btn_get_state>
    return lv_btn_get_style(imgbtn, type);
 800edda:	4601      	mov	r1, r0
 800eddc:	4607      	mov	r7, r0
 800edde:	4620      	mov	r0, r4
 800ede0:	f7ff f8ba 	bl	800df58 <lv_btn_get_style>
 800ede4:	4680      	mov	r8, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(imgbtn);
 800ede6:	4620      	mov	r0, r4
 800ede8:	f7f8 fe4a 	bl	8007a80 <lv_obj_get_opa_scale>
        const void * src = ext->img_src[state];
 800edec:	eb05 0587 	add.w	r5, r5, r7, lsl #2
        lv_draw_img(&imgbtn->coords, mask, src, style, opa_scale);
 800edf0:	9000      	str	r0, [sp, #0]
 800edf2:	4643      	mov	r3, r8
 800edf4:	69ea      	ldr	r2, [r5, #28]
 800edf6:	4631      	mov	r1, r6
 800edf8:	f104 0010 	add.w	r0, r4, #16
 800edfc:	f7fa f9ee 	bl	80091dc <lv_draw_img>
    return true;
 800ee00:	2001      	movs	r0, #1
 800ee02:	e000      	b.n	800ee06 <lv_imgbtn_design+0x66>
        bool cover            = false;
 800ee04:	2000      	movs	r0, #0
}
 800ee06:	b002      	add	sp, #8
 800ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee0c <lv_imgbtn_create>:
{
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	460f      	mov	r7, r1
    lv_obj_t * new_imgbtn = lv_btn_create(par, copy);
 800ee10:	f7fe ff5a 	bl	800dcc8 <lv_btn_create>
    lv_mem_assert(new_imgbtn);
 800ee14:	4604      	mov	r4, r0
 800ee16:	b900      	cbnz	r0, 800ee1a <lv_imgbtn_create+0xe>
 800ee18:	e7fe      	b.n	800ee18 <lv_imgbtn_create+0xc>
    lv_imgbtn_ext_t * ext = lv_obj_allocate_ext_attr(new_imgbtn, sizeof(lv_imgbtn_ext_t));
 800ee1a:	2134      	movs	r1, #52	; 0x34
 800ee1c:	f7f8 f895 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800ee20:	4606      	mov	r6, r0
 800ee22:	b900      	cbnz	r0, 800ee26 <lv_imgbtn_create+0x1a>
 800ee24:	e7fe      	b.n	800ee24 <lv_imgbtn_create+0x18>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_imgbtn);
 800ee26:	4d19      	ldr	r5, [pc, #100]	; (800ee8c <lv_imgbtn_create+0x80>)
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	b91b      	cbnz	r3, 800ee34 <lv_imgbtn_create+0x28>
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f7f8 fe8b 	bl	8007b48 <lv_obj_get_signal_cb>
 800ee32:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_imgbtn);
 800ee34:	4d16      	ldr	r5, [pc, #88]	; (800ee90 <lv_imgbtn_create+0x84>)
 800ee36:	682b      	ldr	r3, [r5, #0]
 800ee38:	b91b      	cbnz	r3, 800ee42 <lv_imgbtn_create+0x36>
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7f8 fe86 	bl	8007b4c <lv_obj_get_design_cb>
 800ee40:	6028      	str	r0, [r5, #0]
    memset(ext->img_src, 0, sizeof(ext->img_src));
 800ee42:	f106 051c 	add.w	r5, r6, #28
 800ee46:	2214      	movs	r2, #20
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f001 fcd1 	bl	80107f2 <memset>
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 800ee50:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 800ee52:	4910      	ldr	r1, [pc, #64]	; (800ee94 <lv_imgbtn_create+0x88>)
    ext->act_cf = LV_IMG_CF_UNKNOWN;
 800ee54:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    lv_obj_set_signal_cb(new_imgbtn, lv_imgbtn_signal);
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f7f8 f872 	bl	8006f42 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_imgbtn, lv_imgbtn_design);
 800ee5e:	490e      	ldr	r1, [pc, #56]	; (800ee98 <lv_imgbtn_create+0x8c>)
 800ee60:	4620      	mov	r0, r4
 800ee62:	f7f8 f870 	bl	8006f46 <lv_obj_set_design_cb>
    if(copy == NULL) {
 800ee66:	b177      	cbz	r7, 800ee86 <lv_imgbtn_create+0x7a>
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f7f8 fe71 	bl	8007b50 <lv_obj_get_ext_attr>
        memcpy(ext->img_src, copy_ext->img_src, sizeof(ext->img_src));
 800ee6e:	f100 031c 	add.w	r3, r0, #28
 800ee72:	3030      	adds	r0, #48	; 0x30
 800ee74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee78:	f845 2b04 	str.w	r2, [r5], #4
 800ee7c:	4283      	cmp	r3, r0
 800ee7e:	d1f9      	bne.n	800ee74 <lv_imgbtn_create+0x68>
        lv_obj_refresh_style(new_imgbtn);
 800ee80:	4620      	mov	r0, r4
 800ee82:	f7f8 fd14 	bl	80078ae <lv_obj_refresh_style>
}
 800ee86:	4620      	mov	r0, r4
 800ee88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	20015174 	.word	0x20015174
 800ee90:	20015170 	.word	0x20015170
 800ee94:	0800ed59 	.word	0x0800ed59
 800ee98:	0800eda1 	.word	0x0800eda1

0800ee9c <lv_imgbtn_set_src>:
{
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	4605      	mov	r5, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	4616      	mov	r6, r2
    lv_imgbtn_ext_t * ext = lv_obj_get_ext_attr(imgbtn);
 800eea4:	f7f8 fe54 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->img_src[state] = src;
 800eea8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800eeac:	61c6      	str	r6, [r0, #28]
    refr_img(imgbtn);
 800eeae:	4628      	mov	r0, r5
}
 800eeb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    refr_img(imgbtn);
 800eeb4:	f7ff bf26 	b.w	800ed04 <refr_img>

0800eeb8 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 800eeb8:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eeba:	f7f8 fe49 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800eebe:	7c43      	ldrb	r3, [r0, #17]
 800eec0:	079b      	lsls	r3, r3, #30
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eec2:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800eec4:	d503      	bpl.n	800eece <lv_label_dot_tmp_free+0x16>
 800eec6:	6840      	ldr	r0, [r0, #4]
 800eec8:	b108      	cbz	r0, 800eece <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 800eeca:	f7fd ffed 	bl	800cea8 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 800eece:	7c63      	ldrb	r3, [r4, #17]
 800eed0:	f36f 0341 	bfc	r3, #1, #1
 800eed4:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
 800eed6:	2300      	movs	r3, #0
 800eed8:	6063      	str	r3, [r4, #4]
 800eeda:	bd10      	pop	{r4, pc}

0800eedc <lv_label_revert_dots>:
{
 800eedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee0:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eee2:	f7f8 fe35 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800eee6:	7c03      	ldrb	r3, [r0, #16]
 800eee8:	f003 0307 	and.w	r3, r3, #7
 800eeec:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eeee:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800eef0:	d126      	bne.n	800ef40 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800eef2:	8901      	ldrh	r1, [r0, #8]
 800eef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eef8:	4299      	cmp	r1, r3
 800eefa:	d021      	beq.n	800ef40 <lv_label_revert_dots+0x64>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800eefc:	4b12      	ldr	r3, [pc, #72]	; (800ef48 <lv_label_revert_dots+0x6c>)
 800eefe:	6800      	ldr	r0, [r0, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	3903      	subs	r1, #3
 800ef04:	4798      	blx	r3
 800ef06:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f7f8 fe21 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800ef0e:	7c43      	ldrb	r3, [r0, #17]
 800ef10:	079b      	lsls	r3, r3, #30
        return ext->dot.tmp_ptr;
 800ef12:	bf4c      	ite	mi
 800ef14:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 800ef16:	3004      	addpl	r0, #4
    while(ext->text[byte_i + i] != '\0') {
 800ef18:	2500      	movs	r5, #0
 800ef1a:	b2eb      	uxtb	r3, r5
 800ef1c:	eb08 0203 	add.w	r2, r8, r3
 800ef20:	6821      	ldr	r1, [r4, #0]
        ext->text[byte_i + i] = dot_tmp[i];
 800ef22:	5cc3      	ldrb	r3, [r0, r3]
    while(ext->text[byte_i + i] != '\0') {
 800ef24:	f811 e002 	ldrb.w	lr, [r1, r2]
 800ef28:	188f      	adds	r7, r1, r2
 800ef2a:	3501      	adds	r5, #1
 800ef2c:	f1be 0f00 	cmp.w	lr, #0
 800ef30:	d108      	bne.n	800ef44 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 800ef32:	703b      	strb	r3, [r7, #0]
    lv_label_dot_tmp_free(label);
 800ef34:	4630      	mov	r0, r6
 800ef36:	f7ff ffbf 	bl	800eeb8 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800ef3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef3e:	8123      	strh	r3, [r4, #8]
 800ef40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 800ef44:	548b      	strb	r3, [r1, r2]
 800ef46:	e7e8      	b.n	800ef1a <lv_label_revert_dots+0x3e>
 800ef48:	20000124 	.word	0x20000124

0800ef4c <lv_label_set_offset_y>:
{
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4604      	mov	r4, r0
 800ef50:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ef52:	f7f8 fdfd 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 800ef56:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 800ef58:	4620      	mov	r0, r4
}
 800ef5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800ef5e:	f7f8 b821 	b.w	8006fa4 <lv_obj_invalidate>

0800ef62 <lv_label_set_offset_x>:
{
 800ef62:	b538      	push	{r3, r4, r5, lr}
 800ef64:	4604      	mov	r4, r0
 800ef66:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ef68:	f7f8 fdf2 	bl	8007b50 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 800ef6c:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 800ef6e:	4620      	mov	r0, r4
}
 800ef70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800ef74:	f7f8 b816 	b.w	8006fa4 <lv_obj_invalidate>

0800ef78 <lv_label_set_dot_tmp>:
{
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	4615      	mov	r5, r2
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ef80:	f7f8 fde6 	bl	8007b50 <lv_obj_get_ext_attr>
 800ef84:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800ef86:	4638      	mov	r0, r7
 800ef88:	f7ff ff96 	bl	800eeb8 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800ef8c:	2d04      	cmp	r5, #4
 800ef8e:	d911      	bls.n	800efb4 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800ef90:	1c68      	adds	r0, r5, #1
 800ef92:	f7fd ff53 	bl	800ce3c <lv_mem_alloc>
 800ef96:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 800ef98:	b1b0      	cbz	r0, 800efc8 <lv_label_set_dot_tmp+0x50>
        memcpy(ext->dot.tmp_ptr, data, len);
 800ef9a:	462a      	mov	r2, r5
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	f001 fc1d 	bl	80107dc <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800efa2:	6863      	ldr	r3, [r4, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 800efa8:	7c63      	ldrb	r3, [r4, #17]
 800efaa:	f043 0302 	orr.w	r3, r3, #2
 800efae:	7463      	strb	r3, [r4, #17]
    return true;
 800efb0:	2001      	movs	r0, #1
 800efb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 800efb4:	7c63      	ldrb	r3, [r4, #17]
 800efb6:	f36f 0341 	bfc	r3, #1, #1
 800efba:	7463      	strb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
 800efbc:	462a      	mov	r2, r5
 800efbe:	4631      	mov	r1, r6
 800efc0:	1d20      	adds	r0, r4, #4
 800efc2:	f001 fc0b 	bl	80107dc <memcpy>
 800efc6:	e7f3      	b.n	800efb0 <lv_label_set_dot_tmp+0x38>
}
 800efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800efca <lv_label_design>:
{
 800efca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 800efce:	2a02      	cmp	r2, #2
{
 800efd0:	b08f      	sub	sp, #60	; 0x3c
 800efd2:	4607      	mov	r7, r0
 800efd4:	4688      	mov	r8, r1
    if(mode == LV_DESIGN_COVER_CHK)
 800efd6:	f000 80f7 	beq.w	800f1c8 <lv_label_design+0x1fe>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800efda:	2a00      	cmp	r2, #0
 800efdc:	f040 80ed 	bne.w	800f1ba <lv_label_design+0x1f0>
        const lv_style_t * style = lv_obj_get_style(label);
 800efe0:	f7f8 fcd0 	bl	8007984 <lv_obj_get_style>
 800efe4:	4604      	mov	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800efe6:	4638      	mov	r0, r7
 800efe8:	f7f8 fd4a 	bl	8007a80 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 800efec:	a90a      	add	r1, sp, #40	; 0x28
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800efee:	4681      	mov	r9, r0
        lv_obj_get_coords(label, &coords);
 800eff0:	4638      	mov	r0, r7
 800eff2:	f7f8 fca4 	bl	800793e <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 800eff6:	4638      	mov	r0, r7
 800eff8:	f7f8 fdac 	bl	8007b54 <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 800effc:	f7f6 ff1e 	bl	8005e3c <lv_group_get_focused>
 800f000:	4287      	cmp	r7, r0
 800f002:	d105      	bne.n	800f010 <lv_label_design+0x46>
            lv_draw_rect(&coords, mask, style, opa_scale);
 800f004:	464b      	mov	r3, r9
 800f006:	4622      	mov	r2, r4
 800f008:	4641      	mov	r1, r8
 800f00a:	a80a      	add	r0, sp, #40	; 0x28
 800f00c:	f7fa fc6e 	bl	80098ec <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f010:	4638      	mov	r0, r7
 800f012:	f7f8 fd9d 	bl	8007b50 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 800f016:	7c43      	ldrb	r3, [r0, #17]
 800f018:	07d9      	lsls	r1, r3, #31
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f01a:	4605      	mov	r5, r0
        if(ext->body_draw) {
 800f01c:	d524      	bpl.n	800f068 <lv_label_design+0x9e>
            lv_obj_get_coords(label, &bg);
 800f01e:	a90c      	add	r1, sp, #48	; 0x30
 800f020:	4638      	mov	r0, r7
 800f022:	f7f8 fc8c 	bl	800793e <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 800f026:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800f028:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800f02c:	1a9b      	subs	r3, r3, r2
 800f02e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            bg.x2 += style->body.padding.right;
 800f032:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800f034:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f038:	4413      	add	r3, r2
 800f03a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            bg.y1 -= style->body.padding.top;
 800f03e:	8c22      	ldrh	r2, [r4, #32]
 800f040:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800f044:	1a9b      	subs	r3, r3, r2
 800f046:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            bg.y2 += style->body.padding.bottom;
 800f04a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800f04c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800f050:	4638      	mov	r0, r7
            bg.y2 += style->body.padding.bottom;
 800f052:	4413      	add	r3, r2
 800f054:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800f058:	f7f8 fd12 	bl	8007a80 <lv_obj_get_opa_scale>
 800f05c:	4622      	mov	r2, r4
 800f05e:	4603      	mov	r3, r0
 800f060:	4641      	mov	r1, r8
 800f062:	a80c      	add	r0, sp, #48	; 0x30
 800f064:	f7fa fc42 	bl	80098ec <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800f068:	7c2b      	ldrb	r3, [r5, #16]
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800f06a:	061a      	lsls	r2, r3, #24
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800f06c:	f3c3 1680 	ubfx	r6, r3, #6, #1
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800f070:	f003 0230 	and.w	r2, r3, #48	; 0x30
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800f074:	bf48      	it	mi
 800f076:	f046 0602 	orrmi.w	r6, r6, #2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800f07a:	2a10      	cmp	r2, #16
 800f07c:	f040 809f 	bne.w	800f1be <lv_label_design+0x1f4>
 800f080:	f046 0604 	orr.w	r6, r6, #4
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800f084:	f003 0307 	and.w	r3, r3, #7
 800f088:	3b03      	subs	r3, #3
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d81a      	bhi.n	800f0c4 <lv_label_design+0xfa>
 800f08e:	2a10      	cmp	r2, #16
 800f090:	d001      	beq.n	800f096 <lv_label_design+0xcc>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 800f092:	2a20      	cmp	r2, #32
 800f094:	d116      	bne.n	800f0c4 <lv_label_design+0xfa>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800f096:	f647 4218 	movw	r2, #31768	; 0x7c18
 800f09a:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800f09e:	9602      	str	r6, [sp, #8]
 800f0a0:	9201      	str	r2, [sp, #4]
 800f0a2:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 800f0a6:	9200      	str	r2, [sp, #0]
 800f0a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f0aa:	6829      	ldr	r1, [r5, #0]
 800f0ac:	a80c      	add	r0, sp, #48	; 0x30
 800f0ae:	f7fe fa83 	bl	800d5b8 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 800f0b8:	f7f8 fc53 	bl	8007962 <lv_obj_get_width>
 800f0bc:	4582      	cmp	sl, r0
                flag &= ~LV_TXT_FLAG_CENTER;
 800f0be:	bfc8      	it	gt
 800f0c0:	f006 06f3 	andgt.w	r6, r6, #243	; 0xf3
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 800f0c4:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800f0c8:	f105 030a 	add.w	r3, r5, #10
 800f0cc:	f04f 0b00 	mov.w	fp, #0
 800f0d0:	f8cd b014 	str.w	fp, [sp, #20]
 800f0d4:	f8cd a010 	str.w	sl, [sp, #16]
 800f0d8:	f8cd a00c 	str.w	sl, [sp, #12]
 800f0dc:	9302      	str	r3, [sp, #8]
 800f0de:	9601      	str	r6, [sp, #4]
 800f0e0:	682b      	ldr	r3, [r5, #0]
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	464b      	mov	r3, r9
 800f0e8:	4641      	mov	r1, r8
 800f0ea:	a80a      	add	r0, sp, #40	; 0x28
 800f0ec:	f7fa f974 	bl	80093d8 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800f0f0:	7c2b      	ldrb	r3, [r5, #16]
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	2b04      	cmp	r3, #4
 800f0f8:	d15f      	bne.n	800f1ba <lv_label_design+0x1f0>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800f0fa:	f647 4218 	movw	r2, #31768	; 0x7c18
 800f0fe:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 800f102:	9602      	str	r6, [sp, #8]
 800f104:	9201      	str	r2, [sp, #4]
 800f106:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 800f10a:	9200      	str	r2, [sp, #0]
 800f10c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f10e:	6829      	ldr	r1, [r5, #0]
 800f110:	a809      	add	r0, sp, #36	; 0x24
 800f112:	f7fe fa51 	bl	800d5b8 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800f116:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800f11a:	9307      	str	r3, [sp, #28]
 800f11c:	4638      	mov	r0, r7
 800f11e:	f7f8 fc20 	bl	8007962 <lv_obj_get_width>
 800f122:	9b07      	ldr	r3, [sp, #28]
 800f124:	4283      	cmp	r3, r0
 800f126:	dd24      	ble.n	800f172 <lv_label_design+0x1a8>
                ofs.x = ext->offset.x + size.x +
 800f128:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800f12c:	896b      	ldrh	r3, [r5, #10]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f12e:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
 800f130:	4403      	add	r3, r0
 800f132:	b29b      	uxth	r3, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f134:	4611      	mov	r1, r2
 800f136:	6b60      	ldr	r0, [r4, #52]	; 0x34
                ofs.x = ext->offset.x + size.x +
 800f138:	9307      	str	r3, [sp, #28]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f13a:	f7fc ff7f 	bl	800c03c <lv_font_get_glyph_width>
                ofs.x = ext->offset.x + size.x +
 800f13e:	9b07      	ldr	r3, [sp, #28]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                ofs.x = ext->offset.x + size.x +
 800f144:	4403      	add	r3, r0
 800f146:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y;
 800f14a:	89ab      	ldrh	r3, [r5, #12]
 800f14c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800f150:	ab0c      	add	r3, sp, #48	; 0x30
 800f152:	f8cd b014 	str.w	fp, [sp, #20]
 800f156:	f8cd a010 	str.w	sl, [sp, #16]
 800f15a:	f8cd a00c 	str.w	sl, [sp, #12]
 800f15e:	9302      	str	r3, [sp, #8]
 800f160:	9601      	str	r6, [sp, #4]
 800f162:	682b      	ldr	r3, [r5, #0]
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	4622      	mov	r2, r4
 800f168:	464b      	mov	r3, r9
 800f16a:	4641      	mov	r1, r8
 800f16c:	a80a      	add	r0, sp, #40	; 0x28
 800f16e:	f7fa f933 	bl	80093d8 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 800f172:	4638      	mov	r0, r7
 800f174:	f9bd a026 	ldrsh.w	sl, [sp, #38]	; 0x26
 800f178:	f7f8 fbf9 	bl	800796e <lv_obj_get_height>
 800f17c:	4582      	cmp	sl, r0
 800f17e:	dd1c      	ble.n	800f1ba <lv_label_design+0x1f0>
                ofs.x = ext->offset.x;
 800f180:	896b      	ldrh	r3, [r5, #10]
 800f182:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800f186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f188:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800f18c:	7a1b      	ldrb	r3, [r3, #8]
 800f18e:	4413      	add	r3, r2
 800f190:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800f192:	9601      	str	r6, [sp, #4]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800f194:	4413      	add	r3, r2
 800f196:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800f19a:	2300      	movs	r3, #0
 800f19c:	9305      	str	r3, [sp, #20]
 800f19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1a2:	9304      	str	r3, [sp, #16]
 800f1a4:	9303      	str	r3, [sp, #12]
 800f1a6:	ab0c      	add	r3, sp, #48	; 0x30
 800f1a8:	9302      	str	r3, [sp, #8]
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	4622      	mov	r2, r4
 800f1b0:	464b      	mov	r3, r9
 800f1b2:	4641      	mov	r1, r8
 800f1b4:	a80a      	add	r0, sp, #40	; 0x28
 800f1b6:	f7fa f90f 	bl	80093d8 <lv_draw_label>
    return true;
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	e005      	b.n	800f1ca <lv_label_design+0x200>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800f1be:	2a20      	cmp	r2, #32
 800f1c0:	bf08      	it	eq
 800f1c2:	f046 0608 	orreq.w	r6, r6, #8
 800f1c6:	e75d      	b.n	800f084 <lv_label_design+0xba>
        return false;
 800f1c8:	2000      	movs	r0, #0
}
 800f1ca:	b00f      	add	sp, #60	; 0x3c
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1d0 <lv_label_set_align>:
{
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f1d6:	f7f8 fcbb 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 800f1da:	7c03      	ldrb	r3, [r0, #16]
 800f1dc:	f3c3 1201 	ubfx	r2, r3, #4, #2
 800f1e0:	42a2      	cmp	r2, r4
 800f1e2:	d007      	beq.n	800f1f4 <lv_label_set_align+0x24>
    ext->align = align;
 800f1e4:	f364 1305 	bfi	r3, r4, #4, #2
 800f1e8:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800f1ea:	4628      	mov	r0, r5
}
 800f1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800f1f0:	f7f7 bed8 	b.w	8006fa4 <lv_obj_invalidate>
 800f1f4:	bd38      	pop	{r3, r4, r5, pc}

0800f1f6 <lv_label_set_body_draw>:
{
 800f1f6:	b538      	push	{r3, r4, r5, lr}
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f1fc:	f7f8 fca8 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 800f200:	7c43      	ldrb	r3, [r0, #17]
 800f202:	f003 0201 	and.w	r2, r3, #1
 800f206:	42aa      	cmp	r2, r5
 800f208:	d00a      	beq.n	800f220 <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 800f20a:	f365 0300 	bfi	r3, r5, #0, #1
 800f20e:	7443      	strb	r3, [r0, #17]
    lv_obj_refresh_ext_draw_pad(label);
 800f210:	4620      	mov	r0, r4
 800f212:	f7f8 fb5a 	bl	80078ca <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 800f216:	4620      	mov	r0, r4
}
 800f218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 800f21c:	f7f7 bec2 	b.w	8006fa4 <lv_obj_invalidate>
 800f220:	bd38      	pop	{r3, r4, r5, pc}

0800f222 <lv_label_get_text>:
{
 800f222:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f224:	f7f8 fc94 	bl	8007b50 <lv_obj_get_ext_attr>
}
 800f228:	6800      	ldr	r0, [r0, #0]
 800f22a:	bd08      	pop	{r3, pc}

0800f22c <lv_label_get_long_mode>:
{
 800f22c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f22e:	f7f8 fc8f 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->long_mode;
 800f232:	7c00      	ldrb	r0, [r0, #16]
}
 800f234:	f000 0007 	and.w	r0, r0, #7
 800f238:	bd08      	pop	{r3, pc}

0800f23a <lv_label_get_align>:
{
 800f23a:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f23c:	f7f8 fc88 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->align;
 800f240:	7c00      	ldrb	r0, [r0, #16]
}
 800f242:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800f246:	bd08      	pop	{r3, pc}

0800f248 <lv_label_get_recolor>:
{
 800f248:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f24a:	f7f8 fc81 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 800f24e:	7c00      	ldrb	r0, [r0, #16]
}
 800f250:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800f254:	bd08      	pop	{r3, pc}

0800f256 <lv_label_get_body_draw>:
{
 800f256:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f258:	f7f8 fc7a 	bl	8007b50 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 800f25c:	7c40      	ldrb	r0, [r0, #17]
}
 800f25e:	f000 0001 	and.w	r0, r0, #1
 800f262:	bd08      	pop	{r3, pc}

0800f264 <lv_label_get_letter_on>:
{
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	b08b      	sub	sp, #44	; 0x2c
 800f26a:	4682      	mov	sl, r0
 800f26c:	9106      	str	r1, [sp, #24]
    const char * txt         = lv_label_get_text(label);
 800f26e:	f7ff ffd8 	bl	800f222 <lv_label_get_text>
 800f272:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800f274:	4650      	mov	r0, sl
 800f276:	f7f8 fc6b 	bl	8007b50 <lv_obj_get_ext_attr>
 800f27a:	9004      	str	r0, [sp, #16]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800f27c:	4650      	mov	r0, sl
 800f27e:	f7f8 fb70 	bl	8007962 <lv_obj_get_width>
 800f282:	4683      	mov	fp, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800f284:	4650      	mov	r0, sl
 800f286:	f7f8 fb7d 	bl	8007984 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800f28a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f28c:	9303      	str	r3, [sp, #12]
 800f28e:	7a1b      	ldrb	r3, [r3, #8]
 800f290:	9305      	str	r3, [sp, #20]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800f292:	9b04      	ldr	r3, [sp, #16]
 800f294:	7c1b      	ldrb	r3, [r3, #16]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800f296:	061a      	lsls	r2, r3, #24
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 800f298:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800f29c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800f2a0:	bf48      	it	mi
 800f2a2:	f046 0602 	orrmi.w	r6, r6, #2
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800f2a6:	2a10      	cmp	r2, #16
 800f2a8:	bf08      	it	eq
 800f2aa:	f046 0604 	orreq.w	r6, r6, #4
        max_w = LV_COORD_MAX;
 800f2ae:	2400      	movs	r4, #0
 800f2b0:	f013 0f07 	tst.w	r3, #7
 800f2b4:	f647 4318 	movw	r3, #31768	; 0x7c18
    const lv_style_t * style = lv_obj_get_style(label);
 800f2b8:	4681      	mov	r9, r0
        max_w = LV_COORD_MAX;
 800f2ba:	bf08      	it	eq
 800f2bc:	469b      	moveq	fp, r3
 800f2be:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 800f2c0:	197b      	adds	r3, r7, r5
 800f2c2:	9307      	str	r3, [sp, #28]
 800f2c4:	5d7b      	ldrb	r3, [r7, r5]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d150      	bne.n	800f36c <lv_label_get_letter_on+0x108>
 800f2ca:	46a8      	mov	r8, r5
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800f2cc:	9b04      	ldr	r3, [sp, #16]
 800f2ce:	7c1b      	ldrb	r3, [r3, #16]
 800f2d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f2d4:	2b10      	cmp	r3, #16
 800f2d6:	d162      	bne.n	800f39e <lv_label_get_letter_on+0x13a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800f2d8:	eba8 0105 	sub.w	r1, r8, r5
 800f2dc:	f9b9 3038 	ldrsh.w	r3, [r9, #56]	; 0x38
 800f2e0:	9a03      	ldr	r2, [sp, #12]
 800f2e2:	9600      	str	r6, [sp, #0]
 800f2e4:	b289      	uxth	r1, r1
 800f2e6:	1978      	adds	r0, r7, r5
 800f2e8:	f7fe f91e 	bl	800d528 <lv_txt_get_width>
 800f2ec:	4604      	mov	r4, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800f2ee:	4650      	mov	r0, sl
 800f2f0:	f7f8 fb37 	bl	8007962 <lv_obj_get_width>
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	fb90 f0f3 	sdiv	r0, r0, r3
 800f2fa:	fb94 f4f3 	sdiv	r4, r4, r3
 800f2fe:	1b04      	subs	r4, r0, r4
 800f300:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800f302:	2300      	movs	r3, #0
 800f304:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i         = line_start;
 800f308:	9509      	str	r5, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 800f30a:	f1b8 0f00 	cmp.w	r8, #0
 800f30e:	d024      	beq.n	800f35a <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 800f310:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800f3c8 <lv_label_get_letter_on+0x164>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800f314:	f006 0601 	and.w	r6, r6, #1
        while(i <= new_line_start - 1) {
 800f318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f31a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800f31e:	4293      	cmp	r3, r2
 800f320:	d31b      	bcc.n	800f35a <lv_label_get_letter_on+0xf6>
            letter = lv_txt_encoded_next(txt, &i);
 800f322:	f8da 3000 	ldr.w	r3, [sl]
 800f326:	a909      	add	r1, sp, #36	; 0x24
 800f328:	4638      	mov	r0, r7
 800f32a:	4798      	blx	r3
 800f32c:	4683      	mov	fp, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800f32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f330:	f8da 3000 	ldr.w	r3, [sl]
 800f334:	2100      	movs	r1, #0
 800f336:	4438      	add	r0, r7
 800f338:	4798      	blx	r3
 800f33a:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800f33c:	2e00      	cmp	r6, #0
 800f33e:	d130      	bne.n	800f3a2 <lv_label_get_letter_on+0x13e>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800f340:	4659      	mov	r1, fp
 800f342:	9803      	ldr	r0, [sp, #12]
 800f344:	f7fc fe7a 	bl	800c03c <lv_font_get_glyph_width>
            if(pos->x < x) {
 800f348:	9b06      	ldr	r3, [sp, #24]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800f34a:	4404      	add	r4, r0
            if(pos->x < x) {
 800f34c:	f9b3 2000 	ldrsh.w	r2, [r3]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800f350:	b2a4      	uxth	r4, r4
            if(pos->x < x) {
 800f352:	b223      	sxth	r3, r4
 800f354:	429a      	cmp	r2, r3
 800f356:	da2f      	bge.n	800f3b8 <lv_label_get_letter_on+0x154>
                i = i_current;
 800f358:	9509      	str	r5, [sp, #36]	; 0x24
    return lv_encoded_get_char_id(txt, i);
 800f35a:	4b1a      	ldr	r3, [pc, #104]	; (800f3c4 <lv_label_get_letter_on+0x160>)
 800f35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4638      	mov	r0, r7
 800f362:	4798      	blx	r3
}
 800f364:	b280      	uxth	r0, r0
 800f366:	b00b      	add	sp, #44	; 0x2c
 800f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800f36c:	f9b9 2038 	ldrsh.w	r2, [r9, #56]	; 0x38
 800f370:	9903      	ldr	r1, [sp, #12]
 800f372:	9600      	str	r6, [sp, #0]
 800f374:	465b      	mov	r3, fp
 800f376:	1978      	adds	r0, r7, r5
 800f378:	f7fe f84e 	bl	800d418 <lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800f37c:	9b06      	ldr	r3, [sp, #24]
 800f37e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f382:	9b05      	ldr	r3, [sp, #20]
 800f384:	18e3      	adds	r3, r4, r3
 800f386:	429a      	cmp	r2, r3
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800f388:	eb00 0805 	add.w	r8, r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800f38c:	dd9e      	ble.n	800f2cc <lv_label_get_letter_on+0x68>
        y += letter_height + style->text.line_space;
 800f38e:	f8b9 303a 	ldrh.w	r3, [r9, #58]	; 0x3a
 800f392:	9a05      	ldr	r2, [sp, #20]
 800f394:	4413      	add	r3, r2
 800f396:	441c      	add	r4, r3
 800f398:	b224      	sxth	r4, r4
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800f39a:	4645      	mov	r5, r8
 800f39c:	e790      	b.n	800f2c0 <lv_label_get_letter_on+0x5c>
    lv_coord_t x = 0;
 800f39e:	2400      	movs	r4, #0
 800f3a0:	e7af      	b.n	800f302 <lv_label_get_letter_on+0x9e>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 800f3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a4:	9004      	str	r0, [sp, #16]
 800f3a6:	5cf9      	ldrb	r1, [r7, r3]
 800f3a8:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 800f3ac:	f7fe f816 	bl	800d3dc <lv_txt_is_cmd>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d1b1      	bne.n	800f318 <lv_label_get_letter_on+0xb4>
 800f3b4:	9a04      	ldr	r2, [sp, #16]
 800f3b6:	e7c3      	b.n	800f340 <lv_label_get_letter_on+0xdc>
            x += style->text.letter_space;
 800f3b8:	f8b9 0038 	ldrh.w	r0, [r9, #56]	; 0x38
            i_current = i;
 800f3bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
            x += style->text.letter_space;
 800f3be:	4404      	add	r4, r0
 800f3c0:	b224      	sxth	r4, r4
 800f3c2:	e7a9      	b.n	800f318 <lv_label_get_letter_on+0xb4>
 800f3c4:	20000120 	.word	0x20000120
 800f3c8:	20000128 	.word	0x20000128

0800f3cc <lv_label_refr_text>:
{
 800f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	b093      	sub	sp, #76	; 0x4c
 800f3d2:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f3d4:	f7f8 fbbc 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800f3d8:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f3da:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
 800f3dc:	b37b      	cbz	r3, 800f43e <lv_label_refr_text+0x72>
    lv_coord_t max_w         = lv_obj_get_width(label);
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f7f8 fabf 	bl	8007962 <lv_obj_get_width>
 800f3e4:	4607      	mov	r7, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f7f8 facc 	bl	8007984 <lv_obj_get_style>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800f3ec:	7c23      	ldrb	r3, [r4, #16]
    const lv_font_t * font   = style->text.font;
 800f3ee:	6b46      	ldr	r6, [r0, #52]	; 0x34
        max_w = LV_COORD_MAX;
 800f3f0:	f013 0f07 	tst.w	r3, #7
 800f3f4:	f647 4218 	movw	r2, #31768	; 0x7c18
 800f3f8:	bf08      	it	eq
 800f3fa:	4617      	moveq	r7, r2
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800f3fc:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800f400:	061b      	lsls	r3, r3, #24
 800f402:	bf48      	it	mi
 800f404:	f042 0202 	orrmi.w	r2, r2, #2
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800f408:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 800f40c:	9202      	str	r2, [sp, #8]
 800f40e:	9701      	str	r7, [sp, #4]
 800f410:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 800f414:	9200      	str	r2, [sp, #0]
    const lv_style_t * style = lv_obj_get_style(label);
 800f416:	4680      	mov	r8, r0
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800f418:	4632      	mov	r2, r6
 800f41a:	6821      	ldr	r1, [r4, #0]
 800f41c:	a807      	add	r0, sp, #28
 800f41e:	f7fe f8cb 	bl	800d5b8 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800f422:	7c23      	ldrb	r3, [r4, #16]
 800f424:	f013 0307 	ands.w	r3, r3, #7
 800f428:	d10c      	bne.n	800f444 <lv_label_refr_text+0x78>
        lv_obj_set_size(label, size.x, size.y);
 800f42a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800f42e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800f432:	4628      	mov	r0, r5
 800f434:	f7f8 f9e2 	bl	80077fc <lv_obj_set_size>
    lv_obj_invalidate(label);
 800f438:	4628      	mov	r0, r5
 800f43a:	f7f7 fdb3 	bl	8006fa4 <lv_obj_invalidate>
}
 800f43e:	b013      	add	sp, #76	; 0x4c
 800f440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800f444:	2b03      	cmp	r3, #3
 800f446:	d166      	bne.n	800f516 <lv_label_refr_text+0x14a>
        anim.repeat   = 1;
 800f448:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 800f44c:	9509      	str	r5, [sp, #36]	; 0x24
        anim.playback = 1;
 800f44e:	f043 0303 	orr.w	r3, r3, #3
 800f452:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f456:	2220      	movs	r2, #32
        anim.path_cb  = lv_anim_path_linear;
 800f458:	4b9e      	ldr	r3, [pc, #632]	; (800f6d4 <lv_label_refr_text+0x308>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f45a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
        anim.path_cb  = lv_anim_path_linear;
 800f45e:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.start    = 0;
 800f460:	2700      	movs	r7, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f462:	4611      	mov	r1, r2
        anim.start    = 0;
 800f464:	970d      	str	r7, [sp, #52]	; 0x34
        anim.ready_cb = NULL;
 800f466:	970c      	str	r7, [sp, #48]	; 0x30
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f468:	f7fc fde8 	bl	800c03c <lv_font_get_glyph_width>
 800f46c:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
        if(size.x > lv_obj_get_width(label)) {
 800f470:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f474:	4418      	add	r0, r3
 800f476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f47a:	4343      	muls	r3, r0
             ext->anim_speed) *
 800f47c:	89e0      	ldrh	r0, [r4, #14]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f47e:	fb93 f3f0 	sdiv	r3, r3, r0
        anim.playback_pause =
 800f482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f486:	b29b      	uxth	r3, r3
 800f488:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        anim.repeat_pause = anim.playback_pause;
 800f48c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 800f490:	4628      	mov	r0, r5
        anim.act_time     = -anim.playback_pause;
 800f492:	425b      	negs	r3, r3
 800f494:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        if(size.x > lv_obj_get_width(label)) {
 800f498:	f7f8 fa63 	bl	8007962 <lv_obj_get_width>
 800f49c:	4580      	cmp	r8, r0
 800f49e:	dd34      	ble.n	800f50a <lv_label_refr_text+0x13e>
            anim.end     = lv_obj_get_width(label) - size.x;
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f7f8 fa5e 	bl	8007962 <lv_obj_get_width>
 800f4a6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800f4aa:	4b8b      	ldr	r3, [pc, #556]	; (800f6d8 <lv_label_refr_text+0x30c>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f4ac:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800f4b0:	930a      	str	r3, [sp, #40]	; 0x28
            anim.end     = lv_obj_get_width(label) - size.x;
 800f4b2:	1a82      	subs	r2, r0, r2
 800f4b4:	920e      	str	r2, [sp, #56]	; 0x38
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f4b6:	89e0      	ldrh	r0, [r4, #14]
 800f4b8:	b212      	sxth	r2, r2
 800f4ba:	f7fd f971 	bl	800c7a0 <lv_anim_speed_to_time>
 800f4be:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800f4c2:	a809      	add	r0, sp, #36	; 0x24
 800f4c4:	f7fd f942 	bl	800c74c <lv_anim_create>
            hor_anim = true;
 800f4c8:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 800f4d0:	f7f8 fa4d 	bl	800796e <lv_obj_get_height>
 800f4d4:	4580      	cmp	r8, r0
 800f4d6:	dd78      	ble.n	800f5ca <lv_label_refr_text+0x1fe>
 800f4d8:	2f00      	cmp	r7, #0
 800f4da:	d176      	bne.n	800f5ca <lv_label_refr_text+0x1fe>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f7f8 fa46 	bl	800796e <lv_obj_get_height>
 800f4e2:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800f4e6:	1a82      	subs	r2, r0, r2
 800f4e8:	7a30      	ldrb	r0, [r6, #8]
 800f4ea:	1a12      	subs	r2, r2, r0
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800f4ec:	920e      	str	r2, [sp, #56]	; 0x38
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800f4ee:	4b7b      	ldr	r3, [pc, #492]	; (800f6dc <lv_label_refr_text+0x310>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f4f0:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800f4f4:	89e0      	ldrh	r0, [r4, #14]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800f4f6:	930a      	str	r3, [sp, #40]	; 0x28
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f4f8:	b212      	sxth	r2, r2
 800f4fa:	f7fd f951 	bl	800c7a0 <lv_anim_speed_to_time>
 800f4fe:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800f502:	a809      	add	r0, sp, #36	; 0x24
 800f504:	f7fd f922 	bl	800c74c <lv_anim_create>
 800f508:	e796      	b.n	800f438 <lv_label_refr_text+0x6c>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800f50a:	4973      	ldr	r1, [pc, #460]	; (800f6d8 <lv_label_refr_text+0x30c>)
 800f50c:	4628      	mov	r0, r5
 800f50e:	f7fd f8ef 	bl	800c6f0 <lv_anim_del>
            ext->offset.x = 0;
 800f512:	8167      	strh	r7, [r4, #10]
 800f514:	e7d9      	b.n	800f4ca <lv_label_refr_text+0xfe>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800f516:	2b04      	cmp	r3, #4
 800f518:	d15e      	bne.n	800f5d8 <lv_label_refr_text+0x20c>
        anim.repeat   = 1;
 800f51a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
        anim.var      = label;
 800f51e:	9509      	str	r5, [sp, #36]	; 0x24
        anim.playback = 0;
 800f520:	f043 0302 	orr.w	r3, r3, #2
 800f524:	f36f 0300 	bfc	r3, #0, #1
 800f528:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f52c:	2220      	movs	r2, #32
        anim.start    = 0;
 800f52e:	2700      	movs	r7, #0
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f530:	4611      	mov	r1, r2
 800f532:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
        anim.start    = 0;
 800f536:	970d      	str	r7, [sp, #52]	; 0x34
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f538:	f7fc fd80 	bl	800c03c <lv_font_get_glyph_width>
 800f53c:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
        if(size.x > lv_obj_get_width(label)) {
 800f540:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f544:	4403      	add	r3, r0
 800f546:	4866      	ldr	r0, [pc, #408]	; (800f6e0 <lv_label_refr_text+0x314>)
 800f548:	4358      	muls	r0, r3
                          ext->anim_speed) *
 800f54a:	89e3      	ldrh	r3, [r4, #14]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800f54c:	fb90 f0f3 	sdiv	r0, r0, r3
 800f550:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800f554:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        anim.path_cb        = lv_anim_path_linear;
 800f558:	4b5e      	ldr	r3, [pc, #376]	; (800f6d4 <lv_label_refr_text+0x308>)
        anim.ready_cb       = NULL;
 800f55a:	970c      	str	r7, [sp, #48]	; 0x30
        if(size.x > lv_obj_get_width(label)) {
 800f55c:	4628      	mov	r0, r5
        anim.path_cb        = lv_anim_path_linear;
 800f55e:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.playback_pause = 0;
 800f560:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
        anim.repeat_pause   = 0;
 800f564:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
        if(size.x > lv_obj_get_width(label)) {
 800f568:	f7f8 f9fb 	bl	8007962 <lv_obj_get_width>
 800f56c:	4580      	cmp	r8, r0
 800f56e:	dd26      	ble.n	800f5be <lv_label_refr_text+0x1f2>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f570:	2220      	movs	r2, #32
 800f572:	4611      	mov	r1, r2
 800f574:	4630      	mov	r0, r6
 800f576:	f7fc fd61 	bl	800c03c <lv_font_get_glyph_width>
 800f57a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800f57e:	4b56      	ldr	r3, [pc, #344]	; (800f6d8 <lv_label_refr_text+0x30c>)
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f580:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800f584:	930a      	str	r3, [sp, #40]	; 0x28
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800f586:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 800f58a:	1a82      	subs	r2, r0, r2
 800f58c:	920e      	str	r2, [sp, #56]	; 0x38
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800f58e:	89e0      	ldrh	r0, [r4, #14]
 800f590:	b212      	sxth	r2, r2
 800f592:	f7fd f905 	bl	800c7a0 <lv_anim_speed_to_time>
 800f596:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
            lv_anim_create(&anim);
 800f59a:	a809      	add	r0, sp, #36	; 0x24
 800f59c:	f7fd f8d6 	bl	800c74c <lv_anim_create>
            hor_anim = true;
 800f5a0:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 800f5a8:	f7f8 f9e1 	bl	800796e <lv_obj_get_height>
 800f5ac:	4580      	cmp	r8, r0
 800f5ae:	dd0c      	ble.n	800f5ca <lv_label_refr_text+0x1fe>
 800f5b0:	b95f      	cbnz	r7, 800f5ca <lv_label_refr_text+0x1fe>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800f5b2:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800f5b6:	7a33      	ldrb	r3, [r6, #8]
 800f5b8:	4252      	negs	r2, r2
 800f5ba:	1ad2      	subs	r2, r2, r3
 800f5bc:	e796      	b.n	800f4ec <lv_label_refr_text+0x120>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800f5be:	4946      	ldr	r1, [pc, #280]	; (800f6d8 <lv_label_refr_text+0x30c>)
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f7fd f895 	bl	800c6f0 <lv_anim_del>
            ext->offset.x = 0;
 800f5c6:	8167      	strh	r7, [r4, #10]
 800f5c8:	e7eb      	b.n	800f5a2 <lv_label_refr_text+0x1d6>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800f5ca:	4944      	ldr	r1, [pc, #272]	; (800f6dc <lv_label_refr_text+0x310>)
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f7fd f88f 	bl	800c6f0 <lv_anim_del>
            ext->offset.y = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	81a3      	strh	r3, [r4, #12]
 800f5d6:	e72f      	b.n	800f438 <lv_label_refr_text+0x6c>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d172      	bne.n	800f6c2 <lv_label_refr_text+0x2f6>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f9bd 601e 	ldrsh.w	r6, [sp, #30]
 800f5e2:	f7f8 f9c4 	bl	800796e <lv_obj_get_height>
 800f5e6:	4286      	cmp	r6, r0
 800f5e8:	dc03      	bgt.n	800f5f2 <lv_label_refr_text+0x226>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800f5ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5ee:	8123      	strh	r3, [r4, #8]
 800f5f0:	e722      	b.n	800f438 <lv_label_refr_text+0x6c>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 800f5f2:	4b3c      	ldr	r3, [pc, #240]	; (800f6e4 <lv_label_refr_text+0x318>)
 800f5f4:	6820      	ldr	r0, [r4, #0]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4798      	blx	r3
 800f5fa:	2803      	cmp	r0, #3
 800f5fc:	d9f5      	bls.n	800f5ea <lv_label_refr_text+0x21e>
            p.x = lv_obj_get_width(label) -
 800f5fe:	4628      	mov	r0, r5
 800f600:	f7f8 f9af 	bl	8007962 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800f604:	222e      	movs	r2, #46	; 0x2e
 800f606:	4611      	mov	r1, r2
            p.x = lv_obj_get_width(label) -
 800f608:	4606      	mov	r6, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800f60a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
                lv_txt_encoded_next(ext->text, &byte_id);
 800f60e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800f6f0 <lv_label_refr_text+0x324>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800f612:	f7fc fd13 	bl	800c03c <lv_font_get_glyph_width>
 800f616:	f9b8 3038 	ldrsh.w	r3, [r8, #56]	; 0x38
 800f61a:	4418      	add	r0, r3
            p.x = lv_obj_get_width(label) -
 800f61c:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 800f620:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f624:	4430      	add	r0, r6
 800f626:	f8ad 0020 	strh.w	r0, [sp, #32]
            p.y = lv_obj_get_height(label);
 800f62a:	4628      	mov	r0, r5
 800f62c:	f7f8 f99f 	bl	800796e <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800f630:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800f634:	f9b8 103a 	ldrsh.w	r1, [r8, #58]	; 0x3a
 800f638:	7a1b      	ldrb	r3, [r3, #8]
 800f63a:	440b      	add	r3, r1
            p.y -= p.y %
 800f63c:	fb90 f2f3 	sdiv	r2, r0, r3
 800f640:	fb03 0312 	mls	r3, r3, r2, r0
 800f644:	1ac0      	subs	r0, r0, r3
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800f646:	1a40      	subs	r0, r0, r1
 800f648:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800f64c:	a908      	add	r1, sp, #32
 800f64e:	4628      	mov	r0, r5
 800f650:	f7ff fe08 	bl	800f264 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800f654:	4b24      	ldr	r3, [pc, #144]	; (800f6e8 <lv_label_refr_text+0x31c>)
 800f656:	4601      	mov	r1, r0
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800f658:	4680      	mov	r8, r0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	6820      	ldr	r0, [r4, #0]
 800f65e:	4798      	blx	r3
 800f660:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800f664:	4a21      	ldr	r2, [pc, #132]	; (800f6ec <lv_label_refr_text+0x320>)
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800f666:	f84b 0d24 	str.w	r0, [fp, #-36]!
 800f66a:	4681      	mov	r9, r0
 800f66c:	2604      	movs	r6, #4
            uint8_t len          = 0;
 800f66e:	2700      	movs	r7, #0
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800f670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f672:	6820      	ldr	r0, [r4, #0]
 800f674:	9205      	str	r2, [sp, #20]
 800f676:	4418      	add	r0, r3
 800f678:	6813      	ldr	r3, [r2, #0]
 800f67a:	4798      	blx	r3
                lv_txt_encoded_next(ext->text, &byte_id);
 800f67c:	4659      	mov	r1, fp
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800f67e:	4407      	add	r7, r0
                lv_txt_encoded_next(ext->text, &byte_id);
 800f680:	f8da 3000 	ldr.w	r3, [sl]
 800f684:	6820      	ldr	r0, [r4, #0]
 800f686:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800f688:	3e01      	subs	r6, #1
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800f68a:	b2ff      	uxtb	r7, r7
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800f68c:	9a05      	ldr	r2, [sp, #20]
 800f68e:	d1ef      	bne.n	800f670 <lv_label_refr_text+0x2a4>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800f690:	6821      	ldr	r1, [r4, #0]
 800f692:	463a      	mov	r2, r7
 800f694:	4449      	add	r1, r9
 800f696:	4628      	mov	r0, r5
 800f698:	f7ff fc6e 	bl	800ef78 <lv_label_set_dot_tmp>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f43f aecb 	beq.w	800f438 <lv_label_refr_text+0x6c>
                    ext->text[byte_id_ori + i] = '.';
 800f6a2:	222e      	movs	r2, #46	; 0x2e
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	444b      	add	r3, r9
 800f6a8:	559a      	strb	r2, [r3, r6]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800f6aa:	3601      	adds	r6, #1
 800f6ac:	2e03      	cmp	r6, #3
 800f6ae:	d1f9      	bne.n	800f6a4 <lv_label_refr_text+0x2d8>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	444b      	add	r3, r9
 800f6b4:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800f6b6:	f108 0803 	add.w	r8, r8, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800f6ba:	70da      	strb	r2, [r3, #3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800f6bc:	f8a4 8008 	strh.w	r8, [r4, #8]
 800f6c0:	e6ba      	b.n	800f438 <lv_label_refr_text+0x6c>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	f47f aeb8 	bne.w	800f438 <lv_label_refr_text+0x6c>
        lv_obj_set_height(label, size.y);
 800f6c8:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	f7f8 f8e6 	bl	800789e <lv_obj_set_height>
 800f6d2:	e6b1      	b.n	800f438 <lv_label_refr_text+0x6c>
 800f6d4:	0800c56d 	.word	0x0800c56d
 800f6d8:	0800ef63 	.word	0x0800ef63
 800f6dc:	0800ef4d 	.word	0x0800ef4d
 800f6e0:	fffffc18 	.word	0xfffffc18
 800f6e4:	20000134 	.word	0x20000134
 800f6e8:	20000124 	.word	0x20000124
 800f6ec:	20000130 	.word	0x20000130
 800f6f0:	20000128 	.word	0x20000128

0800f6f4 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 800f6f4:	4b38      	ldr	r3, [pc, #224]	; (800f7d8 <lv_label_signal+0xe4>)
{
 800f6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(label, sign, param);
 800f6fa:	681b      	ldr	r3, [r3, #0]
{
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	460f      	mov	r7, r1
 800f700:	4616      	mov	r6, r2
    res = ancestor_signal(label, sign, param);
 800f702:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 800f704:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 800f706:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 800f708:	d110      	bne.n	800f72c <lv_label_signal+0x38>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f70a:	4620      	mov	r0, r4
 800f70c:	f7f8 fa20 	bl	8007b50 <lv_obj_get_ext_attr>
 800f710:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800f712:	b977      	cbnz	r7, 800f732 <lv_label_signal+0x3e>
        if(ext->static_txt == 0) {
 800f714:	7c03      	ldrb	r3, [r0, #16]
 800f716:	f013 0608 	ands.w	r6, r3, #8
 800f71a:	d104      	bne.n	800f726 <lv_label_signal+0x32>
            lv_mem_free(ext->text);
 800f71c:	6800      	ldr	r0, [r0, #0]
 800f71e:	f7fd fbc3 	bl	800cea8 <lv_mem_free>
            ext->text = NULL;
 800f722:	f8c8 6000 	str.w	r6, [r8]
        lv_label_dot_tmp_free(label);
 800f726:	4620      	mov	r0, r4
 800f728:	f7ff fbc6 	bl	800eeb8 <lv_label_dot_tmp_free>
}
 800f72c:	4628      	mov	r0, r5
 800f72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800f732:	2f04      	cmp	r7, #4
 800f734:	d106      	bne.n	800f744 <lv_label_signal+0x50>
        lv_label_revert_dots(label);
 800f736:	4620      	mov	r0, r4
 800f738:	f7ff fbd0 	bl	800eedc <lv_label_revert_dots>
        lv_label_refr_text(label);
 800f73c:	4620      	mov	r0, r4
 800f73e:	f7ff fe45 	bl	800f3cc <lv_label_refr_text>
 800f742:	e7f3      	b.n	800f72c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800f744:	2f02      	cmp	r7, #2
 800f746:	d118      	bne.n	800f77a <lv_label_signal+0x86>
    return area_p->x2 - area_p->x1 + 1;
 800f748:	8aa2      	ldrh	r2, [r4, #20]
 800f74a:	8a23      	ldrh	r3, [r4, #16]
 800f74c:	8831      	ldrh	r1, [r6, #0]
 800f74e:	3201      	adds	r2, #1
 800f750:	1ad2      	subs	r2, r2, r3
 800f752:	88b3      	ldrh	r3, [r6, #4]
 800f754:	3301      	adds	r3, #1
 800f756:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800f758:	b292      	uxth	r2, r2
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d1ea      	bne.n	800f736 <lv_label_signal+0x42>
    return area_p->y2 - area_p->y1 + 1;
 800f760:	8ae2      	ldrh	r2, [r4, #22]
 800f762:	8a63      	ldrh	r3, [r4, #18]
 800f764:	8871      	ldrh	r1, [r6, #2]
 800f766:	3201      	adds	r2, #1
 800f768:	1ad2      	subs	r2, r2, r3
 800f76a:	88f3      	ldrh	r3, [r6, #6]
 800f76c:	3301      	adds	r3, #1
 800f76e:	1a5b      	subs	r3, r3, r1
 800f770:	b292      	uxth	r2, r2
 800f772:	b29b      	uxth	r3, r3
 800f774:	429a      	cmp	r2, r3
 800f776:	d1de      	bne.n	800f736 <lv_label_signal+0x42>
 800f778:	e7d8      	b.n	800f72c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800f77a:	2f05      	cmp	r7, #5
 800f77c:	d11d      	bne.n	800f7ba <lv_label_signal+0xc6>
        if(ext->body_draw) {
 800f77e:	7c43      	ldrb	r3, [r0, #17]
 800f780:	07db      	lsls	r3, r3, #31
 800f782:	d5d3      	bpl.n	800f72c <lv_label_signal+0x38>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 800f784:	4620      	mov	r0, r4
 800f786:	f7f8 f8fd 	bl	8007984 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 800f78a:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 800f78e:	f9b0 2026 	ldrsh.w	r2, [r0, #38]	; 0x26
 800f792:	4293      	cmp	r3, r2
 800f794:	bfb8      	it	lt
 800f796:	4613      	movlt	r3, r2
 800f798:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 800f79c:	4293      	cmp	r3, r2
 800f79e:	bfb8      	it	lt
 800f7a0:	4613      	movlt	r3, r2
 800f7a2:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	bfb8      	it	lt
 800f7aa:	4613      	movlt	r3, r2
 800f7ac:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	bfb8      	it	lt
 800f7b4:	4613      	movlt	r3, r2
 800f7b6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f7b8:	e7b8      	b.n	800f72c <lv_label_signal+0x38>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800f7ba:	2f06      	cmp	r7, #6
 800f7bc:	d1b6      	bne.n	800f72c <lv_label_signal+0x38>
 800f7be:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800f7c0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	b119      	cbz	r1, 800f7d0 <lv_label_signal+0xdc>
 800f7c8:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800f7ca:	2b07      	cmp	r3, #7
 800f7cc:	d1f8      	bne.n	800f7c0 <lv_label_signal+0xcc>
 800f7ce:	461a      	mov	r2, r3
        buf->type[i] = "lv_label";
 800f7d0:	4b02      	ldr	r3, [pc, #8]	; (800f7dc <lv_label_signal+0xe8>)
 800f7d2:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800f7d6:	e7a9      	b.n	800f72c <lv_label_signal+0x38>
 800f7d8:	20015178 	.word	0x20015178
 800f7dc:	080faeec 	.word	0x080faeec

0800f7e0 <lv_label_set_text>:
{
 800f7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e4:	4680      	mov	r8, r0
 800f7e6:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
 800f7e8:	f7f7 fbdc 	bl	8006fa4 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	f7f8 f9af 	bl	8007b50 <lv_obj_get_ext_attr>
 800f7f2:	4604      	mov	r4, r0
    if(text == NULL) {
 800f7f4:	b925      	cbnz	r5, 800f800 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
 800f7f6:	4640      	mov	r0, r8
}
 800f7f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        lv_label_refr_text(label);
 800f7fc:	f7ff bde6 	b.w	800f3cc <lv_label_refr_text>
    if(ext->text == text) {
 800f800:	6807      	ldr	r7, [r0, #0]
 800f802:	42bd      	cmp	r5, r7
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800f804:	4628      	mov	r0, r5
    if(ext->text == text) {
 800f806:	d109      	bne.n	800f81c <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800f808:	f7f0 fcec 	bl	80001e4 <strlen>
 800f80c:	1c41      	adds	r1, r0, #1
 800f80e:	4628      	mov	r0, r5
 800f810:	f7fd fb74 	bl	800cefc <lv_mem_realloc>
 800f814:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800f816:	2800      	cmp	r0, #0
 800f818:	d1ed      	bne.n	800f7f6 <lv_label_set_text+0x16>
 800f81a:	e7fe      	b.n	800f81a <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 800f81c:	f7f0 fce2 	bl	80001e4 <strlen>
 800f820:	f100 0901 	add.w	r9, r0, #1
        if(ext->text != NULL && ext->static_txt == 0) {
 800f824:	b13f      	cbz	r7, 800f836 <lv_label_set_text+0x56>
 800f826:	7c23      	ldrb	r3, [r4, #16]
 800f828:	f013 0608 	ands.w	r6, r3, #8
 800f82c:	d103      	bne.n	800f836 <lv_label_set_text+0x56>
            lv_mem_free(ext->text);
 800f82e:	4638      	mov	r0, r7
 800f830:	f7fd fb3a 	bl	800cea8 <lv_mem_free>
            ext->text = NULL;
 800f834:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 800f836:	4648      	mov	r0, r9
 800f838:	f7fd fb00 	bl	800ce3c <lv_mem_alloc>
 800f83c:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800f83e:	b900      	cbnz	r0, 800f842 <lv_label_set_text+0x62>
 800f840:	e7fe      	b.n	800f840 <lv_label_set_text+0x60>
        strcpy(ext->text, text);
 800f842:	4629      	mov	r1, r5
 800f844:	f001 f836 	bl	80108b4 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 800f848:	7c23      	ldrb	r3, [r4, #16]
 800f84a:	f36f 03c3 	bfc	r3, #3, #1
 800f84e:	7423      	strb	r3, [r4, #16]
 800f850:	e7d1      	b.n	800f7f6 <lv_label_set_text+0x16>

0800f852 <lv_label_set_static_text>:
{
 800f852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f854:	4607      	mov	r7, r0
 800f856:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f858:	f7f8 f97a 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 800f85c:	7c03      	ldrb	r3, [r0, #16]
 800f85e:	f013 0508 	ands.w	r5, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f862:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 800f864:	d104      	bne.n	800f870 <lv_label_set_static_text+0x1e>
 800f866:	6800      	ldr	r0, [r0, #0]
 800f868:	b110      	cbz	r0, 800f870 <lv_label_set_static_text+0x1e>
        lv_mem_free(ext->text);
 800f86a:	f7fd fb1d 	bl	800cea8 <lv_mem_free>
        ext->text = NULL;
 800f86e:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 800f870:	b126      	cbz	r6, 800f87c <lv_label_set_static_text+0x2a>
        ext->static_txt = 1;
 800f872:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
 800f874:	6026      	str	r6, [r4, #0]
        ext->static_txt = 1;
 800f876:	f043 0308 	orr.w	r3, r3, #8
 800f87a:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800f87c:	4638      	mov	r0, r7
}
 800f87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 800f882:	f7ff bda3 	b.w	800f3cc <lv_label_refr_text>
	...

0800f888 <lv_label_set_long_mode>:
{
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	4605      	mov	r5, r0
 800f88c:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f88e:	f7f8 f95f 	bl	8007b50 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800f892:	491a      	ldr	r1, [pc, #104]	; (800f8fc <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f894:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800f896:	4628      	mov	r0, r5
 800f898:	f7fc ff2a 	bl	800c6f0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 800f89c:	4918      	ldr	r1, [pc, #96]	; (800f900 <lv_label_set_long_mode+0x78>)
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f7fc ff26 	bl	800c6f0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800f8a4:	4917      	ldr	r1, [pc, #92]	; (800f904 <lv_label_set_long_mode+0x7c>)
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f7fc ff22 	bl	800c6f0 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800f8ac:	4916      	ldr	r1, [pc, #88]	; (800f908 <lv_label_set_long_mode+0x80>)
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7fc ff1e 	bl	800c6f0 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800f8b4:	1ef3      	subs	r3, r6, #3
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	7c23      	ldrb	r3, [r4, #16]
    ext->offset.x = 0;
 800f8ba:	f04f 0200 	mov.w	r2, #0
        ext->expand = 1;
 800f8be:	bf94      	ite	ls
 800f8c0:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 800f8c4:	f362 13c7 	bfihi	r3, r2, #7, #1
 800f8c8:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800f8ca:	7c23      	ldrb	r3, [r4, #16]
    ext->offset.x = 0;
 800f8cc:	8162      	strh	r2, [r4, #10]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800f8ce:	f003 0307 	and.w	r3, r3, #7
 800f8d2:	2b02      	cmp	r3, #2
    ext->offset.y = 0;
 800f8d4:	81a2      	strh	r2, [r4, #12]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800f8d6:	d107      	bne.n	800f8e8 <lv_label_set_long_mode+0x60>
 800f8d8:	8922      	ldrh	r2, [r4, #8]
 800f8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d002      	beq.n	800f8e8 <lv_label_set_long_mode+0x60>
        lv_label_revert_dots(label);
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f7ff fafa 	bl	800eedc <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800f8e8:	7c23      	ldrb	r3, [r4, #16]
 800f8ea:	f366 0302 	bfi	r3, r6, #0, #3
 800f8ee:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800f8f0:	4628      	mov	r0, r5
}
 800f8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 800f8f6:	f7ff bd69 	b.w	800f3cc <lv_label_refr_text>
 800f8fa:	bf00      	nop
 800f8fc:	08007105 	.word	0x08007105
 800f900:	08007119 	.word	0x08007119
 800f904:	0800ef63 	.word	0x0800ef63
 800f908:	0800ef4d 	.word	0x0800ef4d

0800f90c <lv_label_set_recolor>:
{
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	460c      	mov	r4, r1
 800f910:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f912:	f7f8 f91d 	bl	8007b50 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 800f916:	7c03      	ldrb	r3, [r0, #16]
 800f918:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800f91c:	42a2      	cmp	r2, r4
 800f91e:	d007      	beq.n	800f930 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
 800f920:	f364 1386 	bfi	r3, r4, #6, #1
 800f924:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800f926:	4628      	mov	r0, r5
}
 800f928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800f92c:	f7ff bd4e 	b.w	800f3cc <lv_label_refr_text>
 800f930:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f934 <lv_label_create>:
{
 800f934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f938:	460e      	mov	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800f93a:	f7f7 fe17 	bl	800756c <lv_obj_create>
    lv_mem_assert(new_label);
 800f93e:	4605      	mov	r5, r0
 800f940:	b900      	cbnz	r0, 800f944 <lv_label_create+0x10>
 800f942:	e7fe      	b.n	800f942 <lv_label_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800f944:	4c54      	ldr	r4, [pc, #336]	; (800fa98 <lv_label_create+0x164>)
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	b913      	cbnz	r3, 800f950 <lv_label_create+0x1c>
 800f94a:	f7f8 f8fd 	bl	8007b48 <lv_obj_get_signal_cb>
 800f94e:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800f950:	2114      	movs	r1, #20
 800f952:	4628      	mov	r0, r5
 800f954:	f7f7 faf9 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800f958:	4628      	mov	r0, r5
 800f95a:	f7f8 f8f9 	bl	8007b50 <lv_obj_get_ext_attr>
    lv_mem_assert(ext);
 800f95e:	4604      	mov	r4, r0
 800f960:	b900      	cbnz	r0, 800f964 <lv_label_create+0x30>
 800f962:	e7fe      	b.n	800f962 <lv_label_create+0x2e>
    ext->static_txt = 0;
 800f964:	7c01      	ldrb	r1, [r0, #16]
    ext->body_draw  = 0;
 800f966:	7c42      	ldrb	r2, [r0, #17]
    ext->text       = NULL;
 800f968:	2300      	movs	r3, #0
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800f96a:	f001 0187 	and.w	r1, r1, #135	; 0x87
 800f96e:	f363 0102 	bfi	r1, r3, #0, #3
    ext->dot_tmp_alloc = 0;
 800f972:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ext->text       = NULL;
 800f976:	6003      	str	r3, [r0, #0]
    ext->dot_tmp_alloc = 0;
 800f978:	f363 0241 	bfi	r2, r3, #1, #1
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800f97c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800f980:	7421      	strb	r1, [r4, #16]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800f982:	2119      	movs	r1, #25
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800f984:	8120      	strh	r0, [r4, #8]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800f986:	81e1      	strh	r1, [r4, #14]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800f988:	4628      	mov	r0, r5
 800f98a:	4944      	ldr	r1, [pc, #272]	; (800fa9c <lv_label_create+0x168>)
    ext->offset.x = 0;
 800f98c:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 800f98e:	81a3      	strh	r3, [r4, #12]
    ext->dot.tmp_ptr   = NULL;
 800f990:	6063      	str	r3, [r4, #4]
    ext->dot_tmp_alloc = 0;
 800f992:	7462      	strb	r2, [r4, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800f994:	f7f7 fad7 	bl	8006f46 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800f998:	4941      	ldr	r1, [pc, #260]	; (800faa0 <lv_label_create+0x16c>)
 800f99a:	4628      	mov	r0, r5
 800f99c:	f7f7 fad1 	bl	8006f42 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800f9a0:	b996      	cbnz	r6, 800f9c8 <lv_label_create+0x94>
        lv_obj_set_click(new_label, false);
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f7f7 fa69 	bl	8006e7c <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	f7ff ff6b 	bl	800f888 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800f9b2:	493c      	ldr	r1, [pc, #240]	; (800faa4 <lv_label_create+0x170>)
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	f7ff ff13 	bl	800f7e0 <lv_label_set_text>
    lv_obj_set_style(label, style);
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f7f7 ffb4 	bl	800792a <lv_obj_set_style>
}
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	f7f8 f8c1 	bl	8007b50 <lv_obj_get_ext_attr>
 800f9ce:	4607      	mov	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7ff fc2b 	bl	800f22c <lv_label_get_long_mode>
 800f9d6:	4601      	mov	r1, r0
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f7ff ff55 	bl	800f888 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7ff fc32 	bl	800f248 <lv_label_get_recolor>
 800f9e4:	4601      	mov	r1, r0
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f7ff ff90 	bl	800f90c <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7ff fc32 	bl	800f256 <lv_label_get_body_draw>
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f7ff fbfe 	bl	800f1f6 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f7ff fc1d 	bl	800f23a <lv_label_get_align>
 800fa00:	4601      	mov	r1, r0
 800fa02:	4628      	mov	r0, r5
 800fa04:	f7ff fbe4 	bl	800f1d0 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800fa08:	7c3b      	ldrb	r3, [r7, #16]
 800fa0a:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800fa0c:	4630      	mov	r0, r6
        if(copy_ext->static_txt == 0)
 800fa0e:	d416      	bmi.n	800fa3e <lv_label_create+0x10a>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800fa10:	f7ff fc07 	bl	800f222 <lv_label_get_text>
 800fa14:	4601      	mov	r1, r0
 800fa16:	4628      	mov	r0, r5
 800fa18:	f7ff fee2 	bl	800f7e0 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800fa1c:	7c3b      	ldrb	r3, [r7, #16]
 800fa1e:	f003 0307 	and.w	r3, r3, #7
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	d11c      	bne.n	800fa60 <lv_label_create+0x12c>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 800fa26:	6838      	ldr	r0, [r7, #0]
 800fa28:	6826      	ldr	r6, [r4, #0]
 800fa2a:	f7fd fa2f 	bl	800ce8c <lv_mem_get_size>
 800fa2e:	4601      	mov	r1, r0
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7fd fa63 	bl	800cefc <lv_mem_realloc>
 800fa36:	4606      	mov	r6, r0
 800fa38:	6020      	str	r0, [r4, #0]
            lv_mem_assert(ext->text);
 800fa3a:	b938      	cbnz	r0, 800fa4c <lv_label_create+0x118>
 800fa3c:	e7fe      	b.n	800fa3c <lv_label_create+0x108>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 800fa3e:	f7ff fbf0 	bl	800f222 <lv_label_get_text>
 800fa42:	4601      	mov	r1, r0
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7ff ff04 	bl	800f852 <lv_label_set_static_text>
 800fa4a:	e7e7      	b.n	800fa1c <lv_label_create+0xe8>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 800fa4c:	f8d7 8000 	ldr.w	r8, [r7]
 800fa50:	4640      	mov	r0, r8
 800fa52:	f7fd fa1b 	bl	800ce8c <lv_mem_get_size>
 800fa56:	4641      	mov	r1, r8
 800fa58:	4602      	mov	r2, r0
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f000 febe 	bl	80107dc <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800fa60:	7c7b      	ldrb	r3, [r7, #17]
 800fa62:	079b      	lsls	r3, r3, #30
 800fa64:	d515      	bpl.n	800fa92 <lv_label_create+0x15e>
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	b198      	cbz	r0, 800fa92 <lv_label_create+0x15e>
            int len = strlen(copy_ext->dot.tmp_ptr);
 800fa6a:	f7f0 fbbb 	bl	80001e4 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800fa6e:	6861      	ldr	r1, [r4, #4]
 800fa70:	b282      	uxth	r2, r0
 800fa72:	4628      	mov	r0, r5
 800fa74:	f7ff fa80 	bl	800ef78 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800fa78:	7c7b      	ldrb	r3, [r7, #17]
 800fa7a:	7c62      	ldrb	r2, [r4, #17]
 800fa7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fa80:	f363 0241 	bfi	r2, r3, #1, #1
 800fa84:	7462      	strb	r2, [r4, #17]
        ext->dot_end       = copy_ext->dot_end;
 800fa86:	893b      	ldrh	r3, [r7, #8]
 800fa88:	8123      	strh	r3, [r4, #8]
        lv_obj_refresh_style(new_label);
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f7f7 ff0f 	bl	80078ae <lv_obj_refresh_style>
 800fa90:	e797      	b.n	800f9c2 <lv_label_create+0x8e>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6063      	str	r3, [r4, #4]
 800fa96:	e7ef      	b.n	800fa78 <lv_label_create+0x144>
 800fa98:	20015178 	.word	0x20015178
 800fa9c:	0800efcb 	.word	0x0800efcb
 800faa0:	0800f6f5 	.word	0x0800f6f5
 800faa4:	080faee7 	.word	0x080faee7

0800faa8 <lv_slider_set_style>:
 * @param slider pointer to a slider object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_slider_set_style(lv_obj_t * slider, lv_slider_style_t type, const lv_style_t * style)
{
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	460e      	mov	r6, r1
 800faac:	4604      	mov	r4, r0
 800faae:	4615      	mov	r5, r2
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 800fab0:	f7f8 f84e 	bl	8007b50 <lv_obj_get_ext_attr>

    switch(type) {
 800fab4:	2e01      	cmp	r6, #1
 800fab6:	d00a      	beq.n	800face <lv_slider_set_style+0x26>
 800fab8:	d302      	bcc.n	800fac0 <lv_slider_set_style+0x18>
 800faba:	2e02      	cmp	r6, #2
 800fabc:	d00a      	beq.n	800fad4 <lv_slider_set_style+0x2c>
 800fabe:	bd70      	pop	{r4, r5, r6, pc}
        case LV_SLIDER_STYLE_BG: lv_bar_set_style(slider, LV_BAR_STYLE_BG, style); break;
 800fac0:	462a      	mov	r2, r5
 800fac2:	2100      	movs	r1, #0
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 800fac4:	4620      	mov	r0, r4
        case LV_SLIDER_STYLE_KNOB:
            ext->style_knob = style;
            lv_obj_refresh_ext_draw_pad(slider);
            break;
    }
}
 800fac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case LV_SLIDER_STYLE_INDIC: lv_bar_set_style(slider, LV_BAR_STYLE_INDIC, style); break;
 800faca:	f7fd bea8 	b.w	800d81e <lv_bar_set_style>
 800face:	462a      	mov	r2, r5
 800fad0:	4631      	mov	r1, r6
 800fad2:	e7f7      	b.n	800fac4 <lv_slider_set_style+0x1c>
            ext->style_knob = style;
 800fad4:	6145      	str	r5, [r0, #20]
            lv_obj_refresh_ext_draw_pad(slider);
 800fad6:	4620      	mov	r0, r4
}
 800fad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            lv_obj_refresh_ext_draw_pad(slider);
 800fadc:	f7f7 bef5 	b.w	80078ca <lv_obj_refresh_ext_draw_pad>

0800fae0 <lv_slider_create>:
{
 800fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae2:	460f      	mov	r7, r1
    lv_obj_t * new_slider = lv_bar_create(par, copy);
 800fae4:	f7fd feb2 	bl	800d84c <lv_bar_create>
    lv_mem_assert(new_slider);
 800fae8:	4604      	mov	r4, r0
 800faea:	b900      	cbnz	r0, 800faee <lv_slider_create+0xe>
 800faec:	e7fe      	b.n	800faec <lv_slider_create+0xc>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_slider);
 800faee:	4d29      	ldr	r5, [pc, #164]	; (800fb94 <lv_slider_create+0xb4>)
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	b913      	cbnz	r3, 800fafa <lv_slider_create+0x1a>
 800faf4:	f7f8 f82a 	bl	8007b4c <lv_obj_get_design_cb>
 800faf8:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_slider);
 800fafa:	4d27      	ldr	r5, [pc, #156]	; (800fb98 <lv_slider_create+0xb8>)
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	b91b      	cbnz	r3, 800fb08 <lv_slider_create+0x28>
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7f8 f821 	bl	8007b48 <lv_obj_get_signal_cb>
 800fb06:	6028      	str	r0, [r5, #0]
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(new_slider, sizeof(lv_slider_ext_t));
 800fb08:	211c      	movs	r1, #28
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f7f7 fa1d 	bl	8006f4a <lv_obj_allocate_ext_attr>
    lv_mem_assert(ext);
 800fb10:	4605      	mov	r5, r0
 800fb12:	b900      	cbnz	r0, 800fb16 <lv_slider_create+0x36>
 800fb14:	e7fe      	b.n	800fb14 <lv_slider_create+0x34>
    ext->drag_value = LV_SLIDER_NOT_PRESSED;
 800fb16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb1a:	8303      	strh	r3, [r0, #24]
    ext->style_knob = &lv_style_pretty;
 800fb1c:	4b1f      	ldr	r3, [pc, #124]	; (800fb9c <lv_slider_create+0xbc>)
 800fb1e:	6143      	str	r3, [r0, #20]
    ext->knob_in    = 0;
 800fb20:	7e83      	ldrb	r3, [r0, #26]
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 800fb22:	491f      	ldr	r1, [pc, #124]	; (800fba0 <lv_slider_create+0xc0>)
    ext->knob_in    = 0;
 800fb24:	f36f 0300 	bfc	r3, #0, #1
 800fb28:	7683      	strb	r3, [r0, #26]
    lv_obj_set_signal_cb(new_slider, lv_slider_signal);
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7f7 fa09 	bl	8006f42 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_slider, lv_slider_design);
 800fb30:	491c      	ldr	r1, [pc, #112]	; (800fba4 <lv_slider_create+0xc4>)
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7f7 fa07 	bl	8006f46 <lv_obj_set_design_cb>
    if(copy == NULL) {
 800fb38:	b9f7      	cbnz	r7, 800fb78 <lv_slider_create+0x98>
        lv_obj_set_click(new_slider, true);
 800fb3a:	2101      	movs	r1, #1
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f7f7 f99d 	bl	8006e7c <lv_obj_set_click>
        lv_obj_set_protect(new_slider, LV_PROTECT_PRESS_LOST);
 800fb42:	2110      	movs	r1, #16
 800fb44:	4620      	mov	r0, r4
 800fb46:	f7f7 f9a0 	bl	8006e8a <lv_obj_set_protect>
        lv_theme_t * th = lv_theme_get_current();
 800fb4a:	f000 fbcf 	bl	80102ec <lv_theme_get_current>
        if(th) {
 800fb4e:	4606      	mov	r6, r0
 800fb50:	b180      	cbz	r0, 800fb74 <lv_slider_create+0x94>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_BG, th->style.slider.bg);
 800fb52:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fb54:	4639      	mov	r1, r7
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff ffa6 	bl	800faa8 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_INDIC, th->style.slider.indic);
 800fb5c:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800fb5e:	2101      	movs	r1, #1
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7ff ffa1 	bl	800faa8 <lv_slider_set_style>
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, th->style.slider.knob);
 800fb66:	6e72      	ldr	r2, [r6, #100]	; 0x64
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 800fb68:	2102      	movs	r1, #2
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f7ff ff9c 	bl	800faa8 <lv_slider_set_style>
}
 800fb70:	4620      	mov	r0, r4
 800fb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_slider_set_style(new_slider, LV_SLIDER_STYLE_KNOB, ext->style_knob);
 800fb74:	696a      	ldr	r2, [r5, #20]
 800fb76:	e7f7      	b.n	800fb68 <lv_slider_create+0x88>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800fb78:	4638      	mov	r0, r7
 800fb7a:	f7f7 ffe9 	bl	8007b50 <lv_obj_get_ext_attr>
        ext->style_knob            = copy_ext->style_knob;
 800fb7e:	6943      	ldr	r3, [r0, #20]
        ext->knob_in               = copy_ext->knob_in;
 800fb80:	7e82      	ldrb	r2, [r0, #26]
        ext->style_knob            = copy_ext->style_knob;
 800fb82:	616b      	str	r3, [r5, #20]
        ext->knob_in               = copy_ext->knob_in;
 800fb84:	7eab      	ldrb	r3, [r5, #26]
 800fb86:	f362 0300 	bfi	r3, r2, #0, #1
 800fb8a:	76ab      	strb	r3, [r5, #26]
        lv_obj_refresh_style(new_slider);
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7f7 fe8e 	bl	80078ae <lv_obj_refresh_style>
 800fb92:	e7ed      	b.n	800fb70 <lv_slider_create+0x90>
 800fb94:	2001517c 	.word	0x2001517c
 800fb98:	20015180 	.word	0x20015180
 800fb9c:	20015b80 	.word	0x20015b80
 800fba0:	08010079 	.word	0x08010079
 800fba4:	0800fbf3 	.word	0x0800fbf3

0800fba8 <lv_slider_get_value>:
 * Get the value of a slider
 * @param slider pointer to a slider object
 * @return the value of the slider
 */
int16_t lv_slider_get_value(const lv_obj_t * slider)
{
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	4604      	mov	r4, r0
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 800fbac:	f7f7 ffd0 	bl	8007b50 <lv_obj_get_ext_attr>

    if(ext->drag_value != LV_SLIDER_NOT_PRESSED)
 800fbb0:	f9b0 0018 	ldrsh.w	r0, [r0, #24]
 800fbb4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fbb8:	d104      	bne.n	800fbc4 <lv_slider_get_value+0x1c>
        return ext->drag_value;
    else
        return lv_bar_get_value(slider);
 800fbba:	4620      	mov	r0, r4
}
 800fbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return lv_bar_get_value(slider);
 800fbc0:	f7fd becc 	b.w	800d95c <lv_bar_get_value>
}
 800fbc4:	bd10      	pop	{r4, pc}

0800fbc6 <lv_slider_get_style>:
 * @param slider pointer to a slider object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_slider_get_style(const lv_obj_t * slider, lv_slider_style_t type)
{
 800fbc6:	b538      	push	{r3, r4, r5, lr}
 800fbc8:	460c      	mov	r4, r1
 800fbca:	4605      	mov	r5, r0
    const lv_style_t * style = NULL;
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 800fbcc:	f7f7 ffc0 	bl	8007b50 <lv_obj_get_ext_attr>

    switch(type) {
 800fbd0:	2c01      	cmp	r4, #1
 800fbd2:	d00a      	beq.n	800fbea <lv_slider_get_style+0x24>
 800fbd4:	d303      	bcc.n	800fbde <lv_slider_get_style+0x18>
 800fbd6:	2c02      	cmp	r4, #2
 800fbd8:	d009      	beq.n	800fbee <lv_slider_get_style+0x28>
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
        default: style = NULL; break;
 800fbda:	2000      	movs	r0, #0
    }

    return style;
}
 800fbdc:	bd38      	pop	{r3, r4, r5, pc}
        case LV_SLIDER_STYLE_BG: style = lv_bar_get_style(slider, LV_BAR_STYLE_BG); break;
 800fbde:	2100      	movs	r1, #0
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 800fbe0:	4628      	mov	r0, r5
}
 800fbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case LV_SLIDER_STYLE_INDIC: style = lv_bar_get_style(slider, LV_BAR_STYLE_INDIC); break;
 800fbe6:	f7fd bed1 	b.w	800d98c <lv_bar_get_style>
 800fbea:	4621      	mov	r1, r4
 800fbec:	e7f8      	b.n	800fbe0 <lv_slider_get_style+0x1a>
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 800fbee:	6940      	ldr	r0, [r0, #20]
 800fbf0:	bd38      	pop	{r3, r4, r5, pc}

0800fbf2 <lv_slider_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_slider_design(lv_obj_t * slider, const lv_area_t * mask, lv_design_mode_t mode)
{
 800fbf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*Return false if the object is not covers the mask_p area*/
    if(mode == LV_DESIGN_COVER_CHK) {
 800fbf6:	2a02      	cmp	r2, #2
{
 800fbf8:	b0a1      	sub	sp, #132	; 0x84
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	468a      	mov	sl, r1
 800fbfe:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 800fc00:	f000 8236 	beq.w	8010070 <lv_slider_design+0x47e>
        return false;
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800fc04:	2a00      	cmp	r2, #0
 800fc06:	f040 8149 	bne.w	800fe9c <lv_slider_design+0x2aa>
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 800fc0a:	f7f7 ffa1 	bl	8007b50 <lv_obj_get_ext_attr>

        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 800fc0e:	4621      	mov	r1, r4
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 800fc10:	4606      	mov	r6, r0
        const lv_style_t * style_bg    = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 800fc12:	4628      	mov	r0, r5
 800fc14:	f7ff ffd7 	bl	800fbc6 <lv_slider_get_style>
 800fc18:	4681      	mov	r9, r0
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f7f7 ff98 	bl	8007b50 <lv_obj_get_ext_attr>
        const lv_style_t * style_knob  = lv_slider_get_style(slider, LV_SLIDER_STYLE_KNOB);
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 800fc20:	2101      	movs	r1, #1
        case LV_SLIDER_STYLE_KNOB: style = ext->style_knob; break;
 800fc22:	6943      	ldr	r3, [r0, #20]
 800fc24:	9307      	str	r3, [sp, #28]
        const lv_style_t * style_indic = lv_slider_get_style(slider, LV_SLIDER_STYLE_INDIC);
 800fc26:	4628      	mov	r0, r5
 800fc28:	f7ff ffcd 	bl	800fbc6 <lv_slider_get_style>
 800fc2c:	9000      	str	r0, [sp, #0]

        lv_opa_t opa_scale = lv_obj_get_opa_scale(slider);
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f7f7 ff26 	bl	8007a80 <lv_obj_get_opa_scale>
    return area_p->x2 - area_p->x1 + 1;
 800fc34:	8aab      	ldrh	r3, [r5, #20]
 800fc36:	8a2a      	ldrh	r2, [r5, #16]
 800fc38:	9001      	str	r0, [sp, #4]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	1a9b      	subs	r3, r3, r2
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	9304      	str	r3, [sp, #16]
 800fc42:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800fc46:	9302      	str	r3, [sp, #8]
    return area_p->y2 - area_p->y1 + 1;
 800fc48:	8aeb      	ldrh	r3, [r5, #22]
 800fc4a:	8a6a      	ldrh	r2, [r5, #18]
        lv_area_copy(&area_bg, &slider->coords);

        /*Be sure at least LV_SLIDER_SIZE_MIN  size will remain*/
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
        lv_coord_t pad_left_bg   = style_bg->body.padding.left;
 800fc4c:	f9b9 7024 	ldrsh.w	r7, [r9, #36]	; 0x24
        lv_coord_t pad_right_bg  = style_bg->body.padding.right;
 800fc50:	f9b9 e026 	ldrsh.w	lr, [r9, #38]	; 0x26
 800fc54:	3301      	adds	r3, #1
 800fc56:	1a9b      	subs	r3, r3, r2
    memcpy(dest, src, sizeof(lv_area_t));
 800fc58:	462a      	mov	r2, r5
    return area_p->y2 - area_p->y1 + 1;
 800fc5a:	b29b      	uxth	r3, r3
    memcpy(dest, src, sizeof(lv_area_t));
 800fc5c:	f852 0f10 	ldr.w	r0, [r2, #16]!
    return area_p->y2 - area_p->y1 + 1;
 800fc60:	9305      	str	r3, [sp, #20]
    memcpy(dest, src, sizeof(lv_area_t));
 800fc62:	6851      	ldr	r1, [r2, #4]
    return area_p->y2 - area_p->y1 + 1;
 800fc64:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800fc68:	9303      	str	r3, [sp, #12]
    memcpy(dest, src, sizeof(lv_area_t));
 800fc6a:	ab08      	add	r3, sp, #32
 800fc6c:	c303      	stmia	r3!, {r0, r1}
    return area_p->y2 - area_p->y1 + 1;
 800fc6e:	f8bd c026 	ldrh.w	ip, [sp, #38]	; 0x26
        lv_coord_t pad_top_bg    = style_bg->body.padding.top;
 800fc72:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
    memcpy(dest, src, sizeof(lv_area_t));
 800fc76:	9206      	str	r2, [sp, #24]
    return area_p->y2 - area_p->y1 + 1;
 800fc78:	f8bd 8022 	ldrh.w	r8, [sp, #34]	; 0x22
        lv_coord_t pad_bottom_bg = style_bg->body.padding.bottom;
 800fc7c:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
    return area_p->x2 - area_p->x1 + 1;
 800fc80:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 800fc84:	f10c 0101 	add.w	r1, ip, #1
        if(pad_top_bg + pad_bottom_bg + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 800fc88:	1898      	adds	r0, r3, r2
 800fc8a:	eba1 0108 	sub.w	r1, r1, r8
 800fc8e:	b209      	sxth	r1, r1
 800fc90:	3003      	adds	r0, #3
 800fc92:	4288      	cmp	r0, r1
    return area_p->x2 - area_p->x1 + 1;
 800fc94:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fc98:	bfa8      	it	ge
 800fc9a:	1f0b      	subge	r3, r1, #4
 800fc9c:	f100 0101 	add.w	r1, r0, #1
            pad_bottom_bg = pad_top_bg;
        }
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fca0:	eb07 0b0e 	add.w	fp, r7, lr
 800fca4:	eba1 0104 	sub.w	r1, r1, r4
 800fca8:	b209      	sxth	r1, r1
            pad_top_bg    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fcaa:	bfa8      	it	ge
 800fcac:	105b      	asrge	r3, r3, #1
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fcae:	f10b 0b03 	add.w	fp, fp, #3
            pad_bottom_bg = pad_top_bg;
 800fcb2:	bfa8      	it	ge
 800fcb4:	461a      	movge	r2, r3
        if(pad_left_bg + pad_right_bg + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fcb6:	458b      	cmp	fp, r1
            pad_left_bg  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fcb8:	bfa4      	itt	ge
 800fcba:	3904      	subge	r1, #4
 800fcbc:	104f      	asrge	r7, r1, #1
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
        }

        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 800fcbe:	7eb1      	ldrb	r1, [r6, #26]
            pad_right_bg = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fcc0:	bfa8      	it	ge
 800fcc2:	46be      	movge	lr, r7
        if(ext->knob_in) { /*Enable extra size if the knob is inside */
 800fcc4:	07c9      	lsls	r1, r1, #31
 800fcc6:	f140 80eb 	bpl.w	800fea0 <lv_slider_design+0x2ae>
            area_bg.x1 += pad_left_bg;
 800fcca:	443c      	add	r4, r7
            area_bg.x2 -= pad_right_bg;
 800fccc:	eba0 000e 	sub.w	r0, r0, lr
            area_bg.y1 += pad_top_bg;
 800fcd0:	4443      	add	r3, r8
            area_bg.x1 += pad_left_bg;
 800fcd2:	f8ad 4020 	strh.w	r4, [sp, #32]
            area_bg.x2 -= pad_right_bg;
 800fcd6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            area_bg.y1 += pad_top_bg;
 800fcda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            area_bg.y2 -= pad_bottom_bg;
        } else {                                                   /*Let space only in the perpendicular directions*/
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 800fcde:	ebac 0202 	sub.w	r2, ip, r2
        lv_draw_rect(&area_bg, mask, style_bg, lv_obj_get_opa_scale(slider));
#else
        /* Draw the borders later if the slider is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 800fce2:	4628      	mov	r0, r5
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 800fce4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        if(lv_obj_is_focused(slider)) {
 800fce8:	f7f7 ff36 	bl	8007b58 <lv_obj_is_focused>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	f000 80ee 	beq.w	800fece <lv_slider_design+0x2dc>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 800fcf2:	4649      	mov	r1, r9
 800fcf4:	a80c      	add	r0, sp, #48	; 0x30
 800fcf6:	f7f8 fa75 	bl	80081e4 <lv_style_copy>
            style_tmp.body.border.width = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 800fd00:	9b01      	ldr	r3, [sp, #4]
 800fd02:	aa0c      	add	r2, sp, #48	; 0x30
        } else {
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 800fd04:	4651      	mov	r1, sl
 800fd06:	a808      	add	r0, sp, #32
 800fd08:	f7f9 fdf0 	bl	80098ec <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 800fd0c:	aa08      	add	r2, sp, #32
 800fd0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd12:	ab0a      	add	r3, sp, #40	; 0x28
 800fd14:	e883 0003 	stmia.w	r3, {r0, r1}
        /*Draw the indicator*/
        lv_area_t area_indic;
        lv_area_copy(&area_indic, &area_bg);

        /*Be sure at least ver pad/hor pad width indicator will remain*/
        lv_coord_t pad_top_indic    = style_indic->body.padding.top;
 800fd18:	9b00      	ldr	r3, [sp, #0]
    return area_p->y2 - area_p->y1 + 1;
 800fd1a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800fd1e:	f9b3 0020 	ldrsh.w	r0, [r3, #32]
        lv_coord_t pad_bottom_indic = style_indic->body.padding.bottom;
 800fd22:	f9b3 c022 	ldrsh.w	ip, [r3, #34]	; 0x22
 800fd26:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
        lv_coord_t pad_left_indic   = style_indic->body.padding.left;
 800fd2a:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
        lv_coord_t pad_right_indic  = style_indic->body.padding.right;
 800fd2e:	f9b3 8026 	ldrsh.w	r8, [r3, #38]	; 0x26
    return area_p->x2 - area_p->x1 + 1;
 800fd32:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    return area_p->y2 - area_p->y1 + 1;
 800fd36:	1c53      	adds	r3, r2, #1
        if(pad_top_indic + pad_bottom_indic + LV_SLIDER_SIZE_MIN > lv_area_get_height(&area_bg)) {
 800fd38:	eb00 040c 	add.w	r4, r0, ip
 800fd3c:	1a5b      	subs	r3, r3, r1
 800fd3e:	b21b      	sxth	r3, r3
 800fd40:	3403      	adds	r4, #3
 800fd42:	429c      	cmp	r4, r3
    return area_p->x2 - area_p->x1 + 1;
 800fd44:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fd48:	bfa8      	it	ge
 800fd4a:	1f18      	subge	r0, r3, #4
 800fd4c:	f104 0301 	add.w	r3, r4, #1
            pad_bottom_indic = pad_top_indic;
        }
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fd50:	eb0e 0b08 	add.w	fp, lr, r8
 800fd54:	eba3 0307 	sub.w	r3, r3, r7
 800fd58:	b21b      	sxth	r3, r3
            pad_top_indic    = (lv_area_get_height(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fd5a:	bfa8      	it	ge
 800fd5c:	1040      	asrge	r0, r0, #1
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fd5e:	f10b 0b03 	add.w	fp, fp, #3
            pad_bottom_indic = pad_top_indic;
 800fd62:	bfa8      	it	ge
 800fd64:	4684      	movge	ip, r0
        if(pad_left_indic + pad_right_indic + LV_SLIDER_SIZE_MIN > lv_area_get_width(&area_bg)) {
 800fd66:	459b      	cmp	fp, r3
            pad_left_indic  = (lv_area_get_width(&area_bg) - LV_SLIDER_SIZE_MIN) >> 1;
 800fd68:	bfa2      	ittt	ge
 800fd6a:	3b04      	subge	r3, #4
 800fd6c:	ea4f 0e63 	movge.w	lr, r3, asr #1
            pad_right_indic = pad_left_indic;
 800fd70:	46f0      	movge	r8, lr
        }

        area_indic.x1 += pad_left_indic;
 800fd72:	4477      	add	r7, lr
        area_indic.x2 -= pad_right_indic;
        area_indic.y1 += pad_top_indic;
 800fd74:	4401      	add	r1, r0
        area_indic.y2 -= pad_bottom_indic;
 800fd76:	eba2 020c 	sub.w	r2, r2, ip
        area_indic.x2 -= pad_right_indic;
 800fd7a:	eba4 0408 	sub.w	r4, r4, r8

        lv_coord_t cur_value = lv_slider_get_value(slider);
 800fd7e:	4628      	mov	r0, r5
        area_indic.y2 -= pad_bottom_indic;
 800fd80:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        area_indic.y1 += pad_top_indic;
 800fd84:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        area_indic.x1 += pad_left_indic;
 800fd88:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
        area_indic.x2 -= pad_right_indic;
 800fd8c:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
        lv_coord_t cur_value = lv_slider_get_value(slider);
 800fd90:	f7ff ff0a 	bl	800fba8 <lv_slider_get_value>
 800fd94:	4683      	mov	fp, r0
 * @param slider pointer to a slider object
 * @return the minimum value of the slider
 */
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)
{
    return lv_bar_get_min_value(slider);
 800fd96:	4628      	mov	r0, r5
 800fd98:	f7fd fdec 	bl	800d974 <lv_bar_get_min_value>
 800fd9c:	4604      	mov	r4, r0
 * @param slider pointer to a slider object
 * @return the maximum value of the slider
 */
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)
{
    return lv_bar_get_max_value(slider);
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f7fd fdee 	bl	800d980 <lv_bar_get_max_value>
        lv_coord_t min_value = lv_slider_get_min_value(slider);
        lv_coord_t max_value = lv_slider_get_max_value(slider);

        /*If dragged draw to the drag position*/
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) cur_value = ext->drag_value;
 800fda4:	f9b6 7018 	ldrsh.w	r7, [r6, #24]

        if(slider_w >= slider_h) {
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	9a03      	ldr	r2, [sp, #12]
        lv_coord_t cur_value = lv_slider_get_value(slider);
 800fdac:	f517 4f00 	cmn.w	r7, #32768	; 0x8000
 800fdb0:	bf08      	it	eq
 800fdb2:	465f      	moveq	r7, fp
        if(slider_w >= slider_h) {
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	4680      	mov	r8, r0
 800fdb8:	f2c0 8093 	blt.w	800fee2 <lv_slider_design+0x2f0>
 800fdbc:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 800fdc0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
            lv_coord_t indic_w = lv_area_get_width(&area_indic);
#if LV_USE_ANIMATION
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 800fdc4:	f9b6 e00a 	ldrsh.w	lr, [r6, #10]
 800fdc8:	fa1f f08b 	uxth.w	r0, fp
 800fdcc:	3301      	adds	r3, #1
 800fdce:	1a1b      	subs	r3, r3, r0
 800fdd0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fdd4:	b21b      	sxth	r3, r3
 800fdd6:	eba8 0c04 	sub.w	ip, r8, r4
 800fdda:	d07b      	beq.n	800fed4 <lv_slider_design+0x2e2>
                /*Calculate the coordinates of anim. start and end*/
                lv_coord_t anim_start_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800fddc:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
                lv_coord_t anim_end_x =
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800fde0:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800fde4:	1b09      	subs	r1, r1, r4
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800fde6:	1b12      	subs	r2, r2, r4
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800fde8:	4359      	muls	r1, r3
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800fdea:	4353      	muls	r3, r2
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800fdec:	fb91 f1fc 	sdiv	r1, r1, ip
                    (int32_t)((int32_t)indic_w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800fdf0:	fb93 fcfc 	sdiv	ip, r3, ip

                /*Calculate the real position based on `anim_state` (between `anim_start` and
                 * `anim_end`)*/
                area_indic.x2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 800fdf4:	b20b      	sxth	r3, r1
 800fdf6:	fa0f fc8c 	sxth.w	ip, ip
 800fdfa:	ebac 0c03 	sub.w	ip, ip, r3
 800fdfe:	fb0e fe0c 	mul.w	lr, lr, ip
 800fe02:	eb01 212e 	add.w	r1, r1, lr, asr #8
 800fe06:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
            } else
#endif
            {
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
            }
            area_indic.x2 = area_indic.x1 + area_indic.x2 - 1;
 800fe0a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800fe0e:	4418      	add	r0, r3
 800fe10:	3801      	subs	r0, #1
 800fe12:	b200      	sxth	r0, r0
 800fe14:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

            /*Draw the indicator but don't draw an ugly 1px wide rectangle on the left on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 800fe18:	4583      	cmp	fp, r0
            }
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;

            /*Draw the indicator but don't draw an ugly 1px height rectangle on the bottom on min.
             * value*/
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 800fe1a:	d005      	beq.n	800fe28 <lv_slider_design+0x236>
 800fe1c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800fe20:	4651      	mov	r1, sl
 800fe22:	a80a      	add	r0, sp, #40	; 0x28
 800fe24:	f7f9 fd62 	bl	80098ec <lv_draw_rect>
        /*Before the knob add the border if required*/
#if LV_USE_GROUP
        /* Draw the borders later if the bar is focused.
         * At value = 100% the indicator can cover to whole background and the focused style won't
         * be visible*/
        if(lv_obj_is_focused(slider)) {
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f7f7 fe95 	bl	8007b58 <lv_obj_is_focused>
 800fe2e:	b170      	cbz	r0, 800fe4e <lv_slider_design+0x25c>
            lv_style_t style_tmp;
            lv_style_copy(&style_tmp, style_bg);
 800fe30:	4649      	mov	r1, r9
 800fe32:	a80c      	add	r0, sp, #48	; 0x30
 800fe34:	f7f8 f9d6 	bl	80081e4 <lv_style_copy>
            style_tmp.body.opa          = LV_OPA_TRANSP;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
            style_tmp.body.shadow.width = 0;
 800fe3e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            lv_draw_rect(&area_bg, mask, &style_tmp, opa_scale);
 800fe42:	aa0c      	add	r2, sp, #48	; 0x30
 800fe44:	9b01      	ldr	r3, [sp, #4]
 800fe46:	4651      	mov	r1, sl
 800fe48:	a808      	add	r0, sp, #32
 800fe4a:	f7f9 fd4f 	bl	80098ec <lv_draw_rect>
    memcpy(dest, src, sizeof(lv_area_t));
 800fe4e:	9a06      	ldr	r2, [sp, #24]
 800fe50:	6810      	ldr	r0, [r2, #0]
 800fe52:	6851      	ldr	r1, [r2, #4]

        /*Draw the knob*/
        lv_area_t knob_area;
        lv_area_copy(&knob_area, &slider->coords);

        if(slider_w >= slider_h) {
 800fe54:	9a03      	ldr	r2, [sp, #12]
 800fe56:	ab0c      	add	r3, sp, #48	; 0x30
 800fe58:	c303      	stmia	r3!, {r0, r1}
 800fe5a:	9b02      	ldr	r3, [sp, #8]
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	7eb3      	ldrb	r3, [r6, #26]
 800fe60:	f2c0 80af 	blt.w	800ffc2 <lv_slider_design+0x3d0>
            if(ext->knob_in == 0) {
 800fe64:	07d8      	lsls	r0, r3, #31
 800fe66:	d474      	bmi.n	800ff52 <lv_slider_design+0x360>
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 800fe68:	2302      	movs	r3, #2
 800fe6a:	fb92 f2f3 	sdiv	r2, r2, r3
 800fe6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800fe72:	1a9b      	subs	r3, r3, r2
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800fe74:	9a05      	ldr	r2, [sp, #20]
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 800fe76:	b29b      	uxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800fe78:	3a01      	subs	r2, #1
                knob_area.x1 = area_indic.x2 - slider_h / 2;
 800fe7a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800fe7e:	4413      	add	r3, r2
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
                                   (max_value - min_value);
                }

                knob_area.x1 += slider->coords.x1;
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800fe80:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            }

            knob_area.y1 = slider->coords.y1;
 800fe84:	8a6b      	ldrh	r3, [r5, #18]
 800fe86:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            knob_area.y2 = slider->coords.y2;
 800fe8a:	8aeb      	ldrh	r3, [r5, #22]
 800fe8c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                knob_area.y1 = knob_area.y2 - slider_w - 1;
            }
            knob_area.x1 = slider->coords.x1;
            knob_area.x2 = slider->coords.x2;
        }
        lv_draw_rect(&knob_area, mask, style_knob, opa_scale);
 800fe90:	9b01      	ldr	r3, [sp, #4]
 800fe92:	9a07      	ldr	r2, [sp, #28]
 800fe94:	4651      	mov	r1, sl
 800fe96:	a80c      	add	r0, sp, #48	; 0x30
 800fe98:	f7f9 fd28 	bl	80098ec <lv_draw_rect>
    }
    /*Post draw when the children are drawn*/
    else if(mode == LV_DESIGN_DRAW_POST) {
    }

    return true;
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	e0e8      	b.n	8010072 <lv_slider_design+0x480>
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 800fea0:	9902      	ldr	r1, [sp, #8]
 800fea2:	468b      	mov	fp, r1
 800fea4:	9903      	ldr	r1, [sp, #12]
 800fea6:	458b      	cmp	fp, r1
 800fea8:	bfa4      	itt	ge
 800feaa:	2700      	movge	r7, #0
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 800feac:	f04f 0e00 	movge.w	lr, #0
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 800feb0:	bfd8      	it	le
 800feb2:	2300      	movle	r3, #0
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 800feb4:	443c      	add	r4, r7
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 800feb6:	eba0 000e 	sub.w	r0, r0, lr
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 800feba:	4443      	add	r3, r8
            area_bg.x1 += slider_w < slider_h ? pad_left_bg : 0;   /*Pad only for vertical slider*/
 800febc:	f8ad 4020 	strh.w	r4, [sp, #32]
            area_bg.x2 -= slider_w < slider_h ? pad_right_bg : 0;  /*Pad only for vertical slider*/
 800fec0:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            area_bg.y1 += slider_w > slider_h ? pad_top_bg : 0;    /*Pad only for horizontal slider*/
 800fec4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            area_bg.y2 -= slider_w > slider_h ? pad_bottom_bg : 0; /*Pad only for horizontal slider*/
 800fec8:	bfd8      	it	le
 800feca:	2200      	movle	r2, #0
 800fecc:	e707      	b.n	800fcde <lv_slider_design+0xec>
            lv_draw_rect(&area_bg, mask, style_bg, opa_scale);
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	464a      	mov	r2, r9
 800fed2:	e717      	b.n	800fd04 <lv_slider_design+0x112>
                area_indic.x2 = (int32_t)((int32_t)indic_w * (cur_value - min_value)) / (max_value - min_value);
 800fed4:	1b3a      	subs	r2, r7, r4
 800fed6:	4353      	muls	r3, r2
 800fed8:	fb93 fcfc 	sdiv	ip, r3, ip
 800fedc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800fee0:	e793      	b.n	800fe0a <lv_slider_design+0x218>
 800fee2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    return area_p->y2 - area_p->y1 + 1;
 800fee6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
            if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 800feea:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
 800feee:	3101      	adds	r1, #1
 800fef0:	b289      	uxth	r1, r1
 800fef2:	1acb      	subs	r3, r1, r3
 800fef4:	1c42      	adds	r2, r0, #1
 800fef6:	b21b      	sxth	r3, r3
 800fef8:	eba8 0e04 	sub.w	lr, r8, r4
 800fefc:	d022      	beq.n	800ff44 <lv_slider_design+0x352>
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800fefe:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff02:	f9b6 c008 	ldrsh.w	ip, [r6, #8]
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff06:	1b12      	subs	r2, r2, r4
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff08:	ebac 0c04 	sub.w	ip, ip, r4
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff0c:	435a      	muls	r2, r3
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff0e:	fb03 f30c 	mul.w	r3, r3, ip
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff12:	fb92 f2fe 	sdiv	r2, r2, lr
                    (int32_t)((int32_t)indic_h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff16:	fb93 f3fe 	sdiv	r3, r3, lr
                area_indic.y1 = anim_start_y + (((anim_end_y - anim_start_y) * ext->bar.anim_state) >> 8);
 800ff1a:	fa0f fe82 	sxth.w	lr, r2
 800ff1e:	b21b      	sxth	r3, r3
 800ff20:	eba3 030e 	sub.w	r3, r3, lr
 800ff24:	4343      	muls	r3, r0
 800ff26:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800ff2a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 800ff2e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 800ff32:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 800ff36:	1ac9      	subs	r1, r1, r3
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 800ff38:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
            area_indic.y1 = area_indic.y2 - area_indic.y1 + 1;
 800ff3c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            if(area_indic.x1 != area_indic.x2) lv_draw_rect(&area_indic, mask, style_indic, opa_scale);
 800ff40:	429a      	cmp	r2, r3
 800ff42:	e76a      	b.n	800fe1a <lv_slider_design+0x228>
                area_indic.y1 = (int32_t)((int32_t)indic_h * (cur_value - min_value)) / (max_value - min_value);
 800ff44:	1b3a      	subs	r2, r7, r4
 800ff46:	4353      	muls	r3, r2
 800ff48:	fb93 f3fe 	sdiv	r3, r3, lr
 800ff4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800ff50:	e7ed      	b.n	800ff2e <lv_slider_design+0x33c>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 800ff52:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800ff56:	1c51      	adds	r1, r2, #1
 800ff58:	eba8 0804 	sub.w	r8, r8, r4
 800ff5c:	d026      	beq.n	800ffac <lv_slider_design+0x3ba>
                    lv_coord_t w = slider_w - slider_h - 1;
 800ff5e:	9b04      	ldr	r3, [sp, #16]
 800ff60:	9905      	ldr	r1, [sp, #20]
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff62:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
                    lv_coord_t w = slider_w - slider_h - 1;
 800ff66:	3b01      	subs	r3, #1
 800ff68:	1a5b      	subs	r3, r3, r1
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff6a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 800ff6e:	b21b      	sxth	r3, r3
 800ff70:	1b09      	subs	r1, r1, r4
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff72:	1b04      	subs	r4, r0, r4
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff74:	4359      	muls	r1, r3
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff76:	4363      	muls	r3, r4
                        (int32_t)((int32_t)w * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 800ff78:	fb91 f1f8 	sdiv	r1, r1, r8
                        (int32_t)((int32_t)w * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 800ff7c:	fb93 f3f8 	sdiv	r3, r3, r8
                    knob_area.x1 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 800ff80:	fa0f f881 	sxth.w	r8, r1
 800ff84:	b21b      	sxth	r3, r3
 800ff86:	eba3 0308 	sub.w	r3, r3, r8
 800ff8a:	4353      	muls	r3, r2
 800ff8c:	eb01 2123 	add.w	r1, r1, r3, asr #8
 800ff90:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
                knob_area.x1 += slider->coords.x1;
 800ff94:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800ff98:	8a2a      	ldrh	r2, [r5, #16]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	b29b      	uxth	r3, r3
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800ff9e:	9a05      	ldr	r2, [sp, #20]
                knob_area.x1 += slider->coords.x1;
 800ffa0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                knob_area.x2 = knob_area.x1 + slider_h - 1;
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	441a      	add	r2, r3
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	e769      	b.n	800fe80 <lv_slider_design+0x28e>
                    knob_area.x1 = (int32_t)((int32_t)(slider_w - slider_h - 1) * (cur_value - min_value)) /
 800ffac:	9a03      	ldr	r2, [sp, #12]
 800ffae:	9b02      	ldr	r3, [sp, #8]
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	1e5a      	subs	r2, r3, #1
 800ffb4:	1b3b      	subs	r3, r7, r4
 800ffb6:	4353      	muls	r3, r2
 800ffb8:	fb93 f3f8 	sdiv	r3, r3, r8
 800ffbc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800ffc0:	e7e8      	b.n	800ff94 <lv_slider_design+0x3a2>
            if(ext->knob_in == 0) {
 800ffc2:	07da      	lsls	r2, r3, #31
 800ffc4:	d415      	bmi.n	800fff2 <lv_slider_design+0x400>
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	9a02      	ldr	r2, [sp, #8]
 800ffca:	fb92 f2f3 	sdiv	r2, r2, r3
 800ffce:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800ffd2:	1a9b      	subs	r3, r3, r2
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 800ffd4:	9a04      	ldr	r2, [sp, #16]
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 800ffd6:	b29b      	uxth	r3, r3
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 800ffd8:	3a01      	subs	r2, #1
                knob_area.y1 = area_indic.y1 - slider_w / 2;
 800ffda:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                knob_area.y2 = knob_area.y1 + slider_w - 1;
 800ffde:	4413      	add	r3, r2
 800ffe0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            knob_area.x1 = slider->coords.x1;
 800ffe4:	8a2b      	ldrh	r3, [r5, #16]
 800ffe6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            knob_area.x2 = slider->coords.x2;
 800ffea:	8aab      	ldrh	r3, [r5, #20]
 800ffec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fff0:	e74e      	b.n	800fe90 <lv_slider_design+0x29e>
                if(ext->bar.anim_state != LV_BAR_ANIM_STATE_INV) {
 800fff2:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
 800fff6:	1c4b      	adds	r3, r1, #1
 800fff8:	eba8 0204 	sub.w	r2, r8, r4
 800fffc:	d02a      	beq.n	8010054 <lv_slider_design+0x462>
                    lv_coord_t h = slider_h - slider_w - 1;
 800fffe:	9b05      	ldr	r3, [sp, #20]
 8010000:	9804      	ldr	r0, [sp, #16]
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8010002:	f9b6 8008 	ldrsh.w	r8, [r6, #8]
                    lv_coord_t h = slider_h - slider_w - 1;
 8010006:	3b01      	subs	r3, #1
 8010008:	1a1b      	subs	r3, r3, r0
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801000a:	f9b6 0006 	ldrsh.w	r0, [r6, #6]
 801000e:	b21b      	sxth	r3, r3
 8010010:	1b00      	subs	r0, r0, r4
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8010012:	eba8 0804 	sub.w	r8, r8, r4
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 8010016:	4358      	muls	r0, r3
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8010018:	fb03 f808 	mul.w	r8, r3, r8
                        (int32_t)((int32_t)h * (ext->bar.anim_start - min_value)) / (max_value - min_value);
 801001c:	fb90 f0f2 	sdiv	r0, r0, r2
                        (int32_t)((int32_t)h * (ext->bar.anim_end - min_value)) / (max_value - min_value);
 8010020:	fb98 f8f2 	sdiv	r8, r8, r2
                    knob_area.y2 = anim_start_x + (((anim_end_x - anim_start_x) * ext->bar.anim_state) >> 8);
 8010024:	b203      	sxth	r3, r0
 8010026:	fa0f f888 	sxth.w	r8, r8
 801002a:	eba8 0803 	sub.w	r8, r8, r3
 801002e:	fb01 f808 	mul.w	r8, r1, r8
 8010032:	eb00 2028 	add.w	r0, r0, r8, asr #8
 8010036:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 801003a:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801003e:	8aeb      	ldrh	r3, [r5, #22]
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	b29b      	uxth	r3, r3
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 8010044:	9a04      	ldr	r2, [sp, #16]
                knob_area.y2 = slider->coords.y2 - knob_area.y2;
 8010046:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                knob_area.y1 = knob_area.y2 - slider_w - 1;
 801004a:	3b01      	subs	r3, #1
 801004c:	1a9b      	subs	r3, r3, r2
 801004e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010052:	e7c7      	b.n	800ffe4 <lv_slider_design+0x3f2>
                    knob_area.y2 = (int32_t)((int32_t)(slider_h - slider_w - 1) * (cur_value - min_value)) /
 8010054:	9b03      	ldr	r3, [sp, #12]
 8010056:	9902      	ldr	r1, [sp, #8]
 8010058:	eba3 0801 	sub.w	r8, r3, r1
 801005c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010060:	1b3c      	subs	r4, r7, r4
 8010062:	fb04 f408 	mul.w	r4, r4, r8
 8010066:	fb94 f8f2 	sdiv	r8, r4, r2
 801006a:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
 801006e:	e7e4      	b.n	801003a <lv_slider_design+0x448>
        return false;
 8010070:	2000      	movs	r0, #0
}
 8010072:	b021      	add	sp, #132	; 0x84
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010078 <lv_slider_signal>:
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(slider, sign, param);
 8010078:	4b9a      	ldr	r3, [pc, #616]	; (80102e4 <lv_slider_signal+0x26c>)
{
 801007a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    res = ancestor_signal(slider, sign, param);
 801007e:	681b      	ldr	r3, [r3, #0]
{
 8010080:	4604      	mov	r4, r0
 8010082:	468a      	mov	sl, r1
 8010084:	4691      	mov	r9, r2
    res = ancestor_signal(slider, sign, param);
 8010086:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8010088:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 801008a:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801008c:	d112      	bne.n	80100b4 <lv_slider_signal+0x3c>

    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801008e:	4620      	mov	r0, r4
 8010090:	f7f7 fd5e 	bl	8007b50 <lv_obj_get_ext_attr>
 8010094:	4606      	mov	r6, r0
    lv_point_t p;
    lv_coord_t w = lv_obj_get_width(slider);
 8010096:	4620      	mov	r0, r4
 8010098:	f7f7 fc63 	bl	8007962 <lv_obj_get_width>
 801009c:	4680      	mov	r8, r0
    lv_coord_t h = lv_obj_get_height(slider);
 801009e:	4620      	mov	r0, r4
 80100a0:	f7f7 fc65 	bl	800796e <lv_obj_get_height>

    if(sign == LV_SIGNAL_PRESSED) {
 80100a4:	f1ba 0f07 	cmp.w	sl, #7
    lv_coord_t h = lv_obj_get_height(slider);
 80100a8:	4607      	mov	r7, r0
    if(sign == LV_SIGNAL_PRESSED) {
 80100aa:	d107      	bne.n	80100bc <lv_slider_signal+0x44>
        ext->drag_value = lv_slider_get_value(slider);
 80100ac:	4620      	mov	r0, r4
 80100ae:	f7ff fd7b 	bl	800fba8 <lv_slider_get_value>
 80100b2:	8330      	strh	r0, [r6, #24]
        }
        buf->type[i] = "lv_slider";
    }

    return res;
}
 80100b4:	4628      	mov	r0, r5
 80100b6:	b002      	add	sp, #8
 80100b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if(sign == LV_SIGNAL_PRESSING) {
 80100bc:	f1ba 0f08 	cmp.w	sl, #8
 80100c0:	d148      	bne.n	8010154 <lv_slider_signal+0xdc>
        lv_indev_get_point(param, &p);
 80100c2:	a901      	add	r1, sp, #4
 80100c4:	4648      	mov	r0, r9
 80100c6:	f7f6 fe68 	bl	8006d9a <lv_indev_get_point>
        if(w > h) {
 80100ca:	45b8      	cmp	r8, r7
 80100cc:	f04f 0e02 	mov.w	lr, #2
 80100d0:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 80100d4:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80100d8:	dd28      	ble.n	801012c <lv_slider_signal+0xb4>
                slider->coords.x1 + h / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 80100da:	fb97 fefe 	sdiv	lr, r7, lr
            p.x -=
 80100de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80100e2:	8a23      	ldrh	r3, [r4, #16]
 80100e4:	1ad2      	subs	r2, r2, r3
 80100e6:	eba2 020e 	sub.w	r2, r2, lr
 80100ea:	b212      	sxth	r2, r2
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80100ec:	1a43      	subs	r3, r0, r1
            p.x -=
 80100ee:	f8ad 2004 	strh.w	r2, [sp, #4]
            tmp = (int32_t)((int32_t)p.x * (ext->bar.max_value - ext->bar.min_value + 1)) / (w - knob_w);
 80100f2:	fb03 2202 	mla	r2, r3, r2, r2
 80100f6:	eba8 0307 	sub.w	r3, r8, r7
 80100fa:	fb92 f3f3 	sdiv	r3, r2, r3
            tmp += ext->bar.min_value;
 80100fe:	440b      	add	r3, r1
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 8010100:	b21b      	sxth	r3, r3
        if(tmp < ext->bar.min_value)
 8010102:	428b      	cmp	r3, r1
 8010104:	db03      	blt.n	801010e <lv_slider_signal+0x96>
 8010106:	4298      	cmp	r0, r3
 8010108:	4601      	mov	r1, r0
 801010a:	bfa8      	it	ge
 801010c:	4619      	movge	r1, r3
        if(tmp != ext->drag_value) {
 801010e:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8010112:	428b      	cmp	r3, r1
 8010114:	d0ce      	beq.n	80100b4 <lv_slider_signal+0x3c>
            ext->drag_value = tmp;
 8010116:	8331      	strh	r1, [r6, #24]
            lv_obj_invalidate(slider);
 8010118:	4620      	mov	r0, r4
 801011a:	f7f6 ff43 	bl	8006fa4 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 801011e:	2200      	movs	r2, #0
 8010120:	210e      	movs	r1, #14
 8010122:	4620      	mov	r0, r4
 8010124:	f7f6 ff04 	bl	8006f30 <lv_event_send>
 8010128:	4605      	mov	r5, r0
 801012a:	e7c3      	b.n	80100b4 <lv_slider_signal+0x3c>
            p.y -=
 801012c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010130:	8a62      	ldrh	r2, [r4, #18]
                slider->coords.y1 + w / 2; /*Modify the point to shift with half knob (important on the start and end)*/
 8010132:	fb98 fefe 	sdiv	lr, r8, lr
            p.y -=
 8010136:	1a9b      	subs	r3, r3, r2
 8010138:	eba3 030e 	sub.w	r3, r3, lr
 801013c:	b21b      	sxth	r3, r3
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 801013e:	1a42      	subs	r2, r0, r1
            p.y -=
 8010140:	f8ad 3006 	strh.w	r3, [sp, #6]
            tmp = (int32_t)((int32_t)p.y * (ext->bar.max_value - ext->bar.min_value + 1)) / (h - knob_h);
 8010144:	eba7 0708 	sub.w	r7, r7, r8
 8010148:	fb02 3303 	mla	r3, r2, r3, r3
 801014c:	fb93 f3f7 	sdiv	r3, r3, r7
            tmp = ext->bar.max_value - tmp; /*Invert the value: smaller value means higher y*/
 8010150:	1ac3      	subs	r3, r0, r3
 8010152:	e7d5      	b.n	8010100 <lv_slider_signal+0x88>
    } else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8010154:	f1aa 0309 	sub.w	r3, sl, #9
 8010158:	2b01      	cmp	r3, #1
 801015a:	d81f      	bhi.n	801019c <lv_slider_signal+0x124>
        if(ext->drag_value != LV_SLIDER_NOT_PRESSED) lv_slider_set_value(slider, ext->drag_value, false);
 801015c:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8010160:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8010164:	d003      	beq.n	801016e <lv_slider_signal+0xf6>
    lv_bar_set_value(slider, value, anim);
 8010166:	2200      	movs	r2, #0
 8010168:	4620      	mov	r0, r4
 801016a:	f7fd fad1 	bl	800d710 <lv_bar_set_value>
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 801016e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010172:	8333      	strh	r3, [r6, #24]
        lv_group_t * g             = lv_obj_get_group(slider);
 8010174:	4620      	mov	r0, r4
 8010176:	f7f7 fced 	bl	8007b54 <lv_obj_get_group>
 801017a:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 801017c:	f7f5 fee4 	bl	8005f48 <lv_group_get_editing>
 8010180:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8010182:	f7f6 fe01 	bl	8006d88 <lv_indev_get_act>
 8010186:	f7f6 fe05 	bl	8006d94 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801018a:	2804      	cmp	r0, #4
 801018c:	d192      	bne.n	80100b4 <lv_slider_signal+0x3c>
            if(editing) lv_group_set_editing(g, false);
 801018e:	2e00      	cmp	r6, #0
 8010190:	d090      	beq.n	80100b4 <lv_slider_signal+0x3c>
 8010192:	2100      	movs	r1, #0
 8010194:	4620      	mov	r0, r4
 8010196:	f7f5 fe6b 	bl	8005e70 <lv_group_set_editing>
 801019a:	e78b      	b.n	80100b4 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 801019c:	f1ba 0f02 	cmp.w	sl, #2
 80101a0:	d11e      	bne.n	80101e0 <lv_slider_signal+0x168>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 80101a2:	4620      	mov	r0, r4
 80101a4:	f7f7 fbdd 	bl	8007962 <lv_obj_get_width>
    return area_p->x2 - area_p->x1 + 1;
 80101a8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80101ac:	f8b9 2000 	ldrh.w	r2, [r9]
 80101b0:	3301      	adds	r3, #1
 80101b2:	1a9b      	subs	r3, r3, r2
 80101b4:	b21b      	sxth	r3, r3
 80101b6:	4298      	cmp	r0, r3
 80101b8:	d005      	beq.n	80101c6 <lv_slider_signal+0x14e>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80101ba:	69e3      	ldr	r3, [r4, #28]
 80101bc:	2200      	movs	r2, #0
 80101be:	2105      	movs	r1, #5
 80101c0:	4620      	mov	r0, r4
 80101c2:	4798      	blx	r3
 80101c4:	e776      	b.n	80100b4 <lv_slider_signal+0x3c>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 80101c6:	4620      	mov	r0, r4
 80101c8:	f7f7 fbd1 	bl	800796e <lv_obj_get_height>
    return area_p->y2 - area_p->y1 + 1;
 80101cc:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80101d0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80101d4:	3301      	adds	r3, #1
 80101d6:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 80101d8:	b21b      	sxth	r3, r3
 80101da:	4298      	cmp	r0, r3
 80101dc:	d1ed      	bne.n	80101ba <lv_slider_signal+0x142>
 80101de:	e769      	b.n	80100b4 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80101e0:	f1ba 0f05 	cmp.w	sl, #5
 80101e4:	d147      	bne.n	8010276 <lv_slider_signal+0x1fe>
        const lv_style_t * style      = lv_slider_get_style(slider, LV_SLIDER_STYLE_BG);
 80101e6:	2100      	movs	r1, #0
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff fcec 	bl	800fbc6 <lv_slider_get_style>
 80101ee:	4681      	mov	r9, r0
    lv_slider_ext_t * ext    = lv_obj_get_ext_attr(slider);
 80101f0:	4620      	mov	r0, r4
 80101f2:	f7f7 fcad 	bl	8007b50 <lv_obj_get_ext_attr>
        lv_coord_t shadow_w = knob_style->body.shadow.width;
 80101f6:	6943      	ldr	r3, [r0, #20]
 80101f8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80101fc:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
        if(ext->knob_in == 0) {
 8010200:	7eb3      	ldrb	r3, [r6, #26]
 8010202:	f013 0f01 	tst.w	r3, #1
 8010206:	d115      	bne.n	8010234 <lv_slider_signal+0x1bc>
            lv_coord_t x = LV_MATH_MIN(w / 2 + 1 + shadow_w, h / 2 + 1 + shadow_w);
 8010208:	2202      	movs	r2, #2
 801020a:	fb97 f3f2 	sdiv	r3, r7, r2
 801020e:	fb98 f8f2 	sdiv	r8, r8, r2
 8010212:	b21b      	sxth	r3, r3
 8010214:	fa0f f888 	sxth.w	r8, r8
 8010218:	3301      	adds	r3, #1
 801021a:	f108 0801 	add.w	r8, r8, #1
 801021e:	4403      	add	r3, r0
 8010220:	4440      	add	r0, r8
 8010222:	4283      	cmp	r3, r0
 8010224:	bfa8      	it	ge
 8010226:	4603      	movge	r3, r0
 8010228:	b21b      	sxth	r3, r3
            if(slider->ext_draw_pad < x) slider->ext_draw_pad = x;
 801022a:	4299      	cmp	r1, r3
 801022c:	f6bf af42 	bge.w	80100b4 <lv_slider_signal+0x3c>
 8010230:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010232:	e73f      	b.n	80100b4 <lv_slider_signal+0x3c>
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 8010234:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
 8010238:	f9b9 3022 	ldrsh.w	r3, [r9, #34]	; 0x22
 801023c:	429a      	cmp	r2, r3
 801023e:	bfa8      	it	ge
 8010240:	461a      	movge	r2, r3
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 8010242:	f9b9 3024 	ldrsh.w	r3, [r9, #36]	; 0x24
            pad            = LV_MATH_MIN(pad, style->body.padding.bottom);
 8010246:	ea02 72e2 	and.w	r2, r2, r2, asr #31
            pad            = LV_MATH_MIN(pad, style->body.padding.left);
 801024a:	4293      	cmp	r3, r2
 801024c:	bfa8      	it	ge
 801024e:	4613      	movge	r3, r2
            pad            = LV_MATH_MIN(pad, style->body.padding.right);
 8010250:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
 8010254:	429a      	cmp	r2, r3
 8010256:	bfa8      	it	ge
 8010258:	461a      	movge	r2, r3
            if(pad < 0) pad = -pad;
 801025a:	b10a      	cbz	r2, 8010260 <lv_slider_signal+0x1e8>
 801025c:	4252      	negs	r2, r2
 801025e:	b292      	uxth	r2, r2
 8010260:	b212      	sxth	r2, r2
            if(slider->ext_draw_pad < pad) slider->ext_draw_pad = pad;
 8010262:	4291      	cmp	r1, r2
 8010264:	bfb8      	it	lt
 8010266:	86a2      	strhlt	r2, [r4, #52]	; 0x34
            if(slider->ext_draw_pad < shadow_w) slider->ext_draw_pad = shadow_w;
 8010268:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 801026c:	4283      	cmp	r3, r0
 801026e:	f6bf af21 	bge.w	80100b4 <lv_slider_signal+0x3c>
 8010272:	86a0      	strh	r0, [r4, #52]	; 0x34
 8010274:	e71e      	b.n	80100b4 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8010276:	f1ba 0f11 	cmp.w	sl, #17
 801027a:	d11c      	bne.n	80102b6 <lv_slider_signal+0x23e>
        char c = *((char *)param);
 801027c:	f899 3000 	ldrb.w	r3, [r9]
        ext->drag_value = LV_SLIDER_NOT_PRESSED;
 8010280:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010284:	8332      	strh	r2, [r6, #24]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8010286:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801028a:	2a11      	cmp	r2, #17
 801028c:	d109      	bne.n	80102a2 <lv_slider_signal+0x22a>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, true);
 801028e:	4620      	mov	r0, r4
 8010290:	f7ff fc8a 	bl	800fba8 <lv_slider_get_value>
 8010294:	1c41      	adds	r1, r0, #1
 8010296:	2201      	movs	r2, #1
 8010298:	b209      	sxth	r1, r1
 801029a:	4620      	mov	r0, r4
 801029c:	f7fd fa38 	bl	800d710 <lv_bar_set_value>
 80102a0:	e73d      	b.n	801011e <lv_slider_signal+0xa6>
        } else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80102a2:	2b14      	cmp	r3, #20
 80102a4:	d002      	beq.n	80102ac <lv_slider_signal+0x234>
 80102a6:	2b12      	cmp	r3, #18
 80102a8:	f47f af04 	bne.w	80100b4 <lv_slider_signal+0x3c>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, true);
 80102ac:	4620      	mov	r0, r4
 80102ae:	f7ff fc7b 	bl	800fba8 <lv_slider_get_value>
 80102b2:	1e41      	subs	r1, r0, #1
 80102b4:	e7ef      	b.n	8010296 <lv_slider_signal+0x21e>
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 80102b6:	f1ba 0f12 	cmp.w	sl, #18
 80102ba:	d102      	bne.n	80102c2 <lv_slider_signal+0x24a>
        *editable       = true;
 80102bc:	f889 5000 	strb.w	r5, [r9]
 80102c0:	e6f8      	b.n	80100b4 <lv_slider_signal+0x3c>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80102c2:	f1ba 0f06 	cmp.w	sl, #6
 80102c6:	f47f aef5 	bne.w	80100b4 <lv_slider_signal+0x3c>
 80102ca:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 80102cc:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	b119      	cbz	r1, 80102dc <lv_slider_signal+0x264>
 80102d4:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80102d6:	2b07      	cmp	r3, #7
 80102d8:	d1f8      	bne.n	80102cc <lv_slider_signal+0x254>
 80102da:	461a      	mov	r2, r3
        buf->type[i] = "lv_slider";
 80102dc:	4b02      	ldr	r3, [pc, #8]	; (80102e8 <lv_slider_signal+0x270>)
 80102de:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
 80102e2:	e6e7      	b.n	80100b4 <lv_slider_signal+0x3c>
 80102e4:	20015180 	.word	0x20015180
 80102e8:	080faef5 	.word	0x080faef5

080102ec <lv_theme_get_current>:
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 80102ec:	4b01      	ldr	r3, [pc, #4]	; (80102f4 <lv_theme_get_current+0x8>)
 80102ee:	6818      	ldr	r0, [r3, #0]
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	20015184 	.word	0x20015184

080102f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80102f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80102fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80102fe:	e003      	b.n	8010308 <LoopCopyDataInit>

08010300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010300:	4b0c      	ldr	r3, [pc, #48]	; (8010334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010306:	3104      	adds	r1, #4

08010308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010308:	480b      	ldr	r0, [pc, #44]	; (8010338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801030a:	4b0c      	ldr	r3, [pc, #48]	; (801033c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801030c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801030e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010310:	d3f6      	bcc.n	8010300 <CopyDataInit>
  ldr  r2, =_sbss
 8010312:	4a0b      	ldr	r2, [pc, #44]	; (8010340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010314:	e002      	b.n	801031c <LoopFillZerobss>

08010316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010318:	f842 3b04 	str.w	r3, [r2], #4

0801031c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801031c:	4b09      	ldr	r3, [pc, #36]	; (8010344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801031e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010320:	d3f9      	bcc.n	8010316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010322:	f7f1 f9b9 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010326:	f000 f817 	bl	8010358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801032a:	f7f0 fe2b 	bl	8000f84 <main>
  bx  lr    
 801032e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010330:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010334:	080fb1fc 	.word	0x080fb1fc
  ldr  r0, =_sdata
 8010338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801033c:	200007a8 	.word	0x200007a8
  ldr  r2, =_sbss
 8010340:	200007a8 	.word	0x200007a8
  ldr  r3, = _ebss
 8010344:	20015ecc 	.word	0x20015ecc

08010348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010348:	e7fe      	b.n	8010348 <ADC_IRQHandler>
	...

0801034c <__errno>:
 801034c:	4b01      	ldr	r3, [pc, #4]	; (8010354 <__errno+0x8>)
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	20000138 	.word	0x20000138

08010358 <__libc_init_array>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	4e0d      	ldr	r6, [pc, #52]	; (8010390 <__libc_init_array+0x38>)
 801035c:	4c0d      	ldr	r4, [pc, #52]	; (8010394 <__libc_init_array+0x3c>)
 801035e:	1ba4      	subs	r4, r4, r6
 8010360:	10a4      	asrs	r4, r4, #2
 8010362:	2500      	movs	r5, #0
 8010364:	42a5      	cmp	r5, r4
 8010366:	d109      	bne.n	801037c <__libc_init_array+0x24>
 8010368:	4e0b      	ldr	r6, [pc, #44]	; (8010398 <__libc_init_array+0x40>)
 801036a:	4c0c      	ldr	r4, [pc, #48]	; (801039c <__libc_init_array+0x44>)
 801036c:	f004 fde4 	bl	8014f38 <_init>
 8010370:	1ba4      	subs	r4, r4, r6
 8010372:	10a4      	asrs	r4, r4, #2
 8010374:	2500      	movs	r5, #0
 8010376:	42a5      	cmp	r5, r4
 8010378:	d105      	bne.n	8010386 <__libc_init_array+0x2e>
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010380:	4798      	blx	r3
 8010382:	3501      	adds	r5, #1
 8010384:	e7ee      	b.n	8010364 <__libc_init_array+0xc>
 8010386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801038a:	4798      	blx	r3
 801038c:	3501      	adds	r5, #1
 801038e:	e7f2      	b.n	8010376 <__libc_init_array+0x1e>
 8010390:	080fb1f4 	.word	0x080fb1f4
 8010394:	080fb1f4 	.word	0x080fb1f4
 8010398:	080fb1f4 	.word	0x080fb1f4
 801039c:	080fb1f8 	.word	0x080fb1f8

080103a0 <malloc>:
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <malloc+0xc>)
 80103a2:	4601      	mov	r1, r0
 80103a4:	6818      	ldr	r0, [r3, #0]
 80103a6:	f000 b80b 	b.w	80103c0 <_malloc_r>
 80103aa:	bf00      	nop
 80103ac:	20000138 	.word	0x20000138

080103b0 <free>:
 80103b0:	4b02      	ldr	r3, [pc, #8]	; (80103bc <free+0xc>)
 80103b2:	4601      	mov	r1, r0
 80103b4:	6818      	ldr	r0, [r3, #0]
 80103b6:	f003 bb9d 	b.w	8013af4 <_free_r>
 80103ba:	bf00      	nop
 80103bc:	20000138 	.word	0x20000138

080103c0 <_malloc_r>:
 80103c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	f101 040b 	add.w	r4, r1, #11
 80103c8:	2c16      	cmp	r4, #22
 80103ca:	4681      	mov	r9, r0
 80103cc:	d907      	bls.n	80103de <_malloc_r+0x1e>
 80103ce:	f034 0407 	bics.w	r4, r4, #7
 80103d2:	d505      	bpl.n	80103e0 <_malloc_r+0x20>
 80103d4:	230c      	movs	r3, #12
 80103d6:	f8c9 3000 	str.w	r3, [r9]
 80103da:	2600      	movs	r6, #0
 80103dc:	e131      	b.n	8010642 <_malloc_r+0x282>
 80103de:	2410      	movs	r4, #16
 80103e0:	428c      	cmp	r4, r1
 80103e2:	d3f7      	bcc.n	80103d4 <_malloc_r+0x14>
 80103e4:	4648      	mov	r0, r9
 80103e6:	f000 fa0d 	bl	8010804 <__malloc_lock>
 80103ea:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80103ee:	4d9c      	ldr	r5, [pc, #624]	; (8010660 <_malloc_r+0x2a0>)
 80103f0:	d236      	bcs.n	8010460 <_malloc_r+0xa0>
 80103f2:	f104 0208 	add.w	r2, r4, #8
 80103f6:	442a      	add	r2, r5
 80103f8:	f1a2 0108 	sub.w	r1, r2, #8
 80103fc:	6856      	ldr	r6, [r2, #4]
 80103fe:	428e      	cmp	r6, r1
 8010400:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8010404:	d102      	bne.n	801040c <_malloc_r+0x4c>
 8010406:	68d6      	ldr	r6, [r2, #12]
 8010408:	42b2      	cmp	r2, r6
 801040a:	d010      	beq.n	801042e <_malloc_r+0x6e>
 801040c:	6873      	ldr	r3, [r6, #4]
 801040e:	68f2      	ldr	r2, [r6, #12]
 8010410:	68b1      	ldr	r1, [r6, #8]
 8010412:	f023 0303 	bic.w	r3, r3, #3
 8010416:	60ca      	str	r2, [r1, #12]
 8010418:	4433      	add	r3, r6
 801041a:	6091      	str	r1, [r2, #8]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	f042 0201 	orr.w	r2, r2, #1
 8010422:	605a      	str	r2, [r3, #4]
 8010424:	4648      	mov	r0, r9
 8010426:	f000 f9f3 	bl	8010810 <__malloc_unlock>
 801042a:	3608      	adds	r6, #8
 801042c:	e109      	b.n	8010642 <_malloc_r+0x282>
 801042e:	3302      	adds	r3, #2
 8010430:	4a8c      	ldr	r2, [pc, #560]	; (8010664 <_malloc_r+0x2a4>)
 8010432:	692e      	ldr	r6, [r5, #16]
 8010434:	4296      	cmp	r6, r2
 8010436:	4611      	mov	r1, r2
 8010438:	d06d      	beq.n	8010516 <_malloc_r+0x156>
 801043a:	6870      	ldr	r0, [r6, #4]
 801043c:	f020 0003 	bic.w	r0, r0, #3
 8010440:	1b07      	subs	r7, r0, r4
 8010442:	2f0f      	cmp	r7, #15
 8010444:	dd47      	ble.n	80104d6 <_malloc_r+0x116>
 8010446:	1933      	adds	r3, r6, r4
 8010448:	f044 0401 	orr.w	r4, r4, #1
 801044c:	6074      	str	r4, [r6, #4]
 801044e:	616b      	str	r3, [r5, #20]
 8010450:	612b      	str	r3, [r5, #16]
 8010452:	60da      	str	r2, [r3, #12]
 8010454:	609a      	str	r2, [r3, #8]
 8010456:	f047 0201 	orr.w	r2, r7, #1
 801045a:	605a      	str	r2, [r3, #4]
 801045c:	5037      	str	r7, [r6, r0]
 801045e:	e7e1      	b.n	8010424 <_malloc_r+0x64>
 8010460:	0a63      	lsrs	r3, r4, #9
 8010462:	d02a      	beq.n	80104ba <_malloc_r+0xfa>
 8010464:	2b04      	cmp	r3, #4
 8010466:	d812      	bhi.n	801048e <_malloc_r+0xce>
 8010468:	09a3      	lsrs	r3, r4, #6
 801046a:	3338      	adds	r3, #56	; 0x38
 801046c:	1c5a      	adds	r2, r3, #1
 801046e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010472:	f1a2 0008 	sub.w	r0, r2, #8
 8010476:	6856      	ldr	r6, [r2, #4]
 8010478:	4286      	cmp	r6, r0
 801047a:	d006      	beq.n	801048a <_malloc_r+0xca>
 801047c:	6872      	ldr	r2, [r6, #4]
 801047e:	f022 0203 	bic.w	r2, r2, #3
 8010482:	1b11      	subs	r1, r2, r4
 8010484:	290f      	cmp	r1, #15
 8010486:	dd1c      	ble.n	80104c2 <_malloc_r+0x102>
 8010488:	3b01      	subs	r3, #1
 801048a:	3301      	adds	r3, #1
 801048c:	e7d0      	b.n	8010430 <_malloc_r+0x70>
 801048e:	2b14      	cmp	r3, #20
 8010490:	d801      	bhi.n	8010496 <_malloc_r+0xd6>
 8010492:	335b      	adds	r3, #91	; 0x5b
 8010494:	e7ea      	b.n	801046c <_malloc_r+0xac>
 8010496:	2b54      	cmp	r3, #84	; 0x54
 8010498:	d802      	bhi.n	80104a0 <_malloc_r+0xe0>
 801049a:	0b23      	lsrs	r3, r4, #12
 801049c:	336e      	adds	r3, #110	; 0x6e
 801049e:	e7e5      	b.n	801046c <_malloc_r+0xac>
 80104a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80104a4:	d802      	bhi.n	80104ac <_malloc_r+0xec>
 80104a6:	0be3      	lsrs	r3, r4, #15
 80104a8:	3377      	adds	r3, #119	; 0x77
 80104aa:	e7df      	b.n	801046c <_malloc_r+0xac>
 80104ac:	f240 5254 	movw	r2, #1364	; 0x554
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d804      	bhi.n	80104be <_malloc_r+0xfe>
 80104b4:	0ca3      	lsrs	r3, r4, #18
 80104b6:	337c      	adds	r3, #124	; 0x7c
 80104b8:	e7d8      	b.n	801046c <_malloc_r+0xac>
 80104ba:	233f      	movs	r3, #63	; 0x3f
 80104bc:	e7d6      	b.n	801046c <_malloc_r+0xac>
 80104be:	237e      	movs	r3, #126	; 0x7e
 80104c0:	e7d4      	b.n	801046c <_malloc_r+0xac>
 80104c2:	2900      	cmp	r1, #0
 80104c4:	68f1      	ldr	r1, [r6, #12]
 80104c6:	db04      	blt.n	80104d2 <_malloc_r+0x112>
 80104c8:	68b3      	ldr	r3, [r6, #8]
 80104ca:	60d9      	str	r1, [r3, #12]
 80104cc:	608b      	str	r3, [r1, #8]
 80104ce:	18b3      	adds	r3, r6, r2
 80104d0:	e7a4      	b.n	801041c <_malloc_r+0x5c>
 80104d2:	460e      	mov	r6, r1
 80104d4:	e7d0      	b.n	8010478 <_malloc_r+0xb8>
 80104d6:	2f00      	cmp	r7, #0
 80104d8:	616a      	str	r2, [r5, #20]
 80104da:	612a      	str	r2, [r5, #16]
 80104dc:	db05      	blt.n	80104ea <_malloc_r+0x12a>
 80104de:	4430      	add	r0, r6
 80104e0:	6843      	ldr	r3, [r0, #4]
 80104e2:	f043 0301 	orr.w	r3, r3, #1
 80104e6:	6043      	str	r3, [r0, #4]
 80104e8:	e79c      	b.n	8010424 <_malloc_r+0x64>
 80104ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80104ee:	d244      	bcs.n	801057a <_malloc_r+0x1ba>
 80104f0:	08c0      	lsrs	r0, r0, #3
 80104f2:	1087      	asrs	r7, r0, #2
 80104f4:	2201      	movs	r2, #1
 80104f6:	fa02 f707 	lsl.w	r7, r2, r7
 80104fa:	686a      	ldr	r2, [r5, #4]
 80104fc:	3001      	adds	r0, #1
 80104fe:	433a      	orrs	r2, r7
 8010500:	606a      	str	r2, [r5, #4]
 8010502:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8010506:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 801050a:	60b7      	str	r7, [r6, #8]
 801050c:	3a08      	subs	r2, #8
 801050e:	60f2      	str	r2, [r6, #12]
 8010510:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8010514:	60fe      	str	r6, [r7, #12]
 8010516:	2001      	movs	r0, #1
 8010518:	109a      	asrs	r2, r3, #2
 801051a:	fa00 f202 	lsl.w	r2, r0, r2
 801051e:	6868      	ldr	r0, [r5, #4]
 8010520:	4282      	cmp	r2, r0
 8010522:	f200 80a1 	bhi.w	8010668 <_malloc_r+0x2a8>
 8010526:	4202      	tst	r2, r0
 8010528:	d106      	bne.n	8010538 <_malloc_r+0x178>
 801052a:	f023 0303 	bic.w	r3, r3, #3
 801052e:	0052      	lsls	r2, r2, #1
 8010530:	4202      	tst	r2, r0
 8010532:	f103 0304 	add.w	r3, r3, #4
 8010536:	d0fa      	beq.n	801052e <_malloc_r+0x16e>
 8010538:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 801053c:	46e0      	mov	r8, ip
 801053e:	469e      	mov	lr, r3
 8010540:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010544:	4546      	cmp	r6, r8
 8010546:	d153      	bne.n	80105f0 <_malloc_r+0x230>
 8010548:	f10e 0e01 	add.w	lr, lr, #1
 801054c:	f01e 0f03 	tst.w	lr, #3
 8010550:	f108 0808 	add.w	r8, r8, #8
 8010554:	d1f4      	bne.n	8010540 <_malloc_r+0x180>
 8010556:	0798      	lsls	r0, r3, #30
 8010558:	d179      	bne.n	801064e <_malloc_r+0x28e>
 801055a:	686b      	ldr	r3, [r5, #4]
 801055c:	ea23 0302 	bic.w	r3, r3, r2
 8010560:	606b      	str	r3, [r5, #4]
 8010562:	6868      	ldr	r0, [r5, #4]
 8010564:	0052      	lsls	r2, r2, #1
 8010566:	4282      	cmp	r2, r0
 8010568:	d87e      	bhi.n	8010668 <_malloc_r+0x2a8>
 801056a:	2a00      	cmp	r2, #0
 801056c:	d07c      	beq.n	8010668 <_malloc_r+0x2a8>
 801056e:	4673      	mov	r3, lr
 8010570:	4202      	tst	r2, r0
 8010572:	d1e1      	bne.n	8010538 <_malloc_r+0x178>
 8010574:	3304      	adds	r3, #4
 8010576:	0052      	lsls	r2, r2, #1
 8010578:	e7fa      	b.n	8010570 <_malloc_r+0x1b0>
 801057a:	0a42      	lsrs	r2, r0, #9
 801057c:	2a04      	cmp	r2, #4
 801057e:	d815      	bhi.n	80105ac <_malloc_r+0x1ec>
 8010580:	0982      	lsrs	r2, r0, #6
 8010582:	3238      	adds	r2, #56	; 0x38
 8010584:	1c57      	adds	r7, r2, #1
 8010586:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 801058a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801058e:	45be      	cmp	lr, r7
 8010590:	d126      	bne.n	80105e0 <_malloc_r+0x220>
 8010592:	2001      	movs	r0, #1
 8010594:	1092      	asrs	r2, r2, #2
 8010596:	fa00 f202 	lsl.w	r2, r0, r2
 801059a:	6868      	ldr	r0, [r5, #4]
 801059c:	4310      	orrs	r0, r2
 801059e:	6068      	str	r0, [r5, #4]
 80105a0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80105a4:	60b7      	str	r7, [r6, #8]
 80105a6:	f8ce 6008 	str.w	r6, [lr, #8]
 80105aa:	e7b3      	b.n	8010514 <_malloc_r+0x154>
 80105ac:	2a14      	cmp	r2, #20
 80105ae:	d801      	bhi.n	80105b4 <_malloc_r+0x1f4>
 80105b0:	325b      	adds	r2, #91	; 0x5b
 80105b2:	e7e7      	b.n	8010584 <_malloc_r+0x1c4>
 80105b4:	2a54      	cmp	r2, #84	; 0x54
 80105b6:	d802      	bhi.n	80105be <_malloc_r+0x1fe>
 80105b8:	0b02      	lsrs	r2, r0, #12
 80105ba:	326e      	adds	r2, #110	; 0x6e
 80105bc:	e7e2      	b.n	8010584 <_malloc_r+0x1c4>
 80105be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80105c2:	d802      	bhi.n	80105ca <_malloc_r+0x20a>
 80105c4:	0bc2      	lsrs	r2, r0, #15
 80105c6:	3277      	adds	r2, #119	; 0x77
 80105c8:	e7dc      	b.n	8010584 <_malloc_r+0x1c4>
 80105ca:	f240 5754 	movw	r7, #1364	; 0x554
 80105ce:	42ba      	cmp	r2, r7
 80105d0:	bf9a      	itte	ls
 80105d2:	0c82      	lsrls	r2, r0, #18
 80105d4:	327c      	addls	r2, #124	; 0x7c
 80105d6:	227e      	movhi	r2, #126	; 0x7e
 80105d8:	e7d4      	b.n	8010584 <_malloc_r+0x1c4>
 80105da:	68bf      	ldr	r7, [r7, #8]
 80105dc:	45be      	cmp	lr, r7
 80105de:	d004      	beq.n	80105ea <_malloc_r+0x22a>
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	f022 0203 	bic.w	r2, r2, #3
 80105e6:	4290      	cmp	r0, r2
 80105e8:	d3f7      	bcc.n	80105da <_malloc_r+0x21a>
 80105ea:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80105ee:	e7d7      	b.n	80105a0 <_malloc_r+0x1e0>
 80105f0:	6870      	ldr	r0, [r6, #4]
 80105f2:	68f7      	ldr	r7, [r6, #12]
 80105f4:	f020 0003 	bic.w	r0, r0, #3
 80105f8:	eba0 0a04 	sub.w	sl, r0, r4
 80105fc:	f1ba 0f0f 	cmp.w	sl, #15
 8010600:	dd10      	ble.n	8010624 <_malloc_r+0x264>
 8010602:	68b2      	ldr	r2, [r6, #8]
 8010604:	1933      	adds	r3, r6, r4
 8010606:	f044 0401 	orr.w	r4, r4, #1
 801060a:	6074      	str	r4, [r6, #4]
 801060c:	60d7      	str	r7, [r2, #12]
 801060e:	60ba      	str	r2, [r7, #8]
 8010610:	f04a 0201 	orr.w	r2, sl, #1
 8010614:	616b      	str	r3, [r5, #20]
 8010616:	612b      	str	r3, [r5, #16]
 8010618:	60d9      	str	r1, [r3, #12]
 801061a:	6099      	str	r1, [r3, #8]
 801061c:	605a      	str	r2, [r3, #4]
 801061e:	f846 a000 	str.w	sl, [r6, r0]
 8010622:	e6ff      	b.n	8010424 <_malloc_r+0x64>
 8010624:	f1ba 0f00 	cmp.w	sl, #0
 8010628:	db0f      	blt.n	801064a <_malloc_r+0x28a>
 801062a:	4430      	add	r0, r6
 801062c:	6843      	ldr	r3, [r0, #4]
 801062e:	f043 0301 	orr.w	r3, r3, #1
 8010632:	6043      	str	r3, [r0, #4]
 8010634:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8010638:	4648      	mov	r0, r9
 801063a:	60df      	str	r7, [r3, #12]
 801063c:	60bb      	str	r3, [r7, #8]
 801063e:	f000 f8e7 	bl	8010810 <__malloc_unlock>
 8010642:	4630      	mov	r0, r6
 8010644:	b003      	add	sp, #12
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	463e      	mov	r6, r7
 801064c:	e77a      	b.n	8010544 <_malloc_r+0x184>
 801064e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8010652:	4584      	cmp	ip, r0
 8010654:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010658:	f43f af7d 	beq.w	8010556 <_malloc_r+0x196>
 801065c:	e781      	b.n	8010562 <_malloc_r+0x1a2>
 801065e:	bf00      	nop
 8010660:	2000022c 	.word	0x2000022c
 8010664:	20000234 	.word	0x20000234
 8010668:	f8d5 b008 	ldr.w	fp, [r5, #8]
 801066c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8010670:	f026 0603 	bic.w	r6, r6, #3
 8010674:	42b4      	cmp	r4, r6
 8010676:	d803      	bhi.n	8010680 <_malloc_r+0x2c0>
 8010678:	1b33      	subs	r3, r6, r4
 801067a:	2b0f      	cmp	r3, #15
 801067c:	f300 8096 	bgt.w	80107ac <_malloc_r+0x3ec>
 8010680:	4a4f      	ldr	r2, [pc, #316]	; (80107c0 <_malloc_r+0x400>)
 8010682:	6817      	ldr	r7, [r2, #0]
 8010684:	4a4f      	ldr	r2, [pc, #316]	; (80107c4 <_malloc_r+0x404>)
 8010686:	6811      	ldr	r1, [r2, #0]
 8010688:	3710      	adds	r7, #16
 801068a:	3101      	adds	r1, #1
 801068c:	eb0b 0306 	add.w	r3, fp, r6
 8010690:	4427      	add	r7, r4
 8010692:	d005      	beq.n	80106a0 <_malloc_r+0x2e0>
 8010694:	494c      	ldr	r1, [pc, #304]	; (80107c8 <_malloc_r+0x408>)
 8010696:	3901      	subs	r1, #1
 8010698:	440f      	add	r7, r1
 801069a:	3101      	adds	r1, #1
 801069c:	4249      	negs	r1, r1
 801069e:	400f      	ands	r7, r1
 80106a0:	4639      	mov	r1, r7
 80106a2:	4648      	mov	r0, r9
 80106a4:	9201      	str	r2, [sp, #4]
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	f000 f8d0 	bl	801084c <_sbrk_r>
 80106ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80106b0:	4680      	mov	r8, r0
 80106b2:	d056      	beq.n	8010762 <_malloc_r+0x3a2>
 80106b4:	9b00      	ldr	r3, [sp, #0]
 80106b6:	9a01      	ldr	r2, [sp, #4]
 80106b8:	4283      	cmp	r3, r0
 80106ba:	d901      	bls.n	80106c0 <_malloc_r+0x300>
 80106bc:	45ab      	cmp	fp, r5
 80106be:	d150      	bne.n	8010762 <_malloc_r+0x3a2>
 80106c0:	4842      	ldr	r0, [pc, #264]	; (80107cc <_malloc_r+0x40c>)
 80106c2:	6801      	ldr	r1, [r0, #0]
 80106c4:	4543      	cmp	r3, r8
 80106c6:	eb07 0e01 	add.w	lr, r7, r1
 80106ca:	f8c0 e000 	str.w	lr, [r0]
 80106ce:	4940      	ldr	r1, [pc, #256]	; (80107d0 <_malloc_r+0x410>)
 80106d0:	4682      	mov	sl, r0
 80106d2:	d113      	bne.n	80106fc <_malloc_r+0x33c>
 80106d4:	420b      	tst	r3, r1
 80106d6:	d111      	bne.n	80106fc <_malloc_r+0x33c>
 80106d8:	68ab      	ldr	r3, [r5, #8]
 80106da:	443e      	add	r6, r7
 80106dc:	f046 0601 	orr.w	r6, r6, #1
 80106e0:	605e      	str	r6, [r3, #4]
 80106e2:	4a3c      	ldr	r2, [pc, #240]	; (80107d4 <_malloc_r+0x414>)
 80106e4:	f8da 3000 	ldr.w	r3, [sl]
 80106e8:	6811      	ldr	r1, [r2, #0]
 80106ea:	428b      	cmp	r3, r1
 80106ec:	bf88      	it	hi
 80106ee:	6013      	strhi	r3, [r2, #0]
 80106f0:	4a39      	ldr	r2, [pc, #228]	; (80107d8 <_malloc_r+0x418>)
 80106f2:	6811      	ldr	r1, [r2, #0]
 80106f4:	428b      	cmp	r3, r1
 80106f6:	bf88      	it	hi
 80106f8:	6013      	strhi	r3, [r2, #0]
 80106fa:	e032      	b.n	8010762 <_malloc_r+0x3a2>
 80106fc:	6810      	ldr	r0, [r2, #0]
 80106fe:	3001      	adds	r0, #1
 8010700:	bf1b      	ittet	ne
 8010702:	eba8 0303 	subne.w	r3, r8, r3
 8010706:	4473      	addne	r3, lr
 8010708:	f8c2 8000 	streq.w	r8, [r2]
 801070c:	f8ca 3000 	strne.w	r3, [sl]
 8010710:	f018 0007 	ands.w	r0, r8, #7
 8010714:	bf1c      	itt	ne
 8010716:	f1c0 0008 	rsbne	r0, r0, #8
 801071a:	4480      	addne	r8, r0
 801071c:	4b2a      	ldr	r3, [pc, #168]	; (80107c8 <_malloc_r+0x408>)
 801071e:	4447      	add	r7, r8
 8010720:	4418      	add	r0, r3
 8010722:	400f      	ands	r7, r1
 8010724:	1bc7      	subs	r7, r0, r7
 8010726:	4639      	mov	r1, r7
 8010728:	4648      	mov	r0, r9
 801072a:	f000 f88f 	bl	801084c <_sbrk_r>
 801072e:	1c43      	adds	r3, r0, #1
 8010730:	bf08      	it	eq
 8010732:	4640      	moveq	r0, r8
 8010734:	f8da 3000 	ldr.w	r3, [sl]
 8010738:	f8c5 8008 	str.w	r8, [r5, #8]
 801073c:	bf08      	it	eq
 801073e:	2700      	moveq	r7, #0
 8010740:	eba0 0008 	sub.w	r0, r0, r8
 8010744:	443b      	add	r3, r7
 8010746:	4407      	add	r7, r0
 8010748:	f047 0701 	orr.w	r7, r7, #1
 801074c:	45ab      	cmp	fp, r5
 801074e:	f8ca 3000 	str.w	r3, [sl]
 8010752:	f8c8 7004 	str.w	r7, [r8, #4]
 8010756:	d0c4      	beq.n	80106e2 <_malloc_r+0x322>
 8010758:	2e0f      	cmp	r6, #15
 801075a:	d810      	bhi.n	801077e <_malloc_r+0x3be>
 801075c:	2301      	movs	r3, #1
 801075e:	f8c8 3004 	str.w	r3, [r8, #4]
 8010762:	68ab      	ldr	r3, [r5, #8]
 8010764:	685a      	ldr	r2, [r3, #4]
 8010766:	f022 0203 	bic.w	r2, r2, #3
 801076a:	4294      	cmp	r4, r2
 801076c:	eba2 0304 	sub.w	r3, r2, r4
 8010770:	d801      	bhi.n	8010776 <_malloc_r+0x3b6>
 8010772:	2b0f      	cmp	r3, #15
 8010774:	dc1a      	bgt.n	80107ac <_malloc_r+0x3ec>
 8010776:	4648      	mov	r0, r9
 8010778:	f000 f84a 	bl	8010810 <__malloc_unlock>
 801077c:	e62d      	b.n	80103da <_malloc_r+0x1a>
 801077e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010782:	3e0c      	subs	r6, #12
 8010784:	f026 0607 	bic.w	r6, r6, #7
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	4333      	orrs	r3, r6
 801078e:	f8cb 3004 	str.w	r3, [fp, #4]
 8010792:	eb0b 0306 	add.w	r3, fp, r6
 8010796:	2205      	movs	r2, #5
 8010798:	2e0f      	cmp	r6, #15
 801079a:	605a      	str	r2, [r3, #4]
 801079c:	609a      	str	r2, [r3, #8]
 801079e:	d9a0      	bls.n	80106e2 <_malloc_r+0x322>
 80107a0:	f10b 0108 	add.w	r1, fp, #8
 80107a4:	4648      	mov	r0, r9
 80107a6:	f003 f9a5 	bl	8013af4 <_free_r>
 80107aa:	e79a      	b.n	80106e2 <_malloc_r+0x322>
 80107ac:	68ae      	ldr	r6, [r5, #8]
 80107ae:	f044 0201 	orr.w	r2, r4, #1
 80107b2:	4434      	add	r4, r6
 80107b4:	f043 0301 	orr.w	r3, r3, #1
 80107b8:	6072      	str	r2, [r6, #4]
 80107ba:	60ac      	str	r4, [r5, #8]
 80107bc:	6063      	str	r3, [r4, #4]
 80107be:	e631      	b.n	8010424 <_malloc_r+0x64>
 80107c0:	200151b8 	.word	0x200151b8
 80107c4:	20000634 	.word	0x20000634
 80107c8:	00000080 	.word	0x00000080
 80107cc:	20015188 	.word	0x20015188
 80107d0:	0000007f 	.word	0x0000007f
 80107d4:	200151b0 	.word	0x200151b0
 80107d8:	200151b4 	.word	0x200151b4

080107dc <memcpy>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	1e43      	subs	r3, r0, #1
 80107e0:	440a      	add	r2, r1
 80107e2:	4291      	cmp	r1, r2
 80107e4:	d100      	bne.n	80107e8 <memcpy+0xc>
 80107e6:	bd10      	pop	{r4, pc}
 80107e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107f0:	e7f7      	b.n	80107e2 <memcpy+0x6>

080107f2 <memset>:
 80107f2:	4402      	add	r2, r0
 80107f4:	4603      	mov	r3, r0
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d100      	bne.n	80107fc <memset+0xa>
 80107fa:	4770      	bx	lr
 80107fc:	f803 1b01 	strb.w	r1, [r3], #1
 8010800:	e7f9      	b.n	80107f6 <memset+0x4>
	...

08010804 <__malloc_lock>:
 8010804:	4801      	ldr	r0, [pc, #4]	; (801080c <__malloc_lock+0x8>)
 8010806:	f003 ba5f 	b.w	8013cc8 <__retarget_lock_acquire_recursive>
 801080a:	bf00      	nop
 801080c:	20015ec0 	.word	0x20015ec0

08010810 <__malloc_unlock>:
 8010810:	4801      	ldr	r0, [pc, #4]	; (8010818 <__malloc_unlock+0x8>)
 8010812:	f003 ba5a 	b.w	8013cca <__retarget_lock_release_recursive>
 8010816:	bf00      	nop
 8010818:	20015ec0 	.word	0x20015ec0

0801081c <printf>:
 801081c:	b40f      	push	{r0, r1, r2, r3}
 801081e:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <printf+0x2c>)
 8010820:	b513      	push	{r0, r1, r4, lr}
 8010822:	681c      	ldr	r4, [r3, #0]
 8010824:	b124      	cbz	r4, 8010830 <printf+0x14>
 8010826:	69a3      	ldr	r3, [r4, #24]
 8010828:	b913      	cbnz	r3, 8010830 <printf+0x14>
 801082a:	4620      	mov	r0, r4
 801082c:	f003 f88c 	bl	8013948 <__sinit>
 8010830:	ab05      	add	r3, sp, #20
 8010832:	9a04      	ldr	r2, [sp, #16]
 8010834:	68a1      	ldr	r1, [r4, #8]
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	4620      	mov	r0, r4
 801083a:	f001 f819 	bl	8011870 <_vfprintf_r>
 801083e:	b002      	add	sp, #8
 8010840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010844:	b004      	add	sp, #16
 8010846:	4770      	bx	lr
 8010848:	20000138 	.word	0x20000138

0801084c <_sbrk_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4c06      	ldr	r4, [pc, #24]	; (8010868 <_sbrk_r+0x1c>)
 8010850:	2300      	movs	r3, #0
 8010852:	4605      	mov	r5, r0
 8010854:	4608      	mov	r0, r1
 8010856:	6023      	str	r3, [r4, #0]
 8010858:	f7f0 fef8 	bl	800164c <_sbrk>
 801085c:	1c43      	adds	r3, r0, #1
 801085e:	d102      	bne.n	8010866 <_sbrk_r+0x1a>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	b103      	cbz	r3, 8010866 <_sbrk_r+0x1a>
 8010864:	602b      	str	r3, [r5, #0]
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	20015ec8 	.word	0x20015ec8

0801086c <sprintf>:
 801086c:	b40e      	push	{r1, r2, r3}
 801086e:	b500      	push	{lr}
 8010870:	b09c      	sub	sp, #112	; 0x70
 8010872:	f44f 7102 	mov.w	r1, #520	; 0x208
 8010876:	ab1d      	add	r3, sp, #116	; 0x74
 8010878:	f8ad 1014 	strh.w	r1, [sp, #20]
 801087c:	9002      	str	r0, [sp, #8]
 801087e:	9006      	str	r0, [sp, #24]
 8010880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010884:	480a      	ldr	r0, [pc, #40]	; (80108b0 <sprintf+0x44>)
 8010886:	9104      	str	r1, [sp, #16]
 8010888:	9107      	str	r1, [sp, #28]
 801088a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801088e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010892:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010896:	6800      	ldr	r0, [r0, #0]
 8010898:	9301      	str	r3, [sp, #4]
 801089a:	a902      	add	r1, sp, #8
 801089c:	f000 f814 	bl	80108c8 <_svfprintf_r>
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	2200      	movs	r2, #0
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	b01c      	add	sp, #112	; 0x70
 80108a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80108ac:	b003      	add	sp, #12
 80108ae:	4770      	bx	lr
 80108b0:	20000138 	.word	0x20000138

080108b4 <strcpy>:
 80108b4:	4603      	mov	r3, r0
 80108b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108ba:	f803 2b01 	strb.w	r2, [r3], #1
 80108be:	2a00      	cmp	r2, #0
 80108c0:	d1f9      	bne.n	80108b6 <strcpy+0x2>
 80108c2:	4770      	bx	lr
 80108c4:	0000      	movs	r0, r0
	...

080108c8 <_svfprintf_r>:
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	b0bd      	sub	sp, #244	; 0xf4
 80108ce:	468a      	mov	sl, r1
 80108d0:	4615      	mov	r5, r2
 80108d2:	461f      	mov	r7, r3
 80108d4:	4683      	mov	fp, r0
 80108d6:	f003 f9e7 	bl	8013ca8 <_localeconv_r>
 80108da:	6803      	ldr	r3, [r0, #0]
 80108dc:	930d      	str	r3, [sp, #52]	; 0x34
 80108de:	4618      	mov	r0, r3
 80108e0:	f7ef fc80 	bl	80001e4 <strlen>
 80108e4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80108e8:	9008      	str	r0, [sp, #32]
 80108ea:	061b      	lsls	r3, r3, #24
 80108ec:	d518      	bpl.n	8010920 <_svfprintf_r+0x58>
 80108ee:	f8da 3010 	ldr.w	r3, [sl, #16]
 80108f2:	b9ab      	cbnz	r3, 8010920 <_svfprintf_r+0x58>
 80108f4:	2140      	movs	r1, #64	; 0x40
 80108f6:	4658      	mov	r0, fp
 80108f8:	f7ff fd62 	bl	80103c0 <_malloc_r>
 80108fc:	f8ca 0000 	str.w	r0, [sl]
 8010900:	f8ca 0010 	str.w	r0, [sl, #16]
 8010904:	b948      	cbnz	r0, 801091a <_svfprintf_r+0x52>
 8010906:	230c      	movs	r3, #12
 8010908:	f8cb 3000 	str.w	r3, [fp]
 801090c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010910:	9309      	str	r3, [sp, #36]	; 0x24
 8010912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010914:	b03d      	add	sp, #244	; 0xf4
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091a:	2340      	movs	r3, #64	; 0x40
 801091c:	f8ca 3014 	str.w	r3, [sl, #20]
 8010920:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8010b88 <_svfprintf_r+0x2c0>
 8010924:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010928:	2300      	movs	r3, #0
 801092a:	ac2c      	add	r4, sp, #176	; 0xb0
 801092c:	941f      	str	r4, [sp, #124]	; 0x7c
 801092e:	9321      	str	r3, [sp, #132]	; 0x84
 8010930:	9320      	str	r3, [sp, #128]	; 0x80
 8010932:	9505      	str	r5, [sp, #20]
 8010934:	9303      	str	r3, [sp, #12]
 8010936:	9311      	str	r3, [sp, #68]	; 0x44
 8010938:	9310      	str	r3, [sp, #64]	; 0x40
 801093a:	9309      	str	r3, [sp, #36]	; 0x24
 801093c:	9d05      	ldr	r5, [sp, #20]
 801093e:	462b      	mov	r3, r5
 8010940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010944:	b112      	cbz	r2, 801094c <_svfprintf_r+0x84>
 8010946:	2a25      	cmp	r2, #37	; 0x25
 8010948:	f040 8083 	bne.w	8010a52 <_svfprintf_r+0x18a>
 801094c:	9b05      	ldr	r3, [sp, #20]
 801094e:	1aee      	subs	r6, r5, r3
 8010950:	d00d      	beq.n	801096e <_svfprintf_r+0xa6>
 8010952:	e884 0048 	stmia.w	r4, {r3, r6}
 8010956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010958:	4433      	add	r3, r6
 801095a:	9321      	str	r3, [sp, #132]	; 0x84
 801095c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801095e:	3301      	adds	r3, #1
 8010960:	2b07      	cmp	r3, #7
 8010962:	9320      	str	r3, [sp, #128]	; 0x80
 8010964:	dc77      	bgt.n	8010a56 <_svfprintf_r+0x18e>
 8010966:	3408      	adds	r4, #8
 8010968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096a:	4433      	add	r3, r6
 801096c:	9309      	str	r3, [sp, #36]	; 0x24
 801096e:	782b      	ldrb	r3, [r5, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	f000 8729 	beq.w	80117c8 <_svfprintf_r+0xf00>
 8010976:	2300      	movs	r3, #0
 8010978:	1c69      	adds	r1, r5, #1
 801097a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 801097e:	461a      	mov	r2, r3
 8010980:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8010984:	930a      	str	r3, [sp, #40]	; 0x28
 8010986:	461d      	mov	r5, r3
 8010988:	200a      	movs	r0, #10
 801098a:	1c4e      	adds	r6, r1, #1
 801098c:	7809      	ldrb	r1, [r1, #0]
 801098e:	9605      	str	r6, [sp, #20]
 8010990:	9102      	str	r1, [sp, #8]
 8010992:	9902      	ldr	r1, [sp, #8]
 8010994:	3920      	subs	r1, #32
 8010996:	2958      	cmp	r1, #88	; 0x58
 8010998:	f200 8418 	bhi.w	80111cc <_svfprintf_r+0x904>
 801099c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80109a0:	041600a6 	.word	0x041600a6
 80109a4:	00ab0416 	.word	0x00ab0416
 80109a8:	04160416 	.word	0x04160416
 80109ac:	04160416 	.word	0x04160416
 80109b0:	04160416 	.word	0x04160416
 80109b4:	006500ae 	.word	0x006500ae
 80109b8:	00b70416 	.word	0x00b70416
 80109bc:	041600ba 	.word	0x041600ba
 80109c0:	00da00d7 	.word	0x00da00d7
 80109c4:	00da00da 	.word	0x00da00da
 80109c8:	00da00da 	.word	0x00da00da
 80109cc:	00da00da 	.word	0x00da00da
 80109d0:	00da00da 	.word	0x00da00da
 80109d4:	04160416 	.word	0x04160416
 80109d8:	04160416 	.word	0x04160416
 80109dc:	04160416 	.word	0x04160416
 80109e0:	04160416 	.word	0x04160416
 80109e4:	04160416 	.word	0x04160416
 80109e8:	012b0115 	.word	0x012b0115
 80109ec:	012b0416 	.word	0x012b0416
 80109f0:	04160416 	.word	0x04160416
 80109f4:	04160416 	.word	0x04160416
 80109f8:	041600ed 	.word	0x041600ed
 80109fc:	03400416 	.word	0x03400416
 8010a00:	04160416 	.word	0x04160416
 8010a04:	04160416 	.word	0x04160416
 8010a08:	03a80416 	.word	0x03a80416
 8010a0c:	04160416 	.word	0x04160416
 8010a10:	04160086 	.word	0x04160086
 8010a14:	04160416 	.word	0x04160416
 8010a18:	04160416 	.word	0x04160416
 8010a1c:	04160416 	.word	0x04160416
 8010a20:	04160416 	.word	0x04160416
 8010a24:	01070416 	.word	0x01070416
 8010a28:	012b006b 	.word	0x012b006b
 8010a2c:	012b012b 	.word	0x012b012b
 8010a30:	006b00f0 	.word	0x006b00f0
 8010a34:	04160416 	.word	0x04160416
 8010a38:	041600fa 	.word	0x041600fa
 8010a3c:	03420322 	.word	0x03420322
 8010a40:	01010376 	.word	0x01010376
 8010a44:	03870416 	.word	0x03870416
 8010a48:	03aa0416 	.word	0x03aa0416
 8010a4c:	04160416 	.word	0x04160416
 8010a50:	03c2      	.short	0x03c2
 8010a52:	461d      	mov	r5, r3
 8010a54:	e773      	b.n	801093e <_svfprintf_r+0x76>
 8010a56:	aa1f      	add	r2, sp, #124	; 0x7c
 8010a58:	4651      	mov	r1, sl
 8010a5a:	4658      	mov	r0, fp
 8010a5c:	f003 fcb5 	bl	80143ca <__ssprint_r>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	f040 8692 	bne.w	801178a <_svfprintf_r+0xec2>
 8010a66:	ac2c      	add	r4, sp, #176	; 0xb0
 8010a68:	e77e      	b.n	8010968 <_svfprintf_r+0xa0>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	222b      	movs	r2, #43	; 0x2b
 8010a6e:	9905      	ldr	r1, [sp, #20]
 8010a70:	e78b      	b.n	801098a <_svfprintf_r+0xc2>
 8010a72:	460f      	mov	r7, r1
 8010a74:	e7fb      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010a76:	b10b      	cbz	r3, 8010a7c <_svfprintf_r+0x1b4>
 8010a78:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8010a7c:	06ae      	lsls	r6, r5, #26
 8010a7e:	f140 80aa 	bpl.w	8010bd6 <_svfprintf_r+0x30e>
 8010a82:	3707      	adds	r7, #7
 8010a84:	f027 0707 	bic.w	r7, r7, #7
 8010a88:	f107 0308 	add.w	r3, r7, #8
 8010a8c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	2e00      	cmp	r6, #0
 8010a94:	f177 0300 	sbcs.w	r3, r7, #0
 8010a98:	da06      	bge.n	8010aa8 <_svfprintf_r+0x1e0>
 8010a9a:	4276      	negs	r6, r6
 8010a9c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8010aa0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8010aa4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e2ca      	b.n	8011042 <_svfprintf_r+0x77a>
 8010aac:	b10b      	cbz	r3, 8010ab2 <_svfprintf_r+0x1ea>
 8010aae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8010ab2:	4b37      	ldr	r3, [pc, #220]	; (8010b90 <_svfprintf_r+0x2c8>)
 8010ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8010ab6:	06ab      	lsls	r3, r5, #26
 8010ab8:	f140 8339 	bpl.w	801112e <_svfprintf_r+0x866>
 8010abc:	3707      	adds	r7, #7
 8010abe:	f027 0707 	bic.w	r7, r7, #7
 8010ac2:	f107 0308 	add.w	r3, r7, #8
 8010ac6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8010aca:	9304      	str	r3, [sp, #16]
 8010acc:	07e8      	lsls	r0, r5, #31
 8010ace:	d50b      	bpl.n	8010ae8 <_svfprintf_r+0x220>
 8010ad0:	ea56 0307 	orrs.w	r3, r6, r7
 8010ad4:	d008      	beq.n	8010ae8 <_svfprintf_r+0x220>
 8010ad6:	2330      	movs	r3, #48	; 0x30
 8010ad8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8010adc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010ae0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8010ae4:	f045 0502 	orr.w	r5, r5, #2
 8010ae8:	2302      	movs	r3, #2
 8010aea:	e2a7      	b.n	801103c <_svfprintf_r+0x774>
 8010aec:	2a00      	cmp	r2, #0
 8010aee:	d1be      	bne.n	8010a6e <_svfprintf_r+0x1a6>
 8010af0:	2301      	movs	r3, #1
 8010af2:	2220      	movs	r2, #32
 8010af4:	e7bb      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010af6:	f045 0501 	orr.w	r5, r5, #1
 8010afa:	e7b8      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010afc:	683e      	ldr	r6, [r7, #0]
 8010afe:	960a      	str	r6, [sp, #40]	; 0x28
 8010b00:	2e00      	cmp	r6, #0
 8010b02:	f107 0104 	add.w	r1, r7, #4
 8010b06:	dab4      	bge.n	8010a72 <_svfprintf_r+0x1aa>
 8010b08:	4276      	negs	r6, r6
 8010b0a:	960a      	str	r6, [sp, #40]	; 0x28
 8010b0c:	460f      	mov	r7, r1
 8010b0e:	f045 0504 	orr.w	r5, r5, #4
 8010b12:	e7ac      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010b14:	9905      	ldr	r1, [sp, #20]
 8010b16:	1c4e      	adds	r6, r1, #1
 8010b18:	7809      	ldrb	r1, [r1, #0]
 8010b1a:	9102      	str	r1, [sp, #8]
 8010b1c:	292a      	cmp	r1, #42	; 0x2a
 8010b1e:	d010      	beq.n	8010b42 <_svfprintf_r+0x27a>
 8010b20:	f04f 0900 	mov.w	r9, #0
 8010b24:	9605      	str	r6, [sp, #20]
 8010b26:	9902      	ldr	r1, [sp, #8]
 8010b28:	3930      	subs	r1, #48	; 0x30
 8010b2a:	2909      	cmp	r1, #9
 8010b2c:	f63f af31 	bhi.w	8010992 <_svfprintf_r+0xca>
 8010b30:	fb00 1909 	mla	r9, r0, r9, r1
 8010b34:	9905      	ldr	r1, [sp, #20]
 8010b36:	460e      	mov	r6, r1
 8010b38:	f816 1b01 	ldrb.w	r1, [r6], #1
 8010b3c:	9102      	str	r1, [sp, #8]
 8010b3e:	9605      	str	r6, [sp, #20]
 8010b40:	e7f1      	b.n	8010b26 <_svfprintf_r+0x25e>
 8010b42:	6839      	ldr	r1, [r7, #0]
 8010b44:	9605      	str	r6, [sp, #20]
 8010b46:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8010b4a:	3704      	adds	r7, #4
 8010b4c:	e78f      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010b4e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8010b52:	e78c      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010b54:	2100      	movs	r1, #0
 8010b56:	910a      	str	r1, [sp, #40]	; 0x28
 8010b58:	9902      	ldr	r1, [sp, #8]
 8010b5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010b5c:	3930      	subs	r1, #48	; 0x30
 8010b5e:	fb00 1106 	mla	r1, r0, r6, r1
 8010b62:	910a      	str	r1, [sp, #40]	; 0x28
 8010b64:	9905      	ldr	r1, [sp, #20]
 8010b66:	460e      	mov	r6, r1
 8010b68:	f816 1b01 	ldrb.w	r1, [r6], #1
 8010b6c:	9102      	str	r1, [sp, #8]
 8010b6e:	9902      	ldr	r1, [sp, #8]
 8010b70:	9605      	str	r6, [sp, #20]
 8010b72:	3930      	subs	r1, #48	; 0x30
 8010b74:	2909      	cmp	r1, #9
 8010b76:	d9ef      	bls.n	8010b58 <_svfprintf_r+0x290>
 8010b78:	e70b      	b.n	8010992 <_svfprintf_r+0xca>
 8010b7a:	f045 0508 	orr.w	r5, r5, #8
 8010b7e:	e776      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010b80:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8010b84:	e773      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010b86:	bf00      	nop
	...
 8010b90:	080faf14 	.word	0x080faf14
 8010b94:	9905      	ldr	r1, [sp, #20]
 8010b96:	7809      	ldrb	r1, [r1, #0]
 8010b98:	296c      	cmp	r1, #108	; 0x6c
 8010b9a:	d105      	bne.n	8010ba8 <_svfprintf_r+0x2e0>
 8010b9c:	9905      	ldr	r1, [sp, #20]
 8010b9e:	3101      	adds	r1, #1
 8010ba0:	9105      	str	r1, [sp, #20]
 8010ba2:	f045 0520 	orr.w	r5, r5, #32
 8010ba6:	e762      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010ba8:	f045 0510 	orr.w	r5, r5, #16
 8010bac:	e75f      	b.n	8010a6e <_svfprintf_r+0x1a6>
 8010bae:	1d3b      	adds	r3, r7, #4
 8010bb0:	9304      	str	r3, [sp, #16]
 8010bb2:	2600      	movs	r6, #0
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8010bba:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8010bbe:	f04f 0901 	mov.w	r9, #1
 8010bc2:	4637      	mov	r7, r6
 8010bc4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8010bc8:	e11b      	b.n	8010e02 <_svfprintf_r+0x53a>
 8010bca:	b10b      	cbz	r3, 8010bd0 <_svfprintf_r+0x308>
 8010bcc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8010bd0:	f045 0510 	orr.w	r5, r5, #16
 8010bd4:	e752      	b.n	8010a7c <_svfprintf_r+0x1b4>
 8010bd6:	f015 0f10 	tst.w	r5, #16
 8010bda:	f107 0304 	add.w	r3, r7, #4
 8010bde:	d003      	beq.n	8010be8 <_svfprintf_r+0x320>
 8010be0:	683e      	ldr	r6, [r7, #0]
 8010be2:	9304      	str	r3, [sp, #16]
 8010be4:	17f7      	asrs	r7, r6, #31
 8010be6:	e754      	b.n	8010a92 <_svfprintf_r+0x1ca>
 8010be8:	683e      	ldr	r6, [r7, #0]
 8010bea:	9304      	str	r3, [sp, #16]
 8010bec:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010bf0:	bf18      	it	ne
 8010bf2:	b236      	sxthne	r6, r6
 8010bf4:	e7f6      	b.n	8010be4 <_svfprintf_r+0x31c>
 8010bf6:	b10b      	cbz	r3, 8010bfc <_svfprintf_r+0x334>
 8010bf8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8010bfc:	3707      	adds	r7, #7
 8010bfe:	f027 0707 	bic.w	r7, r7, #7
 8010c02:	f107 0308 	add.w	r3, r7, #8
 8010c06:	9304      	str	r3, [sp, #16]
 8010c08:	ed97 7b00 	vldr	d7, [r7]
 8010c0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010c10:	9b06      	ldr	r3, [sp, #24]
 8010c12:	9312      	str	r3, [sp, #72]	; 0x48
 8010c14:	9b07      	ldr	r3, [sp, #28]
 8010c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8010c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c20:	4b4a      	ldr	r3, [pc, #296]	; (8010d4c <_svfprintf_r+0x484>)
 8010c22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010c26:	f7ef ff8d 	bl	8000b44 <__aeabi_dcmpun>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	f040 85d5 	bne.w	80117da <_svfprintf_r+0xf12>
 8010c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c34:	4b45      	ldr	r3, [pc, #276]	; (8010d4c <_svfprintf_r+0x484>)
 8010c36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010c3a:	f7ef ff65 	bl	8000b08 <__aeabi_dcmple>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	f040 85cb 	bne.w	80117da <_svfprintf_r+0xf12>
 8010c44:	2200      	movs	r2, #0
 8010c46:	2300      	movs	r3, #0
 8010c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c4c:	f7ef ff52 	bl	8000af4 <__aeabi_dcmplt>
 8010c50:	b110      	cbz	r0, 8010c58 <_svfprintf_r+0x390>
 8010c52:	232d      	movs	r3, #45	; 0x2d
 8010c54:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8010c58:	4b3d      	ldr	r3, [pc, #244]	; (8010d50 <_svfprintf_r+0x488>)
 8010c5a:	4a3e      	ldr	r2, [pc, #248]	; (8010d54 <_svfprintf_r+0x48c>)
 8010c5c:	9902      	ldr	r1, [sp, #8]
 8010c5e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8010c62:	2947      	cmp	r1, #71	; 0x47
 8010c64:	bfcc      	ite	gt
 8010c66:	4690      	movgt	r8, r2
 8010c68:	4698      	movle	r8, r3
 8010c6a:	f04f 0903 	mov.w	r9, #3
 8010c6e:	2600      	movs	r6, #0
 8010c70:	4637      	mov	r7, r6
 8010c72:	e0c6      	b.n	8010e02 <_svfprintf_r+0x53a>
 8010c74:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8010c78:	d022      	beq.n	8010cc0 <_svfprintf_r+0x3f8>
 8010c7a:	9b02      	ldr	r3, [sp, #8]
 8010c7c:	f023 0320 	bic.w	r3, r3, #32
 8010c80:	2b47      	cmp	r3, #71	; 0x47
 8010c82:	d104      	bne.n	8010c8e <_svfprintf_r+0x3c6>
 8010c84:	f1b9 0f00 	cmp.w	r9, #0
 8010c88:	bf08      	it	eq
 8010c8a:	f04f 0901 	moveq.w	r9, #1
 8010c8e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8010c92:	930c      	str	r3, [sp, #48]	; 0x30
 8010c94:	9b07      	ldr	r3, [sp, #28]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	da15      	bge.n	8010cc6 <_svfprintf_r+0x3fe>
 8010c9a:	9b06      	ldr	r3, [sp, #24]
 8010c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8010c9e:	9b07      	ldr	r3, [sp, #28]
 8010ca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ca6:	232d      	movs	r3, #45	; 0x2d
 8010ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010caa:	9b02      	ldr	r3, [sp, #8]
 8010cac:	f023 0720 	bic.w	r7, r3, #32
 8010cb0:	2f46      	cmp	r7, #70	; 0x46
 8010cb2:	d00e      	beq.n	8010cd2 <_svfprintf_r+0x40a>
 8010cb4:	2f45      	cmp	r7, #69	; 0x45
 8010cb6:	d146      	bne.n	8010d46 <_svfprintf_r+0x47e>
 8010cb8:	f109 0601 	add.w	r6, r9, #1
 8010cbc:	2102      	movs	r1, #2
 8010cbe:	e00a      	b.n	8010cd6 <_svfprintf_r+0x40e>
 8010cc0:	f04f 0906 	mov.w	r9, #6
 8010cc4:	e7e3      	b.n	8010c8e <_svfprintf_r+0x3c6>
 8010cc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010cca:	2300      	movs	r3, #0
 8010ccc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8010cd0:	e7ea      	b.n	8010ca8 <_svfprintf_r+0x3e0>
 8010cd2:	464e      	mov	r6, r9
 8010cd4:	2103      	movs	r1, #3
 8010cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	ab1a      	add	r3, sp, #104	; 0x68
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	4632      	mov	r2, r6
 8010ce0:	ab19      	add	r3, sp, #100	; 0x64
 8010ce2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8010ce6:	4658      	mov	r0, fp
 8010ce8:	f001 ff3a 	bl	8012b60 <_dtoa_r>
 8010cec:	2f47      	cmp	r7, #71	; 0x47
 8010cee:	4680      	mov	r8, r0
 8010cf0:	d102      	bne.n	8010cf8 <_svfprintf_r+0x430>
 8010cf2:	07e8      	lsls	r0, r5, #31
 8010cf4:	f140 857e 	bpl.w	80117f4 <_svfprintf_r+0xf2c>
 8010cf8:	eb08 0306 	add.w	r3, r8, r6
 8010cfc:	2f46      	cmp	r7, #70	; 0x46
 8010cfe:	9303      	str	r3, [sp, #12]
 8010d00:	d111      	bne.n	8010d26 <_svfprintf_r+0x45e>
 8010d02:	f898 3000 	ldrb.w	r3, [r8]
 8010d06:	2b30      	cmp	r3, #48	; 0x30
 8010d08:	d109      	bne.n	8010d1e <_svfprintf_r+0x456>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010d12:	f7ef fee5 	bl	8000ae0 <__aeabi_dcmpeq>
 8010d16:	b910      	cbnz	r0, 8010d1e <_svfprintf_r+0x456>
 8010d18:	f1c6 0601 	rsb	r6, r6, #1
 8010d1c:	9619      	str	r6, [sp, #100]	; 0x64
 8010d1e:	9a03      	ldr	r2, [sp, #12]
 8010d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d22:	441a      	add	r2, r3
 8010d24:	9203      	str	r2, [sp, #12]
 8010d26:	2200      	movs	r2, #0
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010d2e:	f7ef fed7 	bl	8000ae0 <__aeabi_dcmpeq>
 8010d32:	b988      	cbnz	r0, 8010d58 <_svfprintf_r+0x490>
 8010d34:	2230      	movs	r2, #48	; 0x30
 8010d36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d38:	9903      	ldr	r1, [sp, #12]
 8010d3a:	4299      	cmp	r1, r3
 8010d3c:	d90e      	bls.n	8010d5c <_svfprintf_r+0x494>
 8010d3e:	1c59      	adds	r1, r3, #1
 8010d40:	911d      	str	r1, [sp, #116]	; 0x74
 8010d42:	701a      	strb	r2, [r3, #0]
 8010d44:	e7f7      	b.n	8010d36 <_svfprintf_r+0x46e>
 8010d46:	464e      	mov	r6, r9
 8010d48:	e7b8      	b.n	8010cbc <_svfprintf_r+0x3f4>
 8010d4a:	bf00      	nop
 8010d4c:	7fefffff 	.word	0x7fefffff
 8010d50:	080faf04 	.word	0x080faf04
 8010d54:	080faf08 	.word	0x080faf08
 8010d58:	9b03      	ldr	r3, [sp, #12]
 8010d5a:	931d      	str	r3, [sp, #116]	; 0x74
 8010d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d5e:	2f47      	cmp	r7, #71	; 0x47
 8010d60:	eba3 0308 	sub.w	r3, r3, r8
 8010d64:	9303      	str	r3, [sp, #12]
 8010d66:	f040 80fa 	bne.w	8010f5e <_svfprintf_r+0x696>
 8010d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d6c:	1cd9      	adds	r1, r3, #3
 8010d6e:	db02      	blt.n	8010d76 <_svfprintf_r+0x4ae>
 8010d70:	4599      	cmp	r9, r3
 8010d72:	f280 8120 	bge.w	8010fb6 <_svfprintf_r+0x6ee>
 8010d76:	9b02      	ldr	r3, [sp, #8]
 8010d78:	3b02      	subs	r3, #2
 8010d7a:	9302      	str	r3, [sp, #8]
 8010d7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010d7e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8010d82:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8010d86:	1e53      	subs	r3, r2, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	9319      	str	r3, [sp, #100]	; 0x64
 8010d8c:	bfb6      	itet	lt
 8010d8e:	f1c2 0301 	rsblt	r3, r2, #1
 8010d92:	222b      	movge	r2, #43	; 0x2b
 8010d94:	222d      	movlt	r2, #45	; 0x2d
 8010d96:	2b09      	cmp	r3, #9
 8010d98:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8010d9c:	f340 80fb 	ble.w	8010f96 <_svfprintf_r+0x6ce>
 8010da0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8010da4:	260a      	movs	r6, #10
 8010da6:	fb93 f0f6 	sdiv	r0, r3, r6
 8010daa:	fb06 3310 	mls	r3, r6, r0, r3
 8010dae:	3330      	adds	r3, #48	; 0x30
 8010db0:	2809      	cmp	r0, #9
 8010db2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010db6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8010dba:	4603      	mov	r3, r0
 8010dbc:	f300 80e4 	bgt.w	8010f88 <_svfprintf_r+0x6c0>
 8010dc0:	3330      	adds	r3, #48	; 0x30
 8010dc2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8010dc6:	3a02      	subs	r2, #2
 8010dc8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8010dcc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8010dd0:	4282      	cmp	r2, r0
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f0c0 80da 	bcc.w	8010f8c <_svfprintf_r+0x6c4>
 8010dd8:	9a03      	ldr	r2, [sp, #12]
 8010dda:	ab1b      	add	r3, sp, #108	; 0x6c
 8010ddc:	1acb      	subs	r3, r1, r3
 8010dde:	2a01      	cmp	r2, #1
 8010de0:	9310      	str	r3, [sp, #64]	; 0x40
 8010de2:	eb03 0902 	add.w	r9, r3, r2
 8010de6:	dc02      	bgt.n	8010dee <_svfprintf_r+0x526>
 8010de8:	f015 0701 	ands.w	r7, r5, #1
 8010dec:	d002      	beq.n	8010df4 <_svfprintf_r+0x52c>
 8010dee:	9b08      	ldr	r3, [sp, #32]
 8010df0:	2700      	movs	r7, #0
 8010df2:	4499      	add	r9, r3
 8010df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010df6:	b113      	cbz	r3, 8010dfe <_svfprintf_r+0x536>
 8010df8:	232d      	movs	r3, #45	; 0x2d
 8010dfa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8010dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e00:	2600      	movs	r6, #0
 8010e02:	454e      	cmp	r6, r9
 8010e04:	4633      	mov	r3, r6
 8010e06:	bfb8      	it	lt
 8010e08:	464b      	movlt	r3, r9
 8010e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e0c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8010e10:	b113      	cbz	r3, 8010e18 <_svfprintf_r+0x550>
 8010e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e14:	3301      	adds	r3, #1
 8010e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e18:	f015 0302 	ands.w	r3, r5, #2
 8010e1c:	9314      	str	r3, [sp, #80]	; 0x50
 8010e1e:	bf1e      	ittt	ne
 8010e20:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8010e22:	3302      	addne	r3, #2
 8010e24:	930b      	strne	r3, [sp, #44]	; 0x2c
 8010e26:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8010e2a:	9315      	str	r3, [sp, #84]	; 0x54
 8010e2c:	d118      	bne.n	8010e60 <_svfprintf_r+0x598>
 8010e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e32:	1a9b      	subs	r3, r3, r2
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	930c      	str	r3, [sp, #48]	; 0x30
 8010e38:	dd12      	ble.n	8010e60 <_svfprintf_r+0x598>
 8010e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e3c:	2b10      	cmp	r3, #16
 8010e3e:	4ba9      	ldr	r3, [pc, #676]	; (80110e4 <_svfprintf_r+0x81c>)
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	f300 81d5 	bgt.w	80111f0 <_svfprintf_r+0x928>
 8010e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e48:	6063      	str	r3, [r4, #4]
 8010e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e4e:	4413      	add	r3, r2
 8010e50:	9321      	str	r3, [sp, #132]	; 0x84
 8010e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e54:	3301      	adds	r3, #1
 8010e56:	2b07      	cmp	r3, #7
 8010e58:	9320      	str	r3, [sp, #128]	; 0x80
 8010e5a:	f300 81e2 	bgt.w	8011222 <_svfprintf_r+0x95a>
 8010e5e:	3408      	adds	r4, #8
 8010e60:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8010e64:	b173      	cbz	r3, 8010e84 <_svfprintf_r+0x5bc>
 8010e66:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8010e6a:	6023      	str	r3, [r4, #0]
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	6063      	str	r3, [r4, #4]
 8010e70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e72:	3301      	adds	r3, #1
 8010e74:	9321      	str	r3, [sp, #132]	; 0x84
 8010e76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e78:	3301      	adds	r3, #1
 8010e7a:	2b07      	cmp	r3, #7
 8010e7c:	9320      	str	r3, [sp, #128]	; 0x80
 8010e7e:	f300 81da 	bgt.w	8011236 <_svfprintf_r+0x96e>
 8010e82:	3408      	adds	r4, #8
 8010e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e86:	b16b      	cbz	r3, 8010ea4 <_svfprintf_r+0x5dc>
 8010e88:	ab18      	add	r3, sp, #96	; 0x60
 8010e8a:	6023      	str	r3, [r4, #0]
 8010e8c:	2302      	movs	r3, #2
 8010e8e:	6063      	str	r3, [r4, #4]
 8010e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e92:	3302      	adds	r3, #2
 8010e94:	9321      	str	r3, [sp, #132]	; 0x84
 8010e96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e98:	3301      	adds	r3, #1
 8010e9a:	2b07      	cmp	r3, #7
 8010e9c:	9320      	str	r3, [sp, #128]	; 0x80
 8010e9e:	f300 81d4 	bgt.w	801124a <_svfprintf_r+0x982>
 8010ea2:	3408      	adds	r4, #8
 8010ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ea6:	2b80      	cmp	r3, #128	; 0x80
 8010ea8:	d114      	bne.n	8010ed4 <_svfprintf_r+0x60c>
 8010eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010eae:	1a9b      	subs	r3, r3, r2
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dd0f      	ble.n	8010ed4 <_svfprintf_r+0x60c>
 8010eb4:	4a8c      	ldr	r2, [pc, #560]	; (80110e8 <_svfprintf_r+0x820>)
 8010eb6:	6022      	str	r2, [r4, #0]
 8010eb8:	2b10      	cmp	r3, #16
 8010eba:	f300 81d0 	bgt.w	801125e <_svfprintf_r+0x996>
 8010ebe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	9321      	str	r3, [sp, #132]	; 0x84
 8010ec6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010ec8:	3301      	adds	r3, #1
 8010eca:	2b07      	cmp	r3, #7
 8010ecc:	9320      	str	r3, [sp, #128]	; 0x80
 8010ece:	f300 81df 	bgt.w	8011290 <_svfprintf_r+0x9c8>
 8010ed2:	3408      	adds	r4, #8
 8010ed4:	eba6 0609 	sub.w	r6, r6, r9
 8010ed8:	2e00      	cmp	r6, #0
 8010eda:	dd0f      	ble.n	8010efc <_svfprintf_r+0x634>
 8010edc:	4b82      	ldr	r3, [pc, #520]	; (80110e8 <_svfprintf_r+0x820>)
 8010ede:	6023      	str	r3, [r4, #0]
 8010ee0:	2e10      	cmp	r6, #16
 8010ee2:	f300 81df 	bgt.w	80112a4 <_svfprintf_r+0x9dc>
 8010ee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010ee8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010eea:	6066      	str	r6, [r4, #4]
 8010eec:	3301      	adds	r3, #1
 8010eee:	4406      	add	r6, r0
 8010ef0:	2b07      	cmp	r3, #7
 8010ef2:	9621      	str	r6, [sp, #132]	; 0x84
 8010ef4:	9320      	str	r3, [sp, #128]	; 0x80
 8010ef6:	f300 81ec 	bgt.w	80112d2 <_svfprintf_r+0xa0a>
 8010efa:	3408      	adds	r4, #8
 8010efc:	05eb      	lsls	r3, r5, #23
 8010efe:	f100 81f2 	bmi.w	80112e6 <_svfprintf_r+0xa1e>
 8010f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f04:	e884 0300 	stmia.w	r4, {r8, r9}
 8010f08:	444b      	add	r3, r9
 8010f0a:	9321      	str	r3, [sp, #132]	; 0x84
 8010f0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010f0e:	3301      	adds	r3, #1
 8010f10:	2b07      	cmp	r3, #7
 8010f12:	9320      	str	r3, [sp, #128]	; 0x80
 8010f14:	f340 8419 	ble.w	801174a <_svfprintf_r+0xe82>
 8010f18:	aa1f      	add	r2, sp, #124	; 0x7c
 8010f1a:	4651      	mov	r1, sl
 8010f1c:	4658      	mov	r0, fp
 8010f1e:	f003 fa54 	bl	80143ca <__ssprint_r>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	f040 8431 	bne.w	801178a <_svfprintf_r+0xec2>
 8010f28:	ac2c      	add	r4, sp, #176	; 0xb0
 8010f2a:	076b      	lsls	r3, r5, #29
 8010f2c:	f100 8410 	bmi.w	8011750 <_svfprintf_r+0xe88>
 8010f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f36:	428a      	cmp	r2, r1
 8010f38:	bfac      	ite	ge
 8010f3a:	189b      	addge	r3, r3, r2
 8010f3c:	185b      	addlt	r3, r3, r1
 8010f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f42:	b13b      	cbz	r3, 8010f54 <_svfprintf_r+0x68c>
 8010f44:	aa1f      	add	r2, sp, #124	; 0x7c
 8010f46:	4651      	mov	r1, sl
 8010f48:	4658      	mov	r0, fp
 8010f4a:	f003 fa3e 	bl	80143ca <__ssprint_r>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	f040 841b 	bne.w	801178a <_svfprintf_r+0xec2>
 8010f54:	2300      	movs	r3, #0
 8010f56:	9320      	str	r3, [sp, #128]	; 0x80
 8010f58:	9f04      	ldr	r7, [sp, #16]
 8010f5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8010f5c:	e4ee      	b.n	801093c <_svfprintf_r+0x74>
 8010f5e:	9b02      	ldr	r3, [sp, #8]
 8010f60:	2b65      	cmp	r3, #101	; 0x65
 8010f62:	f77f af0b 	ble.w	8010d7c <_svfprintf_r+0x4b4>
 8010f66:	9b02      	ldr	r3, [sp, #8]
 8010f68:	2b66      	cmp	r3, #102	; 0x66
 8010f6a:	d124      	bne.n	8010fb6 <_svfprintf_r+0x6ee>
 8010f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	dd19      	ble.n	8010fa6 <_svfprintf_r+0x6de>
 8010f72:	f1b9 0f00 	cmp.w	r9, #0
 8010f76:	d101      	bne.n	8010f7c <_svfprintf_r+0x6b4>
 8010f78:	07ea      	lsls	r2, r5, #31
 8010f7a:	d502      	bpl.n	8010f82 <_svfprintf_r+0x6ba>
 8010f7c:	9a08      	ldr	r2, [sp, #32]
 8010f7e:	4413      	add	r3, r2
 8010f80:	444b      	add	r3, r9
 8010f82:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8010f84:	4699      	mov	r9, r3
 8010f86:	e735      	b.n	8010df4 <_svfprintf_r+0x52c>
 8010f88:	460a      	mov	r2, r1
 8010f8a:	e70c      	b.n	8010da6 <_svfprintf_r+0x4de>
 8010f8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010f90:	f803 1b01 	strb.w	r1, [r3], #1
 8010f94:	e71c      	b.n	8010dd0 <_svfprintf_r+0x508>
 8010f96:	2230      	movs	r2, #48	; 0x30
 8010f98:	4413      	add	r3, r2
 8010f9a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8010f9e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8010fa2:	a91c      	add	r1, sp, #112	; 0x70
 8010fa4:	e718      	b.n	8010dd8 <_svfprintf_r+0x510>
 8010fa6:	f1b9 0f00 	cmp.w	r9, #0
 8010faa:	d101      	bne.n	8010fb0 <_svfprintf_r+0x6e8>
 8010fac:	07eb      	lsls	r3, r5, #31
 8010fae:	d515      	bpl.n	8010fdc <_svfprintf_r+0x714>
 8010fb0:	9b08      	ldr	r3, [sp, #32]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	e7e4      	b.n	8010f80 <_svfprintf_r+0x6b8>
 8010fb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010fb8:	9b03      	ldr	r3, [sp, #12]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	db06      	blt.n	8010fcc <_svfprintf_r+0x704>
 8010fbe:	07ef      	lsls	r7, r5, #31
 8010fc0:	d50e      	bpl.n	8010fe0 <_svfprintf_r+0x718>
 8010fc2:	9b08      	ldr	r3, [sp, #32]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	2267      	movs	r2, #103	; 0x67
 8010fc8:	9202      	str	r2, [sp, #8]
 8010fca:	e7da      	b.n	8010f82 <_svfprintf_r+0x6ba>
 8010fcc:	9b03      	ldr	r3, [sp, #12]
 8010fce:	9908      	ldr	r1, [sp, #32]
 8010fd0:	2a00      	cmp	r2, #0
 8010fd2:	440b      	add	r3, r1
 8010fd4:	dcf7      	bgt.n	8010fc6 <_svfprintf_r+0x6fe>
 8010fd6:	f1c2 0201 	rsb	r2, r2, #1
 8010fda:	e7f3      	b.n	8010fc4 <_svfprintf_r+0x6fc>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e7d0      	b.n	8010f82 <_svfprintf_r+0x6ba>
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	e7f0      	b.n	8010fc6 <_svfprintf_r+0x6fe>
 8010fe4:	b10b      	cbz	r3, 8010fea <_svfprintf_r+0x722>
 8010fe6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8010fea:	f015 0f20 	tst.w	r5, #32
 8010fee:	f107 0304 	add.w	r3, r7, #4
 8010ff2:	d008      	beq.n	8011006 <_svfprintf_r+0x73e>
 8010ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	17ce      	asrs	r6, r1, #31
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	e9c2 0100 	strd	r0, r1, [r2]
 8011002:	461f      	mov	r7, r3
 8011004:	e49a      	b.n	801093c <_svfprintf_r+0x74>
 8011006:	06ee      	lsls	r6, r5, #27
 8011008:	d503      	bpl.n	8011012 <_svfprintf_r+0x74a>
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801100e:	6011      	str	r1, [r2, #0]
 8011010:	e7f7      	b.n	8011002 <_svfprintf_r+0x73a>
 8011012:	0668      	lsls	r0, r5, #25
 8011014:	d5f9      	bpl.n	801100a <_svfprintf_r+0x742>
 8011016:	683a      	ldr	r2, [r7, #0]
 8011018:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801101c:	8011      	strh	r1, [r2, #0]
 801101e:	e7f0      	b.n	8011002 <_svfprintf_r+0x73a>
 8011020:	f045 0510 	orr.w	r5, r5, #16
 8011024:	f015 0320 	ands.w	r3, r5, #32
 8011028:	d022      	beq.n	8011070 <_svfprintf_r+0x7a8>
 801102a:	3707      	adds	r7, #7
 801102c:	f027 0707 	bic.w	r7, r7, #7
 8011030:	f107 0308 	add.w	r3, r7, #8
 8011034:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011038:	9304      	str	r3, [sp, #16]
 801103a:	2300      	movs	r3, #0
 801103c:	2200      	movs	r2, #0
 801103e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011042:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8011046:	f000 83db 	beq.w	8011800 <_svfprintf_r+0xf38>
 801104a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 801104e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011050:	ea56 0207 	orrs.w	r2, r6, r7
 8011054:	f040 83d9 	bne.w	801180a <_svfprintf_r+0xf42>
 8011058:	f1b9 0f00 	cmp.w	r9, #0
 801105c:	f000 80aa 	beq.w	80111b4 <_svfprintf_r+0x8ec>
 8011060:	2b01      	cmp	r3, #1
 8011062:	d076      	beq.n	8011152 <_svfprintf_r+0x88a>
 8011064:	2b02      	cmp	r3, #2
 8011066:	f000 8091 	beq.w	801118c <_svfprintf_r+0x8c4>
 801106a:	2600      	movs	r6, #0
 801106c:	2700      	movs	r7, #0
 801106e:	e3d2      	b.n	8011816 <_svfprintf_r+0xf4e>
 8011070:	1d3a      	adds	r2, r7, #4
 8011072:	f015 0110 	ands.w	r1, r5, #16
 8011076:	9204      	str	r2, [sp, #16]
 8011078:	d002      	beq.n	8011080 <_svfprintf_r+0x7b8>
 801107a:	683e      	ldr	r6, [r7, #0]
 801107c:	2700      	movs	r7, #0
 801107e:	e7dd      	b.n	801103c <_svfprintf_r+0x774>
 8011080:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011084:	d0f9      	beq.n	801107a <_svfprintf_r+0x7b2>
 8011086:	883e      	ldrh	r6, [r7, #0]
 8011088:	2700      	movs	r7, #0
 801108a:	e7d6      	b.n	801103a <_svfprintf_r+0x772>
 801108c:	1d3b      	adds	r3, r7, #4
 801108e:	9304      	str	r3, [sp, #16]
 8011090:	2330      	movs	r3, #48	; 0x30
 8011092:	2278      	movs	r2, #120	; 0x78
 8011094:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011098:	4b14      	ldr	r3, [pc, #80]	; (80110ec <_svfprintf_r+0x824>)
 801109a:	683e      	ldr	r6, [r7, #0]
 801109c:	9311      	str	r3, [sp, #68]	; 0x44
 801109e:	2700      	movs	r7, #0
 80110a0:	f045 0502 	orr.w	r5, r5, #2
 80110a4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80110a8:	2302      	movs	r3, #2
 80110aa:	9202      	str	r2, [sp, #8]
 80110ac:	e7c6      	b.n	801103c <_svfprintf_r+0x774>
 80110ae:	1d3b      	adds	r3, r7, #4
 80110b0:	2600      	movs	r6, #0
 80110b2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	f8d7 8000 	ldr.w	r8, [r7]
 80110bc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80110c0:	d00a      	beq.n	80110d8 <_svfprintf_r+0x810>
 80110c2:	464a      	mov	r2, r9
 80110c4:	4631      	mov	r1, r6
 80110c6:	4640      	mov	r0, r8
 80110c8:	f7ef f89a 	bl	8000200 <memchr>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	f000 808d 	beq.w	80111ec <_svfprintf_r+0x924>
 80110d2:	eba0 0908 	sub.w	r9, r0, r8
 80110d6:	e5cb      	b.n	8010c70 <_svfprintf_r+0x3a8>
 80110d8:	4640      	mov	r0, r8
 80110da:	f7ef f883 	bl	80001e4 <strlen>
 80110de:	4681      	mov	r9, r0
 80110e0:	e5c6      	b.n	8010c70 <_svfprintf_r+0x3a8>
 80110e2:	bf00      	nop
 80110e4:	080faf38 	.word	0x080faf38
 80110e8:	080faf48 	.word	0x080faf48
 80110ec:	080faf25 	.word	0x080faf25
 80110f0:	f045 0510 	orr.w	r5, r5, #16
 80110f4:	06a9      	lsls	r1, r5, #26
 80110f6:	d509      	bpl.n	801110c <_svfprintf_r+0x844>
 80110f8:	3707      	adds	r7, #7
 80110fa:	f027 0707 	bic.w	r7, r7, #7
 80110fe:	f107 0308 	add.w	r3, r7, #8
 8011102:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011106:	9304      	str	r3, [sp, #16]
 8011108:	2301      	movs	r3, #1
 801110a:	e797      	b.n	801103c <_svfprintf_r+0x774>
 801110c:	1d3b      	adds	r3, r7, #4
 801110e:	f015 0f10 	tst.w	r5, #16
 8011112:	9304      	str	r3, [sp, #16]
 8011114:	d001      	beq.n	801111a <_svfprintf_r+0x852>
 8011116:	683e      	ldr	r6, [r7, #0]
 8011118:	e002      	b.n	8011120 <_svfprintf_r+0x858>
 801111a:	066a      	lsls	r2, r5, #25
 801111c:	d5fb      	bpl.n	8011116 <_svfprintf_r+0x84e>
 801111e:	883e      	ldrh	r6, [r7, #0]
 8011120:	2700      	movs	r7, #0
 8011122:	e7f1      	b.n	8011108 <_svfprintf_r+0x840>
 8011124:	b10b      	cbz	r3, 801112a <_svfprintf_r+0x862>
 8011126:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801112a:	4ba3      	ldr	r3, [pc, #652]	; (80113b8 <_svfprintf_r+0xaf0>)
 801112c:	e4c2      	b.n	8010ab4 <_svfprintf_r+0x1ec>
 801112e:	1d3b      	adds	r3, r7, #4
 8011130:	f015 0f10 	tst.w	r5, #16
 8011134:	9304      	str	r3, [sp, #16]
 8011136:	d001      	beq.n	801113c <_svfprintf_r+0x874>
 8011138:	683e      	ldr	r6, [r7, #0]
 801113a:	e002      	b.n	8011142 <_svfprintf_r+0x87a>
 801113c:	066e      	lsls	r6, r5, #25
 801113e:	d5fb      	bpl.n	8011138 <_svfprintf_r+0x870>
 8011140:	883e      	ldrh	r6, [r7, #0]
 8011142:	2700      	movs	r7, #0
 8011144:	e4c2      	b.n	8010acc <_svfprintf_r+0x204>
 8011146:	4643      	mov	r3, r8
 8011148:	e366      	b.n	8011818 <_svfprintf_r+0xf50>
 801114a:	2f00      	cmp	r7, #0
 801114c:	bf08      	it	eq
 801114e:	2e0a      	cmpeq	r6, #10
 8011150:	d205      	bcs.n	801115e <_svfprintf_r+0x896>
 8011152:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8011156:	3630      	adds	r6, #48	; 0x30
 8011158:	f808 6d41 	strb.w	r6, [r8, #-65]!
 801115c:	e377      	b.n	801184e <_svfprintf_r+0xf86>
 801115e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011162:	4630      	mov	r0, r6
 8011164:	4639      	mov	r1, r7
 8011166:	220a      	movs	r2, #10
 8011168:	2300      	movs	r3, #0
 801116a:	f7ef fd29 	bl	8000bc0 <__aeabi_uldivmod>
 801116e:	3230      	adds	r2, #48	; 0x30
 8011170:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8011174:	2300      	movs	r3, #0
 8011176:	4630      	mov	r0, r6
 8011178:	4639      	mov	r1, r7
 801117a:	220a      	movs	r2, #10
 801117c:	f7ef fd20 	bl	8000bc0 <__aeabi_uldivmod>
 8011180:	4606      	mov	r6, r0
 8011182:	460f      	mov	r7, r1
 8011184:	ea56 0307 	orrs.w	r3, r6, r7
 8011188:	d1eb      	bne.n	8011162 <_svfprintf_r+0x89a>
 801118a:	e360      	b.n	801184e <_svfprintf_r+0xf86>
 801118c:	2600      	movs	r6, #0
 801118e:	2700      	movs	r7, #0
 8011190:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011194:	f006 030f 	and.w	r3, r6, #15
 8011198:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801119a:	5cd3      	ldrb	r3, [r2, r3]
 801119c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80111a0:	0933      	lsrs	r3, r6, #4
 80111a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80111a6:	093a      	lsrs	r2, r7, #4
 80111a8:	461e      	mov	r6, r3
 80111aa:	4617      	mov	r7, r2
 80111ac:	ea56 0307 	orrs.w	r3, r6, r7
 80111b0:	d1f0      	bne.n	8011194 <_svfprintf_r+0x8cc>
 80111b2:	e34c      	b.n	801184e <_svfprintf_r+0xf86>
 80111b4:	b93b      	cbnz	r3, 80111c6 <_svfprintf_r+0x8fe>
 80111b6:	07ea      	lsls	r2, r5, #31
 80111b8:	d505      	bpl.n	80111c6 <_svfprintf_r+0x8fe>
 80111ba:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80111be:	2330      	movs	r3, #48	; 0x30
 80111c0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80111c4:	e343      	b.n	801184e <_svfprintf_r+0xf86>
 80111c6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80111ca:	e340      	b.n	801184e <_svfprintf_r+0xf86>
 80111cc:	b10b      	cbz	r3, 80111d2 <_svfprintf_r+0x90a>
 80111ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80111d2:	9b02      	ldr	r3, [sp, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f000 82f7 	beq.w	80117c8 <_svfprintf_r+0xf00>
 80111da:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80111de:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80111e2:	2600      	movs	r6, #0
 80111e4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80111e8:	9704      	str	r7, [sp, #16]
 80111ea:	e4e8      	b.n	8010bbe <_svfprintf_r+0x2f6>
 80111ec:	4606      	mov	r6, r0
 80111ee:	e53f      	b.n	8010c70 <_svfprintf_r+0x3a8>
 80111f0:	2310      	movs	r3, #16
 80111f2:	6063      	str	r3, [r4, #4]
 80111f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111f6:	3310      	adds	r3, #16
 80111f8:	9321      	str	r3, [sp, #132]	; 0x84
 80111fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80111fc:	3301      	adds	r3, #1
 80111fe:	2b07      	cmp	r3, #7
 8011200:	9320      	str	r3, [sp, #128]	; 0x80
 8011202:	dc04      	bgt.n	801120e <_svfprintf_r+0x946>
 8011204:	3408      	adds	r4, #8
 8011206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011208:	3b10      	subs	r3, #16
 801120a:	930c      	str	r3, [sp, #48]	; 0x30
 801120c:	e615      	b.n	8010e3a <_svfprintf_r+0x572>
 801120e:	aa1f      	add	r2, sp, #124	; 0x7c
 8011210:	4651      	mov	r1, sl
 8011212:	4658      	mov	r0, fp
 8011214:	f003 f8d9 	bl	80143ca <__ssprint_r>
 8011218:	2800      	cmp	r0, #0
 801121a:	f040 82b6 	bne.w	801178a <_svfprintf_r+0xec2>
 801121e:	ac2c      	add	r4, sp, #176	; 0xb0
 8011220:	e7f1      	b.n	8011206 <_svfprintf_r+0x93e>
 8011222:	aa1f      	add	r2, sp, #124	; 0x7c
 8011224:	4651      	mov	r1, sl
 8011226:	4658      	mov	r0, fp
 8011228:	f003 f8cf 	bl	80143ca <__ssprint_r>
 801122c:	2800      	cmp	r0, #0
 801122e:	f040 82ac 	bne.w	801178a <_svfprintf_r+0xec2>
 8011232:	ac2c      	add	r4, sp, #176	; 0xb0
 8011234:	e614      	b.n	8010e60 <_svfprintf_r+0x598>
 8011236:	aa1f      	add	r2, sp, #124	; 0x7c
 8011238:	4651      	mov	r1, sl
 801123a:	4658      	mov	r0, fp
 801123c:	f003 f8c5 	bl	80143ca <__ssprint_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	f040 82a2 	bne.w	801178a <_svfprintf_r+0xec2>
 8011246:	ac2c      	add	r4, sp, #176	; 0xb0
 8011248:	e61c      	b.n	8010e84 <_svfprintf_r+0x5bc>
 801124a:	aa1f      	add	r2, sp, #124	; 0x7c
 801124c:	4651      	mov	r1, sl
 801124e:	4658      	mov	r0, fp
 8011250:	f003 f8bb 	bl	80143ca <__ssprint_r>
 8011254:	2800      	cmp	r0, #0
 8011256:	f040 8298 	bne.w	801178a <_svfprintf_r+0xec2>
 801125a:	ac2c      	add	r4, sp, #176	; 0xb0
 801125c:	e622      	b.n	8010ea4 <_svfprintf_r+0x5dc>
 801125e:	2210      	movs	r2, #16
 8011260:	6062      	str	r2, [r4, #4]
 8011262:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011264:	3210      	adds	r2, #16
 8011266:	9221      	str	r2, [sp, #132]	; 0x84
 8011268:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801126a:	3201      	adds	r2, #1
 801126c:	2a07      	cmp	r2, #7
 801126e:	9220      	str	r2, [sp, #128]	; 0x80
 8011270:	dc02      	bgt.n	8011278 <_svfprintf_r+0x9b0>
 8011272:	3408      	adds	r4, #8
 8011274:	3b10      	subs	r3, #16
 8011276:	e61d      	b.n	8010eb4 <_svfprintf_r+0x5ec>
 8011278:	aa1f      	add	r2, sp, #124	; 0x7c
 801127a:	4651      	mov	r1, sl
 801127c:	4658      	mov	r0, fp
 801127e:	930c      	str	r3, [sp, #48]	; 0x30
 8011280:	f003 f8a3 	bl	80143ca <__ssprint_r>
 8011284:	2800      	cmp	r0, #0
 8011286:	f040 8280 	bne.w	801178a <_svfprintf_r+0xec2>
 801128a:	ac2c      	add	r4, sp, #176	; 0xb0
 801128c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801128e:	e7f1      	b.n	8011274 <_svfprintf_r+0x9ac>
 8011290:	aa1f      	add	r2, sp, #124	; 0x7c
 8011292:	4651      	mov	r1, sl
 8011294:	4658      	mov	r0, fp
 8011296:	f003 f898 	bl	80143ca <__ssprint_r>
 801129a:	2800      	cmp	r0, #0
 801129c:	f040 8275 	bne.w	801178a <_svfprintf_r+0xec2>
 80112a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80112a2:	e617      	b.n	8010ed4 <_svfprintf_r+0x60c>
 80112a4:	2310      	movs	r3, #16
 80112a6:	6063      	str	r3, [r4, #4]
 80112a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112aa:	3310      	adds	r3, #16
 80112ac:	9321      	str	r3, [sp, #132]	; 0x84
 80112ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80112b0:	3301      	adds	r3, #1
 80112b2:	2b07      	cmp	r3, #7
 80112b4:	9320      	str	r3, [sp, #128]	; 0x80
 80112b6:	dc02      	bgt.n	80112be <_svfprintf_r+0x9f6>
 80112b8:	3408      	adds	r4, #8
 80112ba:	3e10      	subs	r6, #16
 80112bc:	e60e      	b.n	8010edc <_svfprintf_r+0x614>
 80112be:	aa1f      	add	r2, sp, #124	; 0x7c
 80112c0:	4651      	mov	r1, sl
 80112c2:	4658      	mov	r0, fp
 80112c4:	f003 f881 	bl	80143ca <__ssprint_r>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	f040 825e 	bne.w	801178a <_svfprintf_r+0xec2>
 80112ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80112d0:	e7f3      	b.n	80112ba <_svfprintf_r+0x9f2>
 80112d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80112d4:	4651      	mov	r1, sl
 80112d6:	4658      	mov	r0, fp
 80112d8:	f003 f877 	bl	80143ca <__ssprint_r>
 80112dc:	2800      	cmp	r0, #0
 80112de:	f040 8254 	bne.w	801178a <_svfprintf_r+0xec2>
 80112e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80112e4:	e60a      	b.n	8010efc <_svfprintf_r+0x634>
 80112e6:	9b02      	ldr	r3, [sp, #8]
 80112e8:	2b65      	cmp	r3, #101	; 0x65
 80112ea:	f340 81a9 	ble.w	8011640 <_svfprintf_r+0xd78>
 80112ee:	2200      	movs	r2, #0
 80112f0:	2300      	movs	r3, #0
 80112f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112f6:	f7ef fbf3 	bl	8000ae0 <__aeabi_dcmpeq>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d062      	beq.n	80113c4 <_svfprintf_r+0xafc>
 80112fe:	4b2f      	ldr	r3, [pc, #188]	; (80113bc <_svfprintf_r+0xaf4>)
 8011300:	6023      	str	r3, [r4, #0]
 8011302:	2301      	movs	r3, #1
 8011304:	6063      	str	r3, [r4, #4]
 8011306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011308:	3301      	adds	r3, #1
 801130a:	9321      	str	r3, [sp, #132]	; 0x84
 801130c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801130e:	3301      	adds	r3, #1
 8011310:	2b07      	cmp	r3, #7
 8011312:	9320      	str	r3, [sp, #128]	; 0x80
 8011314:	dc25      	bgt.n	8011362 <_svfprintf_r+0xa9a>
 8011316:	3408      	adds	r4, #8
 8011318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801131a:	9a03      	ldr	r2, [sp, #12]
 801131c:	4293      	cmp	r3, r2
 801131e:	db02      	blt.n	8011326 <_svfprintf_r+0xa5e>
 8011320:	07ee      	lsls	r6, r5, #31
 8011322:	f57f ae02 	bpl.w	8010f2a <_svfprintf_r+0x662>
 8011326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	9b08      	ldr	r3, [sp, #32]
 801132c:	6063      	str	r3, [r4, #4]
 801132e:	9a08      	ldr	r2, [sp, #32]
 8011330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011332:	4413      	add	r3, r2
 8011334:	9321      	str	r3, [sp, #132]	; 0x84
 8011336:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011338:	3301      	adds	r3, #1
 801133a:	2b07      	cmp	r3, #7
 801133c:	9320      	str	r3, [sp, #128]	; 0x80
 801133e:	dc1a      	bgt.n	8011376 <_svfprintf_r+0xaae>
 8011340:	3408      	adds	r4, #8
 8011342:	9b03      	ldr	r3, [sp, #12]
 8011344:	1e5e      	subs	r6, r3, #1
 8011346:	2e00      	cmp	r6, #0
 8011348:	f77f adef 	ble.w	8010f2a <_svfprintf_r+0x662>
 801134c:	4f1c      	ldr	r7, [pc, #112]	; (80113c0 <_svfprintf_r+0xaf8>)
 801134e:	f04f 0810 	mov.w	r8, #16
 8011352:	2e10      	cmp	r6, #16
 8011354:	6027      	str	r7, [r4, #0]
 8011356:	dc18      	bgt.n	801138a <_svfprintf_r+0xac2>
 8011358:	6066      	str	r6, [r4, #4]
 801135a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801135c:	441e      	add	r6, r3
 801135e:	9621      	str	r6, [sp, #132]	; 0x84
 8011360:	e5d4      	b.n	8010f0c <_svfprintf_r+0x644>
 8011362:	aa1f      	add	r2, sp, #124	; 0x7c
 8011364:	4651      	mov	r1, sl
 8011366:	4658      	mov	r0, fp
 8011368:	f003 f82f 	bl	80143ca <__ssprint_r>
 801136c:	2800      	cmp	r0, #0
 801136e:	f040 820c 	bne.w	801178a <_svfprintf_r+0xec2>
 8011372:	ac2c      	add	r4, sp, #176	; 0xb0
 8011374:	e7d0      	b.n	8011318 <_svfprintf_r+0xa50>
 8011376:	aa1f      	add	r2, sp, #124	; 0x7c
 8011378:	4651      	mov	r1, sl
 801137a:	4658      	mov	r0, fp
 801137c:	f003 f825 	bl	80143ca <__ssprint_r>
 8011380:	2800      	cmp	r0, #0
 8011382:	f040 8202 	bne.w	801178a <_svfprintf_r+0xec2>
 8011386:	ac2c      	add	r4, sp, #176	; 0xb0
 8011388:	e7db      	b.n	8011342 <_svfprintf_r+0xa7a>
 801138a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801138c:	f8c4 8004 	str.w	r8, [r4, #4]
 8011390:	3310      	adds	r3, #16
 8011392:	9321      	str	r3, [sp, #132]	; 0x84
 8011394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011396:	3301      	adds	r3, #1
 8011398:	2b07      	cmp	r3, #7
 801139a:	9320      	str	r3, [sp, #128]	; 0x80
 801139c:	dc02      	bgt.n	80113a4 <_svfprintf_r+0xadc>
 801139e:	3408      	adds	r4, #8
 80113a0:	3e10      	subs	r6, #16
 80113a2:	e7d6      	b.n	8011352 <_svfprintf_r+0xa8a>
 80113a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80113a6:	4651      	mov	r1, sl
 80113a8:	4658      	mov	r0, fp
 80113aa:	f003 f80e 	bl	80143ca <__ssprint_r>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	f040 81eb 	bne.w	801178a <_svfprintf_r+0xec2>
 80113b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80113b6:	e7f3      	b.n	80113a0 <_svfprintf_r+0xad8>
 80113b8:	080faf25 	.word	0x080faf25
 80113bc:	080faf36 	.word	0x080faf36
 80113c0:	080faf48 	.word	0x080faf48
 80113c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	dc7a      	bgt.n	80114c0 <_svfprintf_r+0xbf8>
 80113ca:	4b9b      	ldr	r3, [pc, #620]	; (8011638 <_svfprintf_r+0xd70>)
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	2301      	movs	r3, #1
 80113d0:	6063      	str	r3, [r4, #4]
 80113d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113d4:	3301      	adds	r3, #1
 80113d6:	9321      	str	r3, [sp, #132]	; 0x84
 80113d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80113da:	3301      	adds	r3, #1
 80113dc:	2b07      	cmp	r3, #7
 80113de:	9320      	str	r3, [sp, #128]	; 0x80
 80113e0:	dc44      	bgt.n	801146c <_svfprintf_r+0xba4>
 80113e2:	3408      	adds	r4, #8
 80113e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113e6:	b923      	cbnz	r3, 80113f2 <_svfprintf_r+0xb2a>
 80113e8:	9b03      	ldr	r3, [sp, #12]
 80113ea:	b913      	cbnz	r3, 80113f2 <_svfprintf_r+0xb2a>
 80113ec:	07e8      	lsls	r0, r5, #31
 80113ee:	f57f ad9c 	bpl.w	8010f2a <_svfprintf_r+0x662>
 80113f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	9b08      	ldr	r3, [sp, #32]
 80113f8:	6063      	str	r3, [r4, #4]
 80113fa:	9a08      	ldr	r2, [sp, #32]
 80113fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113fe:	4413      	add	r3, r2
 8011400:	9321      	str	r3, [sp, #132]	; 0x84
 8011402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011404:	3301      	adds	r3, #1
 8011406:	2b07      	cmp	r3, #7
 8011408:	9320      	str	r3, [sp, #128]	; 0x80
 801140a:	dc39      	bgt.n	8011480 <_svfprintf_r+0xbb8>
 801140c:	f104 0308 	add.w	r3, r4, #8
 8011410:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011412:	2e00      	cmp	r6, #0
 8011414:	da19      	bge.n	801144a <_svfprintf_r+0xb82>
 8011416:	4f89      	ldr	r7, [pc, #548]	; (801163c <_svfprintf_r+0xd74>)
 8011418:	4276      	negs	r6, r6
 801141a:	2410      	movs	r4, #16
 801141c:	2e10      	cmp	r6, #16
 801141e:	601f      	str	r7, [r3, #0]
 8011420:	dc38      	bgt.n	8011494 <_svfprintf_r+0xbcc>
 8011422:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011424:	605e      	str	r6, [r3, #4]
 8011426:	4416      	add	r6, r2
 8011428:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801142a:	9621      	str	r6, [sp, #132]	; 0x84
 801142c:	3201      	adds	r2, #1
 801142e:	2a07      	cmp	r2, #7
 8011430:	f103 0308 	add.w	r3, r3, #8
 8011434:	9220      	str	r2, [sp, #128]	; 0x80
 8011436:	dd08      	ble.n	801144a <_svfprintf_r+0xb82>
 8011438:	aa1f      	add	r2, sp, #124	; 0x7c
 801143a:	4651      	mov	r1, sl
 801143c:	4658      	mov	r0, fp
 801143e:	f002 ffc4 	bl	80143ca <__ssprint_r>
 8011442:	2800      	cmp	r0, #0
 8011444:	f040 81a1 	bne.w	801178a <_svfprintf_r+0xec2>
 8011448:	ab2c      	add	r3, sp, #176	; 0xb0
 801144a:	9a03      	ldr	r2, [sp, #12]
 801144c:	605a      	str	r2, [r3, #4]
 801144e:	9903      	ldr	r1, [sp, #12]
 8011450:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011452:	f8c3 8000 	str.w	r8, [r3]
 8011456:	440a      	add	r2, r1
 8011458:	9221      	str	r2, [sp, #132]	; 0x84
 801145a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801145c:	3201      	adds	r2, #1
 801145e:	2a07      	cmp	r2, #7
 8011460:	9220      	str	r2, [sp, #128]	; 0x80
 8011462:	f73f ad59 	bgt.w	8010f18 <_svfprintf_r+0x650>
 8011466:	f103 0408 	add.w	r4, r3, #8
 801146a:	e55e      	b.n	8010f2a <_svfprintf_r+0x662>
 801146c:	aa1f      	add	r2, sp, #124	; 0x7c
 801146e:	4651      	mov	r1, sl
 8011470:	4658      	mov	r0, fp
 8011472:	f002 ffaa 	bl	80143ca <__ssprint_r>
 8011476:	2800      	cmp	r0, #0
 8011478:	f040 8187 	bne.w	801178a <_svfprintf_r+0xec2>
 801147c:	ac2c      	add	r4, sp, #176	; 0xb0
 801147e:	e7b1      	b.n	80113e4 <_svfprintf_r+0xb1c>
 8011480:	aa1f      	add	r2, sp, #124	; 0x7c
 8011482:	4651      	mov	r1, sl
 8011484:	4658      	mov	r0, fp
 8011486:	f002 ffa0 	bl	80143ca <__ssprint_r>
 801148a:	2800      	cmp	r0, #0
 801148c:	f040 817d 	bne.w	801178a <_svfprintf_r+0xec2>
 8011490:	ab2c      	add	r3, sp, #176	; 0xb0
 8011492:	e7bd      	b.n	8011410 <_svfprintf_r+0xb48>
 8011494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011496:	605c      	str	r4, [r3, #4]
 8011498:	3210      	adds	r2, #16
 801149a:	9221      	str	r2, [sp, #132]	; 0x84
 801149c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801149e:	3201      	adds	r2, #1
 80114a0:	2a07      	cmp	r2, #7
 80114a2:	9220      	str	r2, [sp, #128]	; 0x80
 80114a4:	dc02      	bgt.n	80114ac <_svfprintf_r+0xbe4>
 80114a6:	3308      	adds	r3, #8
 80114a8:	3e10      	subs	r6, #16
 80114aa:	e7b7      	b.n	801141c <_svfprintf_r+0xb54>
 80114ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80114ae:	4651      	mov	r1, sl
 80114b0:	4658      	mov	r0, fp
 80114b2:	f002 ff8a 	bl	80143ca <__ssprint_r>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	f040 8167 	bne.w	801178a <_svfprintf_r+0xec2>
 80114bc:	ab2c      	add	r3, sp, #176	; 0xb0
 80114be:	e7f3      	b.n	80114a8 <_svfprintf_r+0xbe0>
 80114c0:	9b03      	ldr	r3, [sp, #12]
 80114c2:	42bb      	cmp	r3, r7
 80114c4:	bfa8      	it	ge
 80114c6:	463b      	movge	r3, r7
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	461e      	mov	r6, r3
 80114cc:	dd0b      	ble.n	80114e6 <_svfprintf_r+0xc1e>
 80114ce:	6063      	str	r3, [r4, #4]
 80114d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114d2:	f8c4 8000 	str.w	r8, [r4]
 80114d6:	4433      	add	r3, r6
 80114d8:	9321      	str	r3, [sp, #132]	; 0x84
 80114da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80114dc:	3301      	adds	r3, #1
 80114de:	2b07      	cmp	r3, #7
 80114e0:	9320      	str	r3, [sp, #128]	; 0x80
 80114e2:	dc5f      	bgt.n	80115a4 <_svfprintf_r+0xcdc>
 80114e4:	3408      	adds	r4, #8
 80114e6:	2e00      	cmp	r6, #0
 80114e8:	bfac      	ite	ge
 80114ea:	1bbe      	subge	r6, r7, r6
 80114ec:	463e      	movlt	r6, r7
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	dd0f      	ble.n	8011512 <_svfprintf_r+0xc4a>
 80114f2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801163c <_svfprintf_r+0xd74>
 80114f6:	f8c4 9000 	str.w	r9, [r4]
 80114fa:	2e10      	cmp	r6, #16
 80114fc:	dc5c      	bgt.n	80115b8 <_svfprintf_r+0xcf0>
 80114fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011500:	6066      	str	r6, [r4, #4]
 8011502:	441e      	add	r6, r3
 8011504:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011506:	9621      	str	r6, [sp, #132]	; 0x84
 8011508:	3301      	adds	r3, #1
 801150a:	2b07      	cmp	r3, #7
 801150c:	9320      	str	r3, [sp, #128]	; 0x80
 801150e:	dc6a      	bgt.n	80115e6 <_svfprintf_r+0xd1e>
 8011510:	3408      	adds	r4, #8
 8011512:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011514:	9a03      	ldr	r2, [sp, #12]
 8011516:	4293      	cmp	r3, r2
 8011518:	db01      	blt.n	801151e <_svfprintf_r+0xc56>
 801151a:	07e9      	lsls	r1, r5, #31
 801151c:	d50d      	bpl.n	801153a <_svfprintf_r+0xc72>
 801151e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	9b08      	ldr	r3, [sp, #32]
 8011524:	6063      	str	r3, [r4, #4]
 8011526:	9a08      	ldr	r2, [sp, #32]
 8011528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801152a:	4413      	add	r3, r2
 801152c:	9321      	str	r3, [sp, #132]	; 0x84
 801152e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011530:	3301      	adds	r3, #1
 8011532:	2b07      	cmp	r3, #7
 8011534:	9320      	str	r3, [sp, #128]	; 0x80
 8011536:	dc60      	bgt.n	80115fa <_svfprintf_r+0xd32>
 8011538:	3408      	adds	r4, #8
 801153a:	9b03      	ldr	r3, [sp, #12]
 801153c:	9a03      	ldr	r2, [sp, #12]
 801153e:	1bde      	subs	r6, r3, r7
 8011540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	429e      	cmp	r6, r3
 8011546:	bfa8      	it	ge
 8011548:	461e      	movge	r6, r3
 801154a:	2e00      	cmp	r6, #0
 801154c:	dd0b      	ble.n	8011566 <_svfprintf_r+0xc9e>
 801154e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011550:	6066      	str	r6, [r4, #4]
 8011552:	4433      	add	r3, r6
 8011554:	9321      	str	r3, [sp, #132]	; 0x84
 8011556:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011558:	3301      	adds	r3, #1
 801155a:	4447      	add	r7, r8
 801155c:	2b07      	cmp	r3, #7
 801155e:	6027      	str	r7, [r4, #0]
 8011560:	9320      	str	r3, [sp, #128]	; 0x80
 8011562:	dc54      	bgt.n	801160e <_svfprintf_r+0xd46>
 8011564:	3408      	adds	r4, #8
 8011566:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011568:	9a03      	ldr	r2, [sp, #12]
 801156a:	2e00      	cmp	r6, #0
 801156c:	eba2 0303 	sub.w	r3, r2, r3
 8011570:	bfac      	ite	ge
 8011572:	1b9e      	subge	r6, r3, r6
 8011574:	461e      	movlt	r6, r3
 8011576:	2e00      	cmp	r6, #0
 8011578:	f77f acd7 	ble.w	8010f2a <_svfprintf_r+0x662>
 801157c:	4f2f      	ldr	r7, [pc, #188]	; (801163c <_svfprintf_r+0xd74>)
 801157e:	f04f 0810 	mov.w	r8, #16
 8011582:	2e10      	cmp	r6, #16
 8011584:	6027      	str	r7, [r4, #0]
 8011586:	f77f aee7 	ble.w	8011358 <_svfprintf_r+0xa90>
 801158a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801158c:	f8c4 8004 	str.w	r8, [r4, #4]
 8011590:	3310      	adds	r3, #16
 8011592:	9321      	str	r3, [sp, #132]	; 0x84
 8011594:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011596:	3301      	adds	r3, #1
 8011598:	2b07      	cmp	r3, #7
 801159a:	9320      	str	r3, [sp, #128]	; 0x80
 801159c:	dc41      	bgt.n	8011622 <_svfprintf_r+0xd5a>
 801159e:	3408      	adds	r4, #8
 80115a0:	3e10      	subs	r6, #16
 80115a2:	e7ee      	b.n	8011582 <_svfprintf_r+0xcba>
 80115a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80115a6:	4651      	mov	r1, sl
 80115a8:	4658      	mov	r0, fp
 80115aa:	f002 ff0e 	bl	80143ca <__ssprint_r>
 80115ae:	2800      	cmp	r0, #0
 80115b0:	f040 80eb 	bne.w	801178a <_svfprintf_r+0xec2>
 80115b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80115b6:	e796      	b.n	80114e6 <_svfprintf_r+0xc1e>
 80115b8:	2310      	movs	r3, #16
 80115ba:	6063      	str	r3, [r4, #4]
 80115bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115be:	3310      	adds	r3, #16
 80115c0:	9321      	str	r3, [sp, #132]	; 0x84
 80115c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80115c4:	3301      	adds	r3, #1
 80115c6:	2b07      	cmp	r3, #7
 80115c8:	9320      	str	r3, [sp, #128]	; 0x80
 80115ca:	dc02      	bgt.n	80115d2 <_svfprintf_r+0xd0a>
 80115cc:	3408      	adds	r4, #8
 80115ce:	3e10      	subs	r6, #16
 80115d0:	e791      	b.n	80114f6 <_svfprintf_r+0xc2e>
 80115d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80115d4:	4651      	mov	r1, sl
 80115d6:	4658      	mov	r0, fp
 80115d8:	f002 fef7 	bl	80143ca <__ssprint_r>
 80115dc:	2800      	cmp	r0, #0
 80115de:	f040 80d4 	bne.w	801178a <_svfprintf_r+0xec2>
 80115e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80115e4:	e7f3      	b.n	80115ce <_svfprintf_r+0xd06>
 80115e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80115e8:	4651      	mov	r1, sl
 80115ea:	4658      	mov	r0, fp
 80115ec:	f002 feed 	bl	80143ca <__ssprint_r>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	f040 80ca 	bne.w	801178a <_svfprintf_r+0xec2>
 80115f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80115f8:	e78b      	b.n	8011512 <_svfprintf_r+0xc4a>
 80115fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80115fc:	4651      	mov	r1, sl
 80115fe:	4658      	mov	r0, fp
 8011600:	f002 fee3 	bl	80143ca <__ssprint_r>
 8011604:	2800      	cmp	r0, #0
 8011606:	f040 80c0 	bne.w	801178a <_svfprintf_r+0xec2>
 801160a:	ac2c      	add	r4, sp, #176	; 0xb0
 801160c:	e795      	b.n	801153a <_svfprintf_r+0xc72>
 801160e:	aa1f      	add	r2, sp, #124	; 0x7c
 8011610:	4651      	mov	r1, sl
 8011612:	4658      	mov	r0, fp
 8011614:	f002 fed9 	bl	80143ca <__ssprint_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	f040 80b6 	bne.w	801178a <_svfprintf_r+0xec2>
 801161e:	ac2c      	add	r4, sp, #176	; 0xb0
 8011620:	e7a1      	b.n	8011566 <_svfprintf_r+0xc9e>
 8011622:	aa1f      	add	r2, sp, #124	; 0x7c
 8011624:	4651      	mov	r1, sl
 8011626:	4658      	mov	r0, fp
 8011628:	f002 fecf 	bl	80143ca <__ssprint_r>
 801162c:	2800      	cmp	r0, #0
 801162e:	f040 80ac 	bne.w	801178a <_svfprintf_r+0xec2>
 8011632:	ac2c      	add	r4, sp, #176	; 0xb0
 8011634:	e7b4      	b.n	80115a0 <_svfprintf_r+0xcd8>
 8011636:	bf00      	nop
 8011638:	080faf36 	.word	0x080faf36
 801163c:	080faf48 	.word	0x080faf48
 8011640:	9b03      	ldr	r3, [sp, #12]
 8011642:	2b01      	cmp	r3, #1
 8011644:	dc01      	bgt.n	801164a <_svfprintf_r+0xd82>
 8011646:	07ea      	lsls	r2, r5, #31
 8011648:	d576      	bpl.n	8011738 <_svfprintf_r+0xe70>
 801164a:	2301      	movs	r3, #1
 801164c:	6063      	str	r3, [r4, #4]
 801164e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011650:	f8c4 8000 	str.w	r8, [r4]
 8011654:	3301      	adds	r3, #1
 8011656:	9321      	str	r3, [sp, #132]	; 0x84
 8011658:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801165a:	3301      	adds	r3, #1
 801165c:	2b07      	cmp	r3, #7
 801165e:	9320      	str	r3, [sp, #128]	; 0x80
 8011660:	dc36      	bgt.n	80116d0 <_svfprintf_r+0xe08>
 8011662:	3408      	adds	r4, #8
 8011664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011666:	6023      	str	r3, [r4, #0]
 8011668:	9b08      	ldr	r3, [sp, #32]
 801166a:	6063      	str	r3, [r4, #4]
 801166c:	9a08      	ldr	r2, [sp, #32]
 801166e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011670:	4413      	add	r3, r2
 8011672:	9321      	str	r3, [sp, #132]	; 0x84
 8011674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011676:	3301      	adds	r3, #1
 8011678:	2b07      	cmp	r3, #7
 801167a:	9320      	str	r3, [sp, #128]	; 0x80
 801167c:	dc31      	bgt.n	80116e2 <_svfprintf_r+0xe1a>
 801167e:	3408      	adds	r4, #8
 8011680:	2300      	movs	r3, #0
 8011682:	2200      	movs	r2, #0
 8011684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011688:	f7ef fa2a 	bl	8000ae0 <__aeabi_dcmpeq>
 801168c:	9b03      	ldr	r3, [sp, #12]
 801168e:	1e5e      	subs	r6, r3, #1
 8011690:	2800      	cmp	r0, #0
 8011692:	d12f      	bne.n	80116f4 <_svfprintf_r+0xe2c>
 8011694:	f108 0301 	add.w	r3, r8, #1
 8011698:	e884 0048 	stmia.w	r4, {r3, r6}
 801169c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801169e:	9a03      	ldr	r2, [sp, #12]
 80116a0:	3b01      	subs	r3, #1
 80116a2:	4413      	add	r3, r2
 80116a4:	9321      	str	r3, [sp, #132]	; 0x84
 80116a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80116a8:	3301      	adds	r3, #1
 80116aa:	2b07      	cmp	r3, #7
 80116ac:	9320      	str	r3, [sp, #128]	; 0x80
 80116ae:	dd4a      	ble.n	8011746 <_svfprintf_r+0xe7e>
 80116b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80116b2:	4651      	mov	r1, sl
 80116b4:	4658      	mov	r0, fp
 80116b6:	f002 fe88 	bl	80143ca <__ssprint_r>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d165      	bne.n	801178a <_svfprintf_r+0xec2>
 80116be:	ac2c      	add	r4, sp, #176	; 0xb0
 80116c0:	ab1b      	add	r3, sp, #108	; 0x6c
 80116c2:	6023      	str	r3, [r4, #0]
 80116c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116c6:	6063      	str	r3, [r4, #4]
 80116c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80116ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116cc:	4413      	add	r3, r2
 80116ce:	e41c      	b.n	8010f0a <_svfprintf_r+0x642>
 80116d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80116d2:	4651      	mov	r1, sl
 80116d4:	4658      	mov	r0, fp
 80116d6:	f002 fe78 	bl	80143ca <__ssprint_r>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d155      	bne.n	801178a <_svfprintf_r+0xec2>
 80116de:	ac2c      	add	r4, sp, #176	; 0xb0
 80116e0:	e7c0      	b.n	8011664 <_svfprintf_r+0xd9c>
 80116e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80116e4:	4651      	mov	r1, sl
 80116e6:	4658      	mov	r0, fp
 80116e8:	f002 fe6f 	bl	80143ca <__ssprint_r>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d14c      	bne.n	801178a <_svfprintf_r+0xec2>
 80116f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80116f2:	e7c5      	b.n	8011680 <_svfprintf_r+0xdb8>
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	dde3      	ble.n	80116c0 <_svfprintf_r+0xdf8>
 80116f8:	4f59      	ldr	r7, [pc, #356]	; (8011860 <_svfprintf_r+0xf98>)
 80116fa:	f04f 0810 	mov.w	r8, #16
 80116fe:	2e10      	cmp	r6, #16
 8011700:	6027      	str	r7, [r4, #0]
 8011702:	dc04      	bgt.n	801170e <_svfprintf_r+0xe46>
 8011704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011706:	6066      	str	r6, [r4, #4]
 8011708:	441e      	add	r6, r3
 801170a:	9621      	str	r6, [sp, #132]	; 0x84
 801170c:	e7cb      	b.n	80116a6 <_svfprintf_r+0xdde>
 801170e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011710:	f8c4 8004 	str.w	r8, [r4, #4]
 8011714:	3310      	adds	r3, #16
 8011716:	9321      	str	r3, [sp, #132]	; 0x84
 8011718:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801171a:	3301      	adds	r3, #1
 801171c:	2b07      	cmp	r3, #7
 801171e:	9320      	str	r3, [sp, #128]	; 0x80
 8011720:	dc02      	bgt.n	8011728 <_svfprintf_r+0xe60>
 8011722:	3408      	adds	r4, #8
 8011724:	3e10      	subs	r6, #16
 8011726:	e7ea      	b.n	80116fe <_svfprintf_r+0xe36>
 8011728:	aa1f      	add	r2, sp, #124	; 0x7c
 801172a:	4651      	mov	r1, sl
 801172c:	4658      	mov	r0, fp
 801172e:	f002 fe4c 	bl	80143ca <__ssprint_r>
 8011732:	bb50      	cbnz	r0, 801178a <_svfprintf_r+0xec2>
 8011734:	ac2c      	add	r4, sp, #176	; 0xb0
 8011736:	e7f5      	b.n	8011724 <_svfprintf_r+0xe5c>
 8011738:	2301      	movs	r3, #1
 801173a:	6063      	str	r3, [r4, #4]
 801173c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801173e:	f8c4 8000 	str.w	r8, [r4]
 8011742:	3301      	adds	r3, #1
 8011744:	e7ae      	b.n	80116a4 <_svfprintf_r+0xddc>
 8011746:	3408      	adds	r4, #8
 8011748:	e7ba      	b.n	80116c0 <_svfprintf_r+0xdf8>
 801174a:	3408      	adds	r4, #8
 801174c:	f7ff bbed 	b.w	8010f2a <_svfprintf_r+0x662>
 8011750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011754:	1a9d      	subs	r5, r3, r2
 8011756:	2d00      	cmp	r5, #0
 8011758:	f77f abea 	ble.w	8010f30 <_svfprintf_r+0x668>
 801175c:	2610      	movs	r6, #16
 801175e:	4b41      	ldr	r3, [pc, #260]	; (8011864 <_svfprintf_r+0xf9c>)
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	2d10      	cmp	r5, #16
 8011764:	dc1b      	bgt.n	801179e <_svfprintf_r+0xed6>
 8011766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011768:	6065      	str	r5, [r4, #4]
 801176a:	441d      	add	r5, r3
 801176c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801176e:	9521      	str	r5, [sp, #132]	; 0x84
 8011770:	3301      	adds	r3, #1
 8011772:	2b07      	cmp	r3, #7
 8011774:	9320      	str	r3, [sp, #128]	; 0x80
 8011776:	f77f abdb 	ble.w	8010f30 <_svfprintf_r+0x668>
 801177a:	aa1f      	add	r2, sp, #124	; 0x7c
 801177c:	4651      	mov	r1, sl
 801177e:	4658      	mov	r0, fp
 8011780:	f002 fe23 	bl	80143ca <__ssprint_r>
 8011784:	2800      	cmp	r0, #0
 8011786:	f43f abd3 	beq.w	8010f30 <_svfprintf_r+0x668>
 801178a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801178e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011794:	bf18      	it	ne
 8011796:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801179a:	f7ff b8b9 	b.w	8010910 <_svfprintf_r+0x48>
 801179e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117a0:	6066      	str	r6, [r4, #4]
 80117a2:	3310      	adds	r3, #16
 80117a4:	9321      	str	r3, [sp, #132]	; 0x84
 80117a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80117a8:	3301      	adds	r3, #1
 80117aa:	2b07      	cmp	r3, #7
 80117ac:	9320      	str	r3, [sp, #128]	; 0x80
 80117ae:	dc02      	bgt.n	80117b6 <_svfprintf_r+0xeee>
 80117b0:	3408      	adds	r4, #8
 80117b2:	3d10      	subs	r5, #16
 80117b4:	e7d3      	b.n	801175e <_svfprintf_r+0xe96>
 80117b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80117b8:	4651      	mov	r1, sl
 80117ba:	4658      	mov	r0, fp
 80117bc:	f002 fe05 	bl	80143ca <__ssprint_r>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d1e2      	bne.n	801178a <_svfprintf_r+0xec2>
 80117c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80117c6:	e7f4      	b.n	80117b2 <_svfprintf_r+0xeea>
 80117c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d0dd      	beq.n	801178a <_svfprintf_r+0xec2>
 80117ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80117d0:	4651      	mov	r1, sl
 80117d2:	4658      	mov	r0, fp
 80117d4:	f002 fdf9 	bl	80143ca <__ssprint_r>
 80117d8:	e7d7      	b.n	801178a <_svfprintf_r+0xec2>
 80117da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117de:	4610      	mov	r0, r2
 80117e0:	4619      	mov	r1, r3
 80117e2:	f7ef f9af 	bl	8000b44 <__aeabi_dcmpun>
 80117e6:	2800      	cmp	r0, #0
 80117e8:	f43f aa44 	beq.w	8010c74 <_svfprintf_r+0x3ac>
 80117ec:	4b1e      	ldr	r3, [pc, #120]	; (8011868 <_svfprintf_r+0xfa0>)
 80117ee:	4a1f      	ldr	r2, [pc, #124]	; (801186c <_svfprintf_r+0xfa4>)
 80117f0:	f7ff ba34 	b.w	8010c5c <_svfprintf_r+0x394>
 80117f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117f6:	eba3 0308 	sub.w	r3, r3, r8
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	f7ff bab5 	b.w	8010d6a <_svfprintf_r+0x4a2>
 8011800:	ea56 0207 	orrs.w	r2, r6, r7
 8011804:	950b      	str	r5, [sp, #44]	; 0x2c
 8011806:	f43f ac2b 	beq.w	8011060 <_svfprintf_r+0x798>
 801180a:	2b01      	cmp	r3, #1
 801180c:	f43f ac9d 	beq.w	801114a <_svfprintf_r+0x882>
 8011810:	2b02      	cmp	r3, #2
 8011812:	f43f acbd 	beq.w	8011190 <_svfprintf_r+0x8c8>
 8011816:	ab2c      	add	r3, sp, #176	; 0xb0
 8011818:	08f1      	lsrs	r1, r6, #3
 801181a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801181e:	08f8      	lsrs	r0, r7, #3
 8011820:	f006 0207 	and.w	r2, r6, #7
 8011824:	4607      	mov	r7, r0
 8011826:	460e      	mov	r6, r1
 8011828:	3230      	adds	r2, #48	; 0x30
 801182a:	ea56 0107 	orrs.w	r1, r6, r7
 801182e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8011832:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011836:	f47f ac86 	bne.w	8011146 <_svfprintf_r+0x87e>
 801183a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801183c:	07c9      	lsls	r1, r1, #31
 801183e:	d506      	bpl.n	801184e <_svfprintf_r+0xf86>
 8011840:	2a30      	cmp	r2, #48	; 0x30
 8011842:	d004      	beq.n	801184e <_svfprintf_r+0xf86>
 8011844:	2230      	movs	r2, #48	; 0x30
 8011846:	f808 2c01 	strb.w	r2, [r8, #-1]
 801184a:	f1a3 0802 	sub.w	r8, r3, #2
 801184e:	464e      	mov	r6, r9
 8011850:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8011854:	eba9 0908 	sub.w	r9, r9, r8
 8011858:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801185a:	2700      	movs	r7, #0
 801185c:	f7ff bad1 	b.w	8010e02 <_svfprintf_r+0x53a>
 8011860:	080faf48 	.word	0x080faf48
 8011864:	080faf38 	.word	0x080faf38
 8011868:	080faf0c 	.word	0x080faf0c
 801186c:	080faf10 	.word	0x080faf10

08011870 <_vfprintf_r>:
 8011870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011874:	b0bd      	sub	sp, #244	; 0xf4
 8011876:	4688      	mov	r8, r1
 8011878:	4615      	mov	r5, r2
 801187a:	461c      	mov	r4, r3
 801187c:	461f      	mov	r7, r3
 801187e:	4683      	mov	fp, r0
 8011880:	f002 fa12 	bl	8013ca8 <_localeconv_r>
 8011884:	6803      	ldr	r3, [r0, #0]
 8011886:	930d      	str	r3, [sp, #52]	; 0x34
 8011888:	4618      	mov	r0, r3
 801188a:	f7ee fcab 	bl	80001e4 <strlen>
 801188e:	9009      	str	r0, [sp, #36]	; 0x24
 8011890:	f1bb 0f00 	cmp.w	fp, #0
 8011894:	d005      	beq.n	80118a2 <_vfprintf_r+0x32>
 8011896:	f8db 3018 	ldr.w	r3, [fp, #24]
 801189a:	b913      	cbnz	r3, 80118a2 <_vfprintf_r+0x32>
 801189c:	4658      	mov	r0, fp
 801189e:	f002 f853 	bl	8013948 <__sinit>
 80118a2:	4b99      	ldr	r3, [pc, #612]	; (8011b08 <_vfprintf_r+0x298>)
 80118a4:	4598      	cmp	r8, r3
 80118a6:	d137      	bne.n	8011918 <_vfprintf_r+0xa8>
 80118a8:	f8db 8004 	ldr.w	r8, [fp, #4]
 80118ac:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80118b0:	07d8      	lsls	r0, r3, #31
 80118b2:	d407      	bmi.n	80118c4 <_vfprintf_r+0x54>
 80118b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80118b8:	0599      	lsls	r1, r3, #22
 80118ba:	d403      	bmi.n	80118c4 <_vfprintf_r+0x54>
 80118bc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80118c0:	f002 fa02 	bl	8013cc8 <__retarget_lock_acquire_recursive>
 80118c4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80118c8:	049a      	lsls	r2, r3, #18
 80118ca:	d409      	bmi.n	80118e0 <_vfprintf_r+0x70>
 80118cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80118d0:	f8a8 300c 	strh.w	r3, [r8, #12]
 80118d4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80118d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80118dc:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 80118e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80118e4:	071e      	lsls	r6, r3, #28
 80118e6:	d502      	bpl.n	80118ee <_vfprintf_r+0x7e>
 80118e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80118ec:	bb03      	cbnz	r3, 8011930 <_vfprintf_r+0xc0>
 80118ee:	4641      	mov	r1, r8
 80118f0:	4658      	mov	r0, fp
 80118f2:	f001 f839 	bl	8012968 <__swsetup_r>
 80118f6:	b1d8      	cbz	r0, 8011930 <_vfprintf_r+0xc0>
 80118f8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80118fc:	07dd      	lsls	r5, r3, #31
 80118fe:	d407      	bmi.n	8011910 <_vfprintf_r+0xa0>
 8011900:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8011904:	059c      	lsls	r4, r3, #22
 8011906:	d403      	bmi.n	8011910 <_vfprintf_r+0xa0>
 8011908:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 801190c:	f002 f9dd 	bl	8013cca <__retarget_lock_release_recursive>
 8011910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011914:	930a      	str	r3, [sp, #40]	; 0x28
 8011916:	e026      	b.n	8011966 <_vfprintf_r+0xf6>
 8011918:	4b7c      	ldr	r3, [pc, #496]	; (8011b0c <_vfprintf_r+0x29c>)
 801191a:	4598      	cmp	r8, r3
 801191c:	d102      	bne.n	8011924 <_vfprintf_r+0xb4>
 801191e:	f8db 8008 	ldr.w	r8, [fp, #8]
 8011922:	e7c3      	b.n	80118ac <_vfprintf_r+0x3c>
 8011924:	4b7a      	ldr	r3, [pc, #488]	; (8011b10 <_vfprintf_r+0x2a0>)
 8011926:	4598      	cmp	r8, r3
 8011928:	bf08      	it	eq
 801192a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 801192e:	e7bd      	b.n	80118ac <_vfprintf_r+0x3c>
 8011930:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8011934:	f003 021a 	and.w	r2, r3, #26
 8011938:	2a0a      	cmp	r2, #10
 801193a:	d118      	bne.n	801196e <_vfprintf_r+0xfe>
 801193c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8011940:	2a00      	cmp	r2, #0
 8011942:	db14      	blt.n	801196e <_vfprintf_r+0xfe>
 8011944:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8011948:	07d0      	lsls	r0, r2, #31
 801194a:	d405      	bmi.n	8011958 <_vfprintf_r+0xe8>
 801194c:	0599      	lsls	r1, r3, #22
 801194e:	d403      	bmi.n	8011958 <_vfprintf_r+0xe8>
 8011950:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8011954:	f002 f9b9 	bl	8013cca <__retarget_lock_release_recursive>
 8011958:	4623      	mov	r3, r4
 801195a:	462a      	mov	r2, r5
 801195c:	4641      	mov	r1, r8
 801195e:	4658      	mov	r0, fp
 8011960:	f000 ffc2 	bl	80128e8 <__sbprintf>
 8011964:	900a      	str	r0, [sp, #40]	; 0x28
 8011966:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011968:	b03d      	add	sp, #244	; 0xf4
 801196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8011b00 <_vfprintf_r+0x290>
 8011972:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011976:	2300      	movs	r3, #0
 8011978:	ac2c      	add	r4, sp, #176	; 0xb0
 801197a:	941f      	str	r4, [sp, #124]	; 0x7c
 801197c:	9321      	str	r3, [sp, #132]	; 0x84
 801197e:	9320      	str	r3, [sp, #128]	; 0x80
 8011980:	9505      	str	r5, [sp, #20]
 8011982:	9303      	str	r3, [sp, #12]
 8011984:	9311      	str	r3, [sp, #68]	; 0x44
 8011986:	9310      	str	r3, [sp, #64]	; 0x40
 8011988:	930a      	str	r3, [sp, #40]	; 0x28
 801198a:	9d05      	ldr	r5, [sp, #20]
 801198c:	462b      	mov	r3, r5
 801198e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011992:	b112      	cbz	r2, 801199a <_vfprintf_r+0x12a>
 8011994:	2a25      	cmp	r2, #37	; 0x25
 8011996:	f040 8083 	bne.w	8011aa0 <_vfprintf_r+0x230>
 801199a:	9b05      	ldr	r3, [sp, #20]
 801199c:	1aee      	subs	r6, r5, r3
 801199e:	d00d      	beq.n	80119bc <_vfprintf_r+0x14c>
 80119a0:	e884 0048 	stmia.w	r4, {r3, r6}
 80119a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119a6:	4433      	add	r3, r6
 80119a8:	9321      	str	r3, [sp, #132]	; 0x84
 80119aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80119ac:	3301      	adds	r3, #1
 80119ae:	2b07      	cmp	r3, #7
 80119b0:	9320      	str	r3, [sp, #128]	; 0x80
 80119b2:	dc77      	bgt.n	8011aa4 <_vfprintf_r+0x234>
 80119b4:	3408      	adds	r4, #8
 80119b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119b8:	4433      	add	r3, r6
 80119ba:	930a      	str	r3, [sp, #40]	; 0x28
 80119bc:	782b      	ldrb	r3, [r5, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f000 8739 	beq.w	8012836 <_vfprintf_r+0xfc6>
 80119c4:	2300      	movs	r3, #0
 80119c6:	1c69      	adds	r1, r5, #1
 80119c8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80119cc:	461a      	mov	r2, r3
 80119ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80119d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80119d4:	461d      	mov	r5, r3
 80119d6:	200a      	movs	r0, #10
 80119d8:	1c4e      	adds	r6, r1, #1
 80119da:	7809      	ldrb	r1, [r1, #0]
 80119dc:	9605      	str	r6, [sp, #20]
 80119de:	9102      	str	r1, [sp, #8]
 80119e0:	9902      	ldr	r1, [sp, #8]
 80119e2:	3920      	subs	r1, #32
 80119e4:	2958      	cmp	r1, #88	; 0x58
 80119e6:	f200 841d 	bhi.w	8012224 <_vfprintf_r+0x9b4>
 80119ea:	e8df f011 	tbh	[pc, r1, lsl #1]
 80119ee:	00b3      	.short	0x00b3
 80119f0:	041b041b 	.word	0x041b041b
 80119f4:	041b00b8 	.word	0x041b00b8
 80119f8:	041b041b 	.word	0x041b041b
 80119fc:	041b041b 	.word	0x041b041b
 8011a00:	00bb041b 	.word	0x00bb041b
 8011a04:	041b0065 	.word	0x041b0065
 8011a08:	00c700c4 	.word	0x00c700c4
 8011a0c:	00e4041b 	.word	0x00e4041b
 8011a10:	00e700e7 	.word	0x00e700e7
 8011a14:	00e700e7 	.word	0x00e700e7
 8011a18:	00e700e7 	.word	0x00e700e7
 8011a1c:	00e700e7 	.word	0x00e700e7
 8011a20:	041b00e7 	.word	0x041b00e7
 8011a24:	041b041b 	.word	0x041b041b
 8011a28:	041b041b 	.word	0x041b041b
 8011a2c:	041b041b 	.word	0x041b041b
 8011a30:	041b041b 	.word	0x041b041b
 8011a34:	011b041b 	.word	0x011b041b
 8011a38:	041b0131 	.word	0x041b0131
 8011a3c:	041b0131 	.word	0x041b0131
 8011a40:	041b041b 	.word	0x041b041b
 8011a44:	00fa041b 	.word	0x00fa041b
 8011a48:	041b041b 	.word	0x041b041b
 8011a4c:	041b0346 	.word	0x041b0346
 8011a50:	041b041b 	.word	0x041b041b
 8011a54:	041b041b 	.word	0x041b041b
 8011a58:	041b03ad 	.word	0x041b03ad
 8011a5c:	0093041b 	.word	0x0093041b
 8011a60:	041b041b 	.word	0x041b041b
 8011a64:	041b041b 	.word	0x041b041b
 8011a68:	041b041b 	.word	0x041b041b
 8011a6c:	041b041b 	.word	0x041b041b
 8011a70:	041b041b 	.word	0x041b041b
 8011a74:	006b010d 	.word	0x006b010d
 8011a78:	01310131 	.word	0x01310131
 8011a7c:	00fd0131 	.word	0x00fd0131
 8011a80:	041b006b 	.word	0x041b006b
 8011a84:	0100041b 	.word	0x0100041b
 8011a88:	0328041b 	.word	0x0328041b
 8011a8c:	037c0348 	.word	0x037c0348
 8011a90:	041b0107 	.word	0x041b0107
 8011a94:	041b038d 	.word	0x041b038d
 8011a98:	041b03af 	.word	0x041b03af
 8011a9c:	03c7041b 	.word	0x03c7041b
 8011aa0:	461d      	mov	r5, r3
 8011aa2:	e773      	b.n	801198c <_vfprintf_r+0x11c>
 8011aa4:	aa1f      	add	r2, sp, #124	; 0x7c
 8011aa6:	4641      	mov	r1, r8
 8011aa8:	4658      	mov	r0, fp
 8011aaa:	f002 fd08 	bl	80144be <__sprint_r>
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	f040 8699 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8011ab4:	ac2c      	add	r4, sp, #176	; 0xb0
 8011ab6:	e77e      	b.n	80119b6 <_vfprintf_r+0x146>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	222b      	movs	r2, #43	; 0x2b
 8011abc:	9905      	ldr	r1, [sp, #20]
 8011abe:	e78b      	b.n	80119d8 <_vfprintf_r+0x168>
 8011ac0:	460f      	mov	r7, r1
 8011ac2:	e7fb      	b.n	8011abc <_vfprintf_r+0x24c>
 8011ac4:	b10b      	cbz	r3, 8011aca <_vfprintf_r+0x25a>
 8011ac6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011aca:	06aa      	lsls	r2, r5, #26
 8011acc:	f140 80b0 	bpl.w	8011c30 <_vfprintf_r+0x3c0>
 8011ad0:	3707      	adds	r7, #7
 8011ad2:	f027 0707 	bic.w	r7, r7, #7
 8011ad6:	f107 0308 	add.w	r3, r7, #8
 8011ada:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011ade:	9304      	str	r3, [sp, #16]
 8011ae0:	2e00      	cmp	r6, #0
 8011ae2:	f177 0300 	sbcs.w	r3, r7, #0
 8011ae6:	da06      	bge.n	8011af6 <_vfprintf_r+0x286>
 8011ae8:	4276      	negs	r6, r6
 8011aea:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8011aee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8011af2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011af6:	2301      	movs	r3, #1
 8011af8:	e2d0      	b.n	801209c <_vfprintf_r+0x82c>
 8011afa:	bf00      	nop
 8011afc:	f3af 8000 	nop.w
	...
 8011b08:	080fafa8 	.word	0x080fafa8
 8011b0c:	080fafc8 	.word	0x080fafc8
 8011b10:	080faf88 	.word	0x080faf88
 8011b14:	b10b      	cbz	r3, 8011b1a <_vfprintf_r+0x2aa>
 8011b16:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011b1a:	4ba2      	ldr	r3, [pc, #648]	; (8011da4 <_vfprintf_r+0x534>)
 8011b1c:	9311      	str	r3, [sp, #68]	; 0x44
 8011b1e:	06a9      	lsls	r1, r5, #26
 8011b20:	f140 8331 	bpl.w	8012186 <_vfprintf_r+0x916>
 8011b24:	3707      	adds	r7, #7
 8011b26:	f027 0707 	bic.w	r7, r7, #7
 8011b2a:	f107 0308 	add.w	r3, r7, #8
 8011b2e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011b32:	9304      	str	r3, [sp, #16]
 8011b34:	07eb      	lsls	r3, r5, #31
 8011b36:	d50b      	bpl.n	8011b50 <_vfprintf_r+0x2e0>
 8011b38:	ea56 0307 	orrs.w	r3, r6, r7
 8011b3c:	d008      	beq.n	8011b50 <_vfprintf_r+0x2e0>
 8011b3e:	2330      	movs	r3, #48	; 0x30
 8011b40:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011b44:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011b48:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8011b4c:	f045 0502 	orr.w	r5, r5, #2
 8011b50:	2302      	movs	r3, #2
 8011b52:	e2a0      	b.n	8012096 <_vfprintf_r+0x826>
 8011b54:	2a00      	cmp	r2, #0
 8011b56:	d1b1      	bne.n	8011abc <_vfprintf_r+0x24c>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	2220      	movs	r2, #32
 8011b5c:	e7ae      	b.n	8011abc <_vfprintf_r+0x24c>
 8011b5e:	f045 0501 	orr.w	r5, r5, #1
 8011b62:	e7ab      	b.n	8011abc <_vfprintf_r+0x24c>
 8011b64:	683e      	ldr	r6, [r7, #0]
 8011b66:	960b      	str	r6, [sp, #44]	; 0x2c
 8011b68:	2e00      	cmp	r6, #0
 8011b6a:	f107 0104 	add.w	r1, r7, #4
 8011b6e:	daa7      	bge.n	8011ac0 <_vfprintf_r+0x250>
 8011b70:	4276      	negs	r6, r6
 8011b72:	960b      	str	r6, [sp, #44]	; 0x2c
 8011b74:	460f      	mov	r7, r1
 8011b76:	f045 0504 	orr.w	r5, r5, #4
 8011b7a:	e79f      	b.n	8011abc <_vfprintf_r+0x24c>
 8011b7c:	9905      	ldr	r1, [sp, #20]
 8011b7e:	1c4e      	adds	r6, r1, #1
 8011b80:	7809      	ldrb	r1, [r1, #0]
 8011b82:	9102      	str	r1, [sp, #8]
 8011b84:	292a      	cmp	r1, #42	; 0x2a
 8011b86:	d010      	beq.n	8011baa <_vfprintf_r+0x33a>
 8011b88:	f04f 0a00 	mov.w	sl, #0
 8011b8c:	9605      	str	r6, [sp, #20]
 8011b8e:	9902      	ldr	r1, [sp, #8]
 8011b90:	3930      	subs	r1, #48	; 0x30
 8011b92:	2909      	cmp	r1, #9
 8011b94:	f63f af24 	bhi.w	80119e0 <_vfprintf_r+0x170>
 8011b98:	fb00 1a0a 	mla	sl, r0, sl, r1
 8011b9c:	9905      	ldr	r1, [sp, #20]
 8011b9e:	460e      	mov	r6, r1
 8011ba0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8011ba4:	9102      	str	r1, [sp, #8]
 8011ba6:	9605      	str	r6, [sp, #20]
 8011ba8:	e7f1      	b.n	8011b8e <_vfprintf_r+0x31e>
 8011baa:	6839      	ldr	r1, [r7, #0]
 8011bac:	9605      	str	r6, [sp, #20]
 8011bae:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 8011bb2:	3704      	adds	r7, #4
 8011bb4:	e782      	b.n	8011abc <_vfprintf_r+0x24c>
 8011bb6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011bba:	e77f      	b.n	8011abc <_vfprintf_r+0x24c>
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8011bc0:	9902      	ldr	r1, [sp, #8]
 8011bc2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011bc4:	3930      	subs	r1, #48	; 0x30
 8011bc6:	fb00 1106 	mla	r1, r0, r6, r1
 8011bca:	910b      	str	r1, [sp, #44]	; 0x2c
 8011bcc:	9905      	ldr	r1, [sp, #20]
 8011bce:	460e      	mov	r6, r1
 8011bd0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8011bd4:	9102      	str	r1, [sp, #8]
 8011bd6:	9902      	ldr	r1, [sp, #8]
 8011bd8:	9605      	str	r6, [sp, #20]
 8011bda:	3930      	subs	r1, #48	; 0x30
 8011bdc:	2909      	cmp	r1, #9
 8011bde:	d9ef      	bls.n	8011bc0 <_vfprintf_r+0x350>
 8011be0:	e6fe      	b.n	80119e0 <_vfprintf_r+0x170>
 8011be2:	f045 0508 	orr.w	r5, r5, #8
 8011be6:	e769      	b.n	8011abc <_vfprintf_r+0x24c>
 8011be8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8011bec:	e766      	b.n	8011abc <_vfprintf_r+0x24c>
 8011bee:	9905      	ldr	r1, [sp, #20]
 8011bf0:	7809      	ldrb	r1, [r1, #0]
 8011bf2:	296c      	cmp	r1, #108	; 0x6c
 8011bf4:	d105      	bne.n	8011c02 <_vfprintf_r+0x392>
 8011bf6:	9905      	ldr	r1, [sp, #20]
 8011bf8:	3101      	adds	r1, #1
 8011bfa:	9105      	str	r1, [sp, #20]
 8011bfc:	f045 0520 	orr.w	r5, r5, #32
 8011c00:	e75c      	b.n	8011abc <_vfprintf_r+0x24c>
 8011c02:	f045 0510 	orr.w	r5, r5, #16
 8011c06:	e759      	b.n	8011abc <_vfprintf_r+0x24c>
 8011c08:	1d3b      	adds	r3, r7, #4
 8011c0a:	9304      	str	r3, [sp, #16]
 8011c0c:	2600      	movs	r6, #0
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8011c14:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011c18:	f04f 0a01 	mov.w	sl, #1
 8011c1c:	9608      	str	r6, [sp, #32]
 8011c1e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8011c22:	e11e      	b.n	8011e62 <_vfprintf_r+0x5f2>
 8011c24:	b10b      	cbz	r3, 8011c2a <_vfprintf_r+0x3ba>
 8011c26:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011c2a:	f045 0510 	orr.w	r5, r5, #16
 8011c2e:	e74c      	b.n	8011aca <_vfprintf_r+0x25a>
 8011c30:	f015 0f10 	tst.w	r5, #16
 8011c34:	f107 0304 	add.w	r3, r7, #4
 8011c38:	d003      	beq.n	8011c42 <_vfprintf_r+0x3d2>
 8011c3a:	683e      	ldr	r6, [r7, #0]
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	17f7      	asrs	r7, r6, #31
 8011c40:	e74e      	b.n	8011ae0 <_vfprintf_r+0x270>
 8011c42:	683e      	ldr	r6, [r7, #0]
 8011c44:	9304      	str	r3, [sp, #16]
 8011c46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011c4a:	bf18      	it	ne
 8011c4c:	b236      	sxthne	r6, r6
 8011c4e:	e7f6      	b.n	8011c3e <_vfprintf_r+0x3ce>
 8011c50:	b10b      	cbz	r3, 8011c56 <_vfprintf_r+0x3e6>
 8011c52:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011c56:	3707      	adds	r7, #7
 8011c58:	f027 0707 	bic.w	r7, r7, #7
 8011c5c:	f107 0308 	add.w	r3, r7, #8
 8011c60:	9304      	str	r3, [sp, #16]
 8011c62:	ed97 7b00 	vldr	d7, [r7]
 8011c66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c6a:	9b06      	ldr	r3, [sp, #24]
 8011c6c:	9312      	str	r3, [sp, #72]	; 0x48
 8011c6e:	9b07      	ldr	r3, [sp, #28]
 8011c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c7a:	4b4b      	ldr	r3, [pc, #300]	; (8011da8 <_vfprintf_r+0x538>)
 8011c7c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011c80:	f7ee ff60 	bl	8000b44 <__aeabi_dcmpun>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	f040 85e3 	bne.w	8012850 <_vfprintf_r+0xfe0>
 8011c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c8e:	4b46      	ldr	r3, [pc, #280]	; (8011da8 <_vfprintf_r+0x538>)
 8011c90:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011c94:	f7ee ff38 	bl	8000b08 <__aeabi_dcmple>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	f040 85d9 	bne.w	8012850 <_vfprintf_r+0xfe0>
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ca6:	f7ee ff25 	bl	8000af4 <__aeabi_dcmplt>
 8011caa:	b110      	cbz	r0, 8011cb2 <_vfprintf_r+0x442>
 8011cac:	232d      	movs	r3, #45	; 0x2d
 8011cae:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011cb2:	4b3e      	ldr	r3, [pc, #248]	; (8011dac <_vfprintf_r+0x53c>)
 8011cb4:	4a3e      	ldr	r2, [pc, #248]	; (8011db0 <_vfprintf_r+0x540>)
 8011cb6:	9902      	ldr	r1, [sp, #8]
 8011cb8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8011cbc:	2947      	cmp	r1, #71	; 0x47
 8011cbe:	bfcc      	ite	gt
 8011cc0:	4691      	movgt	r9, r2
 8011cc2:	4699      	movle	r9, r3
 8011cc4:	f04f 0a03 	mov.w	sl, #3
 8011cc8:	2600      	movs	r6, #0
 8011cca:	9608      	str	r6, [sp, #32]
 8011ccc:	e0c9      	b.n	8011e62 <_vfprintf_r+0x5f2>
 8011cce:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8011cd2:	d022      	beq.n	8011d1a <_vfprintf_r+0x4aa>
 8011cd4:	9b02      	ldr	r3, [sp, #8]
 8011cd6:	f023 0320 	bic.w	r3, r3, #32
 8011cda:	2b47      	cmp	r3, #71	; 0x47
 8011cdc:	d104      	bne.n	8011ce8 <_vfprintf_r+0x478>
 8011cde:	f1ba 0f00 	cmp.w	sl, #0
 8011ce2:	bf08      	it	eq
 8011ce4:	f04f 0a01 	moveq.w	sl, #1
 8011ce8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8011cec:	9314      	str	r3, [sp, #80]	; 0x50
 8011cee:	9b07      	ldr	r3, [sp, #28]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	da15      	bge.n	8011d20 <_vfprintf_r+0x4b0>
 8011cf4:	9b06      	ldr	r3, [sp, #24]
 8011cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8011cf8:	9b07      	ldr	r3, [sp, #28]
 8011cfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d00:	232d      	movs	r3, #45	; 0x2d
 8011d02:	930c      	str	r3, [sp, #48]	; 0x30
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	f023 0720 	bic.w	r7, r3, #32
 8011d0a:	2f46      	cmp	r7, #70	; 0x46
 8011d0c:	d00e      	beq.n	8011d2c <_vfprintf_r+0x4bc>
 8011d0e:	2f45      	cmp	r7, #69	; 0x45
 8011d10:	d146      	bne.n	8011da0 <_vfprintf_r+0x530>
 8011d12:	f10a 0601 	add.w	r6, sl, #1
 8011d16:	2102      	movs	r1, #2
 8011d18:	e00a      	b.n	8011d30 <_vfprintf_r+0x4c0>
 8011d1a:	f04f 0a06 	mov.w	sl, #6
 8011d1e:	e7e3      	b.n	8011ce8 <_vfprintf_r+0x478>
 8011d20:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011d24:	2300      	movs	r3, #0
 8011d26:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011d2a:	e7ea      	b.n	8011d02 <_vfprintf_r+0x492>
 8011d2c:	4656      	mov	r6, sl
 8011d2e:	2103      	movs	r1, #3
 8011d30:	ab1d      	add	r3, sp, #116	; 0x74
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	ab1a      	add	r3, sp, #104	; 0x68
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	4632      	mov	r2, r6
 8011d3a:	ab19      	add	r3, sp, #100	; 0x64
 8011d3c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8011d40:	4658      	mov	r0, fp
 8011d42:	f000 ff0d 	bl	8012b60 <_dtoa_r>
 8011d46:	2f47      	cmp	r7, #71	; 0x47
 8011d48:	4681      	mov	r9, r0
 8011d4a:	d102      	bne.n	8011d52 <_vfprintf_r+0x4e2>
 8011d4c:	07eb      	lsls	r3, r5, #31
 8011d4e:	f140 858c 	bpl.w	801286a <_vfprintf_r+0xffa>
 8011d52:	eb09 0306 	add.w	r3, r9, r6
 8011d56:	2f46      	cmp	r7, #70	; 0x46
 8011d58:	9303      	str	r3, [sp, #12]
 8011d5a:	d111      	bne.n	8011d80 <_vfprintf_r+0x510>
 8011d5c:	f899 3000 	ldrb.w	r3, [r9]
 8011d60:	2b30      	cmp	r3, #48	; 0x30
 8011d62:	d109      	bne.n	8011d78 <_vfprintf_r+0x508>
 8011d64:	2200      	movs	r2, #0
 8011d66:	2300      	movs	r3, #0
 8011d68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011d6c:	f7ee feb8 	bl	8000ae0 <__aeabi_dcmpeq>
 8011d70:	b910      	cbnz	r0, 8011d78 <_vfprintf_r+0x508>
 8011d72:	f1c6 0601 	rsb	r6, r6, #1
 8011d76:	9619      	str	r6, [sp, #100]	; 0x64
 8011d78:	9a03      	ldr	r2, [sp, #12]
 8011d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d7c:	441a      	add	r2, r3
 8011d7e:	9203      	str	r2, [sp, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	2300      	movs	r3, #0
 8011d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011d88:	f7ee feaa 	bl	8000ae0 <__aeabi_dcmpeq>
 8011d8c:	b990      	cbnz	r0, 8011db4 <_vfprintf_r+0x544>
 8011d8e:	2230      	movs	r2, #48	; 0x30
 8011d90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d92:	9903      	ldr	r1, [sp, #12]
 8011d94:	4299      	cmp	r1, r3
 8011d96:	d90f      	bls.n	8011db8 <_vfprintf_r+0x548>
 8011d98:	1c59      	adds	r1, r3, #1
 8011d9a:	911d      	str	r1, [sp, #116]	; 0x74
 8011d9c:	701a      	strb	r2, [r3, #0]
 8011d9e:	e7f7      	b.n	8011d90 <_vfprintf_r+0x520>
 8011da0:	4656      	mov	r6, sl
 8011da2:	e7b8      	b.n	8011d16 <_vfprintf_r+0x4a6>
 8011da4:	080faf14 	.word	0x080faf14
 8011da8:	7fefffff 	.word	0x7fefffff
 8011dac:	080faf04 	.word	0x080faf04
 8011db0:	080faf08 	.word	0x080faf08
 8011db4:	9b03      	ldr	r3, [sp, #12]
 8011db6:	931d      	str	r3, [sp, #116]	; 0x74
 8011db8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dba:	2f47      	cmp	r7, #71	; 0x47
 8011dbc:	eba3 0309 	sub.w	r3, r3, r9
 8011dc0:	9303      	str	r3, [sp, #12]
 8011dc2:	f040 80f8 	bne.w	8011fb6 <_vfprintf_r+0x746>
 8011dc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011dc8:	1cdf      	adds	r7, r3, #3
 8011dca:	db02      	blt.n	8011dd2 <_vfprintf_r+0x562>
 8011dcc:	459a      	cmp	sl, r3
 8011dce:	f280 811f 	bge.w	8012010 <_vfprintf_r+0x7a0>
 8011dd2:	9b02      	ldr	r3, [sp, #8]
 8011dd4:	3b02      	subs	r3, #2
 8011dd6:	9302      	str	r3, [sp, #8]
 8011dd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011dda:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8011dde:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8011de2:	1e53      	subs	r3, r2, #1
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	9319      	str	r3, [sp, #100]	; 0x64
 8011de8:	bfb6      	itet	lt
 8011dea:	f1c2 0301 	rsblt	r3, r2, #1
 8011dee:	222b      	movge	r2, #43	; 0x2b
 8011df0:	222d      	movlt	r2, #45	; 0x2d
 8011df2:	2b09      	cmp	r3, #9
 8011df4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8011df8:	f340 80fa 	ble.w	8011ff0 <_vfprintf_r+0x780>
 8011dfc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8011e00:	260a      	movs	r6, #10
 8011e02:	fb93 f0f6 	sdiv	r0, r3, r6
 8011e06:	fb06 3310 	mls	r3, r6, r0, r3
 8011e0a:	3330      	adds	r3, #48	; 0x30
 8011e0c:	2809      	cmp	r0, #9
 8011e0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011e12:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8011e16:	4603      	mov	r3, r0
 8011e18:	f300 80e3 	bgt.w	8011fe2 <_vfprintf_r+0x772>
 8011e1c:	3330      	adds	r3, #48	; 0x30
 8011e1e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8011e22:	3a02      	subs	r2, #2
 8011e24:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8011e28:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8011e2c:	4282      	cmp	r2, r0
 8011e2e:	4619      	mov	r1, r3
 8011e30:	f0c0 80d9 	bcc.w	8011fe6 <_vfprintf_r+0x776>
 8011e34:	9a03      	ldr	r2, [sp, #12]
 8011e36:	ab1b      	add	r3, sp, #108	; 0x6c
 8011e38:	1acb      	subs	r3, r1, r3
 8011e3a:	2a01      	cmp	r2, #1
 8011e3c:	9310      	str	r3, [sp, #64]	; 0x40
 8011e3e:	eb03 0a02 	add.w	sl, r3, r2
 8011e42:	dc03      	bgt.n	8011e4c <_vfprintf_r+0x5dc>
 8011e44:	f015 0301 	ands.w	r3, r5, #1
 8011e48:	9308      	str	r3, [sp, #32]
 8011e4a:	d003      	beq.n	8011e54 <_vfprintf_r+0x5e4>
 8011e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e4e:	449a      	add	sl, r3
 8011e50:	2300      	movs	r3, #0
 8011e52:	9308      	str	r3, [sp, #32]
 8011e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e56:	b113      	cbz	r3, 8011e5e <_vfprintf_r+0x5ee>
 8011e58:	232d      	movs	r3, #45	; 0x2d
 8011e5a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011e5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011e60:	2600      	movs	r6, #0
 8011e62:	4556      	cmp	r6, sl
 8011e64:	4633      	mov	r3, r6
 8011e66:	bfb8      	it	lt
 8011e68:	4653      	movlt	r3, sl
 8011e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e6c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8011e70:	b113      	cbz	r3, 8011e78 <_vfprintf_r+0x608>
 8011e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e74:	3301      	adds	r3, #1
 8011e76:	930c      	str	r3, [sp, #48]	; 0x30
 8011e78:	f015 0302 	ands.w	r3, r5, #2
 8011e7c:	9314      	str	r3, [sp, #80]	; 0x50
 8011e7e:	bf1e      	ittt	ne
 8011e80:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8011e82:	3302      	addne	r3, #2
 8011e84:	930c      	strne	r3, [sp, #48]	; 0x30
 8011e86:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8011e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8011e8c:	d114      	bne.n	8011eb8 <_vfprintf_r+0x648>
 8011e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e92:	1a9f      	subs	r7, r3, r2
 8011e94:	2f00      	cmp	r7, #0
 8011e96:	dd0f      	ble.n	8011eb8 <_vfprintf_r+0x648>
 8011e98:	4ba8      	ldr	r3, [pc, #672]	; (801213c <_vfprintf_r+0x8cc>)
 8011e9a:	6023      	str	r3, [r4, #0]
 8011e9c:	2f10      	cmp	r7, #16
 8011e9e:	f300 81d3 	bgt.w	8012248 <_vfprintf_r+0x9d8>
 8011ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ea4:	6067      	str	r7, [r4, #4]
 8011ea6:	441f      	add	r7, r3
 8011ea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011eaa:	9721      	str	r7, [sp, #132]	; 0x84
 8011eac:	3301      	adds	r3, #1
 8011eae:	2b07      	cmp	r3, #7
 8011eb0:	9320      	str	r3, [sp, #128]	; 0x80
 8011eb2:	f300 81e0 	bgt.w	8012276 <_vfprintf_r+0xa06>
 8011eb6:	3408      	adds	r4, #8
 8011eb8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8011ebc:	b173      	cbz	r3, 8011edc <_vfprintf_r+0x66c>
 8011ebe:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	6063      	str	r3, [r4, #4]
 8011ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011eca:	3301      	adds	r3, #1
 8011ecc:	9321      	str	r3, [sp, #132]	; 0x84
 8011ece:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	2b07      	cmp	r3, #7
 8011ed4:	9320      	str	r3, [sp, #128]	; 0x80
 8011ed6:	f300 81d8 	bgt.w	801228a <_vfprintf_r+0xa1a>
 8011eda:	3408      	adds	r4, #8
 8011edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ede:	b16b      	cbz	r3, 8011efc <_vfprintf_r+0x68c>
 8011ee0:	ab18      	add	r3, sp, #96	; 0x60
 8011ee2:	6023      	str	r3, [r4, #0]
 8011ee4:	2302      	movs	r3, #2
 8011ee6:	6063      	str	r3, [r4, #4]
 8011ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011eea:	3302      	adds	r3, #2
 8011eec:	9321      	str	r3, [sp, #132]	; 0x84
 8011eee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	2b07      	cmp	r3, #7
 8011ef4:	9320      	str	r3, [sp, #128]	; 0x80
 8011ef6:	f300 81d2 	bgt.w	801229e <_vfprintf_r+0xa2e>
 8011efa:	3408      	adds	r4, #8
 8011efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011efe:	2b80      	cmp	r3, #128	; 0x80
 8011f00:	d114      	bne.n	8011f2c <_vfprintf_r+0x6bc>
 8011f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f06:	1a9f      	subs	r7, r3, r2
 8011f08:	2f00      	cmp	r7, #0
 8011f0a:	dd0f      	ble.n	8011f2c <_vfprintf_r+0x6bc>
 8011f0c:	4b8c      	ldr	r3, [pc, #560]	; (8012140 <_vfprintf_r+0x8d0>)
 8011f0e:	6023      	str	r3, [r4, #0]
 8011f10:	2f10      	cmp	r7, #16
 8011f12:	f300 81ce 	bgt.w	80122b2 <_vfprintf_r+0xa42>
 8011f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f18:	6067      	str	r7, [r4, #4]
 8011f1a:	441f      	add	r7, r3
 8011f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f1e:	9721      	str	r7, [sp, #132]	; 0x84
 8011f20:	3301      	adds	r3, #1
 8011f22:	2b07      	cmp	r3, #7
 8011f24:	9320      	str	r3, [sp, #128]	; 0x80
 8011f26:	f300 81dd 	bgt.w	80122e4 <_vfprintf_r+0xa74>
 8011f2a:	3408      	adds	r4, #8
 8011f2c:	eba6 060a 	sub.w	r6, r6, sl
 8011f30:	2e00      	cmp	r6, #0
 8011f32:	dd0f      	ble.n	8011f54 <_vfprintf_r+0x6e4>
 8011f34:	4f82      	ldr	r7, [pc, #520]	; (8012140 <_vfprintf_r+0x8d0>)
 8011f36:	6027      	str	r7, [r4, #0]
 8011f38:	2e10      	cmp	r6, #16
 8011f3a:	f300 81dd 	bgt.w	80122f8 <_vfprintf_r+0xa88>
 8011f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f40:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011f42:	6066      	str	r6, [r4, #4]
 8011f44:	3301      	adds	r3, #1
 8011f46:	4406      	add	r6, r0
 8011f48:	2b07      	cmp	r3, #7
 8011f4a:	9621      	str	r6, [sp, #132]	; 0x84
 8011f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8011f4e:	f300 81ea 	bgt.w	8012326 <_vfprintf_r+0xab6>
 8011f52:	3408      	adds	r4, #8
 8011f54:	05e9      	lsls	r1, r5, #23
 8011f56:	f100 81f0 	bmi.w	801233a <_vfprintf_r+0xaca>
 8011f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f5c:	e884 0600 	stmia.w	r4, {r9, sl}
 8011f60:	4453      	add	r3, sl
 8011f62:	9321      	str	r3, [sp, #132]	; 0x84
 8011f64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011f66:	3301      	adds	r3, #1
 8011f68:	2b07      	cmp	r3, #7
 8011f6a:	9320      	str	r3, [sp, #128]	; 0x80
 8011f6c:	f340 841b 	ble.w	80127a6 <_vfprintf_r+0xf36>
 8011f70:	aa1f      	add	r2, sp, #124	; 0x7c
 8011f72:	4641      	mov	r1, r8
 8011f74:	4658      	mov	r0, fp
 8011f76:	f002 faa2 	bl	80144be <__sprint_r>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f040 8433 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8011f80:	ac2c      	add	r4, sp, #176	; 0xb0
 8011f82:	0768      	lsls	r0, r5, #29
 8011f84:	f100 8412 	bmi.w	80127ac <_vfprintf_r+0xf3c>
 8011f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f8e:	428a      	cmp	r2, r1
 8011f90:	bfac      	ite	ge
 8011f92:	189b      	addge	r3, r3, r2
 8011f94:	185b      	addlt	r3, r3, r1
 8011f96:	930a      	str	r3, [sp, #40]	; 0x28
 8011f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f9a:	b13b      	cbz	r3, 8011fac <_vfprintf_r+0x73c>
 8011f9c:	aa1f      	add	r2, sp, #124	; 0x7c
 8011f9e:	4641      	mov	r1, r8
 8011fa0:	4658      	mov	r0, fp
 8011fa2:	f002 fa8c 	bl	80144be <__sprint_r>
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	f040 841d 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8011fac:	2300      	movs	r3, #0
 8011fae:	9320      	str	r3, [sp, #128]	; 0x80
 8011fb0:	9f04      	ldr	r7, [sp, #16]
 8011fb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8011fb4:	e4e9      	b.n	801198a <_vfprintf_r+0x11a>
 8011fb6:	9b02      	ldr	r3, [sp, #8]
 8011fb8:	2b65      	cmp	r3, #101	; 0x65
 8011fba:	f77f af0d 	ble.w	8011dd8 <_vfprintf_r+0x568>
 8011fbe:	9b02      	ldr	r3, [sp, #8]
 8011fc0:	2b66      	cmp	r3, #102	; 0x66
 8011fc2:	d125      	bne.n	8012010 <_vfprintf_r+0x7a0>
 8011fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	dd1a      	ble.n	8012000 <_vfprintf_r+0x790>
 8011fca:	f1ba 0f00 	cmp.w	sl, #0
 8011fce:	d101      	bne.n	8011fd4 <_vfprintf_r+0x764>
 8011fd0:	07ee      	lsls	r6, r5, #31
 8011fd2:	d502      	bpl.n	8011fda <_vfprintf_r+0x76a>
 8011fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fd6:	4413      	add	r3, r2
 8011fd8:	4453      	add	r3, sl
 8011fda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011fdc:	9208      	str	r2, [sp, #32]
 8011fde:	469a      	mov	sl, r3
 8011fe0:	e738      	b.n	8011e54 <_vfprintf_r+0x5e4>
 8011fe2:	460a      	mov	r2, r1
 8011fe4:	e70d      	b.n	8011e02 <_vfprintf_r+0x592>
 8011fe6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011fea:	f803 1b01 	strb.w	r1, [r3], #1
 8011fee:	e71d      	b.n	8011e2c <_vfprintf_r+0x5bc>
 8011ff0:	2230      	movs	r2, #48	; 0x30
 8011ff2:	4413      	add	r3, r2
 8011ff4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8011ff8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8011ffc:	a91c      	add	r1, sp, #112	; 0x70
 8011ffe:	e719      	b.n	8011e34 <_vfprintf_r+0x5c4>
 8012000:	f1ba 0f00 	cmp.w	sl, #0
 8012004:	d101      	bne.n	801200a <_vfprintf_r+0x79a>
 8012006:	07ed      	lsls	r5, r5, #31
 8012008:	d515      	bpl.n	8012036 <_vfprintf_r+0x7c6>
 801200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200c:	3301      	adds	r3, #1
 801200e:	e7e3      	b.n	8011fd8 <_vfprintf_r+0x768>
 8012010:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012012:	9b03      	ldr	r3, [sp, #12]
 8012014:	429a      	cmp	r2, r3
 8012016:	db06      	blt.n	8012026 <_vfprintf_r+0x7b6>
 8012018:	07e8      	lsls	r0, r5, #31
 801201a:	d50e      	bpl.n	801203a <_vfprintf_r+0x7ca>
 801201c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801201e:	4413      	add	r3, r2
 8012020:	2267      	movs	r2, #103	; 0x67
 8012022:	9202      	str	r2, [sp, #8]
 8012024:	e7d9      	b.n	8011fda <_vfprintf_r+0x76a>
 8012026:	9b03      	ldr	r3, [sp, #12]
 8012028:	9909      	ldr	r1, [sp, #36]	; 0x24
 801202a:	2a00      	cmp	r2, #0
 801202c:	440b      	add	r3, r1
 801202e:	dcf7      	bgt.n	8012020 <_vfprintf_r+0x7b0>
 8012030:	f1c2 0201 	rsb	r2, r2, #1
 8012034:	e7f3      	b.n	801201e <_vfprintf_r+0x7ae>
 8012036:	2301      	movs	r3, #1
 8012038:	e7cf      	b.n	8011fda <_vfprintf_r+0x76a>
 801203a:	4613      	mov	r3, r2
 801203c:	e7f0      	b.n	8012020 <_vfprintf_r+0x7b0>
 801203e:	b10b      	cbz	r3, 8012044 <_vfprintf_r+0x7d4>
 8012040:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012044:	f015 0f20 	tst.w	r5, #32
 8012048:	f107 0304 	add.w	r3, r7, #4
 801204c:	d008      	beq.n	8012060 <_vfprintf_r+0x7f0>
 801204e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012050:	683a      	ldr	r2, [r7, #0]
 8012052:	17ce      	asrs	r6, r1, #31
 8012054:	4608      	mov	r0, r1
 8012056:	4631      	mov	r1, r6
 8012058:	e9c2 0100 	strd	r0, r1, [r2]
 801205c:	461f      	mov	r7, r3
 801205e:	e494      	b.n	801198a <_vfprintf_r+0x11a>
 8012060:	06e9      	lsls	r1, r5, #27
 8012062:	d503      	bpl.n	801206c <_vfprintf_r+0x7fc>
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012068:	6011      	str	r1, [r2, #0]
 801206a:	e7f7      	b.n	801205c <_vfprintf_r+0x7ec>
 801206c:	066a      	lsls	r2, r5, #25
 801206e:	d5f9      	bpl.n	8012064 <_vfprintf_r+0x7f4>
 8012070:	683a      	ldr	r2, [r7, #0]
 8012072:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8012076:	8011      	strh	r1, [r2, #0]
 8012078:	e7f0      	b.n	801205c <_vfprintf_r+0x7ec>
 801207a:	f045 0510 	orr.w	r5, r5, #16
 801207e:	f015 0320 	ands.w	r3, r5, #32
 8012082:	d022      	beq.n	80120ca <_vfprintf_r+0x85a>
 8012084:	3707      	adds	r7, #7
 8012086:	f027 0707 	bic.w	r7, r7, #7
 801208a:	f107 0308 	add.w	r3, r7, #8
 801208e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012092:	9304      	str	r3, [sp, #16]
 8012094:	2300      	movs	r3, #0
 8012096:	2200      	movs	r2, #0
 8012098:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801209c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80120a0:	f000 83e8 	beq.w	8012874 <_vfprintf_r+0x1004>
 80120a4:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80120a8:	9208      	str	r2, [sp, #32]
 80120aa:	ea56 0207 	orrs.w	r2, r6, r7
 80120ae:	f040 83e6 	bne.w	801287e <_vfprintf_r+0x100e>
 80120b2:	f1ba 0f00 	cmp.w	sl, #0
 80120b6:	f000 80a9 	beq.w	801220c <_vfprintf_r+0x99c>
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d075      	beq.n	80121aa <_vfprintf_r+0x93a>
 80120be:	2b02      	cmp	r3, #2
 80120c0:	f000 8090 	beq.w	80121e4 <_vfprintf_r+0x974>
 80120c4:	2600      	movs	r6, #0
 80120c6:	2700      	movs	r7, #0
 80120c8:	e3df      	b.n	801288a <_vfprintf_r+0x101a>
 80120ca:	1d3a      	adds	r2, r7, #4
 80120cc:	f015 0110 	ands.w	r1, r5, #16
 80120d0:	9204      	str	r2, [sp, #16]
 80120d2:	d002      	beq.n	80120da <_vfprintf_r+0x86a>
 80120d4:	683e      	ldr	r6, [r7, #0]
 80120d6:	2700      	movs	r7, #0
 80120d8:	e7dd      	b.n	8012096 <_vfprintf_r+0x826>
 80120da:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80120de:	d0f9      	beq.n	80120d4 <_vfprintf_r+0x864>
 80120e0:	883e      	ldrh	r6, [r7, #0]
 80120e2:	2700      	movs	r7, #0
 80120e4:	e7d6      	b.n	8012094 <_vfprintf_r+0x824>
 80120e6:	1d3b      	adds	r3, r7, #4
 80120e8:	9304      	str	r3, [sp, #16]
 80120ea:	2330      	movs	r3, #48	; 0x30
 80120ec:	2278      	movs	r2, #120	; 0x78
 80120ee:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80120f2:	4b14      	ldr	r3, [pc, #80]	; (8012144 <_vfprintf_r+0x8d4>)
 80120f4:	683e      	ldr	r6, [r7, #0]
 80120f6:	9311      	str	r3, [sp, #68]	; 0x44
 80120f8:	2700      	movs	r7, #0
 80120fa:	f045 0502 	orr.w	r5, r5, #2
 80120fe:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012102:	2302      	movs	r3, #2
 8012104:	9202      	str	r2, [sp, #8]
 8012106:	e7c6      	b.n	8012096 <_vfprintf_r+0x826>
 8012108:	1d3b      	adds	r3, r7, #4
 801210a:	2600      	movs	r6, #0
 801210c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012110:	9304      	str	r3, [sp, #16]
 8012112:	f8d7 9000 	ldr.w	r9, [r7]
 8012116:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 801211a:	d00a      	beq.n	8012132 <_vfprintf_r+0x8c2>
 801211c:	4652      	mov	r2, sl
 801211e:	4631      	mov	r1, r6
 8012120:	4648      	mov	r0, r9
 8012122:	f7ee f86d 	bl	8000200 <memchr>
 8012126:	2800      	cmp	r0, #0
 8012128:	f000 808c 	beq.w	8012244 <_vfprintf_r+0x9d4>
 801212c:	eba0 0a09 	sub.w	sl, r0, r9
 8012130:	e5cb      	b.n	8011cca <_vfprintf_r+0x45a>
 8012132:	4648      	mov	r0, r9
 8012134:	f7ee f856 	bl	80001e4 <strlen>
 8012138:	4682      	mov	sl, r0
 801213a:	e5c6      	b.n	8011cca <_vfprintf_r+0x45a>
 801213c:	080faf58 	.word	0x080faf58
 8012140:	080faf68 	.word	0x080faf68
 8012144:	080faf25 	.word	0x080faf25
 8012148:	f045 0510 	orr.w	r5, r5, #16
 801214c:	06ae      	lsls	r6, r5, #26
 801214e:	d509      	bpl.n	8012164 <_vfprintf_r+0x8f4>
 8012150:	3707      	adds	r7, #7
 8012152:	f027 0707 	bic.w	r7, r7, #7
 8012156:	f107 0308 	add.w	r3, r7, #8
 801215a:	e9d7 6700 	ldrd	r6, r7, [r7]
 801215e:	9304      	str	r3, [sp, #16]
 8012160:	2301      	movs	r3, #1
 8012162:	e798      	b.n	8012096 <_vfprintf_r+0x826>
 8012164:	1d3b      	adds	r3, r7, #4
 8012166:	f015 0f10 	tst.w	r5, #16
 801216a:	9304      	str	r3, [sp, #16]
 801216c:	d001      	beq.n	8012172 <_vfprintf_r+0x902>
 801216e:	683e      	ldr	r6, [r7, #0]
 8012170:	e002      	b.n	8012178 <_vfprintf_r+0x908>
 8012172:	0668      	lsls	r0, r5, #25
 8012174:	d5fb      	bpl.n	801216e <_vfprintf_r+0x8fe>
 8012176:	883e      	ldrh	r6, [r7, #0]
 8012178:	2700      	movs	r7, #0
 801217a:	e7f1      	b.n	8012160 <_vfprintf_r+0x8f0>
 801217c:	b10b      	cbz	r3, 8012182 <_vfprintf_r+0x912>
 801217e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012182:	4ba2      	ldr	r3, [pc, #648]	; (801240c <_vfprintf_r+0xb9c>)
 8012184:	e4ca      	b.n	8011b1c <_vfprintf_r+0x2ac>
 8012186:	1d3b      	adds	r3, r7, #4
 8012188:	f015 0f10 	tst.w	r5, #16
 801218c:	9304      	str	r3, [sp, #16]
 801218e:	d001      	beq.n	8012194 <_vfprintf_r+0x924>
 8012190:	683e      	ldr	r6, [r7, #0]
 8012192:	e002      	b.n	801219a <_vfprintf_r+0x92a>
 8012194:	066a      	lsls	r2, r5, #25
 8012196:	d5fb      	bpl.n	8012190 <_vfprintf_r+0x920>
 8012198:	883e      	ldrh	r6, [r7, #0]
 801219a:	2700      	movs	r7, #0
 801219c:	e4ca      	b.n	8011b34 <_vfprintf_r+0x2c4>
 801219e:	464b      	mov	r3, r9
 80121a0:	e374      	b.n	801288c <_vfprintf_r+0x101c>
 80121a2:	2f00      	cmp	r7, #0
 80121a4:	bf08      	it	eq
 80121a6:	2e0a      	cmpeq	r6, #10
 80121a8:	d205      	bcs.n	80121b6 <_vfprintf_r+0x946>
 80121aa:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80121ae:	3630      	adds	r6, #48	; 0x30
 80121b0:	f809 6d41 	strb.w	r6, [r9, #-65]!
 80121b4:	e385      	b.n	80128c2 <_vfprintf_r+0x1052>
 80121b6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80121ba:	4630      	mov	r0, r6
 80121bc:	4639      	mov	r1, r7
 80121be:	220a      	movs	r2, #10
 80121c0:	2300      	movs	r3, #0
 80121c2:	f7ee fcfd 	bl	8000bc0 <__aeabi_uldivmod>
 80121c6:	3230      	adds	r2, #48	; 0x30
 80121c8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80121cc:	2300      	movs	r3, #0
 80121ce:	4630      	mov	r0, r6
 80121d0:	4639      	mov	r1, r7
 80121d2:	220a      	movs	r2, #10
 80121d4:	f7ee fcf4 	bl	8000bc0 <__aeabi_uldivmod>
 80121d8:	4606      	mov	r6, r0
 80121da:	460f      	mov	r7, r1
 80121dc:	ea56 0307 	orrs.w	r3, r6, r7
 80121e0:	d1eb      	bne.n	80121ba <_vfprintf_r+0x94a>
 80121e2:	e36e      	b.n	80128c2 <_vfprintf_r+0x1052>
 80121e4:	2600      	movs	r6, #0
 80121e6:	2700      	movs	r7, #0
 80121e8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80121ec:	f006 030f 	and.w	r3, r6, #15
 80121f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121f2:	5cd3      	ldrb	r3, [r2, r3]
 80121f4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80121f8:	0933      	lsrs	r3, r6, #4
 80121fa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80121fe:	093a      	lsrs	r2, r7, #4
 8012200:	461e      	mov	r6, r3
 8012202:	4617      	mov	r7, r2
 8012204:	ea56 0307 	orrs.w	r3, r6, r7
 8012208:	d1f0      	bne.n	80121ec <_vfprintf_r+0x97c>
 801220a:	e35a      	b.n	80128c2 <_vfprintf_r+0x1052>
 801220c:	b93b      	cbnz	r3, 801221e <_vfprintf_r+0x9ae>
 801220e:	07e8      	lsls	r0, r5, #31
 8012210:	d505      	bpl.n	801221e <_vfprintf_r+0x9ae>
 8012212:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8012216:	2330      	movs	r3, #48	; 0x30
 8012218:	f809 3d41 	strb.w	r3, [r9, #-65]!
 801221c:	e351      	b.n	80128c2 <_vfprintf_r+0x1052>
 801221e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012222:	e34e      	b.n	80128c2 <_vfprintf_r+0x1052>
 8012224:	b10b      	cbz	r3, 801222a <_vfprintf_r+0x9ba>
 8012226:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801222a:	9b02      	ldr	r3, [sp, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	f000 8302 	beq.w	8012836 <_vfprintf_r+0xfc6>
 8012232:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012236:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 801223a:	2600      	movs	r6, #0
 801223c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8012240:	9704      	str	r7, [sp, #16]
 8012242:	e4e9      	b.n	8011c18 <_vfprintf_r+0x3a8>
 8012244:	4606      	mov	r6, r0
 8012246:	e540      	b.n	8011cca <_vfprintf_r+0x45a>
 8012248:	2310      	movs	r3, #16
 801224a:	6063      	str	r3, [r4, #4]
 801224c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801224e:	3310      	adds	r3, #16
 8012250:	9321      	str	r3, [sp, #132]	; 0x84
 8012252:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012254:	3301      	adds	r3, #1
 8012256:	2b07      	cmp	r3, #7
 8012258:	9320      	str	r3, [sp, #128]	; 0x80
 801225a:	dc02      	bgt.n	8012262 <_vfprintf_r+0x9f2>
 801225c:	3408      	adds	r4, #8
 801225e:	3f10      	subs	r7, #16
 8012260:	e61a      	b.n	8011e98 <_vfprintf_r+0x628>
 8012262:	aa1f      	add	r2, sp, #124	; 0x7c
 8012264:	4641      	mov	r1, r8
 8012266:	4658      	mov	r0, fp
 8012268:	f002 f929 	bl	80144be <__sprint_r>
 801226c:	2800      	cmp	r0, #0
 801226e:	f040 82ba 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012272:	ac2c      	add	r4, sp, #176	; 0xb0
 8012274:	e7f3      	b.n	801225e <_vfprintf_r+0x9ee>
 8012276:	aa1f      	add	r2, sp, #124	; 0x7c
 8012278:	4641      	mov	r1, r8
 801227a:	4658      	mov	r0, fp
 801227c:	f002 f91f 	bl	80144be <__sprint_r>
 8012280:	2800      	cmp	r0, #0
 8012282:	f040 82b0 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012286:	ac2c      	add	r4, sp, #176	; 0xb0
 8012288:	e616      	b.n	8011eb8 <_vfprintf_r+0x648>
 801228a:	aa1f      	add	r2, sp, #124	; 0x7c
 801228c:	4641      	mov	r1, r8
 801228e:	4658      	mov	r0, fp
 8012290:	f002 f915 	bl	80144be <__sprint_r>
 8012294:	2800      	cmp	r0, #0
 8012296:	f040 82a6 	bne.w	80127e6 <_vfprintf_r+0xf76>
 801229a:	ac2c      	add	r4, sp, #176	; 0xb0
 801229c:	e61e      	b.n	8011edc <_vfprintf_r+0x66c>
 801229e:	aa1f      	add	r2, sp, #124	; 0x7c
 80122a0:	4641      	mov	r1, r8
 80122a2:	4658      	mov	r0, fp
 80122a4:	f002 f90b 	bl	80144be <__sprint_r>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	f040 829c 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80122ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80122b0:	e624      	b.n	8011efc <_vfprintf_r+0x68c>
 80122b2:	2210      	movs	r2, #16
 80122b4:	6062      	str	r2, [r4, #4]
 80122b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122b8:	3210      	adds	r2, #16
 80122ba:	9221      	str	r2, [sp, #132]	; 0x84
 80122bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80122be:	3201      	adds	r2, #1
 80122c0:	2a07      	cmp	r2, #7
 80122c2:	9220      	str	r2, [sp, #128]	; 0x80
 80122c4:	dc02      	bgt.n	80122cc <_vfprintf_r+0xa5c>
 80122c6:	3408      	adds	r4, #8
 80122c8:	3f10      	subs	r7, #16
 80122ca:	e620      	b.n	8011f0e <_vfprintf_r+0x69e>
 80122cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80122ce:	4641      	mov	r1, r8
 80122d0:	4658      	mov	r0, fp
 80122d2:	9314      	str	r3, [sp, #80]	; 0x50
 80122d4:	f002 f8f3 	bl	80144be <__sprint_r>
 80122d8:	2800      	cmp	r0, #0
 80122da:	f040 8284 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80122de:	ac2c      	add	r4, sp, #176	; 0xb0
 80122e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122e2:	e7f1      	b.n	80122c8 <_vfprintf_r+0xa58>
 80122e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80122e6:	4641      	mov	r1, r8
 80122e8:	4658      	mov	r0, fp
 80122ea:	f002 f8e8 	bl	80144be <__sprint_r>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	f040 8279 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80122f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80122f6:	e619      	b.n	8011f2c <_vfprintf_r+0x6bc>
 80122f8:	2310      	movs	r3, #16
 80122fa:	6063      	str	r3, [r4, #4]
 80122fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122fe:	3310      	adds	r3, #16
 8012300:	9321      	str	r3, [sp, #132]	; 0x84
 8012302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012304:	3301      	adds	r3, #1
 8012306:	2b07      	cmp	r3, #7
 8012308:	9320      	str	r3, [sp, #128]	; 0x80
 801230a:	dc02      	bgt.n	8012312 <_vfprintf_r+0xaa2>
 801230c:	3408      	adds	r4, #8
 801230e:	3e10      	subs	r6, #16
 8012310:	e611      	b.n	8011f36 <_vfprintf_r+0x6c6>
 8012312:	aa1f      	add	r2, sp, #124	; 0x7c
 8012314:	4641      	mov	r1, r8
 8012316:	4658      	mov	r0, fp
 8012318:	f002 f8d1 	bl	80144be <__sprint_r>
 801231c:	2800      	cmp	r0, #0
 801231e:	f040 8262 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012322:	ac2c      	add	r4, sp, #176	; 0xb0
 8012324:	e7f3      	b.n	801230e <_vfprintf_r+0xa9e>
 8012326:	aa1f      	add	r2, sp, #124	; 0x7c
 8012328:	4641      	mov	r1, r8
 801232a:	4658      	mov	r0, fp
 801232c:	f002 f8c7 	bl	80144be <__sprint_r>
 8012330:	2800      	cmp	r0, #0
 8012332:	f040 8258 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012336:	ac2c      	add	r4, sp, #176	; 0xb0
 8012338:	e60c      	b.n	8011f54 <_vfprintf_r+0x6e4>
 801233a:	9b02      	ldr	r3, [sp, #8]
 801233c:	2b65      	cmp	r3, #101	; 0x65
 801233e:	f340 81ad 	ble.w	801269c <_vfprintf_r+0xe2c>
 8012342:	2200      	movs	r2, #0
 8012344:	2300      	movs	r3, #0
 8012346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801234a:	f7ee fbc9 	bl	8000ae0 <__aeabi_dcmpeq>
 801234e:	2800      	cmp	r0, #0
 8012350:	d062      	beq.n	8012418 <_vfprintf_r+0xba8>
 8012352:	4b2f      	ldr	r3, [pc, #188]	; (8012410 <_vfprintf_r+0xba0>)
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	2301      	movs	r3, #1
 8012358:	6063      	str	r3, [r4, #4]
 801235a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801235c:	3301      	adds	r3, #1
 801235e:	9321      	str	r3, [sp, #132]	; 0x84
 8012360:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012362:	3301      	adds	r3, #1
 8012364:	2b07      	cmp	r3, #7
 8012366:	9320      	str	r3, [sp, #128]	; 0x80
 8012368:	dc25      	bgt.n	80123b6 <_vfprintf_r+0xb46>
 801236a:	3408      	adds	r4, #8
 801236c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801236e:	9a03      	ldr	r2, [sp, #12]
 8012370:	4293      	cmp	r3, r2
 8012372:	db02      	blt.n	801237a <_vfprintf_r+0xb0a>
 8012374:	07ea      	lsls	r2, r5, #31
 8012376:	f57f ae04 	bpl.w	8011f82 <_vfprintf_r+0x712>
 801237a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801237c:	6023      	str	r3, [r4, #0]
 801237e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012380:	6063      	str	r3, [r4, #4]
 8012382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012386:	4413      	add	r3, r2
 8012388:	9321      	str	r3, [sp, #132]	; 0x84
 801238a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801238c:	3301      	adds	r3, #1
 801238e:	2b07      	cmp	r3, #7
 8012390:	9320      	str	r3, [sp, #128]	; 0x80
 8012392:	dc1a      	bgt.n	80123ca <_vfprintf_r+0xb5a>
 8012394:	3408      	adds	r4, #8
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	1e5e      	subs	r6, r3, #1
 801239a:	2e00      	cmp	r6, #0
 801239c:	f77f adf1 	ble.w	8011f82 <_vfprintf_r+0x712>
 80123a0:	4f1c      	ldr	r7, [pc, #112]	; (8012414 <_vfprintf_r+0xba4>)
 80123a2:	f04f 0910 	mov.w	r9, #16
 80123a6:	2e10      	cmp	r6, #16
 80123a8:	6027      	str	r7, [r4, #0]
 80123aa:	dc18      	bgt.n	80123de <_vfprintf_r+0xb6e>
 80123ac:	6066      	str	r6, [r4, #4]
 80123ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123b0:	441e      	add	r6, r3
 80123b2:	9621      	str	r6, [sp, #132]	; 0x84
 80123b4:	e5d6      	b.n	8011f64 <_vfprintf_r+0x6f4>
 80123b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80123b8:	4641      	mov	r1, r8
 80123ba:	4658      	mov	r0, fp
 80123bc:	f002 f87f 	bl	80144be <__sprint_r>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	f040 8210 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80123c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80123c8:	e7d0      	b.n	801236c <_vfprintf_r+0xafc>
 80123ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80123cc:	4641      	mov	r1, r8
 80123ce:	4658      	mov	r0, fp
 80123d0:	f002 f875 	bl	80144be <__sprint_r>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	f040 8206 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80123da:	ac2c      	add	r4, sp, #176	; 0xb0
 80123dc:	e7db      	b.n	8012396 <_vfprintf_r+0xb26>
 80123de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123e0:	f8c4 9004 	str.w	r9, [r4, #4]
 80123e4:	3310      	adds	r3, #16
 80123e6:	9321      	str	r3, [sp, #132]	; 0x84
 80123e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123ea:	3301      	adds	r3, #1
 80123ec:	2b07      	cmp	r3, #7
 80123ee:	9320      	str	r3, [sp, #128]	; 0x80
 80123f0:	dc02      	bgt.n	80123f8 <_vfprintf_r+0xb88>
 80123f2:	3408      	adds	r4, #8
 80123f4:	3e10      	subs	r6, #16
 80123f6:	e7d6      	b.n	80123a6 <_vfprintf_r+0xb36>
 80123f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80123fa:	4641      	mov	r1, r8
 80123fc:	4658      	mov	r0, fp
 80123fe:	f002 f85e 	bl	80144be <__sprint_r>
 8012402:	2800      	cmp	r0, #0
 8012404:	f040 81ef 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012408:	ac2c      	add	r4, sp, #176	; 0xb0
 801240a:	e7f3      	b.n	80123f4 <_vfprintf_r+0xb84>
 801240c:	080faf25 	.word	0x080faf25
 8012410:	080faf36 	.word	0x080faf36
 8012414:	080faf68 	.word	0x080faf68
 8012418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801241a:	2b00      	cmp	r3, #0
 801241c:	dc7a      	bgt.n	8012514 <_vfprintf_r+0xca4>
 801241e:	4b9d      	ldr	r3, [pc, #628]	; (8012694 <_vfprintf_r+0xe24>)
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	2301      	movs	r3, #1
 8012424:	6063      	str	r3, [r4, #4]
 8012426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012428:	3301      	adds	r3, #1
 801242a:	9321      	str	r3, [sp, #132]	; 0x84
 801242c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801242e:	3301      	adds	r3, #1
 8012430:	2b07      	cmp	r3, #7
 8012432:	9320      	str	r3, [sp, #128]	; 0x80
 8012434:	dc44      	bgt.n	80124c0 <_vfprintf_r+0xc50>
 8012436:	3408      	adds	r4, #8
 8012438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801243a:	b923      	cbnz	r3, 8012446 <_vfprintf_r+0xbd6>
 801243c:	9b03      	ldr	r3, [sp, #12]
 801243e:	b913      	cbnz	r3, 8012446 <_vfprintf_r+0xbd6>
 8012440:	07eb      	lsls	r3, r5, #31
 8012442:	f57f ad9e 	bpl.w	8011f82 <_vfprintf_r+0x712>
 8012446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801244c:	6063      	str	r3, [r4, #4]
 801244e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012452:	4413      	add	r3, r2
 8012454:	9321      	str	r3, [sp, #132]	; 0x84
 8012456:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012458:	3301      	adds	r3, #1
 801245a:	2b07      	cmp	r3, #7
 801245c:	9320      	str	r3, [sp, #128]	; 0x80
 801245e:	dc39      	bgt.n	80124d4 <_vfprintf_r+0xc64>
 8012460:	f104 0308 	add.w	r3, r4, #8
 8012464:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012466:	2e00      	cmp	r6, #0
 8012468:	da19      	bge.n	801249e <_vfprintf_r+0xc2e>
 801246a:	4f8b      	ldr	r7, [pc, #556]	; (8012698 <_vfprintf_r+0xe28>)
 801246c:	4276      	negs	r6, r6
 801246e:	2410      	movs	r4, #16
 8012470:	2e10      	cmp	r6, #16
 8012472:	601f      	str	r7, [r3, #0]
 8012474:	dc38      	bgt.n	80124e8 <_vfprintf_r+0xc78>
 8012476:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012478:	605e      	str	r6, [r3, #4]
 801247a:	4416      	add	r6, r2
 801247c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801247e:	9621      	str	r6, [sp, #132]	; 0x84
 8012480:	3201      	adds	r2, #1
 8012482:	2a07      	cmp	r2, #7
 8012484:	f103 0308 	add.w	r3, r3, #8
 8012488:	9220      	str	r2, [sp, #128]	; 0x80
 801248a:	dd08      	ble.n	801249e <_vfprintf_r+0xc2e>
 801248c:	aa1f      	add	r2, sp, #124	; 0x7c
 801248e:	4641      	mov	r1, r8
 8012490:	4658      	mov	r0, fp
 8012492:	f002 f814 	bl	80144be <__sprint_r>
 8012496:	2800      	cmp	r0, #0
 8012498:	f040 81a5 	bne.w	80127e6 <_vfprintf_r+0xf76>
 801249c:	ab2c      	add	r3, sp, #176	; 0xb0
 801249e:	9a03      	ldr	r2, [sp, #12]
 80124a0:	605a      	str	r2, [r3, #4]
 80124a2:	9903      	ldr	r1, [sp, #12]
 80124a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124a6:	f8c3 9000 	str.w	r9, [r3]
 80124aa:	440a      	add	r2, r1
 80124ac:	9221      	str	r2, [sp, #132]	; 0x84
 80124ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80124b0:	3201      	adds	r2, #1
 80124b2:	2a07      	cmp	r2, #7
 80124b4:	9220      	str	r2, [sp, #128]	; 0x80
 80124b6:	f73f ad5b 	bgt.w	8011f70 <_vfprintf_r+0x700>
 80124ba:	f103 0408 	add.w	r4, r3, #8
 80124be:	e560      	b.n	8011f82 <_vfprintf_r+0x712>
 80124c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80124c2:	4641      	mov	r1, r8
 80124c4:	4658      	mov	r0, fp
 80124c6:	f001 fffa 	bl	80144be <__sprint_r>
 80124ca:	2800      	cmp	r0, #0
 80124cc:	f040 818b 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80124d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80124d2:	e7b1      	b.n	8012438 <_vfprintf_r+0xbc8>
 80124d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80124d6:	4641      	mov	r1, r8
 80124d8:	4658      	mov	r0, fp
 80124da:	f001 fff0 	bl	80144be <__sprint_r>
 80124de:	2800      	cmp	r0, #0
 80124e0:	f040 8181 	bne.w	80127e6 <_vfprintf_r+0xf76>
 80124e4:	ab2c      	add	r3, sp, #176	; 0xb0
 80124e6:	e7bd      	b.n	8012464 <_vfprintf_r+0xbf4>
 80124e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124ea:	605c      	str	r4, [r3, #4]
 80124ec:	3210      	adds	r2, #16
 80124ee:	9221      	str	r2, [sp, #132]	; 0x84
 80124f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80124f2:	3201      	adds	r2, #1
 80124f4:	2a07      	cmp	r2, #7
 80124f6:	9220      	str	r2, [sp, #128]	; 0x80
 80124f8:	dc02      	bgt.n	8012500 <_vfprintf_r+0xc90>
 80124fa:	3308      	adds	r3, #8
 80124fc:	3e10      	subs	r6, #16
 80124fe:	e7b7      	b.n	8012470 <_vfprintf_r+0xc00>
 8012500:	aa1f      	add	r2, sp, #124	; 0x7c
 8012502:	4641      	mov	r1, r8
 8012504:	4658      	mov	r0, fp
 8012506:	f001 ffda 	bl	80144be <__sprint_r>
 801250a:	2800      	cmp	r0, #0
 801250c:	f040 816b 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012510:	ab2c      	add	r3, sp, #176	; 0xb0
 8012512:	e7f3      	b.n	80124fc <_vfprintf_r+0xc8c>
 8012514:	9b08      	ldr	r3, [sp, #32]
 8012516:	9a03      	ldr	r2, [sp, #12]
 8012518:	4293      	cmp	r3, r2
 801251a:	bfa8      	it	ge
 801251c:	4613      	movge	r3, r2
 801251e:	2b00      	cmp	r3, #0
 8012520:	461e      	mov	r6, r3
 8012522:	dd0b      	ble.n	801253c <_vfprintf_r+0xccc>
 8012524:	6063      	str	r3, [r4, #4]
 8012526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012528:	f8c4 9000 	str.w	r9, [r4]
 801252c:	4433      	add	r3, r6
 801252e:	9321      	str	r3, [sp, #132]	; 0x84
 8012530:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012532:	3301      	adds	r3, #1
 8012534:	2b07      	cmp	r3, #7
 8012536:	9320      	str	r3, [sp, #128]	; 0x80
 8012538:	dc62      	bgt.n	8012600 <_vfprintf_r+0xd90>
 801253a:	3408      	adds	r4, #8
 801253c:	9b08      	ldr	r3, [sp, #32]
 801253e:	2e00      	cmp	r6, #0
 8012540:	bfa8      	it	ge
 8012542:	1b9b      	subge	r3, r3, r6
 8012544:	2b00      	cmp	r3, #0
 8012546:	461e      	mov	r6, r3
 8012548:	dd0f      	ble.n	801256a <_vfprintf_r+0xcfa>
 801254a:	4f53      	ldr	r7, [pc, #332]	; (8012698 <_vfprintf_r+0xe28>)
 801254c:	f04f 0a10 	mov.w	sl, #16
 8012550:	2e10      	cmp	r6, #16
 8012552:	6027      	str	r7, [r4, #0]
 8012554:	dc5e      	bgt.n	8012614 <_vfprintf_r+0xda4>
 8012556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012558:	6066      	str	r6, [r4, #4]
 801255a:	441e      	add	r6, r3
 801255c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801255e:	9621      	str	r6, [sp, #132]	; 0x84
 8012560:	3301      	adds	r3, #1
 8012562:	2b07      	cmp	r3, #7
 8012564:	9320      	str	r3, [sp, #128]	; 0x80
 8012566:	dc6c      	bgt.n	8012642 <_vfprintf_r+0xdd2>
 8012568:	3408      	adds	r4, #8
 801256a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801256c:	9a03      	ldr	r2, [sp, #12]
 801256e:	4293      	cmp	r3, r2
 8012570:	db01      	blt.n	8012576 <_vfprintf_r+0xd06>
 8012572:	07ef      	lsls	r7, r5, #31
 8012574:	d50d      	bpl.n	8012592 <_vfprintf_r+0xd22>
 8012576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801257c:	6063      	str	r3, [r4, #4]
 801257e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012582:	4413      	add	r3, r2
 8012584:	9321      	str	r3, [sp, #132]	; 0x84
 8012586:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012588:	3301      	adds	r3, #1
 801258a:	2b07      	cmp	r3, #7
 801258c:	9320      	str	r3, [sp, #128]	; 0x80
 801258e:	dc62      	bgt.n	8012656 <_vfprintf_r+0xde6>
 8012590:	3408      	adds	r4, #8
 8012592:	9b03      	ldr	r3, [sp, #12]
 8012594:	9a08      	ldr	r2, [sp, #32]
 8012596:	1a9e      	subs	r6, r3, r2
 8012598:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801259a:	9a03      	ldr	r2, [sp, #12]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	429e      	cmp	r6, r3
 80125a0:	bfa8      	it	ge
 80125a2:	461e      	movge	r6, r3
 80125a4:	2e00      	cmp	r6, #0
 80125a6:	dd0c      	ble.n	80125c2 <_vfprintf_r+0xd52>
 80125a8:	9b08      	ldr	r3, [sp, #32]
 80125aa:	444b      	add	r3, r9
 80125ac:	e884 0048 	stmia.w	r4, {r3, r6}
 80125b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125b2:	4433      	add	r3, r6
 80125b4:	9321      	str	r3, [sp, #132]	; 0x84
 80125b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125b8:	3301      	adds	r3, #1
 80125ba:	2b07      	cmp	r3, #7
 80125bc:	9320      	str	r3, [sp, #128]	; 0x80
 80125be:	dc54      	bgt.n	801266a <_vfprintf_r+0xdfa>
 80125c0:	3408      	adds	r4, #8
 80125c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125c4:	9a03      	ldr	r2, [sp, #12]
 80125c6:	2e00      	cmp	r6, #0
 80125c8:	eba2 0303 	sub.w	r3, r2, r3
 80125cc:	bfac      	ite	ge
 80125ce:	1b9e      	subge	r6, r3, r6
 80125d0:	461e      	movlt	r6, r3
 80125d2:	2e00      	cmp	r6, #0
 80125d4:	f77f acd5 	ble.w	8011f82 <_vfprintf_r+0x712>
 80125d8:	4f2f      	ldr	r7, [pc, #188]	; (8012698 <_vfprintf_r+0xe28>)
 80125da:	f04f 0910 	mov.w	r9, #16
 80125de:	2e10      	cmp	r6, #16
 80125e0:	6027      	str	r7, [r4, #0]
 80125e2:	f77f aee3 	ble.w	80123ac <_vfprintf_r+0xb3c>
 80125e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125e8:	f8c4 9004 	str.w	r9, [r4, #4]
 80125ec:	3310      	adds	r3, #16
 80125ee:	9321      	str	r3, [sp, #132]	; 0x84
 80125f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125f2:	3301      	adds	r3, #1
 80125f4:	2b07      	cmp	r3, #7
 80125f6:	9320      	str	r3, [sp, #128]	; 0x80
 80125f8:	dc41      	bgt.n	801267e <_vfprintf_r+0xe0e>
 80125fa:	3408      	adds	r4, #8
 80125fc:	3e10      	subs	r6, #16
 80125fe:	e7ee      	b.n	80125de <_vfprintf_r+0xd6e>
 8012600:	aa1f      	add	r2, sp, #124	; 0x7c
 8012602:	4641      	mov	r1, r8
 8012604:	4658      	mov	r0, fp
 8012606:	f001 ff5a 	bl	80144be <__sprint_r>
 801260a:	2800      	cmp	r0, #0
 801260c:	f040 80eb 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012610:	ac2c      	add	r4, sp, #176	; 0xb0
 8012612:	e793      	b.n	801253c <_vfprintf_r+0xccc>
 8012614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012616:	f8c4 a004 	str.w	sl, [r4, #4]
 801261a:	3310      	adds	r3, #16
 801261c:	9321      	str	r3, [sp, #132]	; 0x84
 801261e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012620:	3301      	adds	r3, #1
 8012622:	2b07      	cmp	r3, #7
 8012624:	9320      	str	r3, [sp, #128]	; 0x80
 8012626:	dc02      	bgt.n	801262e <_vfprintf_r+0xdbe>
 8012628:	3408      	adds	r4, #8
 801262a:	3e10      	subs	r6, #16
 801262c:	e790      	b.n	8012550 <_vfprintf_r+0xce0>
 801262e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012630:	4641      	mov	r1, r8
 8012632:	4658      	mov	r0, fp
 8012634:	f001 ff43 	bl	80144be <__sprint_r>
 8012638:	2800      	cmp	r0, #0
 801263a:	f040 80d4 	bne.w	80127e6 <_vfprintf_r+0xf76>
 801263e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012640:	e7f3      	b.n	801262a <_vfprintf_r+0xdba>
 8012642:	aa1f      	add	r2, sp, #124	; 0x7c
 8012644:	4641      	mov	r1, r8
 8012646:	4658      	mov	r0, fp
 8012648:	f001 ff39 	bl	80144be <__sprint_r>
 801264c:	2800      	cmp	r0, #0
 801264e:	f040 80ca 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012652:	ac2c      	add	r4, sp, #176	; 0xb0
 8012654:	e789      	b.n	801256a <_vfprintf_r+0xcfa>
 8012656:	aa1f      	add	r2, sp, #124	; 0x7c
 8012658:	4641      	mov	r1, r8
 801265a:	4658      	mov	r0, fp
 801265c:	f001 ff2f 	bl	80144be <__sprint_r>
 8012660:	2800      	cmp	r0, #0
 8012662:	f040 80c0 	bne.w	80127e6 <_vfprintf_r+0xf76>
 8012666:	ac2c      	add	r4, sp, #176	; 0xb0
 8012668:	e793      	b.n	8012592 <_vfprintf_r+0xd22>
 801266a:	aa1f      	add	r2, sp, #124	; 0x7c
 801266c:	4641      	mov	r1, r8
 801266e:	4658      	mov	r0, fp
 8012670:	f001 ff25 	bl	80144be <__sprint_r>
 8012674:	2800      	cmp	r0, #0
 8012676:	f040 80b6 	bne.w	80127e6 <_vfprintf_r+0xf76>
 801267a:	ac2c      	add	r4, sp, #176	; 0xb0
 801267c:	e7a1      	b.n	80125c2 <_vfprintf_r+0xd52>
 801267e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012680:	4641      	mov	r1, r8
 8012682:	4658      	mov	r0, fp
 8012684:	f001 ff1b 	bl	80144be <__sprint_r>
 8012688:	2800      	cmp	r0, #0
 801268a:	f040 80ac 	bne.w	80127e6 <_vfprintf_r+0xf76>
 801268e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012690:	e7b4      	b.n	80125fc <_vfprintf_r+0xd8c>
 8012692:	bf00      	nop
 8012694:	080faf36 	.word	0x080faf36
 8012698:	080faf68 	.word	0x080faf68
 801269c:	9b03      	ldr	r3, [sp, #12]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	dc01      	bgt.n	80126a6 <_vfprintf_r+0xe36>
 80126a2:	07ee      	lsls	r6, r5, #31
 80126a4:	d576      	bpl.n	8012794 <_vfprintf_r+0xf24>
 80126a6:	2301      	movs	r3, #1
 80126a8:	6063      	str	r3, [r4, #4]
 80126aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ac:	f8c4 9000 	str.w	r9, [r4]
 80126b0:	3301      	adds	r3, #1
 80126b2:	9321      	str	r3, [sp, #132]	; 0x84
 80126b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126b6:	3301      	adds	r3, #1
 80126b8:	2b07      	cmp	r3, #7
 80126ba:	9320      	str	r3, [sp, #128]	; 0x80
 80126bc:	dc36      	bgt.n	801272c <_vfprintf_r+0xebc>
 80126be:	3408      	adds	r4, #8
 80126c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126c2:	6023      	str	r3, [r4, #0]
 80126c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126c6:	6063      	str	r3, [r4, #4]
 80126c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126cc:	4413      	add	r3, r2
 80126ce:	9321      	str	r3, [sp, #132]	; 0x84
 80126d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126d2:	3301      	adds	r3, #1
 80126d4:	2b07      	cmp	r3, #7
 80126d6:	9320      	str	r3, [sp, #128]	; 0x80
 80126d8:	dc31      	bgt.n	801273e <_vfprintf_r+0xece>
 80126da:	3408      	adds	r4, #8
 80126dc:	2300      	movs	r3, #0
 80126de:	2200      	movs	r2, #0
 80126e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126e4:	f7ee f9fc 	bl	8000ae0 <__aeabi_dcmpeq>
 80126e8:	9b03      	ldr	r3, [sp, #12]
 80126ea:	1e5e      	subs	r6, r3, #1
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d12f      	bne.n	8012750 <_vfprintf_r+0xee0>
 80126f0:	f109 0301 	add.w	r3, r9, #1
 80126f4:	e884 0048 	stmia.w	r4, {r3, r6}
 80126f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126fa:	9a03      	ldr	r2, [sp, #12]
 80126fc:	3b01      	subs	r3, #1
 80126fe:	4413      	add	r3, r2
 8012700:	9321      	str	r3, [sp, #132]	; 0x84
 8012702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012704:	3301      	adds	r3, #1
 8012706:	2b07      	cmp	r3, #7
 8012708:	9320      	str	r3, [sp, #128]	; 0x80
 801270a:	dd4a      	ble.n	80127a2 <_vfprintf_r+0xf32>
 801270c:	aa1f      	add	r2, sp, #124	; 0x7c
 801270e:	4641      	mov	r1, r8
 8012710:	4658      	mov	r0, fp
 8012712:	f001 fed4 	bl	80144be <__sprint_r>
 8012716:	2800      	cmp	r0, #0
 8012718:	d165      	bne.n	80127e6 <_vfprintf_r+0xf76>
 801271a:	ac2c      	add	r4, sp, #176	; 0xb0
 801271c:	ab1b      	add	r3, sp, #108	; 0x6c
 801271e:	6023      	str	r3, [r4, #0]
 8012720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012722:	6063      	str	r3, [r4, #4]
 8012724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012728:	4413      	add	r3, r2
 801272a:	e41a      	b.n	8011f62 <_vfprintf_r+0x6f2>
 801272c:	aa1f      	add	r2, sp, #124	; 0x7c
 801272e:	4641      	mov	r1, r8
 8012730:	4658      	mov	r0, fp
 8012732:	f001 fec4 	bl	80144be <__sprint_r>
 8012736:	2800      	cmp	r0, #0
 8012738:	d155      	bne.n	80127e6 <_vfprintf_r+0xf76>
 801273a:	ac2c      	add	r4, sp, #176	; 0xb0
 801273c:	e7c0      	b.n	80126c0 <_vfprintf_r+0xe50>
 801273e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012740:	4641      	mov	r1, r8
 8012742:	4658      	mov	r0, fp
 8012744:	f001 febb 	bl	80144be <__sprint_r>
 8012748:	2800      	cmp	r0, #0
 801274a:	d14c      	bne.n	80127e6 <_vfprintf_r+0xf76>
 801274c:	ac2c      	add	r4, sp, #176	; 0xb0
 801274e:	e7c5      	b.n	80126dc <_vfprintf_r+0xe6c>
 8012750:	2e00      	cmp	r6, #0
 8012752:	dde3      	ble.n	801271c <_vfprintf_r+0xeac>
 8012754:	4f60      	ldr	r7, [pc, #384]	; (80128d8 <_vfprintf_r+0x1068>)
 8012756:	f04f 0910 	mov.w	r9, #16
 801275a:	2e10      	cmp	r6, #16
 801275c:	6027      	str	r7, [r4, #0]
 801275e:	dc04      	bgt.n	801276a <_vfprintf_r+0xefa>
 8012760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012762:	6066      	str	r6, [r4, #4]
 8012764:	441e      	add	r6, r3
 8012766:	9621      	str	r6, [sp, #132]	; 0x84
 8012768:	e7cb      	b.n	8012702 <_vfprintf_r+0xe92>
 801276a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801276c:	f8c4 9004 	str.w	r9, [r4, #4]
 8012770:	3310      	adds	r3, #16
 8012772:	9321      	str	r3, [sp, #132]	; 0x84
 8012774:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012776:	3301      	adds	r3, #1
 8012778:	2b07      	cmp	r3, #7
 801277a:	9320      	str	r3, [sp, #128]	; 0x80
 801277c:	dc02      	bgt.n	8012784 <_vfprintf_r+0xf14>
 801277e:	3408      	adds	r4, #8
 8012780:	3e10      	subs	r6, #16
 8012782:	e7ea      	b.n	801275a <_vfprintf_r+0xeea>
 8012784:	aa1f      	add	r2, sp, #124	; 0x7c
 8012786:	4641      	mov	r1, r8
 8012788:	4658      	mov	r0, fp
 801278a:	f001 fe98 	bl	80144be <__sprint_r>
 801278e:	bb50      	cbnz	r0, 80127e6 <_vfprintf_r+0xf76>
 8012790:	ac2c      	add	r4, sp, #176	; 0xb0
 8012792:	e7f5      	b.n	8012780 <_vfprintf_r+0xf10>
 8012794:	2301      	movs	r3, #1
 8012796:	6063      	str	r3, [r4, #4]
 8012798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801279a:	f8c4 9000 	str.w	r9, [r4]
 801279e:	3301      	adds	r3, #1
 80127a0:	e7ae      	b.n	8012700 <_vfprintf_r+0xe90>
 80127a2:	3408      	adds	r4, #8
 80127a4:	e7ba      	b.n	801271c <_vfprintf_r+0xeac>
 80127a6:	3408      	adds	r4, #8
 80127a8:	f7ff bbeb 	b.w	8011f82 <_vfprintf_r+0x712>
 80127ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127b0:	1a9d      	subs	r5, r3, r2
 80127b2:	2d00      	cmp	r5, #0
 80127b4:	f77f abe8 	ble.w	8011f88 <_vfprintf_r+0x718>
 80127b8:	2610      	movs	r6, #16
 80127ba:	4b48      	ldr	r3, [pc, #288]	; (80128dc <_vfprintf_r+0x106c>)
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	2d10      	cmp	r5, #16
 80127c0:	dc24      	bgt.n	801280c <_vfprintf_r+0xf9c>
 80127c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127c4:	6065      	str	r5, [r4, #4]
 80127c6:	441d      	add	r5, r3
 80127c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80127ca:	9521      	str	r5, [sp, #132]	; 0x84
 80127cc:	3301      	adds	r3, #1
 80127ce:	2b07      	cmp	r3, #7
 80127d0:	9320      	str	r3, [sp, #128]	; 0x80
 80127d2:	f77f abd9 	ble.w	8011f88 <_vfprintf_r+0x718>
 80127d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80127d8:	4641      	mov	r1, r8
 80127da:	4658      	mov	r0, fp
 80127dc:	f001 fe6f 	bl	80144be <__sprint_r>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	f43f abd1 	beq.w	8011f88 <_vfprintf_r+0x718>
 80127e6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80127ea:	07d9      	lsls	r1, r3, #31
 80127ec:	d407      	bmi.n	80127fe <_vfprintf_r+0xf8e>
 80127ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80127f2:	059a      	lsls	r2, r3, #22
 80127f4:	d403      	bmi.n	80127fe <_vfprintf_r+0xf8e>
 80127f6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80127fa:	f001 fa66 	bl	8013cca <__retarget_lock_release_recursive>
 80127fe:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8012802:	065b      	lsls	r3, r3, #25
 8012804:	f57f a8af 	bpl.w	8011966 <_vfprintf_r+0xf6>
 8012808:	f7ff b882 	b.w	8011910 <_vfprintf_r+0xa0>
 801280c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801280e:	6066      	str	r6, [r4, #4]
 8012810:	3310      	adds	r3, #16
 8012812:	9321      	str	r3, [sp, #132]	; 0x84
 8012814:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012816:	3301      	adds	r3, #1
 8012818:	2b07      	cmp	r3, #7
 801281a:	9320      	str	r3, [sp, #128]	; 0x80
 801281c:	dc02      	bgt.n	8012824 <_vfprintf_r+0xfb4>
 801281e:	3408      	adds	r4, #8
 8012820:	3d10      	subs	r5, #16
 8012822:	e7ca      	b.n	80127ba <_vfprintf_r+0xf4a>
 8012824:	aa1f      	add	r2, sp, #124	; 0x7c
 8012826:	4641      	mov	r1, r8
 8012828:	4658      	mov	r0, fp
 801282a:	f001 fe48 	bl	80144be <__sprint_r>
 801282e:	2800      	cmp	r0, #0
 8012830:	d1d9      	bne.n	80127e6 <_vfprintf_r+0xf76>
 8012832:	ac2c      	add	r4, sp, #176	; 0xb0
 8012834:	e7f4      	b.n	8012820 <_vfprintf_r+0xfb0>
 8012836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012838:	b913      	cbnz	r3, 8012840 <_vfprintf_r+0xfd0>
 801283a:	2300      	movs	r3, #0
 801283c:	9320      	str	r3, [sp, #128]	; 0x80
 801283e:	e7d2      	b.n	80127e6 <_vfprintf_r+0xf76>
 8012840:	aa1f      	add	r2, sp, #124	; 0x7c
 8012842:	4641      	mov	r1, r8
 8012844:	4658      	mov	r0, fp
 8012846:	f001 fe3a 	bl	80144be <__sprint_r>
 801284a:	2800      	cmp	r0, #0
 801284c:	d0f5      	beq.n	801283a <_vfprintf_r+0xfca>
 801284e:	e7ca      	b.n	80127e6 <_vfprintf_r+0xf76>
 8012850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012854:	4610      	mov	r0, r2
 8012856:	4619      	mov	r1, r3
 8012858:	f7ee f974 	bl	8000b44 <__aeabi_dcmpun>
 801285c:	2800      	cmp	r0, #0
 801285e:	f43f aa36 	beq.w	8011cce <_vfprintf_r+0x45e>
 8012862:	4b1f      	ldr	r3, [pc, #124]	; (80128e0 <_vfprintf_r+0x1070>)
 8012864:	4a1f      	ldr	r2, [pc, #124]	; (80128e4 <_vfprintf_r+0x1074>)
 8012866:	f7ff ba26 	b.w	8011cb6 <_vfprintf_r+0x446>
 801286a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801286c:	1a1b      	subs	r3, r3, r0
 801286e:	9303      	str	r3, [sp, #12]
 8012870:	f7ff baa9 	b.w	8011dc6 <_vfprintf_r+0x556>
 8012874:	ea56 0207 	orrs.w	r2, r6, r7
 8012878:	9508      	str	r5, [sp, #32]
 801287a:	f43f ac1e 	beq.w	80120ba <_vfprintf_r+0x84a>
 801287e:	2b01      	cmp	r3, #1
 8012880:	f43f ac8f 	beq.w	80121a2 <_vfprintf_r+0x932>
 8012884:	2b02      	cmp	r3, #2
 8012886:	f43f acaf 	beq.w	80121e8 <_vfprintf_r+0x978>
 801288a:	ab2c      	add	r3, sp, #176	; 0xb0
 801288c:	08f1      	lsrs	r1, r6, #3
 801288e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8012892:	08f8      	lsrs	r0, r7, #3
 8012894:	f006 0207 	and.w	r2, r6, #7
 8012898:	4607      	mov	r7, r0
 801289a:	460e      	mov	r6, r1
 801289c:	3230      	adds	r2, #48	; 0x30
 801289e:	ea56 0107 	orrs.w	r1, r6, r7
 80128a2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80128a6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80128aa:	f47f ac78 	bne.w	801219e <_vfprintf_r+0x92e>
 80128ae:	9908      	ldr	r1, [sp, #32]
 80128b0:	07cd      	lsls	r5, r1, #31
 80128b2:	d506      	bpl.n	80128c2 <_vfprintf_r+0x1052>
 80128b4:	2a30      	cmp	r2, #48	; 0x30
 80128b6:	d004      	beq.n	80128c2 <_vfprintf_r+0x1052>
 80128b8:	2230      	movs	r2, #48	; 0x30
 80128ba:	f809 2c01 	strb.w	r2, [r9, #-1]
 80128be:	f1a3 0902 	sub.w	r9, r3, #2
 80128c2:	4656      	mov	r6, sl
 80128c4:	2300      	movs	r3, #0
 80128c6:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 80128ca:	9d08      	ldr	r5, [sp, #32]
 80128cc:	9308      	str	r3, [sp, #32]
 80128ce:	ebaa 0a09 	sub.w	sl, sl, r9
 80128d2:	f7ff bac6 	b.w	8011e62 <_vfprintf_r+0x5f2>
 80128d6:	bf00      	nop
 80128d8:	080faf68 	.word	0x080faf68
 80128dc:	080faf58 	.word	0x080faf58
 80128e0:	080faf0c 	.word	0x080faf0c
 80128e4:	080faf10 	.word	0x080faf10

080128e8 <__sbprintf>:
 80128e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128ea:	460c      	mov	r4, r1
 80128ec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80128f0:	461f      	mov	r7, r3
 80128f2:	8989      	ldrh	r1, [r1, #12]
 80128f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128f6:	9319      	str	r3, [sp, #100]	; 0x64
 80128f8:	89e3      	ldrh	r3, [r4, #14]
 80128fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80128fe:	f021 0102 	bic.w	r1, r1, #2
 8012902:	6a23      	ldr	r3, [r4, #32]
 8012904:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012908:	9308      	str	r3, [sp, #32]
 801290a:	a91a      	add	r1, sp, #104	; 0x68
 801290c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801290e:	930a      	str	r3, [sp, #40]	; 0x28
 8012910:	4615      	mov	r5, r2
 8012912:	2300      	movs	r3, #0
 8012914:	4606      	mov	r6, r0
 8012916:	9100      	str	r1, [sp, #0]
 8012918:	9104      	str	r1, [sp, #16]
 801291a:	a816      	add	r0, sp, #88	; 0x58
 801291c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012920:	9102      	str	r1, [sp, #8]
 8012922:	9105      	str	r1, [sp, #20]
 8012924:	9306      	str	r3, [sp, #24]
 8012926:	f001 f9cd 	bl	8013cc4 <__retarget_lock_init_recursive>
 801292a:	462a      	mov	r2, r5
 801292c:	463b      	mov	r3, r7
 801292e:	4669      	mov	r1, sp
 8012930:	4630      	mov	r0, r6
 8012932:	f7fe ff9d 	bl	8011870 <_vfprintf_r>
 8012936:	1e05      	subs	r5, r0, #0
 8012938:	db07      	blt.n	801294a <__sbprintf+0x62>
 801293a:	4669      	mov	r1, sp
 801293c:	4630      	mov	r0, r6
 801293e:	f000 ff6f 	bl	8013820 <_fflush_r>
 8012942:	2800      	cmp	r0, #0
 8012944:	bf18      	it	ne
 8012946:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 801294a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801294e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012950:	065b      	lsls	r3, r3, #25
 8012952:	bf42      	ittt	mi
 8012954:	89a3      	ldrhmi	r3, [r4, #12]
 8012956:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801295a:	81a3      	strhmi	r3, [r4, #12]
 801295c:	f001 f9b3 	bl	8013cc6 <__retarget_lock_close_recursive>
 8012960:	4628      	mov	r0, r5
 8012962:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8012966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012968 <__swsetup_r>:
 8012968:	4b32      	ldr	r3, [pc, #200]	; (8012a34 <__swsetup_r+0xcc>)
 801296a:	b570      	push	{r4, r5, r6, lr}
 801296c:	681d      	ldr	r5, [r3, #0]
 801296e:	4606      	mov	r6, r0
 8012970:	460c      	mov	r4, r1
 8012972:	b125      	cbz	r5, 801297e <__swsetup_r+0x16>
 8012974:	69ab      	ldr	r3, [r5, #24]
 8012976:	b913      	cbnz	r3, 801297e <__swsetup_r+0x16>
 8012978:	4628      	mov	r0, r5
 801297a:	f000 ffe5 	bl	8013948 <__sinit>
 801297e:	4b2e      	ldr	r3, [pc, #184]	; (8012a38 <__swsetup_r+0xd0>)
 8012980:	429c      	cmp	r4, r3
 8012982:	d10f      	bne.n	80129a4 <__swsetup_r+0x3c>
 8012984:	686c      	ldr	r4, [r5, #4]
 8012986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801298a:	b29a      	uxth	r2, r3
 801298c:	0715      	lsls	r5, r2, #28
 801298e:	d42c      	bmi.n	80129ea <__swsetup_r+0x82>
 8012990:	06d0      	lsls	r0, r2, #27
 8012992:	d411      	bmi.n	80129b8 <__swsetup_r+0x50>
 8012994:	2209      	movs	r2, #9
 8012996:	6032      	str	r2, [r6, #0]
 8012998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801299c:	81a3      	strh	r3, [r4, #12]
 801299e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	4b25      	ldr	r3, [pc, #148]	; (8012a3c <__swsetup_r+0xd4>)
 80129a6:	429c      	cmp	r4, r3
 80129a8:	d101      	bne.n	80129ae <__swsetup_r+0x46>
 80129aa:	68ac      	ldr	r4, [r5, #8]
 80129ac:	e7eb      	b.n	8012986 <__swsetup_r+0x1e>
 80129ae:	4b24      	ldr	r3, [pc, #144]	; (8012a40 <__swsetup_r+0xd8>)
 80129b0:	429c      	cmp	r4, r3
 80129b2:	bf08      	it	eq
 80129b4:	68ec      	ldreq	r4, [r5, #12]
 80129b6:	e7e6      	b.n	8012986 <__swsetup_r+0x1e>
 80129b8:	0751      	lsls	r1, r2, #29
 80129ba:	d512      	bpl.n	80129e2 <__swsetup_r+0x7a>
 80129bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129be:	b141      	cbz	r1, 80129d2 <__swsetup_r+0x6a>
 80129c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129c4:	4299      	cmp	r1, r3
 80129c6:	d002      	beq.n	80129ce <__swsetup_r+0x66>
 80129c8:	4630      	mov	r0, r6
 80129ca:	f001 f893 	bl	8013af4 <_free_r>
 80129ce:	2300      	movs	r3, #0
 80129d0:	6363      	str	r3, [r4, #52]	; 0x34
 80129d2:	89a3      	ldrh	r3, [r4, #12]
 80129d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129d8:	81a3      	strh	r3, [r4, #12]
 80129da:	2300      	movs	r3, #0
 80129dc:	6063      	str	r3, [r4, #4]
 80129de:	6923      	ldr	r3, [r4, #16]
 80129e0:	6023      	str	r3, [r4, #0]
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	f043 0308 	orr.w	r3, r3, #8
 80129e8:	81a3      	strh	r3, [r4, #12]
 80129ea:	6923      	ldr	r3, [r4, #16]
 80129ec:	b94b      	cbnz	r3, 8012a02 <__swsetup_r+0x9a>
 80129ee:	89a3      	ldrh	r3, [r4, #12]
 80129f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80129f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129f8:	d003      	beq.n	8012a02 <__swsetup_r+0x9a>
 80129fa:	4621      	mov	r1, r4
 80129fc:	4630      	mov	r0, r6
 80129fe:	f001 f991 	bl	8013d24 <__smakebuf_r>
 8012a02:	89a2      	ldrh	r2, [r4, #12]
 8012a04:	f012 0301 	ands.w	r3, r2, #1
 8012a08:	d00c      	beq.n	8012a24 <__swsetup_r+0xbc>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	60a3      	str	r3, [r4, #8]
 8012a0e:	6963      	ldr	r3, [r4, #20]
 8012a10:	425b      	negs	r3, r3
 8012a12:	61a3      	str	r3, [r4, #24]
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	b953      	cbnz	r3, 8012a2e <__swsetup_r+0xc6>
 8012a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012a20:	d1ba      	bne.n	8012998 <__swsetup_r+0x30>
 8012a22:	bd70      	pop	{r4, r5, r6, pc}
 8012a24:	0792      	lsls	r2, r2, #30
 8012a26:	bf58      	it	pl
 8012a28:	6963      	ldrpl	r3, [r4, #20]
 8012a2a:	60a3      	str	r3, [r4, #8]
 8012a2c:	e7f2      	b.n	8012a14 <__swsetup_r+0xac>
 8012a2e:	2000      	movs	r0, #0
 8012a30:	e7f7      	b.n	8012a22 <__swsetup_r+0xba>
 8012a32:	bf00      	nop
 8012a34:	20000138 	.word	0x20000138
 8012a38:	080fafa8 	.word	0x080fafa8
 8012a3c:	080fafc8 	.word	0x080fafc8
 8012a40:	080faf88 	.word	0x080faf88

08012a44 <quorem>:
 8012a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	6903      	ldr	r3, [r0, #16]
 8012a4a:	690c      	ldr	r4, [r1, #16]
 8012a4c:	429c      	cmp	r4, r3
 8012a4e:	4680      	mov	r8, r0
 8012a50:	f300 8082 	bgt.w	8012b58 <quorem+0x114>
 8012a54:	3c01      	subs	r4, #1
 8012a56:	f101 0714 	add.w	r7, r1, #20
 8012a5a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8012a5e:	f100 0614 	add.w	r6, r0, #20
 8012a62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012a66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012a6a:	eb06 030e 	add.w	r3, r6, lr
 8012a6e:	3501      	adds	r5, #1
 8012a70:	eb07 090e 	add.w	r9, r7, lr
 8012a74:	9301      	str	r3, [sp, #4]
 8012a76:	fbb0 f5f5 	udiv	r5, r0, r5
 8012a7a:	b395      	cbz	r5, 8012ae2 <quorem+0x9e>
 8012a7c:	f04f 0a00 	mov.w	sl, #0
 8012a80:	4638      	mov	r0, r7
 8012a82:	46b4      	mov	ip, r6
 8012a84:	46d3      	mov	fp, sl
 8012a86:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a8a:	b293      	uxth	r3, r2
 8012a8c:	fb05 a303 	mla	r3, r5, r3, sl
 8012a90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	ebab 0303 	sub.w	r3, fp, r3
 8012a9a:	0c12      	lsrs	r2, r2, #16
 8012a9c:	f8bc b000 	ldrh.w	fp, [ip]
 8012aa0:	fb05 a202 	mla	r2, r5, r2, sl
 8012aa4:	fa13 f38b 	uxtah	r3, r3, fp
 8012aa8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012aac:	fa1f fb82 	uxth.w	fp, r2
 8012ab0:	f8dc 2000 	ldr.w	r2, [ip]
 8012ab4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ac2:	4581      	cmp	r9, r0
 8012ac4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012ac8:	f84c 3b04 	str.w	r3, [ip], #4
 8012acc:	d2db      	bcs.n	8012a86 <quorem+0x42>
 8012ace:	f856 300e 	ldr.w	r3, [r6, lr]
 8012ad2:	b933      	cbnz	r3, 8012ae2 <quorem+0x9e>
 8012ad4:	9b01      	ldr	r3, [sp, #4]
 8012ad6:	3b04      	subs	r3, #4
 8012ad8:	429e      	cmp	r6, r3
 8012ada:	461a      	mov	r2, r3
 8012adc:	d330      	bcc.n	8012b40 <quorem+0xfc>
 8012ade:	f8c8 4010 	str.w	r4, [r8, #16]
 8012ae2:	4640      	mov	r0, r8
 8012ae4:	f001 fb67 	bl	80141b6 <__mcmp>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	db25      	blt.n	8012b38 <quorem+0xf4>
 8012aec:	3501      	adds	r5, #1
 8012aee:	4630      	mov	r0, r6
 8012af0:	f04f 0e00 	mov.w	lr, #0
 8012af4:	f857 2b04 	ldr.w	r2, [r7], #4
 8012af8:	f8d0 c000 	ldr.w	ip, [r0]
 8012afc:	b293      	uxth	r3, r2
 8012afe:	ebae 0303 	sub.w	r3, lr, r3
 8012b02:	0c12      	lsrs	r2, r2, #16
 8012b04:	fa13 f38c 	uxtah	r3, r3, ip
 8012b08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b16:	45b9      	cmp	r9, r7
 8012b18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012b1c:	f840 3b04 	str.w	r3, [r0], #4
 8012b20:	d2e8      	bcs.n	8012af4 <quorem+0xb0>
 8012b22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012b26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012b2a:	b92a      	cbnz	r2, 8012b38 <quorem+0xf4>
 8012b2c:	3b04      	subs	r3, #4
 8012b2e:	429e      	cmp	r6, r3
 8012b30:	461a      	mov	r2, r3
 8012b32:	d30b      	bcc.n	8012b4c <quorem+0x108>
 8012b34:	f8c8 4010 	str.w	r4, [r8, #16]
 8012b38:	4628      	mov	r0, r5
 8012b3a:	b003      	add	sp, #12
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	6812      	ldr	r2, [r2, #0]
 8012b42:	3b04      	subs	r3, #4
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	d1ca      	bne.n	8012ade <quorem+0x9a>
 8012b48:	3c01      	subs	r4, #1
 8012b4a:	e7c5      	b.n	8012ad8 <quorem+0x94>
 8012b4c:	6812      	ldr	r2, [r2, #0]
 8012b4e:	3b04      	subs	r3, #4
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d1ef      	bne.n	8012b34 <quorem+0xf0>
 8012b54:	3c01      	subs	r4, #1
 8012b56:	e7ea      	b.n	8012b2e <quorem+0xea>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7ee      	b.n	8012b3a <quorem+0xf6>
 8012b5c:	0000      	movs	r0, r0
	...

08012b60 <_dtoa_r>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	ec57 6b10 	vmov	r6, r7, d0
 8012b68:	b097      	sub	sp, #92	; 0x5c
 8012b6a:	e9cd 6700 	strd	r6, r7, [sp]
 8012b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b70:	9107      	str	r1, [sp, #28]
 8012b72:	4604      	mov	r4, r0
 8012b74:	920a      	str	r2, [sp, #40]	; 0x28
 8012b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b78:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012b7a:	b93e      	cbnz	r6, 8012b8c <_dtoa_r+0x2c>
 8012b7c:	2010      	movs	r0, #16
 8012b7e:	f7fd fc0f 	bl	80103a0 <malloc>
 8012b82:	6260      	str	r0, [r4, #36]	; 0x24
 8012b84:	6046      	str	r6, [r0, #4]
 8012b86:	6086      	str	r6, [r0, #8]
 8012b88:	6006      	str	r6, [r0, #0]
 8012b8a:	60c6      	str	r6, [r0, #12]
 8012b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b8e:	6819      	ldr	r1, [r3, #0]
 8012b90:	b151      	cbz	r1, 8012ba8 <_dtoa_r+0x48>
 8012b92:	685a      	ldr	r2, [r3, #4]
 8012b94:	604a      	str	r2, [r1, #4]
 8012b96:	2301      	movs	r3, #1
 8012b98:	4093      	lsls	r3, r2
 8012b9a:	608b      	str	r3, [r1, #8]
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f001 f935 	bl	8013e0c <_Bfree>
 8012ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	601a      	str	r2, [r3, #0]
 8012ba8:	9b01      	ldr	r3, [sp, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	bfbf      	itttt	lt
 8012bae:	2301      	movlt	r3, #1
 8012bb0:	602b      	strlt	r3, [r5, #0]
 8012bb2:	9b01      	ldrlt	r3, [sp, #4]
 8012bb4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012bb8:	bfb2      	itee	lt
 8012bba:	9301      	strlt	r3, [sp, #4]
 8012bbc:	2300      	movge	r3, #0
 8012bbe:	602b      	strge	r3, [r5, #0]
 8012bc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012bc4:	4ba8      	ldr	r3, [pc, #672]	; (8012e68 <_dtoa_r+0x308>)
 8012bc6:	ea33 0308 	bics.w	r3, r3, r8
 8012bca:	d11b      	bne.n	8012c04 <_dtoa_r+0xa4>
 8012bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8012bd2:	6013      	str	r3, [r2, #0]
 8012bd4:	9b00      	ldr	r3, [sp, #0]
 8012bd6:	b923      	cbnz	r3, 8012be2 <_dtoa_r+0x82>
 8012bd8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	f000 8578 	beq.w	80136d2 <_dtoa_r+0xb72>
 8012be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012be4:	b953      	cbnz	r3, 8012bfc <_dtoa_r+0x9c>
 8012be6:	4ba1      	ldr	r3, [pc, #644]	; (8012e6c <_dtoa_r+0x30c>)
 8012be8:	e021      	b.n	8012c2e <_dtoa_r+0xce>
 8012bea:	4ba1      	ldr	r3, [pc, #644]	; (8012e70 <_dtoa_r+0x310>)
 8012bec:	9302      	str	r3, [sp, #8]
 8012bee:	3308      	adds	r3, #8
 8012bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012bf2:	6013      	str	r3, [r2, #0]
 8012bf4:	9802      	ldr	r0, [sp, #8]
 8012bf6:	b017      	add	sp, #92	; 0x5c
 8012bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfc:	4b9b      	ldr	r3, [pc, #620]	; (8012e6c <_dtoa_r+0x30c>)
 8012bfe:	9302      	str	r3, [sp, #8]
 8012c00:	3303      	adds	r3, #3
 8012c02:	e7f5      	b.n	8012bf0 <_dtoa_r+0x90>
 8012c04:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	4639      	mov	r1, r7
 8012c10:	f7ed ff66 	bl	8000ae0 <__aeabi_dcmpeq>
 8012c14:	4681      	mov	r9, r0
 8012c16:	b160      	cbz	r0, 8012c32 <_dtoa_r+0xd2>
 8012c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	6013      	str	r3, [r2, #0]
 8012c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f000 8553 	beq.w	80136cc <_dtoa_r+0xb6c>
 8012c26:	4b93      	ldr	r3, [pc, #588]	; (8012e74 <_dtoa_r+0x314>)
 8012c28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012c2a:	6013      	str	r3, [r2, #0]
 8012c2c:	3b01      	subs	r3, #1
 8012c2e:	9302      	str	r3, [sp, #8]
 8012c30:	e7e0      	b.n	8012bf4 <_dtoa_r+0x94>
 8012c32:	aa14      	add	r2, sp, #80	; 0x50
 8012c34:	a915      	add	r1, sp, #84	; 0x54
 8012c36:	ec47 6b10 	vmov	d0, r6, r7
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f001 fb33 	bl	80142a6 <__d2b>
 8012c40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012c44:	4682      	mov	sl, r0
 8012c46:	2d00      	cmp	r5, #0
 8012c48:	d07e      	beq.n	8012d48 <_dtoa_r+0x1e8>
 8012c4a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012c52:	4630      	mov	r0, r6
 8012c54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012c58:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012c5c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8012c60:	2200      	movs	r2, #0
 8012c62:	4b85      	ldr	r3, [pc, #532]	; (8012e78 <_dtoa_r+0x318>)
 8012c64:	f7ed fb20 	bl	80002a8 <__aeabi_dsub>
 8012c68:	a379      	add	r3, pc, #484	; (adr r3, 8012e50 <_dtoa_r+0x2f0>)
 8012c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6e:	f7ed fccf 	bl	8000610 <__aeabi_dmul>
 8012c72:	a379      	add	r3, pc, #484	; (adr r3, 8012e58 <_dtoa_r+0x2f8>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	f7ed fb18 	bl	80002ac <__adddf3>
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	4628      	mov	r0, r5
 8012c80:	460f      	mov	r7, r1
 8012c82:	f7ed fc5f 	bl	8000544 <__aeabi_i2d>
 8012c86:	a376      	add	r3, pc, #472	; (adr r3, 8012e60 <_dtoa_r+0x300>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ed fcc0 	bl	8000610 <__aeabi_dmul>
 8012c90:	4602      	mov	r2, r0
 8012c92:	460b      	mov	r3, r1
 8012c94:	4630      	mov	r0, r6
 8012c96:	4639      	mov	r1, r7
 8012c98:	f7ed fb08 	bl	80002ac <__adddf3>
 8012c9c:	4606      	mov	r6, r0
 8012c9e:	460f      	mov	r7, r1
 8012ca0:	f7ed ff66 	bl	8000b70 <__aeabi_d2iz>
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	4683      	mov	fp, r0
 8012ca8:	2300      	movs	r3, #0
 8012caa:	4630      	mov	r0, r6
 8012cac:	4639      	mov	r1, r7
 8012cae:	f7ed ff21 	bl	8000af4 <__aeabi_dcmplt>
 8012cb2:	b158      	cbz	r0, 8012ccc <_dtoa_r+0x16c>
 8012cb4:	4658      	mov	r0, fp
 8012cb6:	f7ed fc45 	bl	8000544 <__aeabi_i2d>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	f7ed ff0d 	bl	8000ae0 <__aeabi_dcmpeq>
 8012cc6:	b908      	cbnz	r0, 8012ccc <_dtoa_r+0x16c>
 8012cc8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012ccc:	f1bb 0f16 	cmp.w	fp, #22
 8012cd0:	d859      	bhi.n	8012d86 <_dtoa_r+0x226>
 8012cd2:	496a      	ldr	r1, [pc, #424]	; (8012e7c <_dtoa_r+0x31c>)
 8012cd4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8012cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ce0:	f7ed ff26 	bl	8000b30 <__aeabi_dcmpgt>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d050      	beq.n	8012d8a <_dtoa_r+0x22a>
 8012ce8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012cec:	2300      	movs	r3, #0
 8012cee:	930e      	str	r3, [sp, #56]	; 0x38
 8012cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cf2:	1b5d      	subs	r5, r3, r5
 8012cf4:	1e6b      	subs	r3, r5, #1
 8012cf6:	9306      	str	r3, [sp, #24]
 8012cf8:	bf45      	ittet	mi
 8012cfa:	f1c5 0301 	rsbmi	r3, r5, #1
 8012cfe:	9305      	strmi	r3, [sp, #20]
 8012d00:	2300      	movpl	r3, #0
 8012d02:	2300      	movmi	r3, #0
 8012d04:	bf4c      	ite	mi
 8012d06:	9306      	strmi	r3, [sp, #24]
 8012d08:	9305      	strpl	r3, [sp, #20]
 8012d0a:	f1bb 0f00 	cmp.w	fp, #0
 8012d0e:	db3e      	blt.n	8012d8e <_dtoa_r+0x22e>
 8012d10:	9b06      	ldr	r3, [sp, #24]
 8012d12:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012d16:	445b      	add	r3, fp
 8012d18:	9306      	str	r3, [sp, #24]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	9308      	str	r3, [sp, #32]
 8012d1e:	9b07      	ldr	r3, [sp, #28]
 8012d20:	2b09      	cmp	r3, #9
 8012d22:	f200 80af 	bhi.w	8012e84 <_dtoa_r+0x324>
 8012d26:	2b05      	cmp	r3, #5
 8012d28:	bfc4      	itt	gt
 8012d2a:	3b04      	subgt	r3, #4
 8012d2c:	9307      	strgt	r3, [sp, #28]
 8012d2e:	9b07      	ldr	r3, [sp, #28]
 8012d30:	f1a3 0302 	sub.w	r3, r3, #2
 8012d34:	bfcc      	ite	gt
 8012d36:	2600      	movgt	r6, #0
 8012d38:	2601      	movle	r6, #1
 8012d3a:	2b03      	cmp	r3, #3
 8012d3c:	f200 80ae 	bhi.w	8012e9c <_dtoa_r+0x33c>
 8012d40:	e8df f003 	tbb	[pc, r3]
 8012d44:	772f8482 	.word	0x772f8482
 8012d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d4a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012d4c:	441d      	add	r5, r3
 8012d4e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d52:	2b20      	cmp	r3, #32
 8012d54:	dd11      	ble.n	8012d7a <_dtoa_r+0x21a>
 8012d56:	9a00      	ldr	r2, [sp, #0]
 8012d58:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012d5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012d60:	fa22 f000 	lsr.w	r0, r2, r0
 8012d64:	fa08 f303 	lsl.w	r3, r8, r3
 8012d68:	4318      	orrs	r0, r3
 8012d6a:	f7ed fbdb 	bl	8000524 <__aeabi_ui2d>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012d74:	3d01      	subs	r5, #1
 8012d76:	9312      	str	r3, [sp, #72]	; 0x48
 8012d78:	e772      	b.n	8012c60 <_dtoa_r+0x100>
 8012d7a:	f1c3 0020 	rsb	r0, r3, #32
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	fa03 f000 	lsl.w	r0, r3, r0
 8012d84:	e7f1      	b.n	8012d6a <_dtoa_r+0x20a>
 8012d86:	2301      	movs	r3, #1
 8012d88:	e7b1      	b.n	8012cee <_dtoa_r+0x18e>
 8012d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8012d8c:	e7b0      	b.n	8012cf0 <_dtoa_r+0x190>
 8012d8e:	9b05      	ldr	r3, [sp, #20]
 8012d90:	eba3 030b 	sub.w	r3, r3, fp
 8012d94:	9305      	str	r3, [sp, #20]
 8012d96:	f1cb 0300 	rsb	r3, fp, #0
 8012d9a:	9308      	str	r3, [sp, #32]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012da0:	e7bd      	b.n	8012d1e <_dtoa_r+0x1be>
 8012da2:	2301      	movs	r3, #1
 8012da4:	9309      	str	r3, [sp, #36]	; 0x24
 8012da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	dd7a      	ble.n	8012ea2 <_dtoa_r+0x342>
 8012dac:	9304      	str	r3, [sp, #16]
 8012dae:	9303      	str	r3, [sp, #12]
 8012db0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012db2:	2200      	movs	r2, #0
 8012db4:	606a      	str	r2, [r5, #4]
 8012db6:	2104      	movs	r1, #4
 8012db8:	f101 0214 	add.w	r2, r1, #20
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d975      	bls.n	8012eac <_dtoa_r+0x34c>
 8012dc0:	6869      	ldr	r1, [r5, #4]
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 ffee 	bl	8013da4 <_Balloc>
 8012dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dca:	6028      	str	r0, [r5, #0]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	9302      	str	r3, [sp, #8]
 8012dd0:	9b03      	ldr	r3, [sp, #12]
 8012dd2:	2b0e      	cmp	r3, #14
 8012dd4:	f200 80e5 	bhi.w	8012fa2 <_dtoa_r+0x442>
 8012dd8:	2e00      	cmp	r6, #0
 8012dda:	f000 80e2 	beq.w	8012fa2 <_dtoa_r+0x442>
 8012dde:	ed9d 7b00 	vldr	d7, [sp]
 8012de2:	f1bb 0f00 	cmp.w	fp, #0
 8012de6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012dea:	dd74      	ble.n	8012ed6 <_dtoa_r+0x376>
 8012dec:	4a23      	ldr	r2, [pc, #140]	; (8012e7c <_dtoa_r+0x31c>)
 8012dee:	f00b 030f 	and.w	r3, fp, #15
 8012df2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8012df6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012dfa:	06f0      	lsls	r0, r6, #27
 8012dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e00:	d559      	bpl.n	8012eb6 <_dtoa_r+0x356>
 8012e02:	4b1f      	ldr	r3, [pc, #124]	; (8012e80 <_dtoa_r+0x320>)
 8012e04:	ec51 0b17 	vmov	r0, r1, d7
 8012e08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012e0c:	f7ed fd2a 	bl	8000864 <__aeabi_ddiv>
 8012e10:	e9cd 0100 	strd	r0, r1, [sp]
 8012e14:	f006 060f 	and.w	r6, r6, #15
 8012e18:	2503      	movs	r5, #3
 8012e1a:	4f19      	ldr	r7, [pc, #100]	; (8012e80 <_dtoa_r+0x320>)
 8012e1c:	2e00      	cmp	r6, #0
 8012e1e:	d14c      	bne.n	8012eba <_dtoa_r+0x35a>
 8012e20:	4642      	mov	r2, r8
 8012e22:	464b      	mov	r3, r9
 8012e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e28:	f7ed fd1c 	bl	8000864 <__aeabi_ddiv>
 8012e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8012e30:	e06a      	b.n	8012f08 <_dtoa_r+0x3a8>
 8012e32:	2301      	movs	r3, #1
 8012e34:	9309      	str	r3, [sp, #36]	; 0x24
 8012e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e38:	445b      	add	r3, fp
 8012e3a:	9304      	str	r3, [sp, #16]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	9303      	str	r3, [sp, #12]
 8012e42:	bfb8      	it	lt
 8012e44:	2301      	movlt	r3, #1
 8012e46:	e7b3      	b.n	8012db0 <_dtoa_r+0x250>
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e7ab      	b.n	8012da4 <_dtoa_r+0x244>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	e7f1      	b.n	8012e34 <_dtoa_r+0x2d4>
 8012e50:	636f4361 	.word	0x636f4361
 8012e54:	3fd287a7 	.word	0x3fd287a7
 8012e58:	8b60c8b3 	.word	0x8b60c8b3
 8012e5c:	3fc68a28 	.word	0x3fc68a28
 8012e60:	509f79fb 	.word	0x509f79fb
 8012e64:	3fd34413 	.word	0x3fd34413
 8012e68:	7ff00000 	.word	0x7ff00000
 8012e6c:	080faf81 	.word	0x080faf81
 8012e70:	080faf78 	.word	0x080faf78
 8012e74:	080faf37 	.word	0x080faf37
 8012e78:	3ff80000 	.word	0x3ff80000
 8012e7c:	080fb010 	.word	0x080fb010
 8012e80:	080fafe8 	.word	0x080fafe8
 8012e84:	2601      	movs	r6, #1
 8012e86:	2300      	movs	r3, #0
 8012e88:	9307      	str	r3, [sp, #28]
 8012e8a:	9609      	str	r6, [sp, #36]	; 0x24
 8012e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e90:	9304      	str	r3, [sp, #16]
 8012e92:	9303      	str	r3, [sp, #12]
 8012e94:	2200      	movs	r2, #0
 8012e96:	2312      	movs	r3, #18
 8012e98:	920a      	str	r2, [sp, #40]	; 0x28
 8012e9a:	e789      	b.n	8012db0 <_dtoa_r+0x250>
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea0:	e7f4      	b.n	8012e8c <_dtoa_r+0x32c>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	9304      	str	r3, [sp, #16]
 8012ea6:	9303      	str	r3, [sp, #12]
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	e7f5      	b.n	8012e98 <_dtoa_r+0x338>
 8012eac:	686a      	ldr	r2, [r5, #4]
 8012eae:	3201      	adds	r2, #1
 8012eb0:	606a      	str	r2, [r5, #4]
 8012eb2:	0049      	lsls	r1, r1, #1
 8012eb4:	e780      	b.n	8012db8 <_dtoa_r+0x258>
 8012eb6:	2502      	movs	r5, #2
 8012eb8:	e7af      	b.n	8012e1a <_dtoa_r+0x2ba>
 8012eba:	07f1      	lsls	r1, r6, #31
 8012ebc:	d508      	bpl.n	8012ed0 <_dtoa_r+0x370>
 8012ebe:	4640      	mov	r0, r8
 8012ec0:	4649      	mov	r1, r9
 8012ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ec6:	f7ed fba3 	bl	8000610 <__aeabi_dmul>
 8012eca:	3501      	adds	r5, #1
 8012ecc:	4680      	mov	r8, r0
 8012ece:	4689      	mov	r9, r1
 8012ed0:	1076      	asrs	r6, r6, #1
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	e7a2      	b.n	8012e1c <_dtoa_r+0x2bc>
 8012ed6:	f000 809d 	beq.w	8013014 <_dtoa_r+0x4b4>
 8012eda:	f1cb 0600 	rsb	r6, fp, #0
 8012ede:	4b9f      	ldr	r3, [pc, #636]	; (801315c <_dtoa_r+0x5fc>)
 8012ee0:	4f9f      	ldr	r7, [pc, #636]	; (8013160 <_dtoa_r+0x600>)
 8012ee2:	f006 020f 	and.w	r2, r6, #15
 8012ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012ef2:	f7ed fb8d 	bl	8000610 <__aeabi_dmul>
 8012ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8012efa:	1136      	asrs	r6, r6, #4
 8012efc:	2300      	movs	r3, #0
 8012efe:	2502      	movs	r5, #2
 8012f00:	2e00      	cmp	r6, #0
 8012f02:	d17c      	bne.n	8012ffe <_dtoa_r+0x49e>
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d191      	bne.n	8012e2c <_dtoa_r+0x2cc>
 8012f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 8084 	beq.w	8013018 <_dtoa_r+0x4b8>
 8012f10:	e9dd 8900 	ldrd	r8, r9, [sp]
 8012f14:	2200      	movs	r2, #0
 8012f16:	4b93      	ldr	r3, [pc, #588]	; (8013164 <_dtoa_r+0x604>)
 8012f18:	4640      	mov	r0, r8
 8012f1a:	4649      	mov	r1, r9
 8012f1c:	f7ed fdea 	bl	8000af4 <__aeabi_dcmplt>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d079      	beq.n	8013018 <_dtoa_r+0x4b8>
 8012f24:	9b03      	ldr	r3, [sp, #12]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d076      	beq.n	8013018 <_dtoa_r+0x4b8>
 8012f2a:	9b04      	ldr	r3, [sp, #16]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	dd34      	ble.n	8012f9a <_dtoa_r+0x43a>
 8012f30:	2200      	movs	r2, #0
 8012f32:	4b8d      	ldr	r3, [pc, #564]	; (8013168 <_dtoa_r+0x608>)
 8012f34:	4640      	mov	r0, r8
 8012f36:	4649      	mov	r1, r9
 8012f38:	f7ed fb6a 	bl	8000610 <__aeabi_dmul>
 8012f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8012f40:	9e04      	ldr	r6, [sp, #16]
 8012f42:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012f46:	3501      	adds	r5, #1
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7ed fafb 	bl	8000544 <__aeabi_i2d>
 8012f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f52:	f7ed fb5d 	bl	8000610 <__aeabi_dmul>
 8012f56:	2200      	movs	r2, #0
 8012f58:	4b84      	ldr	r3, [pc, #528]	; (801316c <_dtoa_r+0x60c>)
 8012f5a:	f7ed f9a7 	bl	80002ac <__adddf3>
 8012f5e:	4680      	mov	r8, r0
 8012f60:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8012f64:	2e00      	cmp	r6, #0
 8012f66:	d15a      	bne.n	801301e <_dtoa_r+0x4be>
 8012f68:	2200      	movs	r2, #0
 8012f6a:	4b81      	ldr	r3, [pc, #516]	; (8013170 <_dtoa_r+0x610>)
 8012f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f70:	f7ed f99a 	bl	80002a8 <__aeabi_dsub>
 8012f74:	4642      	mov	r2, r8
 8012f76:	464b      	mov	r3, r9
 8012f78:	e9cd 0100 	strd	r0, r1, [sp]
 8012f7c:	f7ed fdd8 	bl	8000b30 <__aeabi_dcmpgt>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	f040 829b 	bne.w	80134bc <_dtoa_r+0x95c>
 8012f86:	4642      	mov	r2, r8
 8012f88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f90:	f7ed fdb0 	bl	8000af4 <__aeabi_dcmplt>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	f040 828f 	bne.w	80134b8 <_dtoa_r+0x958>
 8012f9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8012fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f2c0 8150 	blt.w	801324a <_dtoa_r+0x6ea>
 8012faa:	f1bb 0f0e 	cmp.w	fp, #14
 8012fae:	f300 814c 	bgt.w	801324a <_dtoa_r+0x6ea>
 8012fb2:	4b6a      	ldr	r3, [pc, #424]	; (801315c <_dtoa_r+0x5fc>)
 8012fb4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012fb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f280 80da 	bge.w	8013178 <_dtoa_r+0x618>
 8012fc4:	9b03      	ldr	r3, [sp, #12]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f300 80d6 	bgt.w	8013178 <_dtoa_r+0x618>
 8012fcc:	f040 8273 	bne.w	80134b6 <_dtoa_r+0x956>
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	4b67      	ldr	r3, [pc, #412]	; (8013170 <_dtoa_r+0x610>)
 8012fd4:	4640      	mov	r0, r8
 8012fd6:	4649      	mov	r1, r9
 8012fd8:	f7ed fb1a 	bl	8000610 <__aeabi_dmul>
 8012fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fe0:	f7ed fd9c 	bl	8000b1c <__aeabi_dcmpge>
 8012fe4:	9e03      	ldr	r6, [sp, #12]
 8012fe6:	4637      	mov	r7, r6
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f040 824a 	bne.w	8013482 <_dtoa_r+0x922>
 8012fee:	9b02      	ldr	r3, [sp, #8]
 8012ff0:	9a02      	ldr	r2, [sp, #8]
 8012ff2:	1c5d      	adds	r5, r3, #1
 8012ff4:	2331      	movs	r3, #49	; 0x31
 8012ff6:	7013      	strb	r3, [r2, #0]
 8012ff8:	f10b 0b01 	add.w	fp, fp, #1
 8012ffc:	e245      	b.n	801348a <_dtoa_r+0x92a>
 8012ffe:	07f2      	lsls	r2, r6, #31
 8013000:	d505      	bpl.n	801300e <_dtoa_r+0x4ae>
 8013002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013006:	f7ed fb03 	bl	8000610 <__aeabi_dmul>
 801300a:	3501      	adds	r5, #1
 801300c:	2301      	movs	r3, #1
 801300e:	1076      	asrs	r6, r6, #1
 8013010:	3708      	adds	r7, #8
 8013012:	e775      	b.n	8012f00 <_dtoa_r+0x3a0>
 8013014:	2502      	movs	r5, #2
 8013016:	e777      	b.n	8012f08 <_dtoa_r+0x3a8>
 8013018:	465f      	mov	r7, fp
 801301a:	9e03      	ldr	r6, [sp, #12]
 801301c:	e794      	b.n	8012f48 <_dtoa_r+0x3e8>
 801301e:	9a02      	ldr	r2, [sp, #8]
 8013020:	4b4e      	ldr	r3, [pc, #312]	; (801315c <_dtoa_r+0x5fc>)
 8013022:	4432      	add	r2, r6
 8013024:	9213      	str	r2, [sp, #76]	; 0x4c
 8013026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013028:	1e71      	subs	r1, r6, #1
 801302a:	2a00      	cmp	r2, #0
 801302c:	d048      	beq.n	80130c0 <_dtoa_r+0x560>
 801302e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013036:	2000      	movs	r0, #0
 8013038:	494e      	ldr	r1, [pc, #312]	; (8013174 <_dtoa_r+0x614>)
 801303a:	f7ed fc13 	bl	8000864 <__aeabi_ddiv>
 801303e:	4642      	mov	r2, r8
 8013040:	464b      	mov	r3, r9
 8013042:	f7ed f931 	bl	80002a8 <__aeabi_dsub>
 8013046:	9d02      	ldr	r5, [sp, #8]
 8013048:	4680      	mov	r8, r0
 801304a:	4689      	mov	r9, r1
 801304c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013050:	f7ed fd8e 	bl	8000b70 <__aeabi_d2iz>
 8013054:	4606      	mov	r6, r0
 8013056:	f7ed fa75 	bl	8000544 <__aeabi_i2d>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013062:	f7ed f921 	bl	80002a8 <__aeabi_dsub>
 8013066:	3630      	adds	r6, #48	; 0x30
 8013068:	f805 6b01 	strb.w	r6, [r5], #1
 801306c:	4642      	mov	r2, r8
 801306e:	464b      	mov	r3, r9
 8013070:	e9cd 0100 	strd	r0, r1, [sp]
 8013074:	f7ed fd3e 	bl	8000af4 <__aeabi_dcmplt>
 8013078:	2800      	cmp	r0, #0
 801307a:	d165      	bne.n	8013148 <_dtoa_r+0x5e8>
 801307c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013080:	2000      	movs	r0, #0
 8013082:	4938      	ldr	r1, [pc, #224]	; (8013164 <_dtoa_r+0x604>)
 8013084:	f7ed f910 	bl	80002a8 <__aeabi_dsub>
 8013088:	4642      	mov	r2, r8
 801308a:	464b      	mov	r3, r9
 801308c:	f7ed fd32 	bl	8000af4 <__aeabi_dcmplt>
 8013090:	2800      	cmp	r0, #0
 8013092:	f040 80ba 	bne.w	801320a <_dtoa_r+0x6aa>
 8013096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013098:	429d      	cmp	r5, r3
 801309a:	f43f af7e 	beq.w	8012f9a <_dtoa_r+0x43a>
 801309e:	2200      	movs	r2, #0
 80130a0:	4b31      	ldr	r3, [pc, #196]	; (8013168 <_dtoa_r+0x608>)
 80130a2:	4640      	mov	r0, r8
 80130a4:	4649      	mov	r1, r9
 80130a6:	f7ed fab3 	bl	8000610 <__aeabi_dmul>
 80130aa:	2200      	movs	r2, #0
 80130ac:	4680      	mov	r8, r0
 80130ae:	4689      	mov	r9, r1
 80130b0:	4b2d      	ldr	r3, [pc, #180]	; (8013168 <_dtoa_r+0x608>)
 80130b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130b6:	f7ed faab 	bl	8000610 <__aeabi_dmul>
 80130ba:	e9cd 0100 	strd	r0, r1, [sp]
 80130be:	e7c5      	b.n	801304c <_dtoa_r+0x4ec>
 80130c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80130c4:	4642      	mov	r2, r8
 80130c6:	464b      	mov	r3, r9
 80130c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130cc:	f7ed faa0 	bl	8000610 <__aeabi_dmul>
 80130d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80130d4:	9d02      	ldr	r5, [sp, #8]
 80130d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130da:	f7ed fd49 	bl	8000b70 <__aeabi_d2iz>
 80130de:	4606      	mov	r6, r0
 80130e0:	f7ed fa30 	bl	8000544 <__aeabi_i2d>
 80130e4:	3630      	adds	r6, #48	; 0x30
 80130e6:	4602      	mov	r2, r0
 80130e8:	460b      	mov	r3, r1
 80130ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130ee:	f7ed f8db 	bl	80002a8 <__aeabi_dsub>
 80130f2:	f805 6b01 	strb.w	r6, [r5], #1
 80130f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130f8:	42ab      	cmp	r3, r5
 80130fa:	4680      	mov	r8, r0
 80130fc:	4689      	mov	r9, r1
 80130fe:	f04f 0200 	mov.w	r2, #0
 8013102:	d125      	bne.n	8013150 <_dtoa_r+0x5f0>
 8013104:	4b1b      	ldr	r3, [pc, #108]	; (8013174 <_dtoa_r+0x614>)
 8013106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801310a:	f7ed f8cf 	bl	80002ac <__adddf3>
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	4640      	mov	r0, r8
 8013114:	4649      	mov	r1, r9
 8013116:	f7ed fd0b 	bl	8000b30 <__aeabi_dcmpgt>
 801311a:	2800      	cmp	r0, #0
 801311c:	d175      	bne.n	801320a <_dtoa_r+0x6aa>
 801311e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013122:	2000      	movs	r0, #0
 8013124:	4913      	ldr	r1, [pc, #76]	; (8013174 <_dtoa_r+0x614>)
 8013126:	f7ed f8bf 	bl	80002a8 <__aeabi_dsub>
 801312a:	4602      	mov	r2, r0
 801312c:	460b      	mov	r3, r1
 801312e:	4640      	mov	r0, r8
 8013130:	4649      	mov	r1, r9
 8013132:	f7ed fcdf 	bl	8000af4 <__aeabi_dcmplt>
 8013136:	2800      	cmp	r0, #0
 8013138:	f43f af2f 	beq.w	8012f9a <_dtoa_r+0x43a>
 801313c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013140:	2b30      	cmp	r3, #48	; 0x30
 8013142:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013146:	d001      	beq.n	801314c <_dtoa_r+0x5ec>
 8013148:	46bb      	mov	fp, r7
 801314a:	e04d      	b.n	80131e8 <_dtoa_r+0x688>
 801314c:	4615      	mov	r5, r2
 801314e:	e7f5      	b.n	801313c <_dtoa_r+0x5dc>
 8013150:	4b05      	ldr	r3, [pc, #20]	; (8013168 <_dtoa_r+0x608>)
 8013152:	f7ed fa5d 	bl	8000610 <__aeabi_dmul>
 8013156:	e9cd 0100 	strd	r0, r1, [sp]
 801315a:	e7bc      	b.n	80130d6 <_dtoa_r+0x576>
 801315c:	080fb010 	.word	0x080fb010
 8013160:	080fafe8 	.word	0x080fafe8
 8013164:	3ff00000 	.word	0x3ff00000
 8013168:	40240000 	.word	0x40240000
 801316c:	401c0000 	.word	0x401c0000
 8013170:	40140000 	.word	0x40140000
 8013174:	3fe00000 	.word	0x3fe00000
 8013178:	e9dd 6700 	ldrd	r6, r7, [sp]
 801317c:	9d02      	ldr	r5, [sp, #8]
 801317e:	4642      	mov	r2, r8
 8013180:	464b      	mov	r3, r9
 8013182:	4630      	mov	r0, r6
 8013184:	4639      	mov	r1, r7
 8013186:	f7ed fb6d 	bl	8000864 <__aeabi_ddiv>
 801318a:	f7ed fcf1 	bl	8000b70 <__aeabi_d2iz>
 801318e:	9000      	str	r0, [sp, #0]
 8013190:	f7ed f9d8 	bl	8000544 <__aeabi_i2d>
 8013194:	4642      	mov	r2, r8
 8013196:	464b      	mov	r3, r9
 8013198:	f7ed fa3a 	bl	8000610 <__aeabi_dmul>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4630      	mov	r0, r6
 80131a2:	4639      	mov	r1, r7
 80131a4:	f7ed f880 	bl	80002a8 <__aeabi_dsub>
 80131a8:	9e00      	ldr	r6, [sp, #0]
 80131aa:	9f03      	ldr	r7, [sp, #12]
 80131ac:	3630      	adds	r6, #48	; 0x30
 80131ae:	f805 6b01 	strb.w	r6, [r5], #1
 80131b2:	9e02      	ldr	r6, [sp, #8]
 80131b4:	1bae      	subs	r6, r5, r6
 80131b6:	42b7      	cmp	r7, r6
 80131b8:	4602      	mov	r2, r0
 80131ba:	460b      	mov	r3, r1
 80131bc:	d138      	bne.n	8013230 <_dtoa_r+0x6d0>
 80131be:	f7ed f875 	bl	80002ac <__adddf3>
 80131c2:	4606      	mov	r6, r0
 80131c4:	460f      	mov	r7, r1
 80131c6:	4602      	mov	r2, r0
 80131c8:	460b      	mov	r3, r1
 80131ca:	4640      	mov	r0, r8
 80131cc:	4649      	mov	r1, r9
 80131ce:	f7ed fc91 	bl	8000af4 <__aeabi_dcmplt>
 80131d2:	b9c8      	cbnz	r0, 8013208 <_dtoa_r+0x6a8>
 80131d4:	4632      	mov	r2, r6
 80131d6:	463b      	mov	r3, r7
 80131d8:	4640      	mov	r0, r8
 80131da:	4649      	mov	r1, r9
 80131dc:	f7ed fc80 	bl	8000ae0 <__aeabi_dcmpeq>
 80131e0:	b110      	cbz	r0, 80131e8 <_dtoa_r+0x688>
 80131e2:	9b00      	ldr	r3, [sp, #0]
 80131e4:	07db      	lsls	r3, r3, #31
 80131e6:	d40f      	bmi.n	8013208 <_dtoa_r+0x6a8>
 80131e8:	4651      	mov	r1, sl
 80131ea:	4620      	mov	r0, r4
 80131ec:	f000 fe0e 	bl	8013e0c <_Bfree>
 80131f0:	2300      	movs	r3, #0
 80131f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131f4:	702b      	strb	r3, [r5, #0]
 80131f6:	f10b 0301 	add.w	r3, fp, #1
 80131fa:	6013      	str	r3, [r2, #0]
 80131fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f43f acf8 	beq.w	8012bf4 <_dtoa_r+0x94>
 8013204:	601d      	str	r5, [r3, #0]
 8013206:	e4f5      	b.n	8012bf4 <_dtoa_r+0x94>
 8013208:	465f      	mov	r7, fp
 801320a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801320e:	2a39      	cmp	r2, #57	; 0x39
 8013210:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8013214:	d106      	bne.n	8013224 <_dtoa_r+0x6c4>
 8013216:	9a02      	ldr	r2, [sp, #8]
 8013218:	429a      	cmp	r2, r3
 801321a:	d107      	bne.n	801322c <_dtoa_r+0x6cc>
 801321c:	2330      	movs	r3, #48	; 0x30
 801321e:	7013      	strb	r3, [r2, #0]
 8013220:	3701      	adds	r7, #1
 8013222:	4613      	mov	r3, r2
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	3201      	adds	r2, #1
 8013228:	701a      	strb	r2, [r3, #0]
 801322a:	e78d      	b.n	8013148 <_dtoa_r+0x5e8>
 801322c:	461d      	mov	r5, r3
 801322e:	e7ec      	b.n	801320a <_dtoa_r+0x6aa>
 8013230:	2200      	movs	r2, #0
 8013232:	4ba4      	ldr	r3, [pc, #656]	; (80134c4 <_dtoa_r+0x964>)
 8013234:	f7ed f9ec 	bl	8000610 <__aeabi_dmul>
 8013238:	2200      	movs	r2, #0
 801323a:	2300      	movs	r3, #0
 801323c:	4606      	mov	r6, r0
 801323e:	460f      	mov	r7, r1
 8013240:	f7ed fc4e 	bl	8000ae0 <__aeabi_dcmpeq>
 8013244:	2800      	cmp	r0, #0
 8013246:	d09a      	beq.n	801317e <_dtoa_r+0x61e>
 8013248:	e7ce      	b.n	80131e8 <_dtoa_r+0x688>
 801324a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801324c:	2a00      	cmp	r2, #0
 801324e:	f000 80cd 	beq.w	80133ec <_dtoa_r+0x88c>
 8013252:	9a07      	ldr	r2, [sp, #28]
 8013254:	2a01      	cmp	r2, #1
 8013256:	f300 80af 	bgt.w	80133b8 <_dtoa_r+0x858>
 801325a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801325c:	2a00      	cmp	r2, #0
 801325e:	f000 80a7 	beq.w	80133b0 <_dtoa_r+0x850>
 8013262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013266:	9e08      	ldr	r6, [sp, #32]
 8013268:	9d05      	ldr	r5, [sp, #20]
 801326a:	9a05      	ldr	r2, [sp, #20]
 801326c:	441a      	add	r2, r3
 801326e:	9205      	str	r2, [sp, #20]
 8013270:	9a06      	ldr	r2, [sp, #24]
 8013272:	2101      	movs	r1, #1
 8013274:	441a      	add	r2, r3
 8013276:	4620      	mov	r0, r4
 8013278:	9206      	str	r2, [sp, #24]
 801327a:	f000 fe67 	bl	8013f4c <__i2b>
 801327e:	4607      	mov	r7, r0
 8013280:	2d00      	cmp	r5, #0
 8013282:	dd0c      	ble.n	801329e <_dtoa_r+0x73e>
 8013284:	9b06      	ldr	r3, [sp, #24]
 8013286:	2b00      	cmp	r3, #0
 8013288:	dd09      	ble.n	801329e <_dtoa_r+0x73e>
 801328a:	42ab      	cmp	r3, r5
 801328c:	9a05      	ldr	r2, [sp, #20]
 801328e:	bfa8      	it	ge
 8013290:	462b      	movge	r3, r5
 8013292:	1ad2      	subs	r2, r2, r3
 8013294:	9205      	str	r2, [sp, #20]
 8013296:	9a06      	ldr	r2, [sp, #24]
 8013298:	1aed      	subs	r5, r5, r3
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	9306      	str	r3, [sp, #24]
 801329e:	9b08      	ldr	r3, [sp, #32]
 80132a0:	b1f3      	cbz	r3, 80132e0 <_dtoa_r+0x780>
 80132a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 80a5 	beq.w	80133f4 <_dtoa_r+0x894>
 80132aa:	2e00      	cmp	r6, #0
 80132ac:	dd10      	ble.n	80132d0 <_dtoa_r+0x770>
 80132ae:	4639      	mov	r1, r7
 80132b0:	4632      	mov	r2, r6
 80132b2:	4620      	mov	r0, r4
 80132b4:	f000 fee0 	bl	8014078 <__pow5mult>
 80132b8:	4652      	mov	r2, sl
 80132ba:	4601      	mov	r1, r0
 80132bc:	4607      	mov	r7, r0
 80132be:	4620      	mov	r0, r4
 80132c0:	f000 fe4d 	bl	8013f5e <__multiply>
 80132c4:	4651      	mov	r1, sl
 80132c6:	4680      	mov	r8, r0
 80132c8:	4620      	mov	r0, r4
 80132ca:	f000 fd9f 	bl	8013e0c <_Bfree>
 80132ce:	46c2      	mov	sl, r8
 80132d0:	9b08      	ldr	r3, [sp, #32]
 80132d2:	1b9a      	subs	r2, r3, r6
 80132d4:	d004      	beq.n	80132e0 <_dtoa_r+0x780>
 80132d6:	4651      	mov	r1, sl
 80132d8:	4620      	mov	r0, r4
 80132da:	f000 fecd 	bl	8014078 <__pow5mult>
 80132de:	4682      	mov	sl, r0
 80132e0:	2101      	movs	r1, #1
 80132e2:	4620      	mov	r0, r4
 80132e4:	f000 fe32 	bl	8013f4c <__i2b>
 80132e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	4606      	mov	r6, r0
 80132ee:	f340 8083 	ble.w	80133f8 <_dtoa_r+0x898>
 80132f2:	461a      	mov	r2, r3
 80132f4:	4601      	mov	r1, r0
 80132f6:	4620      	mov	r0, r4
 80132f8:	f000 febe 	bl	8014078 <__pow5mult>
 80132fc:	9b07      	ldr	r3, [sp, #28]
 80132fe:	2b01      	cmp	r3, #1
 8013300:	4606      	mov	r6, r0
 8013302:	dd7c      	ble.n	80133fe <_dtoa_r+0x89e>
 8013304:	f04f 0800 	mov.w	r8, #0
 8013308:	6933      	ldr	r3, [r6, #16]
 801330a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801330e:	6918      	ldr	r0, [r3, #16]
 8013310:	f000 fdce 	bl	8013eb0 <__hi0bits>
 8013314:	f1c0 0020 	rsb	r0, r0, #32
 8013318:	9b06      	ldr	r3, [sp, #24]
 801331a:	4418      	add	r0, r3
 801331c:	f010 001f 	ands.w	r0, r0, #31
 8013320:	f000 8096 	beq.w	8013450 <_dtoa_r+0x8f0>
 8013324:	f1c0 0320 	rsb	r3, r0, #32
 8013328:	2b04      	cmp	r3, #4
 801332a:	f340 8087 	ble.w	801343c <_dtoa_r+0x8dc>
 801332e:	9b05      	ldr	r3, [sp, #20]
 8013330:	f1c0 001c 	rsb	r0, r0, #28
 8013334:	4403      	add	r3, r0
 8013336:	9305      	str	r3, [sp, #20]
 8013338:	9b06      	ldr	r3, [sp, #24]
 801333a:	4405      	add	r5, r0
 801333c:	4403      	add	r3, r0
 801333e:	9306      	str	r3, [sp, #24]
 8013340:	9b05      	ldr	r3, [sp, #20]
 8013342:	2b00      	cmp	r3, #0
 8013344:	dd05      	ble.n	8013352 <_dtoa_r+0x7f2>
 8013346:	4651      	mov	r1, sl
 8013348:	461a      	mov	r2, r3
 801334a:	4620      	mov	r0, r4
 801334c:	f000 fee2 	bl	8014114 <__lshift>
 8013350:	4682      	mov	sl, r0
 8013352:	9b06      	ldr	r3, [sp, #24]
 8013354:	2b00      	cmp	r3, #0
 8013356:	dd05      	ble.n	8013364 <_dtoa_r+0x804>
 8013358:	4631      	mov	r1, r6
 801335a:	461a      	mov	r2, r3
 801335c:	4620      	mov	r0, r4
 801335e:	f000 fed9 	bl	8014114 <__lshift>
 8013362:	4606      	mov	r6, r0
 8013364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013366:	2b00      	cmp	r3, #0
 8013368:	d074      	beq.n	8013454 <_dtoa_r+0x8f4>
 801336a:	4631      	mov	r1, r6
 801336c:	4650      	mov	r0, sl
 801336e:	f000 ff22 	bl	80141b6 <__mcmp>
 8013372:	2800      	cmp	r0, #0
 8013374:	da6e      	bge.n	8013454 <_dtoa_r+0x8f4>
 8013376:	2300      	movs	r3, #0
 8013378:	4651      	mov	r1, sl
 801337a:	220a      	movs	r2, #10
 801337c:	4620      	mov	r0, r4
 801337e:	f000 fd5c 	bl	8013e3a <__multadd>
 8013382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013384:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013388:	4682      	mov	sl, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	f000 81a8 	beq.w	80136e0 <_dtoa_r+0xb80>
 8013390:	2300      	movs	r3, #0
 8013392:	4639      	mov	r1, r7
 8013394:	220a      	movs	r2, #10
 8013396:	4620      	mov	r0, r4
 8013398:	f000 fd4f 	bl	8013e3a <__multadd>
 801339c:	9b04      	ldr	r3, [sp, #16]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	4607      	mov	r7, r0
 80133a2:	f300 80c8 	bgt.w	8013536 <_dtoa_r+0x9d6>
 80133a6:	9b07      	ldr	r3, [sp, #28]
 80133a8:	2b02      	cmp	r3, #2
 80133aa:	f340 80c4 	ble.w	8013536 <_dtoa_r+0x9d6>
 80133ae:	e059      	b.n	8013464 <_dtoa_r+0x904>
 80133b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80133b6:	e756      	b.n	8013266 <_dtoa_r+0x706>
 80133b8:	9b03      	ldr	r3, [sp, #12]
 80133ba:	1e5e      	subs	r6, r3, #1
 80133bc:	9b08      	ldr	r3, [sp, #32]
 80133be:	42b3      	cmp	r3, r6
 80133c0:	bfbf      	itttt	lt
 80133c2:	9b08      	ldrlt	r3, [sp, #32]
 80133c4:	9608      	strlt	r6, [sp, #32]
 80133c6:	1af2      	sublt	r2, r6, r3
 80133c8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80133ca:	bfb6      	itet	lt
 80133cc:	189b      	addlt	r3, r3, r2
 80133ce:	1b9e      	subge	r6, r3, r6
 80133d0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80133d2:	9b03      	ldr	r3, [sp, #12]
 80133d4:	bfb8      	it	lt
 80133d6:	2600      	movlt	r6, #0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	bfb9      	ittee	lt
 80133dc:	9b05      	ldrlt	r3, [sp, #20]
 80133de:	9a03      	ldrlt	r2, [sp, #12]
 80133e0:	9d05      	ldrge	r5, [sp, #20]
 80133e2:	9b03      	ldrge	r3, [sp, #12]
 80133e4:	bfbc      	itt	lt
 80133e6:	1a9d      	sublt	r5, r3, r2
 80133e8:	2300      	movlt	r3, #0
 80133ea:	e73e      	b.n	801326a <_dtoa_r+0x70a>
 80133ec:	9e08      	ldr	r6, [sp, #32]
 80133ee:	9d05      	ldr	r5, [sp, #20]
 80133f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80133f2:	e745      	b.n	8013280 <_dtoa_r+0x720>
 80133f4:	9a08      	ldr	r2, [sp, #32]
 80133f6:	e76e      	b.n	80132d6 <_dtoa_r+0x776>
 80133f8:	9b07      	ldr	r3, [sp, #28]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	dc19      	bgt.n	8013432 <_dtoa_r+0x8d2>
 80133fe:	9b00      	ldr	r3, [sp, #0]
 8013400:	b9bb      	cbnz	r3, 8013432 <_dtoa_r+0x8d2>
 8013402:	9b01      	ldr	r3, [sp, #4]
 8013404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013408:	b99b      	cbnz	r3, 8013432 <_dtoa_r+0x8d2>
 801340a:	9b01      	ldr	r3, [sp, #4]
 801340c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013410:	0d1b      	lsrs	r3, r3, #20
 8013412:	051b      	lsls	r3, r3, #20
 8013414:	b183      	cbz	r3, 8013438 <_dtoa_r+0x8d8>
 8013416:	9b05      	ldr	r3, [sp, #20]
 8013418:	3301      	adds	r3, #1
 801341a:	9305      	str	r3, [sp, #20]
 801341c:	9b06      	ldr	r3, [sp, #24]
 801341e:	3301      	adds	r3, #1
 8013420:	9306      	str	r3, [sp, #24]
 8013422:	f04f 0801 	mov.w	r8, #1
 8013426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013428:	2b00      	cmp	r3, #0
 801342a:	f47f af6d 	bne.w	8013308 <_dtoa_r+0x7a8>
 801342e:	2001      	movs	r0, #1
 8013430:	e772      	b.n	8013318 <_dtoa_r+0x7b8>
 8013432:	f04f 0800 	mov.w	r8, #0
 8013436:	e7f6      	b.n	8013426 <_dtoa_r+0x8c6>
 8013438:	4698      	mov	r8, r3
 801343a:	e7f4      	b.n	8013426 <_dtoa_r+0x8c6>
 801343c:	d080      	beq.n	8013340 <_dtoa_r+0x7e0>
 801343e:	9a05      	ldr	r2, [sp, #20]
 8013440:	331c      	adds	r3, #28
 8013442:	441a      	add	r2, r3
 8013444:	9205      	str	r2, [sp, #20]
 8013446:	9a06      	ldr	r2, [sp, #24]
 8013448:	441a      	add	r2, r3
 801344a:	441d      	add	r5, r3
 801344c:	4613      	mov	r3, r2
 801344e:	e776      	b.n	801333e <_dtoa_r+0x7de>
 8013450:	4603      	mov	r3, r0
 8013452:	e7f4      	b.n	801343e <_dtoa_r+0x8de>
 8013454:	9b03      	ldr	r3, [sp, #12]
 8013456:	2b00      	cmp	r3, #0
 8013458:	dc36      	bgt.n	80134c8 <_dtoa_r+0x968>
 801345a:	9b07      	ldr	r3, [sp, #28]
 801345c:	2b02      	cmp	r3, #2
 801345e:	dd33      	ble.n	80134c8 <_dtoa_r+0x968>
 8013460:	9b03      	ldr	r3, [sp, #12]
 8013462:	9304      	str	r3, [sp, #16]
 8013464:	9b04      	ldr	r3, [sp, #16]
 8013466:	b963      	cbnz	r3, 8013482 <_dtoa_r+0x922>
 8013468:	4631      	mov	r1, r6
 801346a:	2205      	movs	r2, #5
 801346c:	4620      	mov	r0, r4
 801346e:	f000 fce4 	bl	8013e3a <__multadd>
 8013472:	4601      	mov	r1, r0
 8013474:	4606      	mov	r6, r0
 8013476:	4650      	mov	r0, sl
 8013478:	f000 fe9d 	bl	80141b6 <__mcmp>
 801347c:	2800      	cmp	r0, #0
 801347e:	f73f adb6 	bgt.w	8012fee <_dtoa_r+0x48e>
 8013482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013484:	9d02      	ldr	r5, [sp, #8]
 8013486:	ea6f 0b03 	mvn.w	fp, r3
 801348a:	2300      	movs	r3, #0
 801348c:	9303      	str	r3, [sp, #12]
 801348e:	4631      	mov	r1, r6
 8013490:	4620      	mov	r0, r4
 8013492:	f000 fcbb 	bl	8013e0c <_Bfree>
 8013496:	2f00      	cmp	r7, #0
 8013498:	f43f aea6 	beq.w	80131e8 <_dtoa_r+0x688>
 801349c:	9b03      	ldr	r3, [sp, #12]
 801349e:	b12b      	cbz	r3, 80134ac <_dtoa_r+0x94c>
 80134a0:	42bb      	cmp	r3, r7
 80134a2:	d003      	beq.n	80134ac <_dtoa_r+0x94c>
 80134a4:	4619      	mov	r1, r3
 80134a6:	4620      	mov	r0, r4
 80134a8:	f000 fcb0 	bl	8013e0c <_Bfree>
 80134ac:	4639      	mov	r1, r7
 80134ae:	4620      	mov	r0, r4
 80134b0:	f000 fcac 	bl	8013e0c <_Bfree>
 80134b4:	e698      	b.n	80131e8 <_dtoa_r+0x688>
 80134b6:	2600      	movs	r6, #0
 80134b8:	4637      	mov	r7, r6
 80134ba:	e7e2      	b.n	8013482 <_dtoa_r+0x922>
 80134bc:	46bb      	mov	fp, r7
 80134be:	4637      	mov	r7, r6
 80134c0:	e595      	b.n	8012fee <_dtoa_r+0x48e>
 80134c2:	bf00      	nop
 80134c4:	40240000 	.word	0x40240000
 80134c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ca:	bb93      	cbnz	r3, 8013532 <_dtoa_r+0x9d2>
 80134cc:	9b03      	ldr	r3, [sp, #12]
 80134ce:	9304      	str	r3, [sp, #16]
 80134d0:	9d02      	ldr	r5, [sp, #8]
 80134d2:	4631      	mov	r1, r6
 80134d4:	4650      	mov	r0, sl
 80134d6:	f7ff fab5 	bl	8012a44 <quorem>
 80134da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80134de:	f805 9b01 	strb.w	r9, [r5], #1
 80134e2:	9b02      	ldr	r3, [sp, #8]
 80134e4:	9a04      	ldr	r2, [sp, #16]
 80134e6:	1aeb      	subs	r3, r5, r3
 80134e8:	429a      	cmp	r2, r3
 80134ea:	f300 80dc 	bgt.w	80136a6 <_dtoa_r+0xb46>
 80134ee:	9b02      	ldr	r3, [sp, #8]
 80134f0:	2a01      	cmp	r2, #1
 80134f2:	bfac      	ite	ge
 80134f4:	189b      	addge	r3, r3, r2
 80134f6:	3301      	addlt	r3, #1
 80134f8:	4698      	mov	r8, r3
 80134fa:	2300      	movs	r3, #0
 80134fc:	9303      	str	r3, [sp, #12]
 80134fe:	4651      	mov	r1, sl
 8013500:	2201      	movs	r2, #1
 8013502:	4620      	mov	r0, r4
 8013504:	f000 fe06 	bl	8014114 <__lshift>
 8013508:	4631      	mov	r1, r6
 801350a:	4682      	mov	sl, r0
 801350c:	f000 fe53 	bl	80141b6 <__mcmp>
 8013510:	2800      	cmp	r0, #0
 8013512:	f300 808d 	bgt.w	8013630 <_dtoa_r+0xad0>
 8013516:	d103      	bne.n	8013520 <_dtoa_r+0x9c0>
 8013518:	f019 0f01 	tst.w	r9, #1
 801351c:	f040 8088 	bne.w	8013630 <_dtoa_r+0xad0>
 8013520:	4645      	mov	r5, r8
 8013522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013526:	2b30      	cmp	r3, #48	; 0x30
 8013528:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801352c:	d1af      	bne.n	801348e <_dtoa_r+0x92e>
 801352e:	4615      	mov	r5, r2
 8013530:	e7f7      	b.n	8013522 <_dtoa_r+0x9c2>
 8013532:	9b03      	ldr	r3, [sp, #12]
 8013534:	9304      	str	r3, [sp, #16]
 8013536:	2d00      	cmp	r5, #0
 8013538:	dd05      	ble.n	8013546 <_dtoa_r+0x9e6>
 801353a:	4639      	mov	r1, r7
 801353c:	462a      	mov	r2, r5
 801353e:	4620      	mov	r0, r4
 8013540:	f000 fde8 	bl	8014114 <__lshift>
 8013544:	4607      	mov	r7, r0
 8013546:	f1b8 0f00 	cmp.w	r8, #0
 801354a:	d04c      	beq.n	80135e6 <_dtoa_r+0xa86>
 801354c:	6879      	ldr	r1, [r7, #4]
 801354e:	4620      	mov	r0, r4
 8013550:	f000 fc28 	bl	8013da4 <_Balloc>
 8013554:	693a      	ldr	r2, [r7, #16]
 8013556:	3202      	adds	r2, #2
 8013558:	4605      	mov	r5, r0
 801355a:	0092      	lsls	r2, r2, #2
 801355c:	f107 010c 	add.w	r1, r7, #12
 8013560:	300c      	adds	r0, #12
 8013562:	f7fd f93b 	bl	80107dc <memcpy>
 8013566:	2201      	movs	r2, #1
 8013568:	4629      	mov	r1, r5
 801356a:	4620      	mov	r0, r4
 801356c:	f000 fdd2 	bl	8014114 <__lshift>
 8013570:	9b00      	ldr	r3, [sp, #0]
 8013572:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013576:	9703      	str	r7, [sp, #12]
 8013578:	f003 0301 	and.w	r3, r3, #1
 801357c:	4607      	mov	r7, r0
 801357e:	9305      	str	r3, [sp, #20]
 8013580:	4631      	mov	r1, r6
 8013582:	4650      	mov	r0, sl
 8013584:	f7ff fa5e 	bl	8012a44 <quorem>
 8013588:	9903      	ldr	r1, [sp, #12]
 801358a:	4605      	mov	r5, r0
 801358c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013590:	4650      	mov	r0, sl
 8013592:	f000 fe10 	bl	80141b6 <__mcmp>
 8013596:	463a      	mov	r2, r7
 8013598:	9000      	str	r0, [sp, #0]
 801359a:	4631      	mov	r1, r6
 801359c:	4620      	mov	r0, r4
 801359e:	f000 fe24 	bl	80141ea <__mdiff>
 80135a2:	68c3      	ldr	r3, [r0, #12]
 80135a4:	4602      	mov	r2, r0
 80135a6:	bb03      	cbnz	r3, 80135ea <_dtoa_r+0xa8a>
 80135a8:	4601      	mov	r1, r0
 80135aa:	9006      	str	r0, [sp, #24]
 80135ac:	4650      	mov	r0, sl
 80135ae:	f000 fe02 	bl	80141b6 <__mcmp>
 80135b2:	9a06      	ldr	r2, [sp, #24]
 80135b4:	4603      	mov	r3, r0
 80135b6:	4611      	mov	r1, r2
 80135b8:	4620      	mov	r0, r4
 80135ba:	9306      	str	r3, [sp, #24]
 80135bc:	f000 fc26 	bl	8013e0c <_Bfree>
 80135c0:	9b06      	ldr	r3, [sp, #24]
 80135c2:	b9a3      	cbnz	r3, 80135ee <_dtoa_r+0xa8e>
 80135c4:	9a07      	ldr	r2, [sp, #28]
 80135c6:	b992      	cbnz	r2, 80135ee <_dtoa_r+0xa8e>
 80135c8:	9a05      	ldr	r2, [sp, #20]
 80135ca:	b982      	cbnz	r2, 80135ee <_dtoa_r+0xa8e>
 80135cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80135d0:	d029      	beq.n	8013626 <_dtoa_r+0xac6>
 80135d2:	9b00      	ldr	r3, [sp, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	dd01      	ble.n	80135dc <_dtoa_r+0xa7c>
 80135d8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80135dc:	f108 0501 	add.w	r5, r8, #1
 80135e0:	f888 9000 	strb.w	r9, [r8]
 80135e4:	e753      	b.n	801348e <_dtoa_r+0x92e>
 80135e6:	4638      	mov	r0, r7
 80135e8:	e7c2      	b.n	8013570 <_dtoa_r+0xa10>
 80135ea:	2301      	movs	r3, #1
 80135ec:	e7e3      	b.n	80135b6 <_dtoa_r+0xa56>
 80135ee:	9a00      	ldr	r2, [sp, #0]
 80135f0:	2a00      	cmp	r2, #0
 80135f2:	db04      	blt.n	80135fe <_dtoa_r+0xa9e>
 80135f4:	d125      	bne.n	8013642 <_dtoa_r+0xae2>
 80135f6:	9a07      	ldr	r2, [sp, #28]
 80135f8:	bb1a      	cbnz	r2, 8013642 <_dtoa_r+0xae2>
 80135fa:	9a05      	ldr	r2, [sp, #20]
 80135fc:	bb0a      	cbnz	r2, 8013642 <_dtoa_r+0xae2>
 80135fe:	2b00      	cmp	r3, #0
 8013600:	ddec      	ble.n	80135dc <_dtoa_r+0xa7c>
 8013602:	4651      	mov	r1, sl
 8013604:	2201      	movs	r2, #1
 8013606:	4620      	mov	r0, r4
 8013608:	f000 fd84 	bl	8014114 <__lshift>
 801360c:	4631      	mov	r1, r6
 801360e:	4682      	mov	sl, r0
 8013610:	f000 fdd1 	bl	80141b6 <__mcmp>
 8013614:	2800      	cmp	r0, #0
 8013616:	dc03      	bgt.n	8013620 <_dtoa_r+0xac0>
 8013618:	d1e0      	bne.n	80135dc <_dtoa_r+0xa7c>
 801361a:	f019 0f01 	tst.w	r9, #1
 801361e:	d0dd      	beq.n	80135dc <_dtoa_r+0xa7c>
 8013620:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013624:	d1d8      	bne.n	80135d8 <_dtoa_r+0xa78>
 8013626:	2339      	movs	r3, #57	; 0x39
 8013628:	f888 3000 	strb.w	r3, [r8]
 801362c:	f108 0801 	add.w	r8, r8, #1
 8013630:	4645      	mov	r5, r8
 8013632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013636:	2b39      	cmp	r3, #57	; 0x39
 8013638:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801363c:	d03b      	beq.n	80136b6 <_dtoa_r+0xb56>
 801363e:	3301      	adds	r3, #1
 8013640:	e040      	b.n	80136c4 <_dtoa_r+0xb64>
 8013642:	2b00      	cmp	r3, #0
 8013644:	f108 0501 	add.w	r5, r8, #1
 8013648:	dd05      	ble.n	8013656 <_dtoa_r+0xaf6>
 801364a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801364e:	d0ea      	beq.n	8013626 <_dtoa_r+0xac6>
 8013650:	f109 0901 	add.w	r9, r9, #1
 8013654:	e7c4      	b.n	80135e0 <_dtoa_r+0xa80>
 8013656:	9b02      	ldr	r3, [sp, #8]
 8013658:	9a04      	ldr	r2, [sp, #16]
 801365a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801365e:	1aeb      	subs	r3, r5, r3
 8013660:	4293      	cmp	r3, r2
 8013662:	46a8      	mov	r8, r5
 8013664:	f43f af4b 	beq.w	80134fe <_dtoa_r+0x99e>
 8013668:	4651      	mov	r1, sl
 801366a:	2300      	movs	r3, #0
 801366c:	220a      	movs	r2, #10
 801366e:	4620      	mov	r0, r4
 8013670:	f000 fbe3 	bl	8013e3a <__multadd>
 8013674:	9b03      	ldr	r3, [sp, #12]
 8013676:	9903      	ldr	r1, [sp, #12]
 8013678:	42bb      	cmp	r3, r7
 801367a:	4682      	mov	sl, r0
 801367c:	f04f 0300 	mov.w	r3, #0
 8013680:	f04f 020a 	mov.w	r2, #10
 8013684:	4620      	mov	r0, r4
 8013686:	d104      	bne.n	8013692 <_dtoa_r+0xb32>
 8013688:	f000 fbd7 	bl	8013e3a <__multadd>
 801368c:	9003      	str	r0, [sp, #12]
 801368e:	4607      	mov	r7, r0
 8013690:	e776      	b.n	8013580 <_dtoa_r+0xa20>
 8013692:	f000 fbd2 	bl	8013e3a <__multadd>
 8013696:	2300      	movs	r3, #0
 8013698:	9003      	str	r0, [sp, #12]
 801369a:	220a      	movs	r2, #10
 801369c:	4639      	mov	r1, r7
 801369e:	4620      	mov	r0, r4
 80136a0:	f000 fbcb 	bl	8013e3a <__multadd>
 80136a4:	e7f3      	b.n	801368e <_dtoa_r+0xb2e>
 80136a6:	4651      	mov	r1, sl
 80136a8:	2300      	movs	r3, #0
 80136aa:	220a      	movs	r2, #10
 80136ac:	4620      	mov	r0, r4
 80136ae:	f000 fbc4 	bl	8013e3a <__multadd>
 80136b2:	4682      	mov	sl, r0
 80136b4:	e70d      	b.n	80134d2 <_dtoa_r+0x972>
 80136b6:	9b02      	ldr	r3, [sp, #8]
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d105      	bne.n	80136c8 <_dtoa_r+0xb68>
 80136bc:	9a02      	ldr	r2, [sp, #8]
 80136be:	f10b 0b01 	add.w	fp, fp, #1
 80136c2:	2331      	movs	r3, #49	; 0x31
 80136c4:	7013      	strb	r3, [r2, #0]
 80136c6:	e6e2      	b.n	801348e <_dtoa_r+0x92e>
 80136c8:	4615      	mov	r5, r2
 80136ca:	e7b2      	b.n	8013632 <_dtoa_r+0xad2>
 80136cc:	4b09      	ldr	r3, [pc, #36]	; (80136f4 <_dtoa_r+0xb94>)
 80136ce:	f7ff baae 	b.w	8012c2e <_dtoa_r+0xce>
 80136d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f47f aa88 	bne.w	8012bea <_dtoa_r+0x8a>
 80136da:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <_dtoa_r+0xb98>)
 80136dc:	f7ff baa7 	b.w	8012c2e <_dtoa_r+0xce>
 80136e0:	9b04      	ldr	r3, [sp, #16]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f73f aef4 	bgt.w	80134d0 <_dtoa_r+0x970>
 80136e8:	9b07      	ldr	r3, [sp, #28]
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	f77f aef0 	ble.w	80134d0 <_dtoa_r+0x970>
 80136f0:	e6b8      	b.n	8013464 <_dtoa_r+0x904>
 80136f2:	bf00      	nop
 80136f4:	080faf36 	.word	0x080faf36
 80136f8:	080faf78 	.word	0x080faf78

080136fc <__sflush_r>:
 80136fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013700:	b293      	uxth	r3, r2
 8013702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013706:	4605      	mov	r5, r0
 8013708:	0718      	lsls	r0, r3, #28
 801370a:	460c      	mov	r4, r1
 801370c:	d461      	bmi.n	80137d2 <__sflush_r+0xd6>
 801370e:	684b      	ldr	r3, [r1, #4]
 8013710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013714:	2b00      	cmp	r3, #0
 8013716:	818a      	strh	r2, [r1, #12]
 8013718:	dc05      	bgt.n	8013726 <__sflush_r+0x2a>
 801371a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801371c:	2b00      	cmp	r3, #0
 801371e:	dc02      	bgt.n	8013726 <__sflush_r+0x2a>
 8013720:	2000      	movs	r0, #0
 8013722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013728:	2e00      	cmp	r6, #0
 801372a:	d0f9      	beq.n	8013720 <__sflush_r+0x24>
 801372c:	2300      	movs	r3, #0
 801372e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013732:	682f      	ldr	r7, [r5, #0]
 8013734:	602b      	str	r3, [r5, #0]
 8013736:	d037      	beq.n	80137a8 <__sflush_r+0xac>
 8013738:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801373a:	89a3      	ldrh	r3, [r4, #12]
 801373c:	075a      	lsls	r2, r3, #29
 801373e:	d505      	bpl.n	801374c <__sflush_r+0x50>
 8013740:	6863      	ldr	r3, [r4, #4]
 8013742:	1ac0      	subs	r0, r0, r3
 8013744:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013746:	b10b      	cbz	r3, 801374c <__sflush_r+0x50>
 8013748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801374a:	1ac0      	subs	r0, r0, r3
 801374c:	2300      	movs	r3, #0
 801374e:	4602      	mov	r2, r0
 8013750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013752:	6a21      	ldr	r1, [r4, #32]
 8013754:	4628      	mov	r0, r5
 8013756:	47b0      	blx	r6
 8013758:	1c43      	adds	r3, r0, #1
 801375a:	89a3      	ldrh	r3, [r4, #12]
 801375c:	d106      	bne.n	801376c <__sflush_r+0x70>
 801375e:	6829      	ldr	r1, [r5, #0]
 8013760:	291d      	cmp	r1, #29
 8013762:	d84f      	bhi.n	8013804 <__sflush_r+0x108>
 8013764:	4a2d      	ldr	r2, [pc, #180]	; (801381c <__sflush_r+0x120>)
 8013766:	40ca      	lsrs	r2, r1
 8013768:	07d6      	lsls	r6, r2, #31
 801376a:	d54b      	bpl.n	8013804 <__sflush_r+0x108>
 801376c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013770:	b21b      	sxth	r3, r3
 8013772:	2200      	movs	r2, #0
 8013774:	6062      	str	r2, [r4, #4]
 8013776:	04d9      	lsls	r1, r3, #19
 8013778:	6922      	ldr	r2, [r4, #16]
 801377a:	81a3      	strh	r3, [r4, #12]
 801377c:	6022      	str	r2, [r4, #0]
 801377e:	d504      	bpl.n	801378a <__sflush_r+0x8e>
 8013780:	1c42      	adds	r2, r0, #1
 8013782:	d101      	bne.n	8013788 <__sflush_r+0x8c>
 8013784:	682b      	ldr	r3, [r5, #0]
 8013786:	b903      	cbnz	r3, 801378a <__sflush_r+0x8e>
 8013788:	6560      	str	r0, [r4, #84]	; 0x54
 801378a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801378c:	602f      	str	r7, [r5, #0]
 801378e:	2900      	cmp	r1, #0
 8013790:	d0c6      	beq.n	8013720 <__sflush_r+0x24>
 8013792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013796:	4299      	cmp	r1, r3
 8013798:	d002      	beq.n	80137a0 <__sflush_r+0xa4>
 801379a:	4628      	mov	r0, r5
 801379c:	f000 f9aa 	bl	8013af4 <_free_r>
 80137a0:	2000      	movs	r0, #0
 80137a2:	6360      	str	r0, [r4, #52]	; 0x34
 80137a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137a8:	6a21      	ldr	r1, [r4, #32]
 80137aa:	2301      	movs	r3, #1
 80137ac:	4628      	mov	r0, r5
 80137ae:	47b0      	blx	r6
 80137b0:	1c41      	adds	r1, r0, #1
 80137b2:	d1c2      	bne.n	801373a <__sflush_r+0x3e>
 80137b4:	682b      	ldr	r3, [r5, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d0bf      	beq.n	801373a <__sflush_r+0x3e>
 80137ba:	2b1d      	cmp	r3, #29
 80137bc:	d001      	beq.n	80137c2 <__sflush_r+0xc6>
 80137be:	2b16      	cmp	r3, #22
 80137c0:	d101      	bne.n	80137c6 <__sflush_r+0xca>
 80137c2:	602f      	str	r7, [r5, #0]
 80137c4:	e7ac      	b.n	8013720 <__sflush_r+0x24>
 80137c6:	89a3      	ldrh	r3, [r4, #12]
 80137c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137cc:	81a3      	strh	r3, [r4, #12]
 80137ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137d2:	690f      	ldr	r7, [r1, #16]
 80137d4:	2f00      	cmp	r7, #0
 80137d6:	d0a3      	beq.n	8013720 <__sflush_r+0x24>
 80137d8:	079b      	lsls	r3, r3, #30
 80137da:	680e      	ldr	r6, [r1, #0]
 80137dc:	bf08      	it	eq
 80137de:	694b      	ldreq	r3, [r1, #20]
 80137e0:	600f      	str	r7, [r1, #0]
 80137e2:	bf18      	it	ne
 80137e4:	2300      	movne	r3, #0
 80137e6:	eba6 0807 	sub.w	r8, r6, r7
 80137ea:	608b      	str	r3, [r1, #8]
 80137ec:	f1b8 0f00 	cmp.w	r8, #0
 80137f0:	dd96      	ble.n	8013720 <__sflush_r+0x24>
 80137f2:	4643      	mov	r3, r8
 80137f4:	463a      	mov	r2, r7
 80137f6:	6a21      	ldr	r1, [r4, #32]
 80137f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137fa:	4628      	mov	r0, r5
 80137fc:	47b0      	blx	r6
 80137fe:	2800      	cmp	r0, #0
 8013800:	dc07      	bgt.n	8013812 <__sflush_r+0x116>
 8013802:	89a3      	ldrh	r3, [r4, #12]
 8013804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013808:	81a3      	strh	r3, [r4, #12]
 801380a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801380e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013812:	4407      	add	r7, r0
 8013814:	eba8 0800 	sub.w	r8, r8, r0
 8013818:	e7e8      	b.n	80137ec <__sflush_r+0xf0>
 801381a:	bf00      	nop
 801381c:	20400001 	.word	0x20400001

08013820 <_fflush_r>:
 8013820:	b538      	push	{r3, r4, r5, lr}
 8013822:	690b      	ldr	r3, [r1, #16]
 8013824:	4605      	mov	r5, r0
 8013826:	460c      	mov	r4, r1
 8013828:	b913      	cbnz	r3, 8013830 <_fflush_r+0x10>
 801382a:	2500      	movs	r5, #0
 801382c:	4628      	mov	r0, r5
 801382e:	bd38      	pop	{r3, r4, r5, pc}
 8013830:	b118      	cbz	r0, 801383a <_fflush_r+0x1a>
 8013832:	6983      	ldr	r3, [r0, #24]
 8013834:	b90b      	cbnz	r3, 801383a <_fflush_r+0x1a>
 8013836:	f000 f887 	bl	8013948 <__sinit>
 801383a:	4b14      	ldr	r3, [pc, #80]	; (801388c <_fflush_r+0x6c>)
 801383c:	429c      	cmp	r4, r3
 801383e:	d11b      	bne.n	8013878 <_fflush_r+0x58>
 8013840:	686c      	ldr	r4, [r5, #4]
 8013842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d0ef      	beq.n	801382a <_fflush_r+0xa>
 801384a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801384c:	07d0      	lsls	r0, r2, #31
 801384e:	d404      	bmi.n	801385a <_fflush_r+0x3a>
 8013850:	0599      	lsls	r1, r3, #22
 8013852:	d402      	bmi.n	801385a <_fflush_r+0x3a>
 8013854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013856:	f000 fa37 	bl	8013cc8 <__retarget_lock_acquire_recursive>
 801385a:	4628      	mov	r0, r5
 801385c:	4621      	mov	r1, r4
 801385e:	f7ff ff4d 	bl	80136fc <__sflush_r>
 8013862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013864:	07da      	lsls	r2, r3, #31
 8013866:	4605      	mov	r5, r0
 8013868:	d4e0      	bmi.n	801382c <_fflush_r+0xc>
 801386a:	89a3      	ldrh	r3, [r4, #12]
 801386c:	059b      	lsls	r3, r3, #22
 801386e:	d4dd      	bmi.n	801382c <_fflush_r+0xc>
 8013870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013872:	f000 fa2a 	bl	8013cca <__retarget_lock_release_recursive>
 8013876:	e7d9      	b.n	801382c <_fflush_r+0xc>
 8013878:	4b05      	ldr	r3, [pc, #20]	; (8013890 <_fflush_r+0x70>)
 801387a:	429c      	cmp	r4, r3
 801387c:	d101      	bne.n	8013882 <_fflush_r+0x62>
 801387e:	68ac      	ldr	r4, [r5, #8]
 8013880:	e7df      	b.n	8013842 <_fflush_r+0x22>
 8013882:	4b04      	ldr	r3, [pc, #16]	; (8013894 <_fflush_r+0x74>)
 8013884:	429c      	cmp	r4, r3
 8013886:	bf08      	it	eq
 8013888:	68ec      	ldreq	r4, [r5, #12]
 801388a:	e7da      	b.n	8013842 <_fflush_r+0x22>
 801388c:	080fafa8 	.word	0x080fafa8
 8013890:	080fafc8 	.word	0x080fafc8
 8013894:	080faf88 	.word	0x080faf88

08013898 <_cleanup_r>:
 8013898:	4901      	ldr	r1, [pc, #4]	; (80138a0 <_cleanup_r+0x8>)
 801389a:	f000 b9e7 	b.w	8013c6c <_fwalk_reent>
 801389e:	bf00      	nop
 80138a0:	080145c9 	.word	0x080145c9

080138a4 <std.isra.0>:
 80138a4:	2300      	movs	r3, #0
 80138a6:	b510      	push	{r4, lr}
 80138a8:	4604      	mov	r4, r0
 80138aa:	6003      	str	r3, [r0, #0]
 80138ac:	6043      	str	r3, [r0, #4]
 80138ae:	6083      	str	r3, [r0, #8]
 80138b0:	8181      	strh	r1, [r0, #12]
 80138b2:	6643      	str	r3, [r0, #100]	; 0x64
 80138b4:	81c2      	strh	r2, [r0, #14]
 80138b6:	6103      	str	r3, [r0, #16]
 80138b8:	6143      	str	r3, [r0, #20]
 80138ba:	6183      	str	r3, [r0, #24]
 80138bc:	4619      	mov	r1, r3
 80138be:	2208      	movs	r2, #8
 80138c0:	305c      	adds	r0, #92	; 0x5c
 80138c2:	f7fc ff96 	bl	80107f2 <memset>
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <std.isra.0+0x38>)
 80138c8:	6263      	str	r3, [r4, #36]	; 0x24
 80138ca:	4b05      	ldr	r3, [pc, #20]	; (80138e0 <std.isra.0+0x3c>)
 80138cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80138ce:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <std.isra.0+0x40>)
 80138d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138d2:	4b05      	ldr	r3, [pc, #20]	; (80138e8 <std.isra.0+0x44>)
 80138d4:	6224      	str	r4, [r4, #32]
 80138d6:	6323      	str	r3, [r4, #48]	; 0x30
 80138d8:	bd10      	pop	{r4, pc}
 80138da:	bf00      	nop
 80138dc:	08014345 	.word	0x08014345
 80138e0:	08014367 	.word	0x08014367
 80138e4:	0801439f 	.word	0x0801439f
 80138e8:	080143c3 	.word	0x080143c3

080138ec <__sfmoreglue>:
 80138ec:	b570      	push	{r4, r5, r6, lr}
 80138ee:	1e4a      	subs	r2, r1, #1
 80138f0:	2568      	movs	r5, #104	; 0x68
 80138f2:	4355      	muls	r5, r2
 80138f4:	460e      	mov	r6, r1
 80138f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138fa:	f7fc fd61 	bl	80103c0 <_malloc_r>
 80138fe:	4604      	mov	r4, r0
 8013900:	b140      	cbz	r0, 8013914 <__sfmoreglue+0x28>
 8013902:	2100      	movs	r1, #0
 8013904:	e880 0042 	stmia.w	r0, {r1, r6}
 8013908:	300c      	adds	r0, #12
 801390a:	60a0      	str	r0, [r4, #8]
 801390c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013910:	f7fc ff6f 	bl	80107f2 <memset>
 8013914:	4620      	mov	r0, r4
 8013916:	bd70      	pop	{r4, r5, r6, pc}

08013918 <__sfp_lock_acquire>:
 8013918:	4801      	ldr	r0, [pc, #4]	; (8013920 <__sfp_lock_acquire+0x8>)
 801391a:	f000 b9d5 	b.w	8013cc8 <__retarget_lock_acquire_recursive>
 801391e:	bf00      	nop
 8013920:	20015ec4 	.word	0x20015ec4

08013924 <__sfp_lock_release>:
 8013924:	4801      	ldr	r0, [pc, #4]	; (801392c <__sfp_lock_release+0x8>)
 8013926:	f000 b9d0 	b.w	8013cca <__retarget_lock_release_recursive>
 801392a:	bf00      	nop
 801392c:	20015ec4 	.word	0x20015ec4

08013930 <__sinit_lock_acquire>:
 8013930:	4801      	ldr	r0, [pc, #4]	; (8013938 <__sinit_lock_acquire+0x8>)
 8013932:	f000 b9c9 	b.w	8013cc8 <__retarget_lock_acquire_recursive>
 8013936:	bf00      	nop
 8013938:	20015ebf 	.word	0x20015ebf

0801393c <__sinit_lock_release>:
 801393c:	4801      	ldr	r0, [pc, #4]	; (8013944 <__sinit_lock_release+0x8>)
 801393e:	f000 b9c4 	b.w	8013cca <__retarget_lock_release_recursive>
 8013942:	bf00      	nop
 8013944:	20015ebf 	.word	0x20015ebf

08013948 <__sinit>:
 8013948:	b510      	push	{r4, lr}
 801394a:	4604      	mov	r4, r0
 801394c:	f7ff fff0 	bl	8013930 <__sinit_lock_acquire>
 8013950:	69a3      	ldr	r3, [r4, #24]
 8013952:	b11b      	cbz	r3, 801395c <__sinit+0x14>
 8013954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013958:	f7ff bff0 	b.w	801393c <__sinit_lock_release>
 801395c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8013960:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8013964:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8013968:	4b12      	ldr	r3, [pc, #72]	; (80139b4 <__sinit+0x6c>)
 801396a:	4a13      	ldr	r2, [pc, #76]	; (80139b8 <__sinit+0x70>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	62a2      	str	r2, [r4, #40]	; 0x28
 8013970:	429c      	cmp	r4, r3
 8013972:	bf04      	itt	eq
 8013974:	2301      	moveq	r3, #1
 8013976:	61a3      	streq	r3, [r4, #24]
 8013978:	4620      	mov	r0, r4
 801397a:	f000 f81f 	bl	80139bc <__sfp>
 801397e:	6060      	str	r0, [r4, #4]
 8013980:	4620      	mov	r0, r4
 8013982:	f000 f81b 	bl	80139bc <__sfp>
 8013986:	60a0      	str	r0, [r4, #8]
 8013988:	4620      	mov	r0, r4
 801398a:	f000 f817 	bl	80139bc <__sfp>
 801398e:	2200      	movs	r2, #0
 8013990:	60e0      	str	r0, [r4, #12]
 8013992:	2104      	movs	r1, #4
 8013994:	6860      	ldr	r0, [r4, #4]
 8013996:	f7ff ff85 	bl	80138a4 <std.isra.0>
 801399a:	2201      	movs	r2, #1
 801399c:	2109      	movs	r1, #9
 801399e:	68a0      	ldr	r0, [r4, #8]
 80139a0:	f7ff ff80 	bl	80138a4 <std.isra.0>
 80139a4:	2202      	movs	r2, #2
 80139a6:	2112      	movs	r1, #18
 80139a8:	68e0      	ldr	r0, [r4, #12]
 80139aa:	f7ff ff7b 	bl	80138a4 <std.isra.0>
 80139ae:	2301      	movs	r3, #1
 80139b0:	61a3      	str	r3, [r4, #24]
 80139b2:	e7cf      	b.n	8013954 <__sinit+0xc>
 80139b4:	080faf00 	.word	0x080faf00
 80139b8:	08013899 	.word	0x08013899

080139bc <__sfp>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	4607      	mov	r7, r0
 80139c0:	f7ff ffaa 	bl	8013918 <__sfp_lock_acquire>
 80139c4:	4b1f      	ldr	r3, [pc, #124]	; (8013a44 <__sfp+0x88>)
 80139c6:	681e      	ldr	r6, [r3, #0]
 80139c8:	69b3      	ldr	r3, [r6, #24]
 80139ca:	b913      	cbnz	r3, 80139d2 <__sfp+0x16>
 80139cc:	4630      	mov	r0, r6
 80139ce:	f7ff ffbb 	bl	8013948 <__sinit>
 80139d2:	36d8      	adds	r6, #216	; 0xd8
 80139d4:	68b4      	ldr	r4, [r6, #8]
 80139d6:	6873      	ldr	r3, [r6, #4]
 80139d8:	3b01      	subs	r3, #1
 80139da:	d503      	bpl.n	80139e4 <__sfp+0x28>
 80139dc:	6833      	ldr	r3, [r6, #0]
 80139de:	b133      	cbz	r3, 80139ee <__sfp+0x32>
 80139e0:	6836      	ldr	r6, [r6, #0]
 80139e2:	e7f7      	b.n	80139d4 <__sfp+0x18>
 80139e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139e8:	b17d      	cbz	r5, 8013a0a <__sfp+0x4e>
 80139ea:	3468      	adds	r4, #104	; 0x68
 80139ec:	e7f4      	b.n	80139d8 <__sfp+0x1c>
 80139ee:	2104      	movs	r1, #4
 80139f0:	4638      	mov	r0, r7
 80139f2:	f7ff ff7b 	bl	80138ec <__sfmoreglue>
 80139f6:	4604      	mov	r4, r0
 80139f8:	6030      	str	r0, [r6, #0]
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d1f0      	bne.n	80139e0 <__sfp+0x24>
 80139fe:	f7ff ff91 	bl	8013924 <__sfp_lock_release>
 8013a02:	230c      	movs	r3, #12
 8013a04:	603b      	str	r3, [r7, #0]
 8013a06:	4620      	mov	r0, r4
 8013a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a0e:	81e3      	strh	r3, [r4, #14]
 8013a10:	2301      	movs	r3, #1
 8013a12:	81a3      	strh	r3, [r4, #12]
 8013a14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a18:	6665      	str	r5, [r4, #100]	; 0x64
 8013a1a:	f000 f953 	bl	8013cc4 <__retarget_lock_init_recursive>
 8013a1e:	f7ff ff81 	bl	8013924 <__sfp_lock_release>
 8013a22:	6025      	str	r5, [r4, #0]
 8013a24:	60a5      	str	r5, [r4, #8]
 8013a26:	6065      	str	r5, [r4, #4]
 8013a28:	6125      	str	r5, [r4, #16]
 8013a2a:	6165      	str	r5, [r4, #20]
 8013a2c:	61a5      	str	r5, [r4, #24]
 8013a2e:	2208      	movs	r2, #8
 8013a30:	4629      	mov	r1, r5
 8013a32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a36:	f7fc fedc 	bl	80107f2 <memset>
 8013a3a:	6365      	str	r5, [r4, #52]	; 0x34
 8013a3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8013a3e:	64a5      	str	r5, [r4, #72]	; 0x48
 8013a40:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013a42:	e7e0      	b.n	8013a06 <__sfp+0x4a>
 8013a44:	080faf00 	.word	0x080faf00

08013a48 <_malloc_trim_r>:
 8013a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a4c:	4f25      	ldr	r7, [pc, #148]	; (8013ae4 <_malloc_trim_r+0x9c>)
 8013a4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8013af0 <_malloc_trim_r+0xa8>
 8013a52:	4689      	mov	r9, r1
 8013a54:	4606      	mov	r6, r0
 8013a56:	f7fc fed5 	bl	8010804 <__malloc_lock>
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	685d      	ldr	r5, [r3, #4]
 8013a5e:	f1a8 0411 	sub.w	r4, r8, #17
 8013a62:	f025 0503 	bic.w	r5, r5, #3
 8013a66:	eba4 0409 	sub.w	r4, r4, r9
 8013a6a:	442c      	add	r4, r5
 8013a6c:	fbb4 f4f8 	udiv	r4, r4, r8
 8013a70:	3c01      	subs	r4, #1
 8013a72:	fb08 f404 	mul.w	r4, r8, r4
 8013a76:	4544      	cmp	r4, r8
 8013a78:	da05      	bge.n	8013a86 <_malloc_trim_r+0x3e>
 8013a7a:	4630      	mov	r0, r6
 8013a7c:	f7fc fec8 	bl	8010810 <__malloc_unlock>
 8013a80:	2000      	movs	r0, #0
 8013a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a86:	2100      	movs	r1, #0
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f7fc fedf 	bl	801084c <_sbrk_r>
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	442b      	add	r3, r5
 8013a92:	4298      	cmp	r0, r3
 8013a94:	d1f1      	bne.n	8013a7a <_malloc_trim_r+0x32>
 8013a96:	4261      	negs	r1, r4
 8013a98:	4630      	mov	r0, r6
 8013a9a:	f7fc fed7 	bl	801084c <_sbrk_r>
 8013a9e:	3001      	adds	r0, #1
 8013aa0:	d110      	bne.n	8013ac4 <_malloc_trim_r+0x7c>
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f7fc fed1 	bl	801084c <_sbrk_r>
 8013aaa:	68ba      	ldr	r2, [r7, #8]
 8013aac:	1a83      	subs	r3, r0, r2
 8013aae:	2b0f      	cmp	r3, #15
 8013ab0:	dde3      	ble.n	8013a7a <_malloc_trim_r+0x32>
 8013ab2:	490d      	ldr	r1, [pc, #52]	; (8013ae8 <_malloc_trim_r+0xa0>)
 8013ab4:	6809      	ldr	r1, [r1, #0]
 8013ab6:	1a40      	subs	r0, r0, r1
 8013ab8:	490c      	ldr	r1, [pc, #48]	; (8013aec <_malloc_trim_r+0xa4>)
 8013aba:	f043 0301 	orr.w	r3, r3, #1
 8013abe:	6008      	str	r0, [r1, #0]
 8013ac0:	6053      	str	r3, [r2, #4]
 8013ac2:	e7da      	b.n	8013a7a <_malloc_trim_r+0x32>
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	4a09      	ldr	r2, [pc, #36]	; (8013aec <_malloc_trim_r+0xa4>)
 8013ac8:	1b2d      	subs	r5, r5, r4
 8013aca:	f045 0501 	orr.w	r5, r5, #1
 8013ace:	605d      	str	r5, [r3, #4]
 8013ad0:	6813      	ldr	r3, [r2, #0]
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	1b1c      	subs	r4, r3, r4
 8013ad6:	6014      	str	r4, [r2, #0]
 8013ad8:	f7fc fe9a 	bl	8010810 <__malloc_unlock>
 8013adc:	2001      	movs	r0, #1
 8013ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ae2:	bf00      	nop
 8013ae4:	2000022c 	.word	0x2000022c
 8013ae8:	20000634 	.word	0x20000634
 8013aec:	20015188 	.word	0x20015188
 8013af0:	00000080 	.word	0x00000080

08013af4 <_free_r>:
 8013af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af8:	4604      	mov	r4, r0
 8013afa:	4688      	mov	r8, r1
 8013afc:	2900      	cmp	r1, #0
 8013afe:	f000 80ab 	beq.w	8013c58 <_free_r+0x164>
 8013b02:	f7fc fe7f 	bl	8010804 <__malloc_lock>
 8013b06:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8013b0a:	4d54      	ldr	r5, [pc, #336]	; (8013c5c <_free_r+0x168>)
 8013b0c:	f022 0001 	bic.w	r0, r2, #1
 8013b10:	f1a8 0308 	sub.w	r3, r8, #8
 8013b14:	181f      	adds	r7, r3, r0
 8013b16:	68a9      	ldr	r1, [r5, #8]
 8013b18:	687e      	ldr	r6, [r7, #4]
 8013b1a:	428f      	cmp	r7, r1
 8013b1c:	f026 0603 	bic.w	r6, r6, #3
 8013b20:	f002 0201 	and.w	r2, r2, #1
 8013b24:	d11b      	bne.n	8013b5e <_free_r+0x6a>
 8013b26:	4430      	add	r0, r6
 8013b28:	b93a      	cbnz	r2, 8013b3a <_free_r+0x46>
 8013b2a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8013b2e:	1a9b      	subs	r3, r3, r2
 8013b30:	4410      	add	r0, r2
 8013b32:	6899      	ldr	r1, [r3, #8]
 8013b34:	68da      	ldr	r2, [r3, #12]
 8013b36:	60ca      	str	r2, [r1, #12]
 8013b38:	6091      	str	r1, [r2, #8]
 8013b3a:	f040 0201 	orr.w	r2, r0, #1
 8013b3e:	605a      	str	r2, [r3, #4]
 8013b40:	60ab      	str	r3, [r5, #8]
 8013b42:	4b47      	ldr	r3, [pc, #284]	; (8013c60 <_free_r+0x16c>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4298      	cmp	r0, r3
 8013b48:	d304      	bcc.n	8013b54 <_free_r+0x60>
 8013b4a:	4b46      	ldr	r3, [pc, #280]	; (8013c64 <_free_r+0x170>)
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	6819      	ldr	r1, [r3, #0]
 8013b50:	f7ff ff7a 	bl	8013a48 <_malloc_trim_r>
 8013b54:	4620      	mov	r0, r4
 8013b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5a:	f7fc be59 	b.w	8010810 <__malloc_unlock>
 8013b5e:	607e      	str	r6, [r7, #4]
 8013b60:	2a00      	cmp	r2, #0
 8013b62:	d139      	bne.n	8013bd8 <_free_r+0xe4>
 8013b64:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8013b68:	1a5b      	subs	r3, r3, r1
 8013b6a:	4408      	add	r0, r1
 8013b6c:	6899      	ldr	r1, [r3, #8]
 8013b6e:	f105 0e08 	add.w	lr, r5, #8
 8013b72:	4571      	cmp	r1, lr
 8013b74:	d032      	beq.n	8013bdc <_free_r+0xe8>
 8013b76:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013b7a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8013b7e:	f8ce 1008 	str.w	r1, [lr, #8]
 8013b82:	19b9      	adds	r1, r7, r6
 8013b84:	6849      	ldr	r1, [r1, #4]
 8013b86:	07c9      	lsls	r1, r1, #31
 8013b88:	d40a      	bmi.n	8013ba0 <_free_r+0xac>
 8013b8a:	4430      	add	r0, r6
 8013b8c:	68b9      	ldr	r1, [r7, #8]
 8013b8e:	bb3a      	cbnz	r2, 8013be0 <_free_r+0xec>
 8013b90:	4e35      	ldr	r6, [pc, #212]	; (8013c68 <_free_r+0x174>)
 8013b92:	42b1      	cmp	r1, r6
 8013b94:	d124      	bne.n	8013be0 <_free_r+0xec>
 8013b96:	616b      	str	r3, [r5, #20]
 8013b98:	612b      	str	r3, [r5, #16]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	60d9      	str	r1, [r3, #12]
 8013b9e:	6099      	str	r1, [r3, #8]
 8013ba0:	f040 0101 	orr.w	r1, r0, #1
 8013ba4:	6059      	str	r1, [r3, #4]
 8013ba6:	5018      	str	r0, [r3, r0]
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	d1d3      	bne.n	8013b54 <_free_r+0x60>
 8013bac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8013bb0:	d21a      	bcs.n	8013be8 <_free_r+0xf4>
 8013bb2:	08c0      	lsrs	r0, r0, #3
 8013bb4:	1081      	asrs	r1, r0, #2
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	408a      	lsls	r2, r1
 8013bba:	6869      	ldr	r1, [r5, #4]
 8013bbc:	3001      	adds	r0, #1
 8013bbe:	430a      	orrs	r2, r1
 8013bc0:	606a      	str	r2, [r5, #4]
 8013bc2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8013bc6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8013bca:	6099      	str	r1, [r3, #8]
 8013bcc:	3a08      	subs	r2, #8
 8013bce:	60da      	str	r2, [r3, #12]
 8013bd0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8013bd4:	60cb      	str	r3, [r1, #12]
 8013bd6:	e7bd      	b.n	8013b54 <_free_r+0x60>
 8013bd8:	2200      	movs	r2, #0
 8013bda:	e7d2      	b.n	8013b82 <_free_r+0x8e>
 8013bdc:	2201      	movs	r2, #1
 8013bde:	e7d0      	b.n	8013b82 <_free_r+0x8e>
 8013be0:	68fe      	ldr	r6, [r7, #12]
 8013be2:	60ce      	str	r6, [r1, #12]
 8013be4:	60b1      	str	r1, [r6, #8]
 8013be6:	e7db      	b.n	8013ba0 <_free_r+0xac>
 8013be8:	0a42      	lsrs	r2, r0, #9
 8013bea:	2a04      	cmp	r2, #4
 8013bec:	d813      	bhi.n	8013c16 <_free_r+0x122>
 8013bee:	0982      	lsrs	r2, r0, #6
 8013bf0:	3238      	adds	r2, #56	; 0x38
 8013bf2:	1c51      	adds	r1, r2, #1
 8013bf4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8013bf8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8013bfc:	428e      	cmp	r6, r1
 8013bfe:	d124      	bne.n	8013c4a <_free_r+0x156>
 8013c00:	2001      	movs	r0, #1
 8013c02:	1092      	asrs	r2, r2, #2
 8013c04:	fa00 f202 	lsl.w	r2, r0, r2
 8013c08:	6868      	ldr	r0, [r5, #4]
 8013c0a:	4302      	orrs	r2, r0
 8013c0c:	606a      	str	r2, [r5, #4]
 8013c0e:	60de      	str	r6, [r3, #12]
 8013c10:	6099      	str	r1, [r3, #8]
 8013c12:	60b3      	str	r3, [r6, #8]
 8013c14:	e7de      	b.n	8013bd4 <_free_r+0xe0>
 8013c16:	2a14      	cmp	r2, #20
 8013c18:	d801      	bhi.n	8013c1e <_free_r+0x12a>
 8013c1a:	325b      	adds	r2, #91	; 0x5b
 8013c1c:	e7e9      	b.n	8013bf2 <_free_r+0xfe>
 8013c1e:	2a54      	cmp	r2, #84	; 0x54
 8013c20:	d802      	bhi.n	8013c28 <_free_r+0x134>
 8013c22:	0b02      	lsrs	r2, r0, #12
 8013c24:	326e      	adds	r2, #110	; 0x6e
 8013c26:	e7e4      	b.n	8013bf2 <_free_r+0xfe>
 8013c28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8013c2c:	d802      	bhi.n	8013c34 <_free_r+0x140>
 8013c2e:	0bc2      	lsrs	r2, r0, #15
 8013c30:	3277      	adds	r2, #119	; 0x77
 8013c32:	e7de      	b.n	8013bf2 <_free_r+0xfe>
 8013c34:	f240 5154 	movw	r1, #1364	; 0x554
 8013c38:	428a      	cmp	r2, r1
 8013c3a:	bf9a      	itte	ls
 8013c3c:	0c82      	lsrls	r2, r0, #18
 8013c3e:	327c      	addls	r2, #124	; 0x7c
 8013c40:	227e      	movhi	r2, #126	; 0x7e
 8013c42:	e7d6      	b.n	8013bf2 <_free_r+0xfe>
 8013c44:	6889      	ldr	r1, [r1, #8]
 8013c46:	428e      	cmp	r6, r1
 8013c48:	d004      	beq.n	8013c54 <_free_r+0x160>
 8013c4a:	684a      	ldr	r2, [r1, #4]
 8013c4c:	f022 0203 	bic.w	r2, r2, #3
 8013c50:	4290      	cmp	r0, r2
 8013c52:	d3f7      	bcc.n	8013c44 <_free_r+0x150>
 8013c54:	68ce      	ldr	r6, [r1, #12]
 8013c56:	e7da      	b.n	8013c0e <_free_r+0x11a>
 8013c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5c:	2000022c 	.word	0x2000022c
 8013c60:	20000638 	.word	0x20000638
 8013c64:	200151b8 	.word	0x200151b8
 8013c68:	20000234 	.word	0x20000234

08013c6c <_fwalk_reent>:
 8013c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c70:	4680      	mov	r8, r0
 8013c72:	4689      	mov	r9, r1
 8013c74:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8013c78:	2600      	movs	r6, #0
 8013c7a:	b914      	cbnz	r4, 8013c82 <_fwalk_reent+0x16>
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c82:	68a5      	ldr	r5, [r4, #8]
 8013c84:	6867      	ldr	r7, [r4, #4]
 8013c86:	3f01      	subs	r7, #1
 8013c88:	d501      	bpl.n	8013c8e <_fwalk_reent+0x22>
 8013c8a:	6824      	ldr	r4, [r4, #0]
 8013c8c:	e7f5      	b.n	8013c7a <_fwalk_reent+0xe>
 8013c8e:	89ab      	ldrh	r3, [r5, #12]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d907      	bls.n	8013ca4 <_fwalk_reent+0x38>
 8013c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	d003      	beq.n	8013ca4 <_fwalk_reent+0x38>
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	4640      	mov	r0, r8
 8013ca0:	47c8      	blx	r9
 8013ca2:	4306      	orrs	r6, r0
 8013ca4:	3568      	adds	r5, #104	; 0x68
 8013ca6:	e7ee      	b.n	8013c86 <_fwalk_reent+0x1a>

08013ca8 <_localeconv_r>:
 8013ca8:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <_localeconv_r+0x14>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6a18      	ldr	r0, [r3, #32]
 8013cae:	4b04      	ldr	r3, [pc, #16]	; (8013cc0 <_localeconv_r+0x18>)
 8013cb0:	2800      	cmp	r0, #0
 8013cb2:	bf08      	it	eq
 8013cb4:	4618      	moveq	r0, r3
 8013cb6:	30f0      	adds	r0, #240	; 0xf0
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop
 8013cbc:	20000138 	.word	0x20000138
 8013cc0:	2000063c 	.word	0x2000063c

08013cc4 <__retarget_lock_init_recursive>:
 8013cc4:	4770      	bx	lr

08013cc6 <__retarget_lock_close_recursive>:
 8013cc6:	4770      	bx	lr

08013cc8 <__retarget_lock_acquire_recursive>:
 8013cc8:	4770      	bx	lr

08013cca <__retarget_lock_release_recursive>:
 8013cca:	4770      	bx	lr

08013ccc <__swhatbuf_r>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	460e      	mov	r6, r1
 8013cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cd4:	2900      	cmp	r1, #0
 8013cd6:	b090      	sub	sp, #64	; 0x40
 8013cd8:	4614      	mov	r4, r2
 8013cda:	461d      	mov	r5, r3
 8013cdc:	da09      	bge.n	8013cf2 <__swhatbuf_r+0x26>
 8013cde:	89b3      	ldrh	r3, [r6, #12]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013ce6:	602a      	str	r2, [r5, #0]
 8013ce8:	d116      	bne.n	8013d18 <__swhatbuf_r+0x4c>
 8013cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	e015      	b.n	8013d1e <__swhatbuf_r+0x52>
 8013cf2:	aa01      	add	r2, sp, #4
 8013cf4:	f000 fd3e 	bl	8014774 <_fstat_r>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	dbf0      	blt.n	8013cde <__swhatbuf_r+0x12>
 8013cfc:	9a02      	ldr	r2, [sp, #8]
 8013cfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d06:	425a      	negs	r2, r3
 8013d08:	415a      	adcs	r2, r3
 8013d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d0e:	602a      	str	r2, [r5, #0]
 8013d10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013d14:	6023      	str	r3, [r4, #0]
 8013d16:	e002      	b.n	8013d1e <__swhatbuf_r+0x52>
 8013d18:	2340      	movs	r3, #64	; 0x40
 8013d1a:	6023      	str	r3, [r4, #0]
 8013d1c:	4610      	mov	r0, r2
 8013d1e:	b010      	add	sp, #64	; 0x40
 8013d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d24 <__smakebuf_r>:
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d28:	079d      	lsls	r5, r3, #30
 8013d2a:	4606      	mov	r6, r0
 8013d2c:	460c      	mov	r4, r1
 8013d2e:	d507      	bpl.n	8013d40 <__smakebuf_r+0x1c>
 8013d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d34:	6023      	str	r3, [r4, #0]
 8013d36:	6123      	str	r3, [r4, #16]
 8013d38:	2301      	movs	r3, #1
 8013d3a:	6163      	str	r3, [r4, #20]
 8013d3c:	b002      	add	sp, #8
 8013d3e:	bd70      	pop	{r4, r5, r6, pc}
 8013d40:	ab01      	add	r3, sp, #4
 8013d42:	466a      	mov	r2, sp
 8013d44:	f7ff ffc2 	bl	8013ccc <__swhatbuf_r>
 8013d48:	9900      	ldr	r1, [sp, #0]
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	f7fc fb37 	bl	80103c0 <_malloc_r>
 8013d52:	b948      	cbnz	r0, 8013d68 <__smakebuf_r+0x44>
 8013d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d58:	059a      	lsls	r2, r3, #22
 8013d5a:	d4ef      	bmi.n	8013d3c <__smakebuf_r+0x18>
 8013d5c:	f023 0303 	bic.w	r3, r3, #3
 8013d60:	f043 0302 	orr.w	r3, r3, #2
 8013d64:	81a3      	strh	r3, [r4, #12]
 8013d66:	e7e3      	b.n	8013d30 <__smakebuf_r+0xc>
 8013d68:	4b0d      	ldr	r3, [pc, #52]	; (8013da0 <__smakebuf_r+0x7c>)
 8013d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	6020      	str	r0, [r4, #0]
 8013d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d74:	81a3      	strh	r3, [r4, #12]
 8013d76:	9b00      	ldr	r3, [sp, #0]
 8013d78:	6163      	str	r3, [r4, #20]
 8013d7a:	9b01      	ldr	r3, [sp, #4]
 8013d7c:	6120      	str	r0, [r4, #16]
 8013d7e:	b15b      	cbz	r3, 8013d98 <__smakebuf_r+0x74>
 8013d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d84:	4630      	mov	r0, r6
 8013d86:	f000 fe55 	bl	8014a34 <_isatty_r>
 8013d8a:	b128      	cbz	r0, 8013d98 <__smakebuf_r+0x74>
 8013d8c:	89a3      	ldrh	r3, [r4, #12]
 8013d8e:	f023 0303 	bic.w	r3, r3, #3
 8013d92:	f043 0301 	orr.w	r3, r3, #1
 8013d96:	81a3      	strh	r3, [r4, #12]
 8013d98:	89a3      	ldrh	r3, [r4, #12]
 8013d9a:	431d      	orrs	r5, r3
 8013d9c:	81a5      	strh	r5, [r4, #12]
 8013d9e:	e7cd      	b.n	8013d3c <__smakebuf_r+0x18>
 8013da0:	08013899 	.word	0x08013899

08013da4 <_Balloc>:
 8013da4:	b570      	push	{r4, r5, r6, lr}
 8013da6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013da8:	4604      	mov	r4, r0
 8013daa:	460e      	mov	r6, r1
 8013dac:	b93d      	cbnz	r5, 8013dbe <_Balloc+0x1a>
 8013dae:	2010      	movs	r0, #16
 8013db0:	f7fc faf6 	bl	80103a0 <malloc>
 8013db4:	6260      	str	r0, [r4, #36]	; 0x24
 8013db6:	6045      	str	r5, [r0, #4]
 8013db8:	6085      	str	r5, [r0, #8]
 8013dba:	6005      	str	r5, [r0, #0]
 8013dbc:	60c5      	str	r5, [r0, #12]
 8013dbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013dc0:	68eb      	ldr	r3, [r5, #12]
 8013dc2:	b183      	cbz	r3, 8013de6 <_Balloc+0x42>
 8013dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dc6:	68db      	ldr	r3, [r3, #12]
 8013dc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013dcc:	b9b8      	cbnz	r0, 8013dfe <_Balloc+0x5a>
 8013dce:	2101      	movs	r1, #1
 8013dd0:	fa01 f506 	lsl.w	r5, r1, r6
 8013dd4:	1d6a      	adds	r2, r5, #5
 8013dd6:	0092      	lsls	r2, r2, #2
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f000 fbb7 	bl	801454c <_calloc_r>
 8013dde:	b160      	cbz	r0, 8013dfa <_Balloc+0x56>
 8013de0:	6046      	str	r6, [r0, #4]
 8013de2:	6085      	str	r5, [r0, #8]
 8013de4:	e00e      	b.n	8013e04 <_Balloc+0x60>
 8013de6:	2221      	movs	r2, #33	; 0x21
 8013de8:	2104      	movs	r1, #4
 8013dea:	4620      	mov	r0, r4
 8013dec:	f000 fbae 	bl	801454c <_calloc_r>
 8013df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013df2:	60e8      	str	r0, [r5, #12]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d1e4      	bne.n	8013dc4 <_Balloc+0x20>
 8013dfa:	2000      	movs	r0, #0
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	6802      	ldr	r2, [r0, #0]
 8013e00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013e04:	2300      	movs	r3, #0
 8013e06:	6103      	str	r3, [r0, #16]
 8013e08:	60c3      	str	r3, [r0, #12]
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}

08013e0c <_Bfree>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013e10:	4606      	mov	r6, r0
 8013e12:	460d      	mov	r5, r1
 8013e14:	b93c      	cbnz	r4, 8013e26 <_Bfree+0x1a>
 8013e16:	2010      	movs	r0, #16
 8013e18:	f7fc fac2 	bl	80103a0 <malloc>
 8013e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8013e1e:	6044      	str	r4, [r0, #4]
 8013e20:	6084      	str	r4, [r0, #8]
 8013e22:	6004      	str	r4, [r0, #0]
 8013e24:	60c4      	str	r4, [r0, #12]
 8013e26:	b13d      	cbz	r5, 8013e38 <_Bfree+0x2c>
 8013e28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013e2a:	686a      	ldr	r2, [r5, #4]
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e32:	6029      	str	r1, [r5, #0]
 8013e34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013e38:	bd70      	pop	{r4, r5, r6, pc}

08013e3a <__multadd>:
 8013e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3e:	690d      	ldr	r5, [r1, #16]
 8013e40:	461f      	mov	r7, r3
 8013e42:	4606      	mov	r6, r0
 8013e44:	460c      	mov	r4, r1
 8013e46:	f101 0e14 	add.w	lr, r1, #20
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f8de 0000 	ldr.w	r0, [lr]
 8013e50:	b281      	uxth	r1, r0
 8013e52:	fb02 7101 	mla	r1, r2, r1, r7
 8013e56:	0c0f      	lsrs	r7, r1, #16
 8013e58:	0c00      	lsrs	r0, r0, #16
 8013e5a:	fb02 7000 	mla	r0, r2, r0, r7
 8013e5e:	b289      	uxth	r1, r1
 8013e60:	3301      	adds	r3, #1
 8013e62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013e66:	429d      	cmp	r5, r3
 8013e68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8013e70:	dcec      	bgt.n	8013e4c <__multadd+0x12>
 8013e72:	b1d7      	cbz	r7, 8013eaa <__multadd+0x70>
 8013e74:	68a3      	ldr	r3, [r4, #8]
 8013e76:	429d      	cmp	r5, r3
 8013e78:	db12      	blt.n	8013ea0 <__multadd+0x66>
 8013e7a:	6861      	ldr	r1, [r4, #4]
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	3101      	adds	r1, #1
 8013e80:	f7ff ff90 	bl	8013da4 <_Balloc>
 8013e84:	6922      	ldr	r2, [r4, #16]
 8013e86:	3202      	adds	r2, #2
 8013e88:	f104 010c 	add.w	r1, r4, #12
 8013e8c:	4680      	mov	r8, r0
 8013e8e:	0092      	lsls	r2, r2, #2
 8013e90:	300c      	adds	r0, #12
 8013e92:	f7fc fca3 	bl	80107dc <memcpy>
 8013e96:	4621      	mov	r1, r4
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f7ff ffb7 	bl	8013e0c <_Bfree>
 8013e9e:	4644      	mov	r4, r8
 8013ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ea4:	3501      	adds	r5, #1
 8013ea6:	615f      	str	r7, [r3, #20]
 8013ea8:	6125      	str	r5, [r4, #16]
 8013eaa:	4620      	mov	r0, r4
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013eb0 <__hi0bits>:
 8013eb0:	0c02      	lsrs	r2, r0, #16
 8013eb2:	0412      	lsls	r2, r2, #16
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	b9b2      	cbnz	r2, 8013ee6 <__hi0bits+0x36>
 8013eb8:	0403      	lsls	r3, r0, #16
 8013eba:	2010      	movs	r0, #16
 8013ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013ec0:	bf04      	itt	eq
 8013ec2:	021b      	lsleq	r3, r3, #8
 8013ec4:	3008      	addeq	r0, #8
 8013ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013eca:	bf04      	itt	eq
 8013ecc:	011b      	lsleq	r3, r3, #4
 8013ece:	3004      	addeq	r0, #4
 8013ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013ed4:	bf04      	itt	eq
 8013ed6:	009b      	lsleq	r3, r3, #2
 8013ed8:	3002      	addeq	r0, #2
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	db06      	blt.n	8013eec <__hi0bits+0x3c>
 8013ede:	005b      	lsls	r3, r3, #1
 8013ee0:	d503      	bpl.n	8013eea <__hi0bits+0x3a>
 8013ee2:	3001      	adds	r0, #1
 8013ee4:	4770      	bx	lr
 8013ee6:	2000      	movs	r0, #0
 8013ee8:	e7e8      	b.n	8013ebc <__hi0bits+0xc>
 8013eea:	2020      	movs	r0, #32
 8013eec:	4770      	bx	lr

08013eee <__lo0bits>:
 8013eee:	6803      	ldr	r3, [r0, #0]
 8013ef0:	f013 0207 	ands.w	r2, r3, #7
 8013ef4:	4601      	mov	r1, r0
 8013ef6:	d00b      	beq.n	8013f10 <__lo0bits+0x22>
 8013ef8:	07da      	lsls	r2, r3, #31
 8013efa:	d423      	bmi.n	8013f44 <__lo0bits+0x56>
 8013efc:	0798      	lsls	r0, r3, #30
 8013efe:	bf49      	itett	mi
 8013f00:	085b      	lsrmi	r3, r3, #1
 8013f02:	089b      	lsrpl	r3, r3, #2
 8013f04:	2001      	movmi	r0, #1
 8013f06:	600b      	strmi	r3, [r1, #0]
 8013f08:	bf5c      	itt	pl
 8013f0a:	600b      	strpl	r3, [r1, #0]
 8013f0c:	2002      	movpl	r0, #2
 8013f0e:	4770      	bx	lr
 8013f10:	b298      	uxth	r0, r3
 8013f12:	b9a8      	cbnz	r0, 8013f40 <__lo0bits+0x52>
 8013f14:	0c1b      	lsrs	r3, r3, #16
 8013f16:	2010      	movs	r0, #16
 8013f18:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f1c:	bf04      	itt	eq
 8013f1e:	0a1b      	lsreq	r3, r3, #8
 8013f20:	3008      	addeq	r0, #8
 8013f22:	071a      	lsls	r2, r3, #28
 8013f24:	bf04      	itt	eq
 8013f26:	091b      	lsreq	r3, r3, #4
 8013f28:	3004      	addeq	r0, #4
 8013f2a:	079a      	lsls	r2, r3, #30
 8013f2c:	bf04      	itt	eq
 8013f2e:	089b      	lsreq	r3, r3, #2
 8013f30:	3002      	addeq	r0, #2
 8013f32:	07da      	lsls	r2, r3, #31
 8013f34:	d402      	bmi.n	8013f3c <__lo0bits+0x4e>
 8013f36:	085b      	lsrs	r3, r3, #1
 8013f38:	d006      	beq.n	8013f48 <__lo0bits+0x5a>
 8013f3a:	3001      	adds	r0, #1
 8013f3c:	600b      	str	r3, [r1, #0]
 8013f3e:	4770      	bx	lr
 8013f40:	4610      	mov	r0, r2
 8013f42:	e7e9      	b.n	8013f18 <__lo0bits+0x2a>
 8013f44:	2000      	movs	r0, #0
 8013f46:	4770      	bx	lr
 8013f48:	2020      	movs	r0, #32
 8013f4a:	4770      	bx	lr

08013f4c <__i2b>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	460c      	mov	r4, r1
 8013f50:	2101      	movs	r1, #1
 8013f52:	f7ff ff27 	bl	8013da4 <_Balloc>
 8013f56:	2201      	movs	r2, #1
 8013f58:	6144      	str	r4, [r0, #20]
 8013f5a:	6102      	str	r2, [r0, #16]
 8013f5c:	bd10      	pop	{r4, pc}

08013f5e <__multiply>:
 8013f5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f62:	4614      	mov	r4, r2
 8013f64:	690a      	ldr	r2, [r1, #16]
 8013f66:	6923      	ldr	r3, [r4, #16]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	bfb8      	it	lt
 8013f6c:	460b      	movlt	r3, r1
 8013f6e:	4689      	mov	r9, r1
 8013f70:	bfbc      	itt	lt
 8013f72:	46a1      	movlt	r9, r4
 8013f74:	461c      	movlt	r4, r3
 8013f76:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013f7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013f7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f86:	eb07 060a 	add.w	r6, r7, sl
 8013f8a:	429e      	cmp	r6, r3
 8013f8c:	bfc8      	it	gt
 8013f8e:	3101      	addgt	r1, #1
 8013f90:	f7ff ff08 	bl	8013da4 <_Balloc>
 8013f94:	f100 0514 	add.w	r5, r0, #20
 8013f98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013f9c:	462b      	mov	r3, r5
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	4543      	cmp	r3, r8
 8013fa2:	d316      	bcc.n	8013fd2 <__multiply+0x74>
 8013fa4:	f104 0214 	add.w	r2, r4, #20
 8013fa8:	f109 0114 	add.w	r1, r9, #20
 8013fac:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8013fb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	9c01      	ldr	r4, [sp, #4]
 8013fb8:	4294      	cmp	r4, r2
 8013fba:	4613      	mov	r3, r2
 8013fbc:	d80c      	bhi.n	8013fd8 <__multiply+0x7a>
 8013fbe:	2e00      	cmp	r6, #0
 8013fc0:	dd03      	ble.n	8013fca <__multiply+0x6c>
 8013fc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d054      	beq.n	8014074 <__multiply+0x116>
 8013fca:	6106      	str	r6, [r0, #16]
 8013fcc:	b003      	add	sp, #12
 8013fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd2:	f843 2b04 	str.w	r2, [r3], #4
 8013fd6:	e7e3      	b.n	8013fa0 <__multiply+0x42>
 8013fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8013fdc:	3204      	adds	r2, #4
 8013fde:	f1ba 0f00 	cmp.w	sl, #0
 8013fe2:	d020      	beq.n	8014026 <__multiply+0xc8>
 8013fe4:	46ae      	mov	lr, r5
 8013fe6:	4689      	mov	r9, r1
 8013fe8:	f04f 0c00 	mov.w	ip, #0
 8013fec:	f859 4b04 	ldr.w	r4, [r9], #4
 8013ff0:	f8be b000 	ldrh.w	fp, [lr]
 8013ff4:	b2a3      	uxth	r3, r4
 8013ff6:	fb0a b303 	mla	r3, sl, r3, fp
 8013ffa:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8013ffe:	f8de 4000 	ldr.w	r4, [lr]
 8014002:	4463      	add	r3, ip
 8014004:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8014008:	fb0a c40b 	mla	r4, sl, fp, ip
 801400c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014010:	b29b      	uxth	r3, r3
 8014012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014016:	454f      	cmp	r7, r9
 8014018:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801401c:	f84e 3b04 	str.w	r3, [lr], #4
 8014020:	d8e4      	bhi.n	8013fec <__multiply+0x8e>
 8014022:	f8ce c000 	str.w	ip, [lr]
 8014026:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801402a:	f1b9 0f00 	cmp.w	r9, #0
 801402e:	d01f      	beq.n	8014070 <__multiply+0x112>
 8014030:	682b      	ldr	r3, [r5, #0]
 8014032:	46ae      	mov	lr, r5
 8014034:	468c      	mov	ip, r1
 8014036:	f04f 0a00 	mov.w	sl, #0
 801403a:	f8bc 4000 	ldrh.w	r4, [ip]
 801403e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014042:	fb09 b404 	mla	r4, r9, r4, fp
 8014046:	44a2      	add	sl, r4
 8014048:	b29b      	uxth	r3, r3
 801404a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801404e:	f84e 3b04 	str.w	r3, [lr], #4
 8014052:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014056:	f8be 4000 	ldrh.w	r4, [lr]
 801405a:	0c1b      	lsrs	r3, r3, #16
 801405c:	fb09 4303 	mla	r3, r9, r3, r4
 8014060:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8014064:	4567      	cmp	r7, ip
 8014066:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801406a:	d8e6      	bhi.n	801403a <__multiply+0xdc>
 801406c:	f8ce 3000 	str.w	r3, [lr]
 8014070:	3504      	adds	r5, #4
 8014072:	e7a0      	b.n	8013fb6 <__multiply+0x58>
 8014074:	3e01      	subs	r6, #1
 8014076:	e7a2      	b.n	8013fbe <__multiply+0x60>

08014078 <__pow5mult>:
 8014078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801407c:	4615      	mov	r5, r2
 801407e:	f012 0203 	ands.w	r2, r2, #3
 8014082:	4606      	mov	r6, r0
 8014084:	460f      	mov	r7, r1
 8014086:	d007      	beq.n	8014098 <__pow5mult+0x20>
 8014088:	3a01      	subs	r2, #1
 801408a:	4c21      	ldr	r4, [pc, #132]	; (8014110 <__pow5mult+0x98>)
 801408c:	2300      	movs	r3, #0
 801408e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014092:	f7ff fed2 	bl	8013e3a <__multadd>
 8014096:	4607      	mov	r7, r0
 8014098:	10ad      	asrs	r5, r5, #2
 801409a:	d035      	beq.n	8014108 <__pow5mult+0x90>
 801409c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801409e:	b93c      	cbnz	r4, 80140b0 <__pow5mult+0x38>
 80140a0:	2010      	movs	r0, #16
 80140a2:	f7fc f97d 	bl	80103a0 <malloc>
 80140a6:	6270      	str	r0, [r6, #36]	; 0x24
 80140a8:	6044      	str	r4, [r0, #4]
 80140aa:	6084      	str	r4, [r0, #8]
 80140ac:	6004      	str	r4, [r0, #0]
 80140ae:	60c4      	str	r4, [r0, #12]
 80140b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80140b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140b8:	b94c      	cbnz	r4, 80140ce <__pow5mult+0x56>
 80140ba:	f240 2171 	movw	r1, #625	; 0x271
 80140be:	4630      	mov	r0, r6
 80140c0:	f7ff ff44 	bl	8013f4c <__i2b>
 80140c4:	2300      	movs	r3, #0
 80140c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80140ca:	4604      	mov	r4, r0
 80140cc:	6003      	str	r3, [r0, #0]
 80140ce:	f04f 0800 	mov.w	r8, #0
 80140d2:	07eb      	lsls	r3, r5, #31
 80140d4:	d50a      	bpl.n	80140ec <__pow5mult+0x74>
 80140d6:	4639      	mov	r1, r7
 80140d8:	4622      	mov	r2, r4
 80140da:	4630      	mov	r0, r6
 80140dc:	f7ff ff3f 	bl	8013f5e <__multiply>
 80140e0:	4639      	mov	r1, r7
 80140e2:	4681      	mov	r9, r0
 80140e4:	4630      	mov	r0, r6
 80140e6:	f7ff fe91 	bl	8013e0c <_Bfree>
 80140ea:	464f      	mov	r7, r9
 80140ec:	106d      	asrs	r5, r5, #1
 80140ee:	d00b      	beq.n	8014108 <__pow5mult+0x90>
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	b938      	cbnz	r0, 8014104 <__pow5mult+0x8c>
 80140f4:	4622      	mov	r2, r4
 80140f6:	4621      	mov	r1, r4
 80140f8:	4630      	mov	r0, r6
 80140fa:	f7ff ff30 	bl	8013f5e <__multiply>
 80140fe:	6020      	str	r0, [r4, #0]
 8014100:	f8c0 8000 	str.w	r8, [r0]
 8014104:	4604      	mov	r4, r0
 8014106:	e7e4      	b.n	80140d2 <__pow5mult+0x5a>
 8014108:	4638      	mov	r0, r7
 801410a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801410e:	bf00      	nop
 8014110:	080fb0d8 	.word	0x080fb0d8

08014114 <__lshift>:
 8014114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014118:	460c      	mov	r4, r1
 801411a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801411e:	6923      	ldr	r3, [r4, #16]
 8014120:	6849      	ldr	r1, [r1, #4]
 8014122:	eb0a 0903 	add.w	r9, sl, r3
 8014126:	68a3      	ldr	r3, [r4, #8]
 8014128:	4607      	mov	r7, r0
 801412a:	4616      	mov	r6, r2
 801412c:	f109 0501 	add.w	r5, r9, #1
 8014130:	42ab      	cmp	r3, r5
 8014132:	db31      	blt.n	8014198 <__lshift+0x84>
 8014134:	4638      	mov	r0, r7
 8014136:	f7ff fe35 	bl	8013da4 <_Balloc>
 801413a:	2200      	movs	r2, #0
 801413c:	4680      	mov	r8, r0
 801413e:	f100 0314 	add.w	r3, r0, #20
 8014142:	4611      	mov	r1, r2
 8014144:	4552      	cmp	r2, sl
 8014146:	db2a      	blt.n	801419e <__lshift+0x8a>
 8014148:	6920      	ldr	r0, [r4, #16]
 801414a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801414e:	f104 0114 	add.w	r1, r4, #20
 8014152:	f016 021f 	ands.w	r2, r6, #31
 8014156:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801415a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801415e:	d022      	beq.n	80141a6 <__lshift+0x92>
 8014160:	f1c2 0c20 	rsb	ip, r2, #32
 8014164:	2000      	movs	r0, #0
 8014166:	680e      	ldr	r6, [r1, #0]
 8014168:	4096      	lsls	r6, r2
 801416a:	4330      	orrs	r0, r6
 801416c:	f843 0b04 	str.w	r0, [r3], #4
 8014170:	f851 0b04 	ldr.w	r0, [r1], #4
 8014174:	458e      	cmp	lr, r1
 8014176:	fa20 f00c 	lsr.w	r0, r0, ip
 801417a:	d8f4      	bhi.n	8014166 <__lshift+0x52>
 801417c:	6018      	str	r0, [r3, #0]
 801417e:	b108      	cbz	r0, 8014184 <__lshift+0x70>
 8014180:	f109 0502 	add.w	r5, r9, #2
 8014184:	3d01      	subs	r5, #1
 8014186:	4638      	mov	r0, r7
 8014188:	f8c8 5010 	str.w	r5, [r8, #16]
 801418c:	4621      	mov	r1, r4
 801418e:	f7ff fe3d 	bl	8013e0c <_Bfree>
 8014192:	4640      	mov	r0, r8
 8014194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014198:	3101      	adds	r1, #1
 801419a:	005b      	lsls	r3, r3, #1
 801419c:	e7c8      	b.n	8014130 <__lshift+0x1c>
 801419e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80141a2:	3201      	adds	r2, #1
 80141a4:	e7ce      	b.n	8014144 <__lshift+0x30>
 80141a6:	3b04      	subs	r3, #4
 80141a8:	f851 2b04 	ldr.w	r2, [r1], #4
 80141ac:	f843 2f04 	str.w	r2, [r3, #4]!
 80141b0:	458e      	cmp	lr, r1
 80141b2:	d8f9      	bhi.n	80141a8 <__lshift+0x94>
 80141b4:	e7e6      	b.n	8014184 <__lshift+0x70>

080141b6 <__mcmp>:
 80141b6:	6903      	ldr	r3, [r0, #16]
 80141b8:	690a      	ldr	r2, [r1, #16]
 80141ba:	1a9b      	subs	r3, r3, r2
 80141bc:	b530      	push	{r4, r5, lr}
 80141be:	d10c      	bne.n	80141da <__mcmp+0x24>
 80141c0:	0092      	lsls	r2, r2, #2
 80141c2:	3014      	adds	r0, #20
 80141c4:	3114      	adds	r1, #20
 80141c6:	1884      	adds	r4, r0, r2
 80141c8:	4411      	add	r1, r2
 80141ca:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80141ce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80141d2:	4295      	cmp	r5, r2
 80141d4:	d003      	beq.n	80141de <__mcmp+0x28>
 80141d6:	d305      	bcc.n	80141e4 <__mcmp+0x2e>
 80141d8:	2301      	movs	r3, #1
 80141da:	4618      	mov	r0, r3
 80141dc:	bd30      	pop	{r4, r5, pc}
 80141de:	42a0      	cmp	r0, r4
 80141e0:	d3f3      	bcc.n	80141ca <__mcmp+0x14>
 80141e2:	e7fa      	b.n	80141da <__mcmp+0x24>
 80141e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141e8:	e7f7      	b.n	80141da <__mcmp+0x24>

080141ea <__mdiff>:
 80141ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ee:	460d      	mov	r5, r1
 80141f0:	4607      	mov	r7, r0
 80141f2:	4611      	mov	r1, r2
 80141f4:	4628      	mov	r0, r5
 80141f6:	4614      	mov	r4, r2
 80141f8:	f7ff ffdd 	bl	80141b6 <__mcmp>
 80141fc:	1e06      	subs	r6, r0, #0
 80141fe:	d108      	bne.n	8014212 <__mdiff+0x28>
 8014200:	4631      	mov	r1, r6
 8014202:	4638      	mov	r0, r7
 8014204:	f7ff fdce 	bl	8013da4 <_Balloc>
 8014208:	2301      	movs	r3, #1
 801420a:	6103      	str	r3, [r0, #16]
 801420c:	6146      	str	r6, [r0, #20]
 801420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014212:	bfa4      	itt	ge
 8014214:	4623      	movge	r3, r4
 8014216:	462c      	movge	r4, r5
 8014218:	4638      	mov	r0, r7
 801421a:	6861      	ldr	r1, [r4, #4]
 801421c:	bfa6      	itte	ge
 801421e:	461d      	movge	r5, r3
 8014220:	2600      	movge	r6, #0
 8014222:	2601      	movlt	r6, #1
 8014224:	f7ff fdbe 	bl	8013da4 <_Balloc>
 8014228:	692b      	ldr	r3, [r5, #16]
 801422a:	60c6      	str	r6, [r0, #12]
 801422c:	6926      	ldr	r6, [r4, #16]
 801422e:	f105 0914 	add.w	r9, r5, #20
 8014232:	f104 0214 	add.w	r2, r4, #20
 8014236:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801423a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801423e:	f100 0514 	add.w	r5, r0, #20
 8014242:	f04f 0c00 	mov.w	ip, #0
 8014246:	f852 ab04 	ldr.w	sl, [r2], #4
 801424a:	f859 4b04 	ldr.w	r4, [r9], #4
 801424e:	fa1c f18a 	uxtah	r1, ip, sl
 8014252:	b2a3      	uxth	r3, r4
 8014254:	1ac9      	subs	r1, r1, r3
 8014256:	0c23      	lsrs	r3, r4, #16
 8014258:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801425c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014260:	b289      	uxth	r1, r1
 8014262:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014266:	45c8      	cmp	r8, r9
 8014268:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801426c:	4696      	mov	lr, r2
 801426e:	f845 3b04 	str.w	r3, [r5], #4
 8014272:	d8e8      	bhi.n	8014246 <__mdiff+0x5c>
 8014274:	45be      	cmp	lr, r7
 8014276:	d305      	bcc.n	8014284 <__mdiff+0x9a>
 8014278:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801427c:	b18b      	cbz	r3, 80142a2 <__mdiff+0xb8>
 801427e:	6106      	str	r6, [r0, #16]
 8014280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014284:	f85e 1b04 	ldr.w	r1, [lr], #4
 8014288:	fa1c f381 	uxtah	r3, ip, r1
 801428c:	141a      	asrs	r2, r3, #16
 801428e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014292:	b29b      	uxth	r3, r3
 8014294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801429c:	f845 3b04 	str.w	r3, [r5], #4
 80142a0:	e7e8      	b.n	8014274 <__mdiff+0x8a>
 80142a2:	3e01      	subs	r6, #1
 80142a4:	e7e8      	b.n	8014278 <__mdiff+0x8e>

080142a6 <__d2b>:
 80142a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142aa:	460e      	mov	r6, r1
 80142ac:	2101      	movs	r1, #1
 80142ae:	ec59 8b10 	vmov	r8, r9, d0
 80142b2:	4615      	mov	r5, r2
 80142b4:	f7ff fd76 	bl	8013da4 <_Balloc>
 80142b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80142bc:	4607      	mov	r7, r0
 80142be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142c2:	bb34      	cbnz	r4, 8014312 <__d2b+0x6c>
 80142c4:	9301      	str	r3, [sp, #4]
 80142c6:	f1b8 0f00 	cmp.w	r8, #0
 80142ca:	d027      	beq.n	801431c <__d2b+0x76>
 80142cc:	a802      	add	r0, sp, #8
 80142ce:	f840 8d08 	str.w	r8, [r0, #-8]!
 80142d2:	f7ff fe0c 	bl	8013eee <__lo0bits>
 80142d6:	9900      	ldr	r1, [sp, #0]
 80142d8:	b1f0      	cbz	r0, 8014318 <__d2b+0x72>
 80142da:	9a01      	ldr	r2, [sp, #4]
 80142dc:	f1c0 0320 	rsb	r3, r0, #32
 80142e0:	fa02 f303 	lsl.w	r3, r2, r3
 80142e4:	430b      	orrs	r3, r1
 80142e6:	40c2      	lsrs	r2, r0
 80142e8:	617b      	str	r3, [r7, #20]
 80142ea:	9201      	str	r2, [sp, #4]
 80142ec:	9b01      	ldr	r3, [sp, #4]
 80142ee:	61bb      	str	r3, [r7, #24]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	bf14      	ite	ne
 80142f4:	2102      	movne	r1, #2
 80142f6:	2101      	moveq	r1, #1
 80142f8:	6139      	str	r1, [r7, #16]
 80142fa:	b1c4      	cbz	r4, 801432e <__d2b+0x88>
 80142fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014300:	4404      	add	r4, r0
 8014302:	6034      	str	r4, [r6, #0]
 8014304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014308:	6028      	str	r0, [r5, #0]
 801430a:	4638      	mov	r0, r7
 801430c:	b003      	add	sp, #12
 801430e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014316:	e7d5      	b.n	80142c4 <__d2b+0x1e>
 8014318:	6179      	str	r1, [r7, #20]
 801431a:	e7e7      	b.n	80142ec <__d2b+0x46>
 801431c:	a801      	add	r0, sp, #4
 801431e:	f7ff fde6 	bl	8013eee <__lo0bits>
 8014322:	9b01      	ldr	r3, [sp, #4]
 8014324:	617b      	str	r3, [r7, #20]
 8014326:	2101      	movs	r1, #1
 8014328:	6139      	str	r1, [r7, #16]
 801432a:	3020      	adds	r0, #32
 801432c:	e7e5      	b.n	80142fa <__d2b+0x54>
 801432e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014336:	6030      	str	r0, [r6, #0]
 8014338:	6918      	ldr	r0, [r3, #16]
 801433a:	f7ff fdb9 	bl	8013eb0 <__hi0bits>
 801433e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014342:	e7e1      	b.n	8014308 <__d2b+0x62>

08014344 <__sread>:
 8014344:	b510      	push	{r4, lr}
 8014346:	460c      	mov	r4, r1
 8014348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801434c:	f000 fbce 	bl	8014aec <_read_r>
 8014350:	2800      	cmp	r0, #0
 8014352:	bfab      	itete	ge
 8014354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014356:	89a3      	ldrhlt	r3, [r4, #12]
 8014358:	181b      	addge	r3, r3, r0
 801435a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801435e:	bfac      	ite	ge
 8014360:	6563      	strge	r3, [r4, #84]	; 0x54
 8014362:	81a3      	strhlt	r3, [r4, #12]
 8014364:	bd10      	pop	{r4, pc}

08014366 <__swrite>:
 8014366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436a:	461f      	mov	r7, r3
 801436c:	898b      	ldrh	r3, [r1, #12]
 801436e:	05db      	lsls	r3, r3, #23
 8014370:	4605      	mov	r5, r0
 8014372:	460c      	mov	r4, r1
 8014374:	4616      	mov	r6, r2
 8014376:	d505      	bpl.n	8014384 <__swrite+0x1e>
 8014378:	2302      	movs	r3, #2
 801437a:	2200      	movs	r2, #0
 801437c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014380:	f000 fb76 	bl	8014a70 <_lseek_r>
 8014384:	89a3      	ldrh	r3, [r4, #12]
 8014386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801438a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801438e:	81a3      	strh	r3, [r4, #12]
 8014390:	4632      	mov	r2, r6
 8014392:	463b      	mov	r3, r7
 8014394:	4628      	mov	r0, r5
 8014396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801439a:	f000 b8c5 	b.w	8014528 <_write_r>

0801439e <__sseek>:
 801439e:	b510      	push	{r4, lr}
 80143a0:	460c      	mov	r4, r1
 80143a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a6:	f000 fb63 	bl	8014a70 <_lseek_r>
 80143aa:	1c43      	adds	r3, r0, #1
 80143ac:	89a3      	ldrh	r3, [r4, #12]
 80143ae:	bf15      	itete	ne
 80143b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80143b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143ba:	81a3      	strheq	r3, [r4, #12]
 80143bc:	bf18      	it	ne
 80143be:	81a3      	strhne	r3, [r4, #12]
 80143c0:	bd10      	pop	{r4, pc}

080143c2 <__sclose>:
 80143c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143c6:	f000 b8ef 	b.w	80145a8 <_close_r>

080143ca <__ssprint_r>:
 80143ca:	6893      	ldr	r3, [r2, #8]
 80143cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	4681      	mov	r9, r0
 80143d2:	460c      	mov	r4, r1
 80143d4:	4617      	mov	r7, r2
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d060      	beq.n	801449c <__ssprint_r+0xd2>
 80143da:	f04f 0b00 	mov.w	fp, #0
 80143de:	f8d2 a000 	ldr.w	sl, [r2]
 80143e2:	465e      	mov	r6, fp
 80143e4:	b356      	cbz	r6, 801443c <__ssprint_r+0x72>
 80143e6:	68a3      	ldr	r3, [r4, #8]
 80143e8:	429e      	cmp	r6, r3
 80143ea:	d344      	bcc.n	8014476 <__ssprint_r+0xac>
 80143ec:	89a2      	ldrh	r2, [r4, #12]
 80143ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143f2:	d03e      	beq.n	8014472 <__ssprint_r+0xa8>
 80143f4:	6825      	ldr	r5, [r4, #0]
 80143f6:	6921      	ldr	r1, [r4, #16]
 80143f8:	eba5 0801 	sub.w	r8, r5, r1
 80143fc:	6965      	ldr	r5, [r4, #20]
 80143fe:	2302      	movs	r3, #2
 8014400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014404:	fb95 f5f3 	sdiv	r5, r5, r3
 8014408:	f108 0301 	add.w	r3, r8, #1
 801440c:	4433      	add	r3, r6
 801440e:	429d      	cmp	r5, r3
 8014410:	bf38      	it	cc
 8014412:	461d      	movcc	r5, r3
 8014414:	0553      	lsls	r3, r2, #21
 8014416:	d546      	bpl.n	80144a6 <__ssprint_r+0xdc>
 8014418:	4629      	mov	r1, r5
 801441a:	4648      	mov	r0, r9
 801441c:	f7fb ffd0 	bl	80103c0 <_malloc_r>
 8014420:	b998      	cbnz	r0, 801444a <__ssprint_r+0x80>
 8014422:	230c      	movs	r3, #12
 8014424:	f8c9 3000 	str.w	r3, [r9]
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801442e:	81a3      	strh	r3, [r4, #12]
 8014430:	2300      	movs	r3, #0
 8014432:	60bb      	str	r3, [r7, #8]
 8014434:	607b      	str	r3, [r7, #4]
 8014436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801443a:	e031      	b.n	80144a0 <__ssprint_r+0xd6>
 801443c:	f8da b000 	ldr.w	fp, [sl]
 8014440:	f8da 6004 	ldr.w	r6, [sl, #4]
 8014444:	f10a 0a08 	add.w	sl, sl, #8
 8014448:	e7cc      	b.n	80143e4 <__ssprint_r+0x1a>
 801444a:	4642      	mov	r2, r8
 801444c:	6921      	ldr	r1, [r4, #16]
 801444e:	9001      	str	r0, [sp, #4]
 8014450:	f7fc f9c4 	bl	80107dc <memcpy>
 8014454:	89a2      	ldrh	r2, [r4, #12]
 8014456:	9b01      	ldr	r3, [sp, #4]
 8014458:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801445c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014460:	81a2      	strh	r2, [r4, #12]
 8014462:	6123      	str	r3, [r4, #16]
 8014464:	6165      	str	r5, [r4, #20]
 8014466:	4443      	add	r3, r8
 8014468:	eba5 0508 	sub.w	r5, r5, r8
 801446c:	6023      	str	r3, [r4, #0]
 801446e:	60a5      	str	r5, [r4, #8]
 8014470:	4633      	mov	r3, r6
 8014472:	429e      	cmp	r6, r3
 8014474:	d200      	bcs.n	8014478 <__ssprint_r+0xae>
 8014476:	4633      	mov	r3, r6
 8014478:	461a      	mov	r2, r3
 801447a:	4659      	mov	r1, fp
 801447c:	6820      	ldr	r0, [r4, #0]
 801447e:	9301      	str	r3, [sp, #4]
 8014480:	f000 fb1a 	bl	8014ab8 <memmove>
 8014484:	68a2      	ldr	r2, [r4, #8]
 8014486:	9b01      	ldr	r3, [sp, #4]
 8014488:	1ad2      	subs	r2, r2, r3
 801448a:	60a2      	str	r2, [r4, #8]
 801448c:	6822      	ldr	r2, [r4, #0]
 801448e:	4413      	add	r3, r2
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	1b9e      	subs	r6, r3, r6
 8014496:	60be      	str	r6, [r7, #8]
 8014498:	2e00      	cmp	r6, #0
 801449a:	d1cf      	bne.n	801443c <__ssprint_r+0x72>
 801449c:	2000      	movs	r0, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	b003      	add	sp, #12
 80144a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144a6:	462a      	mov	r2, r5
 80144a8:	4648      	mov	r0, r9
 80144aa:	f000 fb31 	bl	8014b10 <_realloc_r>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2800      	cmp	r0, #0
 80144b2:	d1d6      	bne.n	8014462 <__ssprint_r+0x98>
 80144b4:	6921      	ldr	r1, [r4, #16]
 80144b6:	4648      	mov	r0, r9
 80144b8:	f7ff fb1c 	bl	8013af4 <_free_r>
 80144bc:	e7b1      	b.n	8014422 <__ssprint_r+0x58>

080144be <__sprint_r>:
 80144be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c2:	6893      	ldr	r3, [r2, #8]
 80144c4:	4680      	mov	r8, r0
 80144c6:	460f      	mov	r7, r1
 80144c8:	4614      	mov	r4, r2
 80144ca:	b91b      	cbnz	r3, 80144d4 <__sprint_r+0x16>
 80144cc:	6053      	str	r3, [r2, #4]
 80144ce:	4618      	mov	r0, r3
 80144d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80144d6:	049d      	lsls	r5, r3, #18
 80144d8:	d523      	bpl.n	8014522 <__sprint_r+0x64>
 80144da:	6815      	ldr	r5, [r2, #0]
 80144dc:	68a0      	ldr	r0, [r4, #8]
 80144de:	3508      	adds	r5, #8
 80144e0:	b920      	cbnz	r0, 80144ec <__sprint_r+0x2e>
 80144e2:	2300      	movs	r3, #0
 80144e4:	60a3      	str	r3, [r4, #8]
 80144e6:	6063      	str	r3, [r4, #4]
 80144e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ec:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80144f0:	f855 bc08 	ldr.w	fp, [r5, #-8]
 80144f4:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80144f8:	f04f 0900 	mov.w	r9, #0
 80144fc:	45ca      	cmp	sl, r9
 80144fe:	dc05      	bgt.n	801450c <__sprint_r+0x4e>
 8014500:	68a3      	ldr	r3, [r4, #8]
 8014502:	f026 0603 	bic.w	r6, r6, #3
 8014506:	1b9e      	subs	r6, r3, r6
 8014508:	60a6      	str	r6, [r4, #8]
 801450a:	e7e7      	b.n	80144dc <__sprint_r+0x1e>
 801450c:	463a      	mov	r2, r7
 801450e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8014512:	4640      	mov	r0, r8
 8014514:	f000 f905 	bl	8014722 <_fputwc_r>
 8014518:	1c43      	adds	r3, r0, #1
 801451a:	d0e2      	beq.n	80144e2 <__sprint_r+0x24>
 801451c:	f109 0901 	add.w	r9, r9, #1
 8014520:	e7ec      	b.n	80144fc <__sprint_r+0x3e>
 8014522:	f000 f939 	bl	8014798 <__sfvwrite_r>
 8014526:	e7dc      	b.n	80144e2 <__sprint_r+0x24>

08014528 <_write_r>:
 8014528:	b538      	push	{r3, r4, r5, lr}
 801452a:	4c07      	ldr	r4, [pc, #28]	; (8014548 <_write_r+0x20>)
 801452c:	4605      	mov	r5, r0
 801452e:	4608      	mov	r0, r1
 8014530:	4611      	mov	r1, r2
 8014532:	2200      	movs	r2, #0
 8014534:	6022      	str	r2, [r4, #0]
 8014536:	461a      	mov	r2, r3
 8014538:	f7ed f87a 	bl	8001630 <_write>
 801453c:	1c43      	adds	r3, r0, #1
 801453e:	d102      	bne.n	8014546 <_write_r+0x1e>
 8014540:	6823      	ldr	r3, [r4, #0]
 8014542:	b103      	cbz	r3, 8014546 <_write_r+0x1e>
 8014544:	602b      	str	r3, [r5, #0]
 8014546:	bd38      	pop	{r3, r4, r5, pc}
 8014548:	20015ec8 	.word	0x20015ec8

0801454c <_calloc_r>:
 801454c:	b510      	push	{r4, lr}
 801454e:	4351      	muls	r1, r2
 8014550:	f7fb ff36 	bl	80103c0 <_malloc_r>
 8014554:	4604      	mov	r4, r0
 8014556:	b198      	cbz	r0, 8014580 <_calloc_r+0x34>
 8014558:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801455c:	f022 0203 	bic.w	r2, r2, #3
 8014560:	3a04      	subs	r2, #4
 8014562:	2a24      	cmp	r2, #36	; 0x24
 8014564:	d81b      	bhi.n	801459e <_calloc_r+0x52>
 8014566:	2a13      	cmp	r2, #19
 8014568:	d917      	bls.n	801459a <_calloc_r+0x4e>
 801456a:	2100      	movs	r1, #0
 801456c:	2a1b      	cmp	r2, #27
 801456e:	6001      	str	r1, [r0, #0]
 8014570:	6041      	str	r1, [r0, #4]
 8014572:	d807      	bhi.n	8014584 <_calloc_r+0x38>
 8014574:	f100 0308 	add.w	r3, r0, #8
 8014578:	2200      	movs	r2, #0
 801457a:	601a      	str	r2, [r3, #0]
 801457c:	605a      	str	r2, [r3, #4]
 801457e:	609a      	str	r2, [r3, #8]
 8014580:	4620      	mov	r0, r4
 8014582:	bd10      	pop	{r4, pc}
 8014584:	2a24      	cmp	r2, #36	; 0x24
 8014586:	6081      	str	r1, [r0, #8]
 8014588:	60c1      	str	r1, [r0, #12]
 801458a:	bf11      	iteee	ne
 801458c:	f100 0310 	addne.w	r3, r0, #16
 8014590:	6101      	streq	r1, [r0, #16]
 8014592:	f100 0318 	addeq.w	r3, r0, #24
 8014596:	6141      	streq	r1, [r0, #20]
 8014598:	e7ee      	b.n	8014578 <_calloc_r+0x2c>
 801459a:	4603      	mov	r3, r0
 801459c:	e7ec      	b.n	8014578 <_calloc_r+0x2c>
 801459e:	2100      	movs	r1, #0
 80145a0:	f7fc f927 	bl	80107f2 <memset>
 80145a4:	e7ec      	b.n	8014580 <_calloc_r+0x34>
	...

080145a8 <_close_r>:
 80145a8:	b538      	push	{r3, r4, r5, lr}
 80145aa:	4c06      	ldr	r4, [pc, #24]	; (80145c4 <_close_r+0x1c>)
 80145ac:	2300      	movs	r3, #0
 80145ae:	4605      	mov	r5, r0
 80145b0:	4608      	mov	r0, r1
 80145b2:	6023      	str	r3, [r4, #0]
 80145b4:	f7ed f864 	bl	8001680 <_close>
 80145b8:	1c43      	adds	r3, r0, #1
 80145ba:	d102      	bne.n	80145c2 <_close_r+0x1a>
 80145bc:	6823      	ldr	r3, [r4, #0]
 80145be:	b103      	cbz	r3, 80145c2 <_close_r+0x1a>
 80145c0:	602b      	str	r3, [r5, #0]
 80145c2:	bd38      	pop	{r3, r4, r5, pc}
 80145c4:	20015ec8 	.word	0x20015ec8

080145c8 <_fclose_r>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	4605      	mov	r5, r0
 80145cc:	460c      	mov	r4, r1
 80145ce:	b911      	cbnz	r1, 80145d6 <_fclose_r+0xe>
 80145d0:	2600      	movs	r6, #0
 80145d2:	4630      	mov	r0, r6
 80145d4:	bd70      	pop	{r4, r5, r6, pc}
 80145d6:	b118      	cbz	r0, 80145e0 <_fclose_r+0x18>
 80145d8:	6983      	ldr	r3, [r0, #24]
 80145da:	b90b      	cbnz	r3, 80145e0 <_fclose_r+0x18>
 80145dc:	f7ff f9b4 	bl	8013948 <__sinit>
 80145e0:	4b2c      	ldr	r3, [pc, #176]	; (8014694 <_fclose_r+0xcc>)
 80145e2:	429c      	cmp	r4, r3
 80145e4:	d114      	bne.n	8014610 <_fclose_r+0x48>
 80145e6:	686c      	ldr	r4, [r5, #4]
 80145e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145ea:	07d8      	lsls	r0, r3, #31
 80145ec:	d405      	bmi.n	80145fa <_fclose_r+0x32>
 80145ee:	89a3      	ldrh	r3, [r4, #12]
 80145f0:	0599      	lsls	r1, r3, #22
 80145f2:	d402      	bmi.n	80145fa <_fclose_r+0x32>
 80145f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145f6:	f7ff fb67 	bl	8013cc8 <__retarget_lock_acquire_recursive>
 80145fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145fe:	b98b      	cbnz	r3, 8014624 <_fclose_r+0x5c>
 8014600:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8014602:	f016 0601 	ands.w	r6, r6, #1
 8014606:	d1e3      	bne.n	80145d0 <_fclose_r+0x8>
 8014608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801460a:	f7ff fb5e 	bl	8013cca <__retarget_lock_release_recursive>
 801460e:	e7e0      	b.n	80145d2 <_fclose_r+0xa>
 8014610:	4b21      	ldr	r3, [pc, #132]	; (8014698 <_fclose_r+0xd0>)
 8014612:	429c      	cmp	r4, r3
 8014614:	d101      	bne.n	801461a <_fclose_r+0x52>
 8014616:	68ac      	ldr	r4, [r5, #8]
 8014618:	e7e6      	b.n	80145e8 <_fclose_r+0x20>
 801461a:	4b20      	ldr	r3, [pc, #128]	; (801469c <_fclose_r+0xd4>)
 801461c:	429c      	cmp	r4, r3
 801461e:	bf08      	it	eq
 8014620:	68ec      	ldreq	r4, [r5, #12]
 8014622:	e7e1      	b.n	80145e8 <_fclose_r+0x20>
 8014624:	4621      	mov	r1, r4
 8014626:	4628      	mov	r0, r5
 8014628:	f7ff f868 	bl	80136fc <__sflush_r>
 801462c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801462e:	4606      	mov	r6, r0
 8014630:	b133      	cbz	r3, 8014640 <_fclose_r+0x78>
 8014632:	6a21      	ldr	r1, [r4, #32]
 8014634:	4628      	mov	r0, r5
 8014636:	4798      	blx	r3
 8014638:	2800      	cmp	r0, #0
 801463a:	bfb8      	it	lt
 801463c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8014640:	89a3      	ldrh	r3, [r4, #12]
 8014642:	061a      	lsls	r2, r3, #24
 8014644:	d503      	bpl.n	801464e <_fclose_r+0x86>
 8014646:	6921      	ldr	r1, [r4, #16]
 8014648:	4628      	mov	r0, r5
 801464a:	f7ff fa53 	bl	8013af4 <_free_r>
 801464e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014650:	b141      	cbz	r1, 8014664 <_fclose_r+0x9c>
 8014652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014656:	4299      	cmp	r1, r3
 8014658:	d002      	beq.n	8014660 <_fclose_r+0x98>
 801465a:	4628      	mov	r0, r5
 801465c:	f7ff fa4a 	bl	8013af4 <_free_r>
 8014660:	2300      	movs	r3, #0
 8014662:	6363      	str	r3, [r4, #52]	; 0x34
 8014664:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014666:	b121      	cbz	r1, 8014672 <_fclose_r+0xaa>
 8014668:	4628      	mov	r0, r5
 801466a:	f7ff fa43 	bl	8013af4 <_free_r>
 801466e:	2300      	movs	r3, #0
 8014670:	64a3      	str	r3, [r4, #72]	; 0x48
 8014672:	f7ff f951 	bl	8013918 <__sfp_lock_acquire>
 8014676:	2300      	movs	r3, #0
 8014678:	81a3      	strh	r3, [r4, #12]
 801467a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801467c:	07db      	lsls	r3, r3, #31
 801467e:	d402      	bmi.n	8014686 <_fclose_r+0xbe>
 8014680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014682:	f7ff fb22 	bl	8013cca <__retarget_lock_release_recursive>
 8014686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014688:	f7ff fb1d 	bl	8013cc6 <__retarget_lock_close_recursive>
 801468c:	f7ff f94a 	bl	8013924 <__sfp_lock_release>
 8014690:	e79f      	b.n	80145d2 <_fclose_r+0xa>
 8014692:	bf00      	nop
 8014694:	080fafa8 	.word	0x080fafa8
 8014698:	080fafc8 	.word	0x080fafc8
 801469c:	080faf88 	.word	0x080faf88

080146a0 <__fputwc>:
 80146a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146a4:	4680      	mov	r8, r0
 80146a6:	460e      	mov	r6, r1
 80146a8:	4614      	mov	r4, r2
 80146aa:	f000 f9d3 	bl	8014a54 <__locale_mb_cur_max>
 80146ae:	2801      	cmp	r0, #1
 80146b0:	d11c      	bne.n	80146ec <__fputwc+0x4c>
 80146b2:	1e73      	subs	r3, r6, #1
 80146b4:	2bfe      	cmp	r3, #254	; 0xfe
 80146b6:	d819      	bhi.n	80146ec <__fputwc+0x4c>
 80146b8:	f88d 6004 	strb.w	r6, [sp, #4]
 80146bc:	4605      	mov	r5, r0
 80146be:	2700      	movs	r7, #0
 80146c0:	f10d 0904 	add.w	r9, sp, #4
 80146c4:	42af      	cmp	r7, r5
 80146c6:	d020      	beq.n	801470a <__fputwc+0x6a>
 80146c8:	68a3      	ldr	r3, [r4, #8]
 80146ca:	f817 1009 	ldrb.w	r1, [r7, r9]
 80146ce:	3b01      	subs	r3, #1
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	60a3      	str	r3, [r4, #8]
 80146d4:	da04      	bge.n	80146e0 <__fputwc+0x40>
 80146d6:	69a2      	ldr	r2, [r4, #24]
 80146d8:	4293      	cmp	r3, r2
 80146da:	db1a      	blt.n	8014712 <__fputwc+0x72>
 80146dc:	290a      	cmp	r1, #10
 80146de:	d018      	beq.n	8014712 <__fputwc+0x72>
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	6022      	str	r2, [r4, #0]
 80146e6:	7019      	strb	r1, [r3, #0]
 80146e8:	3701      	adds	r7, #1
 80146ea:	e7eb      	b.n	80146c4 <__fputwc+0x24>
 80146ec:	4632      	mov	r2, r6
 80146ee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80146f2:	a901      	add	r1, sp, #4
 80146f4:	4640      	mov	r0, r8
 80146f6:	f000 fbe9 	bl	8014ecc <_wcrtomb_r>
 80146fa:	1c42      	adds	r2, r0, #1
 80146fc:	4605      	mov	r5, r0
 80146fe:	d1de      	bne.n	80146be <__fputwc+0x1e>
 8014700:	89a3      	ldrh	r3, [r4, #12]
 8014702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014706:	81a3      	strh	r3, [r4, #12]
 8014708:	4606      	mov	r6, r0
 801470a:	4630      	mov	r0, r6
 801470c:	b003      	add	sp, #12
 801470e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014712:	4622      	mov	r2, r4
 8014714:	4640      	mov	r0, r8
 8014716:	f000 fb7b 	bl	8014e10 <__swbuf_r>
 801471a:	1c43      	adds	r3, r0, #1
 801471c:	d1e4      	bne.n	80146e8 <__fputwc+0x48>
 801471e:	4606      	mov	r6, r0
 8014720:	e7f3      	b.n	801470a <__fputwc+0x6a>

08014722 <_fputwc_r>:
 8014722:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8014724:	07db      	lsls	r3, r3, #31
 8014726:	b570      	push	{r4, r5, r6, lr}
 8014728:	4605      	mov	r5, r0
 801472a:	460e      	mov	r6, r1
 801472c:	4614      	mov	r4, r2
 801472e:	d405      	bmi.n	801473c <_fputwc_r+0x1a>
 8014730:	8993      	ldrh	r3, [r2, #12]
 8014732:	0598      	lsls	r0, r3, #22
 8014734:	d402      	bmi.n	801473c <_fputwc_r+0x1a>
 8014736:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8014738:	f7ff fac6 	bl	8013cc8 <__retarget_lock_acquire_recursive>
 801473c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014740:	0499      	lsls	r1, r3, #18
 8014742:	d406      	bmi.n	8014752 <_fputwc_r+0x30>
 8014744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014748:	81a3      	strh	r3, [r4, #12]
 801474a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801474c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014750:	6663      	str	r3, [r4, #100]	; 0x64
 8014752:	4622      	mov	r2, r4
 8014754:	4628      	mov	r0, r5
 8014756:	4631      	mov	r1, r6
 8014758:	f7ff ffa2 	bl	80146a0 <__fputwc>
 801475c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801475e:	07da      	lsls	r2, r3, #31
 8014760:	4605      	mov	r5, r0
 8014762:	d405      	bmi.n	8014770 <_fputwc_r+0x4e>
 8014764:	89a3      	ldrh	r3, [r4, #12]
 8014766:	059b      	lsls	r3, r3, #22
 8014768:	d402      	bmi.n	8014770 <_fputwc_r+0x4e>
 801476a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801476c:	f7ff faad 	bl	8013cca <__retarget_lock_release_recursive>
 8014770:	4628      	mov	r0, r5
 8014772:	bd70      	pop	{r4, r5, r6, pc}

08014774 <_fstat_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4c07      	ldr	r4, [pc, #28]	; (8014794 <_fstat_r+0x20>)
 8014778:	2300      	movs	r3, #0
 801477a:	4605      	mov	r5, r0
 801477c:	4608      	mov	r0, r1
 801477e:	4611      	mov	r1, r2
 8014780:	6023      	str	r3, [r4, #0]
 8014782:	f7ec ff80 	bl	8001686 <_fstat>
 8014786:	1c43      	adds	r3, r0, #1
 8014788:	d102      	bne.n	8014790 <_fstat_r+0x1c>
 801478a:	6823      	ldr	r3, [r4, #0]
 801478c:	b103      	cbz	r3, 8014790 <_fstat_r+0x1c>
 801478e:	602b      	str	r3, [r5, #0]
 8014790:	bd38      	pop	{r3, r4, r5, pc}
 8014792:	bf00      	nop
 8014794:	20015ec8 	.word	0x20015ec8

08014798 <__sfvwrite_r>:
 8014798:	6893      	ldr	r3, [r2, #8]
 801479a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801479e:	4607      	mov	r7, r0
 80147a0:	460c      	mov	r4, r1
 80147a2:	4690      	mov	r8, r2
 80147a4:	b91b      	cbnz	r3, 80147ae <__sfvwrite_r+0x16>
 80147a6:	2000      	movs	r0, #0
 80147a8:	b003      	add	sp, #12
 80147aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ae:	898b      	ldrh	r3, [r1, #12]
 80147b0:	0718      	lsls	r0, r3, #28
 80147b2:	d526      	bpl.n	8014802 <__sfvwrite_r+0x6a>
 80147b4:	690b      	ldr	r3, [r1, #16]
 80147b6:	b323      	cbz	r3, 8014802 <__sfvwrite_r+0x6a>
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	f8d8 6000 	ldr.w	r6, [r8]
 80147be:	f013 0902 	ands.w	r9, r3, #2
 80147c2:	d02d      	beq.n	8014820 <__sfvwrite_r+0x88>
 80147c4:	f04f 0a00 	mov.w	sl, #0
 80147c8:	f8df b264 	ldr.w	fp, [pc, #612]	; 8014a30 <__sfvwrite_r+0x298>
 80147cc:	46d1      	mov	r9, sl
 80147ce:	f1b9 0f00 	cmp.w	r9, #0
 80147d2:	d01f      	beq.n	8014814 <__sfvwrite_r+0x7c>
 80147d4:	45d9      	cmp	r9, fp
 80147d6:	464b      	mov	r3, r9
 80147d8:	4652      	mov	r2, sl
 80147da:	bf28      	it	cs
 80147dc:	465b      	movcs	r3, fp
 80147de:	6a21      	ldr	r1, [r4, #32]
 80147e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80147e2:	4638      	mov	r0, r7
 80147e4:	47a8      	blx	r5
 80147e6:	2800      	cmp	r0, #0
 80147e8:	f340 8089 	ble.w	80148fe <__sfvwrite_r+0x166>
 80147ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80147f0:	4482      	add	sl, r0
 80147f2:	eba9 0900 	sub.w	r9, r9, r0
 80147f6:	1a18      	subs	r0, r3, r0
 80147f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d1e6      	bne.n	80147ce <__sfvwrite_r+0x36>
 8014800:	e7d1      	b.n	80147a6 <__sfvwrite_r+0xe>
 8014802:	4621      	mov	r1, r4
 8014804:	4638      	mov	r0, r7
 8014806:	f7fe f8af 	bl	8012968 <__swsetup_r>
 801480a:	2800      	cmp	r0, #0
 801480c:	d0d4      	beq.n	80147b8 <__sfvwrite_r+0x20>
 801480e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014812:	e7c9      	b.n	80147a8 <__sfvwrite_r+0x10>
 8014814:	f8d6 a000 	ldr.w	sl, [r6]
 8014818:	f8d6 9004 	ldr.w	r9, [r6, #4]
 801481c:	3608      	adds	r6, #8
 801481e:	e7d6      	b.n	80147ce <__sfvwrite_r+0x36>
 8014820:	f013 0301 	ands.w	r3, r3, #1
 8014824:	d043      	beq.n	80148ae <__sfvwrite_r+0x116>
 8014826:	4648      	mov	r0, r9
 8014828:	46ca      	mov	sl, r9
 801482a:	46cb      	mov	fp, r9
 801482c:	f1bb 0f00 	cmp.w	fp, #0
 8014830:	f000 80d9 	beq.w	80149e6 <__sfvwrite_r+0x24e>
 8014834:	b950      	cbnz	r0, 801484c <__sfvwrite_r+0xb4>
 8014836:	465a      	mov	r2, fp
 8014838:	210a      	movs	r1, #10
 801483a:	4650      	mov	r0, sl
 801483c:	f7eb fce0 	bl	8000200 <memchr>
 8014840:	2800      	cmp	r0, #0
 8014842:	f000 80d5 	beq.w	80149f0 <__sfvwrite_r+0x258>
 8014846:	3001      	adds	r0, #1
 8014848:	eba0 090a 	sub.w	r9, r0, sl
 801484c:	6820      	ldr	r0, [r4, #0]
 801484e:	6921      	ldr	r1, [r4, #16]
 8014850:	6962      	ldr	r2, [r4, #20]
 8014852:	45d9      	cmp	r9, fp
 8014854:	464b      	mov	r3, r9
 8014856:	bf28      	it	cs
 8014858:	465b      	movcs	r3, fp
 801485a:	4288      	cmp	r0, r1
 801485c:	f240 80cb 	bls.w	80149f6 <__sfvwrite_r+0x25e>
 8014860:	68a5      	ldr	r5, [r4, #8]
 8014862:	4415      	add	r5, r2
 8014864:	42ab      	cmp	r3, r5
 8014866:	f340 80c6 	ble.w	80149f6 <__sfvwrite_r+0x25e>
 801486a:	4651      	mov	r1, sl
 801486c:	462a      	mov	r2, r5
 801486e:	f000 f923 	bl	8014ab8 <memmove>
 8014872:	6823      	ldr	r3, [r4, #0]
 8014874:	442b      	add	r3, r5
 8014876:	6023      	str	r3, [r4, #0]
 8014878:	4621      	mov	r1, r4
 801487a:	4638      	mov	r0, r7
 801487c:	f7fe ffd0 	bl	8013820 <_fflush_r>
 8014880:	2800      	cmp	r0, #0
 8014882:	d13c      	bne.n	80148fe <__sfvwrite_r+0x166>
 8014884:	ebb9 0905 	subs.w	r9, r9, r5
 8014888:	f040 80cf 	bne.w	8014a2a <__sfvwrite_r+0x292>
 801488c:	4621      	mov	r1, r4
 801488e:	4638      	mov	r0, r7
 8014890:	f7fe ffc6 	bl	8013820 <_fflush_r>
 8014894:	2800      	cmp	r0, #0
 8014896:	d132      	bne.n	80148fe <__sfvwrite_r+0x166>
 8014898:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801489c:	44aa      	add	sl, r5
 801489e:	ebab 0b05 	sub.w	fp, fp, r5
 80148a2:	1b5d      	subs	r5, r3, r5
 80148a4:	f8c8 5008 	str.w	r5, [r8, #8]
 80148a8:	2d00      	cmp	r5, #0
 80148aa:	d1bf      	bne.n	801482c <__sfvwrite_r+0x94>
 80148ac:	e77b      	b.n	80147a6 <__sfvwrite_r+0xe>
 80148ae:	4699      	mov	r9, r3
 80148b0:	469a      	mov	sl, r3
 80148b2:	f1ba 0f00 	cmp.w	sl, #0
 80148b6:	d027      	beq.n	8014908 <__sfvwrite_r+0x170>
 80148b8:	89a2      	ldrh	r2, [r4, #12]
 80148ba:	68a5      	ldr	r5, [r4, #8]
 80148bc:	0591      	lsls	r1, r2, #22
 80148be:	d565      	bpl.n	801498c <__sfvwrite_r+0x1f4>
 80148c0:	45aa      	cmp	sl, r5
 80148c2:	d33b      	bcc.n	801493c <__sfvwrite_r+0x1a4>
 80148c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148c8:	d036      	beq.n	8014938 <__sfvwrite_r+0x1a0>
 80148ca:	6921      	ldr	r1, [r4, #16]
 80148cc:	6823      	ldr	r3, [r4, #0]
 80148ce:	1a5b      	subs	r3, r3, r1
 80148d0:	9301      	str	r3, [sp, #4]
 80148d2:	6963      	ldr	r3, [r4, #20]
 80148d4:	2002      	movs	r0, #2
 80148d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148da:	fb93 fbf0 	sdiv	fp, r3, r0
 80148de:	9b01      	ldr	r3, [sp, #4]
 80148e0:	1c58      	adds	r0, r3, #1
 80148e2:	4450      	add	r0, sl
 80148e4:	4583      	cmp	fp, r0
 80148e6:	bf38      	it	cc
 80148e8:	4683      	movcc	fp, r0
 80148ea:	0553      	lsls	r3, r2, #21
 80148ec:	d53e      	bpl.n	801496c <__sfvwrite_r+0x1d4>
 80148ee:	4659      	mov	r1, fp
 80148f0:	4638      	mov	r0, r7
 80148f2:	f7fb fd65 	bl	80103c0 <_malloc_r>
 80148f6:	4605      	mov	r5, r0
 80148f8:	b950      	cbnz	r0, 8014910 <__sfvwrite_r+0x178>
 80148fa:	230c      	movs	r3, #12
 80148fc:	603b      	str	r3, [r7, #0]
 80148fe:	89a3      	ldrh	r3, [r4, #12]
 8014900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014904:	81a3      	strh	r3, [r4, #12]
 8014906:	e782      	b.n	801480e <__sfvwrite_r+0x76>
 8014908:	e896 0600 	ldmia.w	r6, {r9, sl}
 801490c:	3608      	adds	r6, #8
 801490e:	e7d0      	b.n	80148b2 <__sfvwrite_r+0x11a>
 8014910:	9a01      	ldr	r2, [sp, #4]
 8014912:	6921      	ldr	r1, [r4, #16]
 8014914:	f7fb ff62 	bl	80107dc <memcpy>
 8014918:	89a2      	ldrh	r2, [r4, #12]
 801491a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801491e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014922:	81a2      	strh	r2, [r4, #12]
 8014924:	9b01      	ldr	r3, [sp, #4]
 8014926:	6125      	str	r5, [r4, #16]
 8014928:	441d      	add	r5, r3
 801492a:	ebab 0303 	sub.w	r3, fp, r3
 801492e:	6025      	str	r5, [r4, #0]
 8014930:	f8c4 b014 	str.w	fp, [r4, #20]
 8014934:	4655      	mov	r5, sl
 8014936:	60a3      	str	r3, [r4, #8]
 8014938:	45aa      	cmp	sl, r5
 801493a:	d200      	bcs.n	801493e <__sfvwrite_r+0x1a6>
 801493c:	4655      	mov	r5, sl
 801493e:	462a      	mov	r2, r5
 8014940:	4649      	mov	r1, r9
 8014942:	6820      	ldr	r0, [r4, #0]
 8014944:	f000 f8b8 	bl	8014ab8 <memmove>
 8014948:	68a3      	ldr	r3, [r4, #8]
 801494a:	1b5b      	subs	r3, r3, r5
 801494c:	60a3      	str	r3, [r4, #8]
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	441d      	add	r5, r3
 8014952:	6025      	str	r5, [r4, #0]
 8014954:	4655      	mov	r5, sl
 8014956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801495a:	44a9      	add	r9, r5
 801495c:	ebaa 0a05 	sub.w	sl, sl, r5
 8014960:	1b5d      	subs	r5, r3, r5
 8014962:	f8c8 5008 	str.w	r5, [r8, #8]
 8014966:	2d00      	cmp	r5, #0
 8014968:	d1a3      	bne.n	80148b2 <__sfvwrite_r+0x11a>
 801496a:	e71c      	b.n	80147a6 <__sfvwrite_r+0xe>
 801496c:	465a      	mov	r2, fp
 801496e:	4638      	mov	r0, r7
 8014970:	f000 f8ce 	bl	8014b10 <_realloc_r>
 8014974:	4605      	mov	r5, r0
 8014976:	2800      	cmp	r0, #0
 8014978:	d1d4      	bne.n	8014924 <__sfvwrite_r+0x18c>
 801497a:	6921      	ldr	r1, [r4, #16]
 801497c:	4638      	mov	r0, r7
 801497e:	f7ff f8b9 	bl	8013af4 <_free_r>
 8014982:	89a3      	ldrh	r3, [r4, #12]
 8014984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014988:	81a3      	strh	r3, [r4, #12]
 801498a:	e7b6      	b.n	80148fa <__sfvwrite_r+0x162>
 801498c:	6820      	ldr	r0, [r4, #0]
 801498e:	6923      	ldr	r3, [r4, #16]
 8014990:	4298      	cmp	r0, r3
 8014992:	d802      	bhi.n	801499a <__sfvwrite_r+0x202>
 8014994:	6962      	ldr	r2, [r4, #20]
 8014996:	4592      	cmp	sl, r2
 8014998:	d215      	bcs.n	80149c6 <__sfvwrite_r+0x22e>
 801499a:	4555      	cmp	r5, sl
 801499c:	bf28      	it	cs
 801499e:	4655      	movcs	r5, sl
 80149a0:	462a      	mov	r2, r5
 80149a2:	4649      	mov	r1, r9
 80149a4:	f000 f888 	bl	8014ab8 <memmove>
 80149a8:	68a3      	ldr	r3, [r4, #8]
 80149aa:	6822      	ldr	r2, [r4, #0]
 80149ac:	1b5b      	subs	r3, r3, r5
 80149ae:	442a      	add	r2, r5
 80149b0:	60a3      	str	r3, [r4, #8]
 80149b2:	6022      	str	r2, [r4, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d1ce      	bne.n	8014956 <__sfvwrite_r+0x1be>
 80149b8:	4621      	mov	r1, r4
 80149ba:	4638      	mov	r0, r7
 80149bc:	f7fe ff30 	bl	8013820 <_fflush_r>
 80149c0:	2800      	cmp	r0, #0
 80149c2:	d0c8      	beq.n	8014956 <__sfvwrite_r+0x1be>
 80149c4:	e79b      	b.n	80148fe <__sfvwrite_r+0x166>
 80149c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149ca:	4553      	cmp	r3, sl
 80149cc:	bf28      	it	cs
 80149ce:	4653      	movcs	r3, sl
 80149d0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80149d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80149d6:	6a21      	ldr	r1, [r4, #32]
 80149d8:	4353      	muls	r3, r2
 80149da:	4638      	mov	r0, r7
 80149dc:	464a      	mov	r2, r9
 80149de:	47a8      	blx	r5
 80149e0:	1e05      	subs	r5, r0, #0
 80149e2:	dcb8      	bgt.n	8014956 <__sfvwrite_r+0x1be>
 80149e4:	e78b      	b.n	80148fe <__sfvwrite_r+0x166>
 80149e6:	e896 0c00 	ldmia.w	r6, {sl, fp}
 80149ea:	2000      	movs	r0, #0
 80149ec:	3608      	adds	r6, #8
 80149ee:	e71d      	b.n	801482c <__sfvwrite_r+0x94>
 80149f0:	f10b 0901 	add.w	r9, fp, #1
 80149f4:	e72a      	b.n	801484c <__sfvwrite_r+0xb4>
 80149f6:	4293      	cmp	r3, r2
 80149f8:	db09      	blt.n	8014a0e <__sfvwrite_r+0x276>
 80149fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80149fc:	6a21      	ldr	r1, [r4, #32]
 80149fe:	4613      	mov	r3, r2
 8014a00:	4638      	mov	r0, r7
 8014a02:	4652      	mov	r2, sl
 8014a04:	47a8      	blx	r5
 8014a06:	1e05      	subs	r5, r0, #0
 8014a08:	f73f af3c 	bgt.w	8014884 <__sfvwrite_r+0xec>
 8014a0c:	e777      	b.n	80148fe <__sfvwrite_r+0x166>
 8014a0e:	461a      	mov	r2, r3
 8014a10:	4651      	mov	r1, sl
 8014a12:	9301      	str	r3, [sp, #4]
 8014a14:	f000 f850 	bl	8014ab8 <memmove>
 8014a18:	9b01      	ldr	r3, [sp, #4]
 8014a1a:	68a2      	ldr	r2, [r4, #8]
 8014a1c:	1ad2      	subs	r2, r2, r3
 8014a1e:	60a2      	str	r2, [r4, #8]
 8014a20:	6822      	ldr	r2, [r4, #0]
 8014a22:	441a      	add	r2, r3
 8014a24:	6022      	str	r2, [r4, #0]
 8014a26:	461d      	mov	r5, r3
 8014a28:	e72c      	b.n	8014884 <__sfvwrite_r+0xec>
 8014a2a:	2001      	movs	r0, #1
 8014a2c:	e734      	b.n	8014898 <__sfvwrite_r+0x100>
 8014a2e:	bf00      	nop
 8014a30:	7ffffc00 	.word	0x7ffffc00

08014a34 <_isatty_r>:
 8014a34:	b538      	push	{r3, r4, r5, lr}
 8014a36:	4c06      	ldr	r4, [pc, #24]	; (8014a50 <_isatty_r+0x1c>)
 8014a38:	2300      	movs	r3, #0
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	4608      	mov	r0, r1
 8014a3e:	6023      	str	r3, [r4, #0]
 8014a40:	f7ec fe26 	bl	8001690 <_isatty>
 8014a44:	1c43      	adds	r3, r0, #1
 8014a46:	d102      	bne.n	8014a4e <_isatty_r+0x1a>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	b103      	cbz	r3, 8014a4e <_isatty_r+0x1a>
 8014a4c:	602b      	str	r3, [r5, #0]
 8014a4e:	bd38      	pop	{r3, r4, r5, pc}
 8014a50:	20015ec8 	.word	0x20015ec8

08014a54 <__locale_mb_cur_max>:
 8014a54:	4b04      	ldr	r3, [pc, #16]	; (8014a68 <__locale_mb_cur_max+0x14>)
 8014a56:	4a05      	ldr	r2, [pc, #20]	; (8014a6c <__locale_mb_cur_max+0x18>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	6a1b      	ldr	r3, [r3, #32]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	bf08      	it	eq
 8014a60:	4613      	moveq	r3, r2
 8014a62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8014a66:	4770      	bx	lr
 8014a68:	20000138 	.word	0x20000138
 8014a6c:	2000063c 	.word	0x2000063c

08014a70 <_lseek_r>:
 8014a70:	b538      	push	{r3, r4, r5, lr}
 8014a72:	4c07      	ldr	r4, [pc, #28]	; (8014a90 <_lseek_r+0x20>)
 8014a74:	4605      	mov	r5, r0
 8014a76:	4608      	mov	r0, r1
 8014a78:	4611      	mov	r1, r2
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	6022      	str	r2, [r4, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	f7ec fe08 	bl	8001694 <_lseek>
 8014a84:	1c43      	adds	r3, r0, #1
 8014a86:	d102      	bne.n	8014a8e <_lseek_r+0x1e>
 8014a88:	6823      	ldr	r3, [r4, #0]
 8014a8a:	b103      	cbz	r3, 8014a8e <_lseek_r+0x1e>
 8014a8c:	602b      	str	r3, [r5, #0]
 8014a8e:	bd38      	pop	{r3, r4, r5, pc}
 8014a90:	20015ec8 	.word	0x20015ec8

08014a94 <__ascii_mbtowc>:
 8014a94:	b082      	sub	sp, #8
 8014a96:	b901      	cbnz	r1, 8014a9a <__ascii_mbtowc+0x6>
 8014a98:	a901      	add	r1, sp, #4
 8014a9a:	b142      	cbz	r2, 8014aae <__ascii_mbtowc+0x1a>
 8014a9c:	b14b      	cbz	r3, 8014ab2 <__ascii_mbtowc+0x1e>
 8014a9e:	7813      	ldrb	r3, [r2, #0]
 8014aa0:	600b      	str	r3, [r1, #0]
 8014aa2:	7812      	ldrb	r2, [r2, #0]
 8014aa4:	1c10      	adds	r0, r2, #0
 8014aa6:	bf18      	it	ne
 8014aa8:	2001      	movne	r0, #1
 8014aaa:	b002      	add	sp, #8
 8014aac:	4770      	bx	lr
 8014aae:	4610      	mov	r0, r2
 8014ab0:	e7fb      	b.n	8014aaa <__ascii_mbtowc+0x16>
 8014ab2:	f06f 0001 	mvn.w	r0, #1
 8014ab6:	e7f8      	b.n	8014aaa <__ascii_mbtowc+0x16>

08014ab8 <memmove>:
 8014ab8:	4288      	cmp	r0, r1
 8014aba:	b510      	push	{r4, lr}
 8014abc:	eb01 0302 	add.w	r3, r1, r2
 8014ac0:	d803      	bhi.n	8014aca <memmove+0x12>
 8014ac2:	1e42      	subs	r2, r0, #1
 8014ac4:	4299      	cmp	r1, r3
 8014ac6:	d10c      	bne.n	8014ae2 <memmove+0x2a>
 8014ac8:	bd10      	pop	{r4, pc}
 8014aca:	4298      	cmp	r0, r3
 8014acc:	d2f9      	bcs.n	8014ac2 <memmove+0xa>
 8014ace:	1881      	adds	r1, r0, r2
 8014ad0:	1ad2      	subs	r2, r2, r3
 8014ad2:	42d3      	cmn	r3, r2
 8014ad4:	d100      	bne.n	8014ad8 <memmove+0x20>
 8014ad6:	bd10      	pop	{r4, pc}
 8014ad8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014adc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ae0:	e7f7      	b.n	8014ad2 <memmove+0x1a>
 8014ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ae6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014aea:	e7eb      	b.n	8014ac4 <memmove+0xc>

08014aec <_read_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4c07      	ldr	r4, [pc, #28]	; (8014b0c <_read_r+0x20>)
 8014af0:	4605      	mov	r5, r0
 8014af2:	4608      	mov	r0, r1
 8014af4:	4611      	mov	r1, r2
 8014af6:	2200      	movs	r2, #0
 8014af8:	6022      	str	r2, [r4, #0]
 8014afa:	461a      	mov	r2, r3
 8014afc:	f7ec fd8a 	bl	8001614 <_read>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_read_r+0x1e>
 8014b04:	6823      	ldr	r3, [r4, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_read_r+0x1e>
 8014b08:	602b      	str	r3, [r5, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	20015ec8 	.word	0x20015ec8

08014b10 <_realloc_r>:
 8014b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b14:	4682      	mov	sl, r0
 8014b16:	460c      	mov	r4, r1
 8014b18:	b929      	cbnz	r1, 8014b26 <_realloc_r+0x16>
 8014b1a:	4611      	mov	r1, r2
 8014b1c:	b003      	add	sp, #12
 8014b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b22:	f7fb bc4d 	b.w	80103c0 <_malloc_r>
 8014b26:	9201      	str	r2, [sp, #4]
 8014b28:	f7fb fe6c 	bl	8010804 <__malloc_lock>
 8014b2c:	9a01      	ldr	r2, [sp, #4]
 8014b2e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8014b32:	f102 080b 	add.w	r8, r2, #11
 8014b36:	f1b8 0f16 	cmp.w	r8, #22
 8014b3a:	f1a4 0908 	sub.w	r9, r4, #8
 8014b3e:	f025 0603 	bic.w	r6, r5, #3
 8014b42:	d90a      	bls.n	8014b5a <_realloc_r+0x4a>
 8014b44:	f038 0807 	bics.w	r8, r8, #7
 8014b48:	d509      	bpl.n	8014b5e <_realloc_r+0x4e>
 8014b4a:	230c      	movs	r3, #12
 8014b4c:	f8ca 3000 	str.w	r3, [sl]
 8014b50:	2700      	movs	r7, #0
 8014b52:	4638      	mov	r0, r7
 8014b54:	b003      	add	sp, #12
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	f04f 0810 	mov.w	r8, #16
 8014b5e:	4590      	cmp	r8, r2
 8014b60:	d3f3      	bcc.n	8014b4a <_realloc_r+0x3a>
 8014b62:	45b0      	cmp	r8, r6
 8014b64:	f340 8145 	ble.w	8014df2 <_realloc_r+0x2e2>
 8014b68:	4ba8      	ldr	r3, [pc, #672]	; (8014e0c <_realloc_r+0x2fc>)
 8014b6a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8014b6e:	eb09 0106 	add.w	r1, r9, r6
 8014b72:	4571      	cmp	r1, lr
 8014b74:	469b      	mov	fp, r3
 8014b76:	684b      	ldr	r3, [r1, #4]
 8014b78:	d005      	beq.n	8014b86 <_realloc_r+0x76>
 8014b7a:	f023 0001 	bic.w	r0, r3, #1
 8014b7e:	4408      	add	r0, r1
 8014b80:	6840      	ldr	r0, [r0, #4]
 8014b82:	07c7      	lsls	r7, r0, #31
 8014b84:	d447      	bmi.n	8014c16 <_realloc_r+0x106>
 8014b86:	f023 0303 	bic.w	r3, r3, #3
 8014b8a:	4571      	cmp	r1, lr
 8014b8c:	eb06 0703 	add.w	r7, r6, r3
 8014b90:	d119      	bne.n	8014bc6 <_realloc_r+0xb6>
 8014b92:	f108 0010 	add.w	r0, r8, #16
 8014b96:	4287      	cmp	r7, r0
 8014b98:	db3f      	blt.n	8014c1a <_realloc_r+0x10a>
 8014b9a:	eb09 0308 	add.w	r3, r9, r8
 8014b9e:	eba7 0708 	sub.w	r7, r7, r8
 8014ba2:	f047 0701 	orr.w	r7, r7, #1
 8014ba6:	f8cb 3008 	str.w	r3, [fp, #8]
 8014baa:	605f      	str	r7, [r3, #4]
 8014bac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014bb0:	f003 0301 	and.w	r3, r3, #1
 8014bb4:	ea43 0308 	orr.w	r3, r3, r8
 8014bb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8014bbc:	4650      	mov	r0, sl
 8014bbe:	f7fb fe27 	bl	8010810 <__malloc_unlock>
 8014bc2:	4627      	mov	r7, r4
 8014bc4:	e7c5      	b.n	8014b52 <_realloc_r+0x42>
 8014bc6:	45b8      	cmp	r8, r7
 8014bc8:	dc27      	bgt.n	8014c1a <_realloc_r+0x10a>
 8014bca:	68cb      	ldr	r3, [r1, #12]
 8014bcc:	688a      	ldr	r2, [r1, #8]
 8014bce:	60d3      	str	r3, [r2, #12]
 8014bd0:	609a      	str	r2, [r3, #8]
 8014bd2:	eba7 0008 	sub.w	r0, r7, r8
 8014bd6:	280f      	cmp	r0, #15
 8014bd8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014bdc:	eb09 0207 	add.w	r2, r9, r7
 8014be0:	f240 8109 	bls.w	8014df6 <_realloc_r+0x2e6>
 8014be4:	eb09 0108 	add.w	r1, r9, r8
 8014be8:	f003 0301 	and.w	r3, r3, #1
 8014bec:	ea43 0308 	orr.w	r3, r3, r8
 8014bf0:	f040 0001 	orr.w	r0, r0, #1
 8014bf4:	f8c9 3004 	str.w	r3, [r9, #4]
 8014bf8:	6048      	str	r0, [r1, #4]
 8014bfa:	6853      	ldr	r3, [r2, #4]
 8014bfc:	f043 0301 	orr.w	r3, r3, #1
 8014c00:	6053      	str	r3, [r2, #4]
 8014c02:	3108      	adds	r1, #8
 8014c04:	4650      	mov	r0, sl
 8014c06:	f7fe ff75 	bl	8013af4 <_free_r>
 8014c0a:	4650      	mov	r0, sl
 8014c0c:	f7fb fe00 	bl	8010810 <__malloc_unlock>
 8014c10:	f109 0708 	add.w	r7, r9, #8
 8014c14:	e79d      	b.n	8014b52 <_realloc_r+0x42>
 8014c16:	2300      	movs	r3, #0
 8014c18:	4619      	mov	r1, r3
 8014c1a:	07e8      	lsls	r0, r5, #31
 8014c1c:	f100 8084 	bmi.w	8014d28 <_realloc_r+0x218>
 8014c20:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8014c24:	eba9 0505 	sub.w	r5, r9, r5
 8014c28:	6868      	ldr	r0, [r5, #4]
 8014c2a:	f020 0003 	bic.w	r0, r0, #3
 8014c2e:	4430      	add	r0, r6
 8014c30:	2900      	cmp	r1, #0
 8014c32:	d076      	beq.n	8014d22 <_realloc_r+0x212>
 8014c34:	4571      	cmp	r1, lr
 8014c36:	d150      	bne.n	8014cda <_realloc_r+0x1ca>
 8014c38:	4403      	add	r3, r0
 8014c3a:	f108 0110 	add.w	r1, r8, #16
 8014c3e:	428b      	cmp	r3, r1
 8014c40:	db6f      	blt.n	8014d22 <_realloc_r+0x212>
 8014c42:	462f      	mov	r7, r5
 8014c44:	68ea      	ldr	r2, [r5, #12]
 8014c46:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8014c4a:	60ca      	str	r2, [r1, #12]
 8014c4c:	6091      	str	r1, [r2, #8]
 8014c4e:	1f32      	subs	r2, r6, #4
 8014c50:	2a24      	cmp	r2, #36	; 0x24
 8014c52:	d83b      	bhi.n	8014ccc <_realloc_r+0x1bc>
 8014c54:	2a13      	cmp	r2, #19
 8014c56:	d936      	bls.n	8014cc6 <_realloc_r+0x1b6>
 8014c58:	6821      	ldr	r1, [r4, #0]
 8014c5a:	60a9      	str	r1, [r5, #8]
 8014c5c:	6861      	ldr	r1, [r4, #4]
 8014c5e:	60e9      	str	r1, [r5, #12]
 8014c60:	2a1b      	cmp	r2, #27
 8014c62:	d81c      	bhi.n	8014c9e <_realloc_r+0x18e>
 8014c64:	f105 0210 	add.w	r2, r5, #16
 8014c68:	f104 0108 	add.w	r1, r4, #8
 8014c6c:	6808      	ldr	r0, [r1, #0]
 8014c6e:	6010      	str	r0, [r2, #0]
 8014c70:	6848      	ldr	r0, [r1, #4]
 8014c72:	6050      	str	r0, [r2, #4]
 8014c74:	6889      	ldr	r1, [r1, #8]
 8014c76:	6091      	str	r1, [r2, #8]
 8014c78:	eb05 0208 	add.w	r2, r5, r8
 8014c7c:	eba3 0308 	sub.w	r3, r3, r8
 8014c80:	f043 0301 	orr.w	r3, r3, #1
 8014c84:	f8cb 2008 	str.w	r2, [fp, #8]
 8014c88:	6053      	str	r3, [r2, #4]
 8014c8a:	686b      	ldr	r3, [r5, #4]
 8014c8c:	f003 0301 	and.w	r3, r3, #1
 8014c90:	ea43 0308 	orr.w	r3, r3, r8
 8014c94:	606b      	str	r3, [r5, #4]
 8014c96:	4650      	mov	r0, sl
 8014c98:	f7fb fdba 	bl	8010810 <__malloc_unlock>
 8014c9c:	e759      	b.n	8014b52 <_realloc_r+0x42>
 8014c9e:	68a1      	ldr	r1, [r4, #8]
 8014ca0:	6129      	str	r1, [r5, #16]
 8014ca2:	68e1      	ldr	r1, [r4, #12]
 8014ca4:	6169      	str	r1, [r5, #20]
 8014ca6:	2a24      	cmp	r2, #36	; 0x24
 8014ca8:	bf01      	itttt	eq
 8014caa:	6922      	ldreq	r2, [r4, #16]
 8014cac:	61aa      	streq	r2, [r5, #24]
 8014cae:	6960      	ldreq	r0, [r4, #20]
 8014cb0:	61e8      	streq	r0, [r5, #28]
 8014cb2:	bf19      	ittee	ne
 8014cb4:	f105 0218 	addne.w	r2, r5, #24
 8014cb8:	f104 0110 	addne.w	r1, r4, #16
 8014cbc:	f105 0220 	addeq.w	r2, r5, #32
 8014cc0:	f104 0118 	addeq.w	r1, r4, #24
 8014cc4:	e7d2      	b.n	8014c6c <_realloc_r+0x15c>
 8014cc6:	463a      	mov	r2, r7
 8014cc8:	4621      	mov	r1, r4
 8014cca:	e7cf      	b.n	8014c6c <_realloc_r+0x15c>
 8014ccc:	4621      	mov	r1, r4
 8014cce:	4638      	mov	r0, r7
 8014cd0:	9301      	str	r3, [sp, #4]
 8014cd2:	f7ff fef1 	bl	8014ab8 <memmove>
 8014cd6:	9b01      	ldr	r3, [sp, #4]
 8014cd8:	e7ce      	b.n	8014c78 <_realloc_r+0x168>
 8014cda:	18c7      	adds	r7, r0, r3
 8014cdc:	45b8      	cmp	r8, r7
 8014cde:	dc20      	bgt.n	8014d22 <_realloc_r+0x212>
 8014ce0:	68cb      	ldr	r3, [r1, #12]
 8014ce2:	688a      	ldr	r2, [r1, #8]
 8014ce4:	60d3      	str	r3, [r2, #12]
 8014ce6:	609a      	str	r2, [r3, #8]
 8014ce8:	4628      	mov	r0, r5
 8014cea:	68eb      	ldr	r3, [r5, #12]
 8014cec:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014cf0:	60d3      	str	r3, [r2, #12]
 8014cf2:	609a      	str	r2, [r3, #8]
 8014cf4:	1f32      	subs	r2, r6, #4
 8014cf6:	2a24      	cmp	r2, #36	; 0x24
 8014cf8:	d842      	bhi.n	8014d80 <_realloc_r+0x270>
 8014cfa:	2a13      	cmp	r2, #19
 8014cfc:	d93e      	bls.n	8014d7c <_realloc_r+0x26c>
 8014cfe:	6823      	ldr	r3, [r4, #0]
 8014d00:	60ab      	str	r3, [r5, #8]
 8014d02:	6863      	ldr	r3, [r4, #4]
 8014d04:	60eb      	str	r3, [r5, #12]
 8014d06:	2a1b      	cmp	r2, #27
 8014d08:	d824      	bhi.n	8014d54 <_realloc_r+0x244>
 8014d0a:	f105 0010 	add.w	r0, r5, #16
 8014d0e:	f104 0308 	add.w	r3, r4, #8
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	6002      	str	r2, [r0, #0]
 8014d16:	685a      	ldr	r2, [r3, #4]
 8014d18:	6042      	str	r2, [r0, #4]
 8014d1a:	689b      	ldr	r3, [r3, #8]
 8014d1c:	6083      	str	r3, [r0, #8]
 8014d1e:	46a9      	mov	r9, r5
 8014d20:	e757      	b.n	8014bd2 <_realloc_r+0xc2>
 8014d22:	4580      	cmp	r8, r0
 8014d24:	4607      	mov	r7, r0
 8014d26:	dddf      	ble.n	8014ce8 <_realloc_r+0x1d8>
 8014d28:	4611      	mov	r1, r2
 8014d2a:	4650      	mov	r0, sl
 8014d2c:	f7fb fb48 	bl	80103c0 <_malloc_r>
 8014d30:	4607      	mov	r7, r0
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d0af      	beq.n	8014c96 <_realloc_r+0x186>
 8014d36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014d3a:	f023 0301 	bic.w	r3, r3, #1
 8014d3e:	f1a0 0208 	sub.w	r2, r0, #8
 8014d42:	444b      	add	r3, r9
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d11f      	bne.n	8014d88 <_realloc_r+0x278>
 8014d48:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014d4c:	f027 0703 	bic.w	r7, r7, #3
 8014d50:	4437      	add	r7, r6
 8014d52:	e73e      	b.n	8014bd2 <_realloc_r+0xc2>
 8014d54:	68a3      	ldr	r3, [r4, #8]
 8014d56:	612b      	str	r3, [r5, #16]
 8014d58:	68e3      	ldr	r3, [r4, #12]
 8014d5a:	616b      	str	r3, [r5, #20]
 8014d5c:	2a24      	cmp	r2, #36	; 0x24
 8014d5e:	bf01      	itttt	eq
 8014d60:	6923      	ldreq	r3, [r4, #16]
 8014d62:	61ab      	streq	r3, [r5, #24]
 8014d64:	6962      	ldreq	r2, [r4, #20]
 8014d66:	61ea      	streq	r2, [r5, #28]
 8014d68:	bf19      	ittee	ne
 8014d6a:	f105 0018 	addne.w	r0, r5, #24
 8014d6e:	f104 0310 	addne.w	r3, r4, #16
 8014d72:	f105 0020 	addeq.w	r0, r5, #32
 8014d76:	f104 0318 	addeq.w	r3, r4, #24
 8014d7a:	e7ca      	b.n	8014d12 <_realloc_r+0x202>
 8014d7c:	4623      	mov	r3, r4
 8014d7e:	e7c8      	b.n	8014d12 <_realloc_r+0x202>
 8014d80:	4621      	mov	r1, r4
 8014d82:	f7ff fe99 	bl	8014ab8 <memmove>
 8014d86:	e7ca      	b.n	8014d1e <_realloc_r+0x20e>
 8014d88:	1f32      	subs	r2, r6, #4
 8014d8a:	2a24      	cmp	r2, #36	; 0x24
 8014d8c:	d82d      	bhi.n	8014dea <_realloc_r+0x2da>
 8014d8e:	2a13      	cmp	r2, #19
 8014d90:	d928      	bls.n	8014de4 <_realloc_r+0x2d4>
 8014d92:	6823      	ldr	r3, [r4, #0]
 8014d94:	6003      	str	r3, [r0, #0]
 8014d96:	6863      	ldr	r3, [r4, #4]
 8014d98:	6043      	str	r3, [r0, #4]
 8014d9a:	2a1b      	cmp	r2, #27
 8014d9c:	d80e      	bhi.n	8014dbc <_realloc_r+0x2ac>
 8014d9e:	f100 0308 	add.w	r3, r0, #8
 8014da2:	f104 0208 	add.w	r2, r4, #8
 8014da6:	6811      	ldr	r1, [r2, #0]
 8014da8:	6019      	str	r1, [r3, #0]
 8014daa:	6851      	ldr	r1, [r2, #4]
 8014dac:	6059      	str	r1, [r3, #4]
 8014dae:	6892      	ldr	r2, [r2, #8]
 8014db0:	609a      	str	r2, [r3, #8]
 8014db2:	4621      	mov	r1, r4
 8014db4:	4650      	mov	r0, sl
 8014db6:	f7fe fe9d 	bl	8013af4 <_free_r>
 8014dba:	e76c      	b.n	8014c96 <_realloc_r+0x186>
 8014dbc:	68a3      	ldr	r3, [r4, #8]
 8014dbe:	6083      	str	r3, [r0, #8]
 8014dc0:	68e3      	ldr	r3, [r4, #12]
 8014dc2:	60c3      	str	r3, [r0, #12]
 8014dc4:	2a24      	cmp	r2, #36	; 0x24
 8014dc6:	bf01      	itttt	eq
 8014dc8:	6923      	ldreq	r3, [r4, #16]
 8014dca:	6103      	streq	r3, [r0, #16]
 8014dcc:	6961      	ldreq	r1, [r4, #20]
 8014dce:	6141      	streq	r1, [r0, #20]
 8014dd0:	bf19      	ittee	ne
 8014dd2:	f100 0310 	addne.w	r3, r0, #16
 8014dd6:	f104 0210 	addne.w	r2, r4, #16
 8014dda:	f100 0318 	addeq.w	r3, r0, #24
 8014dde:	f104 0218 	addeq.w	r2, r4, #24
 8014de2:	e7e0      	b.n	8014da6 <_realloc_r+0x296>
 8014de4:	4603      	mov	r3, r0
 8014de6:	4622      	mov	r2, r4
 8014de8:	e7dd      	b.n	8014da6 <_realloc_r+0x296>
 8014dea:	4621      	mov	r1, r4
 8014dec:	f7ff fe64 	bl	8014ab8 <memmove>
 8014df0:	e7df      	b.n	8014db2 <_realloc_r+0x2a2>
 8014df2:	4637      	mov	r7, r6
 8014df4:	e6ed      	b.n	8014bd2 <_realloc_r+0xc2>
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	431f      	orrs	r7, r3
 8014dfc:	f8c9 7004 	str.w	r7, [r9, #4]
 8014e00:	6853      	ldr	r3, [r2, #4]
 8014e02:	f043 0301 	orr.w	r3, r3, #1
 8014e06:	6053      	str	r3, [r2, #4]
 8014e08:	e6ff      	b.n	8014c0a <_realloc_r+0xfa>
 8014e0a:	bf00      	nop
 8014e0c:	2000022c 	.word	0x2000022c

08014e10 <__swbuf_r>:
 8014e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e12:	460e      	mov	r6, r1
 8014e14:	4614      	mov	r4, r2
 8014e16:	4605      	mov	r5, r0
 8014e18:	b118      	cbz	r0, 8014e22 <__swbuf_r+0x12>
 8014e1a:	6983      	ldr	r3, [r0, #24]
 8014e1c:	b90b      	cbnz	r3, 8014e22 <__swbuf_r+0x12>
 8014e1e:	f7fe fd93 	bl	8013948 <__sinit>
 8014e22:	4b27      	ldr	r3, [pc, #156]	; (8014ec0 <__swbuf_r+0xb0>)
 8014e24:	429c      	cmp	r4, r3
 8014e26:	d12f      	bne.n	8014e88 <__swbuf_r+0x78>
 8014e28:	686c      	ldr	r4, [r5, #4]
 8014e2a:	69a3      	ldr	r3, [r4, #24]
 8014e2c:	60a3      	str	r3, [r4, #8]
 8014e2e:	89a3      	ldrh	r3, [r4, #12]
 8014e30:	0719      	lsls	r1, r3, #28
 8014e32:	d533      	bpl.n	8014e9c <__swbuf_r+0x8c>
 8014e34:	6923      	ldr	r3, [r4, #16]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d030      	beq.n	8014e9c <__swbuf_r+0x8c>
 8014e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e3e:	b2f6      	uxtb	r6, r6
 8014e40:	049a      	lsls	r2, r3, #18
 8014e42:	4637      	mov	r7, r6
 8014e44:	d534      	bpl.n	8014eb0 <__swbuf_r+0xa0>
 8014e46:	6923      	ldr	r3, [r4, #16]
 8014e48:	6820      	ldr	r0, [r4, #0]
 8014e4a:	1ac0      	subs	r0, r0, r3
 8014e4c:	6963      	ldr	r3, [r4, #20]
 8014e4e:	4298      	cmp	r0, r3
 8014e50:	db04      	blt.n	8014e5c <__swbuf_r+0x4c>
 8014e52:	4621      	mov	r1, r4
 8014e54:	4628      	mov	r0, r5
 8014e56:	f7fe fce3 	bl	8013820 <_fflush_r>
 8014e5a:	bb28      	cbnz	r0, 8014ea8 <__swbuf_r+0x98>
 8014e5c:	68a3      	ldr	r3, [r4, #8]
 8014e5e:	3b01      	subs	r3, #1
 8014e60:	60a3      	str	r3, [r4, #8]
 8014e62:	6823      	ldr	r3, [r4, #0]
 8014e64:	1c5a      	adds	r2, r3, #1
 8014e66:	6022      	str	r2, [r4, #0]
 8014e68:	701e      	strb	r6, [r3, #0]
 8014e6a:	6963      	ldr	r3, [r4, #20]
 8014e6c:	3001      	adds	r0, #1
 8014e6e:	4298      	cmp	r0, r3
 8014e70:	d004      	beq.n	8014e7c <__swbuf_r+0x6c>
 8014e72:	89a3      	ldrh	r3, [r4, #12]
 8014e74:	07db      	lsls	r3, r3, #31
 8014e76:	d519      	bpl.n	8014eac <__swbuf_r+0x9c>
 8014e78:	2e0a      	cmp	r6, #10
 8014e7a:	d117      	bne.n	8014eac <__swbuf_r+0x9c>
 8014e7c:	4621      	mov	r1, r4
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f7fe fcce 	bl	8013820 <_fflush_r>
 8014e84:	b190      	cbz	r0, 8014eac <__swbuf_r+0x9c>
 8014e86:	e00f      	b.n	8014ea8 <__swbuf_r+0x98>
 8014e88:	4b0e      	ldr	r3, [pc, #56]	; (8014ec4 <__swbuf_r+0xb4>)
 8014e8a:	429c      	cmp	r4, r3
 8014e8c:	d101      	bne.n	8014e92 <__swbuf_r+0x82>
 8014e8e:	68ac      	ldr	r4, [r5, #8]
 8014e90:	e7cb      	b.n	8014e2a <__swbuf_r+0x1a>
 8014e92:	4b0d      	ldr	r3, [pc, #52]	; (8014ec8 <__swbuf_r+0xb8>)
 8014e94:	429c      	cmp	r4, r3
 8014e96:	bf08      	it	eq
 8014e98:	68ec      	ldreq	r4, [r5, #12]
 8014e9a:	e7c6      	b.n	8014e2a <__swbuf_r+0x1a>
 8014e9c:	4621      	mov	r1, r4
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	f7fd fd62 	bl	8012968 <__swsetup_r>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d0c8      	beq.n	8014e3a <__swbuf_r+0x2a>
 8014ea8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014eac:	4638      	mov	r0, r7
 8014eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014eb4:	81a3      	strh	r3, [r4, #12]
 8014eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014ebc:	6663      	str	r3, [r4, #100]	; 0x64
 8014ebe:	e7c2      	b.n	8014e46 <__swbuf_r+0x36>
 8014ec0:	080fafa8 	.word	0x080fafa8
 8014ec4:	080fafc8 	.word	0x080fafc8
 8014ec8:	080faf88 	.word	0x080faf88

08014ecc <_wcrtomb_r>:
 8014ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ece:	4605      	mov	r5, r0
 8014ed0:	b085      	sub	sp, #20
 8014ed2:	461e      	mov	r6, r3
 8014ed4:	460f      	mov	r7, r1
 8014ed6:	4c0f      	ldr	r4, [pc, #60]	; (8014f14 <_wcrtomb_r+0x48>)
 8014ed8:	b991      	cbnz	r1, 8014f00 <_wcrtomb_r+0x34>
 8014eda:	6822      	ldr	r2, [r4, #0]
 8014edc:	490e      	ldr	r1, [pc, #56]	; (8014f18 <_wcrtomb_r+0x4c>)
 8014ede:	6a12      	ldr	r2, [r2, #32]
 8014ee0:	2a00      	cmp	r2, #0
 8014ee2:	bf08      	it	eq
 8014ee4:	460a      	moveq	r2, r1
 8014ee6:	a901      	add	r1, sp, #4
 8014ee8:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8014eec:	463a      	mov	r2, r7
 8014eee:	47a0      	blx	r4
 8014ef0:	1c43      	adds	r3, r0, #1
 8014ef2:	bf01      	itttt	eq
 8014ef4:	2300      	moveq	r3, #0
 8014ef6:	6033      	streq	r3, [r6, #0]
 8014ef8:	238a      	moveq	r3, #138	; 0x8a
 8014efa:	602b      	streq	r3, [r5, #0]
 8014efc:	b005      	add	sp, #20
 8014efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f00:	6824      	ldr	r4, [r4, #0]
 8014f02:	4f05      	ldr	r7, [pc, #20]	; (8014f18 <_wcrtomb_r+0x4c>)
 8014f04:	6a24      	ldr	r4, [r4, #32]
 8014f06:	2c00      	cmp	r4, #0
 8014f08:	bf08      	it	eq
 8014f0a:	463c      	moveq	r4, r7
 8014f0c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8014f10:	e7ed      	b.n	8014eee <_wcrtomb_r+0x22>
 8014f12:	bf00      	nop
 8014f14:	20000138 	.word	0x20000138
 8014f18:	2000063c 	.word	0x2000063c

08014f1c <__ascii_wctomb>:
 8014f1c:	b149      	cbz	r1, 8014f32 <__ascii_wctomb+0x16>
 8014f1e:	2aff      	cmp	r2, #255	; 0xff
 8014f20:	bf85      	ittet	hi
 8014f22:	238a      	movhi	r3, #138	; 0x8a
 8014f24:	6003      	strhi	r3, [r0, #0]
 8014f26:	700a      	strbls	r2, [r1, #0]
 8014f28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014f2c:	bf98      	it	ls
 8014f2e:	2001      	movls	r0, #1
 8014f30:	4770      	bx	lr
 8014f32:	4608      	mov	r0, r1
 8014f34:	4770      	bx	lr
	...

08014f38 <_init>:
 8014f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f3a:	bf00      	nop
 8014f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f3e:	bc08      	pop	{r3}
 8014f40:	469e      	mov	lr, r3
 8014f42:	4770      	bx	lr

08014f44 <_fini>:
 8014f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f46:	bf00      	nop
 8014f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f4a:	bc08      	pop	{r3}
 8014f4c:	469e      	mov	lr, r3
 8014f4e:	4770      	bx	lr
